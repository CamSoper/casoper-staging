### YamlMime:ManagedReference
items:
- uid: System.Fabric.IStatefulServiceReplica
  commentId: T:System.Fabric.IStatefulServiceReplica
  id: IStatefulServiceReplica
  parent: System.Fabric
  children:
  - System.Fabric.IStatefulServiceReplica.Abort
  - System.Fabric.IStatefulServiceReplica.ChangeRoleAsync(System.Fabric.ReplicaRole,System.Threading.CancellationToken)
  - System.Fabric.IStatefulServiceReplica.CloseAsync(System.Threading.CancellationToken)
  - System.Fabric.IStatefulServiceReplica.Initialize(System.Fabric.StatefulServiceInitializationParameters)
  - System.Fabric.IStatefulServiceReplica.OpenAsync(System.Fabric.ReplicaOpenMode,System.Fabric.IStatefulServicePartition,System.Threading.CancellationToken)
  langs:
  - csharp
  - vb
  name: IStatefulServiceReplica
  nameWithType: IStatefulServiceReplica
  fullName: System.Fabric.IStatefulServiceReplica
  type: Interface
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/IStatefulServiceReplica.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: IStatefulServiceReplica
    path: src/prod/src/managed/Api/src/System/Fabric/IStatefulServiceReplica.cs
    startLine: 22
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Defines behavior that governs the lifecycle of a replica, such as startup, initialization, role changes, and shutdown. </p>\n"
  remarks: "\n<p>\n    Stateful service types must implement this interface.</p> \n<p>\n    The logic of a stateful service type includes behavior that is invoked on Primary replicas and behavior that is invoked on Secondary replicas.</p>\n<p>\n    If the service author wants to make use of the provided <xref href=\"System.Fabric.FabricReplicator\" data-throw-if-not-resolved=\"false\"></xref>, then the service must also implement <xref href=\"System.Fabric.IStateProvider\" data-throw-if-not-resolved=\"false\"></xref> to use the implementation of <xref href=\"System.Fabric.IStateReplicator\" data-throw-if-not-resolved=\"false\"></xref> that is provided by <xref href=\"System.Fabric.FabricReplicator\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example: []
  syntax:
    content: public interface IStatefulServiceReplica
    content.vb: Public Interface IStatefulServiceReplica
  extensionMethods:
  - System.Fabric.IStatefulServiceReplica.System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: System.Fabric.IStatefulServiceReplica.Initialize(System.Fabric.StatefulServiceInitializationParameters)
  commentId: M:System.Fabric.IStatefulServiceReplica.Initialize(System.Fabric.StatefulServiceInitializationParameters)
  id: Initialize(System.Fabric.StatefulServiceInitializationParameters)
  parent: System.Fabric.IStatefulServiceReplica
  langs:
  - csharp
  - vb
  name: Initialize(StatefulServiceInitializationParameters)
  nameWithType: IStatefulServiceReplica.Initialize(StatefulServiceInitializationParameters)
  fullName: System.Fabric.IStatefulServiceReplica.Initialize(System.Fabric.StatefulServiceInitializationParameters)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/IStatefulServiceReplica.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: Initialize
    path: src/prod/src/managed/Api/src/System/Fabric/IStatefulServiceReplica.cs
    startLine: 30
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Initializes a newly created service replica.</p>\n"
  example: []
  syntax:
    content: void Initialize(StatefulServiceInitializationParameters initializationParameters)
    content.vb: Sub Initialize(initializationParameters As StatefulServiceInitializationParameters)
    parameters:
    - id: initializationParameters
      type: System.Fabric.StatefulServiceInitializationParameters
      description: "\n<p>The <xref href=\"System.Fabric.StatefulServiceInitializationParameters\" data-throw-if-not-resolved=\"false\"></xref> for this replica.</p>\n"
  overload: System.Fabric.IStatefulServiceReplica.Initialize*
- uid: System.Fabric.IStatefulServiceReplica.OpenAsync(System.Fabric.ReplicaOpenMode,System.Fabric.IStatefulServicePartition,System.Threading.CancellationToken)
  commentId: M:System.Fabric.IStatefulServiceReplica.OpenAsync(System.Fabric.ReplicaOpenMode,System.Fabric.IStatefulServicePartition,System.Threading.CancellationToken)
  id: OpenAsync(System.Fabric.ReplicaOpenMode,System.Fabric.IStatefulServicePartition,System.Threading.CancellationToken)
  parent: System.Fabric.IStatefulServiceReplica
  langs:
  - csharp
  - vb
  name: OpenAsync(ReplicaOpenMode, IStatefulServicePartition, CancellationToken)
  nameWithType: IStatefulServiceReplica.OpenAsync(ReplicaOpenMode, IStatefulServicePartition, CancellationToken)
  fullName: System.Fabric.IStatefulServiceReplica.OpenAsync(System.Fabric.ReplicaOpenMode, System.Fabric.IStatefulServicePartition, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/IStatefulServiceReplica.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: OpenAsync
    path: src/prod/src/managed/Api/src/System/Fabric/IStatefulServiceReplica.cs
    startLine: 51
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Opens an initialized service replica so that additional actions can be taken.</p>\n"
  example: []
  syntax:
    content: Task<IReplicator> OpenAsync(ReplicaOpenMode openMode, IStatefulServicePartition partition, CancellationToken cancellationToken)
    content.vb: Function OpenAsync(openMode As ReplicaOpenMode, partition As IStatefulServicePartition, cancellationToken As CancellationToken) As Task(Of IReplicator)
    parameters:
    - id: openMode
      type: System.Fabric.ReplicaOpenMode
      description: "\n<p>This supports the Service Fabric infrastructure and is not meant to be used directly from your code.</p>\n"
    - id: partition
      type: System.Fabric.IStatefulServicePartition
      description: "\n<p>The <xref href=\"System.Fabric.IStatefulServicePartition\" data-throw-if-not-resolved=\"false\"></xref> information for this replica.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> object that the operation is observing. It can be used to send a notification that the operation should be canceled. Note that cancellation is advisory and that the operation might still be completed even if it is canceled.</p>\n"
    return:
      type: System.Threading.Tasks.Task{System.Fabric.IReplicator}
      description: "\n<p>Returns <xref href=\"System.Threading.Tasks.Task%601\" data-throw-if-not-resolved=\"false\"></xref>&lt;<xref href=\"System.Fabric.IReplicator\" data-throw-if-not-resolved=\"false\"></xref>&gt;, \nthe <xref href=\"System.Fabric.IReplicator\" data-throw-if-not-resolved=\"false\"></xref> that is used by the stateful service. To use the Service Fabric implementation, \nin <xref href=\"System.Fabric.IStatefulServiceReplica.OpenAsync(System.Fabric.ReplicaOpenMode%2cSystem.Fabric.IStatefulServicePartition%2cSystem.Threading.CancellationToken)\" data-throw-if-not-resolved=\"false\"></xref>, \nthe replica should return a <xref href=\"System.Fabric.FabricReplicator\" data-throw-if-not-resolved=\"false\"></xref> that is obtained \nfrom  <xref href=\"System.Fabric.IStatefulServicePartition.CreateReplicator(System.Fabric.IStateProvider%2cSystem.Fabric.ReplicatorSettings)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  overload: System.Fabric.IStatefulServiceReplica.OpenAsync*
- uid: System.Fabric.IStatefulServiceReplica.ChangeRoleAsync(System.Fabric.ReplicaRole,System.Threading.CancellationToken)
  commentId: M:System.Fabric.IStatefulServiceReplica.ChangeRoleAsync(System.Fabric.ReplicaRole,System.Threading.CancellationToken)
  id: ChangeRoleAsync(System.Fabric.ReplicaRole,System.Threading.CancellationToken)
  parent: System.Fabric.IStatefulServiceReplica
  langs:
  - csharp
  - vb
  name: ChangeRoleAsync(ReplicaRole, CancellationToken)
  nameWithType: IStatefulServiceReplica.ChangeRoleAsync(ReplicaRole, CancellationToken)
  fullName: System.Fabric.IStatefulServiceReplica.ChangeRoleAsync(System.Fabric.ReplicaRole, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/IStatefulServiceReplica.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: ChangeRoleAsync
    path: src/prod/src/managed/Api/src/System/Fabric/IStatefulServiceReplica.cs
    startLine: 72
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Changes the role of a Primary or Secondary replica. </p>\n"
  remarks: "\n<p>The new role is indicated as a parameter. When the service transitions to the new role, the service has a chance to update its current listening address.\nThe listening address is the address where clients connect to it. This enables the service when it is a Primary replica to only claim some resources such as ports \nwhen communication from clients is expected.</p>\n"
  example: []
  syntax:
    content: Task<string> ChangeRoleAsync(ReplicaRole newRole, CancellationToken cancellationToken)
    content.vb: Function ChangeRoleAsync(newRole As ReplicaRole, cancellationToken As CancellationToken) As Task(Of String)
    parameters:
    - id: newRole
      type: System.Fabric.ReplicaRole
      description: "\n<p>The updated <xref href=\"System.Fabric.ReplicaRole\" data-throw-if-not-resolved=\"false\"></xref> that this replica should transition to.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> object that the operation is observing. It can be used to send a notification that the operation should be canceled.\nNote that cancellation is advisory and that the operation might still be completed even if it is canceled.</p>\n"
    return:
      type: System.Threading.Tasks.Task{System.String}
      description: "\n<p>Returns <xref href=\"System.Threading.Tasks.Task%601\" data-throw-if-not-resolved=\"false\"></xref> of type <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref>, the service’s new connection address that is to be associated\nwith the replica via Service Fabric Naming.</p>\n"
  overload: System.Fabric.IStatefulServiceReplica.ChangeRoleAsync*
- uid: System.Fabric.IStatefulServiceReplica.CloseAsync(System.Threading.CancellationToken)
  commentId: M:System.Fabric.IStatefulServiceReplica.CloseAsync(System.Threading.CancellationToken)
  id: CloseAsync(System.Threading.CancellationToken)
  parent: System.Fabric.IStatefulServiceReplica
  langs:
  - csharp
  - vb
  name: CloseAsync(CancellationToken)
  nameWithType: IStatefulServiceReplica.CloseAsync(CancellationToken)
  fullName: System.Fabric.IStatefulServiceReplica.CloseAsync(System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/IStatefulServiceReplica.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: CloseAsync
    path: src/prod/src/managed/Api/src/System/Fabric/IStatefulServiceReplica.cs
    startLine: 85
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Closes the service replica when it is being shut down.</p>\n"
  example: []
  syntax:
    content: Task CloseAsync(CancellationToken cancellationToken)
    content.vb: Function CloseAsync(cancellationToken As CancellationToken) As Task
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> object that the operation is observing. It can be used to send a notification that the operation should be canceled. \nNote that cancellation is advisory and that the operation might still be completed even if it is canceled.</p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>Returns <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  overload: System.Fabric.IStatefulServiceReplica.CloseAsync*
- uid: System.Fabric.IStatefulServiceReplica.Abort
  commentId: M:System.Fabric.IStatefulServiceReplica.Abort
  id: Abort
  parent: System.Fabric.IStatefulServiceReplica
  langs:
  - csharp
  - vb
  name: Abort()
  nameWithType: IStatefulServiceReplica.Abort()
  fullName: System.Fabric.IStatefulServiceReplica.Abort()
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/IStatefulServiceReplica.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: Abort
    path: src/prod/src/managed/Api/src/System/Fabric/IStatefulServiceReplica.cs
    startLine: 95
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Ungracefully terminates an instance.</p>\n"
  remarks: "\n<p>Lease loss and, in response to the service, the use of <xref href=\"System.Fabric.IServicePartition.ReportFault(System.Fabric.FaultType)\" data-throw-if-not-resolved=\"false\"></xref> \nto report a <xref href=\"System.Fabric.FaultType.Permanent\" data-throw-if-not-resolved=\"false\"></xref> fault are examples of ungraceful termination. When this method is invoked, \nthe service instance should immediately release and clean up all references and return.</p>\n"
  example: []
  syntax:
    content: void Abort()
    content.vb: Sub Abort
  overload: System.Fabric.IStatefulServiceReplica.Abort*
references:
- uid: System.Fabric.FabricReplicator
  commentId: T:System.Fabric.FabricReplicator
  parent: System.Fabric
  isExternal: false
  name: FabricReplicator
  nameWithType: FabricReplicator
  fullName: System.Fabric.FabricReplicator
- uid: System.Fabric.IStateProvider
  commentId: T:System.Fabric.IStateProvider
  parent: System.Fabric
  isExternal: false
  name: IStateProvider
  nameWithType: IStateProvider
  fullName: System.Fabric.IStateProvider
- uid: System.Fabric.IStateReplicator
  commentId: T:System.Fabric.IStateReplicator
  parent: System.Fabric
  isExternal: false
  name: IStateReplicator
  nameWithType: IStateReplicator
  fullName: System.Fabric.IStateReplicator
- uid: System.Fabric
  commentId: N:System.Fabric
  isExternal: false
  name: System.Fabric
  nameWithType: System.Fabric
  fullName: System.Fabric
- uid: System.Fabric.IStatefulServiceReplica.System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
  commentId: M:System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  parent: System.Fabric.Messaging.Stream.ByteArraySerializer
  definition: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  name: Serialize<IStatefulServiceReplica>()
  nameWithType: ByteArraySerializer.Serialize<IStatefulServiceReplica>()
  fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<System.Fabric.IStatefulServiceReplica>()
  nameWithType.vb: ByteArraySerializer.Serialize(Of IStatefulServiceReplica)()
  fullname.vb: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of System.Fabric.IStatefulServiceReplica)()
  name.vb: Serialize(Of IStatefulServiceReplica)()
  spec.csharp:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
    name: Serialize<IStatefulServiceReplica>
    nameWithType: ByteArraySerializer.Serialize<IStatefulServiceReplica>
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<System.Fabric.IStatefulServiceReplica>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
    name: Serialize(Of IStatefulServiceReplica)
    nameWithType: ByteArraySerializer.Serialize(Of IStatefulServiceReplica)
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of System.Fabric.IStatefulServiceReplica)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  commentId: M:System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  isExternal: false
  name: Serialize<T>(T)
  nameWithType: ByteArraySerializer.Serialize<T>(T)
  fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<T>(T)
  nameWithType.vb: ByteArraySerializer.Serialize(Of T)(T)
  fullname.vb: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of T)(T)
  name.vb: Serialize(Of T)(T)
  spec.csharp:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
    name: Serialize<T>
    nameWithType: ByteArraySerializer.Serialize<T>
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
    name: Serialize(Of T)
    nameWithType: ByteArraySerializer.Serialize(Of T)
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.Messaging.Stream.ByteArraySerializer
  commentId: T:System.Fabric.Messaging.Stream.ByteArraySerializer
  parent: System.Fabric.Messaging.Stream
  isExternal: false
  name: ByteArraySerializer
  nameWithType: ByteArraySerializer
  fullName: System.Fabric.Messaging.Stream.ByteArraySerializer
- uid: System.Fabric.Messaging.Stream
  commentId: N:System.Fabric.Messaging.Stream
  isExternal: false
  name: System.Fabric.Messaging.Stream
  nameWithType: System.Fabric.Messaging.Stream
  fullName: System.Fabric.Messaging.Stream
- uid: System.Fabric.StatefulServiceInitializationParameters
  commentId: T:System.Fabric.StatefulServiceInitializationParameters
  parent: System.Fabric
  isExternal: false
  name: StatefulServiceInitializationParameters
  nameWithType: StatefulServiceInitializationParameters
  fullName: System.Fabric.StatefulServiceInitializationParameters
- uid: System.Fabric.IStatefulServiceReplica.Initialize*
  commentId: Overload:System.Fabric.IStatefulServiceReplica.Initialize
  isExternal: false
  name: Initialize
  nameWithType: IStatefulServiceReplica.Initialize
  fullName: System.Fabric.IStatefulServiceReplica.Initialize
- uid: System.Fabric.IStatefulServicePartition
  commentId: T:System.Fabric.IStatefulServicePartition
  parent: System.Fabric
  isExternal: false
  name: IStatefulServicePartition
  nameWithType: IStatefulServicePartition
  fullName: System.Fabric.IStatefulServicePartition
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullname.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.IReplicator
  commentId: T:System.Fabric.IReplicator
  parent: System.Fabric
  isExternal: false
  name: IReplicator
  nameWithType: IReplicator
  fullName: System.Fabric.IReplicator
- uid: System.Fabric.IStatefulServiceReplica.OpenAsync(System.Fabric.ReplicaOpenMode,System.Fabric.IStatefulServicePartition,System.Threading.CancellationToken)
  commentId: M:System.Fabric.IStatefulServiceReplica.OpenAsync(System.Fabric.ReplicaOpenMode,System.Fabric.IStatefulServicePartition,System.Threading.CancellationToken)
  parent: System.Fabric.IStatefulServiceReplica
  isExternal: true
  name: OpenAsync(ReplicaOpenMode, IStatefulServicePartition, CancellationToken)
  nameWithType: IStatefulServiceReplica.OpenAsync(ReplicaOpenMode, IStatefulServicePartition, CancellationToken)
  fullName: System.Fabric.IStatefulServiceReplica.OpenAsync(System.Fabric.ReplicaOpenMode, System.Fabric.IStatefulServicePartition, System.Threading.CancellationToken)
  spec.csharp:
  - uid: System.Fabric.IStatefulServiceReplica.OpenAsync(System.Fabric.ReplicaOpenMode,System.Fabric.IStatefulServicePartition,System.Threading.CancellationToken)
    name: OpenAsync
    nameWithType: IStatefulServiceReplica.OpenAsync
    fullName: System.Fabric.IStatefulServiceReplica.OpenAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Fabric.ReplicaOpenMode
    name: ReplicaOpenMode
    nameWithType: ReplicaOpenMode
    fullName: System.Fabric.ReplicaOpenMode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Fabric.IStatefulServicePartition
    name: IStatefulServicePartition
    nameWithType: IStatefulServicePartition
    fullName: System.Fabric.IStatefulServicePartition
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Fabric.IStatefulServiceReplica.OpenAsync(System.Fabric.ReplicaOpenMode,System.Fabric.IStatefulServicePartition,System.Threading.CancellationToken)
    name: OpenAsync
    nameWithType: IStatefulServiceReplica.OpenAsync
    fullName: System.Fabric.IStatefulServiceReplica.OpenAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Fabric.ReplicaOpenMode
    name: ReplicaOpenMode
    nameWithType: ReplicaOpenMode
    fullName: System.Fabric.ReplicaOpenMode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Fabric.IStatefulServicePartition
    name: IStatefulServicePartition
    nameWithType: IStatefulServicePartition
    fullName: System.Fabric.IStatefulServicePartition
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.IStatefulServicePartition.CreateReplicator(System.Fabric.IStateProvider,System.Fabric.ReplicatorSettings)
  commentId: M:System.Fabric.IStatefulServicePartition.CreateReplicator(System.Fabric.IStateProvider,System.Fabric.ReplicatorSettings)
- uid: System.Fabric.IStatefulServiceReplica.OpenAsync*
  commentId: Overload:System.Fabric.IStatefulServiceReplica.OpenAsync
  isExternal: false
  name: OpenAsync
  nameWithType: IStatefulServiceReplica.OpenAsync
  fullName: System.Fabric.IStatefulServiceReplica.OpenAsync
- uid: System.Fabric.ReplicaOpenMode
  commentId: T:System.Fabric.ReplicaOpenMode
  parent: System.Fabric
  isExternal: false
  name: ReplicaOpenMode
  nameWithType: ReplicaOpenMode
  fullName: System.Fabric.ReplicaOpenMode
- uid: System.Threading.Tasks.Task{System.Fabric.IReplicator}
  commentId: T:System.Threading.Tasks.Task{System.Fabric.IReplicator}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<IReplicator>
  nameWithType: Task<IReplicator>
  fullName: System.Threading.Tasks.Task<System.Fabric.IReplicator>
  nameWithType.vb: Task(Of IReplicator)
  fullname.vb: System.Threading.Tasks.Task(Of System.Fabric.IReplicator)
  name.vb: Task(Of IReplicator)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Fabric.IReplicator
    name: IReplicator
    nameWithType: IReplicator
    fullName: System.Fabric.IReplicator
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Fabric.IReplicator
    name: IReplicator
    nameWithType: IReplicator
    fullName: System.Fabric.IReplicator
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: false
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
- uid: System.Fabric.IStatefulServiceReplica
  commentId: T:System.Fabric.IStatefulServiceReplica
  parent: System.Fabric
  isExternal: false
  name: IStatefulServiceReplica
  nameWithType: IStatefulServiceReplica
  fullName: System.Fabric.IStatefulServiceReplica
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: System.Fabric.ReplicaRole
  commentId: T:System.Fabric.ReplicaRole
  parent: System.Fabric
  isExternal: false
  name: ReplicaRole
  nameWithType: ReplicaRole
  fullName: System.Fabric.ReplicaRole
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Fabric.IStatefulServiceReplica.ChangeRoleAsync*
  commentId: Overload:System.Fabric.IStatefulServiceReplica.ChangeRoleAsync
  isExternal: false
  name: ChangeRoleAsync
  nameWithType: IStatefulServiceReplica.ChangeRoleAsync
  fullName: System.Fabric.IStatefulServiceReplica.ChangeRoleAsync
- uid: System.Threading.Tasks.Task{System.String}
  commentId: T:System.Threading.Tasks.Task{System.String}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<String>
  nameWithType: Task<String>
  fullName: System.Threading.Tasks.Task<System.String>
  nameWithType.vb: Task(Of String)
  fullname.vb: System.Threading.Tasks.Task(Of System.String)
  name.vb: Task(Of String)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Fabric.IStatefulServiceReplica.CloseAsync*
  commentId: Overload:System.Fabric.IStatefulServiceReplica.CloseAsync
  isExternal: false
  name: CloseAsync
  nameWithType: IStatefulServiceReplica.CloseAsync
  fullName: System.Fabric.IStatefulServiceReplica.CloseAsync
- uid: System.Fabric.IServicePartition.ReportFault(System.Fabric.FaultType)
  commentId: M:System.Fabric.IServicePartition.ReportFault(System.Fabric.FaultType)
  parent: System.Fabric.IServicePartition
  isExternal: false
  name: ReportFault(FaultType)
  nameWithType: IServicePartition.ReportFault(FaultType)
  fullName: System.Fabric.IServicePartition.ReportFault(System.Fabric.FaultType)
  spec.csharp:
  - uid: System.Fabric.IServicePartition.ReportFault(System.Fabric.FaultType)
    name: ReportFault
    nameWithType: IServicePartition.ReportFault
    fullName: System.Fabric.IServicePartition.ReportFault
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Fabric.FaultType
    name: FaultType
    nameWithType: FaultType
    fullName: System.Fabric.FaultType
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Fabric.IServicePartition.ReportFault(System.Fabric.FaultType)
    name: ReportFault
    nameWithType: IServicePartition.ReportFault
    fullName: System.Fabric.IServicePartition.ReportFault
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Fabric.FaultType
    name: FaultType
    nameWithType: FaultType
    fullName: System.Fabric.FaultType
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.FaultType.Permanent
  commentId: F:System.Fabric.FaultType.Permanent
- uid: System.Fabric.IStatefulServiceReplica.Abort*
  commentId: Overload:System.Fabric.IStatefulServiceReplica.Abort
  isExternal: false
  name: Abort
  nameWithType: IStatefulServiceReplica.Abort
  fullName: System.Fabric.IStatefulServiceReplica.Abort
- uid: System.Fabric.IServicePartition
  commentId: T:System.Fabric.IServicePartition
  parent: System.Fabric
  isExternal: false
  name: IServicePartition
  nameWithType: IServicePartition
  fullName: System.Fabric.IServicePartition
