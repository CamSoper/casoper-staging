### YamlMime:ManagedReference
items:
- uid: System.Fabric.IStateProvider
  commentId: T:System.Fabric.IStateProvider
  id: IStateProvider
  parent: System.Fabric
  children:
  - System.Fabric.IStateProvider.GetCopyContext
  - System.Fabric.IStateProvider.GetCopyState(System.Int64,System.Fabric.IOperationDataStream)
  - System.Fabric.IStateProvider.GetLastCommittedSequenceNumber
  - System.Fabric.IStateProvider.OnDataLossAsync(System.Threading.CancellationToken)
  - System.Fabric.IStateProvider.UpdateEpochAsync(System.Fabric.Epoch,System.Int64,System.Threading.CancellationToken)
  langs:
  - csharp
  - vb
  name: IStateProvider
  nameWithType: IStateProvider
  fullName: System.Fabric.IStateProvider
  type: Interface
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/IStateProvider.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: IStateProvider
    path: src/prod/src/managed/Api/src/System/Fabric/IStateProvider.cs
    startLine: 14
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Defines the behavior that a service must implement to interact with the <xref href=\"System.Fabric.FabricReplicator\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example: []
  syntax:
    content: public interface IStateProvider
    content.vb: Public Interface IStateProvider
  extensionMethods:
  - System.Fabric.IStateProvider.System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: System.Fabric.IStateProvider.GetLastCommittedSequenceNumber
  commentId: M:System.Fabric.IStateProvider.GetLastCommittedSequenceNumber
  id: GetLastCommittedSequenceNumber
  parent: System.Fabric.IStateProvider
  langs:
  - csharp
  - vb
  name: GetLastCommittedSequenceNumber()
  nameWithType: IStateProvider.GetLastCommittedSequenceNumber()
  fullName: System.Fabric.IStateProvider.GetLastCommittedSequenceNumber()
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/IStateProvider.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: GetLastCommittedSequenceNumber
    path: src/prod/src/managed/Api/src/System/Fabric/IStateProvider.cs
    startLine: 22
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Obtains the last sequence number that the service has committed. </p>\n"
  example: []
  syntax:
    content: long GetLastCommittedSequenceNumber()
    content.vb: Function GetLastCommittedSequenceNumber As Long
    return:
      type: System.Int64
      description: "\n<p>Returns <xref href=\"System.Int64\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  overload: System.Fabric.IStateProvider.GetLastCommittedSequenceNumber*
- uid: System.Fabric.IStateProvider.UpdateEpochAsync(System.Fabric.Epoch,System.Int64,System.Threading.CancellationToken)
  commentId: M:System.Fabric.IStateProvider.UpdateEpochAsync(System.Fabric.Epoch,System.Int64,System.Threading.CancellationToken)
  id: UpdateEpochAsync(System.Fabric.Epoch,System.Int64,System.Threading.CancellationToken)
  parent: System.Fabric.IStateProvider
  langs:
  - csharp
  - vb
  name: UpdateEpochAsync(Epoch, Int64, CancellationToken)
  nameWithType: IStateProvider.UpdateEpochAsync(Epoch, Int64, CancellationToken)
  fullName: System.Fabric.IStateProvider.UpdateEpochAsync(System.Fabric.Epoch, System.Int64, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/IStateProvider.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: UpdateEpochAsync
    path: src/prod/src/managed/Api/src/System/Fabric/IStateProvider.cs
    startLine: 52
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Indicates to a replica that the configuration of a replica set has changed due to a change or attempted change to the Primary replica. \nThe change occurs due to failure or load balancing of the previous Primary replica. Epoch changes act as a barrier by segmenting operations \ninto the exact configuration periods in which they were sent by a specific Primary replica.</p>\n"
  remarks: "\n<p>The information in the <xref href=\"System.Fabric.IStateProvider.UpdateEpochAsync(System.Fabric.Epoch%2cSystem.Int64%2cSystem.Threading.CancellationToken)\" data-throw-if-not-resolved=\"false\"></xref> \nmethod enables the service to maintain a progress vector, which is a list of each epoch that the replica has received, and the maximum LSN that they contained. </p>\n<p>\n    The progress vector data along with the current applied maximum LSN is useful for a Secondary replica to send during the copy operation to describe the state of the replica.</p> \n<p>\n    Comparing progress vectors that are received from Secondary replicas during the copy operation enables Primary replicas to determine whether the Secondary replica is up-to-date, \n    what state must be sent to the Secondary replica, and whether the Secondary replica has made false progress. </p>\n<p>False progress means that a secondary replica reports an LSN in a previous epoch was greater than the LSN that the Primary replica has in its progress vector. </p>\n"
  example: []
  syntax:
    content: Task UpdateEpochAsync(Epoch epoch, long previousEpochLastSequenceNumber, CancellationToken cancellationToken)
    content.vb: Function UpdateEpochAsync(epoch As Epoch, previousEpochLastSequenceNumber As Long, cancellationToken As CancellationToken) As Task
    parameters:
    - id: epoch
      type: System.Fabric.Epoch
      description: "\n<p>The new <xref href=\"System.Fabric.Epoch\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    - id: previousEpochLastSequenceNumber
      type: System.Int64
      description: "\n<p> The maximum sequence number (LSN) in the previous epoch.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> object that the operation is observing. It can be used to send a notification \nthat the operation should be canceled. Note that cancellation is advisory and that the operation might still be completed even if it is canceled.</p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>Returns <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  overload: System.Fabric.IStateProvider.UpdateEpochAsync*
- uid: System.Fabric.IStateProvider.OnDataLossAsync(System.Threading.CancellationToken)
  commentId: M:System.Fabric.IStateProvider.OnDataLossAsync(System.Threading.CancellationToken)
  id: OnDataLossAsync(System.Threading.CancellationToken)
  parent: System.Fabric.IStateProvider
  langs:
  - csharp
  - vb
  name: OnDataLossAsync(CancellationToken)
  nameWithType: IStateProvider.OnDataLossAsync(CancellationToken)
  fullName: System.Fabric.IStateProvider.OnDataLossAsync(System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/IStateProvider.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: OnDataLossAsync
    path: src/prod/src/managed/Api/src/System/Fabric/IStateProvider.cs
    startLine: 73
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Indicates that a write quorum of replicas in this replica set  has been lost, and that therefore data loss might have occurred. \nThe replica set consists of a majority of replicas, which includes the Primary replica. </p>\n"
  remarks: "\n<p>When the Service Fabric runtime observes the failure of a quorum of replicas, which includes the Primary replica, \nit elects a new Primary replica and immediately calls this method on the new Primary replica. A Primary replica that is informed of possible data loss\ncan choose to restore its state from some external data source or can continue to run with the state that it currently has. If the service continues to run with its current state,\nit should return false from this method, which indicates that no state change has been made. If it has restored or altered its state,\nsuch as rolling back incomplete work, it should return true. If true is returned, then the state in other replicas must be assumed to be incorrect.\nTherefore, the Service Fabric runtime removes the other replicas from the replica set and recreates them.</p>\n"
  example: []
  syntax:
    content: Task<bool> OnDataLossAsync(CancellationToken cancellationToken)
    content.vb: Function OnDataLossAsync(cancellationToken As CancellationToken) As Task(Of Boolean)
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> object that the operation is observing. \nIt can be used to send a notification that the operation should be canceled. Note that cancellation is advisory and that the operation might still be completed even if it is canceled.</p>\n"
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
      description: "\n<p>Returns <xref href=\"System.Threading.Tasks.Task%601\" data-throw-if-not-resolved=\"false\"></xref> of type <xref href=\"System.Boolean\" data-throw-if-not-resolved=\"false\"></xref>, that indicates whether the state provider as part of processing this notification has changed its state</p>        \n"
  overload: System.Fabric.IStateProvider.OnDataLossAsync*
- uid: System.Fabric.IStateProvider.GetCopyContext
  commentId: M:System.Fabric.IStateProvider.GetCopyContext
  id: GetCopyContext
  parent: System.Fabric.IStateProvider
  langs:
  - csharp
  - vb
  name: GetCopyContext()
  nameWithType: IStateProvider.GetCopyContext()
  fullName: System.Fabric.IStateProvider.GetCopyContext()
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/IStateProvider.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: GetCopyContext
    path: src/prod/src/managed/Api/src/System/Fabric/IStateProvider.cs
    startLine: 92
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Obtains context on a Secondary replica after it is created and opened to send context to the Primary replica.</p>\n"
  remarks: "\n<p>The Primary replica analyzes the context and sends back state via <xref href=\"System.Fabric.IStateProvider.GetCopyState(System.Int64%2cSystem.Fabric.IOperationDataStream)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.IStateProvider.GetCopyContext\" data-throw-if-not-resolved=\"false\"></xref> is called on newly created, idle Secondary replicas and provides\na mechanism to asynchronously establish a bidirectional conversation with the Primary replica. The Secondary replica sends <xref href=\"System.Fabric.OperationData\" data-throw-if-not-resolved=\"false\"></xref>\nobjects with which the Primary replica can determine the progress of collecting context on the Secondary replica. The Primary replica responds by sending the required state back.\nSee <xref href=\"System.Fabric.IStateProvider.GetCopyState(System.Int64%2cSystem.Fabric.IOperationDataStream)\" data-throw-if-not-resolved=\"false\"></xref> at the Primary replica for the other half of the exchange. </p>\n<p>For in-memory services, the <xref href=\"System.Fabric.IStateProvider.GetCopyContext\" data-throw-if-not-resolved=\"false\"></xref> method is not called, \nas the state of the Secondary replicas is known (they are empty and will require all of the state).</p>\n"
  example: []
  syntax:
    content: IOperationDataStream GetCopyContext()
    content.vb: Function GetCopyContext As IOperationDataStream
    return:
      type: System.Fabric.IOperationDataStream
      description: "\n<p>Returns <xref href=\"System.Fabric.IOperationDataStream\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  overload: System.Fabric.IStateProvider.GetCopyContext*
- uid: System.Fabric.IStateProvider.GetCopyState(System.Int64,System.Fabric.IOperationDataStream)
  commentId: M:System.Fabric.IStateProvider.GetCopyState(System.Int64,System.Fabric.IOperationDataStream)
  id: GetCopyState(System.Int64,System.Fabric.IOperationDataStream)
  parent: System.Fabric.IStateProvider
  langs:
  - csharp
  - vb
  name: GetCopyState(Int64, IOperationDataStream)
  nameWithType: IStateProvider.GetCopyState(Int64, IOperationDataStream)
  fullName: System.Fabric.IStateProvider.GetCopyState(System.Int64, System.Fabric.IOperationDataStream)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/IStateProvider.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: GetCopyState
    path: src/prod/src/managed/Api/src/System/Fabric/IStateProvider.cs
    startLine: 116
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Obtains state on a Primary replica that is required to build a Secondary replica.</p>\n"
  remarks: "\n<p>Just as <xref href=\"System.Fabric.IStateProvider.GetCopyContext\" data-throw-if-not-resolved=\"false\"></xref> enables the Secondary replica to send context to the Primary replica via\nan <xref href=\"System.Fabric.IOperationDataStream\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Fabric.IStateProvider.GetCopyState(System.Int64%2cSystem.Fabric.IOperationDataStream)\" data-throw-if-not-resolved=\"false\"></xref> enables the Primary replica to respond with an <xref href=\"System.Fabric.IOperationDataStream\" data-throw-if-not-resolved=\"false\"></xref>. The stream contains objects that are delivered to the Secondary replica via the <xref href=\"System.Fabric.IStateReplicator.GetCopyStream\" data-throw-if-not-resolved=\"false\"></xref> method of the <xref href=\"System.Fabric.FabricReplicator\" data-throw-if-not-resolved=\"false\"></xref> class. The objects implement <xref href=\"System.Fabric.IOperation\" data-throw-if-not-resolved=\"false\"></xref> and contain the specified data. </p>\n<p> When the Primary replica receives this call, it should create and return another <xref href=\"System.Fabric.IOperationDataStream\" data-throw-if-not-resolved=\"false\"></xref> \nthat contains <xref href=\"System.Fabric.OperationData\" data-throw-if-not-resolved=\"false\"></xref>. <xref href=\"System.Fabric.OperationData\" data-throw-if-not-resolved=\"false\"></xref> represents the data/state that the Secondary replica\nrequires to catch up to the provided <em>upToSequenceNumber</em> maximum LSN. \nHow much and which state has to be sent can be determined via the context information that the Secondary replica provides via \n<xref href=\"System.Fabric.IStateProvider.GetCopyContext\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n"
  example: []
  syntax:
    content: IOperationDataStream GetCopyState(long upToSequenceNumber, IOperationDataStream copyContext)
    content.vb: Function GetCopyState(upToSequenceNumber As Long, copyContext As IOperationDataStream) As IOperationDataStream
    parameters:
    - id: upToSequenceNumber
      type: System.Int64
      description: "\n<p>The maximum last sequence number (LSN) that should be placed in the copy stream via the <xref href=\"System.Fabric.IStateReplicator.GetCopyStream\" data-throw-if-not-resolved=\"false\"></xref> method.\nLSNs greater than this number are delivered to the Secondary replica as a part of the replication stream via the <xref href=\"System.Fabric.IStateReplicator.GetReplicationStream\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n"
    - id: copyContext
      type: System.Fabric.IOperationDataStream
      description: "\n<p>An <xref href=\"System.Fabric.IOperationDataStream\" data-throw-if-not-resolved=\"false\"></xref> that contains the <xref href=\"System.Fabric.OperationData\" data-throw-if-not-resolved=\"false\"></xref> objects that are created by the Secondary replica. </p>\n"
    return:
      type: System.Fabric.IOperationDataStream
      description: "\n<p>Returns <xref href=\"System.Fabric.IOperationDataStream\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  overload: System.Fabric.IStateProvider.GetCopyState*
references:
- uid: System.Fabric.FabricReplicator
  commentId: T:System.Fabric.FabricReplicator
  parent: System.Fabric
  isExternal: false
  name: FabricReplicator
  nameWithType: FabricReplicator
  fullName: System.Fabric.FabricReplicator
- uid: System.Fabric
  commentId: N:System.Fabric
  isExternal: false
  name: System.Fabric
  nameWithType: System.Fabric
  fullName: System.Fabric
- uid: System.Fabric.IStateProvider.System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
  commentId: M:System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  parent: System.Fabric.Messaging.Stream.ByteArraySerializer
  definition: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  name: Serialize<IStateProvider>()
  nameWithType: ByteArraySerializer.Serialize<IStateProvider>()
  fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<System.Fabric.IStateProvider>()
  nameWithType.vb: ByteArraySerializer.Serialize(Of IStateProvider)()
  fullname.vb: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of System.Fabric.IStateProvider)()
  name.vb: Serialize(Of IStateProvider)()
  spec.csharp:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
    name: Serialize<IStateProvider>
    nameWithType: ByteArraySerializer.Serialize<IStateProvider>
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<System.Fabric.IStateProvider>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
    name: Serialize(Of IStateProvider)
    nameWithType: ByteArraySerializer.Serialize(Of IStateProvider)
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of System.Fabric.IStateProvider)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  commentId: M:System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  isExternal: false
  name: Serialize<T>(T)
  nameWithType: ByteArraySerializer.Serialize<T>(T)
  fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<T>(T)
  nameWithType.vb: ByteArraySerializer.Serialize(Of T)(T)
  fullname.vb: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of T)(T)
  name.vb: Serialize(Of T)(T)
  spec.csharp:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
    name: Serialize<T>
    nameWithType: ByteArraySerializer.Serialize<T>
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
    name: Serialize(Of T)
    nameWithType: ByteArraySerializer.Serialize(Of T)
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.Messaging.Stream.ByteArraySerializer
  commentId: T:System.Fabric.Messaging.Stream.ByteArraySerializer
  parent: System.Fabric.Messaging.Stream
  isExternal: false
  name: ByteArraySerializer
  nameWithType: ByteArraySerializer
  fullName: System.Fabric.Messaging.Stream.ByteArraySerializer
- uid: System.Fabric.Messaging.Stream
  commentId: N:System.Fabric.Messaging.Stream
  isExternal: false
  name: System.Fabric.Messaging.Stream
  nameWithType: System.Fabric.Messaging.Stream
  fullName: System.Fabric.Messaging.Stream
- uid: System.Int64
  commentId: T:System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.Fabric.IStateProvider.GetLastCommittedSequenceNumber*
  commentId: Overload:System.Fabric.IStateProvider.GetLastCommittedSequenceNumber
  isExternal: false
  name: GetLastCommittedSequenceNumber
  nameWithType: IStateProvider.GetLastCommittedSequenceNumber
  fullName: System.Fabric.IStateProvider.GetLastCommittedSequenceNumber
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Fabric.Epoch
  commentId: T:System.Fabric.Epoch
  parent: System.Fabric
  isExternal: false
  name: Epoch
  nameWithType: Epoch
  fullName: System.Fabric.Epoch
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Fabric.IStateProvider.UpdateEpochAsync(System.Fabric.Epoch,System.Int64,System.Threading.CancellationToken)
  commentId: M:System.Fabric.IStateProvider.UpdateEpochAsync(System.Fabric.Epoch,System.Int64,System.Threading.CancellationToken)
  parent: System.Fabric.IStateProvider
  isExternal: true
  name: UpdateEpochAsync(Epoch, Int64, CancellationToken)
  nameWithType: IStateProvider.UpdateEpochAsync(Epoch, Int64, CancellationToken)
  fullName: System.Fabric.IStateProvider.UpdateEpochAsync(System.Fabric.Epoch, System.Int64, System.Threading.CancellationToken)
  spec.csharp:
  - uid: System.Fabric.IStateProvider.UpdateEpochAsync(System.Fabric.Epoch,System.Int64,System.Threading.CancellationToken)
    name: UpdateEpochAsync
    nameWithType: IStateProvider.UpdateEpochAsync
    fullName: System.Fabric.IStateProvider.UpdateEpochAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Fabric.Epoch
    name: Epoch
    nameWithType: Epoch
    fullName: System.Fabric.Epoch
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Fabric.IStateProvider.UpdateEpochAsync(System.Fabric.Epoch,System.Int64,System.Threading.CancellationToken)
    name: UpdateEpochAsync
    nameWithType: IStateProvider.UpdateEpochAsync
    fullName: System.Fabric.IStateProvider.UpdateEpochAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Fabric.Epoch
    name: Epoch
    nameWithType: Epoch
    fullName: System.Fabric.Epoch
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.IStateProvider.UpdateEpochAsync*
  commentId: Overload:System.Fabric.IStateProvider.UpdateEpochAsync
  isExternal: false
  name: UpdateEpochAsync
  nameWithType: IStateProvider.UpdateEpochAsync
  fullName: System.Fabric.IStateProvider.UpdateEpochAsync
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: false
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: System.Fabric.IStateProvider
  commentId: T:System.Fabric.IStateProvider
  parent: System.Fabric
  isExternal: false
  name: IStateProvider
  nameWithType: IStateProvider
  fullName: System.Fabric.IStateProvider
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullname.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Fabric.IStateProvider.OnDataLossAsync*
  commentId: Overload:System.Fabric.IStateProvider.OnDataLossAsync
  isExternal: false
  name: OnDataLossAsync
  nameWithType: IStateProvider.OnDataLossAsync
  fullName: System.Fabric.IStateProvider.OnDataLossAsync
- uid: System.Threading.Tasks.Task{System.Boolean}
  commentId: T:System.Threading.Tasks.Task{System.Boolean}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Boolean>
  nameWithType: Task<Boolean>
  fullName: System.Threading.Tasks.Task<System.Boolean>
  nameWithType.vb: Task(Of Boolean)
  fullname.vb: System.Threading.Tasks.Task(Of System.Boolean)
  name.vb: Task(Of Boolean)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.IOperationDataStream
  commentId: T:System.Fabric.IOperationDataStream
  parent: System.Fabric
  isExternal: false
  name: IOperationDataStream
  nameWithType: IOperationDataStream
  fullName: System.Fabric.IOperationDataStream
- uid: System.Fabric.IStateProvider.GetCopyState(System.Int64,System.Fabric.IOperationDataStream)
  commentId: M:System.Fabric.IStateProvider.GetCopyState(System.Int64,System.Fabric.IOperationDataStream)
  parent: System.Fabric.IStateProvider
  isExternal: true
  name: GetCopyState(Int64, IOperationDataStream)
  nameWithType: IStateProvider.GetCopyState(Int64, IOperationDataStream)
  fullName: System.Fabric.IStateProvider.GetCopyState(System.Int64, System.Fabric.IOperationDataStream)
  spec.csharp:
  - uid: System.Fabric.IStateProvider.GetCopyState(System.Int64,System.Fabric.IOperationDataStream)
    name: GetCopyState
    nameWithType: IStateProvider.GetCopyState
    fullName: System.Fabric.IStateProvider.GetCopyState
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Fabric.IOperationDataStream
    name: IOperationDataStream
    nameWithType: IOperationDataStream
    fullName: System.Fabric.IOperationDataStream
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Fabric.IStateProvider.GetCopyState(System.Int64,System.Fabric.IOperationDataStream)
    name: GetCopyState
    nameWithType: IStateProvider.GetCopyState
    fullName: System.Fabric.IStateProvider.GetCopyState
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Fabric.IOperationDataStream
    name: IOperationDataStream
    nameWithType: IOperationDataStream
    fullName: System.Fabric.IOperationDataStream
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.IStateProvider.GetCopyContext
  commentId: M:System.Fabric.IStateProvider.GetCopyContext
  parent: System.Fabric.IStateProvider
  isExternal: false
  name: GetCopyContext()
  nameWithType: IStateProvider.GetCopyContext()
  fullName: System.Fabric.IStateProvider.GetCopyContext()
  spec.csharp:
  - uid: System.Fabric.IStateProvider.GetCopyContext
    name: GetCopyContext
    nameWithType: IStateProvider.GetCopyContext
    fullName: System.Fabric.IStateProvider.GetCopyContext
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Fabric.IStateProvider.GetCopyContext
    name: GetCopyContext
    nameWithType: IStateProvider.GetCopyContext
    fullName: System.Fabric.IStateProvider.GetCopyContext
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.OperationData
  commentId: T:System.Fabric.OperationData
  parent: System.Fabric
  isExternal: false
  name: OperationData
  nameWithType: OperationData
  fullName: System.Fabric.OperationData
- uid: System.Fabric.IStateProvider.GetCopyContext*
  commentId: Overload:System.Fabric.IStateProvider.GetCopyContext
  isExternal: false
  name: GetCopyContext
  nameWithType: IStateProvider.GetCopyContext
  fullName: System.Fabric.IStateProvider.GetCopyContext
- uid: System.Fabric.IStateReplicator.GetCopyStream
  commentId: M:System.Fabric.IStateReplicator.GetCopyStream
  parent: System.Fabric.IStateReplicator
  isExternal: false
  name: GetCopyStream()
  nameWithType: IStateReplicator.GetCopyStream()
  fullName: System.Fabric.IStateReplicator.GetCopyStream()
  spec.csharp:
  - uid: System.Fabric.IStateReplicator.GetCopyStream
    name: GetCopyStream
    nameWithType: IStateReplicator.GetCopyStream
    fullName: System.Fabric.IStateReplicator.GetCopyStream
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Fabric.IStateReplicator.GetCopyStream
    name: GetCopyStream
    nameWithType: IStateReplicator.GetCopyStream
    fullName: System.Fabric.IStateReplicator.GetCopyStream
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.IStateReplicator.GetReplicationStream
  commentId: M:System.Fabric.IStateReplicator.GetReplicationStream
  parent: System.Fabric.IStateReplicator
  isExternal: false
  name: GetReplicationStream()
  nameWithType: IStateReplicator.GetReplicationStream()
  fullName: System.Fabric.IStateReplicator.GetReplicationStream()
  spec.csharp:
  - uid: System.Fabric.IStateReplicator.GetReplicationStream
    name: GetReplicationStream
    nameWithType: IStateReplicator.GetReplicationStream
    fullName: System.Fabric.IStateReplicator.GetReplicationStream
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Fabric.IStateReplicator.GetReplicationStream
    name: GetReplicationStream
    nameWithType: IStateReplicator.GetReplicationStream
    fullName: System.Fabric.IStateReplicator.GetReplicationStream
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.IOperation
  commentId: T:System.Fabric.IOperation
  isExternal: false
  name: IOperation
  nameWithType: IOperation
  fullName: System.Fabric.IOperation
- uid: System.Fabric.IStateProvider.GetCopyState*
  commentId: Overload:System.Fabric.IStateProvider.GetCopyState
  isExternal: false
  name: GetCopyState
  nameWithType: IStateProvider.GetCopyState
  fullName: System.Fabric.IStateProvider.GetCopyState
- uid: System.Fabric.IStateReplicator
  commentId: T:System.Fabric.IStateReplicator
  parent: System.Fabric
  isExternal: false
  name: IStateReplicator
  nameWithType: IStateReplicator
  fullName: System.Fabric.IStateReplicator
