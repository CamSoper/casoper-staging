### YamlMime:ManagedReference
items:
- uid: System.Fabric.ResolvedServicePartition
  commentId: T:System.Fabric.ResolvedServicePartition
  id: ResolvedServicePartition
  parent: System.Fabric
  children:
  - System.Fabric.ResolvedServicePartition.CompareVersion(System.Fabric.ResolvedServicePartition)
  - System.Fabric.ResolvedServicePartition.Endpoints
  - System.Fabric.ResolvedServicePartition.GetEndpoint
  - System.Fabric.ResolvedServicePartition.Info
  - System.Fabric.ResolvedServicePartition.ServiceName
  langs:
  - csharp
  - vb
  name: ResolvedServicePartition
  nameWithType: ResolvedServicePartition
  fullName: System.Fabric.ResolvedServicePartition
  type: Class
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/ResolvedServicePartition.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: ResolvedServicePartition
    path: src/prod/src/managed/Api/src/System/Fabric/ResolvedServicePartition.cs
    startLine: 17
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Represents a data structure that contains information on the partitioning and set of endpoints to which the specified Service partition listens.</p>\n"
  remarks: "\n<p></p>\n"
  example: []
  syntax:
    content: public sealed class ResolvedServicePartition
    content.vb: Public NotInheritable Class ResolvedServicePartition
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  extensionMethods:
  - System.Fabric.ResolvedServicePartition.System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: System.Fabric.ResolvedServicePartition.Endpoints
  commentId: P:System.Fabric.ResolvedServicePartition.Endpoints
  id: Endpoints
  parent: System.Fabric.ResolvedServicePartition
  langs:
  - csharp
  - vb
  name: Endpoints
  nameWithType: ResolvedServicePartition.Endpoints
  fullName: System.Fabric.ResolvedServicePartition.Endpoints
  type: Property
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/ResolvedServicePartition.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: Endpoints
    path: src/prod/src/managed/Api/src/System/Fabric/ResolvedServicePartition.cs
    startLine: 43
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Gets the endpoints of the service partition. </p>\n"
  remarks: "\n<p></p>\n"
  example: []
  syntax:
    content: public ICollection<ResolvedServiceEndpoint> Endpoints { get; }
    content.vb: Public ReadOnly Property Endpoints As ICollection(Of ResolvedServiceEndpoint)
    parameters: []
    return:
      type: System.Collections.Generic.ICollection{System.Fabric.ResolvedServiceEndpoint}
      description: "\n<p>A collection of <xref href=\"System.Fabric.ResolvedServiceEndpoint\" data-throw-if-not-resolved=\"false\"></xref> for a service partition.</p>\n"
  overload: System.Fabric.ResolvedServicePartition.Endpoints*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Fabric.ResolvedServicePartition.Info
  commentId: P:System.Fabric.ResolvedServicePartition.Info
  id: Info
  parent: System.Fabric.ResolvedServicePartition
  langs:
  - csharp
  - vb
  name: Info
  nameWithType: ResolvedServicePartition.Info
  fullName: System.Fabric.ResolvedServicePartition.Info
  type: Property
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/ResolvedServicePartition.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: Info
    path: src/prod/src/managed/Api/src/System/Fabric/ResolvedServicePartition.cs
    startLine: 49
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Gets information about the partition of the service that was resolved. </p>\n"
  example: []
  syntax:
    content: public ServicePartitionInformation Info { get; }
    content.vb: Public ReadOnly Property Info As ServicePartitionInformation
    parameters: []
    return:
      type: System.Fabric.ServicePartitionInformation
      description: 'The information about the partition of the service that was resolved. '
  overload: System.Fabric.ResolvedServicePartition.Info*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Fabric.ResolvedServicePartition.ServiceName
  commentId: P:System.Fabric.ResolvedServicePartition.ServiceName
  id: ServiceName
  parent: System.Fabric.ResolvedServicePartition
  langs:
  - csharp
  - vb
  name: ServiceName
  nameWithType: ResolvedServicePartition.ServiceName
  fullName: System.Fabric.ResolvedServicePartition.ServiceName
  type: Property
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/ResolvedServicePartition.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: ServiceName
    path: src/prod/src/managed/Api/src/System/Fabric/ResolvedServicePartition.cs
    startLine: 62
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Gets the name of the service instance.</p>\n"
  example: []
  syntax:
    content: public Uri ServiceName { get; }
    content.vb: Public ReadOnly Property ServiceName As Uri
    parameters: []
    return:
      type: System.Uri
      description: "\n<p>Returns <xref href=\"System.Uri\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  overload: System.Fabric.ResolvedServicePartition.ServiceName*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Fabric.ResolvedServicePartition.GetEndpoint
  commentId: M:System.Fabric.ResolvedServicePartition.GetEndpoint
  id: GetEndpoint
  parent: System.Fabric.ResolvedServicePartition
  langs:
  - csharp
  - vb
  name: GetEndpoint()
  nameWithType: ResolvedServicePartition.GetEndpoint()
  fullName: System.Fabric.ResolvedServicePartition.GetEndpoint()
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/ResolvedServicePartition.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: GetEndpoint
    path: src/prod/src/managed/Api/src/System/Fabric/ResolvedServicePartition.cs
    startLine: 112
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Returns a single endpoint, instead of a collection of all endpoints. </p>\n"
  remarks: "\n<p>Many times, you only need a single endpoint instead of all the endpoints. If the service is stateless, it returns a random endpoint. \nIf the service is a stateful service, than it returns the endpoint to which the Primary replica of the service partition listens. Note that if \nthe Primary replica currently does not exist, it throws <xref href=\"System.Fabric.FabricException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example: []
  syntax:
    content: public ResolvedServiceEndpoint GetEndpoint()
    content.vb: Public Function GetEndpoint As ResolvedServiceEndpoint
    return:
      type: System.Fabric.ResolvedServiceEndpoint
      description: "\n<p>Returns <xref href=\"System.Fabric.ResolvedServiceEndpoint\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  overload: System.Fabric.ResolvedServicePartition.GetEndpoint*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.ResolvedServicePartition.CompareVersion(System.Fabric.ResolvedServicePartition)
  commentId: M:System.Fabric.ResolvedServicePartition.CompareVersion(System.Fabric.ResolvedServicePartition)
  id: CompareVersion(System.Fabric.ResolvedServicePartition)
  parent: System.Fabric.ResolvedServicePartition
  langs:
  - csharp
  - vb
  name: CompareVersion(ResolvedServicePartition)
  nameWithType: ResolvedServicePartition.CompareVersion(ResolvedServicePartition)
  fullName: System.Fabric.ResolvedServicePartition.CompareVersion(System.Fabric.ResolvedServicePartition)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/ResolvedServicePartition.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: CompareVersion
    path: src/prod/src/managed/Api/src/System/Fabric/ResolvedServicePartition.cs
    startLine: 146
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Compares two resolved service partitions and identifies which is newer. </p>\n"
  remarks: "\n<p>The <xref href=\"System.Fabric.ResolvedServicePartition.CompareVersion(System.Fabric.ResolvedServicePartition)\" data-throw-if-not-resolved=\"false\"></xref> method takes in a \nresolved service partition (RSP) argument with the parameter <em>other</em> to enable the user to identify which RSP is more \nup-to-date. A returned value of 0 indicates that the two RSPs have the same version. 1 indicates that the other RSP has an older version. \n-1 indicates that the other RSP has a newer version. </p>\n"
  example: []
  syntax:
    content: public int CompareVersion(ResolvedServicePartition other)
    content.vb: Public Function CompareVersion(other As ResolvedServicePartition) As Integer
    parameters:
    - id: other
      type: System.Fabric.ResolvedServicePartition
      description: "\n<p>The other resolved service partition to compare.</p>\n"
    return:
      type: System.Int32
      description: "\n<p>Returns <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  overload: System.Fabric.ResolvedServicePartition.CompareVersion*
  exceptions:
  - type: System.Fabric.FabricException
    commentId: T:System.Fabric.FabricException
    description: "\n<p>The two <xref href=\"System.Fabric.ResolvedServicePartition\" data-throw-if-not-resolved=\"false\"></xref> objects are from different service partitions. This can happen if the \nservice is deleted and re-created with the same name and partitioning between two resolve calls.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: System.Fabric
  commentId: N:System.Fabric
  isExternal: false
  name: System.Fabric
  nameWithType: System.Fabric
  fullName: System.Fabric
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.ResolvedServicePartition.System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
  commentId: M:System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  parent: System.Fabric.Messaging.Stream.ByteArraySerializer
  definition: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  name: Serialize<ResolvedServicePartition>()
  nameWithType: ByteArraySerializer.Serialize<ResolvedServicePartition>()
  fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<System.Fabric.ResolvedServicePartition>()
  nameWithType.vb: ByteArraySerializer.Serialize(Of ResolvedServicePartition)()
  fullname.vb: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of System.Fabric.ResolvedServicePartition)()
  name.vb: Serialize(Of ResolvedServicePartition)()
  spec.csharp:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
    name: Serialize<ResolvedServicePartition>
    nameWithType: ByteArraySerializer.Serialize<ResolvedServicePartition>
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<System.Fabric.ResolvedServicePartition>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
    name: Serialize(Of ResolvedServicePartition)
    nameWithType: ByteArraySerializer.Serialize(Of ResolvedServicePartition)
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of System.Fabric.ResolvedServicePartition)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  commentId: M:System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  isExternal: false
  name: Serialize<T>(T)
  nameWithType: ByteArraySerializer.Serialize<T>(T)
  fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<T>(T)
  nameWithType.vb: ByteArraySerializer.Serialize(Of T)(T)
  fullname.vb: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of T)(T)
  name.vb: Serialize(Of T)(T)
  spec.csharp:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
    name: Serialize<T>
    nameWithType: ByteArraySerializer.Serialize<T>
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
    name: Serialize(Of T)
    nameWithType: ByteArraySerializer.Serialize(Of T)
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.Messaging.Stream.ByteArraySerializer
  commentId: T:System.Fabric.Messaging.Stream.ByteArraySerializer
  parent: System.Fabric.Messaging.Stream
  isExternal: false
  name: ByteArraySerializer
  nameWithType: ByteArraySerializer
  fullName: System.Fabric.Messaging.Stream.ByteArraySerializer
- uid: System.Fabric.Messaging.Stream
  commentId: N:System.Fabric.Messaging.Stream
  isExternal: false
  name: System.Fabric.Messaging.Stream
  nameWithType: System.Fabric.Messaging.Stream
  fullName: System.Fabric.Messaging.Stream
- uid: System.Fabric.ResolvedServiceEndpoint
  commentId: T:System.Fabric.ResolvedServiceEndpoint
  parent: System.Fabric
  isExternal: false
  name: ResolvedServiceEndpoint
  nameWithType: ResolvedServiceEndpoint
  fullName: System.Fabric.ResolvedServiceEndpoint
- uid: System.Fabric.ResolvedServicePartition.Endpoints*
  commentId: Overload:System.Fabric.ResolvedServicePartition.Endpoints
  isExternal: false
  name: Endpoints
  nameWithType: ResolvedServicePartition.Endpoints
  fullName: System.Fabric.ResolvedServicePartition.Endpoints
- uid: System.Collections.Generic.ICollection{System.Fabric.ResolvedServiceEndpoint}
  commentId: T:System.Collections.Generic.ICollection{System.Fabric.ResolvedServiceEndpoint}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ICollection`1
  name: ICollection<ResolvedServiceEndpoint>
  nameWithType: ICollection<ResolvedServiceEndpoint>
  fullName: System.Collections.Generic.ICollection<System.Fabric.ResolvedServiceEndpoint>
  nameWithType.vb: ICollection(Of ResolvedServiceEndpoint)
  fullname.vb: System.Collections.Generic.ICollection(Of System.Fabric.ResolvedServiceEndpoint)
  name.vb: ICollection(Of ResolvedServiceEndpoint)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Fabric.ResolvedServiceEndpoint
    name: ResolvedServiceEndpoint
    nameWithType: ResolvedServiceEndpoint
    fullName: System.Fabric.ResolvedServiceEndpoint
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Fabric.ResolvedServiceEndpoint
    name: ResolvedServiceEndpoint
    nameWithType: ResolvedServiceEndpoint
    fullName: System.Fabric.ResolvedServiceEndpoint
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1
  commentId: T:System.Collections.Generic.ICollection`1
  isExternal: true
  name: ICollection<T>
  nameWithType: ICollection<T>
  fullName: System.Collections.Generic.ICollection<T>
  nameWithType.vb: ICollection(Of T)
  fullname.vb: System.Collections.Generic.ICollection(Of T)
  name.vb: ICollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Fabric.ResolvedServicePartition.Info*
  commentId: Overload:System.Fabric.ResolvedServicePartition.Info
  isExternal: false
  name: Info
  nameWithType: ResolvedServicePartition.Info
  fullName: System.Fabric.ResolvedServicePartition.Info
- uid: System.Fabric.ServicePartitionInformation
  commentId: T:System.Fabric.ServicePartitionInformation
  parent: System.Fabric
  isExternal: false
  name: ServicePartitionInformation
  nameWithType: ServicePartitionInformation
  fullName: System.Fabric.ServicePartitionInformation
- uid: System.Uri
  commentId: T:System.Uri
  parent: System
  isExternal: true
  name: Uri
  nameWithType: Uri
  fullName: System.Uri
- uid: System.Fabric.ResolvedServicePartition.ServiceName*
  commentId: Overload:System.Fabric.ResolvedServicePartition.ServiceName
  isExternal: false
  name: ServiceName
  nameWithType: ResolvedServicePartition.ServiceName
  fullName: System.Fabric.ResolvedServicePartition.ServiceName
- uid: System.Fabric.FabricException
  commentId: T:System.Fabric.FabricException
  parent: System.Fabric
  isExternal: false
  name: FabricException
  nameWithType: FabricException
  fullName: System.Fabric.FabricException
- uid: System.Fabric.ResolvedServicePartition.GetEndpoint*
  commentId: Overload:System.Fabric.ResolvedServicePartition.GetEndpoint
  isExternal: false
  name: GetEndpoint
  nameWithType: ResolvedServicePartition.GetEndpoint
  fullName: System.Fabric.ResolvedServicePartition.GetEndpoint
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Fabric.ResolvedServicePartition
  commentId: T:System.Fabric.ResolvedServicePartition
  parent: System.Fabric
  isExternal: false
  name: ResolvedServicePartition
  nameWithType: ResolvedServicePartition
  fullName: System.Fabric.ResolvedServicePartition
- uid: System.Fabric.ResolvedServicePartition.CompareVersion(System.Fabric.ResolvedServicePartition)
  commentId: M:System.Fabric.ResolvedServicePartition.CompareVersion(System.Fabric.ResolvedServicePartition)
- uid: System.Fabric.ResolvedServicePartition.CompareVersion*
  commentId: Overload:System.Fabric.ResolvedServicePartition.CompareVersion
  isExternal: false
  name: CompareVersion
  nameWithType: ResolvedServicePartition.CompareVersion
  fullName: System.Fabric.ResolvedServicePartition.CompareVersion
