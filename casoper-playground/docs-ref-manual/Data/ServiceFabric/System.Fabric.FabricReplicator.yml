### YamlMime:ManagedReference
items:
- uid: System.Fabric.FabricReplicator
  commentId: T:System.Fabric.FabricReplicator
  id: FabricReplicator
  parent: System.Fabric
  children:
  - System.Fabric.FabricReplicator.InvalidAtomicGroupId
  - System.Fabric.FabricReplicator.StateReplicator
  - System.Fabric.FabricReplicator.StateReplicator2
  - System.Fabric.FabricReplicator.System#Fabric#IPrimaryReplicator#BuildReplicaAsync(System.Fabric.ReplicaInformation,System.Threading.CancellationToken)
  - System.Fabric.FabricReplicator.System#Fabric#IPrimaryReplicator#OnDataLossAsync(System.Threading.CancellationToken)
  - System.Fabric.FabricReplicator.System#Fabric#IPrimaryReplicator#RemoveReplica(System.Int64)
  - System.Fabric.FabricReplicator.System#Fabric#IPrimaryReplicator#UpdateCatchUpReplicaSetConfiguration(System.Fabric.ReplicaSetConfiguration,System.Fabric.ReplicaSetConfiguration)
  - System.Fabric.FabricReplicator.System#Fabric#IPrimaryReplicator#UpdateCurrentReplicaSetConfiguration(System.Fabric.ReplicaSetConfiguration)
  - System.Fabric.FabricReplicator.System#Fabric#IPrimaryReplicator#WaitForCatchUpQuorumAsync(System.Fabric.ReplicaSetQuorumMode,System.Threading.CancellationToken)
  - System.Fabric.FabricReplicator.System#Fabric#IReplicator#Abort
  - System.Fabric.FabricReplicator.System#Fabric#IReplicator#ChangeRoleAsync(System.Fabric.Epoch,System.Fabric.ReplicaRole,System.Threading.CancellationToken)
  - System.Fabric.FabricReplicator.System#Fabric#IReplicator#CloseAsync(System.Threading.CancellationToken)
  - System.Fabric.FabricReplicator.System#Fabric#IReplicator#GetCatchUpCapability
  - System.Fabric.FabricReplicator.System#Fabric#IReplicator#GetCurrentProgress
  - System.Fabric.FabricReplicator.System#Fabric#IReplicator#OpenAsync(System.Threading.CancellationToken)
  - System.Fabric.FabricReplicator.System#Fabric#IReplicator#UpdateEpochAsync(System.Fabric.Epoch,System.Threading.CancellationToken)
  - System.Fabric.FabricReplicator.UnknownSequenceNumber
  langs:
  - csharp
  - vb
  name: FabricReplicator
  nameWithType: FabricReplicator
  fullName: System.Fabric.FabricReplicator
  type: Class
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricReplicator.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: FabricReplicator
    path: src/prod/src/managed/Api/src/System/Fabric/FabricReplicator.cs
    startLine: 18
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Replicates state for high availability and reliability. </p>\n"
  remarks: "\n<p>Provides the default implementation of the <xref href=\"System.Fabric.IStateReplicator\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Fabric.IReplicator\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Fabric.IPrimaryReplicator\" data-throw-if-not-resolved=\"false\"></xref> interfaces, which user services can use, along with their implementation of the <xref href=\"System.Fabric.IStateProvider\" data-throw-if-not-resolved=\"false\"></xref> interface.</p>\n<p>An instance of the <xref href=\"System.Fabric.FabricReplicator\" data-throw-if-not-resolved=\"false\"></xref> class is obtained via the <xref href=\"System.Fabric.IStatefulServicePartition.CreateReplicator(System.Fabric.IStateProvider%2cSystem.Fabric.ReplicatorSettings)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n"
  example: []
  syntax:
    content: 'public sealed class FabricReplicator : IReplicator, IPrimaryReplicator, IReplicatorCatchupSpecificQuorum'
    content.vb: >-
      Public NotInheritable Class FabricReplicator
          Implements IReplicator, IPrimaryReplicator, IReplicatorCatchupSpecificQuorum
  inheritance:
  - System.Object
  implements:
  - System.Fabric.IReplicator
  - System.Fabric.IPrimaryReplicator
  - System.Fabric.IReplicatorCatchupSpecificQuorum
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  extensionMethods:
  - System.Fabric.FabricReplicator.System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: System.Fabric.FabricReplicator.UnknownSequenceNumber
  commentId: F:System.Fabric.FabricReplicator.UnknownSequenceNumber
  id: UnknownSequenceNumber
  parent: System.Fabric.FabricReplicator
  langs:
  - csharp
  - vb
  name: UnknownSequenceNumber
  nameWithType: FabricReplicator.UnknownSequenceNumber
  fullName: System.Fabric.FabricReplicator.UnknownSequenceNumber
  type: Field
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricReplicator.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: UnknownSequenceNumber
    path: src/prod/src/managed/Api/src/System/Fabric/FabricReplicator.cs
    startLine: 21
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: This supports the Service Fabric infrastructure and is not meant to be used directly from your code.
  example: []
  syntax:
    content: public const long UnknownSequenceNumber = -1L
    content.vb: Public Const UnknownSequenceNumber As Long = -1L
    return:
      type: System.Int64
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Fabric.FabricReplicator.InvalidAtomicGroupId
  commentId: F:System.Fabric.FabricReplicator.InvalidAtomicGroupId
  id: InvalidAtomicGroupId
  parent: System.Fabric.FabricReplicator
  langs:
  - csharp
  - vb
  name: InvalidAtomicGroupId
  nameWithType: FabricReplicator.InvalidAtomicGroupId
  fullName: System.Fabric.FabricReplicator.InvalidAtomicGroupId
  type: Field
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricReplicator.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: InvalidAtomicGroupId
    path: src/prod/src/managed/Api/src/System/Fabric/FabricReplicator.cs
    startLine: 24
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: This supports the Service Fabric infrastructure and is not meant to be used directly from your code.
  example: []
  syntax:
    content: public const long InvalidAtomicGroupId = -1L
    content.vb: Public Const InvalidAtomicGroupId As Long = -1L
    return:
      type: System.Int64
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Fabric.FabricReplicator.StateReplicator
  commentId: P:System.Fabric.FabricReplicator.StateReplicator
  id: StateReplicator
  parent: System.Fabric.FabricReplicator
  langs:
  - csharp
  - vb
  name: StateReplicator
  nameWithType: FabricReplicator.StateReplicator
  fullName: System.Fabric.FabricReplicator.StateReplicator
  type: Property
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricReplicator.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: StateReplicator
    path: src/prod/src/managed/Api/src/System/Fabric/FabricReplicator.cs
    startLine: 44
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Gets the <xref href=\"System.Fabric.IStateReplicator\" data-throw-if-not-resolved=\"false\"></xref> which can be used to replicate state</p>\n"
  example: []
  syntax:
    content: public IStateReplicator StateReplicator { get; }
    content.vb: Public ReadOnly Property StateReplicator As IStateReplicator
    parameters: []
    return:
      type: System.Fabric.IStateReplicator
      description: A value representing the <xref href="System.Fabric.IStateReplicator" data-throw-if-not-resolved="false"></xref> which can be used to replicate state
  overload: System.Fabric.FabricReplicator.StateReplicator*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Fabric.FabricReplicator.StateReplicator2
  commentId: P:System.Fabric.FabricReplicator.StateReplicator2
  id: StateReplicator2
  parent: System.Fabric.FabricReplicator
  langs:
  - csharp
  - vb
  name: StateReplicator2
  nameWithType: FabricReplicator.StateReplicator2
  fullName: System.Fabric.FabricReplicator.StateReplicator2
  type: Property
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricReplicator.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: StateReplicator2
    path: src/prod/src/managed/Api/src/System/Fabric/FabricReplicator.cs
    startLine: 56
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Gets the <xref href=\"System.Fabric.IStateReplicator2\" data-throw-if-not-resolved=\"false\"></xref> which can be used to replicate state</p>\n"
  example: []
  syntax:
    content: public IStateReplicator2 StateReplicator2 { get; }
    content.vb: Public ReadOnly Property StateReplicator2 As IStateReplicator2
    parameters: []
    return:
      type: System.Fabric.IStateReplicator2
      description: A value representing the <xref href="System.Fabric.IStateReplicator2" data-throw-if-not-resolved="false"></xref> which can be used to replicate state
  overload: System.Fabric.FabricReplicator.StateReplicator2*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Fabric.FabricReplicator.System#Fabric#IReplicator#OpenAsync(System.Threading.CancellationToken)
  commentId: M:System.Fabric.FabricReplicator.System#Fabric#IReplicator#OpenAsync(System.Threading.CancellationToken)
  id: System#Fabric#IReplicator#OpenAsync(System.Threading.CancellationToken)
  isEii: true
  parent: System.Fabric.FabricReplicator
  langs:
  - csharp
  - vb
  name: IReplicator.OpenAsync(CancellationToken)
  nameWithType: FabricReplicator.IReplicator.OpenAsync(CancellationToken)
  fullName: System.Fabric.FabricReplicator.System.Fabric.IReplicator.OpenAsync(System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricReplicator.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: System.Fabric.IReplicator.OpenAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricReplicator.cs
    startLine: 79
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: This supports the Service Fabric infrastructure and is not meant to be used directly from your code.
  example: []
  syntax:
    content: Task<string> IReplicator.OpenAsync(CancellationToken cancellationToken)
    content.vb: Function System.Fabric.IReplicator.OpenAsync(cancellationToken As CancellationToken) As Task(Of String) Implements IReplicator.OpenAsync
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> object that the operation is observing. It can be used to send a notification that the operation should be canceled. Note that cancellation is advisory and that the operation might still be completed even if it is canceled.</p>\n"
    return:
      type: System.Threading.Tasks.Task{System.String}
      description: "\n<p>A task that represents the asynchronous operation.</p>\n"
  overload: System.Fabric.FabricReplicator.System#Fabric#IReplicator#OpenAsync*
  implements:
  - System.Fabric.IReplicator.OpenAsync(System.Threading.CancellationToken)
  nameWithType.vb: FabricReplicator.System.Fabric.IReplicator.OpenAsync(CancellationToken)
  name.vb: System.Fabric.IReplicator.OpenAsync(CancellationToken)
- uid: System.Fabric.FabricReplicator.System#Fabric#IReplicator#ChangeRoleAsync(System.Fabric.Epoch,System.Fabric.ReplicaRole,System.Threading.CancellationToken)
  commentId: M:System.Fabric.FabricReplicator.System#Fabric#IReplicator#ChangeRoleAsync(System.Fabric.Epoch,System.Fabric.ReplicaRole,System.Threading.CancellationToken)
  id: System#Fabric#IReplicator#ChangeRoleAsync(System.Fabric.Epoch,System.Fabric.ReplicaRole,System.Threading.CancellationToken)
  isEii: true
  parent: System.Fabric.FabricReplicator
  langs:
  - csharp
  - vb
  name: IReplicator.ChangeRoleAsync(Epoch, ReplicaRole, CancellationToken)
  nameWithType: FabricReplicator.IReplicator.ChangeRoleAsync(Epoch, ReplicaRole, CancellationToken)
  fullName: System.Fabric.FabricReplicator.System.Fabric.IReplicator.ChangeRoleAsync(System.Fabric.Epoch, System.Fabric.ReplicaRole, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricReplicator.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: System.Fabric.IReplicator.ChangeRoleAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricReplicator.cs
    startLine: 97
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: This supports the Service Fabric infrastructure and is not meant to be used directly from your code.
  example: []
  syntax:
    content: Task IReplicator.ChangeRoleAsync(Epoch epoch, ReplicaRole role, CancellationToken cancellationToken)
    content.vb: Function System.Fabric.IReplicator.ChangeRoleAsync(epoch As Epoch, role As ReplicaRole, cancellationToken As CancellationToken) As Task Implements IReplicator.ChangeRoleAsync
    parameters:
    - id: epoch
      type: System.Fabric.Epoch
      description: "\n<p>This supports the Service Fabric infrastructure and is not meant to be used directly from your code.</p>\n"
    - id: role
      type: System.Fabric.ReplicaRole
      description: "\n<p>This supports the Service Fabric infrastructure and is not meant to be used directly from your code.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> object that the operation is observing. It can be used to send a notification that the operation should be canceled. Note that cancellation is advisory and that the operation might still be completed even if it is canceled.</p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>A task that represents the asynchronous operation.</p>\n"
  overload: System.Fabric.FabricReplicator.System#Fabric#IReplicator#ChangeRoleAsync*
  implements:
  - System.Fabric.IReplicator.ChangeRoleAsync(System.Fabric.Epoch,System.Fabric.ReplicaRole,System.Threading.CancellationToken)
  nameWithType.vb: FabricReplicator.System.Fabric.IReplicator.ChangeRoleAsync(Epoch, ReplicaRole, CancellationToken)
  name.vb: System.Fabric.IReplicator.ChangeRoleAsync(Epoch, ReplicaRole, CancellationToken)
- uid: System.Fabric.FabricReplicator.System#Fabric#IReplicator#CloseAsync(System.Threading.CancellationToken)
  commentId: M:System.Fabric.FabricReplicator.System#Fabric#IReplicator#CloseAsync(System.Threading.CancellationToken)
  id: System#Fabric#IReplicator#CloseAsync(System.Threading.CancellationToken)
  isEii: true
  parent: System.Fabric.FabricReplicator
  langs:
  - csharp
  - vb
  name: IReplicator.CloseAsync(CancellationToken)
  nameWithType: FabricReplicator.IReplicator.CloseAsync(CancellationToken)
  fullName: System.Fabric.FabricReplicator.System.Fabric.IReplicator.CloseAsync(System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricReplicator.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: System.Fabric.IReplicator.CloseAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricReplicator.cs
    startLine: 109
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: This supports the Service Fabric infrastructure and is not meant to be used directly from your code.
  example: []
  syntax:
    content: Task IReplicator.CloseAsync(CancellationToken cancellationToken)
    content.vb: Function System.Fabric.IReplicator.CloseAsync(cancellationToken As CancellationToken) As Task Implements IReplicator.CloseAsync
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> object that the operation is observing. It can be used to send a notification that the operation should be canceled. Note that cancellation is advisory and that the operation might still be completed even if it is canceled.</p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>A task that represents the asynchronous operation.</p>\n"
  overload: System.Fabric.FabricReplicator.System#Fabric#IReplicator#CloseAsync*
  implements:
  - System.Fabric.IReplicator.CloseAsync(System.Threading.CancellationToken)
  nameWithType.vb: FabricReplicator.System.Fabric.IReplicator.CloseAsync(CancellationToken)
  name.vb: System.Fabric.IReplicator.CloseAsync(CancellationToken)
- uid: System.Fabric.FabricReplicator.System#Fabric#IReplicator#Abort
  commentId: M:System.Fabric.FabricReplicator.System#Fabric#IReplicator#Abort
  id: System#Fabric#IReplicator#Abort
  isEii: true
  parent: System.Fabric.FabricReplicator
  langs:
  - csharp
  - vb
  name: IReplicator.Abort()
  nameWithType: FabricReplicator.IReplicator.Abort()
  fullName: System.Fabric.FabricReplicator.System.Fabric.IReplicator.Abort()
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricReplicator.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: System.Fabric.IReplicator.Abort
    path: src/prod/src/managed/Api/src/System/Fabric/FabricReplicator.cs
    startLine: 117
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: This supports the Service Fabric infrastructure and is not meant to be used directly from your code.
  remarks: "\n"
  example: []
  syntax:
    content: void IReplicator.Abort()
    content.vb: Sub System.Fabric.IReplicator.Abort Implements IReplicator.Abort
  overload: System.Fabric.FabricReplicator.System#Fabric#IReplicator#Abort*
  implements:
  - System.Fabric.IReplicator.Abort
  nameWithType.vb: FabricReplicator.System.Fabric.IReplicator.Abort()
  name.vb: System.Fabric.IReplicator.Abort()
- uid: System.Fabric.FabricReplicator.System#Fabric#IReplicator#GetCurrentProgress
  commentId: M:System.Fabric.FabricReplicator.System#Fabric#IReplicator#GetCurrentProgress
  id: System#Fabric#IReplicator#GetCurrentProgress
  isEii: true
  parent: System.Fabric.FabricReplicator
  langs:
  - csharp
  - vb
  name: IReplicator.GetCurrentProgress()
  nameWithType: FabricReplicator.IReplicator.GetCurrentProgress()
  fullName: System.Fabric.FabricReplicator.System.Fabric.IReplicator.GetCurrentProgress()
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricReplicator.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: System.Fabric.IReplicator.GetCurrentProgress
    path: src/prod/src/managed/Api/src/System/Fabric/FabricReplicator.cs
    startLine: 126
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: This supports the Service Fabric infrastructure and is not meant to be used directly from your code.
  example: []
  syntax:
    content: long IReplicator.GetCurrentProgress()
    content.vb: Function System.Fabric.IReplicator.GetCurrentProgress As Long Implements IReplicator.GetCurrentProgress
    return:
      type: System.Int64
      description: "\n<p>This supports the Service Fabric infrastructure and is not meant to be used directly from your code.</p>\n"
  overload: System.Fabric.FabricReplicator.System#Fabric#IReplicator#GetCurrentProgress*
  implements:
  - System.Fabric.IReplicator.GetCurrentProgress
  nameWithType.vb: FabricReplicator.System.Fabric.IReplicator.GetCurrentProgress()
  name.vb: System.Fabric.IReplicator.GetCurrentProgress()
- uid: System.Fabric.FabricReplicator.System#Fabric#IReplicator#GetCatchUpCapability
  commentId: M:System.Fabric.FabricReplicator.System#Fabric#IReplicator#GetCatchUpCapability
  id: System#Fabric#IReplicator#GetCatchUpCapability
  isEii: true
  parent: System.Fabric.FabricReplicator
  langs:
  - csharp
  - vb
  name: IReplicator.GetCatchUpCapability()
  nameWithType: FabricReplicator.IReplicator.GetCatchUpCapability()
  fullName: System.Fabric.FabricReplicator.System.Fabric.IReplicator.GetCatchUpCapability()
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricReplicator.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: System.Fabric.IReplicator.GetCatchUpCapability
    path: src/prod/src/managed/Api/src/System/Fabric/FabricReplicator.cs
    startLine: 135
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: This supports the Service Fabric infrastructure and is not meant to be used directly from your code.
  example: []
  syntax:
    content: long IReplicator.GetCatchUpCapability()
    content.vb: Function System.Fabric.IReplicator.GetCatchUpCapability As Long Implements IReplicator.GetCatchUpCapability
    return:
      type: System.Int64
      description: "\n<p>For Internal Use Only.</p>\n"
  overload: System.Fabric.FabricReplicator.System#Fabric#IReplicator#GetCatchUpCapability*
  implements:
  - System.Fabric.IReplicator.GetCatchUpCapability
  nameWithType.vb: FabricReplicator.System.Fabric.IReplicator.GetCatchUpCapability()
  name.vb: System.Fabric.IReplicator.GetCatchUpCapability()
- uid: System.Fabric.FabricReplicator.System#Fabric#IReplicator#UpdateEpochAsync(System.Fabric.Epoch,System.Threading.CancellationToken)
  commentId: M:System.Fabric.FabricReplicator.System#Fabric#IReplicator#UpdateEpochAsync(System.Fabric.Epoch,System.Threading.CancellationToken)
  id: System#Fabric#IReplicator#UpdateEpochAsync(System.Fabric.Epoch,System.Threading.CancellationToken)
  isEii: true
  parent: System.Fabric.FabricReplicator
  langs:
  - csharp
  - vb
  name: IReplicator.UpdateEpochAsync(Epoch, CancellationToken)
  nameWithType: FabricReplicator.IReplicator.UpdateEpochAsync(Epoch, CancellationToken)
  fullName: System.Fabric.FabricReplicator.System.Fabric.IReplicator.UpdateEpochAsync(System.Fabric.Epoch, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricReplicator.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: System.Fabric.IReplicator.UpdateEpochAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricReplicator.cs
    startLine: 150
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: This supports the Service Fabric infrastructure and is not meant to be used directly from your code.
  example: []
  syntax:
    content: Task IReplicator.UpdateEpochAsync(Epoch epoch, CancellationToken cancellationToken)
    content.vb: Function System.Fabric.IReplicator.UpdateEpochAsync(epoch As Epoch, cancellationToken As CancellationToken) As Task Implements IReplicator.UpdateEpochAsync
    parameters:
    - id: epoch
      type: System.Fabric.Epoch
      description: "\n<p>This supports the Service Fabric infrastructure and is not meant to be used directly from your code.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> object that the operation is observing. It can be used to send a notification that the operation should be canceled. Note that cancellation is advisory and that the operation might still be completed even if it is canceled.</p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>This supports the Service Fabric infrastructure and is not meant to be used directly from your code.</p>\n"
  overload: System.Fabric.FabricReplicator.System#Fabric#IReplicator#UpdateEpochAsync*
  implements:
  - System.Fabric.IReplicator.UpdateEpochAsync(System.Fabric.Epoch,System.Threading.CancellationToken)
  nameWithType.vb: FabricReplicator.System.Fabric.IReplicator.UpdateEpochAsync(Epoch, CancellationToken)
  name.vb: System.Fabric.IReplicator.UpdateEpochAsync(Epoch, CancellationToken)
- uid: System.Fabric.FabricReplicator.System#Fabric#IPrimaryReplicator#OnDataLossAsync(System.Threading.CancellationToken)
  commentId: M:System.Fabric.FabricReplicator.System#Fabric#IPrimaryReplicator#OnDataLossAsync(System.Threading.CancellationToken)
  id: System#Fabric#IPrimaryReplicator#OnDataLossAsync(System.Threading.CancellationToken)
  isEii: true
  parent: System.Fabric.FabricReplicator
  langs:
  - csharp
  - vb
  name: IPrimaryReplicator.OnDataLossAsync(CancellationToken)
  nameWithType: FabricReplicator.IPrimaryReplicator.OnDataLossAsync(CancellationToken)
  fullName: System.Fabric.FabricReplicator.System.Fabric.IPrimaryReplicator.OnDataLossAsync(System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricReplicator.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: System.Fabric.IPrimaryReplicator.OnDataLossAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricReplicator.cs
    startLine: 162
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: This supports the Service Fabric infrastructure and is not meant to be used directly from your code.
  example: []
  syntax:
    content: Task<bool> IPrimaryReplicator.OnDataLossAsync(CancellationToken cancellationToken)
    content.vb: Function System.Fabric.IPrimaryReplicator.OnDataLossAsync(cancellationToken As CancellationToken) As Task(Of Boolean) Implements IPrimaryReplicator.OnDataLossAsync
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> object that the operation is observing. It can be used to send a notification that the operation should be canceled. Note that cancellation is advisory and that the operation might still be completed even if it is canceled.</p>\n"
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
      description: "\n<p>A task that represents the asynchronous operation.</p>\n"
  overload: System.Fabric.FabricReplicator.System#Fabric#IPrimaryReplicator#OnDataLossAsync*
  implements:
  - System.Fabric.IPrimaryReplicator.OnDataLossAsync(System.Threading.CancellationToken)
  nameWithType.vb: FabricReplicator.System.Fabric.IPrimaryReplicator.OnDataLossAsync(CancellationToken)
  name.vb: System.Fabric.IPrimaryReplicator.OnDataLossAsync(CancellationToken)
- uid: System.Fabric.FabricReplicator.System#Fabric#IPrimaryReplicator#UpdateCatchUpReplicaSetConfiguration(System.Fabric.ReplicaSetConfiguration,System.Fabric.ReplicaSetConfiguration)
  commentId: M:System.Fabric.FabricReplicator.System#Fabric#IPrimaryReplicator#UpdateCatchUpReplicaSetConfiguration(System.Fabric.ReplicaSetConfiguration,System.Fabric.ReplicaSetConfiguration)
  id: System#Fabric#IPrimaryReplicator#UpdateCatchUpReplicaSetConfiguration(System.Fabric.ReplicaSetConfiguration,System.Fabric.ReplicaSetConfiguration)
  isEii: true
  parent: System.Fabric.FabricReplicator
  langs:
  - csharp
  - vb
  name: IPrimaryReplicator.UpdateCatchUpReplicaSetConfiguration(ReplicaSetConfiguration, ReplicaSetConfiguration)
  nameWithType: FabricReplicator.IPrimaryReplicator.UpdateCatchUpReplicaSetConfiguration(ReplicaSetConfiguration, ReplicaSetConfiguration)
  fullName: System.Fabric.FabricReplicator.System.Fabric.IPrimaryReplicator.UpdateCatchUpReplicaSetConfiguration(System.Fabric.ReplicaSetConfiguration, System.Fabric.ReplicaSetConfiguration)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricReplicator.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: System.Fabric.IPrimaryReplicator.UpdateCatchUpReplicaSetConfiguration
    path: src/prod/src/managed/Api/src/System/Fabric/FabricReplicator.cs
    startLine: 174
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: This supports the Service Fabric infrastructure and is not meant to be used directly from your code.
  example: []
  syntax:
    content: void IPrimaryReplicator.UpdateCatchUpReplicaSetConfiguration(ReplicaSetConfiguration currentConfiguration, ReplicaSetConfiguration previousConfiguration)
    content.vb: Sub System.Fabric.IPrimaryReplicator.UpdateCatchUpReplicaSetConfiguration(currentConfiguration As ReplicaSetConfiguration, previousConfiguration As ReplicaSetConfiguration) Implements IPrimaryReplicator.UpdateCatchUpReplicaSetConfiguration
    parameters:
    - id: currentConfiguration
      type: System.Fabric.ReplicaSetConfiguration
      description: "\n<p>For Internal Use Only.</p>\n"
    - id: previousConfiguration
      type: System.Fabric.ReplicaSetConfiguration
      description: "\n<p>For Internal Use Only.</p>\n"
  overload: System.Fabric.FabricReplicator.System#Fabric#IPrimaryReplicator#UpdateCatchUpReplicaSetConfiguration*
  implements:
  - System.Fabric.IPrimaryReplicator.UpdateCatchUpReplicaSetConfiguration(System.Fabric.ReplicaSetConfiguration,System.Fabric.ReplicaSetConfiguration)
  nameWithType.vb: FabricReplicator.System.Fabric.IPrimaryReplicator.UpdateCatchUpReplicaSetConfiguration(ReplicaSetConfiguration, ReplicaSetConfiguration)
  name.vb: System.Fabric.IPrimaryReplicator.UpdateCatchUpReplicaSetConfiguration(ReplicaSetConfiguration, ReplicaSetConfiguration)
- uid: System.Fabric.FabricReplicator.System#Fabric#IPrimaryReplicator#WaitForCatchUpQuorumAsync(System.Fabric.ReplicaSetQuorumMode,System.Threading.CancellationToken)
  commentId: M:System.Fabric.FabricReplicator.System#Fabric#IPrimaryReplicator#WaitForCatchUpQuorumAsync(System.Fabric.ReplicaSetQuorumMode,System.Threading.CancellationToken)
  id: System#Fabric#IPrimaryReplicator#WaitForCatchUpQuorumAsync(System.Fabric.ReplicaSetQuorumMode,System.Threading.CancellationToken)
  isEii: true
  parent: System.Fabric.FabricReplicator
  langs:
  - csharp
  - vb
  name: IPrimaryReplicator.WaitForCatchUpQuorumAsync(ReplicaSetQuorumMode, CancellationToken)
  nameWithType: FabricReplicator.IPrimaryReplicator.WaitForCatchUpQuorumAsync(ReplicaSetQuorumMode, CancellationToken)
  fullName: System.Fabric.FabricReplicator.System.Fabric.IPrimaryReplicator.WaitForCatchUpQuorumAsync(System.Fabric.ReplicaSetQuorumMode, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricReplicator.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: System.Fabric.IPrimaryReplicator.WaitForCatchUpQuorumAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricReplicator.cs
    startLine: 190
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: This supports the Service Fabric infrastructure and is not meant to be used directly from your code.
  example: []
  syntax:
    content: Task IPrimaryReplicator.WaitForCatchUpQuorumAsync(ReplicaSetQuorumMode quorumMode, CancellationToken cancellationToken)
    content.vb: Function System.Fabric.IPrimaryReplicator.WaitForCatchUpQuorumAsync(quorumMode As ReplicaSetQuorumMode, cancellationToken As CancellationToken) As Task Implements IPrimaryReplicator.WaitForCatchUpQuorumAsync
    parameters:
    - id: quorumMode
      type: System.Fabric.ReplicaSetQuorumMode
      description: "\n<p>For Internal Use Only.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The CancellationToken object that the operation is observing. It can be used to send a notification that the operation should be canceled.\nNote that cancellation is advisory and that the operation might still be completed even if it is canceled.</p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>For Internal Use Only.</p>\n"
  overload: System.Fabric.FabricReplicator.System#Fabric#IPrimaryReplicator#WaitForCatchUpQuorumAsync*
  implements:
  - System.Fabric.IPrimaryReplicator.WaitForCatchUpQuorumAsync(System.Fabric.ReplicaSetQuorumMode,System.Threading.CancellationToken)
  nameWithType.vb: FabricReplicator.System.Fabric.IPrimaryReplicator.WaitForCatchUpQuorumAsync(ReplicaSetQuorumMode, CancellationToken)
  name.vb: System.Fabric.IPrimaryReplicator.WaitForCatchUpQuorumAsync(ReplicaSetQuorumMode, CancellationToken)
- uid: System.Fabric.FabricReplicator.System#Fabric#IPrimaryReplicator#UpdateCurrentReplicaSetConfiguration(System.Fabric.ReplicaSetConfiguration)
  commentId: M:System.Fabric.FabricReplicator.System#Fabric#IPrimaryReplicator#UpdateCurrentReplicaSetConfiguration(System.Fabric.ReplicaSetConfiguration)
  id: System#Fabric#IPrimaryReplicator#UpdateCurrentReplicaSetConfiguration(System.Fabric.ReplicaSetConfiguration)
  isEii: true
  parent: System.Fabric.FabricReplicator
  langs:
  - csharp
  - vb
  name: IPrimaryReplicator.UpdateCurrentReplicaSetConfiguration(ReplicaSetConfiguration)
  nameWithType: FabricReplicator.IPrimaryReplicator.UpdateCurrentReplicaSetConfiguration(ReplicaSetConfiguration)
  fullName: System.Fabric.FabricReplicator.System.Fabric.IPrimaryReplicator.UpdateCurrentReplicaSetConfiguration(System.Fabric.ReplicaSetConfiguration)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricReplicator.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: System.Fabric.IPrimaryReplicator.UpdateCurrentReplicaSetConfiguration
    path: src/prod/src/managed/Api/src/System/Fabric/FabricReplicator.cs
    startLine: 203
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: This supports the Service Fabric infrastructure and is not meant to be used directly from your code.
  remarks: "\n<p>This supports the Service Fabric infrastructure and is not meant to be used directly from your code.</p>\n"
  example: []
  syntax:
    content: void IPrimaryReplicator.UpdateCurrentReplicaSetConfiguration(ReplicaSetConfiguration currentConfiguration)
    content.vb: Sub System.Fabric.IPrimaryReplicator.UpdateCurrentReplicaSetConfiguration(currentConfiguration As ReplicaSetConfiguration) Implements IPrimaryReplicator.UpdateCurrentReplicaSetConfiguration
    parameters:
    - id: currentConfiguration
      type: System.Fabric.ReplicaSetConfiguration
      description: "\n<p>This supports the Service Fabric infrastructure and is not meant to be used directly from your code.</p>\n"
  overload: System.Fabric.FabricReplicator.System#Fabric#IPrimaryReplicator#UpdateCurrentReplicaSetConfiguration*
  implements:
  - System.Fabric.IPrimaryReplicator.UpdateCurrentReplicaSetConfiguration(System.Fabric.ReplicaSetConfiguration)
  nameWithType.vb: FabricReplicator.System.Fabric.IPrimaryReplicator.UpdateCurrentReplicaSetConfiguration(ReplicaSetConfiguration)
  name.vb: System.Fabric.IPrimaryReplicator.UpdateCurrentReplicaSetConfiguration(ReplicaSetConfiguration)
- uid: System.Fabric.FabricReplicator.System#Fabric#IPrimaryReplicator#BuildReplicaAsync(System.Fabric.ReplicaInformation,System.Threading.CancellationToken)
  commentId: M:System.Fabric.FabricReplicator.System#Fabric#IPrimaryReplicator#BuildReplicaAsync(System.Fabric.ReplicaInformation,System.Threading.CancellationToken)
  id: System#Fabric#IPrimaryReplicator#BuildReplicaAsync(System.Fabric.ReplicaInformation,System.Threading.CancellationToken)
  isEii: true
  parent: System.Fabric.FabricReplicator
  langs:
  - csharp
  - vb
  name: IPrimaryReplicator.BuildReplicaAsync(ReplicaInformation, CancellationToken)
  nameWithType: FabricReplicator.IPrimaryReplicator.BuildReplicaAsync(ReplicaInformation, CancellationToken)
  fullName: System.Fabric.FabricReplicator.System.Fabric.IPrimaryReplicator.BuildReplicaAsync(System.Fabric.ReplicaInformation, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricReplicator.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: System.Fabric.IPrimaryReplicator.BuildReplicaAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricReplicator.cs
    startLine: 218
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: This supports the Service Fabric infrastructure and is not meant to be used directly from your code.
  example: []
  syntax:
    content: Task IPrimaryReplicator.BuildReplicaAsync(ReplicaInformation replicaInfo, CancellationToken cancellationToken)
    content.vb: Function System.Fabric.IPrimaryReplicator.BuildReplicaAsync(replicaInfo As ReplicaInformation, cancellationToken As CancellationToken) As Task Implements IPrimaryReplicator.BuildReplicaAsync
    parameters:
    - id: replicaInfo
      type: System.Fabric.ReplicaInformation
      description: "\n<p>This supports the Service Fabric infrastructure and is not meant to be used directly from your code.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref>  object that the operation is observing. It can be used to send a notification that the operation should be canceled. Note that cancellation is advisory and that the operation might still be completed even if it is canceled.</p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>A task that represents the asynchronous operation.</p>\n"
  overload: System.Fabric.FabricReplicator.System#Fabric#IPrimaryReplicator#BuildReplicaAsync*
  implements:
  - System.Fabric.IPrimaryReplicator.BuildReplicaAsync(System.Fabric.ReplicaInformation,System.Threading.CancellationToken)
  nameWithType.vb: FabricReplicator.System.Fabric.IPrimaryReplicator.BuildReplicaAsync(ReplicaInformation, CancellationToken)
  name.vb: System.Fabric.IPrimaryReplicator.BuildReplicaAsync(ReplicaInformation, CancellationToken)
- uid: System.Fabric.FabricReplicator.System#Fabric#IPrimaryReplicator#RemoveReplica(System.Int64)
  commentId: M:System.Fabric.FabricReplicator.System#Fabric#IPrimaryReplicator#RemoveReplica(System.Int64)
  id: System#Fabric#IPrimaryReplicator#RemoveReplica(System.Int64)
  isEii: true
  parent: System.Fabric.FabricReplicator
  langs:
  - csharp
  - vb
  name: IPrimaryReplicator.RemoveReplica(Int64)
  nameWithType: FabricReplicator.IPrimaryReplicator.RemoveReplica(Int64)
  fullName: System.Fabric.FabricReplicator.System.Fabric.IPrimaryReplicator.RemoveReplica(System.Int64)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricReplicator.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: System.Fabric.IPrimaryReplicator.RemoveReplica
    path: src/prod/src/managed/Api/src/System/Fabric/FabricReplicator.cs
    startLine: 230
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: This supports the Service Fabric infrastructure and is not meant to be used directly from your code.
  remarks: "\n<p>This supports the Service Fabric infrastructure and is not meant to be used directly from your code.</p>\n"
  example: []
  syntax:
    content: void IPrimaryReplicator.RemoveReplica(long replicaId)
    content.vb: Sub System.Fabric.IPrimaryReplicator.RemoveReplica(replicaId As Long) Implements IPrimaryReplicator.RemoveReplica
    parameters:
    - id: replicaId
      type: System.Int64
      description: "\n<p>This supports the Service Fabric infrastructure and is not meant to be used directly from your code.</p>\n"
  overload: System.Fabric.FabricReplicator.System#Fabric#IPrimaryReplicator#RemoveReplica*
  implements:
  - System.Fabric.IPrimaryReplicator.RemoveReplica(System.Int64)
  nameWithType.vb: FabricReplicator.System.Fabric.IPrimaryReplicator.RemoveReplica(Int64)
  name.vb: System.Fabric.IPrimaryReplicator.RemoveReplica(Int64)
references:
- uid: System.Fabric.IStateReplicator
  commentId: T:System.Fabric.IStateReplicator
  parent: System.Fabric
  isExternal: false
  name: IStateReplicator
  nameWithType: IStateReplicator
  fullName: System.Fabric.IStateReplicator
- uid: System.Fabric.IReplicator
  commentId: T:System.Fabric.IReplicator
  parent: System.Fabric
  isExternal: false
  name: IReplicator
  nameWithType: IReplicator
  fullName: System.Fabric.IReplicator
- uid: System.Fabric.IPrimaryReplicator
  commentId: T:System.Fabric.IPrimaryReplicator
  parent: System.Fabric
  isExternal: false
  name: IPrimaryReplicator
  nameWithType: IPrimaryReplicator
  fullName: System.Fabric.IPrimaryReplicator
- uid: System.Fabric.IStateProvider
  commentId: T:System.Fabric.IStateProvider
  parent: System.Fabric
  isExternal: false
  name: IStateProvider
  nameWithType: IStateProvider
  fullName: System.Fabric.IStateProvider
- uid: System.Fabric.FabricReplicator
  commentId: T:System.Fabric.FabricReplicator
  parent: System.Fabric
  isExternal: false
  name: FabricReplicator
  nameWithType: FabricReplicator
  fullName: System.Fabric.FabricReplicator
- uid: System.Fabric.IStatefulServicePartition.CreateReplicator(System.Fabric.IStateProvider,System.Fabric.ReplicatorSettings)
  commentId: M:System.Fabric.IStatefulServicePartition.CreateReplicator(System.Fabric.IStateProvider,System.Fabric.ReplicatorSettings)
- uid: System.Fabric
  commentId: N:System.Fabric
  isExternal: false
  name: System.Fabric
  nameWithType: System.Fabric
  fullName: System.Fabric
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Fabric.IReplicatorCatchupSpecificQuorum
  commentId: T:System.Fabric.IReplicatorCatchupSpecificQuorum
  parent: System.Fabric
  isExternal: false
  name: IReplicatorCatchupSpecificQuorum
  nameWithType: IReplicatorCatchupSpecificQuorum
  fullName: System.Fabric.IReplicatorCatchupSpecificQuorum
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.FabricReplicator.System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
  commentId: M:System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  parent: System.Fabric.Messaging.Stream.ByteArraySerializer
  definition: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  name: Serialize<FabricReplicator>()
  nameWithType: ByteArraySerializer.Serialize<FabricReplicator>()
  fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<System.Fabric.FabricReplicator>()
  nameWithType.vb: ByteArraySerializer.Serialize(Of FabricReplicator)()
  fullname.vb: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of System.Fabric.FabricReplicator)()
  name.vb: Serialize(Of FabricReplicator)()
  spec.csharp:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
    name: Serialize<FabricReplicator>
    nameWithType: ByteArraySerializer.Serialize<FabricReplicator>
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<System.Fabric.FabricReplicator>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
    name: Serialize(Of FabricReplicator)
    nameWithType: ByteArraySerializer.Serialize(Of FabricReplicator)
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of System.Fabric.FabricReplicator)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  commentId: M:System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  isExternal: false
  name: Serialize<T>(T)
  nameWithType: ByteArraySerializer.Serialize<T>(T)
  fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<T>(T)
  nameWithType.vb: ByteArraySerializer.Serialize(Of T)(T)
  fullname.vb: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of T)(T)
  name.vb: Serialize(Of T)(T)
  spec.csharp:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
    name: Serialize<T>
    nameWithType: ByteArraySerializer.Serialize<T>
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
    name: Serialize(Of T)
    nameWithType: ByteArraySerializer.Serialize(Of T)
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.Messaging.Stream.ByteArraySerializer
  commentId: T:System.Fabric.Messaging.Stream.ByteArraySerializer
  parent: System.Fabric.Messaging.Stream
  isExternal: false
  name: ByteArraySerializer
  nameWithType: ByteArraySerializer
  fullName: System.Fabric.Messaging.Stream.ByteArraySerializer
- uid: System.Fabric.Messaging.Stream
  commentId: N:System.Fabric.Messaging.Stream
  isExternal: false
  name: System.Fabric.Messaging.Stream
  nameWithType: System.Fabric.Messaging.Stream
  fullName: System.Fabric.Messaging.Stream
- uid: System.Int64
  commentId: T:System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.Fabric.FabricReplicator.StateReplicator*
  commentId: Overload:System.Fabric.FabricReplicator.StateReplicator
  isExternal: false
  name: StateReplicator
  nameWithType: FabricReplicator.StateReplicator
  fullName: System.Fabric.FabricReplicator.StateReplicator
- uid: System.Fabric.IStateReplicator2
  commentId: T:System.Fabric.IStateReplicator2
  parent: System.Fabric
  isExternal: false
  name: IStateReplicator2
  nameWithType: IStateReplicator2
  fullName: System.Fabric.IStateReplicator2
- uid: System.Fabric.FabricReplicator.StateReplicator2*
  commentId: Overload:System.Fabric.FabricReplicator.StateReplicator2
  isExternal: false
  name: StateReplicator2
  nameWithType: FabricReplicator.StateReplicator2
  fullName: System.Fabric.FabricReplicator.StateReplicator2
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Fabric.FabricReplicator.System#Fabric#IReplicator#OpenAsync*
  commentId: Overload:System.Fabric.FabricReplicator.System#Fabric#IReplicator#OpenAsync
  isExternal: false
  name: IReplicator.OpenAsync
  nameWithType: FabricReplicator.IReplicator.OpenAsync
  fullName: System.Fabric.FabricReplicator.System.Fabric.IReplicator.OpenAsync
  nameWithType.vb: FabricReplicator.System.Fabric.IReplicator.OpenAsync
  name.vb: System.Fabric.IReplicator.OpenAsync
- uid: System.Fabric.IReplicator.OpenAsync(System.Threading.CancellationToken)
  commentId: M:System.Fabric.IReplicator.OpenAsync(System.Threading.CancellationToken)
  parent: System.Fabric.IReplicator
  isExternal: true
  name: OpenAsync(CancellationToken)
  nameWithType: IReplicator.OpenAsync(CancellationToken)
  fullName: System.Fabric.IReplicator.OpenAsync(System.Threading.CancellationToken)
  spec.csharp:
  - uid: System.Fabric.IReplicator.OpenAsync(System.Threading.CancellationToken)
    name: OpenAsync
    nameWithType: IReplicator.OpenAsync
    fullName: System.Fabric.IReplicator.OpenAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Fabric.IReplicator.OpenAsync(System.Threading.CancellationToken)
    name: OpenAsync
    nameWithType: IReplicator.OpenAsync
    fullName: System.Fabric.IReplicator.OpenAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{System.String}
  commentId: T:System.Threading.Tasks.Task{System.String}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<String>
  nameWithType: Task<String>
  fullName: System.Threading.Tasks.Task<System.String>
  nameWithType.vb: Task(Of String)
  fullname.vb: System.Threading.Tasks.Task(Of System.String)
  name.vb: Task(Of String)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: false
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullname.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: System.Fabric.FabricReplicator.System#Fabric#IReplicator#ChangeRoleAsync*
  commentId: Overload:System.Fabric.FabricReplicator.System#Fabric#IReplicator#ChangeRoleAsync
  isExternal: false
  name: IReplicator.ChangeRoleAsync
  nameWithType: FabricReplicator.IReplicator.ChangeRoleAsync
  fullName: System.Fabric.FabricReplicator.System.Fabric.IReplicator.ChangeRoleAsync
  nameWithType.vb: FabricReplicator.System.Fabric.IReplicator.ChangeRoleAsync
  name.vb: System.Fabric.IReplicator.ChangeRoleAsync
- uid: System.Fabric.IReplicator.ChangeRoleAsync(System.Fabric.Epoch,System.Fabric.ReplicaRole,System.Threading.CancellationToken)
  commentId: M:System.Fabric.IReplicator.ChangeRoleAsync(System.Fabric.Epoch,System.Fabric.ReplicaRole,System.Threading.CancellationToken)
  parent: System.Fabric.IReplicator
  isExternal: true
  name: ChangeRoleAsync(Epoch, ReplicaRole, CancellationToken)
  nameWithType: IReplicator.ChangeRoleAsync(Epoch, ReplicaRole, CancellationToken)
  fullName: System.Fabric.IReplicator.ChangeRoleAsync(System.Fabric.Epoch, System.Fabric.ReplicaRole, System.Threading.CancellationToken)
  spec.csharp:
  - uid: System.Fabric.IReplicator.ChangeRoleAsync(System.Fabric.Epoch,System.Fabric.ReplicaRole,System.Threading.CancellationToken)
    name: ChangeRoleAsync
    nameWithType: IReplicator.ChangeRoleAsync
    fullName: System.Fabric.IReplicator.ChangeRoleAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Fabric.Epoch
    name: Epoch
    nameWithType: Epoch
    fullName: System.Fabric.Epoch
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Fabric.ReplicaRole
    name: ReplicaRole
    nameWithType: ReplicaRole
    fullName: System.Fabric.ReplicaRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Fabric.IReplicator.ChangeRoleAsync(System.Fabric.Epoch,System.Fabric.ReplicaRole,System.Threading.CancellationToken)
    name: ChangeRoleAsync
    nameWithType: IReplicator.ChangeRoleAsync
    fullName: System.Fabric.IReplicator.ChangeRoleAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Fabric.Epoch
    name: Epoch
    nameWithType: Epoch
    fullName: System.Fabric.Epoch
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Fabric.ReplicaRole
    name: ReplicaRole
    nameWithType: ReplicaRole
    fullName: System.Fabric.ReplicaRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.Epoch
  commentId: T:System.Fabric.Epoch
  parent: System.Fabric
  isExternal: false
  name: Epoch
  nameWithType: Epoch
  fullName: System.Fabric.Epoch
- uid: System.Fabric.ReplicaRole
  commentId: T:System.Fabric.ReplicaRole
  parent: System.Fabric
  isExternal: false
  name: ReplicaRole
  nameWithType: ReplicaRole
  fullName: System.Fabric.ReplicaRole
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Fabric.FabricReplicator.System#Fabric#IReplicator#CloseAsync*
  commentId: Overload:System.Fabric.FabricReplicator.System#Fabric#IReplicator#CloseAsync
  isExternal: false
  name: IReplicator.CloseAsync
  nameWithType: FabricReplicator.IReplicator.CloseAsync
  fullName: System.Fabric.FabricReplicator.System.Fabric.IReplicator.CloseAsync
  nameWithType.vb: FabricReplicator.System.Fabric.IReplicator.CloseAsync
  name.vb: System.Fabric.IReplicator.CloseAsync
- uid: System.Fabric.IReplicator.CloseAsync(System.Threading.CancellationToken)
  commentId: M:System.Fabric.IReplicator.CloseAsync(System.Threading.CancellationToken)
  parent: System.Fabric.IReplicator
  isExternal: true
  name: CloseAsync(CancellationToken)
  nameWithType: IReplicator.CloseAsync(CancellationToken)
  fullName: System.Fabric.IReplicator.CloseAsync(System.Threading.CancellationToken)
  spec.csharp:
  - uid: System.Fabric.IReplicator.CloseAsync(System.Threading.CancellationToken)
    name: CloseAsync
    nameWithType: IReplicator.CloseAsync
    fullName: System.Fabric.IReplicator.CloseAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Fabric.IReplicator.CloseAsync(System.Threading.CancellationToken)
    name: CloseAsync
    nameWithType: IReplicator.CloseAsync
    fullName: System.Fabric.IReplicator.CloseAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.FabricReplicator.System#Fabric#IReplicator#Abort*
  commentId: Overload:System.Fabric.FabricReplicator.System#Fabric#IReplicator#Abort
  isExternal: false
  name: IReplicator.Abort
  nameWithType: FabricReplicator.IReplicator.Abort
  fullName: System.Fabric.FabricReplicator.System.Fabric.IReplicator.Abort
  nameWithType.vb: FabricReplicator.System.Fabric.IReplicator.Abort
  name.vb: System.Fabric.IReplicator.Abort
- uid: System.Fabric.IReplicator.Abort
  commentId: M:System.Fabric.IReplicator.Abort
  parent: System.Fabric.IReplicator
  isExternal: false
  name: Abort()
  nameWithType: IReplicator.Abort()
  fullName: System.Fabric.IReplicator.Abort()
  spec.csharp:
  - uid: System.Fabric.IReplicator.Abort
    name: Abort
    nameWithType: IReplicator.Abort
    fullName: System.Fabric.IReplicator.Abort
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Fabric.IReplicator.Abort
    name: Abort
    nameWithType: IReplicator.Abort
    fullName: System.Fabric.IReplicator.Abort
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.FabricReplicator.System#Fabric#IReplicator#GetCurrentProgress*
  commentId: Overload:System.Fabric.FabricReplicator.System#Fabric#IReplicator#GetCurrentProgress
  isExternal: false
  name: IReplicator.GetCurrentProgress
  nameWithType: FabricReplicator.IReplicator.GetCurrentProgress
  fullName: System.Fabric.FabricReplicator.System.Fabric.IReplicator.GetCurrentProgress
  nameWithType.vb: FabricReplicator.System.Fabric.IReplicator.GetCurrentProgress
  name.vb: System.Fabric.IReplicator.GetCurrentProgress
- uid: System.Fabric.IReplicator.GetCurrentProgress
  commentId: M:System.Fabric.IReplicator.GetCurrentProgress
  parent: System.Fabric.IReplicator
  isExternal: false
  name: GetCurrentProgress()
  nameWithType: IReplicator.GetCurrentProgress()
  fullName: System.Fabric.IReplicator.GetCurrentProgress()
  spec.csharp:
  - uid: System.Fabric.IReplicator.GetCurrentProgress
    name: GetCurrentProgress
    nameWithType: IReplicator.GetCurrentProgress
    fullName: System.Fabric.IReplicator.GetCurrentProgress
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Fabric.IReplicator.GetCurrentProgress
    name: GetCurrentProgress
    nameWithType: IReplicator.GetCurrentProgress
    fullName: System.Fabric.IReplicator.GetCurrentProgress
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.FabricReplicator.System#Fabric#IReplicator#GetCatchUpCapability*
  commentId: Overload:System.Fabric.FabricReplicator.System#Fabric#IReplicator#GetCatchUpCapability
  isExternal: false
  name: IReplicator.GetCatchUpCapability
  nameWithType: FabricReplicator.IReplicator.GetCatchUpCapability
  fullName: System.Fabric.FabricReplicator.System.Fabric.IReplicator.GetCatchUpCapability
  nameWithType.vb: FabricReplicator.System.Fabric.IReplicator.GetCatchUpCapability
  name.vb: System.Fabric.IReplicator.GetCatchUpCapability
- uid: System.Fabric.IReplicator.GetCatchUpCapability
  commentId: M:System.Fabric.IReplicator.GetCatchUpCapability
  parent: System.Fabric.IReplicator
  isExternal: false
  name: GetCatchUpCapability()
  nameWithType: IReplicator.GetCatchUpCapability()
  fullName: System.Fabric.IReplicator.GetCatchUpCapability()
  spec.csharp:
  - uid: System.Fabric.IReplicator.GetCatchUpCapability
    name: GetCatchUpCapability
    nameWithType: IReplicator.GetCatchUpCapability
    fullName: System.Fabric.IReplicator.GetCatchUpCapability
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Fabric.IReplicator.GetCatchUpCapability
    name: GetCatchUpCapability
    nameWithType: IReplicator.GetCatchUpCapability
    fullName: System.Fabric.IReplicator.GetCatchUpCapability
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.FabricReplicator.System#Fabric#IReplicator#UpdateEpochAsync*
  commentId: Overload:System.Fabric.FabricReplicator.System#Fabric#IReplicator#UpdateEpochAsync
  isExternal: false
  name: IReplicator.UpdateEpochAsync
  nameWithType: FabricReplicator.IReplicator.UpdateEpochAsync
  fullName: System.Fabric.FabricReplicator.System.Fabric.IReplicator.UpdateEpochAsync
  nameWithType.vb: FabricReplicator.System.Fabric.IReplicator.UpdateEpochAsync
  name.vb: System.Fabric.IReplicator.UpdateEpochAsync
- uid: System.Fabric.IReplicator.UpdateEpochAsync(System.Fabric.Epoch,System.Threading.CancellationToken)
  commentId: M:System.Fabric.IReplicator.UpdateEpochAsync(System.Fabric.Epoch,System.Threading.CancellationToken)
  parent: System.Fabric.IReplicator
  isExternal: true
  name: UpdateEpochAsync(Epoch, CancellationToken)
  nameWithType: IReplicator.UpdateEpochAsync(Epoch, CancellationToken)
  fullName: System.Fabric.IReplicator.UpdateEpochAsync(System.Fabric.Epoch, System.Threading.CancellationToken)
  spec.csharp:
  - uid: System.Fabric.IReplicator.UpdateEpochAsync(System.Fabric.Epoch,System.Threading.CancellationToken)
    name: UpdateEpochAsync
    nameWithType: IReplicator.UpdateEpochAsync
    fullName: System.Fabric.IReplicator.UpdateEpochAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Fabric.Epoch
    name: Epoch
    nameWithType: Epoch
    fullName: System.Fabric.Epoch
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Fabric.IReplicator.UpdateEpochAsync(System.Fabric.Epoch,System.Threading.CancellationToken)
    name: UpdateEpochAsync
    nameWithType: IReplicator.UpdateEpochAsync
    fullName: System.Fabric.IReplicator.UpdateEpochAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Fabric.Epoch
    name: Epoch
    nameWithType: Epoch
    fullName: System.Fabric.Epoch
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.FabricReplicator.System#Fabric#IPrimaryReplicator#OnDataLossAsync*
  commentId: Overload:System.Fabric.FabricReplicator.System#Fabric#IPrimaryReplicator#OnDataLossAsync
  isExternal: false
  name: IPrimaryReplicator.OnDataLossAsync
  nameWithType: FabricReplicator.IPrimaryReplicator.OnDataLossAsync
  fullName: System.Fabric.FabricReplicator.System.Fabric.IPrimaryReplicator.OnDataLossAsync
  nameWithType.vb: FabricReplicator.System.Fabric.IPrimaryReplicator.OnDataLossAsync
  name.vb: System.Fabric.IPrimaryReplicator.OnDataLossAsync
- uid: System.Fabric.IPrimaryReplicator.OnDataLossAsync(System.Threading.CancellationToken)
  commentId: M:System.Fabric.IPrimaryReplicator.OnDataLossAsync(System.Threading.CancellationToken)
  parent: System.Fabric.IPrimaryReplicator
  isExternal: true
  name: OnDataLossAsync(CancellationToken)
  nameWithType: IPrimaryReplicator.OnDataLossAsync(CancellationToken)
  fullName: System.Fabric.IPrimaryReplicator.OnDataLossAsync(System.Threading.CancellationToken)
  spec.csharp:
  - uid: System.Fabric.IPrimaryReplicator.OnDataLossAsync(System.Threading.CancellationToken)
    name: OnDataLossAsync
    nameWithType: IPrimaryReplicator.OnDataLossAsync
    fullName: System.Fabric.IPrimaryReplicator.OnDataLossAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Fabric.IPrimaryReplicator.OnDataLossAsync(System.Threading.CancellationToken)
    name: OnDataLossAsync
    nameWithType: IPrimaryReplicator.OnDataLossAsync
    fullName: System.Fabric.IPrimaryReplicator.OnDataLossAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{System.Boolean}
  commentId: T:System.Threading.Tasks.Task{System.Boolean}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Boolean>
  nameWithType: Task<Boolean>
  fullName: System.Threading.Tasks.Task<System.Boolean>
  nameWithType.vb: Task(Of Boolean)
  fullname.vb: System.Threading.Tasks.Task(Of System.Boolean)
  name.vb: Task(Of Boolean)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.FabricReplicator.System#Fabric#IPrimaryReplicator#UpdateCatchUpReplicaSetConfiguration*
  commentId: Overload:System.Fabric.FabricReplicator.System#Fabric#IPrimaryReplicator#UpdateCatchUpReplicaSetConfiguration
  isExternal: false
  name: IPrimaryReplicator.UpdateCatchUpReplicaSetConfiguration
  nameWithType: FabricReplicator.IPrimaryReplicator.UpdateCatchUpReplicaSetConfiguration
  fullName: System.Fabric.FabricReplicator.System.Fabric.IPrimaryReplicator.UpdateCatchUpReplicaSetConfiguration
  nameWithType.vb: FabricReplicator.System.Fabric.IPrimaryReplicator.UpdateCatchUpReplicaSetConfiguration
  name.vb: System.Fabric.IPrimaryReplicator.UpdateCatchUpReplicaSetConfiguration
- uid: System.Fabric.IPrimaryReplicator.UpdateCatchUpReplicaSetConfiguration(System.Fabric.ReplicaSetConfiguration,System.Fabric.ReplicaSetConfiguration)
  commentId: M:System.Fabric.IPrimaryReplicator.UpdateCatchUpReplicaSetConfiguration(System.Fabric.ReplicaSetConfiguration,System.Fabric.ReplicaSetConfiguration)
  parent: System.Fabric.IPrimaryReplicator
  isExternal: false
  name: UpdateCatchUpReplicaSetConfiguration(ReplicaSetConfiguration, ReplicaSetConfiguration)
  nameWithType: IPrimaryReplicator.UpdateCatchUpReplicaSetConfiguration(ReplicaSetConfiguration, ReplicaSetConfiguration)
  fullName: System.Fabric.IPrimaryReplicator.UpdateCatchUpReplicaSetConfiguration(System.Fabric.ReplicaSetConfiguration, System.Fabric.ReplicaSetConfiguration)
  spec.csharp:
  - uid: System.Fabric.IPrimaryReplicator.UpdateCatchUpReplicaSetConfiguration(System.Fabric.ReplicaSetConfiguration,System.Fabric.ReplicaSetConfiguration)
    name: UpdateCatchUpReplicaSetConfiguration
    nameWithType: IPrimaryReplicator.UpdateCatchUpReplicaSetConfiguration
    fullName: System.Fabric.IPrimaryReplicator.UpdateCatchUpReplicaSetConfiguration
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Fabric.ReplicaSetConfiguration
    name: ReplicaSetConfiguration
    nameWithType: ReplicaSetConfiguration
    fullName: System.Fabric.ReplicaSetConfiguration
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Fabric.ReplicaSetConfiguration
    name: ReplicaSetConfiguration
    nameWithType: ReplicaSetConfiguration
    fullName: System.Fabric.ReplicaSetConfiguration
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Fabric.IPrimaryReplicator.UpdateCatchUpReplicaSetConfiguration(System.Fabric.ReplicaSetConfiguration,System.Fabric.ReplicaSetConfiguration)
    name: UpdateCatchUpReplicaSetConfiguration
    nameWithType: IPrimaryReplicator.UpdateCatchUpReplicaSetConfiguration
    fullName: System.Fabric.IPrimaryReplicator.UpdateCatchUpReplicaSetConfiguration
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Fabric.ReplicaSetConfiguration
    name: ReplicaSetConfiguration
    nameWithType: ReplicaSetConfiguration
    fullName: System.Fabric.ReplicaSetConfiguration
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Fabric.ReplicaSetConfiguration
    name: ReplicaSetConfiguration
    nameWithType: ReplicaSetConfiguration
    fullName: System.Fabric.ReplicaSetConfiguration
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.ReplicaSetConfiguration
  commentId: T:System.Fabric.ReplicaSetConfiguration
  parent: System.Fabric
  isExternal: false
  name: ReplicaSetConfiguration
  nameWithType: ReplicaSetConfiguration
  fullName: System.Fabric.ReplicaSetConfiguration
- uid: System.Fabric.FabricReplicator.System#Fabric#IPrimaryReplicator#WaitForCatchUpQuorumAsync*
  commentId: Overload:System.Fabric.FabricReplicator.System#Fabric#IPrimaryReplicator#WaitForCatchUpQuorumAsync
  isExternal: false
  name: IPrimaryReplicator.WaitForCatchUpQuorumAsync
  nameWithType: FabricReplicator.IPrimaryReplicator.WaitForCatchUpQuorumAsync
  fullName: System.Fabric.FabricReplicator.System.Fabric.IPrimaryReplicator.WaitForCatchUpQuorumAsync
  nameWithType.vb: FabricReplicator.System.Fabric.IPrimaryReplicator.WaitForCatchUpQuorumAsync
  name.vb: System.Fabric.IPrimaryReplicator.WaitForCatchUpQuorumAsync
- uid: System.Fabric.IPrimaryReplicator.WaitForCatchUpQuorumAsync(System.Fabric.ReplicaSetQuorumMode,System.Threading.CancellationToken)
  commentId: M:System.Fabric.IPrimaryReplicator.WaitForCatchUpQuorumAsync(System.Fabric.ReplicaSetQuorumMode,System.Threading.CancellationToken)
  parent: System.Fabric.IPrimaryReplicator
  isExternal: true
  name: WaitForCatchUpQuorumAsync(ReplicaSetQuorumMode, CancellationToken)
  nameWithType: IPrimaryReplicator.WaitForCatchUpQuorumAsync(ReplicaSetQuorumMode, CancellationToken)
  fullName: System.Fabric.IPrimaryReplicator.WaitForCatchUpQuorumAsync(System.Fabric.ReplicaSetQuorumMode, System.Threading.CancellationToken)
  spec.csharp:
  - uid: System.Fabric.IPrimaryReplicator.WaitForCatchUpQuorumAsync(System.Fabric.ReplicaSetQuorumMode,System.Threading.CancellationToken)
    name: WaitForCatchUpQuorumAsync
    nameWithType: IPrimaryReplicator.WaitForCatchUpQuorumAsync
    fullName: System.Fabric.IPrimaryReplicator.WaitForCatchUpQuorumAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Fabric.ReplicaSetQuorumMode
    name: ReplicaSetQuorumMode
    nameWithType: ReplicaSetQuorumMode
    fullName: System.Fabric.ReplicaSetQuorumMode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Fabric.IPrimaryReplicator.WaitForCatchUpQuorumAsync(System.Fabric.ReplicaSetQuorumMode,System.Threading.CancellationToken)
    name: WaitForCatchUpQuorumAsync
    nameWithType: IPrimaryReplicator.WaitForCatchUpQuorumAsync
    fullName: System.Fabric.IPrimaryReplicator.WaitForCatchUpQuorumAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Fabric.ReplicaSetQuorumMode
    name: ReplicaSetQuorumMode
    nameWithType: ReplicaSetQuorumMode
    fullName: System.Fabric.ReplicaSetQuorumMode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.ReplicaSetQuorumMode
  commentId: T:System.Fabric.ReplicaSetQuorumMode
  parent: System.Fabric
  isExternal: false
  name: ReplicaSetQuorumMode
  nameWithType: ReplicaSetQuorumMode
  fullName: System.Fabric.ReplicaSetQuorumMode
- uid: System.Fabric.FabricReplicator.System#Fabric#IPrimaryReplicator#UpdateCurrentReplicaSetConfiguration*
  commentId: Overload:System.Fabric.FabricReplicator.System#Fabric#IPrimaryReplicator#UpdateCurrentReplicaSetConfiguration
  isExternal: false
  name: IPrimaryReplicator.UpdateCurrentReplicaSetConfiguration
  nameWithType: FabricReplicator.IPrimaryReplicator.UpdateCurrentReplicaSetConfiguration
  fullName: System.Fabric.FabricReplicator.System.Fabric.IPrimaryReplicator.UpdateCurrentReplicaSetConfiguration
  nameWithType.vb: FabricReplicator.System.Fabric.IPrimaryReplicator.UpdateCurrentReplicaSetConfiguration
  name.vb: System.Fabric.IPrimaryReplicator.UpdateCurrentReplicaSetConfiguration
- uid: System.Fabric.IPrimaryReplicator.UpdateCurrentReplicaSetConfiguration(System.Fabric.ReplicaSetConfiguration)
  commentId: M:System.Fabric.IPrimaryReplicator.UpdateCurrentReplicaSetConfiguration(System.Fabric.ReplicaSetConfiguration)
  parent: System.Fabric.IPrimaryReplicator
  isExternal: false
  name: UpdateCurrentReplicaSetConfiguration(ReplicaSetConfiguration)
  nameWithType: IPrimaryReplicator.UpdateCurrentReplicaSetConfiguration(ReplicaSetConfiguration)
  fullName: System.Fabric.IPrimaryReplicator.UpdateCurrentReplicaSetConfiguration(System.Fabric.ReplicaSetConfiguration)
  spec.csharp:
  - uid: System.Fabric.IPrimaryReplicator.UpdateCurrentReplicaSetConfiguration(System.Fabric.ReplicaSetConfiguration)
    name: UpdateCurrentReplicaSetConfiguration
    nameWithType: IPrimaryReplicator.UpdateCurrentReplicaSetConfiguration
    fullName: System.Fabric.IPrimaryReplicator.UpdateCurrentReplicaSetConfiguration
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Fabric.ReplicaSetConfiguration
    name: ReplicaSetConfiguration
    nameWithType: ReplicaSetConfiguration
    fullName: System.Fabric.ReplicaSetConfiguration
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Fabric.IPrimaryReplicator.UpdateCurrentReplicaSetConfiguration(System.Fabric.ReplicaSetConfiguration)
    name: UpdateCurrentReplicaSetConfiguration
    nameWithType: IPrimaryReplicator.UpdateCurrentReplicaSetConfiguration
    fullName: System.Fabric.IPrimaryReplicator.UpdateCurrentReplicaSetConfiguration
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Fabric.ReplicaSetConfiguration
    name: ReplicaSetConfiguration
    nameWithType: ReplicaSetConfiguration
    fullName: System.Fabric.ReplicaSetConfiguration
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.FabricReplicator.System#Fabric#IPrimaryReplicator#BuildReplicaAsync*
  commentId: Overload:System.Fabric.FabricReplicator.System#Fabric#IPrimaryReplicator#BuildReplicaAsync
  isExternal: false
  name: IPrimaryReplicator.BuildReplicaAsync
  nameWithType: FabricReplicator.IPrimaryReplicator.BuildReplicaAsync
  fullName: System.Fabric.FabricReplicator.System.Fabric.IPrimaryReplicator.BuildReplicaAsync
  nameWithType.vb: FabricReplicator.System.Fabric.IPrimaryReplicator.BuildReplicaAsync
  name.vb: System.Fabric.IPrimaryReplicator.BuildReplicaAsync
- uid: System.Fabric.IPrimaryReplicator.BuildReplicaAsync(System.Fabric.ReplicaInformation,System.Threading.CancellationToken)
  commentId: M:System.Fabric.IPrimaryReplicator.BuildReplicaAsync(System.Fabric.ReplicaInformation,System.Threading.CancellationToken)
  parent: System.Fabric.IPrimaryReplicator
  isExternal: true
  name: BuildReplicaAsync(ReplicaInformation, CancellationToken)
  nameWithType: IPrimaryReplicator.BuildReplicaAsync(ReplicaInformation, CancellationToken)
  fullName: System.Fabric.IPrimaryReplicator.BuildReplicaAsync(System.Fabric.ReplicaInformation, System.Threading.CancellationToken)
  spec.csharp:
  - uid: System.Fabric.IPrimaryReplicator.BuildReplicaAsync(System.Fabric.ReplicaInformation,System.Threading.CancellationToken)
    name: BuildReplicaAsync
    nameWithType: IPrimaryReplicator.BuildReplicaAsync
    fullName: System.Fabric.IPrimaryReplicator.BuildReplicaAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Fabric.ReplicaInformation
    name: ReplicaInformation
    nameWithType: ReplicaInformation
    fullName: System.Fabric.ReplicaInformation
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Fabric.IPrimaryReplicator.BuildReplicaAsync(System.Fabric.ReplicaInformation,System.Threading.CancellationToken)
    name: BuildReplicaAsync
    nameWithType: IPrimaryReplicator.BuildReplicaAsync
    fullName: System.Fabric.IPrimaryReplicator.BuildReplicaAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Fabric.ReplicaInformation
    name: ReplicaInformation
    nameWithType: ReplicaInformation
    fullName: System.Fabric.ReplicaInformation
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.ReplicaInformation
  commentId: T:System.Fabric.ReplicaInformation
  parent: System.Fabric
  isExternal: false
  name: ReplicaInformation
  nameWithType: ReplicaInformation
  fullName: System.Fabric.ReplicaInformation
- uid: System.Fabric.FabricReplicator.System#Fabric#IPrimaryReplicator#RemoveReplica*
  commentId: Overload:System.Fabric.FabricReplicator.System#Fabric#IPrimaryReplicator#RemoveReplica
  isExternal: false
  name: IPrimaryReplicator.RemoveReplica
  nameWithType: FabricReplicator.IPrimaryReplicator.RemoveReplica
  fullName: System.Fabric.FabricReplicator.System.Fabric.IPrimaryReplicator.RemoveReplica
  nameWithType.vb: FabricReplicator.System.Fabric.IPrimaryReplicator.RemoveReplica
  name.vb: System.Fabric.IPrimaryReplicator.RemoveReplica
- uid: System.Fabric.IPrimaryReplicator.RemoveReplica(System.Int64)
  commentId: M:System.Fabric.IPrimaryReplicator.RemoveReplica(System.Int64)
  parent: System.Fabric.IPrimaryReplicator
  isExternal: true
  name: RemoveReplica(Int64)
  nameWithType: IPrimaryReplicator.RemoveReplica(Int64)
  fullName: System.Fabric.IPrimaryReplicator.RemoveReplica(System.Int64)
  spec.csharp:
  - uid: System.Fabric.IPrimaryReplicator.RemoveReplica(System.Int64)
    name: RemoveReplica
    nameWithType: IPrimaryReplicator.RemoveReplica
    fullName: System.Fabric.IPrimaryReplicator.RemoveReplica
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Fabric.IPrimaryReplicator.RemoveReplica(System.Int64)
    name: RemoveReplica
    nameWithType: IPrimaryReplicator.RemoveReplica
    fullName: System.Fabric.IPrimaryReplicator.RemoveReplica
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
