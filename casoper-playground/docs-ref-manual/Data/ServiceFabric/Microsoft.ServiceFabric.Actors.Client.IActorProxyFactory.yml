### YamlMime:ManagedReference
items:
- uid: Microsoft.ServiceFabric.Actors.Client.IActorProxyFactory
  commentId: T:Microsoft.ServiceFabric.Actors.Client.IActorProxyFactory
  id: IActorProxyFactory
  parent: Microsoft.ServiceFabric.Actors.Client
  children:
  - Microsoft.ServiceFabric.Actors.Client.IActorProxyFactory.CreateActorProxy``1(Microsoft.ServiceFabric.Actors.ActorId,System.String,System.String,System.String)
  - Microsoft.ServiceFabric.Actors.Client.IActorProxyFactory.CreateActorProxy``1(System.Uri,Microsoft.ServiceFabric.Actors.ActorId,System.String)
  - Microsoft.ServiceFabric.Actors.Client.IActorProxyFactory.CreateActorServiceProxy``1(System.Uri,Microsoft.ServiceFabric.Actors.ActorId,System.String)
  - Microsoft.ServiceFabric.Actors.Client.IActorProxyFactory.CreateActorServiceProxy``1(System.Uri,System.Int64,System.String)
  langs:
  - csharp
  - vb
  name: IActorProxyFactory
  nameWithType: IActorProxyFactory
  fullName: Microsoft.ServiceFabric.Actors.Client.IActorProxyFactory
  type: Interface
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Actors/Client/IActorProxyFactory.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: IActorProxyFactory
    path: src/prod/src/managed/Microsoft.ServiceFabric.Actors/Client/IActorProxyFactory.cs
    startLine: 13
  assemblies:
  - Microsoft.ServiceFabric.Actors
  namespace: Microsoft.ServiceFabric.Actors.Client
  summary: "\nDefines the interface containing methods to create actor proxy factory class.\n"
  example: []
  syntax:
    content: public interface IActorProxyFactory
    content.vb: Public Interface IActorProxyFactory
  extensionMethods:
  - Microsoft.ServiceFabric.Actors.Client.IActorProxyFactory.System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: Microsoft.ServiceFabric.Actors.Client.IActorProxyFactory.CreateActorProxy``1(Microsoft.ServiceFabric.Actors.ActorId,System.String,System.String,System.String)
  commentId: M:Microsoft.ServiceFabric.Actors.Client.IActorProxyFactory.CreateActorProxy``1(Microsoft.ServiceFabric.Actors.ActorId,System.String,System.String,System.String)
  id: CreateActorProxy``1(Microsoft.ServiceFabric.Actors.ActorId,System.String,System.String,System.String)
  parent: Microsoft.ServiceFabric.Actors.Client.IActorProxyFactory
  langs:
  - csharp
  - vb
  name: CreateActorProxy<TActorInterface>(ActorId, String, String, String)
  nameWithType: IActorProxyFactory.CreateActorProxy<TActorInterface>(ActorId, String, String, String)
  fullName: Microsoft.ServiceFabric.Actors.Client.IActorProxyFactory.CreateActorProxy<TActorInterface>(Microsoft.ServiceFabric.Actors.ActorId, System.String, System.String, System.String)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Actors/Client/IActorProxyFactory.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: CreateActorProxy
    path: src/prod/src/managed/Microsoft.ServiceFabric.Actors/Client/IActorProxyFactory.cs
    startLine: 39
  assemblies:
  - Microsoft.ServiceFabric.Actors
  namespace: Microsoft.ServiceFabric.Actors.Client
  summary: "\nCreates a proxy to the actor object that implements an actor interface.\n"
  example: []
  syntax:
    content: 'TActorInterface CreateActorProxy<TActorInterface>(ActorId actorId, string applicationName = null, string serviceName = null, string listenerName = null)where TActorInterface : IActor'
    content.vb: Function CreateActorProxy(Of TActorInterface As IActor)(actorId As ActorId, applicationName As String = Nothing, serviceName As String = Nothing, listenerName As String = Nothing) As TActorInterface
    parameters:
    - id: actorId
      type: Microsoft.ServiceFabric.Actors.ActorId
      description: "Actor Id of the proxy actor object. Methods called on this proxy will result in requests \nbeing sent to the actor with this id."
    - id: applicationName
      type: System.String
      description: "\nName of the Service Fabric application that contains the actor service hosting the actor objects.\nThis parameter can be null if the client is running as part of that same Service Fabric application. For more information, see Remarks. \n"
    - id: serviceName
      type: System.String
      description: "\nName of the Service Fabric service as configured by <xref href=\"Microsoft.ServiceFabric.Actors.Runtime.ActorServiceAttribute\" data-throw-if-not-resolved=\"false\"></xref> on the actor implementation.\nBy default, the name of the service is derived from the name of the actor interface. However <xref href=\"Microsoft.ServiceFabric.Actors.Runtime.ActorServiceAttribute\" data-throw-if-not-resolved=\"false\"></xref>\nis required when an actor implements more than one actor interfaces or an actor interface derives from another actor interface as the determination of the \nserviceName cannot be made automatically.\n"
    - id: listenerName
      type: System.String
      description: "\nBy default an actor service has only one listener for clients to connect to and communicate with.\nHowever it is possible to configure an actor service with more than one listeners, the listenerName parameter specifies the name of the listener to connect to.\n"
    typeParameters:
    - id: TActorInterface
      description: "\nThe actor interface implemented by the remote actor object. \nThe returned proxy object will implement this interface.\n"
    return:
      type: '{TActorInterface}'
      description: An actor proxy object that implements <xref href="Microsoft.ServiceFabric.Actors.Client.IActorProxy" data-throw-if-not-resolved="false"></xref> and TActorInterface.
  overload: Microsoft.ServiceFabric.Actors.Client.IActorProxyFactory.CreateActorProxy*
  nameWithType.vb: IActorProxyFactory.CreateActorProxy(Of TActorInterface)(ActorId, String, String, String)
  fullName.vb: Microsoft.ServiceFabric.Actors.Client.IActorProxyFactory.CreateActorProxy(Of TActorInterface)(Microsoft.ServiceFabric.Actors.ActorId, System.String, System.String, System.String)
  name.vb: CreateActorProxy(Of TActorInterface)(ActorId, String, String, String)
- uid: Microsoft.ServiceFabric.Actors.Client.IActorProxyFactory.CreateActorProxy``1(System.Uri,Microsoft.ServiceFabric.Actors.ActorId,System.String)
  commentId: M:Microsoft.ServiceFabric.Actors.Client.IActorProxyFactory.CreateActorProxy``1(System.Uri,Microsoft.ServiceFabric.Actors.ActorId,System.String)
  id: CreateActorProxy``1(System.Uri,Microsoft.ServiceFabric.Actors.ActorId,System.String)
  parent: Microsoft.ServiceFabric.Actors.Client.IActorProxyFactory
  langs:
  - csharp
  - vb
  name: CreateActorProxy<TActorInterface>(Uri, ActorId, String)
  nameWithType: IActorProxyFactory.CreateActorProxy<TActorInterface>(Uri, ActorId, String)
  fullName: Microsoft.ServiceFabric.Actors.Client.IActorProxyFactory.CreateActorProxy<TActorInterface>(System.Uri, Microsoft.ServiceFabric.Actors.ActorId, System.String)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Actors/Client/IActorProxyFactory.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: CreateActorProxy
    path: src/prod/src/managed/Microsoft.ServiceFabric.Actors/Client/IActorProxyFactory.cs
    startLine: 62
  assemblies:
  - Microsoft.ServiceFabric.Actors
  namespace: Microsoft.ServiceFabric.Actors.Client
  summary: "\nCreates a proxy to the actor object that implements an actor interface.\n"
  example: []
  syntax:
    content: 'TActorInterface CreateActorProxy<TActorInterface>(Uri serviceUri, ActorId actorId, string listenerName = null)where TActorInterface : IActor'
    content.vb: Function CreateActorProxy(Of TActorInterface As IActor)(serviceUri As Uri, actorId As ActorId, listenerName As String = Nothing) As TActorInterface
    parameters:
    - id: serviceUri
      type: System.Uri
      description: Uri of the actor service.
    - id: actorId
      type: Microsoft.ServiceFabric.Actors.ActorId
      description: "Actor Id of the proxy actor object. Methods called on this proxy will result in requests \nbeing sent to the actor with this id."
    - id: listenerName
      type: System.String
      description: "\nBy default an actor service has only one listener for clients to connect to and communicate with.\nHowever it is possible to configure an actor service with more than one listeners, the listenerName parameter specifies the name of the listener to connect to.\n"
    typeParameters:
    - id: TActorInterface
      description: "\nThe actor interface implemented by the remote actor object. \nThe returned proxy object will implement this interface.\n"
    return:
      type: '{TActorInterface}'
      description: An actor proxy object that implements <xref href="Microsoft.ServiceFabric.Actors.Client.IActorProxy" data-throw-if-not-resolved="false"></xref> and TActorInterface.
  overload: Microsoft.ServiceFabric.Actors.Client.IActorProxyFactory.CreateActorProxy*
  nameWithType.vb: IActorProxyFactory.CreateActorProxy(Of TActorInterface)(Uri, ActorId, String)
  fullName.vb: Microsoft.ServiceFabric.Actors.Client.IActorProxyFactory.CreateActorProxy(Of TActorInterface)(System.Uri, Microsoft.ServiceFabric.Actors.ActorId, System.String)
  name.vb: CreateActorProxy(Of TActorInterface)(Uri, ActorId, String)
- uid: Microsoft.ServiceFabric.Actors.Client.IActorProxyFactory.CreateActorServiceProxy``1(System.Uri,Microsoft.ServiceFabric.Actors.ActorId,System.String)
  commentId: M:Microsoft.ServiceFabric.Actors.Client.IActorProxyFactory.CreateActorServiceProxy``1(System.Uri,Microsoft.ServiceFabric.Actors.ActorId,System.String)
  id: CreateActorServiceProxy``1(System.Uri,Microsoft.ServiceFabric.Actors.ActorId,System.String)
  parent: Microsoft.ServiceFabric.Actors.Client.IActorProxyFactory
  langs:
  - csharp
  - vb
  name: CreateActorServiceProxy<TServiceInterface>(Uri, ActorId, String)
  nameWithType: IActorProxyFactory.CreateActorServiceProxy<TServiceInterface>(Uri, ActorId, String)
  fullName: Microsoft.ServiceFabric.Actors.Client.IActorProxyFactory.CreateActorServiceProxy<TServiceInterface>(System.Uri, Microsoft.ServiceFabric.Actors.ActorId, System.String)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Actors/Client/IActorProxyFactory.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: CreateActorServiceProxy
    path: src/prod/src/managed/Microsoft.ServiceFabric.Actors/Client/IActorProxyFactory.cs
    startLine: 79
  assemblies:
  - Microsoft.ServiceFabric.Actors
  namespace: Microsoft.ServiceFabric.Actors.Client
  summary: "\nCreate a proxy to the actor service that is hosting the specified actor id and implementing specified type of the service interface.\n"
  example: []
  syntax:
    content: 'TServiceInterface CreateActorServiceProxy<TServiceInterface>(Uri serviceUri, ActorId actorId, string listenerName = null)where TServiceInterface : IService'
    content.vb: Function CreateActorServiceProxy(Of TServiceInterface As IService)(serviceUri As Uri, actorId As ActorId, listenerName As String = Nothing) As TServiceInterface
    parameters:
    - id: serviceUri
      type: System.Uri
      description: Uri of the actor service to connect to.
    - id: actorId
      type: Microsoft.ServiceFabric.Actors.ActorId
      description: Id of the actor. The created proxy will be connected to the partition of the actor service hosting actor with this id.
    - id: listenerName
      type: System.String
      description: "\nBy default an actor service has only one listener for clients to connect to and communicate with.\nHowever it is possible to configure an actor service with more than one listeners, the listenerName parameter specifies the name of the listener to connect to.\n"
    typeParameters:
    - id: TServiceInterface
      description: The service interface implemented by the actor service.
    return:
      type: '{TServiceInterface}'
      description: A service proxy object that implements <xref href="Microsoft.ServiceFabric.Services.Remoting.Client.IServiceProxy" data-throw-if-not-resolved="false"></xref> and TServiceInterface.
  overload: Microsoft.ServiceFabric.Actors.Client.IActorProxyFactory.CreateActorServiceProxy*
  nameWithType.vb: IActorProxyFactory.CreateActorServiceProxy(Of TServiceInterface)(Uri, ActorId, String)
  fullName.vb: Microsoft.ServiceFabric.Actors.Client.IActorProxyFactory.CreateActorServiceProxy(Of TServiceInterface)(System.Uri, Microsoft.ServiceFabric.Actors.ActorId, System.String)
  name.vb: CreateActorServiceProxy(Of TServiceInterface)(Uri, ActorId, String)
- uid: Microsoft.ServiceFabric.Actors.Client.IActorProxyFactory.CreateActorServiceProxy``1(System.Uri,System.Int64,System.String)
  commentId: M:Microsoft.ServiceFabric.Actors.Client.IActorProxyFactory.CreateActorServiceProxy``1(System.Uri,System.Int64,System.String)
  id: CreateActorServiceProxy``1(System.Uri,System.Int64,System.String)
  parent: Microsoft.ServiceFabric.Actors.Client.IActorProxyFactory
  langs:
  - csharp
  - vb
  name: CreateActorServiceProxy<TServiceInterface>(Uri, Int64, String)
  nameWithType: IActorProxyFactory.CreateActorServiceProxy<TServiceInterface>(Uri, Int64, String)
  fullName: Microsoft.ServiceFabric.Actors.Client.IActorProxyFactory.CreateActorServiceProxy<TServiceInterface>(System.Uri, System.Int64, System.String)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Actors/Client/IActorProxyFactory.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: CreateActorServiceProxy
    path: src/prod/src/managed/Microsoft.ServiceFabric.Actors/Client/IActorProxyFactory.cs
    startLine: 96
  assemblies:
  - Microsoft.ServiceFabric.Actors
  namespace: Microsoft.ServiceFabric.Actors.Client
  summary: "\nCreate a proxy to the actor service that is hosting the specified actor id and implementing specified type of the service interface.\n"
  example: []
  syntax:
    content: 'TServiceInterface CreateActorServiceProxy<TServiceInterface>(Uri serviceUri, long partitionKey, string listenerName = null)where TServiceInterface : IService'
    content.vb: Function CreateActorServiceProxy(Of TServiceInterface As IService)(serviceUri As Uri, partitionKey As Long, listenerName As String = Nothing) As TServiceInterface
    parameters:
    - id: serviceUri
      type: System.Uri
      description: Uri of the actor service to connect to.
    - id: partitionKey
      type: System.Int64
      description: The key of the actor service partition to connect to.
    - id: listenerName
      type: System.String
      description: "\nBy default an actor service has only one listener for clients to connect to and communicate with.\nHowever it is possible to configure an actor service with more than one listeners, the listenerName parameter specifies the name of the listener to connect to.\n"
    typeParameters:
    - id: TServiceInterface
      description: The service interface implemented by the actor service.
    return:
      type: '{TServiceInterface}'
      description: A service proxy object that implements <xref href="Microsoft.ServiceFabric.Services.Remoting.Client.IServiceProxy" data-throw-if-not-resolved="false"></xref> and TServiceInterface.
  overload: Microsoft.ServiceFabric.Actors.Client.IActorProxyFactory.CreateActorServiceProxy*
  nameWithType.vb: IActorProxyFactory.CreateActorServiceProxy(Of TServiceInterface)(Uri, Int64, String)
  fullName.vb: Microsoft.ServiceFabric.Actors.Client.IActorProxyFactory.CreateActorServiceProxy(Of TServiceInterface)(System.Uri, System.Int64, System.String)
  name.vb: CreateActorServiceProxy(Of TServiceInterface)(Uri, Int64, String)
references:
- uid: Microsoft.ServiceFabric.Actors.Client
  commentId: N:Microsoft.ServiceFabric.Actors.Client
  isExternal: false
  name: Microsoft.ServiceFabric.Actors.Client
  nameWithType: Microsoft.ServiceFabric.Actors.Client
  fullName: Microsoft.ServiceFabric.Actors.Client
- uid: Microsoft.ServiceFabric.Actors.Client.IActorProxyFactory.System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
  commentId: M:System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  parent: System.Fabric.Messaging.Stream.ByteArraySerializer
  definition: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  name: Serialize<IActorProxyFactory>()
  nameWithType: ByteArraySerializer.Serialize<IActorProxyFactory>()
  fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<Microsoft.ServiceFabric.Actors.Client.IActorProxyFactory>()
  nameWithType.vb: ByteArraySerializer.Serialize(Of IActorProxyFactory)()
  fullname.vb: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of Microsoft.ServiceFabric.Actors.Client.IActorProxyFactory)()
  name.vb: Serialize(Of IActorProxyFactory)()
  spec.csharp:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
    name: Serialize<IActorProxyFactory>
    nameWithType: ByteArraySerializer.Serialize<IActorProxyFactory>
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<Microsoft.ServiceFabric.Actors.Client.IActorProxyFactory>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
    name: Serialize(Of IActorProxyFactory)
    nameWithType: ByteArraySerializer.Serialize(Of IActorProxyFactory)
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of Microsoft.ServiceFabric.Actors.Client.IActorProxyFactory)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  commentId: M:System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  isExternal: false
  name: Serialize<T>(T)
  nameWithType: ByteArraySerializer.Serialize<T>(T)
  fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<T>(T)
  nameWithType.vb: ByteArraySerializer.Serialize(Of T)(T)
  fullname.vb: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of T)(T)
  name.vb: Serialize(Of T)(T)
  spec.csharp:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
    name: Serialize<T>
    nameWithType: ByteArraySerializer.Serialize<T>
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
    name: Serialize(Of T)
    nameWithType: ByteArraySerializer.Serialize(Of T)
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.Messaging.Stream.ByteArraySerializer
  commentId: T:System.Fabric.Messaging.Stream.ByteArraySerializer
  parent: System.Fabric.Messaging.Stream
  isExternal: false
  name: ByteArraySerializer
  nameWithType: ByteArraySerializer
  fullName: System.Fabric.Messaging.Stream.ByteArraySerializer
- uid: System.Fabric.Messaging.Stream
  commentId: N:System.Fabric.Messaging.Stream
  isExternal: false
  name: System.Fabric.Messaging.Stream
  nameWithType: System.Fabric.Messaging.Stream
  fullName: System.Fabric.Messaging.Stream
- uid: Microsoft.ServiceFabric.Actors.Runtime.ActorServiceAttribute
  commentId: T:Microsoft.ServiceFabric.Actors.Runtime.ActorServiceAttribute
  isExternal: false
  name: ActorServiceAttribute
  nameWithType: ActorServiceAttribute
  fullName: Microsoft.ServiceFabric.Actors.Runtime.ActorServiceAttribute
- uid: Microsoft.ServiceFabric.Actors.Client.IActorProxy
  commentId: T:Microsoft.ServiceFabric.Actors.Client.IActorProxy
  parent: Microsoft.ServiceFabric.Actors.Client
  isExternal: false
  name: IActorProxy
  nameWithType: IActorProxy
  fullName: Microsoft.ServiceFabric.Actors.Client.IActorProxy
- uid: Microsoft.ServiceFabric.Actors.Client.IActorProxyFactory.CreateActorProxy*
  commentId: Overload:Microsoft.ServiceFabric.Actors.Client.IActorProxyFactory.CreateActorProxy
  isExternal: false
  name: CreateActorProxy<TActorInterface>
  nameWithType: IActorProxyFactory.CreateActorProxy<TActorInterface>
  fullName: Microsoft.ServiceFabric.Actors.Client.IActorProxyFactory.CreateActorProxy<TActorInterface>
  nameWithType.vb: IActorProxyFactory.CreateActorProxy(Of TActorInterface)
  fullname.vb: Microsoft.ServiceFabric.Actors.Client.IActorProxyFactory.CreateActorProxy(Of TActorInterface)
  name.vb: CreateActorProxy(Of TActorInterface)
- uid: Microsoft.ServiceFabric.Actors.ActorId
  commentId: T:Microsoft.ServiceFabric.Actors.ActorId
  parent: Microsoft.ServiceFabric.Actors
  isExternal: false
  name: ActorId
  nameWithType: ActorId
  fullName: Microsoft.ServiceFabric.Actors.ActorId
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: '{TActorInterface}'
  commentId: '!:TActorInterface'
  definition: TActorInterface
  name: TActorInterface
  nameWithType: TActorInterface
  fullName: TActorInterface
- uid: Microsoft.ServiceFabric.Actors
  commentId: N:Microsoft.ServiceFabric.Actors
  isExternal: false
  name: Microsoft.ServiceFabric.Actors
  nameWithType: Microsoft.ServiceFabric.Actors
  fullName: Microsoft.ServiceFabric.Actors
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: TActorInterface
  isExternal: false
  name: TActorInterface
  nameWithType: TActorInterface
  fullName: TActorInterface
- uid: System.Uri
  commentId: T:System.Uri
  parent: System
  isExternal: true
  name: Uri
  nameWithType: Uri
  fullName: System.Uri
- uid: Microsoft.ServiceFabric.Services.Remoting.Client.IServiceProxy
  commentId: T:Microsoft.ServiceFabric.Services.Remoting.Client.IServiceProxy
  parent: Microsoft.ServiceFabric.Services.Remoting.Client
  isExternal: false
  name: IServiceProxy
  nameWithType: IServiceProxy
  fullName: Microsoft.ServiceFabric.Services.Remoting.Client.IServiceProxy
- uid: Microsoft.ServiceFabric.Actors.Client.IActorProxyFactory.CreateActorServiceProxy*
  commentId: Overload:Microsoft.ServiceFabric.Actors.Client.IActorProxyFactory.CreateActorServiceProxy
  isExternal: false
  name: CreateActorServiceProxy<TServiceInterface>
  nameWithType: IActorProxyFactory.CreateActorServiceProxy<TServiceInterface>
  fullName: Microsoft.ServiceFabric.Actors.Client.IActorProxyFactory.CreateActorServiceProxy<TServiceInterface>
  nameWithType.vb: IActorProxyFactory.CreateActorServiceProxy(Of TServiceInterface)
  fullname.vb: Microsoft.ServiceFabric.Actors.Client.IActorProxyFactory.CreateActorServiceProxy(Of TServiceInterface)
  name.vb: CreateActorServiceProxy(Of TServiceInterface)
- uid: '{TServiceInterface}'
  commentId: '!:TServiceInterface'
  definition: TServiceInterface
  name: TServiceInterface
  nameWithType: TServiceInterface
  fullName: TServiceInterface
- uid: Microsoft.ServiceFabric.Services.Remoting.Client
  commentId: N:Microsoft.ServiceFabric.Services.Remoting.Client
  isExternal: false
  name: Microsoft.ServiceFabric.Services.Remoting.Client
  nameWithType: Microsoft.ServiceFabric.Services.Remoting.Client
  fullName: Microsoft.ServiceFabric.Services.Remoting.Client
- uid: TServiceInterface
  isExternal: false
  name: TServiceInterface
  nameWithType: TServiceInterface
  fullName: TServiceInterface
- uid: System.Int64
  commentId: T:System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
