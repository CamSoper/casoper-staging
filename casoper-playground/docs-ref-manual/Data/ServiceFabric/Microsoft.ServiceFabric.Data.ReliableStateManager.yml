### YamlMime:ManagedReference
items:
- uid: Microsoft.ServiceFabric.Data.ReliableStateManager
  commentId: T:Microsoft.ServiceFabric.Data.ReliableStateManager
  id: ReliableStateManager
  parent: Microsoft.ServiceFabric.Data
  children:
  - Microsoft.ServiceFabric.Data.ReliableStateManager.#ctor(System.Fabric.StatefulServiceContext,Microsoft.ServiceFabric.Data.ReliableStateManagerConfiguration)
  - Microsoft.ServiceFabric.Data.ReliableStateManager.BackupAsync(Microsoft.ServiceFabric.Data.BackupOption,System.TimeSpan,System.Threading.CancellationToken,System.Func{Microsoft.ServiceFabric.Data.BackupInfo,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}})
  - Microsoft.ServiceFabric.Data.ReliableStateManager.BackupAsync(System.Func{Microsoft.ServiceFabric.Data.BackupInfo,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}})
  - Microsoft.ServiceFabric.Data.ReliableStateManager.GetAsyncEnumerator
  - Microsoft.ServiceFabric.Data.ReliableStateManager.Microsoft#ServiceFabric#Data#IReliableStateManager#CreateTransaction
  - Microsoft.ServiceFabric.Data.ReliableStateManager.Microsoft#ServiceFabric#Data#IReliableStateManager#GetOrAddAsync``1(Microsoft.ServiceFabric.Data.ITransaction,System.String)
  - Microsoft.ServiceFabric.Data.ReliableStateManager.Microsoft#ServiceFabric#Data#IReliableStateManager#GetOrAddAsync``1(Microsoft.ServiceFabric.Data.ITransaction,System.String,System.TimeSpan)
  - Microsoft.ServiceFabric.Data.ReliableStateManager.Microsoft#ServiceFabric#Data#IReliableStateManager#GetOrAddAsync``1(Microsoft.ServiceFabric.Data.ITransaction,System.Uri)
  - Microsoft.ServiceFabric.Data.ReliableStateManager.Microsoft#ServiceFabric#Data#IReliableStateManager#GetOrAddAsync``1(Microsoft.ServiceFabric.Data.ITransaction,System.Uri,System.TimeSpan)
  - Microsoft.ServiceFabric.Data.ReliableStateManager.Microsoft#ServiceFabric#Data#IReliableStateManager#GetOrAddAsync``1(System.String)
  - Microsoft.ServiceFabric.Data.ReliableStateManager.Microsoft#ServiceFabric#Data#IReliableStateManager#GetOrAddAsync``1(System.String,System.TimeSpan)
  - Microsoft.ServiceFabric.Data.ReliableStateManager.Microsoft#ServiceFabric#Data#IReliableStateManager#GetOrAddAsync``1(System.Uri)
  - Microsoft.ServiceFabric.Data.ReliableStateManager.Microsoft#ServiceFabric#Data#IReliableStateManager#GetOrAddAsync``1(System.Uri,System.TimeSpan)
  - Microsoft.ServiceFabric.Data.ReliableStateManager.Microsoft#ServiceFabric#Data#IReliableStateManager#RemoveAsync(Microsoft.ServiceFabric.Data.ITransaction,System.String)
  - Microsoft.ServiceFabric.Data.ReliableStateManager.Microsoft#ServiceFabric#Data#IReliableStateManager#RemoveAsync(Microsoft.ServiceFabric.Data.ITransaction,System.String,System.TimeSpan)
  - Microsoft.ServiceFabric.Data.ReliableStateManager.Microsoft#ServiceFabric#Data#IReliableStateManager#RemoveAsync(Microsoft.ServiceFabric.Data.ITransaction,System.Uri)
  - Microsoft.ServiceFabric.Data.ReliableStateManager.Microsoft#ServiceFabric#Data#IReliableStateManager#RemoveAsync(Microsoft.ServiceFabric.Data.ITransaction,System.Uri,System.TimeSpan)
  - Microsoft.ServiceFabric.Data.ReliableStateManager.Microsoft#ServiceFabric#Data#IReliableStateManager#RemoveAsync(System.String)
  - Microsoft.ServiceFabric.Data.ReliableStateManager.Microsoft#ServiceFabric#Data#IReliableStateManager#RemoveAsync(System.String,System.TimeSpan)
  - Microsoft.ServiceFabric.Data.ReliableStateManager.Microsoft#ServiceFabric#Data#IReliableStateManager#RemoveAsync(System.Uri)
  - Microsoft.ServiceFabric.Data.ReliableStateManager.Microsoft#ServiceFabric#Data#IReliableStateManager#RemoveAsync(System.Uri,System.TimeSpan)
  - Microsoft.ServiceFabric.Data.ReliableStateManager.Microsoft#ServiceFabric#Data#IReliableStateManager#TryAddStateSerializer``1(Microsoft.ServiceFabric.Data.IStateSerializer{``0})
  - Microsoft.ServiceFabric.Data.ReliableStateManager.Microsoft#ServiceFabric#Data#IReliableStateManager#TryGetAsync``1(System.String)
  - Microsoft.ServiceFabric.Data.ReliableStateManager.Microsoft#ServiceFabric#Data#IReliableStateManager#TryGetAsync``1(System.Uri)
  - Microsoft.ServiceFabric.Data.ReliableStateManager.Microsoft#ServiceFabric#Data#IStateProviderReplica#Abort
  - Microsoft.ServiceFabric.Data.ReliableStateManager.Microsoft#ServiceFabric#Data#IStateProviderReplica#ChangeRoleAsync(System.Fabric.ReplicaRole,System.Threading.CancellationToken)
  - Microsoft.ServiceFabric.Data.ReliableStateManager.Microsoft#ServiceFabric#Data#IStateProviderReplica#CloseAsync(System.Threading.CancellationToken)
  - Microsoft.ServiceFabric.Data.ReliableStateManager.Microsoft#ServiceFabric#Data#IStateProviderReplica#Initialize(System.Fabric.StatefulServiceInitializationParameters)
  - Microsoft.ServiceFabric.Data.ReliableStateManager.Microsoft#ServiceFabric#Data#IStateProviderReplica#OpenAsync(System.Fabric.ReplicaOpenMode,System.Fabric.IStatefulServicePartition,System.Threading.CancellationToken)
  - Microsoft.ServiceFabric.Data.ReliableStateManager.OnDataLossAsync
  - Microsoft.ServiceFabric.Data.ReliableStateManager.RestoreAsync(System.String)
  - Microsoft.ServiceFabric.Data.ReliableStateManager.RestoreAsync(System.String,Microsoft.ServiceFabric.Data.RestorePolicy,System.Threading.CancellationToken)
  - Microsoft.ServiceFabric.Data.ReliableStateManager.StateManagerChanged
  - Microsoft.ServiceFabric.Data.ReliableStateManager.TransactionChanged
  langs:
  - csharp
  - vb
  name: ReliableStateManager
  nameWithType: ReliableStateManager
  fullName: Microsoft.ServiceFabric.Data.ReliableStateManager
  type: Class
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Data/ReliableStateManager.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: ReliableStateManager
    path: src/prod/src/managed/Microsoft.ServiceFabric.Data/ReliableStateManager.cs
    startLine: 18
  assemblies:
  - Microsoft.ServiceFabric.Data
  namespace: Microsoft.ServiceFabric.Data
  summary: "\nManages all <xref href=\"Microsoft.ServiceFabric.Data.IReliableState\" data-throw-if-not-resolved=\"false\"></xref> for a service replica.\nEach replica in a service has its own state manager and thus its own set of <xref href=\"Microsoft.ServiceFabric.Data.IReliableState\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: 'public class ReliableStateManager : IReliableStateManagerReplica, IStateProviderReplica, IReliableStateManager, IAsyncEnumerable<IReliableState>'
    content.vb: >-
      Public Class ReliableStateManager
          Implements IReliableStateManagerReplica, IStateProviderReplica, IReliableStateManager, IAsyncEnumerable(Of IReliableState)
  inheritance:
  - System.Object
  implements:
  - Microsoft.ServiceFabric.Data.IReliableStateManagerReplica
  - Microsoft.ServiceFabric.Data.IStateProviderReplica
  - Microsoft.ServiceFabric.Data.IReliableStateManager
  - Microsoft.ServiceFabric.Data.IAsyncEnumerable{Microsoft.ServiceFabric.Data.IReliableState}
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  extensionMethods:
  - Microsoft.ServiceFabric.Data.ReliableStateManager.System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.ServiceFabric.Data.ReliableStateManager.#ctor(System.Fabric.StatefulServiceContext,Microsoft.ServiceFabric.Data.ReliableStateManagerConfiguration)
  commentId: M:Microsoft.ServiceFabric.Data.ReliableStateManager.#ctor(System.Fabric.StatefulServiceContext,Microsoft.ServiceFabric.Data.ReliableStateManagerConfiguration)
  id: '#ctor(System.Fabric.StatefulServiceContext,Microsoft.ServiceFabric.Data.ReliableStateManagerConfiguration)'
  parent: Microsoft.ServiceFabric.Data.ReliableStateManager
  langs:
  - csharp
  - vb
  name: ReliableStateManager(StatefulServiceContext, ReliableStateManagerConfiguration)
  nameWithType: ReliableStateManager.ReliableStateManager(StatefulServiceContext, ReliableStateManagerConfiguration)
  fullName: Microsoft.ServiceFabric.Data.ReliableStateManager.ReliableStateManager(System.Fabric.StatefulServiceContext, Microsoft.ServiceFabric.Data.ReliableStateManagerConfiguration)
  type: Constructor
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Data/ReliableStateManager.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: .ctor
    path: src/prod/src/managed/Microsoft.ServiceFabric.Data/ReliableStateManager.cs
    startLine: 82
  assemblies:
  - Microsoft.ServiceFabric.Data
  namespace: Microsoft.ServiceFabric.Data
  summary: "\nCreate a new ReliableStateManager\n"
  example: []
  syntax:
    content: public ReliableStateManager(StatefulServiceContext serviceContext, ReliableStateManagerConfiguration configuration = null)
    content.vb: Public Sub New(serviceContext As StatefulServiceContext, configuration As ReliableStateManagerConfiguration = Nothing)
    parameters:
    - id: serviceContext
      type: System.Fabric.StatefulServiceContext
      description: A <xref href="System.Fabric.StatefulServiceContext" data-throw-if-not-resolved="false"></xref> that describes the service context.
    - id: configuration
      type: Microsoft.ServiceFabric.Data.ReliableStateManagerConfiguration
      description: Configuration parameters.
  overload: Microsoft.ServiceFabric.Data.ReliableStateManager.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceFabric.Data.ReliableStateManager.TransactionChanged
  commentId: E:Microsoft.ServiceFabric.Data.ReliableStateManager.TransactionChanged
  id: TransactionChanged
  parent: Microsoft.ServiceFabric.Data.ReliableStateManager
  langs:
  - csharp
  - vb
  name: TransactionChanged
  nameWithType: ReliableStateManager.TransactionChanged
  fullName: Microsoft.ServiceFabric.Data.ReliableStateManager.TransactionChanged
  type: Event
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Data/ReliableStateManager.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: TransactionChanged
    path: src/prod/src/managed/Microsoft.ServiceFabric.Data/ReliableStateManager.cs
    startLine: 91
  assemblies:
  - Microsoft.ServiceFabric.Data
  namespace: Microsoft.ServiceFabric.Data
  summary: "\nOccurs when a transaction changes.\n"
  example: []
  syntax:
    content: public event EventHandler<NotifyTransactionChangedEventArgs> TransactionChanged
    content.vb: Public Event TransactionChanged As EventHandler(Of NotifyTransactionChangedEventArgs)
    return:
      type: System.EventHandler{Microsoft.ServiceFabric.Data.Notifications.NotifyTransactionChangedEventArgs}
  exceptions:
  - type: System.Fabric.FabricObjectClosedException
    commentId: T:System.Fabric.FabricObjectClosedException
    description: Indicates that the Reliable State Manager is closed.
  implements:
  - Microsoft.ServiceFabric.Data.IReliableStateManager.TransactionChanged
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceFabric.Data.ReliableStateManager.StateManagerChanged
  commentId: E:Microsoft.ServiceFabric.Data.ReliableStateManager.StateManagerChanged
  id: StateManagerChanged
  parent: Microsoft.ServiceFabric.Data.ReliableStateManager
  langs:
  - csharp
  - vb
  name: StateManagerChanged
  nameWithType: ReliableStateManager.StateManagerChanged
  fullName: Microsoft.ServiceFabric.Data.ReliableStateManager.StateManagerChanged
  type: Event
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Data/ReliableStateManager.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: StateManagerChanged
    path: src/prod/src/managed/Microsoft.ServiceFabric.Data/ReliableStateManager.cs
    startLine: 113
  assemblies:
  - Microsoft.ServiceFabric.Data
  namespace: Microsoft.ServiceFabric.Data
  summary: "\nOccurs when the state manager changes.\n"
  example: []
  syntax:
    content: public event EventHandler<NotifyStateManagerChangedEventArgs> StateManagerChanged
    content.vb: Public Event StateManagerChanged As EventHandler(Of NotifyStateManagerChangedEventArgs)
    return:
      type: System.EventHandler{Microsoft.ServiceFabric.Data.Notifications.NotifyStateManagerChangedEventArgs}
  exceptions:
  - type: System.Fabric.FabricObjectClosedException
    commentId: T:System.Fabric.FabricObjectClosedException
    description: Indicates that the Reliable State Manager is closed.
  implements:
  - Microsoft.ServiceFabric.Data.IReliableStateManager.StateManagerChanged
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceFabric.Data.ReliableStateManager.GetAsyncEnumerator
  commentId: M:Microsoft.ServiceFabric.Data.ReliableStateManager.GetAsyncEnumerator
  id: GetAsyncEnumerator
  parent: Microsoft.ServiceFabric.Data.ReliableStateManager
  langs:
  - csharp
  - vb
  name: GetAsyncEnumerator()
  nameWithType: ReliableStateManager.GetAsyncEnumerator()
  fullName: Microsoft.ServiceFabric.Data.ReliableStateManager.GetAsyncEnumerator()
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Data/ReliableStateManager.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: GetAsyncEnumerator
    path: src/prod/src/managed/Microsoft.ServiceFabric.Data/ReliableStateManager.cs
    startLine: 143
  assemblies:
  - Microsoft.ServiceFabric.Data
  namespace: Microsoft.ServiceFabric.Data
  summary: "\nReturns an enumerator that iterates through the collection.\n"
  example: []
  syntax:
    content: public IAsyncEnumerator<IReliableState> GetAsyncEnumerator()
    content.vb: Public Function GetAsyncEnumerator As IAsyncEnumerator(Of IReliableState)
    return:
      type: Microsoft.ServiceFabric.Data.IAsyncEnumerator{Microsoft.ServiceFabric.Data.IReliableState}
      description: "\nAn <xref href=\"Microsoft.ServiceFabric.Data.IAsyncEnumerator%601\" data-throw-if-not-resolved=\"false\"></xref> object that can be used to iterate through the collection.\n"
  overload: Microsoft.ServiceFabric.Data.ReliableStateManager.GetAsyncEnumerator*
  implements:
  - Microsoft.ServiceFabric.Data.IAsyncEnumerable{Microsoft.ServiceFabric.Data.IReliableState}.GetAsyncEnumerator
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceFabric.Data.ReliableStateManager.BackupAsync(System.Func{Microsoft.ServiceFabric.Data.BackupInfo,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}})
  commentId: M:Microsoft.ServiceFabric.Data.ReliableStateManager.BackupAsync(System.Func{Microsoft.ServiceFabric.Data.BackupInfo,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}})
  id: BackupAsync(System.Func{Microsoft.ServiceFabric.Data.BackupInfo,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}})
  parent: Microsoft.ServiceFabric.Data.ReliableStateManager
  langs:
  - csharp
  - vb
  name: BackupAsync(Func<BackupInfo, CancellationToken, Task<Boolean>>)
  nameWithType: ReliableStateManager.BackupAsync(Func<BackupInfo, CancellationToken, Task<Boolean>>)
  fullName: Microsoft.ServiceFabric.Data.ReliableStateManager.BackupAsync(System.Func<Microsoft.ServiceFabric.Data.BackupInfo, System.Threading.CancellationToken, System.Threading.Tasks.Task<System.Boolean>>)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Data/ReliableStateManager.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: BackupAsync
    path: src/prod/src/managed/Microsoft.ServiceFabric.Data/ReliableStateManager.cs
    startLine: 156
  assemblies:
  - Microsoft.ServiceFabric.Data
  namespace: Microsoft.ServiceFabric.Data
  summary: "\nPerforms a full backup of all reliable state managed by this <xref href=\"Microsoft.ServiceFabric.Data.IReliableStateManager\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  remarks: "\nA FULL backup will be performed with a one-hour timeout.\nBoolean returned by the backupCallback indicate whether the service was able to successfully move the backup folder to an external location.\nIf false is returned, BackupAsync throws InvalidOperationException with the relevant message indicating backupCallback returned false.\nAlso, backup will be marked as unsuccessful.\n"
  example: []
  syntax:
    content: public Task BackupAsync(Func<BackupInfo, CancellationToken, Task<bool>> backupCallback)
    content.vb: Public Function BackupAsync(backupCallback As Func(Of BackupInfo, CancellationToken, Task(Of Boolean))) As Task
    parameters:
    - id: backupCallback
      type: System.Func{Microsoft.ServiceFabric.Data.BackupInfo,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}}
      description: Callback to be called when the backup folder has been created locally and is ready to be moved out of the node.
    return:
      type: System.Threading.Tasks.Task
      description: Task that represents the asynchronous backup operation.
  overload: Microsoft.ServiceFabric.Data.ReliableStateManager.BackupAsync*
  implements:
  - Microsoft.ServiceFabric.Data.IStateProviderReplica.BackupAsync(System.Func{Microsoft.ServiceFabric.Data.BackupInfo,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}})
  nameWithType.vb: ReliableStateManager.BackupAsync(Func(Of BackupInfo, CancellationToken, Task(Of Boolean)))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.ServiceFabric.Data.ReliableStateManager.BackupAsync(System.Func(Of Microsoft.ServiceFabric.Data.BackupInfo, System.Threading.CancellationToken, System.Threading.Tasks.Task(Of System.Boolean)))
  name.vb: BackupAsync(Func(Of BackupInfo, CancellationToken, Task(Of Boolean)))
- uid: Microsoft.ServiceFabric.Data.ReliableStateManager.Microsoft#ServiceFabric#Data#IReliableStateManager#TryGetAsync``1(System.String)
  commentId: M:Microsoft.ServiceFabric.Data.ReliableStateManager.Microsoft#ServiceFabric#Data#IReliableStateManager#TryGetAsync``1(System.String)
  id: Microsoft#ServiceFabric#Data#IReliableStateManager#TryGetAsync``1(System.String)
  isEii: true
  parent: Microsoft.ServiceFabric.Data.ReliableStateManager
  langs:
  - csharp
  - vb
  name: IReliableStateManager.TryGetAsync<T>(String)
  nameWithType: ReliableStateManager.IReliableStateManager.TryGetAsync<T>(String)
  fullName: Microsoft.ServiceFabric.Data.ReliableStateManager.Microsoft.ServiceFabric.Data.IReliableStateManager.TryGetAsync<T>(System.String)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Data/ReliableStateManager.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: Microsoft.ServiceFabric.Data.IReliableStateManager.TryGetAsync
    path: src/prod/src/managed/Microsoft.ServiceFabric.Data/ReliableStateManager.cs
    startLine: 177
  assemblies:
  - Microsoft.ServiceFabric.Data
  namespace: Microsoft.ServiceFabric.Data
  summary: "\nAttempts to get an <xref href=\"Microsoft.ServiceFabric.Data.IReliableState\" data-throw-if-not-resolved=\"false\"></xref> of the given type <em>T</em> and with the given name.\n"
  example: []
  syntax:
    content: 'Task<ConditionalValue<T>> IReliableStateManager.TryGetAsync<T>(string name)where T : IReliableState'
    content.vb: Function Microsoft.ServiceFabric.Data.IReliableStateManager.TryGetAsync(Of T As IReliableState)(name As String) As Task(Of ConditionalValue(Of T)) Implements IReliableStateManager.TryGetAsync
    parameters:
    - id: name
      type: System.String
      description: "\nThe name of the <xref href=\"Microsoft.ServiceFabric.Data.IReliableState\" data-throw-if-not-resolved=\"false\"></xref>. This name must be unique in this <xref href=\"Microsoft.ServiceFabric.Data.IReliableStateManager\" data-throw-if-not-resolved=\"false\"></xref>\nacross <xref href=\"Microsoft.ServiceFabric.Data.IReliableState\" data-throw-if-not-resolved=\"false\"></xref> types, including unrelated types.\n"
    typeParameters:
    - id: T
      description: "\nWhen specifying the type, you may ask for either a concrete type or an interface type. The retrieved object will\nbe cast to the given type.\n"
    return:
      type: System.Threading.Tasks.Task{Microsoft.ServiceFabric.Data.ConditionalValue{{T}}}
      description: Task that represents the asynchronous operation. The task result is a tuple indicating whether the reliable state was found, and if so the instance.
  overload: Microsoft.ServiceFabric.Data.ReliableStateManager.Microsoft#ServiceFabric#Data#IReliableStateManager#TryGetAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <em>name</em> is null.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The <xref href="Microsoft.ServiceFabric.Data.IReliableState" data-throw-if-not-resolved="false"></xref> instance is not convertible to type <em>T</em>.
  - type: System.Fabric.FabricNotReadableException
    commentId: T:System.Fabric.FabricNotReadableException
    description: "\nException indicates that the State Manager cannot retrive a reliable collection.\n<cref name=\"FabricNotReadableException\"></cref> can be thrown in all <cref name=\"ReplicaRole\"></cref>s.\nFor example, when a <cref name=\"ReplicaRole.Primary\"></cref> or <cref name=\"ReplicaRole.ActiveSecondary\"></cref> looses <cref name=\"IStatefulServicePartition.ReadStatus\"></cref>."
  - type: System.Fabric.FabricObjectClosedException
    commentId: T:System.Fabric.FabricObjectClosedException
    description: Indicates that the Reliable State Manager is closed.
  implements:
  - Microsoft.ServiceFabric.Data.IReliableStateManager.TryGetAsync``1(System.String)
  nameWithType.vb: ReliableStateManager.Microsoft.ServiceFabric.Data.IReliableStateManager.TryGetAsync(Of T)(String)
  fullName.vb: Microsoft.ServiceFabric.Data.ReliableStateManager.Microsoft.ServiceFabric.Data.IReliableStateManager.TryGetAsync(Of T)(System.String)
  name.vb: Microsoft.ServiceFabric.Data.IReliableStateManager.TryGetAsync(Of T)(String)
- uid: Microsoft.ServiceFabric.Data.ReliableStateManager.Microsoft#ServiceFabric#Data#IReliableStateManager#TryGetAsync``1(System.Uri)
  commentId: M:Microsoft.ServiceFabric.Data.ReliableStateManager.Microsoft#ServiceFabric#Data#IReliableStateManager#TryGetAsync``1(System.Uri)
  id: Microsoft#ServiceFabric#Data#IReliableStateManager#TryGetAsync``1(System.Uri)
  isEii: true
  parent: Microsoft.ServiceFabric.Data.ReliableStateManager
  langs:
  - csharp
  - vb
  name: IReliableStateManager.TryGetAsync<T>(Uri)
  nameWithType: ReliableStateManager.IReliableStateManager.TryGetAsync<T>(Uri)
  fullName: Microsoft.ServiceFabric.Data.ReliableStateManager.Microsoft.ServiceFabric.Data.IReliableStateManager.TryGetAsync<T>(System.Uri)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Data/ReliableStateManager.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: Microsoft.ServiceFabric.Data.IReliableStateManager.TryGetAsync
    path: src/prod/src/managed/Microsoft.ServiceFabric.Data/ReliableStateManager.cs
    startLine: 198
  assemblies:
  - Microsoft.ServiceFabric.Data
  namespace: Microsoft.ServiceFabric.Data
  summary: "\nAttempts to get an <xref href=\"Microsoft.ServiceFabric.Data.IReliableState\" data-throw-if-not-resolved=\"false\"></xref> of the given type <em>T</em> and with the given name.\n"
  example: []
  syntax:
    content: 'Task<ConditionalValue<T>> IReliableStateManager.TryGetAsync<T>(Uri name)where T : IReliableState'
    content.vb: Function Microsoft.ServiceFabric.Data.IReliableStateManager.TryGetAsync(Of T As IReliableState)(name As Uri) As Task(Of ConditionalValue(Of T)) Implements IReliableStateManager.TryGetAsync
    parameters:
    - id: name
      type: System.Uri
      description: "\nThe name of the <xref href=\"Microsoft.ServiceFabric.Data.IReliableState\" data-throw-if-not-resolved=\"false\"></xref>. This name must be unique in this <xref href=\"Microsoft.ServiceFabric.Data.IReliableStateManager\" data-throw-if-not-resolved=\"false\"></xref>\nacross <xref href=\"Microsoft.ServiceFabric.Data.IReliableState\" data-throw-if-not-resolved=\"false\"></xref> types, including unrelated types.\n"
    typeParameters:
    - id: T
      description: "\nWhen specifying the type, you may ask for either a concrete type or an interface type. The retrieved object will\nbe cast to the given type.\n"
    return:
      type: System.Threading.Tasks.Task{Microsoft.ServiceFabric.Data.ConditionalValue{{T}}}
      description: Task that represents the asynchronous operation. The task result is a tuple indicating whether the reliable state was found, and if so the instance.
  overload: Microsoft.ServiceFabric.Data.ReliableStateManager.Microsoft#ServiceFabric#Data#IReliableStateManager#TryGetAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <em>name</em> is null.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The <xref href="Microsoft.ServiceFabric.Data.IReliableState" data-throw-if-not-resolved="false"></xref> instance is not convertible to type <em>T</em>.
  - type: System.Fabric.FabricNotReadableException
    commentId: T:System.Fabric.FabricNotReadableException
    description: "\nException indicates that the State Manager cannot retrive a reliable collection.\n<cref name=\"FabricNotReadableException\"></cref> can be thrown in all <cref name=\"ReplicaRole\"></cref>s.\nFor example, when a <cref name=\"ReplicaRole.Primary\"></cref> or <cref name=\"ReplicaRole.ActiveSecondary\"></cref> looses <cref name=\"IStatefulServicePartition.ReadStatus\"></cref>."
  - type: System.Fabric.FabricObjectClosedException
    commentId: T:System.Fabric.FabricObjectClosedException
    description: Indicates that the Reliable State Manager is closed.
  implements:
  - Microsoft.ServiceFabric.Data.IReliableStateManager.TryGetAsync``1(System.Uri)
  nameWithType.vb: ReliableStateManager.Microsoft.ServiceFabric.Data.IReliableStateManager.TryGetAsync(Of T)(Uri)
  fullName.vb: Microsoft.ServiceFabric.Data.ReliableStateManager.Microsoft.ServiceFabric.Data.IReliableStateManager.TryGetAsync(Of T)(System.Uri)
  name.vb: Microsoft.ServiceFabric.Data.IReliableStateManager.TryGetAsync(Of T)(Uri)
- uid: Microsoft.ServiceFabric.Data.ReliableStateManager.Microsoft#ServiceFabric#Data#IReliableStateManager#RemoveAsync(System.String)
  commentId: M:Microsoft.ServiceFabric.Data.ReliableStateManager.Microsoft#ServiceFabric#Data#IReliableStateManager#RemoveAsync(System.String)
  id: Microsoft#ServiceFabric#Data#IReliableStateManager#RemoveAsync(System.String)
  isEii: true
  parent: Microsoft.ServiceFabric.Data.ReliableStateManager
  langs:
  - csharp
  - vb
  name: IReliableStateManager.RemoveAsync(String)
  nameWithType: ReliableStateManager.IReliableStateManager.RemoveAsync(String)
  fullName: Microsoft.ServiceFabric.Data.ReliableStateManager.Microsoft.ServiceFabric.Data.IReliableStateManager.RemoveAsync(System.String)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Data/ReliableStateManager.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: Microsoft.ServiceFabric.Data.IReliableStateManager.RemoveAsync
    path: src/prod/src/managed/Microsoft.ServiceFabric.Data/ReliableStateManager.cs
    startLine: 215
  assemblies:
  - Microsoft.ServiceFabric.Data
  namespace: Microsoft.ServiceFabric.Data
  summary: "\nRemoves the <xref href=\"Microsoft.ServiceFabric.Data.IReliableState\" data-throw-if-not-resolved=\"false\"></xref> with the given name from this state manager. The state is\npermanently removed from persistent storage and all replicas.\n"
  remarks: "\nThis is an atomic operation. The <xref href=\"Microsoft.ServiceFabric.Data.IReliableState\" data-throw-if-not-resolved=\"false\"></xref> will be successfully removed along with all state\nor be left in-tact.\n"
  example: []
  syntax:
    content: Task IReliableStateManager.RemoveAsync(string name)
    content.vb: Function Microsoft.ServiceFabric.Data.IReliableStateManager.RemoveAsync(name As String) As Task Implements IReliableStateManager.RemoveAsync
    parameters:
    - id: name
      type: System.String
      description: The name of the <xref href="Microsoft.ServiceFabric.Data.IReliableState" data-throw-if-not-resolved="false"></xref> to remove.
    return:
      type: System.Threading.Tasks.Task
      description: Task that represents the asynchronous remove operation.
  overload: Microsoft.ServiceFabric.Data.ReliableStateManager.Microsoft#ServiceFabric#Data#IReliableStateManager#RemoveAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <em>name</em> is null.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: An <xref href="Microsoft.ServiceFabric.Data.IReliableState" data-throw-if-not-resolved="false"></xref> with the given name does not exist.
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: The operation failed to complete within the default timeout.
  - type: System.Fabric.FabricNotPrimaryException
    commentId: T:System.Fabric.FabricNotPrimaryException
    description: Thrown when the <cref name="IReliableStateManager"></cref> is not in <cref name="ReplicaRole.Primary"></cref>.
  - type: System.Fabric.FabricObjectClosedException
    commentId: T:System.Fabric.FabricObjectClosedException
    description: Indicates that the Reliable State Manager is closed.
  implements:
  - Microsoft.ServiceFabric.Data.IReliableStateManager.RemoveAsync(System.String)
  nameWithType.vb: ReliableStateManager.Microsoft.ServiceFabric.Data.IReliableStateManager.RemoveAsync(String)
  name.vb: Microsoft.ServiceFabric.Data.IReliableStateManager.RemoveAsync(String)
- uid: Microsoft.ServiceFabric.Data.ReliableStateManager.Microsoft#ServiceFabric#Data#IReliableStateManager#RemoveAsync(System.String,System.TimeSpan)
  commentId: M:Microsoft.ServiceFabric.Data.ReliableStateManager.Microsoft#ServiceFabric#Data#IReliableStateManager#RemoveAsync(System.String,System.TimeSpan)
  id: Microsoft#ServiceFabric#Data#IReliableStateManager#RemoveAsync(System.String,System.TimeSpan)
  isEii: true
  parent: Microsoft.ServiceFabric.Data.ReliableStateManager
  langs:
  - csharp
  - vb
  name: IReliableStateManager.RemoveAsync(String, TimeSpan)
  nameWithType: ReliableStateManager.IReliableStateManager.RemoveAsync(String, TimeSpan)
  fullName: Microsoft.ServiceFabric.Data.ReliableStateManager.Microsoft.ServiceFabric.Data.IReliableStateManager.RemoveAsync(System.String, System.TimeSpan)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Data/ReliableStateManager.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: Microsoft.ServiceFabric.Data.IReliableStateManager.RemoveAsync
    path: src/prod/src/managed/Microsoft.ServiceFabric.Data/ReliableStateManager.cs
    startLine: 233
  assemblies:
  - Microsoft.ServiceFabric.Data
  namespace: Microsoft.ServiceFabric.Data
  summary: "\nRemoves the <xref href=\"Microsoft.ServiceFabric.Data.IReliableState\" data-throw-if-not-resolved=\"false\"></xref> with the given name from this state manager. The state is\npermanently removed from persistent storage and all replicas.\n"
  remarks: "\nThis is an atomic operation. The <xref href=\"Microsoft.ServiceFabric.Data.IReliableState\" data-throw-if-not-resolved=\"false\"></xref> will be successfully removed along with all state\nor be left in-tact.\n"
  example: []
  syntax:
    content: Task IReliableStateManager.RemoveAsync(string name, TimeSpan timeout)
    content.vb: Function Microsoft.ServiceFabric.Data.IReliableStateManager.RemoveAsync(name As String, timeout As TimeSpan) As Task Implements IReliableStateManager.RemoveAsync
    parameters:
    - id: name
      type: System.String
      description: The name of the <xref href="Microsoft.ServiceFabric.Data.IReliableState" data-throw-if-not-resolved="false"></xref> to remove.
    - id: timeout
      type: System.TimeSpan
      description: The amount of time to wait for the operation to complete before throwing a TimeoutException. Primarily used to prevent deadlocks. The default is 4 seconds.
    return:
      type: System.Threading.Tasks.Task
      description: Task that represents the asynchronous remove operation.
  overload: Microsoft.ServiceFabric.Data.ReliableStateManager.Microsoft#ServiceFabric#Data#IReliableStateManager#RemoveAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <em>name</em> is null.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: An <xref href="Microsoft.ServiceFabric.Data.IReliableState" data-throw-if-not-resolved="false"></xref> with the given name does not exist, or <em>timeout</em> is negative.
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: The operation failed to complete within the given timeout.
  - type: System.Fabric.FabricNotPrimaryException
    commentId: T:System.Fabric.FabricNotPrimaryException
    description: Thrown when the <cref name="IReliableStateManager"></cref> is not in <cref name="ReplicaRole.Primary"></cref>.
  - type: System.Fabric.FabricObjectClosedException
    commentId: T:System.Fabric.FabricObjectClosedException
    description: Indicates that the Reliable State Manager is closed.
  implements:
  - Microsoft.ServiceFabric.Data.IReliableStateManager.RemoveAsync(System.String,System.TimeSpan)
  nameWithType.vb: ReliableStateManager.Microsoft.ServiceFabric.Data.IReliableStateManager.RemoveAsync(String, TimeSpan)
  name.vb: Microsoft.ServiceFabric.Data.IReliableStateManager.RemoveAsync(String, TimeSpan)
- uid: Microsoft.ServiceFabric.Data.ReliableStateManager.Microsoft#ServiceFabric#Data#IReliableStateManager#RemoveAsync(Microsoft.ServiceFabric.Data.ITransaction,System.String)
  commentId: M:Microsoft.ServiceFabric.Data.ReliableStateManager.Microsoft#ServiceFabric#Data#IReliableStateManager#RemoveAsync(Microsoft.ServiceFabric.Data.ITransaction,System.String)
  id: Microsoft#ServiceFabric#Data#IReliableStateManager#RemoveAsync(Microsoft.ServiceFabric.Data.ITransaction,System.String)
  isEii: true
  parent: Microsoft.ServiceFabric.Data.ReliableStateManager
  langs:
  - csharp
  - vb
  name: IReliableStateManager.RemoveAsync(ITransaction, String)
  nameWithType: ReliableStateManager.IReliableStateManager.RemoveAsync(ITransaction, String)
  fullName: Microsoft.ServiceFabric.Data.ReliableStateManager.Microsoft.ServiceFabric.Data.IReliableStateManager.RemoveAsync(Microsoft.ServiceFabric.Data.ITransaction, System.String)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Data/ReliableStateManager.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: Microsoft.ServiceFabric.Data.IReliableStateManager.RemoveAsync
    path: src/prod/src/managed/Microsoft.ServiceFabric.Data/ReliableStateManager.cs
    startLine: 255
  assemblies:
  - Microsoft.ServiceFabric.Data
  namespace: Microsoft.ServiceFabric.Data
  summary: "\nRemoves the <xref href=\"Microsoft.ServiceFabric.Data.IReliableState\" data-throw-if-not-resolved=\"false\"></xref> with the given name from this state manager. The state is\npermanently removed from persistent storage and all replicas when the transaction is committed.\n"
  remarks: "\nThis is an atomic operation. The <xref href=\"Microsoft.ServiceFabric.Data.IReliableState\" data-throw-if-not-resolved=\"false\"></xref> will be successfully removed along with all state\nor be left in-tact. If this method throws an exception, the transaction must be aborted.\n"
  example: []
  syntax:
    content: Task IReliableStateManager.RemoveAsync(ITransaction tx, string name)
    content.vb: Function Microsoft.ServiceFabric.Data.IReliableStateManager.RemoveAsync(tx As ITransaction, name As String) As Task Implements IReliableStateManager.RemoveAsync
    parameters:
    - id: tx
      type: Microsoft.ServiceFabric.Data.ITransaction
      description: Transaction to associate this operation with.
    - id: name
      type: System.String
      description: The name of the <xref href="Microsoft.ServiceFabric.Data.IReliableState" data-throw-if-not-resolved="false"></xref> to remove.
    return:
      type: System.Threading.Tasks.Task
      description: Task that represents the asynchronous remove operation.
  overload: Microsoft.ServiceFabric.Data.ReliableStateManager.Microsoft#ServiceFabric#Data#IReliableStateManager#RemoveAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <em>tx</em> is null, or <em>name</em> is null.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: An <xref href="Microsoft.ServiceFabric.Data.IReliableState" data-throw-if-not-resolved="false"></xref> with the given name does not exist.
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: The operation failed to complete within the default timeout.
  - type: System.Fabric.FabricNotPrimaryException
    commentId: T:System.Fabric.FabricNotPrimaryException
    description: Thrown when the <cref name="IReliableStateManager"></cref> is not in <cref name="ReplicaRole.Primary"></cref>.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\nThrown when a method call is invalid for the object's current state.\nExample, transaction used is already terminated: committed or aborted.\n"
  - type: System.Fabric.FabricObjectClosedException
    commentId: T:System.Fabric.FabricObjectClosedException
    description: Indicates that the Reliable State Manager is closed.
  implements:
  - Microsoft.ServiceFabric.Data.IReliableStateManager.RemoveAsync(Microsoft.ServiceFabric.Data.ITransaction,System.String)
  nameWithType.vb: ReliableStateManager.Microsoft.ServiceFabric.Data.IReliableStateManager.RemoveAsync(ITransaction, String)
  name.vb: Microsoft.ServiceFabric.Data.IReliableStateManager.RemoveAsync(ITransaction, String)
- uid: Microsoft.ServiceFabric.Data.ReliableStateManager.Microsoft#ServiceFabric#Data#IReliableStateManager#RemoveAsync(Microsoft.ServiceFabric.Data.ITransaction,System.String,System.TimeSpan)
  commentId: M:Microsoft.ServiceFabric.Data.ReliableStateManager.Microsoft#ServiceFabric#Data#IReliableStateManager#RemoveAsync(Microsoft.ServiceFabric.Data.ITransaction,System.String,System.TimeSpan)
  id: Microsoft#ServiceFabric#Data#IReliableStateManager#RemoveAsync(Microsoft.ServiceFabric.Data.ITransaction,System.String,System.TimeSpan)
  isEii: true
  parent: Microsoft.ServiceFabric.Data.ReliableStateManager
  langs:
  - csharp
  - vb
  name: IReliableStateManager.RemoveAsync(ITransaction, String, TimeSpan)
  nameWithType: ReliableStateManager.IReliableStateManager.RemoveAsync(ITransaction, String, TimeSpan)
  fullName: Microsoft.ServiceFabric.Data.ReliableStateManager.Microsoft.ServiceFabric.Data.IReliableStateManager.RemoveAsync(Microsoft.ServiceFabric.Data.ITransaction, System.String, System.TimeSpan)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Data/ReliableStateManager.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: Microsoft.ServiceFabric.Data.IReliableStateManager.RemoveAsync
    path: src/prod/src/managed/Microsoft.ServiceFabric.Data/ReliableStateManager.cs
    startLine: 278
  assemblies:
  - Microsoft.ServiceFabric.Data
  namespace: Microsoft.ServiceFabric.Data
  summary: "\nRemoves the <xref href=\"Microsoft.ServiceFabric.Data.IReliableState\" data-throw-if-not-resolved=\"false\"></xref> with the given name from this state manager. The state is\npermanently removed from persistent storage and all replicas when the transaction is committed.\n"
  remarks: "\nThis is an atomic operation. The <xref href=\"Microsoft.ServiceFabric.Data.IReliableState\" data-throw-if-not-resolved=\"false\"></xref> will be successfully removed along with all state\nor be left in-tact. If this method throws an exception, the transaction must be aborted.\n"
  example: []
  syntax:
    content: Task IReliableStateManager.RemoveAsync(ITransaction tx, string name, TimeSpan timeout)
    content.vb: Function Microsoft.ServiceFabric.Data.IReliableStateManager.RemoveAsync(tx As ITransaction, name As String, timeout As TimeSpan) As Task Implements IReliableStateManager.RemoveAsync
    parameters:
    - id: tx
      type: Microsoft.ServiceFabric.Data.ITransaction
      description: Transaction to associate this operation with.
    - id: name
      type: System.String
      description: The name of the <xref href="Microsoft.ServiceFabric.Data.IReliableState" data-throw-if-not-resolved="false"></xref> to remove.
    - id: timeout
      type: System.TimeSpan
      description: The amount of time to wait for the operation to complete before throwing a TimeoutException. Primarily used to prevent deadlocks. The default is 4 seconds.
    return:
      type: System.Threading.Tasks.Task
      description: Task that represents the asynchronous remove operation.
  overload: Microsoft.ServiceFabric.Data.ReliableStateManager.Microsoft#ServiceFabric#Data#IReliableStateManager#RemoveAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <em>tx</em> is null, or <em>name</em> is null.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: An <xref href="Microsoft.ServiceFabric.Data.IReliableState" data-throw-if-not-resolved="false"></xref> with the given name does not exist, or <em>timeout</em> is negative.
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: The operation failed to complete within the given timeout.
  - type: System.Fabric.FabricNotPrimaryException
    commentId: T:System.Fabric.FabricNotPrimaryException
    description: Thrown when the <cref name="IReliableStateManager"></cref> is not in <cref name="ReplicaRole.Primary"></cref>.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\nThrown when a method call is invalid for the object's current state.\nExample, transaction used is already terminated: committed or aborted.\n"
  - type: System.Fabric.FabricObjectClosedException
    commentId: T:System.Fabric.FabricObjectClosedException
    description: Indicates that the Reliable State Manager is closed.
  implements:
  - Microsoft.ServiceFabric.Data.IReliableStateManager.RemoveAsync(Microsoft.ServiceFabric.Data.ITransaction,System.String,System.TimeSpan)
  nameWithType.vb: ReliableStateManager.Microsoft.ServiceFabric.Data.IReliableStateManager.RemoveAsync(ITransaction, String, TimeSpan)
  name.vb: Microsoft.ServiceFabric.Data.IReliableStateManager.RemoveAsync(ITransaction, String, TimeSpan)
- uid: Microsoft.ServiceFabric.Data.ReliableStateManager.Microsoft#ServiceFabric#Data#IReliableStateManager#RemoveAsync(System.Uri)
  commentId: M:Microsoft.ServiceFabric.Data.ReliableStateManager.Microsoft#ServiceFabric#Data#IReliableStateManager#RemoveAsync(System.Uri)
  id: Microsoft#ServiceFabric#Data#IReliableStateManager#RemoveAsync(System.Uri)
  isEii: true
  parent: Microsoft.ServiceFabric.Data.ReliableStateManager
  langs:
  - csharp
  - vb
  name: IReliableStateManager.RemoveAsync(Uri)
  nameWithType: ReliableStateManager.IReliableStateManager.RemoveAsync(Uri)
  fullName: Microsoft.ServiceFabric.Data.ReliableStateManager.Microsoft.ServiceFabric.Data.IReliableStateManager.RemoveAsync(System.Uri)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Data/ReliableStateManager.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: Microsoft.ServiceFabric.Data.IReliableStateManager.RemoveAsync
    path: src/prod/src/managed/Microsoft.ServiceFabric.Data/ReliableStateManager.cs
    startLine: 295
  assemblies:
  - Microsoft.ServiceFabric.Data
  namespace: Microsoft.ServiceFabric.Data
  summary: "\nRemoves the <xref href=\"Microsoft.ServiceFabric.Data.IReliableState\" data-throw-if-not-resolved=\"false\"></xref> with the given name from this state manager. The state is\npermanently removed from persistent storage and all replicas.\n"
  remarks: "\nThis is an atomic operation. The <xref href=\"Microsoft.ServiceFabric.Data.IReliableState\" data-throw-if-not-resolved=\"false\"></xref> will be successfully removed along with all state\nor be left in-tact.\n"
  example: []
  syntax:
    content: Task IReliableStateManager.RemoveAsync(Uri name)
    content.vb: Function Microsoft.ServiceFabric.Data.IReliableStateManager.RemoveAsync(name As Uri) As Task Implements IReliableStateManager.RemoveAsync
    parameters:
    - id: name
      type: System.Uri
      description: The name of the <xref href="Microsoft.ServiceFabric.Data.IReliableState" data-throw-if-not-resolved="false"></xref> to remove.
    return:
      type: System.Threading.Tasks.Task
      description: Task that represents the asynchronous remove operation.
  overload: Microsoft.ServiceFabric.Data.ReliableStateManager.Microsoft#ServiceFabric#Data#IReliableStateManager#RemoveAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <em>name</em> is null.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: An <xref href="Microsoft.ServiceFabric.Data.IReliableState" data-throw-if-not-resolved="false"></xref> with the given name does not exist.
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: The operation failed to complete within the default timeout.
  - type: System.Fabric.FabricNotPrimaryException
    commentId: T:System.Fabric.FabricNotPrimaryException
    description: Thrown when the <cref name="IReliableStateManager"></cref> is not in <cref name="ReplicaRole.Primary"></cref>.
  - type: System.Fabric.FabricObjectClosedException
    commentId: T:System.Fabric.FabricObjectClosedException
    description: Indicates that the Reliable State Manager is closed.
  implements:
  - Microsoft.ServiceFabric.Data.IReliableStateManager.RemoveAsync(System.Uri)
  nameWithType.vb: ReliableStateManager.Microsoft.ServiceFabric.Data.IReliableStateManager.RemoveAsync(Uri)
  name.vb: Microsoft.ServiceFabric.Data.IReliableStateManager.RemoveAsync(Uri)
- uid: Microsoft.ServiceFabric.Data.ReliableStateManager.Microsoft#ServiceFabric#Data#IReliableStateManager#RemoveAsync(System.Uri,System.TimeSpan)
  commentId: M:Microsoft.ServiceFabric.Data.ReliableStateManager.Microsoft#ServiceFabric#Data#IReliableStateManager#RemoveAsync(System.Uri,System.TimeSpan)
  id: Microsoft#ServiceFabric#Data#IReliableStateManager#RemoveAsync(System.Uri,System.TimeSpan)
  isEii: true
  parent: Microsoft.ServiceFabric.Data.ReliableStateManager
  langs:
  - csharp
  - vb
  name: IReliableStateManager.RemoveAsync(Uri, TimeSpan)
  nameWithType: ReliableStateManager.IReliableStateManager.RemoveAsync(Uri, TimeSpan)
  fullName: Microsoft.ServiceFabric.Data.ReliableStateManager.Microsoft.ServiceFabric.Data.IReliableStateManager.RemoveAsync(System.Uri, System.TimeSpan)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Data/ReliableStateManager.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: Microsoft.ServiceFabric.Data.IReliableStateManager.RemoveAsync
    path: src/prod/src/managed/Microsoft.ServiceFabric.Data/ReliableStateManager.cs
    startLine: 313
  assemblies:
  - Microsoft.ServiceFabric.Data
  namespace: Microsoft.ServiceFabric.Data
  summary: "\nRemoves the <xref href=\"Microsoft.ServiceFabric.Data.IReliableState\" data-throw-if-not-resolved=\"false\"></xref> with the given name from this state manager. The state is\npermanently removed from persistent storage and all replicas.\n"
  remarks: "\nThis is an atomic operation. The <xref href=\"Microsoft.ServiceFabric.Data.IReliableState\" data-throw-if-not-resolved=\"false\"></xref> will be successfully removed along with all state\nor be left in-tact.\n"
  example: []
  syntax:
    content: Task IReliableStateManager.RemoveAsync(Uri name, TimeSpan timeout)
    content.vb: Function Microsoft.ServiceFabric.Data.IReliableStateManager.RemoveAsync(name As Uri, timeout As TimeSpan) As Task Implements IReliableStateManager.RemoveAsync
    parameters:
    - id: name
      type: System.Uri
      description: The name of the <xref href="Microsoft.ServiceFabric.Data.IReliableState" data-throw-if-not-resolved="false"></xref> to remove.
    - id: timeout
      type: System.TimeSpan
      description: The amount of time to wait for the operation to complete before throwing a TimeoutException. Primarily used to prevent deadlocks. The default is 4 seconds.
    return:
      type: System.Threading.Tasks.Task
      description: Task that represents the asynchronous remove operation.
  overload: Microsoft.ServiceFabric.Data.ReliableStateManager.Microsoft#ServiceFabric#Data#IReliableStateManager#RemoveAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <em>name</em> is null.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: An <xref href="Microsoft.ServiceFabric.Data.IReliableState" data-throw-if-not-resolved="false"></xref> with the given name does not exist, or <em>timeout</em> is negative.
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: The operation failed to complete within the given timeout.
  - type: System.Fabric.FabricNotPrimaryException
    commentId: T:System.Fabric.FabricNotPrimaryException
    description: Thrown when the <cref name="IReliableStateManager"></cref> is not in <cref name="ReplicaRole.Primary"></cref>.
  - type: System.Fabric.FabricObjectClosedException
    commentId: T:System.Fabric.FabricObjectClosedException
    description: Indicates that the Reliable State Manager is closed.
  implements:
  - Microsoft.ServiceFabric.Data.IReliableStateManager.RemoveAsync(System.Uri,System.TimeSpan)
  nameWithType.vb: ReliableStateManager.Microsoft.ServiceFabric.Data.IReliableStateManager.RemoveAsync(Uri, TimeSpan)
  name.vb: Microsoft.ServiceFabric.Data.IReliableStateManager.RemoveAsync(Uri, TimeSpan)
- uid: Microsoft.ServiceFabric.Data.ReliableStateManager.Microsoft#ServiceFabric#Data#IReliableStateManager#RemoveAsync(Microsoft.ServiceFabric.Data.ITransaction,System.Uri)
  commentId: M:Microsoft.ServiceFabric.Data.ReliableStateManager.Microsoft#ServiceFabric#Data#IReliableStateManager#RemoveAsync(Microsoft.ServiceFabric.Data.ITransaction,System.Uri)
  id: Microsoft#ServiceFabric#Data#IReliableStateManager#RemoveAsync(Microsoft.ServiceFabric.Data.ITransaction,System.Uri)
  isEii: true
  parent: Microsoft.ServiceFabric.Data.ReliableStateManager
  langs:
  - csharp
  - vb
  name: IReliableStateManager.RemoveAsync(ITransaction, Uri)
  nameWithType: ReliableStateManager.IReliableStateManager.RemoveAsync(ITransaction, Uri)
  fullName: Microsoft.ServiceFabric.Data.ReliableStateManager.Microsoft.ServiceFabric.Data.IReliableStateManager.RemoveAsync(Microsoft.ServiceFabric.Data.ITransaction, System.Uri)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Data/ReliableStateManager.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: Microsoft.ServiceFabric.Data.IReliableStateManager.RemoveAsync
    path: src/prod/src/managed/Microsoft.ServiceFabric.Data/ReliableStateManager.cs
    startLine: 335
  assemblies:
  - Microsoft.ServiceFabric.Data
  namespace: Microsoft.ServiceFabric.Data
  summary: "\nRemoves the <xref href=\"Microsoft.ServiceFabric.Data.IReliableState\" data-throw-if-not-resolved=\"false\"></xref> with the given name from this state manager. The state is\npermanently removed from persistent storage and all replicas when the transaction is committed.\n"
  remarks: "\nThis is an atomic operation. The <xref href=\"Microsoft.ServiceFabric.Data.IReliableState\" data-throw-if-not-resolved=\"false\"></xref> will be successfully removed along with all state\nor be left in-tact. If this method throws an exception, the transaction must be aborted.\n"
  example: []
  syntax:
    content: Task IReliableStateManager.RemoveAsync(ITransaction tx, Uri name)
    content.vb: Function Microsoft.ServiceFabric.Data.IReliableStateManager.RemoveAsync(tx As ITransaction, name As Uri) As Task Implements IReliableStateManager.RemoveAsync
    parameters:
    - id: tx
      type: Microsoft.ServiceFabric.Data.ITransaction
      description: Transaction to associate this operation with.
    - id: name
      type: System.Uri
      description: The name of the <xref href="Microsoft.ServiceFabric.Data.IReliableState" data-throw-if-not-resolved="false"></xref> to remove.
    return:
      type: System.Threading.Tasks.Task
      description: Task that represents the asynchronous remove operation.
  overload: Microsoft.ServiceFabric.Data.ReliableStateManager.Microsoft#ServiceFabric#Data#IReliableStateManager#RemoveAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <em>tx</em> is null, or <em>name</em> is null.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: An <xref href="Microsoft.ServiceFabric.Data.IReliableState" data-throw-if-not-resolved="false"></xref> with the given name does not exist.
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: The operation failed to complete within the default timeout.
  - type: System.Fabric.FabricNotPrimaryException
    commentId: T:System.Fabric.FabricNotPrimaryException
    description: Thrown when the <cref name="IReliableStateManager"></cref> is not in <cref name="ReplicaRole.Primary"></cref>.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\nThrown when a method call is invalid for the object's current state.\nExample, transaction used is already terminated: committed or aborted.\n"
  - type: System.Fabric.FabricObjectClosedException
    commentId: T:System.Fabric.FabricObjectClosedException
    description: Indicates that the Reliable State Manager is closed.
  implements:
  - Microsoft.ServiceFabric.Data.IReliableStateManager.RemoveAsync(Microsoft.ServiceFabric.Data.ITransaction,System.Uri)
  nameWithType.vb: ReliableStateManager.Microsoft.ServiceFabric.Data.IReliableStateManager.RemoveAsync(ITransaction, Uri)
  name.vb: Microsoft.ServiceFabric.Data.IReliableStateManager.RemoveAsync(ITransaction, Uri)
- uid: Microsoft.ServiceFabric.Data.ReliableStateManager.Microsoft#ServiceFabric#Data#IReliableStateManager#RemoveAsync(Microsoft.ServiceFabric.Data.ITransaction,System.Uri,System.TimeSpan)
  commentId: M:Microsoft.ServiceFabric.Data.ReliableStateManager.Microsoft#ServiceFabric#Data#IReliableStateManager#RemoveAsync(Microsoft.ServiceFabric.Data.ITransaction,System.Uri,System.TimeSpan)
  id: Microsoft#ServiceFabric#Data#IReliableStateManager#RemoveAsync(Microsoft.ServiceFabric.Data.ITransaction,System.Uri,System.TimeSpan)
  isEii: true
  parent: Microsoft.ServiceFabric.Data.ReliableStateManager
  langs:
  - csharp
  - vb
  name: IReliableStateManager.RemoveAsync(ITransaction, Uri, TimeSpan)
  nameWithType: ReliableStateManager.IReliableStateManager.RemoveAsync(ITransaction, Uri, TimeSpan)
  fullName: Microsoft.ServiceFabric.Data.ReliableStateManager.Microsoft.ServiceFabric.Data.IReliableStateManager.RemoveAsync(Microsoft.ServiceFabric.Data.ITransaction, System.Uri, System.TimeSpan)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Data/ReliableStateManager.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: Microsoft.ServiceFabric.Data.IReliableStateManager.RemoveAsync
    path: src/prod/src/managed/Microsoft.ServiceFabric.Data/ReliableStateManager.cs
    startLine: 358
  assemblies:
  - Microsoft.ServiceFabric.Data
  namespace: Microsoft.ServiceFabric.Data
  summary: "\nRemoves the <xref href=\"Microsoft.ServiceFabric.Data.IReliableState\" data-throw-if-not-resolved=\"false\"></xref> with the given name from this state manager. The state is\npermanently removed from persistent storage and all replicas when the transaction is committed.\n"
  remarks: "\nThis is an atomic operation. The <xref href=\"Microsoft.ServiceFabric.Data.IReliableState\" data-throw-if-not-resolved=\"false\"></xref> will be successfully removed along with all state\nor be left in-tact. If this method throws an exception, the transaction must be aborted.\n"
  example: []
  syntax:
    content: Task IReliableStateManager.RemoveAsync(ITransaction tx, Uri name, TimeSpan timeout)
    content.vb: Function Microsoft.ServiceFabric.Data.IReliableStateManager.RemoveAsync(tx As ITransaction, name As Uri, timeout As TimeSpan) As Task Implements IReliableStateManager.RemoveAsync
    parameters:
    - id: tx
      type: Microsoft.ServiceFabric.Data.ITransaction
      description: Transaction to associate this operation with.
    - id: name
      type: System.Uri
      description: The name of the <xref href="Microsoft.ServiceFabric.Data.IReliableState" data-throw-if-not-resolved="false"></xref> to remove.
    - id: timeout
      type: System.TimeSpan
      description: The amount of time to wait for the operation to complete before throwing a TimeoutException. Primarily used to prevent deadlocks. The default is 4 seconds.
    return:
      type: System.Threading.Tasks.Task
      description: Task that represents the asynchronous remove operation.
  overload: Microsoft.ServiceFabric.Data.ReliableStateManager.Microsoft#ServiceFabric#Data#IReliableStateManager#RemoveAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <em>tx</em> is null, or <em>name</em> is null.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: An <xref href="Microsoft.ServiceFabric.Data.IReliableState" data-throw-if-not-resolved="false"></xref> with the given name does not exist, or <em>timeout</em> is negative.
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: The operation failed to complete within the given timeout.
  - type: System.Fabric.FabricNotPrimaryException
    commentId: T:System.Fabric.FabricNotPrimaryException
    description: Thrown when the <cref name="IReliableStateManager"></cref> is not in <cref name="ReplicaRole.Primary"></cref>.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\nThrown when a method call is invalid for the object's current state.\nExample, transaction used is already terminated: committed or aborted.\n"
  - type: System.Fabric.FabricObjectClosedException
    commentId: T:System.Fabric.FabricObjectClosedException
    description: Indicates that the Reliable State Manager is closed.
  implements:
  - Microsoft.ServiceFabric.Data.IReliableStateManager.RemoveAsync(Microsoft.ServiceFabric.Data.ITransaction,System.Uri,System.TimeSpan)
  nameWithType.vb: ReliableStateManager.Microsoft.ServiceFabric.Data.IReliableStateManager.RemoveAsync(ITransaction, Uri, TimeSpan)
  name.vb: Microsoft.ServiceFabric.Data.IReliableStateManager.RemoveAsync(ITransaction, Uri, TimeSpan)
- uid: Microsoft.ServiceFabric.Data.ReliableStateManager.Microsoft#ServiceFabric#Data#IReliableStateManager#GetOrAddAsync``1(System.String)
  commentId: M:Microsoft.ServiceFabric.Data.ReliableStateManager.Microsoft#ServiceFabric#Data#IReliableStateManager#GetOrAddAsync``1(System.String)
  id: Microsoft#ServiceFabric#Data#IReliableStateManager#GetOrAddAsync``1(System.String)
  isEii: true
  parent: Microsoft.ServiceFabric.Data.ReliableStateManager
  langs:
  - csharp
  - vb
  name: IReliableStateManager.GetOrAddAsync<T>(String)
  nameWithType: ReliableStateManager.IReliableStateManager.GetOrAddAsync<T>(String)
  fullName: Microsoft.ServiceFabric.Data.ReliableStateManager.Microsoft.ServiceFabric.Data.IReliableStateManager.GetOrAddAsync<T>(System.String)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Data/ReliableStateManager.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: Microsoft.ServiceFabric.Data.IReliableStateManager.GetOrAddAsync
    path: src/prod/src/managed/Microsoft.ServiceFabric.Data/ReliableStateManager.cs
    startLine: 392
  assemblies:
  - Microsoft.ServiceFabric.Data
  namespace: Microsoft.ServiceFabric.Data
  summary: "\nGets an <xref href=\"Microsoft.ServiceFabric.Data.IReliableState\" data-throw-if-not-resolved=\"false\"></xref> of the given type <em>T</em> and with the given name if it exists, or creates one\nand returns it if it doesn't already exist.\n"
  remarks: "\nThis is an atomic operation. When an <xref href=\"Microsoft.ServiceFabric.Data.IReliableState\" data-throw-if-not-resolved=\"false\"></xref> needs to be created, it will either complete and return successfully\nor it will not be created.\n"
  example: []
  syntax:
    content: 'Task<T> IReliableStateManager.GetOrAddAsync<T>(string name)where T : IReliableState'
    content.vb: Function Microsoft.ServiceFabric.Data.IReliableStateManager.GetOrAddAsync(Of T As IReliableState)(name As String) As Task(Of T) Implements IReliableStateManager.GetOrAddAsync
    parameters:
    - id: name
      type: System.String
      description: "\nThe name of the <xref href=\"Microsoft.ServiceFabric.Data.IReliableState\" data-throw-if-not-resolved=\"false\"></xref>. This name must be unique in this <xref href=\"Microsoft.ServiceFabric.Data.IReliableStateManager\" data-throw-if-not-resolved=\"false\"></xref>\nacross <xref href=\"Microsoft.ServiceFabric.Data.IReliableState\" data-throw-if-not-resolved=\"false\"></xref> types, including unrelated types.\n"
    typeParameters:
    - id: T
      description: "\nWhen specifying the <xref href=\"Microsoft.ServiceFabric.Data.IReliableState\" data-throw-if-not-resolved=\"false\"></xref> type, you may ask for either a class type or an interface type.\n<p>\nIf specifying a class type, the system will attempt to return an instance of that type. \nIf an instance of that type cannot be instantiated (e.g., abstract class, no suitable constructor), an ArgumentException is thrown.\n</p>\n<p>\nIf specifying an interface type, the manager will attempt to resolve the interface to a concrete type.\nIf type mapping is specified by the user, this method will use the user-specified mapping to resolve the type (not yet supported).\nIf type mapping is not specified by the user this method will select the default implementation for the interface given.\nIf the given interface type does not have a default implementation, or a user-specified mapping for the type is not provided or the type\nis invalid, this method will throw ArgumentException.\n</p>\n"
    return:
      type: System.Threading.Tasks.Task{{T}}
      description: Task that represents the asynchronous operation. The task result is the reliable state instance.
  overload: Microsoft.ServiceFabric.Data.ReliableStateManager.Microsoft#ServiceFabric#Data#IReliableStateManager#GetOrAddAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <em>name</em> is null.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: An instance of the type <em>T</em> cannot be created, or the existing <xref href="Microsoft.ServiceFabric.Data.IReliableState" data-throw-if-not-resolved="false"></xref> instance is not of type <em>T</em>.
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: The operation failed to complete within the default timeout.
  - type: System.Fabric.FabricNotPrimaryException
    commentId: T:System.Fabric.FabricNotPrimaryException
    description: Thrown when the <cref name="IReliableStateManager"></cref> is not in <cref name="ReplicaRole.Primary"></cref>.
  - type: System.Fabric.FabricObjectClosedException
    commentId: T:System.Fabric.FabricObjectClosedException
    description: Indicates that the Reliable State Manager is closed.
  implements:
  - Microsoft.ServiceFabric.Data.IReliableStateManager.GetOrAddAsync``1(System.String)
  nameWithType.vb: ReliableStateManager.Microsoft.ServiceFabric.Data.IReliableStateManager.GetOrAddAsync(Of T)(String)
  fullName.vb: Microsoft.ServiceFabric.Data.ReliableStateManager.Microsoft.ServiceFabric.Data.IReliableStateManager.GetOrAddAsync(Of T)(System.String)
  name.vb: Microsoft.ServiceFabric.Data.IReliableStateManager.GetOrAddAsync(Of T)(String)
- uid: Microsoft.ServiceFabric.Data.ReliableStateManager.Microsoft#ServiceFabric#Data#IReliableStateManager#GetOrAddAsync``1(System.String,System.TimeSpan)
  commentId: M:Microsoft.ServiceFabric.Data.ReliableStateManager.Microsoft#ServiceFabric#Data#IReliableStateManager#GetOrAddAsync``1(System.String,System.TimeSpan)
  id: Microsoft#ServiceFabric#Data#IReliableStateManager#GetOrAddAsync``1(System.String,System.TimeSpan)
  isEii: true
  parent: Microsoft.ServiceFabric.Data.ReliableStateManager
  langs:
  - csharp
  - vb
  name: IReliableStateManager.GetOrAddAsync<T>(String, TimeSpan)
  nameWithType: ReliableStateManager.IReliableStateManager.GetOrAddAsync<T>(String, TimeSpan)
  fullName: Microsoft.ServiceFabric.Data.ReliableStateManager.Microsoft.ServiceFabric.Data.IReliableStateManager.GetOrAddAsync<T>(System.String, System.TimeSpan)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Data/ReliableStateManager.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: Microsoft.ServiceFabric.Data.IReliableStateManager.GetOrAddAsync
    path: src/prod/src/managed/Microsoft.ServiceFabric.Data/ReliableStateManager.cs
    startLine: 427
  assemblies:
  - Microsoft.ServiceFabric.Data
  namespace: Microsoft.ServiceFabric.Data
  summary: "\nGets an <xref href=\"Microsoft.ServiceFabric.Data.IReliableState\" data-throw-if-not-resolved=\"false\"></xref> of the given type <em>T</em> and with the given name if it exists, or creates one\nand returns it if it doesn't already exist.\n"
  remarks: "\nThis is an atomic operation. When an <xref href=\"Microsoft.ServiceFabric.Data.IReliableState\" data-throw-if-not-resolved=\"false\"></xref> needs to be created, it will either complete and return successfully\nor it will not be created.\n"
  example: []
  syntax:
    content: 'Task<T> IReliableStateManager.GetOrAddAsync<T>(string name, TimeSpan timeout)where T : IReliableState'
    content.vb: Function Microsoft.ServiceFabric.Data.IReliableStateManager.GetOrAddAsync(Of T As IReliableState)(name As String, timeout As TimeSpan) As Task(Of T) Implements IReliableStateManager.GetOrAddAsync
    parameters:
    - id: name
      type: System.String
      description: "\nThe name of the <xref href=\"Microsoft.ServiceFabric.Data.IReliableState\" data-throw-if-not-resolved=\"false\"></xref>. This name must be unique in this <xref href=\"Microsoft.ServiceFabric.Data.IReliableStateManager\" data-throw-if-not-resolved=\"false\"></xref>\nacross <xref href=\"Microsoft.ServiceFabric.Data.IReliableState\" data-throw-if-not-resolved=\"false\"></xref> types, including unrelated types.\n"
    - id: timeout
      type: System.TimeSpan
      description: The amount of time to wait for the operation to complete before throwing a TimeoutException. Primarily used to prevent deadlocks. The default is 4 seconds.
    typeParameters:
    - id: T
      description: "\nWhen specifying the <xref href=\"Microsoft.ServiceFabric.Data.IReliableState\" data-throw-if-not-resolved=\"false\"></xref> type, you may ask for either a class type or an interface type.\n<p>\nIf specifying a class type, the system will attempt to return an instance of that type. \nIf an instance of that type cannot be instantiated (e.g., abstract class, no suitable constructor), an ArgumentException is thrown.\n</p>\n<p>\nIf specifying an interface type, the manager will attempt to resolve the interface to a concrete type.\nIf type mapping is specified by the user, this method will use the user-specified mapping to resolve the type (not yet supported).\nIf type mapping is not specified by the user this method will select the default implementation for the interface given.\nIf the given interface type does not have a default implementation, or a user-specified mapping for the type is not provided or the type\nis invalid, this method will throw ArgumentException.\n</p>\n"
    return:
      type: System.Threading.Tasks.Task{{T}}
      description: Task that represents the asynchronous operation. The task result is the reliable state instance.
  overload: Microsoft.ServiceFabric.Data.ReliableStateManager.Microsoft#ServiceFabric#Data#IReliableStateManager#GetOrAddAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <em>name</em> is null.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: An instance of the type <em>T</em> cannot be created, or the existing <xref href="Microsoft.ServiceFabric.Data.IReliableState" data-throw-if-not-resolved="false"></xref> instance is not of type <em>T</em>, or <em>timeout</em> is negative.
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: The operation failed to complete within the given timeout.
  - type: System.Fabric.FabricNotPrimaryException
    commentId: T:System.Fabric.FabricNotPrimaryException
    description: Thrown when the <cref name="IReliableStateManager"></cref> is not in <cref name="ReplicaRole.Primary"></cref>.
  - type: System.Fabric.FabricObjectClosedException
    commentId: T:System.Fabric.FabricObjectClosedException
    description: Indicates that the Reliable State Manager is closed.
  implements:
  - Microsoft.ServiceFabric.Data.IReliableStateManager.GetOrAddAsync``1(System.String,System.TimeSpan)
  nameWithType.vb: ReliableStateManager.Microsoft.ServiceFabric.Data.IReliableStateManager.GetOrAddAsync(Of T)(String, TimeSpan)
  fullName.vb: Microsoft.ServiceFabric.Data.ReliableStateManager.Microsoft.ServiceFabric.Data.IReliableStateManager.GetOrAddAsync(Of T)(System.String, System.TimeSpan)
  name.vb: Microsoft.ServiceFabric.Data.IReliableStateManager.GetOrAddAsync(Of T)(String, TimeSpan)
- uid: Microsoft.ServiceFabric.Data.ReliableStateManager.Microsoft#ServiceFabric#Data#IReliableStateManager#GetOrAddAsync``1(Microsoft.ServiceFabric.Data.ITransaction,System.String)
  commentId: M:Microsoft.ServiceFabric.Data.ReliableStateManager.Microsoft#ServiceFabric#Data#IReliableStateManager#GetOrAddAsync``1(Microsoft.ServiceFabric.Data.ITransaction,System.String)
  id: Microsoft#ServiceFabric#Data#IReliableStateManager#GetOrAddAsync``1(Microsoft.ServiceFabric.Data.ITransaction,System.String)
  isEii: true
  parent: Microsoft.ServiceFabric.Data.ReliableStateManager
  langs:
  - csharp
  - vb
  name: IReliableStateManager.GetOrAddAsync<T>(ITransaction, String)
  nameWithType: ReliableStateManager.IReliableStateManager.GetOrAddAsync<T>(ITransaction, String)
  fullName: Microsoft.ServiceFabric.Data.ReliableStateManager.Microsoft.ServiceFabric.Data.IReliableStateManager.GetOrAddAsync<T>(Microsoft.ServiceFabric.Data.ITransaction, System.String)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Data/ReliableStateManager.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: Microsoft.ServiceFabric.Data.IReliableStateManager.GetOrAddAsync
    path: src/prod/src/managed/Microsoft.ServiceFabric.Data/ReliableStateManager.cs
    startLine: 466
  assemblies:
  - Microsoft.ServiceFabric.Data
  namespace: Microsoft.ServiceFabric.Data
  summary: "\nGets an <xref href=\"Microsoft.ServiceFabric.Data.IReliableState\" data-throw-if-not-resolved=\"false\"></xref> of the given type <em>T</em> and with the given name if it exists, or creates one\nand returns it if it doesn't already exist.\n"
  remarks: "\nThis is an atomic operation. When an <xref href=\"Microsoft.ServiceFabric.Data.IReliableState\" data-throw-if-not-resolved=\"false\"></xref> needs to be created, it will either complete and return successfully\nor it will not be created. If this method throws an exception, the transaction must be aborted.\n"
  example: []
  syntax:
    content: 'Task<T> IReliableStateManager.GetOrAddAsync<T>(ITransaction tx, string name)where T : IReliableState'
    content.vb: Function Microsoft.ServiceFabric.Data.IReliableStateManager.GetOrAddAsync(Of T As IReliableState)(tx As ITransaction, name As String) As Task(Of T) Implements IReliableStateManager.GetOrAddAsync
    parameters:
    - id: tx
      type: Microsoft.ServiceFabric.Data.ITransaction
      description: Transaction to associate this operation with.
    - id: name
      type: System.String
      description: "\nThe name of the <xref href=\"Microsoft.ServiceFabric.Data.IReliableState\" data-throw-if-not-resolved=\"false\"></xref>. This name must be unique in this <xref href=\"Microsoft.ServiceFabric.Data.IReliableStateManager\" data-throw-if-not-resolved=\"false\"></xref>\nacross <xref href=\"Microsoft.ServiceFabric.Data.IReliableState\" data-throw-if-not-resolved=\"false\"></xref> types, including unrelated types.\n"
    typeParameters:
    - id: T
      description: "\nWhen specifying the <xref href=\"Microsoft.ServiceFabric.Data.IReliableState\" data-throw-if-not-resolved=\"false\"></xref> type, you may ask for either a class type or an interface type.\n<p>\nIf specifying a class type, the system will attempt to return an instance of that type. \nIf an instance of that type cannot be instantiated (e.g., abstract class, no suitable constructor), an ArgumentException is thrown.\n</p>\n<p>\nIf specifying an interface type, the manager will attempt to resolve the interface to a concrete type.\nIf type mapping is specified by the user, this method will use the user-specified mapping to resolve the type (not yet supported).\nIf type mapping is not specified by the user this method will select the default implementation for the interface given.\nIf the given interface type does not have a default implementation, or a user-specified mapping for the type is not provided or the type\nis invalid, this method will throw ArgumentException.\n</p>\n"
    return:
      type: System.Threading.Tasks.Task{{T}}
      description: Task that represents the asynchronous operation. The task result is the reliable state instance.
  overload: Microsoft.ServiceFabric.Data.ReliableStateManager.Microsoft#ServiceFabric#Data#IReliableStateManager#GetOrAddAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <em>tx</em> is null, or <em>name</em> is null.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: An instance of the type <em>T</em> cannot be created, or the existing <xref href="Microsoft.ServiceFabric.Data.IReliableState" data-throw-if-not-resolved="false"></xref> instance is not of type <em>T</em>.
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: The operation failed to complete within the default timeout.
  - type: System.Fabric.FabricNotPrimaryException
    commentId: T:System.Fabric.FabricNotPrimaryException
    description: Thrown when the <cref name="IReliableStateManager"></cref> is not in <cref name="ReplicaRole.Primary"></cref>.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\nThrown when a method call is invalid for the object's current state.\nExample, transaction used is already terminated: committed or aborted.\n"
  - type: System.Fabric.FabricObjectClosedException
    commentId: T:System.Fabric.FabricObjectClosedException
    description: Indicates that the Reliable State Manager is closed.
  implements:
  - Microsoft.ServiceFabric.Data.IReliableStateManager.GetOrAddAsync``1(Microsoft.ServiceFabric.Data.ITransaction,System.String)
  nameWithType.vb: ReliableStateManager.Microsoft.ServiceFabric.Data.IReliableStateManager.GetOrAddAsync(Of T)(ITransaction, String)
  fullName.vb: Microsoft.ServiceFabric.Data.ReliableStateManager.Microsoft.ServiceFabric.Data.IReliableStateManager.GetOrAddAsync(Of T)(Microsoft.ServiceFabric.Data.ITransaction, System.String)
  name.vb: Microsoft.ServiceFabric.Data.IReliableStateManager.GetOrAddAsync(Of T)(ITransaction, String)
- uid: Microsoft.ServiceFabric.Data.ReliableStateManager.Microsoft#ServiceFabric#Data#IReliableStateManager#GetOrAddAsync``1(Microsoft.ServiceFabric.Data.ITransaction,System.String,System.TimeSpan)
  commentId: M:Microsoft.ServiceFabric.Data.ReliableStateManager.Microsoft#ServiceFabric#Data#IReliableStateManager#GetOrAddAsync``1(Microsoft.ServiceFabric.Data.ITransaction,System.String,System.TimeSpan)
  id: Microsoft#ServiceFabric#Data#IReliableStateManager#GetOrAddAsync``1(Microsoft.ServiceFabric.Data.ITransaction,System.String,System.TimeSpan)
  isEii: true
  parent: Microsoft.ServiceFabric.Data.ReliableStateManager
  langs:
  - csharp
  - vb
  name: IReliableStateManager.GetOrAddAsync<T>(ITransaction, String, TimeSpan)
  nameWithType: ReliableStateManager.IReliableStateManager.GetOrAddAsync<T>(ITransaction, String, TimeSpan)
  fullName: Microsoft.ServiceFabric.Data.ReliableStateManager.Microsoft.ServiceFabric.Data.IReliableStateManager.GetOrAddAsync<T>(Microsoft.ServiceFabric.Data.ITransaction, System.String, System.TimeSpan)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Data/ReliableStateManager.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: Microsoft.ServiceFabric.Data.IReliableStateManager.GetOrAddAsync
    path: src/prod/src/managed/Microsoft.ServiceFabric.Data/ReliableStateManager.cs
    startLine: 506
  assemblies:
  - Microsoft.ServiceFabric.Data
  namespace: Microsoft.ServiceFabric.Data
  summary: "\nGets an <xref href=\"Microsoft.ServiceFabric.Data.IReliableState\" data-throw-if-not-resolved=\"false\"></xref> of the given type <em>T</em> and with the given name if it exists, or creates one\nand returns it if it doesn't already exist.\n"
  remarks: "\nThis is an atomic operation. When an <xref href=\"Microsoft.ServiceFabric.Data.IReliableState\" data-throw-if-not-resolved=\"false\"></xref> needs to be created, it will either complete and return successfully\nor it will not be created. If this method throws an exception, the transaction must be aborted.\n"
  example: []
  syntax:
    content: 'Task<T> IReliableStateManager.GetOrAddAsync<T>(ITransaction tx, string name, TimeSpan timeout)where T : IReliableState'
    content.vb: Function Microsoft.ServiceFabric.Data.IReliableStateManager.GetOrAddAsync(Of T As IReliableState)(tx As ITransaction, name As String, timeout As TimeSpan) As Task(Of T) Implements IReliableStateManager.GetOrAddAsync
    parameters:
    - id: tx
      type: Microsoft.ServiceFabric.Data.ITransaction
      description: Transaction to associate this operation with.
    - id: name
      type: System.String
      description: "\nThe name of the <xref href=\"Microsoft.ServiceFabric.Data.IReliableState\" data-throw-if-not-resolved=\"false\"></xref>. This name must be unique in this <xref href=\"Microsoft.ServiceFabric.Data.IReliableStateManager\" data-throw-if-not-resolved=\"false\"></xref>\nacross <xref href=\"Microsoft.ServiceFabric.Data.IReliableState\" data-throw-if-not-resolved=\"false\"></xref> types, including unrelated types.\n"
    - id: timeout
      type: System.TimeSpan
      description: The amount of time to wait for the operation to complete before throwing a TimeoutException. Primarily used to prevent deadlocks. The default is 4 seconds.
    typeParameters:
    - id: T
      description: "\nWhen specifying the <xref href=\"Microsoft.ServiceFabric.Data.IReliableState\" data-throw-if-not-resolved=\"false\"></xref> type, you may ask for either a class type or an interface type.\n<p>\nIf specifying a class type, the system will attempt to return an instance of that type. \nIf an instance of that type cannot be instantiated (e.g., abstract class, no suitable constructor), an ArgumentException is thrown.\n</p>\n<p>\nIf specifying an interface type, the manager will attempt to resolve the interface to a concrete type.\nIf type mapping is specified by the user, this method will use the user-specified mapping to resolve the type (not yet supported).\nIf type mapping is not specified by the user this method will select the default implementation for the interface given.\nIf the given interface type does not have a default implementation, or a user-specified mapping for the type is not provided or the type\nis invalid, this method will throw ArgumentException.\n</p>\n"
    return:
      type: System.Threading.Tasks.Task{{T}}
      description: Task that represents the asynchronous operation. The task result is the reliable state instance.
  overload: Microsoft.ServiceFabric.Data.ReliableStateManager.Microsoft#ServiceFabric#Data#IReliableStateManager#GetOrAddAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <em>tx</em> is null, or <em>name</em> is null.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: An instance of the type <em>T</em> cannot be created, or the existing <xref href="Microsoft.ServiceFabric.Data.IReliableState" data-throw-if-not-resolved="false"></xref> instance is not of type <em>T</em>, or <em>timeout</em> is negative.
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: The operation failed to complete within the given timeout.
  - type: System.Fabric.FabricNotPrimaryException
    commentId: T:System.Fabric.FabricNotPrimaryException
    description: Thrown when the <cref name="IReliableStateManager"></cref> is not in <cref name="ReplicaRole.Primary"></cref>.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\nThrown when a method call is invalid for the object's current state.\nExample, transaction used is already terminated: committed or aborted.\n"
  - type: System.Fabric.FabricObjectClosedException
    commentId: T:System.Fabric.FabricObjectClosedException
    description: Indicates that the Reliable State Manager is closed.
  implements:
  - Microsoft.ServiceFabric.Data.IReliableStateManager.GetOrAddAsync``1(Microsoft.ServiceFabric.Data.ITransaction,System.String,System.TimeSpan)
  nameWithType.vb: ReliableStateManager.Microsoft.ServiceFabric.Data.IReliableStateManager.GetOrAddAsync(Of T)(ITransaction, String, TimeSpan)
  fullName.vb: Microsoft.ServiceFabric.Data.ReliableStateManager.Microsoft.ServiceFabric.Data.IReliableStateManager.GetOrAddAsync(Of T)(Microsoft.ServiceFabric.Data.ITransaction, System.String, System.TimeSpan)
  name.vb: Microsoft.ServiceFabric.Data.IReliableStateManager.GetOrAddAsync(Of T)(ITransaction, String, TimeSpan)
- uid: Microsoft.ServiceFabric.Data.ReliableStateManager.Microsoft#ServiceFabric#Data#IReliableStateManager#GetOrAddAsync``1(System.Uri)
  commentId: M:Microsoft.ServiceFabric.Data.ReliableStateManager.Microsoft#ServiceFabric#Data#IReliableStateManager#GetOrAddAsync``1(System.Uri)
  id: Microsoft#ServiceFabric#Data#IReliableStateManager#GetOrAddAsync``1(System.Uri)
  isEii: true
  parent: Microsoft.ServiceFabric.Data.ReliableStateManager
  langs:
  - csharp
  - vb
  name: IReliableStateManager.GetOrAddAsync<T>(Uri)
  nameWithType: ReliableStateManager.IReliableStateManager.GetOrAddAsync<T>(Uri)
  fullName: Microsoft.ServiceFabric.Data.ReliableStateManager.Microsoft.ServiceFabric.Data.IReliableStateManager.GetOrAddAsync<T>(System.Uri)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Data/ReliableStateManager.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: Microsoft.ServiceFabric.Data.IReliableStateManager.GetOrAddAsync
    path: src/prod/src/managed/Microsoft.ServiceFabric.Data/ReliableStateManager.cs
    startLine: 540
  assemblies:
  - Microsoft.ServiceFabric.Data
  namespace: Microsoft.ServiceFabric.Data
  summary: "\nGets an <xref href=\"Microsoft.ServiceFabric.Data.IReliableState\" data-throw-if-not-resolved=\"false\"></xref> of the given type <em>T</em> and with the given name if it exists, or creates one\nand returns it if it doesn't already exist.\n"
  remarks: "\nThis is an atomic operation. When an <xref href=\"Microsoft.ServiceFabric.Data.IReliableState\" data-throw-if-not-resolved=\"false\"></xref> needs to be created, it will either complete and return successfully\nor it will not be created.\n"
  example: []
  syntax:
    content: 'Task<T> IReliableStateManager.GetOrAddAsync<T>(Uri name)where T : IReliableState'
    content.vb: Function Microsoft.ServiceFabric.Data.IReliableStateManager.GetOrAddAsync(Of T As IReliableState)(name As Uri) As Task(Of T) Implements IReliableStateManager.GetOrAddAsync
    parameters:
    - id: name
      type: System.Uri
      description: "\nThe name of the <xref href=\"Microsoft.ServiceFabric.Data.IReliableState\" data-throw-if-not-resolved=\"false\"></xref>. This name must be unique in this <xref href=\"Microsoft.ServiceFabric.Data.IReliableStateManager\" data-throw-if-not-resolved=\"false\"></xref>\nacross <xref href=\"Microsoft.ServiceFabric.Data.IReliableState\" data-throw-if-not-resolved=\"false\"></xref> types, including unrelated types.\n"
    typeParameters:
    - id: T
      description: "\nWhen specifying the <xref href=\"Microsoft.ServiceFabric.Data.IReliableState\" data-throw-if-not-resolved=\"false\"></xref> type, you may ask for either a class type or an interface type.\n<p>\nIf specifying a class type, the system will attempt to return an instance of that type. \nIf an instance of that type cannot be instantiated (e.g., abstract class, no suitable constructor), an ArgumentException is thrown.\n</p>\n<p>\nIf specifying an interface type, the manager will attempt to resolve the interface to a concrete type.\nIf type mapping is specified by the user, this method will use the user-specified mapping to resolve the type (not yet supported).\nIf type mapping is not specified by the user this method will select the default implementation for the interface given.\nIf the given interface type does not have a default implementation, or a user-specified mapping for the type is not provided or the type\nis invalid, this method will throw ArgumentException.\n</p>\n"
    return:
      type: System.Threading.Tasks.Task{{T}}
      description: Task that represents the asynchronous operation. The task result is the reliable state instance.
  overload: Microsoft.ServiceFabric.Data.ReliableStateManager.Microsoft#ServiceFabric#Data#IReliableStateManager#GetOrAddAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <em>name</em> is null.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: An instance of the type <em>T</em> cannot be created, or the existing <xref href="Microsoft.ServiceFabric.Data.IReliableState" data-throw-if-not-resolved="false"></xref> instance is not of type <em>T</em>.
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: The operation failed to complete within the default timeout.
  - type: System.Fabric.FabricNotPrimaryException
    commentId: T:System.Fabric.FabricNotPrimaryException
    description: Thrown when the <cref name="IReliableStateManager"></cref> is not in <cref name="ReplicaRole.Primary"></cref>.
  - type: System.Fabric.FabricObjectClosedException
    commentId: T:System.Fabric.FabricObjectClosedException
    description: Indicates that the Reliable State Manager is closed.
  implements:
  - Microsoft.ServiceFabric.Data.IReliableStateManager.GetOrAddAsync``1(System.Uri)
  nameWithType.vb: ReliableStateManager.Microsoft.ServiceFabric.Data.IReliableStateManager.GetOrAddAsync(Of T)(Uri)
  fullName.vb: Microsoft.ServiceFabric.Data.ReliableStateManager.Microsoft.ServiceFabric.Data.IReliableStateManager.GetOrAddAsync(Of T)(System.Uri)
  name.vb: Microsoft.ServiceFabric.Data.IReliableStateManager.GetOrAddAsync(Of T)(Uri)
- uid: Microsoft.ServiceFabric.Data.ReliableStateManager.Microsoft#ServiceFabric#Data#IReliableStateManager#GetOrAddAsync``1(System.Uri,System.TimeSpan)
  commentId: M:Microsoft.ServiceFabric.Data.ReliableStateManager.Microsoft#ServiceFabric#Data#IReliableStateManager#GetOrAddAsync``1(System.Uri,System.TimeSpan)
  id: Microsoft#ServiceFabric#Data#IReliableStateManager#GetOrAddAsync``1(System.Uri,System.TimeSpan)
  isEii: true
  parent: Microsoft.ServiceFabric.Data.ReliableStateManager
  langs:
  - csharp
  - vb
  name: IReliableStateManager.GetOrAddAsync<T>(Uri, TimeSpan)
  nameWithType: ReliableStateManager.IReliableStateManager.GetOrAddAsync<T>(Uri, TimeSpan)
  fullName: Microsoft.ServiceFabric.Data.ReliableStateManager.Microsoft.ServiceFabric.Data.IReliableStateManager.GetOrAddAsync<T>(System.Uri, System.TimeSpan)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Data/ReliableStateManager.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: Microsoft.ServiceFabric.Data.IReliableStateManager.GetOrAddAsync
    path: src/prod/src/managed/Microsoft.ServiceFabric.Data/ReliableStateManager.cs
    startLine: 575
  assemblies:
  - Microsoft.ServiceFabric.Data
  namespace: Microsoft.ServiceFabric.Data
  summary: "\nGets an <xref href=\"Microsoft.ServiceFabric.Data.IReliableState\" data-throw-if-not-resolved=\"false\"></xref> of the given type <em>T</em> and with the given name if it exists, or creates one\nand returns it if it doesn't already exist.\n"
  remarks: "\nThis is an atomic operation. When an <xref href=\"Microsoft.ServiceFabric.Data.IReliableState\" data-throw-if-not-resolved=\"false\"></xref> needs to be created, it will either complete and return successfully\nor it will not be created.\n"
  example: []
  syntax:
    content: 'Task<T> IReliableStateManager.GetOrAddAsync<T>(Uri name, TimeSpan timeout)where T : IReliableState'
    content.vb: Function Microsoft.ServiceFabric.Data.IReliableStateManager.GetOrAddAsync(Of T As IReliableState)(name As Uri, timeout As TimeSpan) As Task(Of T) Implements IReliableStateManager.GetOrAddAsync
    parameters:
    - id: name
      type: System.Uri
      description: "\nThe name of the <xref href=\"Microsoft.ServiceFabric.Data.IReliableState\" data-throw-if-not-resolved=\"false\"></xref>. This name must be unique in this <xref href=\"Microsoft.ServiceFabric.Data.IReliableStateManager\" data-throw-if-not-resolved=\"false\"></xref>\nacross <xref href=\"Microsoft.ServiceFabric.Data.IReliableState\" data-throw-if-not-resolved=\"false\"></xref> types, including unrelated types.\n"
    - id: timeout
      type: System.TimeSpan
      description: The amount of time to wait for the operation to complete before throwing a TimeoutException. Primarily used to prevent deadlocks. The default is 4 seconds.
    typeParameters:
    - id: T
      description: "\nWhen specifying the <xref href=\"Microsoft.ServiceFabric.Data.IReliableState\" data-throw-if-not-resolved=\"false\"></xref> type, you may ask for either a class type or an interface type.\n<p>\nIf specifying a class type, the system will attempt to return an instance of that type. \nIf an instance of that type cannot be instantiated (e.g., abstract class, no suitable constructor), an ArgumentException is thrown.\n</p>\n<p>\nIf specifying an interface type, the manager will attempt to resolve the interface to a concrete type.\nIf type mapping is specified by the user, this method will use the user-specified mapping to resolve the type (not yet supported).\nIf type mapping is not specified by the user this method will select the default implementation for the interface given.\nIf the given interface type does not have a default implementation, or a user-specified mapping for the type is not provided or the type\nis invalid, this method will throw ArgumentException.\n</p>\n"
    return:
      type: System.Threading.Tasks.Task{{T}}
      description: Task that represents the asynchronous operation. The task result is the reliable state instance.
  overload: Microsoft.ServiceFabric.Data.ReliableStateManager.Microsoft#ServiceFabric#Data#IReliableStateManager#GetOrAddAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <em>name</em> is null.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: An instance of the type <em>T</em> cannot be created, or the existing <xref href="Microsoft.ServiceFabric.Data.IReliableState" data-throw-if-not-resolved="false"></xref> instance is not of type <em>T</em>, or <em>timeout</em> is negative.
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: The operation failed to complete within the given timeout.
  - type: System.Fabric.FabricNotPrimaryException
    commentId: T:System.Fabric.FabricNotPrimaryException
    description: Thrown when the <cref name="IReliableStateManager"></cref> is not in <cref name="ReplicaRole.Primary"></cref>.
  - type: System.Fabric.FabricObjectClosedException
    commentId: T:System.Fabric.FabricObjectClosedException
    description: Indicates that the Reliable State Manager is closed.
  implements:
  - Microsoft.ServiceFabric.Data.IReliableStateManager.GetOrAddAsync``1(System.Uri,System.TimeSpan)
  nameWithType.vb: ReliableStateManager.Microsoft.ServiceFabric.Data.IReliableStateManager.GetOrAddAsync(Of T)(Uri, TimeSpan)
  fullName.vb: Microsoft.ServiceFabric.Data.ReliableStateManager.Microsoft.ServiceFabric.Data.IReliableStateManager.GetOrAddAsync(Of T)(System.Uri, System.TimeSpan)
  name.vb: Microsoft.ServiceFabric.Data.IReliableStateManager.GetOrAddAsync(Of T)(Uri, TimeSpan)
- uid: Microsoft.ServiceFabric.Data.ReliableStateManager.Microsoft#ServiceFabric#Data#IReliableStateManager#GetOrAddAsync``1(Microsoft.ServiceFabric.Data.ITransaction,System.Uri)
  commentId: M:Microsoft.ServiceFabric.Data.ReliableStateManager.Microsoft#ServiceFabric#Data#IReliableStateManager#GetOrAddAsync``1(Microsoft.ServiceFabric.Data.ITransaction,System.Uri)
  id: Microsoft#ServiceFabric#Data#IReliableStateManager#GetOrAddAsync``1(Microsoft.ServiceFabric.Data.ITransaction,System.Uri)
  isEii: true
  parent: Microsoft.ServiceFabric.Data.ReliableStateManager
  langs:
  - csharp
  - vb
  name: IReliableStateManager.GetOrAddAsync<T>(ITransaction, Uri)
  nameWithType: ReliableStateManager.IReliableStateManager.GetOrAddAsync<T>(ITransaction, Uri)
  fullName: Microsoft.ServiceFabric.Data.ReliableStateManager.Microsoft.ServiceFabric.Data.IReliableStateManager.GetOrAddAsync<T>(Microsoft.ServiceFabric.Data.ITransaction, System.Uri)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Data/ReliableStateManager.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: Microsoft.ServiceFabric.Data.IReliableStateManager.GetOrAddAsync
    path: src/prod/src/managed/Microsoft.ServiceFabric.Data/ReliableStateManager.cs
    startLine: 614
  assemblies:
  - Microsoft.ServiceFabric.Data
  namespace: Microsoft.ServiceFabric.Data
  summary: "\nGets an <xref href=\"Microsoft.ServiceFabric.Data.IReliableState\" data-throw-if-not-resolved=\"false\"></xref> of the given type <em>T</em> and with the given name if it exists, or creates one\nand returns it if it doesn't already exist.\n"
  remarks: "\nThis is an atomic operation. When an <xref href=\"Microsoft.ServiceFabric.Data.IReliableState\" data-throw-if-not-resolved=\"false\"></xref> needs to be created, it will either complete and return successfully\nor it will not be created. If this method throws an exception, the transaction must be aborted.\n"
  example: []
  syntax:
    content: 'Task<T> IReliableStateManager.GetOrAddAsync<T>(ITransaction tx, Uri name)where T : IReliableState'
    content.vb: Function Microsoft.ServiceFabric.Data.IReliableStateManager.GetOrAddAsync(Of T As IReliableState)(tx As ITransaction, name As Uri) As Task(Of T) Implements IReliableStateManager.GetOrAddAsync
    parameters:
    - id: tx
      type: Microsoft.ServiceFabric.Data.ITransaction
      description: Transaction to associate this operation with.
    - id: name
      type: System.Uri
      description: "\nThe name of the <xref href=\"Microsoft.ServiceFabric.Data.IReliableState\" data-throw-if-not-resolved=\"false\"></xref>. This name must be unique in this <xref href=\"Microsoft.ServiceFabric.Data.IReliableStateManager\" data-throw-if-not-resolved=\"false\"></xref>\nacross <xref href=\"Microsoft.ServiceFabric.Data.IReliableState\" data-throw-if-not-resolved=\"false\"></xref> types, including unrelated types.\n"
    typeParameters:
    - id: T
      description: "\nWhen specifying the <xref href=\"Microsoft.ServiceFabric.Data.IReliableState\" data-throw-if-not-resolved=\"false\"></xref> type, you may ask for either a class type or an interface type.\n<p>\nIf specifying a class type, the system will attempt to return an instance of that type. \nIf an instance of that type cannot be instantiated (e.g., abstract class, no suitable constructor), an ArgumentException is thrown.\n</p>\n<p>\nIf specifying an interface type, the manager will attempt to resolve the interface to a concrete type.\nIf type mapping is specified by the user, this method will use the user-specified mapping to resolve the type (not yet supported).\nIf type mapping is not specified by the user this method will select the default implementation for the interface given.\nIf the given interface type does not have a default implementation, or a user-specified mapping for the type is not provided or the type\nis invalid, this method will throw ArgumentException.\n</p>\n"
    return:
      type: System.Threading.Tasks.Task{{T}}
      description: Task that represents the asynchronous operation. The task result is the reliable state instance.
  overload: Microsoft.ServiceFabric.Data.ReliableStateManager.Microsoft#ServiceFabric#Data#IReliableStateManager#GetOrAddAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <em>tx</em> is null, or <em>name</em> is null.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: An instance of the type <em>T</em> cannot be created, or the existing <xref href="Microsoft.ServiceFabric.Data.IReliableState" data-throw-if-not-resolved="false"></xref> instance is not of type <em>T</em>.
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: The operation failed to complete within the default timeout.
  - type: System.Fabric.FabricNotPrimaryException
    commentId: T:System.Fabric.FabricNotPrimaryException
    description: Thrown when the <cref name="IReliableStateManager"></cref> is not in <cref name="ReplicaRole.Primary"></cref>.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\nThrown when a method call is invalid for the object's current state.\nExample, transaction used is already terminated: committed or aborted.\n"
  - type: System.Fabric.FabricObjectClosedException
    commentId: T:System.Fabric.FabricObjectClosedException
    description: Indicates that the Reliable State Manager is closed.
  implements:
  - Microsoft.ServiceFabric.Data.IReliableStateManager.GetOrAddAsync``1(Microsoft.ServiceFabric.Data.ITransaction,System.Uri)
  nameWithType.vb: ReliableStateManager.Microsoft.ServiceFabric.Data.IReliableStateManager.GetOrAddAsync(Of T)(ITransaction, Uri)
  fullName.vb: Microsoft.ServiceFabric.Data.ReliableStateManager.Microsoft.ServiceFabric.Data.IReliableStateManager.GetOrAddAsync(Of T)(Microsoft.ServiceFabric.Data.ITransaction, System.Uri)
  name.vb: Microsoft.ServiceFabric.Data.IReliableStateManager.GetOrAddAsync(Of T)(ITransaction, Uri)
- uid: Microsoft.ServiceFabric.Data.ReliableStateManager.Microsoft#ServiceFabric#Data#IReliableStateManager#GetOrAddAsync``1(Microsoft.ServiceFabric.Data.ITransaction,System.Uri,System.TimeSpan)
  commentId: M:Microsoft.ServiceFabric.Data.ReliableStateManager.Microsoft#ServiceFabric#Data#IReliableStateManager#GetOrAddAsync``1(Microsoft.ServiceFabric.Data.ITransaction,System.Uri,System.TimeSpan)
  id: Microsoft#ServiceFabric#Data#IReliableStateManager#GetOrAddAsync``1(Microsoft.ServiceFabric.Data.ITransaction,System.Uri,System.TimeSpan)
  isEii: true
  parent: Microsoft.ServiceFabric.Data.ReliableStateManager
  langs:
  - csharp
  - vb
  name: IReliableStateManager.GetOrAddAsync<T>(ITransaction, Uri, TimeSpan)
  nameWithType: ReliableStateManager.IReliableStateManager.GetOrAddAsync<T>(ITransaction, Uri, TimeSpan)
  fullName: Microsoft.ServiceFabric.Data.ReliableStateManager.Microsoft.ServiceFabric.Data.IReliableStateManager.GetOrAddAsync<T>(Microsoft.ServiceFabric.Data.ITransaction, System.Uri, System.TimeSpan)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Data/ReliableStateManager.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: Microsoft.ServiceFabric.Data.IReliableStateManager.GetOrAddAsync
    path: src/prod/src/managed/Microsoft.ServiceFabric.Data/ReliableStateManager.cs
    startLine: 654
  assemblies:
  - Microsoft.ServiceFabric.Data
  namespace: Microsoft.ServiceFabric.Data
  summary: "\nGets an <xref href=\"Microsoft.ServiceFabric.Data.IReliableState\" data-throw-if-not-resolved=\"false\"></xref> of the given type <em>T</em> and with the given name if it exists, or creates one\nand returns it if it doesn't already exist.\n"
  remarks: "\nThis is an atomic operation. When an <xref href=\"Microsoft.ServiceFabric.Data.IReliableState\" data-throw-if-not-resolved=\"false\"></xref> needs to be created, it will either complete and return successfully\nor it will not be created. If this method throws an exception, the transaction must be aborted.\n"
  example: []
  syntax:
    content: 'Task<T> IReliableStateManager.GetOrAddAsync<T>(ITransaction tx, Uri name, TimeSpan timeout)where T : IReliableState'
    content.vb: Function Microsoft.ServiceFabric.Data.IReliableStateManager.GetOrAddAsync(Of T As IReliableState)(tx As ITransaction, name As Uri, timeout As TimeSpan) As Task(Of T) Implements IReliableStateManager.GetOrAddAsync
    parameters:
    - id: tx
      type: Microsoft.ServiceFabric.Data.ITransaction
      description: Transaction to associate this operation with.
    - id: name
      type: System.Uri
      description: "\nThe name of the <xref href=\"Microsoft.ServiceFabric.Data.IReliableState\" data-throw-if-not-resolved=\"false\"></xref>. This name must be unique in this <xref href=\"Microsoft.ServiceFabric.Data.IReliableStateManager\" data-throw-if-not-resolved=\"false\"></xref>\nacross <xref href=\"Microsoft.ServiceFabric.Data.IReliableState\" data-throw-if-not-resolved=\"false\"></xref> types, including unrelated types.\n"
    - id: timeout
      type: System.TimeSpan
      description: The amount of time to wait for the operation to complete before throwing a TimeoutException. Primarily used to prevent deadlocks. The default is 4 seconds.
    typeParameters:
    - id: T
      description: "\nWhen specifying the <xref href=\"Microsoft.ServiceFabric.Data.IReliableState\" data-throw-if-not-resolved=\"false\"></xref> type, you may ask for either a class type or an interface type.\n<p>\nIf specifying a class type, the system will attempt to return an instance of that type. \nIf an instance of that type cannot be instantiated (e.g., abstract class, no suitable constructor), an ArgumentException is thrown.\n</p>\n<p>\nIf specifying an interface type, the manager will attempt to resolve the interface to a concrete type.\nIf type mapping is specified by the user, this method will use the user-specified mapping to resolve the type (not yet supported).\nIf type mapping is not specified by the user this method will select the default implementation for the interface given.\nIf the given interface type does not have a default implementation, or a user-specified mapping for the type is not provided or the type\nis invalid, this method will throw ArgumentException.\n</p>\n"
    return:
      type: System.Threading.Tasks.Task{{T}}
      description: Task that represents the asynchronous operation. The task result is the reliable state instance.
  overload: Microsoft.ServiceFabric.Data.ReliableStateManager.Microsoft#ServiceFabric#Data#IReliableStateManager#GetOrAddAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <em>tx</em> is null, or <em>name</em> is null.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: An instance of the type <em>T</em> cannot be created, or the existing <xref href="Microsoft.ServiceFabric.Data.IReliableState" data-throw-if-not-resolved="false"></xref> instance is not of type <em>T</em>, or <em>timeout</em> is negative.
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: The operation failed to complete within the given timeout.
  - type: System.Fabric.FabricNotPrimaryException
    commentId: T:System.Fabric.FabricNotPrimaryException
    description: Thrown when the <cref name="IReliableStateManager"></cref> is not in <cref name="ReplicaRole.Primary"></cref>.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\nThrown when a method call is invalid for the object's current state.\nExample, transaction used is already terminated: committed or aborted.\n"
  - type: System.Fabric.FabricObjectClosedException
    commentId: T:System.Fabric.FabricObjectClosedException
    description: Indicates that the Reliable State Manager is closed.
  implements:
  - Microsoft.ServiceFabric.Data.IReliableStateManager.GetOrAddAsync``1(Microsoft.ServiceFabric.Data.ITransaction,System.Uri,System.TimeSpan)
  nameWithType.vb: ReliableStateManager.Microsoft.ServiceFabric.Data.IReliableStateManager.GetOrAddAsync(Of T)(ITransaction, Uri, TimeSpan)
  fullName.vb: Microsoft.ServiceFabric.Data.ReliableStateManager.Microsoft.ServiceFabric.Data.IReliableStateManager.GetOrAddAsync(Of T)(Microsoft.ServiceFabric.Data.ITransaction, System.Uri, System.TimeSpan)
  name.vb: Microsoft.ServiceFabric.Data.IReliableStateManager.GetOrAddAsync(Of T)(ITransaction, Uri, TimeSpan)
- uid: Microsoft.ServiceFabric.Data.ReliableStateManager.Microsoft#ServiceFabric#Data#IReliableStateManager#CreateTransaction
  commentId: M:Microsoft.ServiceFabric.Data.ReliableStateManager.Microsoft#ServiceFabric#Data#IReliableStateManager#CreateTransaction
  id: Microsoft#ServiceFabric#Data#IReliableStateManager#CreateTransaction
  isEii: true
  parent: Microsoft.ServiceFabric.Data.ReliableStateManager
  langs:
  - csharp
  - vb
  name: IReliableStateManager.CreateTransaction()
  nameWithType: ReliableStateManager.IReliableStateManager.CreateTransaction()
  fullName: Microsoft.ServiceFabric.Data.ReliableStateManager.Microsoft.ServiceFabric.Data.IReliableStateManager.CreateTransaction()
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Data/ReliableStateManager.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: Microsoft.ServiceFabric.Data.IReliableStateManager.CreateTransaction
    path: src/prod/src/managed/Microsoft.ServiceFabric.Data/ReliableStateManager.cs
    startLine: 663
  assemblies:
  - Microsoft.ServiceFabric.Data
  namespace: Microsoft.ServiceFabric.Data
  summary: "\nCreate and start a new transaction that can be used to group operations to be performed atomically.\n"
  remarks: "\nOperations are added to the transaction by passing the <xref href=\"Microsoft.ServiceFabric.Data.ITransaction\" data-throw-if-not-resolved=\"false\"></xref> object in to reliable state methods.\n"
  example: []
  syntax:
    content: ITransaction IReliableStateManager.CreateTransaction()
    content.vb: Function Microsoft.ServiceFabric.Data.IReliableStateManager.CreateTransaction As ITransaction Implements IReliableStateManager.CreateTransaction
    return:
      type: Microsoft.ServiceFabric.Data.ITransaction
      description: A new transaction.
  overload: Microsoft.ServiceFabric.Data.ReliableStateManager.Microsoft#ServiceFabric#Data#IReliableStateManager#CreateTransaction*
  implements:
  - Microsoft.ServiceFabric.Data.IReliableStateManager.CreateTransaction
  nameWithType.vb: ReliableStateManager.Microsoft.ServiceFabric.Data.IReliableStateManager.CreateTransaction()
  name.vb: Microsoft.ServiceFabric.Data.IReliableStateManager.CreateTransaction()
- uid: Microsoft.ServiceFabric.Data.ReliableStateManager.Microsoft#ServiceFabric#Data#IReliableStateManager#TryAddStateSerializer``1(Microsoft.ServiceFabric.Data.IStateSerializer{``0})
  commentId: M:Microsoft.ServiceFabric.Data.ReliableStateManager.Microsoft#ServiceFabric#Data#IReliableStateManager#TryAddStateSerializer``1(Microsoft.ServiceFabric.Data.IStateSerializer{``0})
  id: Microsoft#ServiceFabric#Data#IReliableStateManager#TryAddStateSerializer``1(Microsoft.ServiceFabric.Data.IStateSerializer{``0})
  isEii: true
  parent: Microsoft.ServiceFabric.Data.ReliableStateManager
  langs:
  - csharp
  - vb
  name: IReliableStateManager.TryAddStateSerializer<T>(IStateSerializer<T>)
  nameWithType: ReliableStateManager.IReliableStateManager.TryAddStateSerializer<T>(IStateSerializer<T>)
  fullName: Microsoft.ServiceFabric.Data.ReliableStateManager.Microsoft.ServiceFabric.Data.IReliableStateManager.TryAddStateSerializer<T>(Microsoft.ServiceFabric.Data.IStateSerializer<T>)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Data/ReliableStateManager.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: Microsoft.ServiceFabric.Data.IReliableStateManager.TryAddStateSerializer
    path: src/prod/src/managed/Microsoft.ServiceFabric.Data/ReliableStateManager.cs
    startLine: 681
  assemblies:
  - Microsoft.ServiceFabric.Data
  namespace: Microsoft.ServiceFabric.Data
  summary: "\nAdds a state serializer.\nAdds it for all reliable collection instances.\n"
  remarks: "\nThis method can only be called in InitializeStateSerializers.\nInstance specific state serializers always take precedence.\n"
  example: []
  syntax:
    content: bool IReliableStateManager.TryAddStateSerializer<T>(IStateSerializer<T> stateSerializer)
    content.vb: Function Microsoft.ServiceFabric.Data.IReliableStateManager.TryAddStateSerializer(Of T)(stateSerializer As IStateSerializer(Of T)) As Boolean Implements IReliableStateManager.TryAddStateSerializer
    parameters:
    - id: stateSerializer
      type: Microsoft.ServiceFabric.Data.IStateSerializer{{T}}
      description: "\nThe state serializer to be added.\n"
    typeParameters:
    - id: T
      description: Type that will be serialized and de-serialized.
    return:
      type: System.Boolean
      description: "\nTrue if the serializer was added.\nFalse if a serailizer is already registered.\n"
  overload: Microsoft.ServiceFabric.Data.ReliableStateManager.Microsoft#ServiceFabric#Data#IReliableStateManager#TryAddStateSerializer*
  implements:
  - Microsoft.ServiceFabric.Data.IReliableStateManager.TryAddStateSerializer``1(Microsoft.ServiceFabric.Data.IStateSerializer{{T}})
  nameWithType.vb: ReliableStateManager.Microsoft.ServiceFabric.Data.IReliableStateManager.TryAddStateSerializer(Of T)(IStateSerializer(Of T))
  fullName.vb: Microsoft.ServiceFabric.Data.ReliableStateManager.Microsoft.ServiceFabric.Data.IReliableStateManager.TryAddStateSerializer(Of T)(Microsoft.ServiceFabric.Data.IStateSerializer(Of T))
  name.vb: Microsoft.ServiceFabric.Data.IReliableStateManager.TryAddStateSerializer(Of T)(IStateSerializer(Of T))
- uid: Microsoft.ServiceFabric.Data.ReliableStateManager.RestoreAsync(System.String)
  commentId: M:Microsoft.ServiceFabric.Data.ReliableStateManager.RestoreAsync(System.String)
  id: RestoreAsync(System.String)
  parent: Microsoft.ServiceFabric.Data.ReliableStateManager
  langs:
  - csharp
  - vb
  name: RestoreAsync(String)
  nameWithType: ReliableStateManager.RestoreAsync(String)
  fullName: Microsoft.ServiceFabric.Data.ReliableStateManager.RestoreAsync(System.String)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Data/ReliableStateManager.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: RestoreAsync
    path: src/prod/src/managed/Microsoft.ServiceFabric.Data/ReliableStateManager.cs
    startLine: 701
  assemblies:
  - Microsoft.ServiceFabric.Data
  namespace: Microsoft.ServiceFabric.Data
  summary: "\nRestore a backup taken by <xref href=\"Microsoft.ServiceFabric.Data.IStateProviderReplica.BackupAsync(System.Func%7bMicrosoft.ServiceFabric.Data.BackupInfo%2cSystem.Threading.CancellationToken%2cSystem.Threading.Tasks.Task%7bSystem.Boolean%7d%7d)\" data-throw-if-not-resolved=\"false\"></xref> or \n<xref href=\"Microsoft.ServiceFabric.Data.IStateProviderReplica.BackupAsync(Microsoft.ServiceFabric.Data.BackupOption%2cSystem.TimeSpan%2cSystem.Threading.CancellationToken%2cSystem.Func%7bMicrosoft.ServiceFabric.Data.BackupInfo%2cSystem.Threading.CancellationToken%2cSystem.Threading.Tasks.Task%7bSystem.Boolean%7d%7d)\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  remarks: "\nA safe backup will be performed, meaning the restore will only be completed if the data to restore is ahead of state of the current replica.\n"
  example: []
  syntax:
    content: public Task RestoreAsync(string backupFolderPath)
    content.vb: Public Function RestoreAsync(backupFolderPath As String) As Task
    parameters:
    - id: backupFolderPath
      type: System.String
      description: "\nThe directory where the replica is to be restored from.\nThis parameter cannot be null, empty or contain just whitespace. \nUNC paths may also be provided.\n"
    return:
      type: System.Threading.Tasks.Task
      description: Task that represents the asynchronous restore operation.
  overload: Microsoft.ServiceFabric.Data.ReliableStateManager.RestoreAsync*
  implements:
  - Microsoft.ServiceFabric.Data.IStateProviderReplica.RestoreAsync(System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceFabric.Data.ReliableStateManager.RestoreAsync(System.String,Microsoft.ServiceFabric.Data.RestorePolicy,System.Threading.CancellationToken)
  commentId: M:Microsoft.ServiceFabric.Data.ReliableStateManager.RestoreAsync(System.String,Microsoft.ServiceFabric.Data.RestorePolicy,System.Threading.CancellationToken)
  id: RestoreAsync(System.String,Microsoft.ServiceFabric.Data.RestorePolicy,System.Threading.CancellationToken)
  parent: Microsoft.ServiceFabric.Data.ReliableStateManager
  langs:
  - csharp
  - vb
  name: RestoreAsync(String, RestorePolicy, CancellationToken)
  nameWithType: ReliableStateManager.RestoreAsync(String, RestorePolicy, CancellationToken)
  fullName: Microsoft.ServiceFabric.Data.ReliableStateManager.RestoreAsync(System.String, Microsoft.ServiceFabric.Data.RestorePolicy, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Data/ReliableStateManager.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: RestoreAsync
    path: src/prod/src/managed/Microsoft.ServiceFabric.Data/ReliableStateManager.cs
    startLine: 715
  assemblies:
  - Microsoft.ServiceFabric.Data
  namespace: Microsoft.ServiceFabric.Data
  summary: "\nRestore a backup taken by <xref href=\"Microsoft.ServiceFabric.Data.IStateProviderReplica.BackupAsync(System.Func%7bMicrosoft.ServiceFabric.Data.BackupInfo%2cSystem.Threading.CancellationToken%2cSystem.Threading.Tasks.Task%7bSystem.Boolean%7d%7d)\" data-throw-if-not-resolved=\"false\"></xref> or \n<xref href=\"Microsoft.ServiceFabric.Data.IStateProviderReplica.BackupAsync(Microsoft.ServiceFabric.Data.BackupOption%2cSystem.TimeSpan%2cSystem.Threading.CancellationToken%2cSystem.Func%7bMicrosoft.ServiceFabric.Data.BackupInfo%2cSystem.Threading.CancellationToken%2cSystem.Threading.Tasks.Task%7bSystem.Boolean%7d%7d)\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public Task RestoreAsync(string backupFolderPath, RestorePolicy restorePolicy, CancellationToken cancellationToken)
    content.vb: Public Function RestoreAsync(backupFolderPath As String, restorePolicy As RestorePolicy, cancellationToken As CancellationToken) As Task
    parameters:
    - id: backupFolderPath
      type: System.String
      description: "\nThe directory where the replica is to be restored from.\nThis parameter cannot be null, empty or contain just whitespace. \nUNC paths may also be provided.\n"
    - id: restorePolicy
      type: Microsoft.ServiceFabric.Data.RestorePolicy
      description: The restore policy.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The token to monitor for cancellation requests.
    return:
      type: System.Threading.Tasks.Task
      description: Task that represents the asynchronous restore operation.
  overload: Microsoft.ServiceFabric.Data.ReliableStateManager.RestoreAsync*
  implements:
  - Microsoft.ServiceFabric.Data.IStateProviderReplica.RestoreAsync(System.String,Microsoft.ServiceFabric.Data.RestorePolicy,System.Threading.CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceFabric.Data.ReliableStateManager.BackupAsync(Microsoft.ServiceFabric.Data.BackupOption,System.TimeSpan,System.Threading.CancellationToken,System.Func{Microsoft.ServiceFabric.Data.BackupInfo,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}})
  commentId: M:Microsoft.ServiceFabric.Data.ReliableStateManager.BackupAsync(Microsoft.ServiceFabric.Data.BackupOption,System.TimeSpan,System.Threading.CancellationToken,System.Func{Microsoft.ServiceFabric.Data.BackupInfo,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}})
  id: BackupAsync(Microsoft.ServiceFabric.Data.BackupOption,System.TimeSpan,System.Threading.CancellationToken,System.Func{Microsoft.ServiceFabric.Data.BackupInfo,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}})
  parent: Microsoft.ServiceFabric.Data.ReliableStateManager
  langs:
  - csharp
  - vb
  name: BackupAsync(BackupOption, TimeSpan, CancellationToken, Func<BackupInfo, CancellationToken, Task<Boolean>>)
  nameWithType: ReliableStateManager.BackupAsync(BackupOption, TimeSpan, CancellationToken, Func<BackupInfo, CancellationToken, Task<Boolean>>)
  fullName: Microsoft.ServiceFabric.Data.ReliableStateManager.BackupAsync(Microsoft.ServiceFabric.Data.BackupOption, System.TimeSpan, System.Threading.CancellationToken, System.Func<Microsoft.ServiceFabric.Data.BackupInfo, System.Threading.CancellationToken, System.Threading.Tasks.Task<System.Boolean>>)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Data/ReliableStateManager.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: BackupAsync
    path: src/prod/src/managed/Microsoft.ServiceFabric.Data/ReliableStateManager.cs
    startLine: 733
  assemblies:
  - Microsoft.ServiceFabric.Data
  namespace: Microsoft.ServiceFabric.Data
  summary: "\nPerforms a backup of all reliable state managed by this <xref href=\"Microsoft.ServiceFabric.Data.IReliableStateManager\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  remarks: "\nBoolean returned by the backupCallback indicate whether the service was able to successfully move the backup folder to an external location.\nIf false is returned, BackupAsync throws InvalidOperationException with the relevant message indicating backupCallback returned false.\nAlso, backup will be marked as unsuccessful.\n"
  example: []
  syntax:
    content: public Task BackupAsync(BackupOption option, TimeSpan timeout, CancellationToken cancellationToken, Func<BackupInfo, CancellationToken, Task<bool>> backupCallback)
    content.vb: Public Function BackupAsync(option As BackupOption, timeout As TimeSpan, cancellationToken As CancellationToken, backupCallback As Func(Of BackupInfo, CancellationToken, Task(Of Boolean))) As Task
    parameters:
    - id: option
      type: Microsoft.ServiceFabric.Data.BackupOption
      description: The type of backup to perform.
    - id: timeout
      type: System.TimeSpan
      description: The timeout for this operation.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The token to monitor for cancellation requests.
    - id: backupCallback
      type: System.Func{Microsoft.ServiceFabric.Data.BackupInfo,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}}
      description: Callback to be called when the backup folder has been created locally and is ready to be moved out of the node.
    return:
      type: System.Threading.Tasks.Task
      description: Task that represents the asynchronous backup operation.
  overload: Microsoft.ServiceFabric.Data.ReliableStateManager.BackupAsync*
  implements:
  - Microsoft.ServiceFabric.Data.IStateProviderReplica.BackupAsync(Microsoft.ServiceFabric.Data.BackupOption,System.TimeSpan,System.Threading.CancellationToken,System.Func{Microsoft.ServiceFabric.Data.BackupInfo,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}})
  nameWithType.vb: ReliableStateManager.BackupAsync(BackupOption, TimeSpan, CancellationToken, Func(Of BackupInfo, CancellationToken, Task(Of Boolean)))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.ServiceFabric.Data.ReliableStateManager.BackupAsync(Microsoft.ServiceFabric.Data.BackupOption, System.TimeSpan, System.Threading.CancellationToken, System.Func(Of Microsoft.ServiceFabric.Data.BackupInfo, System.Threading.CancellationToken, System.Threading.Tasks.Task(Of System.Boolean)))
  name.vb: BackupAsync(BackupOption, TimeSpan, CancellationToken, Func(Of BackupInfo, CancellationToken, Task(Of Boolean)))
- uid: Microsoft.ServiceFabric.Data.ReliableStateManager.OnDataLossAsync
  commentId: P:Microsoft.ServiceFabric.Data.ReliableStateManager.OnDataLossAsync
  id: OnDataLossAsync
  parent: Microsoft.ServiceFabric.Data.ReliableStateManager
  langs:
  - csharp
  - vb
  name: OnDataLossAsync
  nameWithType: ReliableStateManager.OnDataLossAsync
  fullName: Microsoft.ServiceFabric.Data.ReliableStateManager.OnDataLossAsync
  type: Property
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Data/ReliableStateManager.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: OnDataLossAsync
    path: src/prod/src/managed/Microsoft.ServiceFabric.Data/ReliableStateManager.cs
    startLine: 758
  assemblies:
  - Microsoft.ServiceFabric.Data
  namespace: Microsoft.ServiceFabric.Data
  summary: "\nSet this property to receive notification when this <xref href=\"Microsoft.ServiceFabric.Data.IStateProviderReplica\" data-throw-if-not-resolved=\"false\"></xref> suspects data loss.\n"
  remarks: "\n<p>\nOnDataLossAsync function takes in CancellationToken and needs to return a Task that represents the asynchronous processing of the event.\nReturning true indicates that the reliable state manager's state has been restored.\nReturning false indicates that the reliable state manager's state has not been changed.\n</p>\n<p>\nThe passed delegate should monitor the given cancellation token for cancellation requests.\n</p>\n"
  example: []
  syntax:
    content: public Func<CancellationToken, Task<bool>> OnDataLossAsync { set; }
    content.vb: Public WriteOnly Property OnDataLossAsync As Func(Of CancellationToken, Task(Of Boolean))
    parameters: []
    return:
      type: System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}}
      description: "\nFunction called as part of suspected data loss processing.\n"
  overload: Microsoft.ServiceFabric.Data.ReliableStateManager.OnDataLossAsync*
  implements:
  - Microsoft.ServiceFabric.Data.IStateProviderReplica.OnDataLossAsync
  modifiers.csharp:
  - public
  - set
  modifiers.vb:
  - Public
  - WriteOnly
- uid: Microsoft.ServiceFabric.Data.ReliableStateManager.Microsoft#ServiceFabric#Data#IStateProviderReplica#Initialize(System.Fabric.StatefulServiceInitializationParameters)
  commentId: M:Microsoft.ServiceFabric.Data.ReliableStateManager.Microsoft#ServiceFabric#Data#IStateProviderReplica#Initialize(System.Fabric.StatefulServiceInitializationParameters)
  id: Microsoft#ServiceFabric#Data#IStateProviderReplica#Initialize(System.Fabric.StatefulServiceInitializationParameters)
  isEii: true
  parent: Microsoft.ServiceFabric.Data.ReliableStateManager
  langs:
  - csharp
  - vb
  name: IStateProviderReplica.Initialize(StatefulServiceInitializationParameters)
  nameWithType: ReliableStateManager.IStateProviderReplica.Initialize(StatefulServiceInitializationParameters)
  fullName: Microsoft.ServiceFabric.Data.ReliableStateManager.Microsoft.ServiceFabric.Data.IStateProviderReplica.Initialize(System.Fabric.StatefulServiceInitializationParameters)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Data/ReliableStateManager.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: Microsoft.ServiceFabric.Data.IStateProviderReplica.Initialize
    path: src/prod/src/managed/Microsoft.ServiceFabric.Data/ReliableStateManager.cs
    startLine: 770
  assemblies:
  - Microsoft.ServiceFabric.Data
  namespace: Microsoft.ServiceFabric.Data
  summary: "\nInitialize the state provider replica using the service initialization information.\n"
  remarks: "\nNo complex processing should be done during Initialize. Expensive or long-running initialization should be done in OpenAsync.\n"
  example: []
  syntax:
    content: void IStateProviderReplica.Initialize(StatefulServiceInitializationParameters initializationParameters)
    content.vb: Sub Microsoft.ServiceFabric.Data.IStateProviderReplica.Initialize(initializationParameters As StatefulServiceInitializationParameters) Implements IStateProviderReplica.Initialize
    parameters:
    - id: initializationParameters
      type: System.Fabric.StatefulServiceInitializationParameters
      description: Service initialization information such as service name, partition id, replica id, and code package information.
  overload: Microsoft.ServiceFabric.Data.ReliableStateManager.Microsoft#ServiceFabric#Data#IStateProviderReplica#Initialize*
  implements:
  - Microsoft.ServiceFabric.Data.IStateProviderReplica.Initialize(System.Fabric.StatefulServiceInitializationParameters)
  nameWithType.vb: ReliableStateManager.Microsoft.ServiceFabric.Data.IStateProviderReplica.Initialize(StatefulServiceInitializationParameters)
  name.vb: Microsoft.ServiceFabric.Data.IStateProviderReplica.Initialize(StatefulServiceInitializationParameters)
- uid: Microsoft.ServiceFabric.Data.ReliableStateManager.Microsoft#ServiceFabric#Data#IStateProviderReplica#OpenAsync(System.Fabric.ReplicaOpenMode,System.Fabric.IStatefulServicePartition,System.Threading.CancellationToken)
  commentId: M:Microsoft.ServiceFabric.Data.ReliableStateManager.Microsoft#ServiceFabric#Data#IStateProviderReplica#OpenAsync(System.Fabric.ReplicaOpenMode,System.Fabric.IStatefulServicePartition,System.Threading.CancellationToken)
  id: Microsoft#ServiceFabric#Data#IStateProviderReplica#OpenAsync(System.Fabric.ReplicaOpenMode,System.Fabric.IStatefulServicePartition,System.Threading.CancellationToken)
  isEii: true
  parent: Microsoft.ServiceFabric.Data.ReliableStateManager
  langs:
  - csharp
  - vb
  name: IStateProviderReplica.OpenAsync(ReplicaOpenMode, IStatefulServicePartition, CancellationToken)
  nameWithType: ReliableStateManager.IStateProviderReplica.OpenAsync(ReplicaOpenMode, IStatefulServicePartition, CancellationToken)
  fullName: Microsoft.ServiceFabric.Data.ReliableStateManager.Microsoft.ServiceFabric.Data.IStateProviderReplica.OpenAsync(System.Fabric.ReplicaOpenMode, System.Fabric.IStatefulServicePartition, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Data/ReliableStateManager.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: Microsoft.ServiceFabric.Data.IStateProviderReplica.OpenAsync
    path: src/prod/src/managed/Microsoft.ServiceFabric.Data/ReliableStateManager.cs
    startLine: 788
  assemblies:
  - Microsoft.ServiceFabric.Data
  namespace: Microsoft.ServiceFabric.Data
  summary: "\nOpen the state provider replica for use.\n"
  remarks: "\nExtended state provider initialization tasks can be started at this time.\n"
  example: []
  syntax:
    content: Task<IReplicator> IStateProviderReplica.OpenAsync(ReplicaOpenMode openMode, IStatefulServicePartition partition, CancellationToken cancellationToken)
    content.vb: Function Microsoft.ServiceFabric.Data.IStateProviderReplica.OpenAsync(openMode As ReplicaOpenMode, partition As IStatefulServicePartition, cancellationToken As CancellationToken) As Task(Of IReplicator) Implements IStateProviderReplica.OpenAsync
    parameters:
    - id: openMode
      type: System.Fabric.ReplicaOpenMode
      description: Indicates whether this is a new or existing replica.
    - id: partition
      type: System.Fabric.IStatefulServicePartition
      description: The partition this replica belongs to.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The token to monitor for cancellation requests.
    return:
      type: System.Threading.Tasks.Task{System.Fabric.IReplicator}
      description: "\nTask that represents the asynchronous open operation. The result contains the replicator\nresponsible for replicating state between other state provider replicas in the partition.\n"
  overload: Microsoft.ServiceFabric.Data.ReliableStateManager.Microsoft#ServiceFabric#Data#IStateProviderReplica#OpenAsync*
  implements:
  - Microsoft.ServiceFabric.Data.IStateProviderReplica.OpenAsync(System.Fabric.ReplicaOpenMode,System.Fabric.IStatefulServicePartition,System.Threading.CancellationToken)
  nameWithType.vb: ReliableStateManager.Microsoft.ServiceFabric.Data.IStateProviderReplica.OpenAsync(ReplicaOpenMode, IStatefulServicePartition, CancellationToken)
  name.vb: Microsoft.ServiceFabric.Data.IStateProviderReplica.OpenAsync(ReplicaOpenMode, IStatefulServicePartition, CancellationToken)
- uid: Microsoft.ServiceFabric.Data.ReliableStateManager.Microsoft#ServiceFabric#Data#IStateProviderReplica#ChangeRoleAsync(System.Fabric.ReplicaRole,System.Threading.CancellationToken)
  commentId: M:Microsoft.ServiceFabric.Data.ReliableStateManager.Microsoft#ServiceFabric#Data#IStateProviderReplica#ChangeRoleAsync(System.Fabric.ReplicaRole,System.Threading.CancellationToken)
  id: Microsoft#ServiceFabric#Data#IStateProviderReplica#ChangeRoleAsync(System.Fabric.ReplicaRole,System.Threading.CancellationToken)
  isEii: true
  parent: Microsoft.ServiceFabric.Data.ReliableStateManager
  langs:
  - csharp
  - vb
  name: IStateProviderReplica.ChangeRoleAsync(ReplicaRole, CancellationToken)
  nameWithType: ReliableStateManager.IStateProviderReplica.ChangeRoleAsync(ReplicaRole, CancellationToken)
  fullName: Microsoft.ServiceFabric.Data.ReliableStateManager.Microsoft.ServiceFabric.Data.IStateProviderReplica.ChangeRoleAsync(System.Fabric.ReplicaRole, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Data/ReliableStateManager.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: Microsoft.ServiceFabric.Data.IStateProviderReplica.ChangeRoleAsync
    path: src/prod/src/managed/Microsoft.ServiceFabric.Data/ReliableStateManager.cs
    startLine: 799
  assemblies:
  - Microsoft.ServiceFabric.Data
  namespace: Microsoft.ServiceFabric.Data
  summary: "\nNotify the state provider replica that its role is changing, for example to Primary or Secondary.\n"
  example: []
  syntax:
    content: Task IStateProviderReplica.ChangeRoleAsync(ReplicaRole newRole, CancellationToken cancellationToken)
    content.vb: Function Microsoft.ServiceFabric.Data.IStateProviderReplica.ChangeRoleAsync(newRole As ReplicaRole, cancellationToken As CancellationToken) As Task Implements IStateProviderReplica.ChangeRoleAsync
    parameters:
    - id: newRole
      type: System.Fabric.ReplicaRole
      description: The new replica role, such as primary or secondary.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The token to monitor for cancellation requests.
    return:
      type: System.Threading.Tasks.Task
      description: Task that represents the asynchronous change role operation.
  overload: Microsoft.ServiceFabric.Data.ReliableStateManager.Microsoft#ServiceFabric#Data#IStateProviderReplica#ChangeRoleAsync*
  implements:
  - Microsoft.ServiceFabric.Data.IStateProviderReplica.ChangeRoleAsync(System.Fabric.ReplicaRole,System.Threading.CancellationToken)
  nameWithType.vb: ReliableStateManager.Microsoft.ServiceFabric.Data.IStateProviderReplica.ChangeRoleAsync(ReplicaRole, CancellationToken)
  name.vb: Microsoft.ServiceFabric.Data.IStateProviderReplica.ChangeRoleAsync(ReplicaRole, CancellationToken)
- uid: Microsoft.ServiceFabric.Data.ReliableStateManager.Microsoft#ServiceFabric#Data#IStateProviderReplica#CloseAsync(System.Threading.CancellationToken)
  commentId: M:Microsoft.ServiceFabric.Data.ReliableStateManager.Microsoft#ServiceFabric#Data#IStateProviderReplica#CloseAsync(System.Threading.CancellationToken)
  id: Microsoft#ServiceFabric#Data#IStateProviderReplica#CloseAsync(System.Threading.CancellationToken)
  isEii: true
  parent: Microsoft.ServiceFabric.Data.ReliableStateManager
  langs:
  - csharp
  - vb
  name: IStateProviderReplica.CloseAsync(CancellationToken)
  nameWithType: ReliableStateManager.IStateProviderReplica.CloseAsync(CancellationToken)
  fullName: Microsoft.ServiceFabric.Data.ReliableStateManager.Microsoft.ServiceFabric.Data.IStateProviderReplica.CloseAsync(System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Data/ReliableStateManager.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: Microsoft.ServiceFabric.Data.IStateProviderReplica.CloseAsync
    path: src/prod/src/managed/Microsoft.ServiceFabric.Data/ReliableStateManager.cs
    startLine: 813
  assemblies:
  - Microsoft.ServiceFabric.Data
  namespace: Microsoft.ServiceFabric.Data
  summary: "\nGracefully close the state provider replica.\n"
  remarks: "\nThis generally occurs when the replica's code is being upgrade, the replica is being moved\ndue to load balancing, or a transient fault is detected.\n"
  example: []
  syntax:
    content: Task IStateProviderReplica.CloseAsync(CancellationToken cancellationToken)
    content.vb: Function Microsoft.ServiceFabric.Data.IStateProviderReplica.CloseAsync(cancellationToken As CancellationToken) As Task Implements IStateProviderReplica.CloseAsync
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The token to monitor for cancellation requests.
    return:
      type: System.Threading.Tasks.Task
      description: Task that represents the asynchronous close operation.
  overload: Microsoft.ServiceFabric.Data.ReliableStateManager.Microsoft#ServiceFabric#Data#IStateProviderReplica#CloseAsync*
  implements:
  - Microsoft.ServiceFabric.Data.IStateProviderReplica.CloseAsync(System.Threading.CancellationToken)
  nameWithType.vb: ReliableStateManager.Microsoft.ServiceFabric.Data.IStateProviderReplica.CloseAsync(CancellationToken)
  name.vb: Microsoft.ServiceFabric.Data.IStateProviderReplica.CloseAsync(CancellationToken)
- uid: Microsoft.ServiceFabric.Data.ReliableStateManager.Microsoft#ServiceFabric#Data#IStateProviderReplica#Abort
  commentId: M:Microsoft.ServiceFabric.Data.ReliableStateManager.Microsoft#ServiceFabric#Data#IStateProviderReplica#Abort
  id: Microsoft#ServiceFabric#Data#IStateProviderReplica#Abort
  isEii: true
  parent: Microsoft.ServiceFabric.Data.ReliableStateManager
  langs:
  - csharp
  - vb
  name: IStateProviderReplica.Abort()
  nameWithType: ReliableStateManager.IStateProviderReplica.Abort()
  fullName: Microsoft.ServiceFabric.Data.ReliableStateManager.Microsoft.ServiceFabric.Data.IStateProviderReplica.Abort()
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Data/ReliableStateManager.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: Microsoft.ServiceFabric.Data.IStateProviderReplica.Abort
    path: src/prod/src/managed/Microsoft.ServiceFabric.Data/ReliableStateManager.cs
    startLine: 831
  assemblies:
  - Microsoft.ServiceFabric.Data
  namespace: Microsoft.ServiceFabric.Data
  summary: "\nForcefully abort the state provider replica.\n"
  remarks: "\nThis generally occurs when a permanent fault is detected on the node, or when\nService Fabric cannot reliably manage the replica's lifecycle due to internal failures.\n"
  example: []
  syntax:
    content: void IStateProviderReplica.Abort()
    content.vb: Sub Microsoft.ServiceFabric.Data.IStateProviderReplica.Abort Implements IStateProviderReplica.Abort
  overload: Microsoft.ServiceFabric.Data.ReliableStateManager.Microsoft#ServiceFabric#Data#IStateProviderReplica#Abort*
  implements:
  - Microsoft.ServiceFabric.Data.IStateProviderReplica.Abort
  nameWithType.vb: ReliableStateManager.Microsoft.ServiceFabric.Data.IStateProviderReplica.Abort()
  name.vb: Microsoft.ServiceFabric.Data.IStateProviderReplica.Abort()
references:
- uid: Microsoft.ServiceFabric.Data.IReliableState
  commentId: T:Microsoft.ServiceFabric.Data.IReliableState
  parent: Microsoft.ServiceFabric.Data
  isExternal: false
  name: IReliableState
  nameWithType: IReliableState
  fullName: Microsoft.ServiceFabric.Data.IReliableState
- uid: Microsoft.ServiceFabric.Data
  commentId: N:Microsoft.ServiceFabric.Data
  isExternal: false
  name: Microsoft.ServiceFabric.Data
  nameWithType: Microsoft.ServiceFabric.Data
  fullName: Microsoft.ServiceFabric.Data
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Microsoft.ServiceFabric.Data.IReliableStateManagerReplica
  commentId: T:Microsoft.ServiceFabric.Data.IReliableStateManagerReplica
  parent: Microsoft.ServiceFabric.Data
  isExternal: false
  name: IReliableStateManagerReplica
  nameWithType: IReliableStateManagerReplica
  fullName: Microsoft.ServiceFabric.Data.IReliableStateManagerReplica
- uid: Microsoft.ServiceFabric.Data.IStateProviderReplica
  commentId: T:Microsoft.ServiceFabric.Data.IStateProviderReplica
  parent: Microsoft.ServiceFabric.Data
  isExternal: false
  name: IStateProviderReplica
  nameWithType: IStateProviderReplica
  fullName: Microsoft.ServiceFabric.Data.IStateProviderReplica
- uid: Microsoft.ServiceFabric.Data.IReliableStateManager
  commentId: T:Microsoft.ServiceFabric.Data.IReliableStateManager
  parent: Microsoft.ServiceFabric.Data
  isExternal: false
  name: IReliableStateManager
  nameWithType: IReliableStateManager
  fullName: Microsoft.ServiceFabric.Data.IReliableStateManager
- uid: Microsoft.ServiceFabric.Data.IAsyncEnumerable{Microsoft.ServiceFabric.Data.IReliableState}
  commentId: T:Microsoft.ServiceFabric.Data.IAsyncEnumerable{Microsoft.ServiceFabric.Data.IReliableState}
  parent: Microsoft.ServiceFabric.Data
  definition: Microsoft.ServiceFabric.Data.IAsyncEnumerable`1
  name: IAsyncEnumerable<IReliableState>
  nameWithType: IAsyncEnumerable<IReliableState>
  fullName: Microsoft.ServiceFabric.Data.IAsyncEnumerable<Microsoft.ServiceFabric.Data.IReliableState>
  nameWithType.vb: IAsyncEnumerable(Of IReliableState)
  fullname.vb: Microsoft.ServiceFabric.Data.IAsyncEnumerable(Of Microsoft.ServiceFabric.Data.IReliableState)
  name.vb: IAsyncEnumerable(Of IReliableState)
  spec.csharp:
  - uid: Microsoft.ServiceFabric.Data.IAsyncEnumerable`1
    name: IAsyncEnumerable
    nameWithType: IAsyncEnumerable
    fullName: Microsoft.ServiceFabric.Data.IAsyncEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.ServiceFabric.Data.IReliableState
    name: IReliableState
    nameWithType: IReliableState
    fullName: Microsoft.ServiceFabric.Data.IReliableState
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.ServiceFabric.Data.IAsyncEnumerable`1
    name: IAsyncEnumerable
    nameWithType: IAsyncEnumerable
    fullName: Microsoft.ServiceFabric.Data.IAsyncEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.ServiceFabric.Data.IReliableState
    name: IReliableState
    nameWithType: IReliableState
    fullName: Microsoft.ServiceFabric.Data.IReliableState
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceFabric.Data.ReliableStateManager.System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
  commentId: M:System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  parent: System.Fabric.Messaging.Stream.ByteArraySerializer
  definition: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  name: Serialize<ReliableStateManager>()
  nameWithType: ByteArraySerializer.Serialize<ReliableStateManager>()
  fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<Microsoft.ServiceFabric.Data.ReliableStateManager>()
  nameWithType.vb: ByteArraySerializer.Serialize(Of ReliableStateManager)()
  fullname.vb: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of Microsoft.ServiceFabric.Data.ReliableStateManager)()
  name.vb: Serialize(Of ReliableStateManager)()
  spec.csharp:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
    name: Serialize<ReliableStateManager>
    nameWithType: ByteArraySerializer.Serialize<ReliableStateManager>
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<Microsoft.ServiceFabric.Data.ReliableStateManager>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
    name: Serialize(Of ReliableStateManager)
    nameWithType: ByteArraySerializer.Serialize(Of ReliableStateManager)
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of Microsoft.ServiceFabric.Data.ReliableStateManager)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.ServiceFabric.Data.IAsyncEnumerable`1
  commentId: T:Microsoft.ServiceFabric.Data.IAsyncEnumerable`1
  isExternal: false
  name: IAsyncEnumerable<T>
  nameWithType: IAsyncEnumerable<T>
  fullName: Microsoft.ServiceFabric.Data.IAsyncEnumerable<T>
  nameWithType.vb: IAsyncEnumerable(Of T)
  fullname.vb: Microsoft.ServiceFabric.Data.IAsyncEnumerable(Of T)
  name.vb: IAsyncEnumerable(Of T)
  spec.csharp:
  - uid: Microsoft.ServiceFabric.Data.IAsyncEnumerable`1
    name: IAsyncEnumerable
    nameWithType: IAsyncEnumerable
    fullName: Microsoft.ServiceFabric.Data.IAsyncEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.ServiceFabric.Data.IAsyncEnumerable`1
    name: IAsyncEnumerable
    nameWithType: IAsyncEnumerable
    fullName: Microsoft.ServiceFabric.Data.IAsyncEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  commentId: M:System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  isExternal: false
  name: Serialize<T>(T)
  nameWithType: ByteArraySerializer.Serialize<T>(T)
  fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<T>(T)
  nameWithType.vb: ByteArraySerializer.Serialize(Of T)(T)
  fullname.vb: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of T)(T)
  name.vb: Serialize(Of T)(T)
  spec.csharp:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
    name: Serialize<T>
    nameWithType: ByteArraySerializer.Serialize<T>
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
    name: Serialize(Of T)
    nameWithType: ByteArraySerializer.Serialize(Of T)
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.Messaging.Stream.ByteArraySerializer
  commentId: T:System.Fabric.Messaging.Stream.ByteArraySerializer
  parent: System.Fabric.Messaging.Stream
  isExternal: false
  name: ByteArraySerializer
  nameWithType: ByteArraySerializer
  fullName: System.Fabric.Messaging.Stream.ByteArraySerializer
- uid: System.Fabric.Messaging.Stream
  commentId: N:System.Fabric.Messaging.Stream
  isExternal: false
  name: System.Fabric.Messaging.Stream
  nameWithType: System.Fabric.Messaging.Stream
  fullName: System.Fabric.Messaging.Stream
- uid: System.Fabric.StatefulServiceContext
  commentId: T:System.Fabric.StatefulServiceContext
  parent: System.Fabric
  isExternal: false
  name: StatefulServiceContext
  nameWithType: StatefulServiceContext
  fullName: System.Fabric.StatefulServiceContext
- uid: Microsoft.ServiceFabric.Data.ReliableStateManager.#ctor*
  commentId: Overload:Microsoft.ServiceFabric.Data.ReliableStateManager.#ctor
  isExternal: false
  name: ReliableStateManager
  nameWithType: ReliableStateManager.ReliableStateManager
  fullName: Microsoft.ServiceFabric.Data.ReliableStateManager.ReliableStateManager
- uid: Microsoft.ServiceFabric.Data.ReliableStateManagerConfiguration
  commentId: T:Microsoft.ServiceFabric.Data.ReliableStateManagerConfiguration
  parent: Microsoft.ServiceFabric.Data
  isExternal: false
  name: ReliableStateManagerConfiguration
  nameWithType: ReliableStateManagerConfiguration
  fullName: Microsoft.ServiceFabric.Data.ReliableStateManagerConfiguration
- uid: System.Fabric
  commentId: N:System.Fabric
  isExternal: false
  name: System.Fabric
  nameWithType: System.Fabric
  fullName: System.Fabric
- uid: Microsoft.ServiceFabric.Data.IReliableStateManager.TransactionChanged
  commentId: E:Microsoft.ServiceFabric.Data.IReliableStateManager.TransactionChanged
  parent: Microsoft.ServiceFabric.Data.IReliableStateManager
  isExternal: false
  name: TransactionChanged
  nameWithType: IReliableStateManager.TransactionChanged
  fullName: Microsoft.ServiceFabric.Data.IReliableStateManager.TransactionChanged
- uid: System.Fabric.FabricObjectClosedException
  commentId: T:System.Fabric.FabricObjectClosedException
  isExternal: false
  name: FabricObjectClosedException
  nameWithType: FabricObjectClosedException
  fullName: System.Fabric.FabricObjectClosedException
- uid: System.EventHandler{Microsoft.ServiceFabric.Data.Notifications.NotifyTransactionChangedEventArgs}
  commentId: T:System.EventHandler{Microsoft.ServiceFabric.Data.Notifications.NotifyTransactionChangedEventArgs}
  parent: System
  definition: System.EventHandler`1
  name: EventHandler<NotifyTransactionChangedEventArgs>
  nameWithType: EventHandler<NotifyTransactionChangedEventArgs>
  fullName: System.EventHandler<Microsoft.ServiceFabric.Data.Notifications.NotifyTransactionChangedEventArgs>
  nameWithType.vb: EventHandler(Of NotifyTransactionChangedEventArgs)
  fullname.vb: System.EventHandler(Of Microsoft.ServiceFabric.Data.Notifications.NotifyTransactionChangedEventArgs)
  name.vb: EventHandler(Of NotifyTransactionChangedEventArgs)
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.ServiceFabric.Data.Notifications.NotifyTransactionChangedEventArgs
    name: NotifyTransactionChangedEventArgs
    nameWithType: NotifyTransactionChangedEventArgs
    fullName: Microsoft.ServiceFabric.Data.Notifications.NotifyTransactionChangedEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.ServiceFabric.Data.Notifications.NotifyTransactionChangedEventArgs
    name: NotifyTransactionChangedEventArgs
    nameWithType: NotifyTransactionChangedEventArgs
    fullName: Microsoft.ServiceFabric.Data.Notifications.NotifyTransactionChangedEventArgs
  - name: )
    nameWithType: )
    fullName: )
- uid: System.EventHandler`1
  commentId: T:System.EventHandler`1
  isExternal: true
  name: EventHandler<TEventArgs>
  nameWithType: EventHandler<TEventArgs>
  fullName: System.EventHandler<TEventArgs>
  nameWithType.vb: EventHandler(Of TEventArgs)
  fullname.vb: System.EventHandler(Of TEventArgs)
  name.vb: EventHandler(Of TEventArgs)
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEventArgs
    nameWithType: TEventArgs
    fullName: TEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEventArgs
    nameWithType: TEventArgs
    fullName: TEventArgs
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceFabric.Data.IReliableStateManager.StateManagerChanged
  commentId: E:Microsoft.ServiceFabric.Data.IReliableStateManager.StateManagerChanged
  parent: Microsoft.ServiceFabric.Data.IReliableStateManager
  isExternal: false
  name: StateManagerChanged
  nameWithType: IReliableStateManager.StateManagerChanged
  fullName: Microsoft.ServiceFabric.Data.IReliableStateManager.StateManagerChanged
- uid: System.EventHandler{Microsoft.ServiceFabric.Data.Notifications.NotifyStateManagerChangedEventArgs}
  commentId: T:System.EventHandler{Microsoft.ServiceFabric.Data.Notifications.NotifyStateManagerChangedEventArgs}
  parent: System
  definition: System.EventHandler`1
  name: EventHandler<NotifyStateManagerChangedEventArgs>
  nameWithType: EventHandler<NotifyStateManagerChangedEventArgs>
  fullName: System.EventHandler<Microsoft.ServiceFabric.Data.Notifications.NotifyStateManagerChangedEventArgs>
  nameWithType.vb: EventHandler(Of NotifyStateManagerChangedEventArgs)
  fullname.vb: System.EventHandler(Of Microsoft.ServiceFabric.Data.Notifications.NotifyStateManagerChangedEventArgs)
  name.vb: EventHandler(Of NotifyStateManagerChangedEventArgs)
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.ServiceFabric.Data.Notifications.NotifyStateManagerChangedEventArgs
    name: NotifyStateManagerChangedEventArgs
    nameWithType: NotifyStateManagerChangedEventArgs
    fullName: Microsoft.ServiceFabric.Data.Notifications.NotifyStateManagerChangedEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.ServiceFabric.Data.Notifications.NotifyStateManagerChangedEventArgs
    name: NotifyStateManagerChangedEventArgs
    nameWithType: NotifyStateManagerChangedEventArgs
    fullName: Microsoft.ServiceFabric.Data.Notifications.NotifyStateManagerChangedEventArgs
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceFabric.Data.IAsyncEnumerator`1
  commentId: T:Microsoft.ServiceFabric.Data.IAsyncEnumerator`1
  isExternal: false
  name: IAsyncEnumerator<T>
  nameWithType: IAsyncEnumerator<T>
  fullName: Microsoft.ServiceFabric.Data.IAsyncEnumerator<T>
  nameWithType.vb: IAsyncEnumerator(Of T)
  fullname.vb: Microsoft.ServiceFabric.Data.IAsyncEnumerator(Of T)
  name.vb: IAsyncEnumerator(Of T)
  spec.csharp:
  - uid: Microsoft.ServiceFabric.Data.IAsyncEnumerator`1
    name: IAsyncEnumerator
    nameWithType: IAsyncEnumerator
    fullName: Microsoft.ServiceFabric.Data.IAsyncEnumerator
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.ServiceFabric.Data.IAsyncEnumerator`1
    name: IAsyncEnumerator
    nameWithType: IAsyncEnumerator
    fullName: Microsoft.ServiceFabric.Data.IAsyncEnumerator
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceFabric.Data.ReliableStateManager.GetAsyncEnumerator*
  commentId: Overload:Microsoft.ServiceFabric.Data.ReliableStateManager.GetAsyncEnumerator
  isExternal: false
  name: GetAsyncEnumerator
  nameWithType: ReliableStateManager.GetAsyncEnumerator
  fullName: Microsoft.ServiceFabric.Data.ReliableStateManager.GetAsyncEnumerator
- uid: Microsoft.ServiceFabric.Data.IAsyncEnumerable{Microsoft.ServiceFabric.Data.IReliableState}.GetAsyncEnumerator
  commentId: M:Microsoft.ServiceFabric.Data.IAsyncEnumerable{Microsoft.ServiceFabric.Data.IReliableState}.GetAsyncEnumerator
  parent: Microsoft.ServiceFabric.Data.IAsyncEnumerable{Microsoft.ServiceFabric.Data.IReliableState}
  definition: Microsoft.ServiceFabric.Data.IAsyncEnumerable`1.GetAsyncEnumerator
  name: GetAsyncEnumerator()
  nameWithType: IAsyncEnumerable<IReliableState>.GetAsyncEnumerator()
  fullName: Microsoft.ServiceFabric.Data.IAsyncEnumerable<Microsoft.ServiceFabric.Data.IReliableState>.GetAsyncEnumerator()
  nameWithType.vb: IAsyncEnumerable(Of IReliableState).GetAsyncEnumerator()
  fullname.vb: Microsoft.ServiceFabric.Data.IAsyncEnumerable(Of Microsoft.ServiceFabric.Data.IReliableState).GetAsyncEnumerator()
  spec.csharp:
  - uid: Microsoft.ServiceFabric.Data.IAsyncEnumerable`1.GetAsyncEnumerator
    name: GetAsyncEnumerator
    nameWithType: IAsyncEnumerable<IReliableState>.GetAsyncEnumerator
    fullName: Microsoft.ServiceFabric.Data.IAsyncEnumerable<Microsoft.ServiceFabric.Data.IReliableState>.GetAsyncEnumerator
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ServiceFabric.Data.IAsyncEnumerable`1.GetAsyncEnumerator
    name: GetAsyncEnumerator
    nameWithType: IAsyncEnumerable(Of IReliableState).GetAsyncEnumerator
    fullName: Microsoft.ServiceFabric.Data.IAsyncEnumerable(Of Microsoft.ServiceFabric.Data.IReliableState).GetAsyncEnumerator
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceFabric.Data.IAsyncEnumerator{Microsoft.ServiceFabric.Data.IReliableState}
  commentId: T:Microsoft.ServiceFabric.Data.IAsyncEnumerator{Microsoft.ServiceFabric.Data.IReliableState}
  parent: Microsoft.ServiceFabric.Data
  definition: Microsoft.ServiceFabric.Data.IAsyncEnumerator`1
  name: IAsyncEnumerator<IReliableState>
  nameWithType: IAsyncEnumerator<IReliableState>
  fullName: Microsoft.ServiceFabric.Data.IAsyncEnumerator<Microsoft.ServiceFabric.Data.IReliableState>
  nameWithType.vb: IAsyncEnumerator(Of IReliableState)
  fullname.vb: Microsoft.ServiceFabric.Data.IAsyncEnumerator(Of Microsoft.ServiceFabric.Data.IReliableState)
  name.vb: IAsyncEnumerator(Of IReliableState)
  spec.csharp:
  - uid: Microsoft.ServiceFabric.Data.IAsyncEnumerator`1
    name: IAsyncEnumerator
    nameWithType: IAsyncEnumerator
    fullName: Microsoft.ServiceFabric.Data.IAsyncEnumerator
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.ServiceFabric.Data.IReliableState
    name: IReliableState
    nameWithType: IReliableState
    fullName: Microsoft.ServiceFabric.Data.IReliableState
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.ServiceFabric.Data.IAsyncEnumerator`1
    name: IAsyncEnumerator
    nameWithType: IAsyncEnumerator
    fullName: Microsoft.ServiceFabric.Data.IAsyncEnumerator
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.ServiceFabric.Data.IReliableState
    name: IReliableState
    nameWithType: IReliableState
    fullName: Microsoft.ServiceFabric.Data.IReliableState
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceFabric.Data.IAsyncEnumerable`1.GetAsyncEnumerator
  commentId: M:Microsoft.ServiceFabric.Data.IAsyncEnumerable`1.GetAsyncEnumerator
  isExternal: false
  name: GetAsyncEnumerator()
  nameWithType: IAsyncEnumerable<T>.GetAsyncEnumerator()
  fullName: Microsoft.ServiceFabric.Data.IAsyncEnumerable<T>.GetAsyncEnumerator()
  nameWithType.vb: IAsyncEnumerable(Of T).GetAsyncEnumerator()
  fullname.vb: Microsoft.ServiceFabric.Data.IAsyncEnumerable(Of T).GetAsyncEnumerator()
  spec.csharp:
  - uid: Microsoft.ServiceFabric.Data.IAsyncEnumerable`1.GetAsyncEnumerator
    name: GetAsyncEnumerator
    nameWithType: IAsyncEnumerable<T>.GetAsyncEnumerator
    fullName: Microsoft.ServiceFabric.Data.IAsyncEnumerable<T>.GetAsyncEnumerator
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ServiceFabric.Data.IAsyncEnumerable`1.GetAsyncEnumerator
    name: GetAsyncEnumerator
    nameWithType: IAsyncEnumerable(Of T).GetAsyncEnumerator
    fullName: Microsoft.ServiceFabric.Data.IAsyncEnumerable(Of T).GetAsyncEnumerator
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceFabric.Data.ReliableStateManager.BackupAsync*
  commentId: Overload:Microsoft.ServiceFabric.Data.ReliableStateManager.BackupAsync
  isExternal: false
  name: BackupAsync
  nameWithType: ReliableStateManager.BackupAsync
  fullName: Microsoft.ServiceFabric.Data.ReliableStateManager.BackupAsync
- uid: Microsoft.ServiceFabric.Data.IStateProviderReplica.BackupAsync(System.Func{Microsoft.ServiceFabric.Data.BackupInfo,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}})
  commentId: M:Microsoft.ServiceFabric.Data.IStateProviderReplica.BackupAsync(System.Func{Microsoft.ServiceFabric.Data.BackupInfo,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}})
  parent: Microsoft.ServiceFabric.Data.IStateProviderReplica
  isExternal: true
  name: BackupAsync(Func<BackupInfo, CancellationToken, Task<Boolean>>)
  nameWithType: IStateProviderReplica.BackupAsync(Func<BackupInfo, CancellationToken, Task<Boolean>>)
  fullName: Microsoft.ServiceFabric.Data.IStateProviderReplica.BackupAsync(System.Func<Microsoft.ServiceFabric.Data.BackupInfo, System.Threading.CancellationToken, System.Threading.Tasks.Task<System.Boolean>>)
  nameWithType.vb: IStateProviderReplica.BackupAsync(Func(Of BackupInfo, CancellationToken, Task(Of Boolean)))
  fullname.vb: Microsoft.ServiceFabric.Data.IStateProviderReplica.BackupAsync(System.Func(Of Microsoft.ServiceFabric.Data.BackupInfo, System.Threading.CancellationToken, System.Threading.Tasks.Task(Of System.Boolean)))
  name.vb: BackupAsync(Func(Of BackupInfo, CancellationToken, Task(Of Boolean)))
  spec.csharp:
  - uid: Microsoft.ServiceFabric.Data.IStateProviderReplica.BackupAsync(System.Func{Microsoft.ServiceFabric.Data.BackupInfo,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}})
    name: BackupAsync
    nameWithType: IStateProviderReplica.BackupAsync
    fullName: Microsoft.ServiceFabric.Data.IStateProviderReplica.BackupAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.ServiceFabric.Data.BackupInfo
    name: BackupInfo
    nameWithType: BackupInfo
    fullName: Microsoft.ServiceFabric.Data.BackupInfo
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ServiceFabric.Data.IStateProviderReplica.BackupAsync(System.Func{Microsoft.ServiceFabric.Data.BackupInfo,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}})
    name: BackupAsync
    nameWithType: IStateProviderReplica.BackupAsync
    fullName: Microsoft.ServiceFabric.Data.IStateProviderReplica.BackupAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.ServiceFabric.Data.BackupInfo
    name: BackupInfo
    nameWithType: BackupInfo
    fullName: Microsoft.ServiceFabric.Data.BackupInfo
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{Microsoft.ServiceFabric.Data.BackupInfo,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}}
  commentId: T:System.Func{Microsoft.ServiceFabric.Data.BackupInfo,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}}
  parent: System
  definition: System.Func`3
  name: Func<BackupInfo, CancellationToken, Task<Boolean>>
  nameWithType: Func<BackupInfo, CancellationToken, Task<Boolean>>
  fullName: System.Func<Microsoft.ServiceFabric.Data.BackupInfo, System.Threading.CancellationToken, System.Threading.Tasks.Task<System.Boolean>>
  nameWithType.vb: Func(Of BackupInfo, CancellationToken, Task(Of Boolean))
  fullname.vb: System.Func(Of Microsoft.ServiceFabric.Data.BackupInfo, System.Threading.CancellationToken, System.Threading.Tasks.Task(Of System.Boolean))
  name.vb: Func(Of BackupInfo, CancellationToken, Task(Of Boolean))
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.ServiceFabric.Data.BackupInfo
    name: BackupInfo
    nameWithType: BackupInfo
    fullName: Microsoft.ServiceFabric.Data.BackupInfo
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.ServiceFabric.Data.BackupInfo
    name: BackupInfo
    nameWithType: BackupInfo
    fullName: Microsoft.ServiceFabric.Data.BackupInfo
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Func`3
  commentId: T:System.Func`3
  isExternal: true
  name: Func<T1, T2, TResult>
  nameWithType: Func<T1, T2, TResult>
  fullName: System.Func<T1, T2, TResult>
  nameWithType.vb: Func(Of T1, T2, TResult)
  fullname.vb: System.Func(Of T1, T2, TResult)
  name.vb: Func(Of T1, T2, TResult)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: Microsoft.ServiceFabric.Data.ReliableStateManager.Microsoft#ServiceFabric#Data#IReliableStateManager#TryGetAsync*
  commentId: Overload:Microsoft.ServiceFabric.Data.ReliableStateManager.Microsoft#ServiceFabric#Data#IReliableStateManager#TryGetAsync
  isExternal: false
  name: IReliableStateManager.TryGetAsync<T>
  nameWithType: ReliableStateManager.IReliableStateManager.TryGetAsync<T>
  fullName: Microsoft.ServiceFabric.Data.ReliableStateManager.Microsoft.ServiceFabric.Data.IReliableStateManager.TryGetAsync<T>
  nameWithType.vb: ReliableStateManager.Microsoft.ServiceFabric.Data.IReliableStateManager.TryGetAsync(Of T)
  fullname.vb: Microsoft.ServiceFabric.Data.ReliableStateManager.Microsoft.ServiceFabric.Data.IReliableStateManager.TryGetAsync(Of T)
  name.vb: Microsoft.ServiceFabric.Data.IReliableStateManager.TryGetAsync(Of T)
- uid: Microsoft.ServiceFabric.Data.IReliableStateManager.TryGetAsync``1(System.String)
  commentId: M:Microsoft.ServiceFabric.Data.IReliableStateManager.TryGetAsync``1(System.String)
  parent: Microsoft.ServiceFabric.Data.IReliableStateManager
  isExternal: true
  name: TryGetAsync<T>(String)
  nameWithType: IReliableStateManager.TryGetAsync<T>(String)
  fullName: Microsoft.ServiceFabric.Data.IReliableStateManager.TryGetAsync<T>(System.String)
  nameWithType.vb: IReliableStateManager.TryGetAsync(Of T)(String)
  fullname.vb: Microsoft.ServiceFabric.Data.IReliableStateManager.TryGetAsync(Of T)(System.String)
  name.vb: TryGetAsync(Of T)(String)
  spec.csharp:
  - uid: Microsoft.ServiceFabric.Data.IReliableStateManager.TryGetAsync``1(System.String)
    name: TryGetAsync<T>
    nameWithType: IReliableStateManager.TryGetAsync<T>
    fullName: Microsoft.ServiceFabric.Data.IReliableStateManager.TryGetAsync<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ServiceFabric.Data.IReliableStateManager.TryGetAsync``1(System.String)
    name: TryGetAsync(Of T)
    nameWithType: IReliableStateManager.TryGetAsync(Of T)
    fullName: Microsoft.ServiceFabric.Data.IReliableStateManager.TryGetAsync(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ArgumentNullException
  commentId: T:System.ArgumentNullException
- uid: System.ArgumentException
  commentId: T:System.ArgumentException
- uid: System.Fabric.FabricNotReadableException
  commentId: T:System.Fabric.FabricNotReadableException
  isExternal: false
  name: FabricNotReadableException
  nameWithType: FabricNotReadableException
  fullName: System.Fabric.FabricNotReadableException
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Threading.Tasks.Task{Microsoft.ServiceFabric.Data.ConditionalValue{{T}}}
  commentId: T:System.Threading.Tasks.Task{Microsoft.ServiceFabric.Data.ConditionalValue{``0}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<ConditionalValue<T>>
  nameWithType: Task<ConditionalValue<T>>
  fullName: System.Threading.Tasks.Task<Microsoft.ServiceFabric.Data.ConditionalValue<T>>
  nameWithType.vb: Task(Of ConditionalValue(Of T))
  fullname.vb: System.Threading.Tasks.Task(Of Microsoft.ServiceFabric.Data.ConditionalValue(Of T))
  name.vb: Task(Of ConditionalValue(Of T))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.ServiceFabric.Data.ConditionalValue`1
    name: ConditionalValue
    nameWithType: ConditionalValue
    fullName: Microsoft.ServiceFabric.Data.ConditionalValue
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.ServiceFabric.Data.ConditionalValue`1
    name: ConditionalValue
    nameWithType: ConditionalValue
    fullName: Microsoft.ServiceFabric.Data.ConditionalValue
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullname.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceFabric.Data.IReliableStateManager.TryGetAsync``1(System.Uri)
  commentId: M:Microsoft.ServiceFabric.Data.IReliableStateManager.TryGetAsync``1(System.Uri)
  parent: Microsoft.ServiceFabric.Data.IReliableStateManager
  isExternal: true
  name: TryGetAsync<T>(Uri)
  nameWithType: IReliableStateManager.TryGetAsync<T>(Uri)
  fullName: Microsoft.ServiceFabric.Data.IReliableStateManager.TryGetAsync<T>(System.Uri)
  nameWithType.vb: IReliableStateManager.TryGetAsync(Of T)(Uri)
  fullname.vb: Microsoft.ServiceFabric.Data.IReliableStateManager.TryGetAsync(Of T)(System.Uri)
  name.vb: TryGetAsync(Of T)(Uri)
  spec.csharp:
  - uid: Microsoft.ServiceFabric.Data.IReliableStateManager.TryGetAsync``1(System.Uri)
    name: TryGetAsync<T>
    nameWithType: IReliableStateManager.TryGetAsync<T>
    fullName: Microsoft.ServiceFabric.Data.IReliableStateManager.TryGetAsync<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Uri
    name: Uri
    nameWithType: Uri
    fullName: System.Uri
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ServiceFabric.Data.IReliableStateManager.TryGetAsync``1(System.Uri)
    name: TryGetAsync(Of T)
    nameWithType: IReliableStateManager.TryGetAsync(Of T)
    fullName: Microsoft.ServiceFabric.Data.IReliableStateManager.TryGetAsync(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Uri
    name: Uri
    nameWithType: Uri
    fullName: System.Uri
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Uri
  commentId: T:System.Uri
  parent: System
  isExternal: true
  name: Uri
  nameWithType: Uri
  fullName: System.Uri
- uid: Microsoft.ServiceFabric.Data.ReliableStateManager.Microsoft#ServiceFabric#Data#IReliableStateManager#RemoveAsync*
  commentId: Overload:Microsoft.ServiceFabric.Data.ReliableStateManager.Microsoft#ServiceFabric#Data#IReliableStateManager#RemoveAsync
  isExternal: false
  name: IReliableStateManager.RemoveAsync
  nameWithType: ReliableStateManager.IReliableStateManager.RemoveAsync
  fullName: Microsoft.ServiceFabric.Data.ReliableStateManager.Microsoft.ServiceFabric.Data.IReliableStateManager.RemoveAsync
  nameWithType.vb: ReliableStateManager.Microsoft.ServiceFabric.Data.IReliableStateManager.RemoveAsync
  name.vb: Microsoft.ServiceFabric.Data.IReliableStateManager.RemoveAsync
- uid: Microsoft.ServiceFabric.Data.IReliableStateManager.RemoveAsync(System.String)
  commentId: M:Microsoft.ServiceFabric.Data.IReliableStateManager.RemoveAsync(System.String)
  parent: Microsoft.ServiceFabric.Data.IReliableStateManager
  isExternal: true
  name: RemoveAsync(String)
  nameWithType: IReliableStateManager.RemoveAsync(String)
  fullName: Microsoft.ServiceFabric.Data.IReliableStateManager.RemoveAsync(System.String)
  spec.csharp:
  - uid: Microsoft.ServiceFabric.Data.IReliableStateManager.RemoveAsync(System.String)
    name: RemoveAsync
    nameWithType: IReliableStateManager.RemoveAsync
    fullName: Microsoft.ServiceFabric.Data.IReliableStateManager.RemoveAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ServiceFabric.Data.IReliableStateManager.RemoveAsync(System.String)
    name: RemoveAsync
    nameWithType: IReliableStateManager.RemoveAsync
    fullName: Microsoft.ServiceFabric.Data.IReliableStateManager.RemoveAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.TimeoutException
  commentId: T:System.TimeoutException
- uid: System.Fabric.FabricNotPrimaryException
  commentId: T:System.Fabric.FabricNotPrimaryException
  isExternal: false
  name: FabricNotPrimaryException
  nameWithType: FabricNotPrimaryException
  fullName: System.Fabric.FabricNotPrimaryException
- uid: Microsoft.ServiceFabric.Data.IReliableStateManager.RemoveAsync(System.String,System.TimeSpan)
  commentId: M:Microsoft.ServiceFabric.Data.IReliableStateManager.RemoveAsync(System.String,System.TimeSpan)
  parent: Microsoft.ServiceFabric.Data.IReliableStateManager
  isExternal: true
  name: RemoveAsync(String, TimeSpan)
  nameWithType: IReliableStateManager.RemoveAsync(String, TimeSpan)
  fullName: Microsoft.ServiceFabric.Data.IReliableStateManager.RemoveAsync(System.String, System.TimeSpan)
  spec.csharp:
  - uid: Microsoft.ServiceFabric.Data.IReliableStateManager.RemoveAsync(System.String,System.TimeSpan)
    name: RemoveAsync
    nameWithType: IReliableStateManager.RemoveAsync
    fullName: Microsoft.ServiceFabric.Data.IReliableStateManager.RemoveAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ServiceFabric.Data.IReliableStateManager.RemoveAsync(System.String,System.TimeSpan)
    name: RemoveAsync
    nameWithType: IReliableStateManager.RemoveAsync
    fullName: Microsoft.ServiceFabric.Data.IReliableStateManager.RemoveAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.TimeSpan
  commentId: T:System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: Microsoft.ServiceFabric.Data.IReliableStateManager.RemoveAsync(Microsoft.ServiceFabric.Data.ITransaction,System.String)
  commentId: M:Microsoft.ServiceFabric.Data.IReliableStateManager.RemoveAsync(Microsoft.ServiceFabric.Data.ITransaction,System.String)
  parent: Microsoft.ServiceFabric.Data.IReliableStateManager
  isExternal: true
  name: RemoveAsync(ITransaction, String)
  nameWithType: IReliableStateManager.RemoveAsync(ITransaction, String)
  fullName: Microsoft.ServiceFabric.Data.IReliableStateManager.RemoveAsync(Microsoft.ServiceFabric.Data.ITransaction, System.String)
  spec.csharp:
  - uid: Microsoft.ServiceFabric.Data.IReliableStateManager.RemoveAsync(Microsoft.ServiceFabric.Data.ITransaction,System.String)
    name: RemoveAsync
    nameWithType: IReliableStateManager.RemoveAsync
    fullName: Microsoft.ServiceFabric.Data.IReliableStateManager.RemoveAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.ServiceFabric.Data.ITransaction
    name: ITransaction
    nameWithType: ITransaction
    fullName: Microsoft.ServiceFabric.Data.ITransaction
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ServiceFabric.Data.IReliableStateManager.RemoveAsync(Microsoft.ServiceFabric.Data.ITransaction,System.String)
    name: RemoveAsync
    nameWithType: IReliableStateManager.RemoveAsync
    fullName: Microsoft.ServiceFabric.Data.IReliableStateManager.RemoveAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.ServiceFabric.Data.ITransaction
    name: ITransaction
    nameWithType: ITransaction
    fullName: Microsoft.ServiceFabric.Data.ITransaction
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.InvalidOperationException
  commentId: T:System.InvalidOperationException
  parent: System
  isExternal: true
  name: InvalidOperationException
  nameWithType: InvalidOperationException
  fullName: System.InvalidOperationException
- uid: Microsoft.ServiceFabric.Data.ITransaction
  commentId: T:Microsoft.ServiceFabric.Data.ITransaction
  parent: Microsoft.ServiceFabric.Data
  isExternal: false
  name: ITransaction
  nameWithType: ITransaction
  fullName: Microsoft.ServiceFabric.Data.ITransaction
- uid: Microsoft.ServiceFabric.Data.IReliableStateManager.RemoveAsync(Microsoft.ServiceFabric.Data.ITransaction,System.String,System.TimeSpan)
  commentId: M:Microsoft.ServiceFabric.Data.IReliableStateManager.RemoveAsync(Microsoft.ServiceFabric.Data.ITransaction,System.String,System.TimeSpan)
  parent: Microsoft.ServiceFabric.Data.IReliableStateManager
  isExternal: true
  name: RemoveAsync(ITransaction, String, TimeSpan)
  nameWithType: IReliableStateManager.RemoveAsync(ITransaction, String, TimeSpan)
  fullName: Microsoft.ServiceFabric.Data.IReliableStateManager.RemoveAsync(Microsoft.ServiceFabric.Data.ITransaction, System.String, System.TimeSpan)
  spec.csharp:
  - uid: Microsoft.ServiceFabric.Data.IReliableStateManager.RemoveAsync(Microsoft.ServiceFabric.Data.ITransaction,System.String,System.TimeSpan)
    name: RemoveAsync
    nameWithType: IReliableStateManager.RemoveAsync
    fullName: Microsoft.ServiceFabric.Data.IReliableStateManager.RemoveAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.ServiceFabric.Data.ITransaction
    name: ITransaction
    nameWithType: ITransaction
    fullName: Microsoft.ServiceFabric.Data.ITransaction
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ServiceFabric.Data.IReliableStateManager.RemoveAsync(Microsoft.ServiceFabric.Data.ITransaction,System.String,System.TimeSpan)
    name: RemoveAsync
    nameWithType: IReliableStateManager.RemoveAsync
    fullName: Microsoft.ServiceFabric.Data.IReliableStateManager.RemoveAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.ServiceFabric.Data.ITransaction
    name: ITransaction
    nameWithType: ITransaction
    fullName: Microsoft.ServiceFabric.Data.ITransaction
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceFabric.Data.IReliableStateManager.RemoveAsync(System.Uri)
  commentId: M:Microsoft.ServiceFabric.Data.IReliableStateManager.RemoveAsync(System.Uri)
  parent: Microsoft.ServiceFabric.Data.IReliableStateManager
  isExternal: true
  name: RemoveAsync(Uri)
  nameWithType: IReliableStateManager.RemoveAsync(Uri)
  fullName: Microsoft.ServiceFabric.Data.IReliableStateManager.RemoveAsync(System.Uri)
  spec.csharp:
  - uid: Microsoft.ServiceFabric.Data.IReliableStateManager.RemoveAsync(System.Uri)
    name: RemoveAsync
    nameWithType: IReliableStateManager.RemoveAsync
    fullName: Microsoft.ServiceFabric.Data.IReliableStateManager.RemoveAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Uri
    name: Uri
    nameWithType: Uri
    fullName: System.Uri
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ServiceFabric.Data.IReliableStateManager.RemoveAsync(System.Uri)
    name: RemoveAsync
    nameWithType: IReliableStateManager.RemoveAsync
    fullName: Microsoft.ServiceFabric.Data.IReliableStateManager.RemoveAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Uri
    name: Uri
    nameWithType: Uri
    fullName: System.Uri
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceFabric.Data.IReliableStateManager.RemoveAsync(System.Uri,System.TimeSpan)
  commentId: M:Microsoft.ServiceFabric.Data.IReliableStateManager.RemoveAsync(System.Uri,System.TimeSpan)
  parent: Microsoft.ServiceFabric.Data.IReliableStateManager
  isExternal: true
  name: RemoveAsync(Uri, TimeSpan)
  nameWithType: IReliableStateManager.RemoveAsync(Uri, TimeSpan)
  fullName: Microsoft.ServiceFabric.Data.IReliableStateManager.RemoveAsync(System.Uri, System.TimeSpan)
  spec.csharp:
  - uid: Microsoft.ServiceFabric.Data.IReliableStateManager.RemoveAsync(System.Uri,System.TimeSpan)
    name: RemoveAsync
    nameWithType: IReliableStateManager.RemoveAsync
    fullName: Microsoft.ServiceFabric.Data.IReliableStateManager.RemoveAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Uri
    name: Uri
    nameWithType: Uri
    fullName: System.Uri
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ServiceFabric.Data.IReliableStateManager.RemoveAsync(System.Uri,System.TimeSpan)
    name: RemoveAsync
    nameWithType: IReliableStateManager.RemoveAsync
    fullName: Microsoft.ServiceFabric.Data.IReliableStateManager.RemoveAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Uri
    name: Uri
    nameWithType: Uri
    fullName: System.Uri
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceFabric.Data.IReliableStateManager.RemoveAsync(Microsoft.ServiceFabric.Data.ITransaction,System.Uri)
  commentId: M:Microsoft.ServiceFabric.Data.IReliableStateManager.RemoveAsync(Microsoft.ServiceFabric.Data.ITransaction,System.Uri)
  parent: Microsoft.ServiceFabric.Data.IReliableStateManager
  isExternal: true
  name: RemoveAsync(ITransaction, Uri)
  nameWithType: IReliableStateManager.RemoveAsync(ITransaction, Uri)
  fullName: Microsoft.ServiceFabric.Data.IReliableStateManager.RemoveAsync(Microsoft.ServiceFabric.Data.ITransaction, System.Uri)
  spec.csharp:
  - uid: Microsoft.ServiceFabric.Data.IReliableStateManager.RemoveAsync(Microsoft.ServiceFabric.Data.ITransaction,System.Uri)
    name: RemoveAsync
    nameWithType: IReliableStateManager.RemoveAsync
    fullName: Microsoft.ServiceFabric.Data.IReliableStateManager.RemoveAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.ServiceFabric.Data.ITransaction
    name: ITransaction
    nameWithType: ITransaction
    fullName: Microsoft.ServiceFabric.Data.ITransaction
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Uri
    name: Uri
    nameWithType: Uri
    fullName: System.Uri
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ServiceFabric.Data.IReliableStateManager.RemoveAsync(Microsoft.ServiceFabric.Data.ITransaction,System.Uri)
    name: RemoveAsync
    nameWithType: IReliableStateManager.RemoveAsync
    fullName: Microsoft.ServiceFabric.Data.IReliableStateManager.RemoveAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.ServiceFabric.Data.ITransaction
    name: ITransaction
    nameWithType: ITransaction
    fullName: Microsoft.ServiceFabric.Data.ITransaction
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Uri
    name: Uri
    nameWithType: Uri
    fullName: System.Uri
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceFabric.Data.IReliableStateManager.RemoveAsync(Microsoft.ServiceFabric.Data.ITransaction,System.Uri,System.TimeSpan)
  commentId: M:Microsoft.ServiceFabric.Data.IReliableStateManager.RemoveAsync(Microsoft.ServiceFabric.Data.ITransaction,System.Uri,System.TimeSpan)
  parent: Microsoft.ServiceFabric.Data.IReliableStateManager
  isExternal: true
  name: RemoveAsync(ITransaction, Uri, TimeSpan)
  nameWithType: IReliableStateManager.RemoveAsync(ITransaction, Uri, TimeSpan)
  fullName: Microsoft.ServiceFabric.Data.IReliableStateManager.RemoveAsync(Microsoft.ServiceFabric.Data.ITransaction, System.Uri, System.TimeSpan)
  spec.csharp:
  - uid: Microsoft.ServiceFabric.Data.IReliableStateManager.RemoveAsync(Microsoft.ServiceFabric.Data.ITransaction,System.Uri,System.TimeSpan)
    name: RemoveAsync
    nameWithType: IReliableStateManager.RemoveAsync
    fullName: Microsoft.ServiceFabric.Data.IReliableStateManager.RemoveAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.ServiceFabric.Data.ITransaction
    name: ITransaction
    nameWithType: ITransaction
    fullName: Microsoft.ServiceFabric.Data.ITransaction
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Uri
    name: Uri
    nameWithType: Uri
    fullName: System.Uri
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ServiceFabric.Data.IReliableStateManager.RemoveAsync(Microsoft.ServiceFabric.Data.ITransaction,System.Uri,System.TimeSpan)
    name: RemoveAsync
    nameWithType: IReliableStateManager.RemoveAsync
    fullName: Microsoft.ServiceFabric.Data.IReliableStateManager.RemoveAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.ServiceFabric.Data.ITransaction
    name: ITransaction
    nameWithType: ITransaction
    fullName: Microsoft.ServiceFabric.Data.ITransaction
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Uri
    name: Uri
    nameWithType: Uri
    fullName: System.Uri
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceFabric.Data.ReliableStateManager.Microsoft#ServiceFabric#Data#IReliableStateManager#GetOrAddAsync*
  commentId: Overload:Microsoft.ServiceFabric.Data.ReliableStateManager.Microsoft#ServiceFabric#Data#IReliableStateManager#GetOrAddAsync
  isExternal: false
  name: IReliableStateManager.GetOrAddAsync<T>
  nameWithType: ReliableStateManager.IReliableStateManager.GetOrAddAsync<T>
  fullName: Microsoft.ServiceFabric.Data.ReliableStateManager.Microsoft.ServiceFabric.Data.IReliableStateManager.GetOrAddAsync<T>
  nameWithType.vb: ReliableStateManager.Microsoft.ServiceFabric.Data.IReliableStateManager.GetOrAddAsync(Of T)
  fullname.vb: Microsoft.ServiceFabric.Data.ReliableStateManager.Microsoft.ServiceFabric.Data.IReliableStateManager.GetOrAddAsync(Of T)
  name.vb: Microsoft.ServiceFabric.Data.IReliableStateManager.GetOrAddAsync(Of T)
- uid: Microsoft.ServiceFabric.Data.IReliableStateManager.GetOrAddAsync``1(System.String)
  commentId: M:Microsoft.ServiceFabric.Data.IReliableStateManager.GetOrAddAsync``1(System.String)
  parent: Microsoft.ServiceFabric.Data.IReliableStateManager
  isExternal: true
  name: GetOrAddAsync<T>(String)
  nameWithType: IReliableStateManager.GetOrAddAsync<T>(String)
  fullName: Microsoft.ServiceFabric.Data.IReliableStateManager.GetOrAddAsync<T>(System.String)
  nameWithType.vb: IReliableStateManager.GetOrAddAsync(Of T)(String)
  fullname.vb: Microsoft.ServiceFabric.Data.IReliableStateManager.GetOrAddAsync(Of T)(System.String)
  name.vb: GetOrAddAsync(Of T)(String)
  spec.csharp:
  - uid: Microsoft.ServiceFabric.Data.IReliableStateManager.GetOrAddAsync``1(System.String)
    name: GetOrAddAsync<T>
    nameWithType: IReliableStateManager.GetOrAddAsync<T>
    fullName: Microsoft.ServiceFabric.Data.IReliableStateManager.GetOrAddAsync<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ServiceFabric.Data.IReliableStateManager.GetOrAddAsync``1(System.String)
    name: GetOrAddAsync(Of T)
    nameWithType: IReliableStateManager.GetOrAddAsync(Of T)
    fullName: Microsoft.ServiceFabric.Data.IReliableStateManager.GetOrAddAsync(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{{T}}
  commentId: T:System.Threading.Tasks.Task{``0}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<T>
  nameWithType: Task<T>
  fullName: System.Threading.Tasks.Task<T>
  nameWithType.vb: Task(Of T)
  fullname.vb: System.Threading.Tasks.Task(Of T)
  name.vb: Task(Of T)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceFabric.Data.IReliableStateManager.GetOrAddAsync``1(System.String,System.TimeSpan)
  commentId: M:Microsoft.ServiceFabric.Data.IReliableStateManager.GetOrAddAsync``1(System.String,System.TimeSpan)
  parent: Microsoft.ServiceFabric.Data.IReliableStateManager
  isExternal: true
  name: GetOrAddAsync<T>(String, TimeSpan)
  nameWithType: IReliableStateManager.GetOrAddAsync<T>(String, TimeSpan)
  fullName: Microsoft.ServiceFabric.Data.IReliableStateManager.GetOrAddAsync<T>(System.String, System.TimeSpan)
  nameWithType.vb: IReliableStateManager.GetOrAddAsync(Of T)(String, TimeSpan)
  fullname.vb: Microsoft.ServiceFabric.Data.IReliableStateManager.GetOrAddAsync(Of T)(System.String, System.TimeSpan)
  name.vb: GetOrAddAsync(Of T)(String, TimeSpan)
  spec.csharp:
  - uid: Microsoft.ServiceFabric.Data.IReliableStateManager.GetOrAddAsync``1(System.String,System.TimeSpan)
    name: GetOrAddAsync<T>
    nameWithType: IReliableStateManager.GetOrAddAsync<T>
    fullName: Microsoft.ServiceFabric.Data.IReliableStateManager.GetOrAddAsync<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ServiceFabric.Data.IReliableStateManager.GetOrAddAsync``1(System.String,System.TimeSpan)
    name: GetOrAddAsync(Of T)
    nameWithType: IReliableStateManager.GetOrAddAsync(Of T)
    fullName: Microsoft.ServiceFabric.Data.IReliableStateManager.GetOrAddAsync(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceFabric.Data.IReliableStateManager.GetOrAddAsync``1(Microsoft.ServiceFabric.Data.ITransaction,System.String)
  commentId: M:Microsoft.ServiceFabric.Data.IReliableStateManager.GetOrAddAsync``1(Microsoft.ServiceFabric.Data.ITransaction,System.String)
  parent: Microsoft.ServiceFabric.Data.IReliableStateManager
  isExternal: true
  name: GetOrAddAsync<T>(ITransaction, String)
  nameWithType: IReliableStateManager.GetOrAddAsync<T>(ITransaction, String)
  fullName: Microsoft.ServiceFabric.Data.IReliableStateManager.GetOrAddAsync<T>(Microsoft.ServiceFabric.Data.ITransaction, System.String)
  nameWithType.vb: IReliableStateManager.GetOrAddAsync(Of T)(ITransaction, String)
  fullname.vb: Microsoft.ServiceFabric.Data.IReliableStateManager.GetOrAddAsync(Of T)(Microsoft.ServiceFabric.Data.ITransaction, System.String)
  name.vb: GetOrAddAsync(Of T)(ITransaction, String)
  spec.csharp:
  - uid: Microsoft.ServiceFabric.Data.IReliableStateManager.GetOrAddAsync``1(Microsoft.ServiceFabric.Data.ITransaction,System.String)
    name: GetOrAddAsync<T>
    nameWithType: IReliableStateManager.GetOrAddAsync<T>
    fullName: Microsoft.ServiceFabric.Data.IReliableStateManager.GetOrAddAsync<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.ServiceFabric.Data.ITransaction
    name: ITransaction
    nameWithType: ITransaction
    fullName: Microsoft.ServiceFabric.Data.ITransaction
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ServiceFabric.Data.IReliableStateManager.GetOrAddAsync``1(Microsoft.ServiceFabric.Data.ITransaction,System.String)
    name: GetOrAddAsync(Of T)
    nameWithType: IReliableStateManager.GetOrAddAsync(Of T)
    fullName: Microsoft.ServiceFabric.Data.IReliableStateManager.GetOrAddAsync(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.ServiceFabric.Data.ITransaction
    name: ITransaction
    nameWithType: ITransaction
    fullName: Microsoft.ServiceFabric.Data.ITransaction
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceFabric.Data.IReliableStateManager.GetOrAddAsync``1(Microsoft.ServiceFabric.Data.ITransaction,System.String,System.TimeSpan)
  commentId: M:Microsoft.ServiceFabric.Data.IReliableStateManager.GetOrAddAsync``1(Microsoft.ServiceFabric.Data.ITransaction,System.String,System.TimeSpan)
  parent: Microsoft.ServiceFabric.Data.IReliableStateManager
  isExternal: true
  name: GetOrAddAsync<T>(ITransaction, String, TimeSpan)
  nameWithType: IReliableStateManager.GetOrAddAsync<T>(ITransaction, String, TimeSpan)
  fullName: Microsoft.ServiceFabric.Data.IReliableStateManager.GetOrAddAsync<T>(Microsoft.ServiceFabric.Data.ITransaction, System.String, System.TimeSpan)
  nameWithType.vb: IReliableStateManager.GetOrAddAsync(Of T)(ITransaction, String, TimeSpan)
  fullname.vb: Microsoft.ServiceFabric.Data.IReliableStateManager.GetOrAddAsync(Of T)(Microsoft.ServiceFabric.Data.ITransaction, System.String, System.TimeSpan)
  name.vb: GetOrAddAsync(Of T)(ITransaction, String, TimeSpan)
  spec.csharp:
  - uid: Microsoft.ServiceFabric.Data.IReliableStateManager.GetOrAddAsync``1(Microsoft.ServiceFabric.Data.ITransaction,System.String,System.TimeSpan)
    name: GetOrAddAsync<T>
    nameWithType: IReliableStateManager.GetOrAddAsync<T>
    fullName: Microsoft.ServiceFabric.Data.IReliableStateManager.GetOrAddAsync<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.ServiceFabric.Data.ITransaction
    name: ITransaction
    nameWithType: ITransaction
    fullName: Microsoft.ServiceFabric.Data.ITransaction
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ServiceFabric.Data.IReliableStateManager.GetOrAddAsync``1(Microsoft.ServiceFabric.Data.ITransaction,System.String,System.TimeSpan)
    name: GetOrAddAsync(Of T)
    nameWithType: IReliableStateManager.GetOrAddAsync(Of T)
    fullName: Microsoft.ServiceFabric.Data.IReliableStateManager.GetOrAddAsync(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.ServiceFabric.Data.ITransaction
    name: ITransaction
    nameWithType: ITransaction
    fullName: Microsoft.ServiceFabric.Data.ITransaction
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceFabric.Data.IReliableStateManager.GetOrAddAsync``1(System.Uri)
  commentId: M:Microsoft.ServiceFabric.Data.IReliableStateManager.GetOrAddAsync``1(System.Uri)
  parent: Microsoft.ServiceFabric.Data.IReliableStateManager
  isExternal: true
  name: GetOrAddAsync<T>(Uri)
  nameWithType: IReliableStateManager.GetOrAddAsync<T>(Uri)
  fullName: Microsoft.ServiceFabric.Data.IReliableStateManager.GetOrAddAsync<T>(System.Uri)
  nameWithType.vb: IReliableStateManager.GetOrAddAsync(Of T)(Uri)
  fullname.vb: Microsoft.ServiceFabric.Data.IReliableStateManager.GetOrAddAsync(Of T)(System.Uri)
  name.vb: GetOrAddAsync(Of T)(Uri)
  spec.csharp:
  - uid: Microsoft.ServiceFabric.Data.IReliableStateManager.GetOrAddAsync``1(System.Uri)
    name: GetOrAddAsync<T>
    nameWithType: IReliableStateManager.GetOrAddAsync<T>
    fullName: Microsoft.ServiceFabric.Data.IReliableStateManager.GetOrAddAsync<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Uri
    name: Uri
    nameWithType: Uri
    fullName: System.Uri
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ServiceFabric.Data.IReliableStateManager.GetOrAddAsync``1(System.Uri)
    name: GetOrAddAsync(Of T)
    nameWithType: IReliableStateManager.GetOrAddAsync(Of T)
    fullName: Microsoft.ServiceFabric.Data.IReliableStateManager.GetOrAddAsync(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Uri
    name: Uri
    nameWithType: Uri
    fullName: System.Uri
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceFabric.Data.IReliableStateManager.GetOrAddAsync``1(System.Uri,System.TimeSpan)
  commentId: M:Microsoft.ServiceFabric.Data.IReliableStateManager.GetOrAddAsync``1(System.Uri,System.TimeSpan)
  parent: Microsoft.ServiceFabric.Data.IReliableStateManager
  isExternal: true
  name: GetOrAddAsync<T>(Uri, TimeSpan)
  nameWithType: IReliableStateManager.GetOrAddAsync<T>(Uri, TimeSpan)
  fullName: Microsoft.ServiceFabric.Data.IReliableStateManager.GetOrAddAsync<T>(System.Uri, System.TimeSpan)
  nameWithType.vb: IReliableStateManager.GetOrAddAsync(Of T)(Uri, TimeSpan)
  fullname.vb: Microsoft.ServiceFabric.Data.IReliableStateManager.GetOrAddAsync(Of T)(System.Uri, System.TimeSpan)
  name.vb: GetOrAddAsync(Of T)(Uri, TimeSpan)
  spec.csharp:
  - uid: Microsoft.ServiceFabric.Data.IReliableStateManager.GetOrAddAsync``1(System.Uri,System.TimeSpan)
    name: GetOrAddAsync<T>
    nameWithType: IReliableStateManager.GetOrAddAsync<T>
    fullName: Microsoft.ServiceFabric.Data.IReliableStateManager.GetOrAddAsync<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Uri
    name: Uri
    nameWithType: Uri
    fullName: System.Uri
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ServiceFabric.Data.IReliableStateManager.GetOrAddAsync``1(System.Uri,System.TimeSpan)
    name: GetOrAddAsync(Of T)
    nameWithType: IReliableStateManager.GetOrAddAsync(Of T)
    fullName: Microsoft.ServiceFabric.Data.IReliableStateManager.GetOrAddAsync(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Uri
    name: Uri
    nameWithType: Uri
    fullName: System.Uri
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceFabric.Data.IReliableStateManager.GetOrAddAsync``1(Microsoft.ServiceFabric.Data.ITransaction,System.Uri)
  commentId: M:Microsoft.ServiceFabric.Data.IReliableStateManager.GetOrAddAsync``1(Microsoft.ServiceFabric.Data.ITransaction,System.Uri)
  parent: Microsoft.ServiceFabric.Data.IReliableStateManager
  isExternal: true
  name: GetOrAddAsync<T>(ITransaction, Uri)
  nameWithType: IReliableStateManager.GetOrAddAsync<T>(ITransaction, Uri)
  fullName: Microsoft.ServiceFabric.Data.IReliableStateManager.GetOrAddAsync<T>(Microsoft.ServiceFabric.Data.ITransaction, System.Uri)
  nameWithType.vb: IReliableStateManager.GetOrAddAsync(Of T)(ITransaction, Uri)
  fullname.vb: Microsoft.ServiceFabric.Data.IReliableStateManager.GetOrAddAsync(Of T)(Microsoft.ServiceFabric.Data.ITransaction, System.Uri)
  name.vb: GetOrAddAsync(Of T)(ITransaction, Uri)
  spec.csharp:
  - uid: Microsoft.ServiceFabric.Data.IReliableStateManager.GetOrAddAsync``1(Microsoft.ServiceFabric.Data.ITransaction,System.Uri)
    name: GetOrAddAsync<T>
    nameWithType: IReliableStateManager.GetOrAddAsync<T>
    fullName: Microsoft.ServiceFabric.Data.IReliableStateManager.GetOrAddAsync<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.ServiceFabric.Data.ITransaction
    name: ITransaction
    nameWithType: ITransaction
    fullName: Microsoft.ServiceFabric.Data.ITransaction
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Uri
    name: Uri
    nameWithType: Uri
    fullName: System.Uri
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ServiceFabric.Data.IReliableStateManager.GetOrAddAsync``1(Microsoft.ServiceFabric.Data.ITransaction,System.Uri)
    name: GetOrAddAsync(Of T)
    nameWithType: IReliableStateManager.GetOrAddAsync(Of T)
    fullName: Microsoft.ServiceFabric.Data.IReliableStateManager.GetOrAddAsync(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.ServiceFabric.Data.ITransaction
    name: ITransaction
    nameWithType: ITransaction
    fullName: Microsoft.ServiceFabric.Data.ITransaction
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Uri
    name: Uri
    nameWithType: Uri
    fullName: System.Uri
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceFabric.Data.IReliableStateManager.GetOrAddAsync``1(Microsoft.ServiceFabric.Data.ITransaction,System.Uri,System.TimeSpan)
  commentId: M:Microsoft.ServiceFabric.Data.IReliableStateManager.GetOrAddAsync``1(Microsoft.ServiceFabric.Data.ITransaction,System.Uri,System.TimeSpan)
  parent: Microsoft.ServiceFabric.Data.IReliableStateManager
  isExternal: true
  name: GetOrAddAsync<T>(ITransaction, Uri, TimeSpan)
  nameWithType: IReliableStateManager.GetOrAddAsync<T>(ITransaction, Uri, TimeSpan)
  fullName: Microsoft.ServiceFabric.Data.IReliableStateManager.GetOrAddAsync<T>(Microsoft.ServiceFabric.Data.ITransaction, System.Uri, System.TimeSpan)
  nameWithType.vb: IReliableStateManager.GetOrAddAsync(Of T)(ITransaction, Uri, TimeSpan)
  fullname.vb: Microsoft.ServiceFabric.Data.IReliableStateManager.GetOrAddAsync(Of T)(Microsoft.ServiceFabric.Data.ITransaction, System.Uri, System.TimeSpan)
  name.vb: GetOrAddAsync(Of T)(ITransaction, Uri, TimeSpan)
  spec.csharp:
  - uid: Microsoft.ServiceFabric.Data.IReliableStateManager.GetOrAddAsync``1(Microsoft.ServiceFabric.Data.ITransaction,System.Uri,System.TimeSpan)
    name: GetOrAddAsync<T>
    nameWithType: IReliableStateManager.GetOrAddAsync<T>
    fullName: Microsoft.ServiceFabric.Data.IReliableStateManager.GetOrAddAsync<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.ServiceFabric.Data.ITransaction
    name: ITransaction
    nameWithType: ITransaction
    fullName: Microsoft.ServiceFabric.Data.ITransaction
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Uri
    name: Uri
    nameWithType: Uri
    fullName: System.Uri
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ServiceFabric.Data.IReliableStateManager.GetOrAddAsync``1(Microsoft.ServiceFabric.Data.ITransaction,System.Uri,System.TimeSpan)
    name: GetOrAddAsync(Of T)
    nameWithType: IReliableStateManager.GetOrAddAsync(Of T)
    fullName: Microsoft.ServiceFabric.Data.IReliableStateManager.GetOrAddAsync(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.ServiceFabric.Data.ITransaction
    name: ITransaction
    nameWithType: ITransaction
    fullName: Microsoft.ServiceFabric.Data.ITransaction
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Uri
    name: Uri
    nameWithType: Uri
    fullName: System.Uri
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceFabric.Data.ReliableStateManager.Microsoft#ServiceFabric#Data#IReliableStateManager#CreateTransaction*
  commentId: Overload:Microsoft.ServiceFabric.Data.ReliableStateManager.Microsoft#ServiceFabric#Data#IReliableStateManager#CreateTransaction
  isExternal: false
  name: IReliableStateManager.CreateTransaction
  nameWithType: ReliableStateManager.IReliableStateManager.CreateTransaction
  fullName: Microsoft.ServiceFabric.Data.ReliableStateManager.Microsoft.ServiceFabric.Data.IReliableStateManager.CreateTransaction
  nameWithType.vb: ReliableStateManager.Microsoft.ServiceFabric.Data.IReliableStateManager.CreateTransaction
  name.vb: Microsoft.ServiceFabric.Data.IReliableStateManager.CreateTransaction
- uid: Microsoft.ServiceFabric.Data.IReliableStateManager.CreateTransaction
  commentId: M:Microsoft.ServiceFabric.Data.IReliableStateManager.CreateTransaction
  parent: Microsoft.ServiceFabric.Data.IReliableStateManager
  isExternal: false
  name: CreateTransaction()
  nameWithType: IReliableStateManager.CreateTransaction()
  fullName: Microsoft.ServiceFabric.Data.IReliableStateManager.CreateTransaction()
  spec.csharp:
  - uid: Microsoft.ServiceFabric.Data.IReliableStateManager.CreateTransaction
    name: CreateTransaction
    nameWithType: IReliableStateManager.CreateTransaction
    fullName: Microsoft.ServiceFabric.Data.IReliableStateManager.CreateTransaction
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ServiceFabric.Data.IReliableStateManager.CreateTransaction
    name: CreateTransaction
    nameWithType: IReliableStateManager.CreateTransaction
    fullName: Microsoft.ServiceFabric.Data.IReliableStateManager.CreateTransaction
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceFabric.Data.ReliableStateManager.Microsoft#ServiceFabric#Data#IReliableStateManager#TryAddStateSerializer*
  commentId: Overload:Microsoft.ServiceFabric.Data.ReliableStateManager.Microsoft#ServiceFabric#Data#IReliableStateManager#TryAddStateSerializer
  isExternal: false
  name: IReliableStateManager.TryAddStateSerializer<T>
  nameWithType: ReliableStateManager.IReliableStateManager.TryAddStateSerializer<T>
  fullName: Microsoft.ServiceFabric.Data.ReliableStateManager.Microsoft.ServiceFabric.Data.IReliableStateManager.TryAddStateSerializer<T>
  nameWithType.vb: ReliableStateManager.Microsoft.ServiceFabric.Data.IReliableStateManager.TryAddStateSerializer(Of T)
  fullname.vb: Microsoft.ServiceFabric.Data.ReliableStateManager.Microsoft.ServiceFabric.Data.IReliableStateManager.TryAddStateSerializer(Of T)
  name.vb: Microsoft.ServiceFabric.Data.IReliableStateManager.TryAddStateSerializer(Of T)
- uid: Microsoft.ServiceFabric.Data.IReliableStateManager.TryAddStateSerializer``1(Microsoft.ServiceFabric.Data.IStateSerializer{{T}})
  commentId: M:Microsoft.ServiceFabric.Data.IReliableStateManager.TryAddStateSerializer``1(Microsoft.ServiceFabric.Data.IStateSerializer{``0})
  parent: Microsoft.ServiceFabric.Data.IReliableStateManager
  definition: Microsoft.ServiceFabric.Data.IReliableStateManager.TryAddStateSerializer``1(Microsoft.ServiceFabric.Data.IStateSerializer{``0})
  name: TryAddStateSerializer<T>(IStateSerializer<T>)
  nameWithType: IReliableStateManager.TryAddStateSerializer<T>(IStateSerializer<T>)
  fullName: Microsoft.ServiceFabric.Data.IReliableStateManager.TryAddStateSerializer<T>(Microsoft.ServiceFabric.Data.IStateSerializer<T>)
  nameWithType.vb: IReliableStateManager.TryAddStateSerializer(Of T)(IStateSerializer(Of T))
  fullname.vb: Microsoft.ServiceFabric.Data.IReliableStateManager.TryAddStateSerializer(Of T)(Microsoft.ServiceFabric.Data.IStateSerializer(Of T))
  name.vb: TryAddStateSerializer(Of T)(IStateSerializer(Of T))
  spec.csharp:
  - uid: Microsoft.ServiceFabric.Data.IReliableStateManager.TryAddStateSerializer``1(Microsoft.ServiceFabric.Data.IStateSerializer{``0})
    name: TryAddStateSerializer<T>
    nameWithType: IReliableStateManager.TryAddStateSerializer<T>
    fullName: Microsoft.ServiceFabric.Data.IReliableStateManager.TryAddStateSerializer<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.ServiceFabric.Data.IStateSerializer`1
    name: IStateSerializer
    nameWithType: IStateSerializer
    fullName: Microsoft.ServiceFabric.Data.IStateSerializer
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ServiceFabric.Data.IReliableStateManager.TryAddStateSerializer``1(Microsoft.ServiceFabric.Data.IStateSerializer{``0})
    name: TryAddStateSerializer(Of T)
    nameWithType: IReliableStateManager.TryAddStateSerializer(Of T)
    fullName: Microsoft.ServiceFabric.Data.IReliableStateManager.TryAddStateSerializer(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.ServiceFabric.Data.IStateSerializer`1
    name: IStateSerializer
    nameWithType: IStateSerializer
    fullName: Microsoft.ServiceFabric.Data.IStateSerializer
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceFabric.Data.IStateSerializer{{T}}
  commentId: T:Microsoft.ServiceFabric.Data.IStateSerializer{``0}
  parent: Microsoft.ServiceFabric.Data
  definition: Microsoft.ServiceFabric.Data.IStateSerializer`1
  name: IStateSerializer<T>
  nameWithType: IStateSerializer<T>
  fullName: Microsoft.ServiceFabric.Data.IStateSerializer<T>
  nameWithType.vb: IStateSerializer(Of T)
  fullname.vb: Microsoft.ServiceFabric.Data.IStateSerializer(Of T)
  name.vb: IStateSerializer(Of T)
  spec.csharp:
  - uid: Microsoft.ServiceFabric.Data.IStateSerializer`1
    name: IStateSerializer
    nameWithType: IStateSerializer
    fullName: Microsoft.ServiceFabric.Data.IStateSerializer
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.ServiceFabric.Data.IStateSerializer`1
    name: IStateSerializer
    nameWithType: IStateSerializer
    fullName: Microsoft.ServiceFabric.Data.IStateSerializer
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Microsoft.ServiceFabric.Data.IReliableStateManager.TryAddStateSerializer``1(Microsoft.ServiceFabric.Data.IStateSerializer{``0})
  commentId: M:Microsoft.ServiceFabric.Data.IReliableStateManager.TryAddStateSerializer``1(Microsoft.ServiceFabric.Data.IStateSerializer{``0})
  isExternal: false
  name: TryAddStateSerializer<T>(IStateSerializer<T>)
  nameWithType: IReliableStateManager.TryAddStateSerializer<T>(IStateSerializer<T>)
  fullName: Microsoft.ServiceFabric.Data.IReliableStateManager.TryAddStateSerializer<T>(Microsoft.ServiceFabric.Data.IStateSerializer<T>)
  nameWithType.vb: IReliableStateManager.TryAddStateSerializer(Of T)(IStateSerializer(Of T))
  fullname.vb: Microsoft.ServiceFabric.Data.IReliableStateManager.TryAddStateSerializer(Of T)(Microsoft.ServiceFabric.Data.IStateSerializer(Of T))
  name.vb: TryAddStateSerializer(Of T)(IStateSerializer(Of T))
  spec.csharp:
  - uid: Microsoft.ServiceFabric.Data.IReliableStateManager.TryAddStateSerializer``1(Microsoft.ServiceFabric.Data.IStateSerializer{``0})
    name: TryAddStateSerializer<T>
    nameWithType: IReliableStateManager.TryAddStateSerializer<T>
    fullName: Microsoft.ServiceFabric.Data.IReliableStateManager.TryAddStateSerializer<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.ServiceFabric.Data.IStateSerializer`1
    name: IStateSerializer
    nameWithType: IStateSerializer
    fullName: Microsoft.ServiceFabric.Data.IStateSerializer
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ServiceFabric.Data.IReliableStateManager.TryAddStateSerializer``1(Microsoft.ServiceFabric.Data.IStateSerializer{``0})
    name: TryAddStateSerializer(Of T)
    nameWithType: IReliableStateManager.TryAddStateSerializer(Of T)
    fullName: Microsoft.ServiceFabric.Data.IReliableStateManager.TryAddStateSerializer(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.ServiceFabric.Data.IStateSerializer`1
    name: IStateSerializer
    nameWithType: IStateSerializer
    fullName: Microsoft.ServiceFabric.Data.IStateSerializer
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceFabric.Data.IStateSerializer`1
  commentId: T:Microsoft.ServiceFabric.Data.IStateSerializer`1
  isExternal: false
  name: IStateSerializer<T>
  nameWithType: IStateSerializer<T>
  fullName: Microsoft.ServiceFabric.Data.IStateSerializer<T>
  nameWithType.vb: IStateSerializer(Of T)
  fullname.vb: Microsoft.ServiceFabric.Data.IStateSerializer(Of T)
  name.vb: IStateSerializer(Of T)
  spec.csharp:
  - uid: Microsoft.ServiceFabric.Data.IStateSerializer`1
    name: IStateSerializer
    nameWithType: IStateSerializer
    fullName: Microsoft.ServiceFabric.Data.IStateSerializer
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.ServiceFabric.Data.IStateSerializer`1
    name: IStateSerializer
    nameWithType: IStateSerializer
    fullName: Microsoft.ServiceFabric.Data.IStateSerializer
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceFabric.Data.IStateProviderReplica.BackupAsync(Microsoft.ServiceFabric.Data.BackupOption,System.TimeSpan,System.Threading.CancellationToken,System.Func{Microsoft.ServiceFabric.Data.BackupInfo,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}})
  commentId: M:Microsoft.ServiceFabric.Data.IStateProviderReplica.BackupAsync(Microsoft.ServiceFabric.Data.BackupOption,System.TimeSpan,System.Threading.CancellationToken,System.Func{Microsoft.ServiceFabric.Data.BackupInfo,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}})
  parent: Microsoft.ServiceFabric.Data.IStateProviderReplica
  isExternal: true
  name: BackupAsync(BackupOption, TimeSpan, CancellationToken, Func<BackupInfo, CancellationToken, Task<Boolean>>)
  nameWithType: IStateProviderReplica.BackupAsync(BackupOption, TimeSpan, CancellationToken, Func<BackupInfo, CancellationToken, Task<Boolean>>)
  fullName: Microsoft.ServiceFabric.Data.IStateProviderReplica.BackupAsync(Microsoft.ServiceFabric.Data.BackupOption, System.TimeSpan, System.Threading.CancellationToken, System.Func<Microsoft.ServiceFabric.Data.BackupInfo, System.Threading.CancellationToken, System.Threading.Tasks.Task<System.Boolean>>)
  nameWithType.vb: IStateProviderReplica.BackupAsync(BackupOption, TimeSpan, CancellationToken, Func(Of BackupInfo, CancellationToken, Task(Of Boolean)))
  fullname.vb: Microsoft.ServiceFabric.Data.IStateProviderReplica.BackupAsync(Microsoft.ServiceFabric.Data.BackupOption, System.TimeSpan, System.Threading.CancellationToken, System.Func(Of Microsoft.ServiceFabric.Data.BackupInfo, System.Threading.CancellationToken, System.Threading.Tasks.Task(Of System.Boolean)))
  name.vb: BackupAsync(BackupOption, TimeSpan, CancellationToken, Func(Of BackupInfo, CancellationToken, Task(Of Boolean)))
  spec.csharp:
  - uid: Microsoft.ServiceFabric.Data.IStateProviderReplica.BackupAsync(Microsoft.ServiceFabric.Data.BackupOption,System.TimeSpan,System.Threading.CancellationToken,System.Func{Microsoft.ServiceFabric.Data.BackupInfo,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}})
    name: BackupAsync
    nameWithType: IStateProviderReplica.BackupAsync
    fullName: Microsoft.ServiceFabric.Data.IStateProviderReplica.BackupAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.ServiceFabric.Data.BackupOption
    name: BackupOption
    nameWithType: BackupOption
    fullName: Microsoft.ServiceFabric.Data.BackupOption
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.ServiceFabric.Data.BackupInfo
    name: BackupInfo
    nameWithType: BackupInfo
    fullName: Microsoft.ServiceFabric.Data.BackupInfo
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ServiceFabric.Data.IStateProviderReplica.BackupAsync(Microsoft.ServiceFabric.Data.BackupOption,System.TimeSpan,System.Threading.CancellationToken,System.Func{Microsoft.ServiceFabric.Data.BackupInfo,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}})
    name: BackupAsync
    nameWithType: IStateProviderReplica.BackupAsync
    fullName: Microsoft.ServiceFabric.Data.IStateProviderReplica.BackupAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.ServiceFabric.Data.BackupOption
    name: BackupOption
    nameWithType: BackupOption
    fullName: Microsoft.ServiceFabric.Data.BackupOption
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.ServiceFabric.Data.BackupInfo
    name: BackupInfo
    nameWithType: BackupInfo
    fullName: Microsoft.ServiceFabric.Data.BackupInfo
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceFabric.Data.ReliableStateManager.RestoreAsync*
  commentId: Overload:Microsoft.ServiceFabric.Data.ReliableStateManager.RestoreAsync
  isExternal: false
  name: RestoreAsync
  nameWithType: ReliableStateManager.RestoreAsync
  fullName: Microsoft.ServiceFabric.Data.ReliableStateManager.RestoreAsync
- uid: Microsoft.ServiceFabric.Data.IStateProviderReplica.RestoreAsync(System.String)
  commentId: M:Microsoft.ServiceFabric.Data.IStateProviderReplica.RestoreAsync(System.String)
  parent: Microsoft.ServiceFabric.Data.IStateProviderReplica
  isExternal: true
  name: RestoreAsync(String)
  nameWithType: IStateProviderReplica.RestoreAsync(String)
  fullName: Microsoft.ServiceFabric.Data.IStateProviderReplica.RestoreAsync(System.String)
  spec.csharp:
  - uid: Microsoft.ServiceFabric.Data.IStateProviderReplica.RestoreAsync(System.String)
    name: RestoreAsync
    nameWithType: IStateProviderReplica.RestoreAsync
    fullName: Microsoft.ServiceFabric.Data.IStateProviderReplica.RestoreAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ServiceFabric.Data.IStateProviderReplica.RestoreAsync(System.String)
    name: RestoreAsync
    nameWithType: IStateProviderReplica.RestoreAsync
    fullName: Microsoft.ServiceFabric.Data.IStateProviderReplica.RestoreAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceFabric.Data.IStateProviderReplica.RestoreAsync(System.String,Microsoft.ServiceFabric.Data.RestorePolicy,System.Threading.CancellationToken)
  commentId: M:Microsoft.ServiceFabric.Data.IStateProviderReplica.RestoreAsync(System.String,Microsoft.ServiceFabric.Data.RestorePolicy,System.Threading.CancellationToken)
  parent: Microsoft.ServiceFabric.Data.IStateProviderReplica
  isExternal: true
  name: RestoreAsync(String, RestorePolicy, CancellationToken)
  nameWithType: IStateProviderReplica.RestoreAsync(String, RestorePolicy, CancellationToken)
  fullName: Microsoft.ServiceFabric.Data.IStateProviderReplica.RestoreAsync(System.String, Microsoft.ServiceFabric.Data.RestorePolicy, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.ServiceFabric.Data.IStateProviderReplica.RestoreAsync(System.String,Microsoft.ServiceFabric.Data.RestorePolicy,System.Threading.CancellationToken)
    name: RestoreAsync
    nameWithType: IStateProviderReplica.RestoreAsync
    fullName: Microsoft.ServiceFabric.Data.IStateProviderReplica.RestoreAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.ServiceFabric.Data.RestorePolicy
    name: RestorePolicy
    nameWithType: RestorePolicy
    fullName: Microsoft.ServiceFabric.Data.RestorePolicy
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ServiceFabric.Data.IStateProviderReplica.RestoreAsync(System.String,Microsoft.ServiceFabric.Data.RestorePolicy,System.Threading.CancellationToken)
    name: RestoreAsync
    nameWithType: IStateProviderReplica.RestoreAsync
    fullName: Microsoft.ServiceFabric.Data.IStateProviderReplica.RestoreAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.ServiceFabric.Data.RestorePolicy
    name: RestorePolicy
    nameWithType: RestorePolicy
    fullName: Microsoft.ServiceFabric.Data.RestorePolicy
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceFabric.Data.RestorePolicy
  commentId: T:Microsoft.ServiceFabric.Data.RestorePolicy
  parent: Microsoft.ServiceFabric.Data
  isExternal: false
  name: RestorePolicy
  nameWithType: RestorePolicy
  fullName: Microsoft.ServiceFabric.Data.RestorePolicy
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: false
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
- uid: Microsoft.ServiceFabric.Data.BackupOption
  commentId: T:Microsoft.ServiceFabric.Data.BackupOption
  parent: Microsoft.ServiceFabric.Data
  isExternal: false
  name: BackupOption
  nameWithType: BackupOption
  fullName: Microsoft.ServiceFabric.Data.BackupOption
- uid: Microsoft.ServiceFabric.Data.ReliableStateManager.OnDataLossAsync*
  commentId: Overload:Microsoft.ServiceFabric.Data.ReliableStateManager.OnDataLossAsync
  isExternal: false
  name: OnDataLossAsync
  nameWithType: ReliableStateManager.OnDataLossAsync
  fullName: Microsoft.ServiceFabric.Data.ReliableStateManager.OnDataLossAsync
- uid: Microsoft.ServiceFabric.Data.IStateProviderReplica.OnDataLossAsync
  commentId: P:Microsoft.ServiceFabric.Data.IStateProviderReplica.OnDataLossAsync
  parent: Microsoft.ServiceFabric.Data.IStateProviderReplica
  isExternal: false
  name: OnDataLossAsync
  nameWithType: IStateProviderReplica.OnDataLossAsync
  fullName: Microsoft.ServiceFabric.Data.IStateProviderReplica.OnDataLossAsync
- uid: System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}}
  commentId: T:System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}}
  parent: System
  definition: System.Func`2
  name: Func<CancellationToken, Task<Boolean>>
  nameWithType: Func<CancellationToken, Task<Boolean>>
  fullName: System.Func<System.Threading.CancellationToken, System.Threading.Tasks.Task<System.Boolean>>
  nameWithType.vb: Func(Of CancellationToken, Task(Of Boolean))
  fullname.vb: System.Func(Of System.Threading.CancellationToken, System.Threading.Tasks.Task(Of System.Boolean))
  name.vb: Func(Of CancellationToken, Task(Of Boolean))
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullname.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceFabric.Data.ReliableStateManager.Microsoft#ServiceFabric#Data#IStateProviderReplica#Initialize*
  commentId: Overload:Microsoft.ServiceFabric.Data.ReliableStateManager.Microsoft#ServiceFabric#Data#IStateProviderReplica#Initialize
  isExternal: false
  name: IStateProviderReplica.Initialize
  nameWithType: ReliableStateManager.IStateProviderReplica.Initialize
  fullName: Microsoft.ServiceFabric.Data.ReliableStateManager.Microsoft.ServiceFabric.Data.IStateProviderReplica.Initialize
  nameWithType.vb: ReliableStateManager.Microsoft.ServiceFabric.Data.IStateProviderReplica.Initialize
  name.vb: Microsoft.ServiceFabric.Data.IStateProviderReplica.Initialize
- uid: Microsoft.ServiceFabric.Data.IStateProviderReplica.Initialize(System.Fabric.StatefulServiceInitializationParameters)
  commentId: M:Microsoft.ServiceFabric.Data.IStateProviderReplica.Initialize(System.Fabric.StatefulServiceInitializationParameters)
  parent: Microsoft.ServiceFabric.Data.IStateProviderReplica
  isExternal: false
  name: Initialize(StatefulServiceInitializationParameters)
  nameWithType: IStateProviderReplica.Initialize(StatefulServiceInitializationParameters)
  fullName: Microsoft.ServiceFabric.Data.IStateProviderReplica.Initialize(System.Fabric.StatefulServiceInitializationParameters)
  spec.csharp:
  - uid: Microsoft.ServiceFabric.Data.IStateProviderReplica.Initialize(System.Fabric.StatefulServiceInitializationParameters)
    name: Initialize
    nameWithType: IStateProviderReplica.Initialize
    fullName: Microsoft.ServiceFabric.Data.IStateProviderReplica.Initialize
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Fabric.StatefulServiceInitializationParameters
    name: StatefulServiceInitializationParameters
    nameWithType: StatefulServiceInitializationParameters
    fullName: System.Fabric.StatefulServiceInitializationParameters
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ServiceFabric.Data.IStateProviderReplica.Initialize(System.Fabric.StatefulServiceInitializationParameters)
    name: Initialize
    nameWithType: IStateProviderReplica.Initialize
    fullName: Microsoft.ServiceFabric.Data.IStateProviderReplica.Initialize
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Fabric.StatefulServiceInitializationParameters
    name: StatefulServiceInitializationParameters
    nameWithType: StatefulServiceInitializationParameters
    fullName: System.Fabric.StatefulServiceInitializationParameters
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.StatefulServiceInitializationParameters
  commentId: T:System.Fabric.StatefulServiceInitializationParameters
  parent: System.Fabric
  isExternal: false
  name: StatefulServiceInitializationParameters
  nameWithType: StatefulServiceInitializationParameters
  fullName: System.Fabric.StatefulServiceInitializationParameters
- uid: Microsoft.ServiceFabric.Data.ReliableStateManager.Microsoft#ServiceFabric#Data#IStateProviderReplica#OpenAsync*
  commentId: Overload:Microsoft.ServiceFabric.Data.ReliableStateManager.Microsoft#ServiceFabric#Data#IStateProviderReplica#OpenAsync
  isExternal: false
  name: IStateProviderReplica.OpenAsync
  nameWithType: ReliableStateManager.IStateProviderReplica.OpenAsync
  fullName: Microsoft.ServiceFabric.Data.ReliableStateManager.Microsoft.ServiceFabric.Data.IStateProviderReplica.OpenAsync
  nameWithType.vb: ReliableStateManager.Microsoft.ServiceFabric.Data.IStateProviderReplica.OpenAsync
  name.vb: Microsoft.ServiceFabric.Data.IStateProviderReplica.OpenAsync
- uid: Microsoft.ServiceFabric.Data.IStateProviderReplica.OpenAsync(System.Fabric.ReplicaOpenMode,System.Fabric.IStatefulServicePartition,System.Threading.CancellationToken)
  commentId: M:Microsoft.ServiceFabric.Data.IStateProviderReplica.OpenAsync(System.Fabric.ReplicaOpenMode,System.Fabric.IStatefulServicePartition,System.Threading.CancellationToken)
  parent: Microsoft.ServiceFabric.Data.IStateProviderReplica
  isExternal: true
  name: OpenAsync(ReplicaOpenMode, IStatefulServicePartition, CancellationToken)
  nameWithType: IStateProviderReplica.OpenAsync(ReplicaOpenMode, IStatefulServicePartition, CancellationToken)
  fullName: Microsoft.ServiceFabric.Data.IStateProviderReplica.OpenAsync(System.Fabric.ReplicaOpenMode, System.Fabric.IStatefulServicePartition, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.ServiceFabric.Data.IStateProviderReplica.OpenAsync(System.Fabric.ReplicaOpenMode,System.Fabric.IStatefulServicePartition,System.Threading.CancellationToken)
    name: OpenAsync
    nameWithType: IStateProviderReplica.OpenAsync
    fullName: Microsoft.ServiceFabric.Data.IStateProviderReplica.OpenAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Fabric.ReplicaOpenMode
    name: ReplicaOpenMode
    nameWithType: ReplicaOpenMode
    fullName: System.Fabric.ReplicaOpenMode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Fabric.IStatefulServicePartition
    name: IStatefulServicePartition
    nameWithType: IStatefulServicePartition
    fullName: System.Fabric.IStatefulServicePartition
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ServiceFabric.Data.IStateProviderReplica.OpenAsync(System.Fabric.ReplicaOpenMode,System.Fabric.IStatefulServicePartition,System.Threading.CancellationToken)
    name: OpenAsync
    nameWithType: IStateProviderReplica.OpenAsync
    fullName: Microsoft.ServiceFabric.Data.IStateProviderReplica.OpenAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Fabric.ReplicaOpenMode
    name: ReplicaOpenMode
    nameWithType: ReplicaOpenMode
    fullName: System.Fabric.ReplicaOpenMode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Fabric.IStatefulServicePartition
    name: IStatefulServicePartition
    nameWithType: IStatefulServicePartition
    fullName: System.Fabric.IStatefulServicePartition
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.ReplicaOpenMode
  commentId: T:System.Fabric.ReplicaOpenMode
  parent: System.Fabric
  isExternal: false
  name: ReplicaOpenMode
  nameWithType: ReplicaOpenMode
  fullName: System.Fabric.ReplicaOpenMode
- uid: System.Fabric.IStatefulServicePartition
  commentId: T:System.Fabric.IStatefulServicePartition
  parent: System.Fabric
  isExternal: false
  name: IStatefulServicePartition
  nameWithType: IStatefulServicePartition
  fullName: System.Fabric.IStatefulServicePartition
- uid: System.Threading.Tasks.Task{System.Fabric.IReplicator}
  commentId: T:System.Threading.Tasks.Task{System.Fabric.IReplicator}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<IReplicator>
  nameWithType: Task<IReplicator>
  fullName: System.Threading.Tasks.Task<System.Fabric.IReplicator>
  nameWithType.vb: Task(Of IReplicator)
  fullname.vb: System.Threading.Tasks.Task(Of System.Fabric.IReplicator)
  name.vb: Task(Of IReplicator)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Fabric.IReplicator
    name: IReplicator
    nameWithType: IReplicator
    fullName: System.Fabric.IReplicator
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Fabric.IReplicator
    name: IReplicator
    nameWithType: IReplicator
    fullName: System.Fabric.IReplicator
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceFabric.Data.ReliableStateManager.Microsoft#ServiceFabric#Data#IStateProviderReplica#ChangeRoleAsync*
  commentId: Overload:Microsoft.ServiceFabric.Data.ReliableStateManager.Microsoft#ServiceFabric#Data#IStateProviderReplica#ChangeRoleAsync
  isExternal: false
  name: IStateProviderReplica.ChangeRoleAsync
  nameWithType: ReliableStateManager.IStateProviderReplica.ChangeRoleAsync
  fullName: Microsoft.ServiceFabric.Data.ReliableStateManager.Microsoft.ServiceFabric.Data.IStateProviderReplica.ChangeRoleAsync
  nameWithType.vb: ReliableStateManager.Microsoft.ServiceFabric.Data.IStateProviderReplica.ChangeRoleAsync
  name.vb: Microsoft.ServiceFabric.Data.IStateProviderReplica.ChangeRoleAsync
- uid: Microsoft.ServiceFabric.Data.IStateProviderReplica.ChangeRoleAsync(System.Fabric.ReplicaRole,System.Threading.CancellationToken)
  commentId: M:Microsoft.ServiceFabric.Data.IStateProviderReplica.ChangeRoleAsync(System.Fabric.ReplicaRole,System.Threading.CancellationToken)
  parent: Microsoft.ServiceFabric.Data.IStateProviderReplica
  isExternal: true
  name: ChangeRoleAsync(ReplicaRole, CancellationToken)
  nameWithType: IStateProviderReplica.ChangeRoleAsync(ReplicaRole, CancellationToken)
  fullName: Microsoft.ServiceFabric.Data.IStateProviderReplica.ChangeRoleAsync(System.Fabric.ReplicaRole, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.ServiceFabric.Data.IStateProviderReplica.ChangeRoleAsync(System.Fabric.ReplicaRole,System.Threading.CancellationToken)
    name: ChangeRoleAsync
    nameWithType: IStateProviderReplica.ChangeRoleAsync
    fullName: Microsoft.ServiceFabric.Data.IStateProviderReplica.ChangeRoleAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Fabric.ReplicaRole
    name: ReplicaRole
    nameWithType: ReplicaRole
    fullName: System.Fabric.ReplicaRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ServiceFabric.Data.IStateProviderReplica.ChangeRoleAsync(System.Fabric.ReplicaRole,System.Threading.CancellationToken)
    name: ChangeRoleAsync
    nameWithType: IStateProviderReplica.ChangeRoleAsync
    fullName: Microsoft.ServiceFabric.Data.IStateProviderReplica.ChangeRoleAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Fabric.ReplicaRole
    name: ReplicaRole
    nameWithType: ReplicaRole
    fullName: System.Fabric.ReplicaRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.ReplicaRole
  commentId: T:System.Fabric.ReplicaRole
  parent: System.Fabric
  isExternal: false
  name: ReplicaRole
  nameWithType: ReplicaRole
  fullName: System.Fabric.ReplicaRole
- uid: Microsoft.ServiceFabric.Data.ReliableStateManager.Microsoft#ServiceFabric#Data#IStateProviderReplica#CloseAsync*
  commentId: Overload:Microsoft.ServiceFabric.Data.ReliableStateManager.Microsoft#ServiceFabric#Data#IStateProviderReplica#CloseAsync
  isExternal: false
  name: IStateProviderReplica.CloseAsync
  nameWithType: ReliableStateManager.IStateProviderReplica.CloseAsync
  fullName: Microsoft.ServiceFabric.Data.ReliableStateManager.Microsoft.ServiceFabric.Data.IStateProviderReplica.CloseAsync
  nameWithType.vb: ReliableStateManager.Microsoft.ServiceFabric.Data.IStateProviderReplica.CloseAsync
  name.vb: Microsoft.ServiceFabric.Data.IStateProviderReplica.CloseAsync
- uid: Microsoft.ServiceFabric.Data.IStateProviderReplica.CloseAsync(System.Threading.CancellationToken)
  commentId: M:Microsoft.ServiceFabric.Data.IStateProviderReplica.CloseAsync(System.Threading.CancellationToken)
  parent: Microsoft.ServiceFabric.Data.IStateProviderReplica
  isExternal: true
  name: CloseAsync(CancellationToken)
  nameWithType: IStateProviderReplica.CloseAsync(CancellationToken)
  fullName: Microsoft.ServiceFabric.Data.IStateProviderReplica.CloseAsync(System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.ServiceFabric.Data.IStateProviderReplica.CloseAsync(System.Threading.CancellationToken)
    name: CloseAsync
    nameWithType: IStateProviderReplica.CloseAsync
    fullName: Microsoft.ServiceFabric.Data.IStateProviderReplica.CloseAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ServiceFabric.Data.IStateProviderReplica.CloseAsync(System.Threading.CancellationToken)
    name: CloseAsync
    nameWithType: IStateProviderReplica.CloseAsync
    fullName: Microsoft.ServiceFabric.Data.IStateProviderReplica.CloseAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceFabric.Data.ReliableStateManager.Microsoft#ServiceFabric#Data#IStateProviderReplica#Abort*
  commentId: Overload:Microsoft.ServiceFabric.Data.ReliableStateManager.Microsoft#ServiceFabric#Data#IStateProviderReplica#Abort
  isExternal: false
  name: IStateProviderReplica.Abort
  nameWithType: ReliableStateManager.IStateProviderReplica.Abort
  fullName: Microsoft.ServiceFabric.Data.ReliableStateManager.Microsoft.ServiceFabric.Data.IStateProviderReplica.Abort
  nameWithType.vb: ReliableStateManager.Microsoft.ServiceFabric.Data.IStateProviderReplica.Abort
  name.vb: Microsoft.ServiceFabric.Data.IStateProviderReplica.Abort
- uid: Microsoft.ServiceFabric.Data.IStateProviderReplica.Abort
  commentId: M:Microsoft.ServiceFabric.Data.IStateProviderReplica.Abort
  parent: Microsoft.ServiceFabric.Data.IStateProviderReplica
  isExternal: false
  name: Abort()
  nameWithType: IStateProviderReplica.Abort()
  fullName: Microsoft.ServiceFabric.Data.IStateProviderReplica.Abort()
  spec.csharp:
  - uid: Microsoft.ServiceFabric.Data.IStateProviderReplica.Abort
    name: Abort
    nameWithType: IStateProviderReplica.Abort
    fullName: Microsoft.ServiceFabric.Data.IStateProviderReplica.Abort
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ServiceFabric.Data.IStateProviderReplica.Abort
    name: Abort
    nameWithType: IStateProviderReplica.Abort
    fullName: Microsoft.ServiceFabric.Data.IStateProviderReplica.Abort
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
