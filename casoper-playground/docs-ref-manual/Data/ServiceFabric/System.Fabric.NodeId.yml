### YamlMime:ManagedReference
items:
- uid: System.Fabric.NodeId
  commentId: T:System.Fabric.NodeId
  id: NodeId
  parent: System.Fabric
  children:
  - System.Fabric.NodeId.#ctor(System.Numerics.BigInteger,System.Numerics.BigInteger)
  - System.Fabric.NodeId.Equals(System.Object)
  - System.Fabric.NodeId.GetHashCode
  - System.Fabric.NodeId.High
  - System.Fabric.NodeId.Low
  - System.Fabric.NodeId.op_Equality(System.Fabric.NodeId,System.Fabric.NodeId)
  - System.Fabric.NodeId.op_Inequality(System.Fabric.NodeId,System.Fabric.NodeId)
  - System.Fabric.NodeId.ToString
  - System.Fabric.NodeId.TryParse(System.String,System.Fabric.NodeId@)
  langs:
  - csharp
  - vb
  name: NodeId
  nameWithType: NodeId
  fullName: System.Fabric.NodeId
  type: Class
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/NodeId.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: NodeId
    path: src/prod/src/managed/Api/src/System/Fabric/NodeId.cs
    startLine: 16
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Class to encapsulate a node ID.</p>\n"
  example: []
  syntax:
    content: public class NodeId
    content.vb: Public Class NodeId
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.MemberwiseClone
  extensionMethods:
  - System.Fabric.NodeId.System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: System.Fabric.NodeId.#ctor(System.Numerics.BigInteger,System.Numerics.BigInteger)
  commentId: M:System.Fabric.NodeId.#ctor(System.Numerics.BigInteger,System.Numerics.BigInteger)
  id: '#ctor(System.Numerics.BigInteger,System.Numerics.BigInteger)'
  parent: System.Fabric.NodeId
  langs:
  - csharp
  - vb
  name: NodeId(BigInteger, BigInteger)
  nameWithType: NodeId.NodeId(BigInteger, BigInteger)
  fullName: System.Fabric.NodeId.NodeId(System.Numerics.BigInteger, System.Numerics.BigInteger)
  type: Constructor
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/NodeId.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: .ctor
    path: src/prod/src/managed/Api/src/System/Fabric/NodeId.cs
    startLine: 40
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Initializes a new <xref href=\"System.Fabric.NodeId\" data-throw-if-not-resolved=\"false\"></xref> object, with the specified high and low order components.</p>\n"
  example: []
  syntax:
    content: public NodeId(BigInteger high, BigInteger low)
    content.vb: Public Sub New(high As BigInteger, low As BigInteger)
    parameters:
    - id: high
      type: System.Numerics.BigInteger
      description: "\n<p>The high order component of the <xref href=\"System.Fabric.NodeId\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
    - id: low
      type: System.Numerics.BigInteger
      description: "\n<p>The low order component of the <xref href=\"System.Fabric.NodeId\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  overload: System.Fabric.NodeId.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.NodeId.Low
  commentId: P:System.Fabric.NodeId.Low
  id: Low
  parent: System.Fabric.NodeId
  langs:
  - csharp
  - vb
  name: Low
  nameWithType: NodeId.Low
  fullName: System.Fabric.NodeId.Low
  type: Property
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/NodeId.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: Low
    path: src/prod/src/managed/Api/src/System/Fabric/NodeId.cs
    startLine: 64
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>The low order component of the <xref href=\"System.Fabric.NodeId\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  example: []
  syntax:
    content: public BigInteger Low { get; }
    content.vb: Public ReadOnly Property Low As BigInteger
    parameters: []
    return:
      type: System.Numerics.BigInteger
      description: "\n<p>Returns <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  overload: System.Fabric.NodeId.Low*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Fabric.NodeId.High
  commentId: P:System.Fabric.NodeId.High
  id: High
  parent: System.Fabric.NodeId
  langs:
  - csharp
  - vb
  name: High
  nameWithType: NodeId.High
  fullName: System.Fabric.NodeId.High
  type: Property
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/NodeId.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: High
    path: src/prod/src/managed/Api/src/System/Fabric/NodeId.cs
    startLine: 79
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>The high order component of the <xref href=\"System.Fabric.NodeId\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  example: []
  syntax:
    content: public BigInteger High { get; }
    content.vb: Public ReadOnly Property High As BigInteger
    parameters: []
    return:
      type: System.Numerics.BigInteger
      description: "\n<p>Returns <xref href=\"System.Numerics.BigInteger\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  overload: System.Fabric.NodeId.High*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Fabric.NodeId.TryParse(System.String,System.Fabric.NodeId@)
  commentId: M:System.Fabric.NodeId.TryParse(System.String,System.Fabric.NodeId@)
  id: TryParse(System.String,System.Fabric.NodeId@)
  parent: System.Fabric.NodeId
  langs:
  - csharp
  - vb
  name: TryParse(String, out NodeId)
  nameWithType: NodeId.TryParse(String, out NodeId)
  fullName: System.Fabric.NodeId.TryParse(System.String, out System.Fabric.NodeId)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/NodeId.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: TryParse
    path: src/prod/src/managed/Api/src/System/Fabric/NodeId.cs
    startLine: 130
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Converts the string representation of a node ID to its <xref href=\"System.Fabric.NodeId\" data-throw-if-not-resolved=\"false\"></xref> object equivalent. A return value indicates whether the operation succeeded.</p>\n"
  example: []
  syntax:
    content: public static bool TryParse(string from, out NodeId parsedNodeId)
    content.vb: Public Shared Function TryParse(from As String, ByRef parsedNodeId As NodeId) As Boolean
    parameters:
    - id: from
      type: System.String
      description: "\n<p>A string containing the node ID to convert.</p>\n"
    - id: parsedNodeId
      type: System.Fabric.NodeId
      description: "\n<p>When this method returns, contains a new <xref href=\"System.Fabric.NodeId\" data-throw-if-not-resolved=\"false\"></xref> object equivalent to the node ID contained in <em>from</em>, \nif the conversion succeeded, or <strong>null</strong> if the conversion failed. This parameter is passed uninitialized.</p>\n"
    return:
      type: System.Boolean
      description: "\n<returns>A boolean indicating if the parse was successful</returns>\n"
  overload: System.Fabric.NodeId.TryParse*
  nameWithType.vb: NodeId.TryParse(String, ByRef NodeId)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Fabric.NodeId.TryParse(System.String, ByRef System.Fabric.NodeId)
  name.vb: TryParse(String, ByRef NodeId)
- uid: System.Fabric.NodeId.op_Equality(System.Fabric.NodeId,System.Fabric.NodeId)
  commentId: M:System.Fabric.NodeId.op_Equality(System.Fabric.NodeId,System.Fabric.NodeId)
  id: op_Equality(System.Fabric.NodeId,System.Fabric.NodeId)
  parent: System.Fabric.NodeId
  langs:
  - csharp
  - vb
  name: Equality(NodeId, NodeId)
  nameWithType: NodeId.Equality(NodeId, NodeId)
  fullName: System.Fabric.NodeId.Equality(System.Fabric.NodeId, System.Fabric.NodeId)
  type: Operator
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/NodeId.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: op_Equality
    path: src/prod/src/managed/Api/src/System/Fabric/NodeId.cs
    startLine: 174
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Determines whether two <xref href=\"System.Fabric.NodeId\" data-throw-if-not-resolved=\"false\"></xref> objects have the same value.</p>\n"
  example: []
  syntax:
    content: public static bool operator ==(NodeId value1, NodeId value2)
    content.vb: Public Shared Operator =(value1 As NodeId, value2 As NodeId) As Boolean
    parameters:
    - id: value1
      type: System.Fabric.NodeId
      description: "\n<p>A <xref href=\"System.Fabric.NodeId\" data-throw-if-not-resolved=\"false\"></xref> object to compare with <em>value2</em>.</p>\n"
    - id: value2
      type: System.Fabric.NodeId
      description: "\n<p>A <xref href=\"System.Fabric.NodeId\" data-throw-if-not-resolved=\"false\"></xref> object to compare with <em>value1</em>.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>Returns a <xref href=\"System.Boolean\" data-throw-if-not-resolved=\"false\"></xref> value that is <strong>true</strong> if the objects are equivalent;\notherwise <strong>false</strong>.</p>\n"
  overload: System.Fabric.NodeId.op_Equality*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Fabric.NodeId.op_Inequality(System.Fabric.NodeId,System.Fabric.NodeId)
  commentId: M:System.Fabric.NodeId.op_Inequality(System.Fabric.NodeId,System.Fabric.NodeId)
  id: op_Inequality(System.Fabric.NodeId,System.Fabric.NodeId)
  parent: System.Fabric.NodeId
  langs:
  - csharp
  - vb
  name: Inequality(NodeId, NodeId)
  nameWithType: NodeId.Inequality(NodeId, NodeId)
  fullName: System.Fabric.NodeId.Inequality(System.Fabric.NodeId, System.Fabric.NodeId)
  type: Operator
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/NodeId.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: op_Inequality
    path: src/prod/src/managed/Api/src/System/Fabric/NodeId.cs
    startLine: 192
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Determines whether two <xref href=\"System.Fabric.NodeId\" data-throw-if-not-resolved=\"false\"></xref> objects have different values.</p>\n"
  example: []
  syntax:
    content: public static bool operator !=(NodeId value1, NodeId value2)
    content.vb: Public Shared Operator <>(value1 As NodeId, value2 As NodeId) As Boolean
    parameters:
    - id: value1
      type: System.Fabric.NodeId
      description: "\n<p>A <xref href=\"System.Fabric.NodeId\" data-throw-if-not-resolved=\"false\"></xref> object to compare with <em>value2</em>.</p>\n"
    - id: value2
      type: System.Fabric.NodeId
      description: "\n<p>A <xref href=\"System.Fabric.NodeId\" data-throw-if-not-resolved=\"false\"></xref> object to compare with <em>value1</em>.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>Returns a <xref href=\"System.Boolean\" data-throw-if-not-resolved=\"false\"></xref> value that is <strong>true</strong> if the objects have different values; \notherwise <strong>false</strong>.</p>\n"
  overload: System.Fabric.NodeId.op_Inequality*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Fabric.NodeId.GetHashCode
  commentId: M:System.Fabric.NodeId.GetHashCode
  id: GetHashCode
  parent: System.Fabric.NodeId
  langs:
  - csharp
  - vb
  name: GetHashCode()
  nameWithType: NodeId.GetHashCode()
  fullName: System.Fabric.NodeId.GetHashCode()
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/NodeId.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: GetHashCode
    path: src/prod/src/managed/Api/src/System/Fabric/NodeId.cs
    startLine: 203
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Returns the hash code for this <xref href=\"System.Fabric.NodeId\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  example: []
  syntax:
    content: public override int GetHashCode()
    content.vb: Public Overrides Function GetHashCode As Integer
    return:
      type: System.Int32
      description: "\n<p>A 32-bit signed integer hash code.</p>\n"
  overridden: System.Object.GetHashCode
  overload: System.Fabric.NodeId.GetHashCode*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Fabric.NodeId.Equals(System.Object)
  commentId: M:System.Fabric.NodeId.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Fabric.NodeId
  langs:
  - csharp
  - vb
  name: Equals(Object)
  nameWithType: NodeId.Equals(Object)
  fullName: System.Fabric.NodeId.Equals(System.Object)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/NodeId.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: Equals
    path: src/prod/src/managed/Api/src/System/Fabric/NodeId.cs
    startLine: 218
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Indicates whether this <xref href=\"System.Fabric.NodeId\" data-throw-if-not-resolved=\"false\"></xref> object and the specified object are equal.</p>\n"
  example: []
  syntax:
    content: public override bool Equals(object obj)
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
    parameters:
    - id: obj
      type: System.Object
      description: "\n<p>The object to compare with the current <xref href=\"System.Fabric.NodeId\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>Returns a <xref href=\"System.Boolean\" data-throw-if-not-resolved=\"false\"></xref> value that is <strong>true</strong> \nif the objects are the same type and represent the same value; otherwise <strong>false</strong>.</p>\n"
  overridden: System.Object.Equals(System.Object)
  overload: System.Fabric.NodeId.Equals*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Fabric.NodeId.ToString
  commentId: M:System.Fabric.NodeId.ToString
  id: ToString
  parent: System.Fabric.NodeId
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: NodeId.ToString()
  fullName: System.Fabric.NodeId.ToString()
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/NodeId.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: ToString
    path: src/prod/src/managed/Api/src/System/Fabric/NodeId.cs
    startLine: 229
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Creates and returns a string representation of the current node ID.</p>\n"
  example: []
  syntax:
    content: public override string ToString()
    content.vb: Public Overrides Function ToString As String
    return:
      type: System.String
      description: "\n<p>Returns <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  overridden: System.Object.ToString
  overload: System.Fabric.NodeId.ToString*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
references:
- uid: System.Fabric
  commentId: N:System.Fabric
  isExternal: false
  name: System.Fabric
  nameWithType: System.Fabric
  fullName: System.Fabric
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.NodeId.System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
  commentId: M:System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  parent: System.Fabric.Messaging.Stream.ByteArraySerializer
  definition: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  name: Serialize<NodeId>()
  nameWithType: ByteArraySerializer.Serialize<NodeId>()
  fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<System.Fabric.NodeId>()
  nameWithType.vb: ByteArraySerializer.Serialize(Of NodeId)()
  fullname.vb: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of System.Fabric.NodeId)()
  name.vb: Serialize(Of NodeId)()
  spec.csharp:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
    name: Serialize<NodeId>
    nameWithType: ByteArraySerializer.Serialize<NodeId>
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<System.Fabric.NodeId>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
    name: Serialize(Of NodeId)
    nameWithType: ByteArraySerializer.Serialize(Of NodeId)
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of System.Fabric.NodeId)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  commentId: M:System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  isExternal: false
  name: Serialize<T>(T)
  nameWithType: ByteArraySerializer.Serialize<T>(T)
  fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<T>(T)
  nameWithType.vb: ByteArraySerializer.Serialize(Of T)(T)
  fullname.vb: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of T)(T)
  name.vb: Serialize(Of T)(T)
  spec.csharp:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
    name: Serialize<T>
    nameWithType: ByteArraySerializer.Serialize<T>
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
    name: Serialize(Of T)
    nameWithType: ByteArraySerializer.Serialize(Of T)
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.Messaging.Stream.ByteArraySerializer
  commentId: T:System.Fabric.Messaging.Stream.ByteArraySerializer
  parent: System.Fabric.Messaging.Stream
  isExternal: false
  name: ByteArraySerializer
  nameWithType: ByteArraySerializer
  fullName: System.Fabric.Messaging.Stream.ByteArraySerializer
- uid: System.Fabric.Messaging.Stream
  commentId: N:System.Fabric.Messaging.Stream
  isExternal: false
  name: System.Fabric.Messaging.Stream
  nameWithType: System.Fabric.Messaging.Stream
  fullName: System.Fabric.Messaging.Stream
- uid: System.Fabric.NodeId
  commentId: T:System.Fabric.NodeId
  parent: System.Fabric
  isExternal: false
  name: NodeId
  nameWithType: NodeId
  fullName: System.Fabric.NodeId
- uid: System.Fabric.NodeId.#ctor*
  commentId: Overload:System.Fabric.NodeId.#ctor
  isExternal: false
  name: NodeId
  nameWithType: NodeId.NodeId
  fullName: System.Fabric.NodeId.NodeId
- uid: System.Numerics.BigInteger
  commentId: T:System.Numerics.BigInteger
  parent: System.Numerics
  isExternal: true
  name: BigInteger
  nameWithType: BigInteger
  fullName: System.Numerics.BigInteger
- uid: System.Numerics
  commentId: N:System.Numerics
  isExternal: false
  name: System.Numerics
  nameWithType: System.Numerics
  fullName: System.Numerics
- uid: System.Fabric.NodeId.Low*
  commentId: Overload:System.Fabric.NodeId.Low
  isExternal: false
  name: Low
  nameWithType: NodeId.Low
  fullName: System.Fabric.NodeId.Low
- uid: System.Fabric.NodeId.High*
  commentId: Overload:System.Fabric.NodeId.High
  isExternal: false
  name: High
  nameWithType: NodeId.High
  fullName: System.Fabric.NodeId.High
- uid: System.Fabric.NodeId.TryParse*
  commentId: Overload:System.Fabric.NodeId.TryParse
  isExternal: false
  name: TryParse
  nameWithType: NodeId.TryParse
  fullName: System.Fabric.NodeId.TryParse
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Fabric.NodeId.op_Equality*
  commentId: Overload:System.Fabric.NodeId.op_Equality
  isExternal: false
  name: Equality
  nameWithType: NodeId.Equality
  fullName: System.Fabric.NodeId.Equality
- uid: System.Fabric.NodeId.op_Inequality*
  commentId: Overload:System.Fabric.NodeId.op_Inequality
  isExternal: false
  name: Inequality
  nameWithType: NodeId.Inequality
  fullName: System.Fabric.NodeId.Inequality
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.NodeId.GetHashCode*
  commentId: Overload:System.Fabric.NodeId.GetHashCode
  isExternal: false
  name: GetHashCode
  nameWithType: NodeId.GetHashCode
  fullName: System.Fabric.NodeId.GetHashCode
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.NodeId.Equals*
  commentId: Overload:System.Fabric.NodeId.Equals
  isExternal: false
  name: Equals
  nameWithType: NodeId.Equals
  fullName: System.Fabric.NodeId.Equals
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.NodeId.ToString*
  commentId: Overload:System.Fabric.NodeId.ToString
  isExternal: false
  name: ToString
  nameWithType: NodeId.ToString
  fullName: System.Fabric.NodeId.ToString
