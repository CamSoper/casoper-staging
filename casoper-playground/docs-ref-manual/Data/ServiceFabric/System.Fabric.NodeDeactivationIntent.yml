### YamlMime:ManagedReference
items:
- uid: System.Fabric.NodeDeactivationIntent
  commentId: T:System.Fabric.NodeDeactivationIntent
  id: NodeDeactivationIntent
  parent: System.Fabric
  children:
  - System.Fabric.NodeDeactivationIntent.Invalid
  - System.Fabric.NodeDeactivationIntent.Pause
  - System.Fabric.NodeDeactivationIntent.RemoveData
  - System.Fabric.NodeDeactivationIntent.RemoveNode
  - System.Fabric.NodeDeactivationIntent.Restart
  langs:
  - csharp
  - vb
  name: NodeDeactivationIntent
  nameWithType: NodeDeactivationIntent
  fullName: System.Fabric.NodeDeactivationIntent
  type: Enum
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/NodeDeactivationIntent.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: NodeDeactivationIntent
    path: src/prod/src/managed/Api/src/System/Fabric/NodeDeactivationIntent.cs
    startLine: 19
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Describes the reason why the node is being deactivated.</p>\n"
  remarks: "\n<p>\n    The <xref href=\"System.Fabric.NodeDeactivationIntent\" data-throw-if-not-resolved=\"false\"></xref> enumeration is provided as a part of the <xref href=\"System.Fabric.FabricClient.ClusterManagementClient.DeactivateNodeAsync(System.String%2cSystem.Fabric.NodeDeactivationIntent)\" data-throw-if-not-resolved=\"false\"></xref> method. </p>\n<p>\n    Service Fabric uses this information to take the correct actions at the node to provide a graceful shutdown of the node. The intents have a general progression or severity. </p>\n<p>\n    A deactivation that is started with one intent can be increased to subsequent higher levels of intent. The general order of this progression is: Pause, Restart, Stop, ForceStop.</p>\n"
  example: []
  syntax:
    content: public enum NodeDeactivationIntent
    content.vb: Public Enum NodeDeactivationIntent
  extensionMethods:
  - System.Fabric.NodeDeactivationIntent.System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
  modifiers.csharp:
  - public
  - enum
  modifiers.vb:
  - Public
  - Enum
- uid: System.Fabric.NodeDeactivationIntent.Invalid
  commentId: F:System.Fabric.NodeDeactivationIntent.Invalid
  id: Invalid
  parent: System.Fabric.NodeDeactivationIntent
  langs:
  - csharp
  - vb
  name: Invalid
  nameWithType: NodeDeactivationIntent.Invalid
  fullName: System.Fabric.NodeDeactivationIntent.Invalid
  type: Field
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/NodeDeactivationIntent.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: Invalid
    path: src/prod/src/managed/Api/src/System/Fabric/NodeDeactivationIntent.cs
    startLine: 24
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Indicates that a deactivation intent is invalid. This value is not used.</p>\n"
  example: []
  syntax:
    content: Invalid = 0
    return:
      type: System.Fabric.NodeDeactivationIntent
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Fabric.NodeDeactivationIntent.Pause
  commentId: F:System.Fabric.NodeDeactivationIntent.Pause
  id: Pause
  parent: System.Fabric.NodeDeactivationIntent
  langs:
  - csharp
  - vb
  name: Pause
  nameWithType: NodeDeactivationIntent.Pause
  fullName: System.Fabric.NodeDeactivationIntent.Pause
  type: Field
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/NodeDeactivationIntent.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: Pause
    path: src/prod/src/managed/Api/src/System/Fabric/NodeDeactivationIntent.cs
    startLine: 49
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Indicates that the node should be paused. </p>\n"
  remarks: "\n<p>\n    When this intent is used, Service Fabric prevents changes to the specified node. No new replicas are placed on the node, and existing replicas are not moved or shut down.</p>\n<p>\n    The <xref href=\"System.Fabric.NodeDeactivationIntent.Pause\" data-throw-if-not-resolved=\"false\"></xref> intent is useful when one or more replicas on a node encounter issues and that node has to be isolated for further investigation</p>\n<p> \n    This investigation could include accessing the remote machine to investigate such activities as reviewing local logs, taking memory dumps, and observing other information. </p>\n<p>\n    The purpose of this mode is to attempt to preserve the node so that additional debugging can be performed under the same conditions that existed when the error occurred.</p>\n<p>\n    Note that specifying this mode does not guarantee that all changes to the node can be prevented. </p>\n<p>\n    For example, replicas on the node might crash after the intent to pause the node has been received. </p>\n<p>\n    As another example, failures in another location in the cluster might cause a Secondary replica on the node to be promoted to the Primary replica.</p>\n<p>\n    In this mode, Service Fabric will disable Placement and Resource Balancing on the target node</p>\n<p>\n    In addition Safety Checks (see <xref href=\"System.Fabric.SafetyCheckKind\" data-throw-if-not-resolved=\"false\"></xref>) will be performed by Service Fabric</p>\n"
  example: []
  syntax:
    content: Pause = 1
    return:
      type: System.Fabric.NodeDeactivationIntent
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Fabric.NodeDeactivationIntent.Restart
  commentId: F:System.Fabric.NodeDeactivationIntent.Restart
  id: Restart
  parent: System.Fabric.NodeDeactivationIntent
  langs:
  - csharp
  - vb
  name: Restart
  nameWithType: NodeDeactivationIntent.Restart
  fullName: System.Fabric.NodeDeactivationIntent.Restart
  type: Field
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/NodeDeactivationIntent.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: Restart
    path: src/prod/src/managed/Api/src/System/Fabric/NodeDeactivationIntent.cs
    startLine: 70
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Indicates that the intent is for the node to be restarted after a short period of time. Service Fabric does not restart the node - this action is done outside of Service Fabric.</p>\n"
  remarks: "\n<p>\n    A node might be shut down, for example, to perform an OS update or a Service Fabric code update. </p>\n<p>\n    In this mode, Service Fabric prevents new replicas from being placed on the node. Additionally, Service Fabric takes the following actions: </p>\n<p>\n    Disable Placement and Resource balancing on the target node</p>\n<p>\n    Performs safety checks. The <xref href=\"System.Fabric.SafetyCheckKind.WaitForPrimaryPlacement\" data-throw-if-not-resolved=\"false\"></xref> safety check is not performed for this intent. </p>\n<p>\n    Close all replicas and instances running on the node.</p>\n<p>\n    NOTE: Once replicas and instances are closed, Service Fabric will reactively create replacements for replicas of stateful volatile services and stateless services. </p>\n<p>\n    For Persisted replicas on the node, new replicas are <strong>not</strong> be built, because the intention is to restart this node and to recover the persistent state after the restart. The replicas are opened once the node is activated.</p>\n"
  example: []
  syntax:
    content: Restart = 2
    return:
      type: System.Fabric.NodeDeactivationIntent
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Fabric.NodeDeactivationIntent.RemoveData
  commentId: F:System.Fabric.NodeDeactivationIntent.RemoveData
  id: RemoveData
  parent: System.Fabric.NodeDeactivationIntent
  langs:
  - csharp
  - vb
  name: RemoveData
  nameWithType: NodeDeactivationIntent.RemoveData
  fullName: System.Fabric.NodeDeactivationIntent.RemoveData
  type: Field
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/NodeDeactivationIntent.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: RemoveData
    path: src/prod/src/managed/Api/src/System/Fabric/NodeDeactivationIntent.cs
    startLine: 95
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Indicates that the intent is to reimage the node. Service Fabric does not reimage the node - this action is done outside of Service Fabric.</p>\n"
  remarks: "\n<p>\n    When Service Fabric receives this intent, it ensures that: </p>\n<p>\n    In this mode, Service Fabric prevents new replicas from being placed on the node. Additionally, Service Fabric takes the following actions: </p>\n<p>\n    Disable Placement and Resource balancing on the target node</p>\n<p>\n    Move all Up replicas out of the node. </p>\n<p>\n    For stateless instances this implies creating another instance on another node</p>\n<p>\n    For replicas of stateful services a replacement replica is built on another node (if there is sufficient capacity in the cluster)</p>\n<p>\n    If the replica is a primary, some other active secondary of the partition is made the primary prior to creating the replacement</p>\n<p>\n    Stateful replicas on the node receive notifications to clean up their state and close.</p>\n<p>\n    Performs a subset of safety checks that ensure that as a result of taking this node down no data loss can occur.</p>\n"
  example: []
  syntax:
    content: RemoveData = 3
    return:
      type: System.Fabric.NodeDeactivationIntent
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Fabric.NodeDeactivationIntent.RemoveNode
  commentId: F:System.Fabric.NodeDeactivationIntent.RemoveNode
  id: RemoveNode
  parent: System.Fabric.NodeDeactivationIntent
  langs:
  - csharp
  - vb
  name: RemoveNode
  nameWithType: NodeDeactivationIntent.RemoveNode
  fullName: System.Fabric.NodeDeactivationIntent.RemoveNode
  type: Field
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/NodeDeactivationIntent.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: RemoveNode
    path: src/prod/src/managed/Api/src/System/Fabric/NodeDeactivationIntent.cs
    startLine: 120
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Indicates that the node is being decommissioned and is not expected to return. Service Fabric does not decommission the node - this action is done outside of Service Fabric.</p>\n"
  remarks: "\n<p>\n    When Service Fabric receives this intent, it ensures that: </p>\n<p>\n    In this mode, Service Fabric prevents new replicas from being placed on the node. Additionally, Service Fabric takes the following actions: </p>\n<p>\n    Disable Placement and Resource balancing on the target node</p>\n<p>\n    Move all Up replicas out of the node. </p>\n<p>\n    For stateless instances this implies creating another instance on another node</p>\n<p>\n    For replicas of stateful services a replacement replica is built on another node (if there is sufficient capacity in the cluster)</p>\n<p>\n    If the replica is a primary, some other active secondary of the partition is made the primary prior to creating the replacement</p>\n<p>\n    Stateful replicas on the node receive notifications to clean up their state and close.</p>\n<p>\n    Performs a subset of safety checks that ensure that as a result of taking this node down no data loss can occur.</p>\n"
  example: []
  syntax:
    content: RemoveNode = 4
    return:
      type: System.Fabric.NodeDeactivationIntent
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
references:
- uid: System.Fabric.NodeDeactivationIntent
  commentId: T:System.Fabric.NodeDeactivationIntent
  parent: System.Fabric
  isExternal: false
  name: NodeDeactivationIntent
  nameWithType: NodeDeactivationIntent
  fullName: System.Fabric.NodeDeactivationIntent
- uid: System.Fabric.FabricClient.ClusterManagementClient.DeactivateNodeAsync(System.String,System.Fabric.NodeDeactivationIntent)
  commentId: M:System.Fabric.FabricClient.ClusterManagementClient.DeactivateNodeAsync(System.String,System.Fabric.NodeDeactivationIntent)
- uid: System.Fabric
  commentId: N:System.Fabric
  isExternal: false
  name: System.Fabric
  nameWithType: System.Fabric
  fullName: System.Fabric
- uid: System.Fabric.NodeDeactivationIntent.System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
  commentId: M:System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  parent: System.Fabric.Messaging.Stream.ByteArraySerializer
  definition: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  name: Serialize<NodeDeactivationIntent>()
  nameWithType: ByteArraySerializer.Serialize<NodeDeactivationIntent>()
  fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<System.Fabric.NodeDeactivationIntent>()
  nameWithType.vb: ByteArraySerializer.Serialize(Of NodeDeactivationIntent)()
  fullname.vb: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of System.Fabric.NodeDeactivationIntent)()
  name.vb: Serialize(Of NodeDeactivationIntent)()
  spec.csharp:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
    name: Serialize<NodeDeactivationIntent>
    nameWithType: ByteArraySerializer.Serialize<NodeDeactivationIntent>
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<System.Fabric.NodeDeactivationIntent>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
    name: Serialize(Of NodeDeactivationIntent)
    nameWithType: ByteArraySerializer.Serialize(Of NodeDeactivationIntent)
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of System.Fabric.NodeDeactivationIntent)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  commentId: M:System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  isExternal: false
  name: Serialize<T>(T)
  nameWithType: ByteArraySerializer.Serialize<T>(T)
  fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<T>(T)
  nameWithType.vb: ByteArraySerializer.Serialize(Of T)(T)
  fullname.vb: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of T)(T)
  name.vb: Serialize(Of T)(T)
  spec.csharp:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
    name: Serialize<T>
    nameWithType: ByteArraySerializer.Serialize<T>
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
    name: Serialize(Of T)
    nameWithType: ByteArraySerializer.Serialize(Of T)
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.Messaging.Stream.ByteArraySerializer
  commentId: T:System.Fabric.Messaging.Stream.ByteArraySerializer
  parent: System.Fabric.Messaging.Stream
  isExternal: false
  name: ByteArraySerializer
  nameWithType: ByteArraySerializer
  fullName: System.Fabric.Messaging.Stream.ByteArraySerializer
- uid: System.Fabric.Messaging.Stream
  commentId: N:System.Fabric.Messaging.Stream
  isExternal: false
  name: System.Fabric.Messaging.Stream
  nameWithType: System.Fabric.Messaging.Stream
  fullName: System.Fabric.Messaging.Stream
- uid: System.Fabric.NodeDeactivationIntent.Pause
  commentId: F:System.Fabric.NodeDeactivationIntent.Pause
- uid: System.Fabric.SafetyCheckKind
  commentId: T:System.Fabric.SafetyCheckKind
  parent: System.Fabric
  isExternal: false
  name: SafetyCheckKind
  nameWithType: SafetyCheckKind
  fullName: System.Fabric.SafetyCheckKind
- uid: System.Fabric.SafetyCheckKind.WaitForPrimaryPlacement
  commentId: F:System.Fabric.SafetyCheckKind.WaitForPrimaryPlacement
