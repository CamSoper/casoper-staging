### YamlMime:ManagedReference
items:
- uid: System.Fabric.SecurityCredentials
  commentId: T:System.Fabric.SecurityCredentials
  id: SecurityCredentials
  parent: System.Fabric
  children:
  - System.Fabric.SecurityCredentials.CredentialType
  - System.Fabric.SecurityCredentials.LoadFrom(System.Fabric.CodePackageActivationContext,System.String,System.String)
  langs:
  - csharp
  - vb
  name: SecurityCredentials
  nameWithType: SecurityCredentials
  fullName: System.Fabric.SecurityCredentials
  type: Class
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/Common/SecurityCredentials.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: SecurityCredentials
    path: src/prod/src/managed/Api/src/System/Fabric/Common/SecurityCredentials.cs
    startLine: 14
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>An abstract base class for types that represent security credentials.</p>\n"
  example: []
  syntax:
    content: public abstract class SecurityCredentials
    content.vb: Public MustInherit Class SecurityCredentials
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  extensionMethods:
  - System.Fabric.SecurityCredentials.System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: System.Fabric.SecurityCredentials.CredentialType
  commentId: P:System.Fabric.SecurityCredentials.CredentialType
  id: CredentialType
  parent: System.Fabric.SecurityCredentials
  langs:
  - csharp
  - vb
  name: CredentialType
  nameWithType: SecurityCredentials.CredentialType
  fullName: System.Fabric.SecurityCredentials.CredentialType
  type: Property
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/Common/SecurityCredentials.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: CredentialType
    path: src/prod/src/managed/Api/src/System/Fabric/Common/SecurityCredentials.cs
    startLine: 27
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Indicates the type of security credentials to use in order to secure the cluster – valid values are \"none\", \"x509\", \"Windows\".</p>\n"
  example: []
  syntax:
    content: public CredentialType CredentialType { get; protected set; }
    content.vb: Public Property CredentialType As CredentialType
    parameters: []
    return:
      type: System.Fabric.CredentialType
      description: "\n<p>The type of security credentials to use in order to secure the cluster.</p>\n"
  overload: System.Fabric.SecurityCredentials.CredentialType*
  modifiers.csharp:
  - public
  - get
  - protected set
  modifiers.vb:
  - Public
  - Get
  - Protected Set
- uid: System.Fabric.SecurityCredentials.LoadFrom(System.Fabric.CodePackageActivationContext,System.String,System.String)
  commentId: M:System.Fabric.SecurityCredentials.LoadFrom(System.Fabric.CodePackageActivationContext,System.String,System.String)
  id: LoadFrom(System.Fabric.CodePackageActivationContext,System.String,System.String)
  parent: System.Fabric.SecurityCredentials
  langs:
  - csharp
  - vb
  name: LoadFrom(CodePackageActivationContext, String, String)
  nameWithType: SecurityCredentials.LoadFrom(CodePackageActivationContext, String, String)
  fullName: System.Fabric.SecurityCredentials.LoadFrom(System.Fabric.CodePackageActivationContext, System.String, System.String)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/Common/SecurityCredentials.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: LoadFrom
    path: src/prod/src/managed/Api/src/System/Fabric/Common/SecurityCredentials.cs
    startLine: 139
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Instantiate <xref href=\"System.Fabric.SecurityCredentials\" data-throw-if-not-resolved=\"false\"></xref> object from service configuration settings file</p>\n"
  remarks: "\n<p> The configuration settings file (settings.xml) within the service configuration folder should contain all the security settings that is needed to create\n<xref href=\"System.Fabric.SecurityCredentials\" data-throw-if-not-resolved=\"false\"></xref> object and pass to the <xref href=\"System.Fabric.IStatefulServicePartition.CreateReplicator(System.Fabric.IStateProvider%2cSystem.Fabric.ReplicatorSettings)\" data-throw-if-not-resolved=\"false\"></xref> method.\nTypically, the onus is on the service author to read the settings.xml file, parse the values and appropriately construct the <xref href=\"System.Fabric.SecurityCredentials\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n<p>With the current helper method, the service author can bypass the above process.</p>\n<p>The following are the parameter names that should be provided in the service configuration \"settings.xml\", to be recognizable by windows fabric to perform the above parsing automatically:</p>\n<ol><li>\n<p>CredentialType–type of credentials to use to secure communication channel: X509 (X509 certificate credentials) or Windows (Windows credentials, requires active directory)</p>\n</li></ol>\n<p> CredentialType=X509</p>\n<ol><li>\n<p>StoreLocation-Store location to find the certificate: CurrentUser or LocalMachine</p>\n</li><li>\n<p>StoreName-name of the certificate store where the certificate should be searched</p>\n</li><li>\n<p>FindType-Identifies the type of value provided by in the FindValue parameter: FindBySubjectName or FindByThumbPrint</p>\n</li><li>\n<p>FindValue-Search target for finding the certificate</p>\n</li><li>\n<p>AllowedCommonNames-A comma separated list of certificate common names/dns names. This list should include all certificates used by replicators, it is used to validate incoming certificate.</p>\n</li><li>\n<p>IssuerThumbprints-A comma separated list of issuer certificate thumbprints. When specified, the incoming certificate is validated if it is issued by one of the entries in the list, in addition to chain validation.</p>\n</li><li>\n<p>RemoteCertThumbprints-A comma separated list of certificate thumbprints. This list should include all certificates used by replicators, it is used to validate incoming certificate.</p>\n</li><li>\n<p>ProtectionLevel-Indicates how the data is protected: Sign or EncryptAndSign or None.</p>\n</li></ol>\n<p> CredentialType=Windows</p>\n<ol><li>\n<p>ServicePrincipalName-Service Principal name registered for the service. Can be empty if the service/actor host processes runs as a machine account (e.g: NetworkService, LocalSystem etc.)</p>\n</li><li>\n<p>WindowsIdentities-A comma separated list of windows identities of all service/actor host processes.</p>\n</li><li>\n<p>ProtectionLevel-Indicates how the data is protected: Sign or EncryptAndSign or None.</p>\n</li></ol>\n<p>X509 configuration snippet sample</p>\n<pre><code>&lt;Section Name=\"SecurityConfig\"&gt;\n  &lt;Parameter Name=\"CredentialType\" Value=\"X509\" /&gt;\n  &lt;Parameter Name=\"FindType\" Value=\"FindByThumbprint\" /&gt;\n  &lt;Parameter Name=\"FindValue\" Value=\"9d c9 06 b1 69 dc 4f af fd 16 97 ac 78 1e 80 67 90 74 9d 2f\" /&gt;\n  &lt;Parameter Name=\"StoreLocation\" Value=\"LocalMachine\" /&gt;\n  &lt;Parameter Name=\"StoreName\" Value=\"My\" /&gt;\n  &lt;Parameter Name=\"ProtectionLevel\" Value=\"EncryptAndSign\" /&gt;\n  &lt;Parameter Name=\"AllowedCommonNames\" Value=\"My-Test-SAN1-Alice,My-Test-SAN1-Bob\" /&gt;\n&lt;/Section&gt;</code></pre>\n<p>Windows configuration snippet sample 1: all the service/actor host processes run as NetworkService or LocalSystem.</p>\n<pre><code>&lt;Section Name=\"SecurityConfig\"&gt;\n  &lt;Parameter Name=\"CredentialType\" Value=\"Windows\" /&gt;\n  &lt;Parameter Name=\"ServicePrincipalName\" Value=\"\" /&gt;\n  &lt;!--This machine group contains all machines in a cluster--&gt;\n  &lt;Parameter Name=\"WindowsIdentities\" Value=\"redmond\\ClusterMachineGroup\" /&gt;\n  &lt;Parameter Name=\"ProtectionLevel\" Value=\"EncryptAndSign\" /&gt;\n&lt;/Section&gt;</code></pre>\n<p>Windows configuration snippet sample 1: all service/actor host processes run as a group managed service account.</p>\n<pre><code>&lt;Section Name=\"SecurityConfig\"&gt;\n  &lt;Parameter Name=\"CredentialType\" Value=\"Windows\" /&gt;\n  &lt;Parameter Name=\"ServicePrincipalName\" Value=\"servicefabric/cluster.microsoft.com\" /&gt;\n  &lt;--All actor/service host processes run as redmond\\GroupManagedServiceAccount--&gt;\n  &lt;Parameter Name=\"WindowsIdentities\" Value=\"redmond\\GroupManagedServiceAccount\" /&gt;\n  &lt;Parameter Name=\"ProtectionLevel\" Value=\"EncryptAndSign\" /&gt;\n&lt;/Section&gt;</code></pre>\n"
  example: []
  syntax:
    content: public static SecurityCredentials LoadFrom(CodePackageActivationContext codePackageActivationContext, string configPackageName, string sectionName)
    content.vb: Public Shared Function LoadFrom(codePackageActivationContext As CodePackageActivationContext, configPackageName As String, sectionName As String) As SecurityCredentials
    parameters:
    - id: codePackageActivationContext
      type: System.Fabric.CodePackageActivationContext
      description: <p>The current code package activation context <xref href="System.Fabric.CodePackageActivationContext" data-throw-if-not-resolved="false"></xref>.</p>
    - id: configPackageName
      type: System.String
      description: <p>The current configuration package name.</p>
    - id: sectionName
      type: System.String
      description: <p>The section within the configuration file that defines all the security settings.</p>
    return:
      type: System.Fabric.SecurityCredentials
      description: The security credentials.
  overload: System.Fabric.SecurityCredentials.LoadFrom*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: System.Fabric
  commentId: N:System.Fabric
  isExternal: false
  name: System.Fabric
  nameWithType: System.Fabric
  fullName: System.Fabric
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.SecurityCredentials.System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
  commentId: M:System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  parent: System.Fabric.Messaging.Stream.ByteArraySerializer
  definition: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  name: Serialize<SecurityCredentials>()
  nameWithType: ByteArraySerializer.Serialize<SecurityCredentials>()
  fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<System.Fabric.SecurityCredentials>()
  nameWithType.vb: ByteArraySerializer.Serialize(Of SecurityCredentials)()
  fullname.vb: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of System.Fabric.SecurityCredentials)()
  name.vb: Serialize(Of SecurityCredentials)()
  spec.csharp:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
    name: Serialize<SecurityCredentials>
    nameWithType: ByteArraySerializer.Serialize<SecurityCredentials>
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<System.Fabric.SecurityCredentials>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
    name: Serialize(Of SecurityCredentials)
    nameWithType: ByteArraySerializer.Serialize(Of SecurityCredentials)
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of System.Fabric.SecurityCredentials)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  commentId: M:System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  isExternal: false
  name: Serialize<T>(T)
  nameWithType: ByteArraySerializer.Serialize<T>(T)
  fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<T>(T)
  nameWithType.vb: ByteArraySerializer.Serialize(Of T)(T)
  fullname.vb: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of T)(T)
  name.vb: Serialize(Of T)(T)
  spec.csharp:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
    name: Serialize<T>
    nameWithType: ByteArraySerializer.Serialize<T>
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
    name: Serialize(Of T)
    nameWithType: ByteArraySerializer.Serialize(Of T)
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.Messaging.Stream.ByteArraySerializer
  commentId: T:System.Fabric.Messaging.Stream.ByteArraySerializer
  parent: System.Fabric.Messaging.Stream
  isExternal: false
  name: ByteArraySerializer
  nameWithType: ByteArraySerializer
  fullName: System.Fabric.Messaging.Stream.ByteArraySerializer
- uid: System.Fabric.Messaging.Stream
  commentId: N:System.Fabric.Messaging.Stream
  isExternal: false
  name: System.Fabric.Messaging.Stream
  nameWithType: System.Fabric.Messaging.Stream
  fullName: System.Fabric.Messaging.Stream
- uid: System.Fabric.SecurityCredentials.CredentialType*
  commentId: Overload:System.Fabric.SecurityCredentials.CredentialType
  isExternal: false
  name: CredentialType
  nameWithType: SecurityCredentials.CredentialType
  fullName: System.Fabric.SecurityCredentials.CredentialType
- uid: System.Fabric.CredentialType
  commentId: T:System.Fabric.CredentialType
  parent: System.Fabric
  isExternal: false
  name: CredentialType
  nameWithType: CredentialType
  fullName: System.Fabric.CredentialType
- uid: System.Fabric.SecurityCredentials
  commentId: T:System.Fabric.SecurityCredentials
  parent: System.Fabric
  isExternal: false
  name: SecurityCredentials
  nameWithType: SecurityCredentials
  fullName: System.Fabric.SecurityCredentials
- uid: System.Fabric.CodePackageActivationContext
  commentId: T:System.Fabric.CodePackageActivationContext
  parent: System.Fabric
  isExternal: false
  name: CodePackageActivationContext
  nameWithType: CodePackageActivationContext
  fullName: System.Fabric.CodePackageActivationContext
- uid: System.Fabric.IStatefulServicePartition.CreateReplicator(System.Fabric.IStateProvider,System.Fabric.ReplicatorSettings)
  commentId: M:System.Fabric.IStatefulServicePartition.CreateReplicator(System.Fabric.IStateProvider,System.Fabric.ReplicatorSettings)
- uid: System.Fabric.SecurityCredentials.LoadFrom*
  commentId: Overload:System.Fabric.SecurityCredentials.LoadFrom
  isExternal: false
  name: LoadFrom
  nameWithType: SecurityCredentials.LoadFrom
  fullName: System.Fabric.SecurityCredentials.LoadFrom
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
