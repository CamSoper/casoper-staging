### YamlMime:ManagedReference
items:
- uid: Microsoft.ServiceFabric.Actors.ActorId
  commentId: T:Microsoft.ServiceFabric.Actors.ActorId
  id: ActorId
  parent: Microsoft.ServiceFabric.Actors
  children:
  - Microsoft.ServiceFabric.Actors.ActorId.#ctor(System.Guid)
  - Microsoft.ServiceFabric.Actors.ActorId.#ctor(System.Int64)
  - Microsoft.ServiceFabric.Actors.ActorId.#ctor(System.String)
  - Microsoft.ServiceFabric.Actors.ActorId.CompareTo(Microsoft.ServiceFabric.Actors.ActorId)
  - Microsoft.ServiceFabric.Actors.ActorId.CreateRandom
  - Microsoft.ServiceFabric.Actors.ActorId.Equals(Microsoft.ServiceFabric.Actors.ActorId)
  - Microsoft.ServiceFabric.Actors.ActorId.Equals(System.Object)
  - Microsoft.ServiceFabric.Actors.ActorId.GetGuidId
  - Microsoft.ServiceFabric.Actors.ActorId.GetHashCode
  - Microsoft.ServiceFabric.Actors.ActorId.GetLongId
  - Microsoft.ServiceFabric.Actors.ActorId.GetPartitionKey
  - Microsoft.ServiceFabric.Actors.ActorId.GetStringId
  - Microsoft.ServiceFabric.Actors.ActorId.Kind
  - Microsoft.ServiceFabric.Actors.ActorId.op_Equality(Microsoft.ServiceFabric.Actors.ActorId,Microsoft.ServiceFabric.Actors.ActorId)
  - Microsoft.ServiceFabric.Actors.ActorId.op_Inequality(Microsoft.ServiceFabric.Actors.ActorId,Microsoft.ServiceFabric.Actors.ActorId)
  - Microsoft.ServiceFabric.Actors.ActorId.ToString
  langs:
  - csharp
  - vb
  name: ActorId
  nameWithType: ActorId
  fullName: Microsoft.ServiceFabric.Actors.ActorId
  type: Class
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Actors/ActorId.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: ActorId
    path: src/prod/src/managed/Microsoft.ServiceFabric.Actors/ActorId.cs
    startLine: 18
  assemblies:
  - Microsoft.ServiceFabric.Actors
  namespace: Microsoft.ServiceFabric.Actors
  summary: "\nActorId represents identity of an actor within an actor service. The actors can be identified by <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref>,\n<xref href=\"System.Guid\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Int64\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: >-
      [DataContract(Name = "ActorId")]

      public sealed class ActorId : IEquatable<ActorId>, IComparable<ActorId>
    content.vb: >-
      <DataContract(Name:="ActorId")>

      Public NotInheritable Class ActorId
          Implements IEquatable(Of ActorId), IComparable(Of ActorId)
  inheritance:
  - System.Object
  implements:
  - System.IEquatable{Microsoft.ServiceFabric.Actors.ActorId}
  - System.IComparable{Microsoft.ServiceFabric.Actors.ActorId}
  inheritedMembers:
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.MemberwiseClone
  extensionMethods:
  - Microsoft.ServiceFabric.Actors.ActorId.System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
  attributes:
  - type: System.Runtime.Serialization.DataContractAttribute
    ctor: System.Runtime.Serialization.DataContractAttribute.#ctor
    arguments: []
    namedArguments:
    - name: Name
      type: System.String
      value: ActorId
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: Microsoft.ServiceFabric.Actors.ActorId.#ctor(System.Int64)
  commentId: M:Microsoft.ServiceFabric.Actors.ActorId.#ctor(System.Int64)
  id: '#ctor(System.Int64)'
  parent: Microsoft.ServiceFabric.Actors.ActorId
  langs:
  - csharp
  - vb
  name: ActorId(Int64)
  nameWithType: ActorId.ActorId(Int64)
  fullName: Microsoft.ServiceFabric.Actors.ActorId.ActorId(System.Int64)
  type: Constructor
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Actors/ActorId.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: .ctor
    path: src/prod/src/managed/Microsoft.ServiceFabric.Actors/ActorId.cs
    startLine: 43
  assemblies:
  - Microsoft.ServiceFabric.Actors
  namespace: Microsoft.ServiceFabric.Actors
  summary: "\nInitializes a new instance of ActorId class with Id value of type <xref href=\"System.Int64\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public ActorId(long id)
    content.vb: Public Sub New(id As Long)
    parameters:
    - id: id
      type: System.Int64
      description: Value for actor id.
  overload: Microsoft.ServiceFabric.Actors.ActorId.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceFabric.Actors.ActorId.#ctor(System.Guid)
  commentId: M:Microsoft.ServiceFabric.Actors.ActorId.#ctor(System.Guid)
  id: '#ctor(System.Guid)'
  parent: Microsoft.ServiceFabric.Actors.ActorId
  langs:
  - csharp
  - vb
  name: ActorId(Guid)
  nameWithType: ActorId.ActorId(Guid)
  fullName: Microsoft.ServiceFabric.Actors.ActorId.ActorId(System.Guid)
  type: Constructor
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Actors/ActorId.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: .ctor
    path: src/prod/src/managed/Microsoft.ServiceFabric.Actors/ActorId.cs
    startLine: 53
  assemblies:
  - Microsoft.ServiceFabric.Actors
  namespace: Microsoft.ServiceFabric.Actors
  summary: "\nInitializes a new instance of ActorId class with Id value of type <xref href=\"System.Guid\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public ActorId(Guid id)
    content.vb: Public Sub New(id As Guid)
    parameters:
    - id: id
      type: System.Guid
      description: Value for actor id.
  overload: Microsoft.ServiceFabric.Actors.ActorId.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceFabric.Actors.ActorId.#ctor(System.String)
  commentId: M:Microsoft.ServiceFabric.Actors.ActorId.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: Microsoft.ServiceFabric.Actors.ActorId
  langs:
  - csharp
  - vb
  name: ActorId(String)
  nameWithType: ActorId.ActorId(String)
  fullName: Microsoft.ServiceFabric.Actors.ActorId.ActorId(System.String)
  type: Constructor
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Actors/ActorId.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: .ctor
    path: src/prod/src/managed/Microsoft.ServiceFabric.Actors/ActorId.cs
    startLine: 63
  assemblies:
  - Microsoft.ServiceFabric.Actors
  namespace: Microsoft.ServiceFabric.Actors
  summary: "\nInitializes a new instance of ActorId class with Id value of type <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public ActorId(string id)
    content.vb: Public Sub New(id As String)
    parameters:
    - id: id
      type: System.String
      description: Value for actor id.
  overload: Microsoft.ServiceFabric.Actors.ActorId.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceFabric.Actors.ActorId.Kind
  commentId: P:Microsoft.ServiceFabric.Actors.ActorId.Kind
  id: Kind
  parent: Microsoft.ServiceFabric.Actors.ActorId
  langs:
  - csharp
  - vb
  name: Kind
  nameWithType: ActorId.Kind
  fullName: Microsoft.ServiceFabric.Actors.ActorId.Kind
  type: Property
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Actors/ActorId.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: Kind
    path: src/prod/src/managed/Microsoft.ServiceFabric.Actors/ActorId.cs
    startLine: 77
  assemblies:
  - Microsoft.ServiceFabric.Actors
  namespace: Microsoft.ServiceFabric.Actors
  summary: "\nGets the <xref href=\"Microsoft.ServiceFabric.Actors.ActorIdKind\" data-throw-if-not-resolved=\"false\"></xref> for the ActorId.\n"
  example: []
  syntax:
    content: public ActorIdKind Kind { get; }
    content.vb: Public ReadOnly Property Kind As ActorIdKind
    parameters: []
    return:
      type: Microsoft.ServiceFabric.Actors.ActorIdKind
      description: <xref href="Microsoft.ServiceFabric.Actors.ActorIdKind" data-throw-if-not-resolved="false"></xref> for the ActorId.
  overload: Microsoft.ServiceFabric.Actors.ActorId.Kind*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.ServiceFabric.Actors.ActorId.GetLongId
  commentId: M:Microsoft.ServiceFabric.Actors.ActorId.GetLongId
  id: GetLongId
  parent: Microsoft.ServiceFabric.Actors.ActorId
  langs:
  - csharp
  - vb
  name: GetLongId()
  nameWithType: ActorId.GetLongId()
  fullName: Microsoft.ServiceFabric.Actors.ActorId.GetLongId()
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Actors/ActorId.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: GetLongId
    path: src/prod/src/managed/Microsoft.ServiceFabric.Actors/ActorId.cs
    startLine: 86
  assemblies:
  - Microsoft.ServiceFabric.Actors
  namespace: Microsoft.ServiceFabric.Actors
  summary: "\nGets id for ActorId whose <xref href=\"Microsoft.ServiceFabric.Actors.ActorIdKind\" data-throw-if-not-resolved=\"false\"></xref> is <xref href=\"Microsoft.ServiceFabric.Actors.ActorIdKind.Long\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public long GetLongId()
    content.vb: Public Function GetLongId As Long
    return:
      type: System.Int64
      description: <xref href="System.Int64" data-throw-if-not-resolved="false"></xref> id value for AcotrId.
  overload: Microsoft.ServiceFabric.Actors.ActorId.GetLongId*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceFabric.Actors.ActorId.GetGuidId
  commentId: M:Microsoft.ServiceFabric.Actors.ActorId.GetGuidId
  id: GetGuidId
  parent: Microsoft.ServiceFabric.Actors.ActorId
  langs:
  - csharp
  - vb
  name: GetGuidId()
  nameWithType: ActorId.GetGuidId()
  fullName: Microsoft.ServiceFabric.Actors.ActorId.GetGuidId()
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Actors/ActorId.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: GetGuidId
    path: src/prod/src/managed/Microsoft.ServiceFabric.Actors/ActorId.cs
    startLine: 105
  assemblies:
  - Microsoft.ServiceFabric.Actors
  namespace: Microsoft.ServiceFabric.Actors
  summary: "\nGets id for ActorId whose <xref href=\"Microsoft.ServiceFabric.Actors.ActorIdKind\" data-throw-if-not-resolved=\"false\"></xref> is <xref href=\"Microsoft.ServiceFabric.Actors.ActorIdKind.Guid\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public Guid GetGuidId()
    content.vb: Public Function GetGuidId As Guid
    return:
      type: System.Guid
      description: <xref href="System.Guid" data-throw-if-not-resolved="false"></xref> id value for AcotrId.
  overload: Microsoft.ServiceFabric.Actors.ActorId.GetGuidId*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceFabric.Actors.ActorId.GetStringId
  commentId: M:Microsoft.ServiceFabric.Actors.ActorId.GetStringId
  id: GetStringId
  parent: Microsoft.ServiceFabric.Actors.ActorId
  langs:
  - csharp
  - vb
  name: GetStringId()
  nameWithType: ActorId.GetStringId()
  fullName: Microsoft.ServiceFabric.Actors.ActorId.GetStringId()
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Actors/ActorId.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: GetStringId
    path: src/prod/src/managed/Microsoft.ServiceFabric.Actors/ActorId.cs
    startLine: 124
  assemblies:
  - Microsoft.ServiceFabric.Actors
  namespace: Microsoft.ServiceFabric.Actors
  summary: "\nGets id for ActorId whose <xref href=\"Microsoft.ServiceFabric.Actors.ActorIdKind\" data-throw-if-not-resolved=\"false\"></xref> is <xref href=\"Microsoft.ServiceFabric.Actors.ActorIdKind.String\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public string GetStringId()
    content.vb: Public Function GetStringId As String
    return:
      type: System.String
      description: <xref href="System.String" data-throw-if-not-resolved="false"></xref> id value for AcotrId.
  overload: Microsoft.ServiceFabric.Actors.ActorId.GetStringId*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceFabric.Actors.ActorId.GetPartitionKey
  commentId: M:Microsoft.ServiceFabric.Actors.ActorId.GetPartitionKey
  id: GetPartitionKey
  parent: Microsoft.ServiceFabric.Actors.ActorId
  langs:
  - csharp
  - vb
  name: GetPartitionKey()
  nameWithType: ActorId.GetPartitionKey()
  fullName: Microsoft.ServiceFabric.Actors.ActorId.GetPartitionKey()
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Actors/ActorId.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: GetPartitionKey
    path: src/prod/src/managed/Microsoft.ServiceFabric.Actors/ActorId.cs
    startLine: 155
  assemblies:
  - Microsoft.ServiceFabric.Actors
  namespace: Microsoft.ServiceFabric.Actors
  summary: "\nGets partition key for the ActorId.\n"
  remarks: "\n<ul><li></li><li></li></ul>\n"
  example: []
  syntax:
    content: public long GetPartitionKey()
    content.vb: Public Function GetPartitionKey As Long
    return:
      type: System.Int64
      description: The key for locating the partition of the actor service that is responsible for this ActorId.
  overload: Microsoft.ServiceFabric.Actors.ActorId.GetPartitionKey*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceFabric.Actors.ActorId.ToString
  commentId: M:Microsoft.ServiceFabric.Actors.ActorId.ToString
  id: ToString
  parent: Microsoft.ServiceFabric.Actors.ActorId
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: ActorId.ToString()
  fullName: Microsoft.ServiceFabric.Actors.ActorId.ToString()
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Actors/ActorId.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: ToString
    path: src/prod/src/managed/Microsoft.ServiceFabric.Actors/ActorId.cs
    startLine: 191
  assemblies:
  - Microsoft.ServiceFabric.Actors
  namespace: Microsoft.ServiceFabric.Actors
  summary: "\nOverrides <xref href=\"System.Object.ToString\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public override string ToString()
    content.vb: Public Overrides Function ToString As String
    return:
      type: System.String
      description: Returns a string that represents the current object.
  overridden: System.Object.ToString
  overload: Microsoft.ServiceFabric.Actors.ActorId.ToString*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Microsoft.ServiceFabric.Actors.ActorId.GetHashCode
  commentId: M:Microsoft.ServiceFabric.Actors.ActorId.GetHashCode
  id: GetHashCode
  parent: Microsoft.ServiceFabric.Actors.ActorId
  langs:
  - csharp
  - vb
  name: GetHashCode()
  nameWithType: ActorId.GetHashCode()
  fullName: Microsoft.ServiceFabric.Actors.ActorId.GetHashCode()
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Actors/ActorId.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: GetHashCode
    path: src/prod/src/managed/Microsoft.ServiceFabric.Actors/ActorId.cs
    startLine: 302
  assemblies:
  - Microsoft.ServiceFabric.Actors
  namespace: Microsoft.ServiceFabric.Actors
  summary: "\nOverrides <xref href=\"System.Object.GetHashCode\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public override int GetHashCode()
    content.vb: Public Overrides Function GetHashCode As Integer
    return:
      type: System.Int32
      description: Hash code for the current object.
  overridden: System.Object.GetHashCode
  overload: Microsoft.ServiceFabric.Actors.ActorId.GetHashCode*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Microsoft.ServiceFabric.Actors.ActorId.Equals(System.Object)
  commentId: M:Microsoft.ServiceFabric.Actors.ActorId.Equals(System.Object)
  id: Equals(System.Object)
  parent: Microsoft.ServiceFabric.Actors.ActorId
  langs:
  - csharp
  - vb
  name: Equals(Object)
  nameWithType: ActorId.Equals(Object)
  fullName: Microsoft.ServiceFabric.Actors.ActorId.Equals(System.Object)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Actors/ActorId.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: Equals
    path: src/prod/src/managed/Microsoft.ServiceFabric.Actors/ActorId.cs
    startLine: 328
  assemblies:
  - Microsoft.ServiceFabric.Actors
  namespace: Microsoft.ServiceFabric.Actors
  summary: "\nDetermines whether this instance and a specified object, which must also be a <xref href=\"Microsoft.ServiceFabric.Actors.ActorId\" data-throw-if-not-resolved=\"false\"></xref> object, \nhave the same value. Overrides <xref href=\"System.Object.Equals(System.Object)\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public override bool Equals(object obj)
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
    parameters:
    - id: obj
      type: System.Object
      description: 'The actorId to compare to this instance. '
    return:
      type: System.Boolean
      description: "true if obj is a <xref href=\"Microsoft.ServiceFabric.Actors.ActorId\" data-throw-if-not-resolved=\"false\"></xref> and its value is the same as this instance; \notherwise, false. If obj is null, the method returns false."
  overridden: System.Object.Equals(System.Object)
  overload: Microsoft.ServiceFabric.Actors.ActorId.Equals*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Microsoft.ServiceFabric.Actors.ActorId.Equals(Microsoft.ServiceFabric.Actors.ActorId)
  commentId: M:Microsoft.ServiceFabric.Actors.ActorId.Equals(Microsoft.ServiceFabric.Actors.ActorId)
  id: Equals(Microsoft.ServiceFabric.Actors.ActorId)
  parent: Microsoft.ServiceFabric.Actors.ActorId
  langs:
  - csharp
  - vb
  name: Equals(ActorId)
  nameWithType: ActorId.Equals(ActorId)
  fullName: Microsoft.ServiceFabric.Actors.ActorId.Equals(Microsoft.ServiceFabric.Actors.ActorId)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Actors/ActorId.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: Equals
    path: src/prod/src/managed/Microsoft.ServiceFabric.Actors/ActorId.cs
    startLine: 351
  assemblies:
  - Microsoft.ServiceFabric.Actors
  namespace: Microsoft.ServiceFabric.Actors
  summary: "\nDetermines whether this instance and another specified <xref href=\"Microsoft.ServiceFabric.Actors.ActorId\" data-throw-if-not-resolved=\"false\"></xref> object have the same value.\n"
  example: []
  syntax:
    content: public bool Equals(ActorId other)
    content.vb: Public Function Equals(other As ActorId) As Boolean
    parameters:
    - id: other
      type: Microsoft.ServiceFabric.Actors.ActorId
      description: 'The actorId to compare to this instance. '
    return:
      type: System.Boolean
      description: "true if the <xref href=\"Microsoft.ServiceFabric.Actors.ActorIdKind\" data-throw-if-not-resolved=\"false\"></xref> and id of the other parameter is the same as the\n<xref href=\"Microsoft.ServiceFabric.Actors.ActorIdKind\" data-throw-if-not-resolved=\"false\"></xref> and id of this instance; otherwise, false. \nIf other is null, the method returns false."
  overload: Microsoft.ServiceFabric.Actors.ActorId.Equals*
  implements:
  - System.IEquatable{Microsoft.ServiceFabric.Actors.ActorId}.Equals(Microsoft.ServiceFabric.Actors.ActorId)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceFabric.Actors.ActorId.CompareTo(Microsoft.ServiceFabric.Actors.ActorId)
  commentId: M:Microsoft.ServiceFabric.Actors.ActorId.CompareTo(Microsoft.ServiceFabric.Actors.ActorId)
  id: CompareTo(Microsoft.ServiceFabric.Actors.ActorId)
  parent: Microsoft.ServiceFabric.Actors.ActorId
  langs:
  - csharp
  - vb
  name: CompareTo(ActorId)
  nameWithType: ActorId.CompareTo(ActorId)
  fullName: Microsoft.ServiceFabric.Actors.ActorId.CompareTo(Microsoft.ServiceFabric.Actors.ActorId)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Actors/ActorId.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: CompareTo
    path: src/prod/src/managed/Microsoft.ServiceFabric.Actors/ActorId.cs
    startLine: 372
  assemblies:
  - Microsoft.ServiceFabric.Actors
  namespace: Microsoft.ServiceFabric.Actors
  summary: "\nCompares this instance with a specified <xref href=\"Microsoft.ServiceFabric.Actors.ActorId\" data-throw-if-not-resolved=\"false\"></xref> object and indicates whether this\ninstance precedes, follows, or appears in the same position in the sort order as the specified actorId. \n"
  remarks: >-
    The comparison is done based on the id if both the instances have same <xref href="Microsoft.ServiceFabric.Actors.ActorIdKind" data-throw-if-not-resolved="false"></xref>.

    If <xref href="Microsoft.ServiceFabric.Actors.ActorIdKind" data-throw-if-not-resolved="false"></xref> is different, then comparison is done based on string representation of the actor id.
  example: []
  syntax:
    content: public int CompareTo(ActorId other)
    content.vb: Public Function CompareTo(other As ActorId) As Integer
    parameters:
    - id: other
      type: Microsoft.ServiceFabric.Actors.ActorId
      description: 'The actorId to compare with this instance. '
    return:
      type: System.Int32
      description: >-
        A 32-bit signed integer that indicates whether this instance precedes, follows, or appears
         in the same position in the sort order as the other parameter.
  overload: Microsoft.ServiceFabric.Actors.ActorId.CompareTo*
  implements:
  - System.IComparable{Microsoft.ServiceFabric.Actors.ActorId}.CompareTo(Microsoft.ServiceFabric.Actors.ActorId)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceFabric.Actors.ActorId.CreateRandom
  commentId: M:Microsoft.ServiceFabric.Actors.ActorId.CreateRandom
  id: CreateRandom
  parent: Microsoft.ServiceFabric.Actors.ActorId
  langs:
  - csharp
  - vb
  name: CreateRandom()
  nameWithType: ActorId.CreateRandom()
  fullName: Microsoft.ServiceFabric.Actors.ActorId.CreateRandom()
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Actors/ActorId.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: CreateRandom
    path: src/prod/src/managed/Microsoft.ServiceFabric.Actors/ActorId.cs
    startLine: 384
  assemblies:
  - Microsoft.ServiceFabric.Actors
  namespace: Microsoft.ServiceFabric.Actors
  summary: "\nCreate a new instance of the <xref href=\"Microsoft.ServiceFabric.Actors.ActorId\" data-throw-if-not-resolved=\"false\"></xref> of kind <xref href=\"Microsoft.ServiceFabric.Actors.ActorIdKind.Long\" data-throw-if-not-resolved=\"false\"></xref> \nwith a random <xref href=\"System.Int64\" data-throw-if-not-resolved=\"false\"></xref> id value. \n"
  remarks: This method is thread-safe and generates a new random <xref href="Microsoft.ServiceFabric.Actors.ActorId" data-throw-if-not-resolved="false"></xref> every time it is called.
  example: []
  syntax:
    content: public static ActorId CreateRandom()
    content.vb: Public Shared Function CreateRandom As ActorId
    return:
      type: Microsoft.ServiceFabric.Actors.ActorId
      description: A new ActorId object.
  overload: Microsoft.ServiceFabric.Actors.ActorId.CreateRandom*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.ServiceFabric.Actors.ActorId.op_Equality(Microsoft.ServiceFabric.Actors.ActorId,Microsoft.ServiceFabric.Actors.ActorId)
  commentId: M:Microsoft.ServiceFabric.Actors.ActorId.op_Equality(Microsoft.ServiceFabric.Actors.ActorId,Microsoft.ServiceFabric.Actors.ActorId)
  id: op_Equality(Microsoft.ServiceFabric.Actors.ActorId,Microsoft.ServiceFabric.Actors.ActorId)
  parent: Microsoft.ServiceFabric.Actors.ActorId
  langs:
  - csharp
  - vb
  name: Equality(ActorId, ActorId)
  nameWithType: ActorId.Equality(ActorId, ActorId)
  fullName: Microsoft.ServiceFabric.Actors.ActorId.Equality(Microsoft.ServiceFabric.Actors.ActorId, Microsoft.ServiceFabric.Actors.ActorId)
  type: Operator
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Actors/ActorId.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: op_Equality
    path: src/prod/src/managed/Microsoft.ServiceFabric.Actors/ActorId.cs
    startLine: 401
  assemblies:
  - Microsoft.ServiceFabric.Actors
  namespace: Microsoft.ServiceFabric.Actors
  summary: "\nDetermines whether two specified actorIds have the same id and <xref href=\"Microsoft.ServiceFabric.Actors.ActorIdKind\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public static bool operator ==(ActorId x, ActorId y)
    content.vb: Public Shared Operator =(x As ActorId, y As ActorId) As Boolean
    parameters:
    - id: x
      type: Microsoft.ServiceFabric.Actors.ActorId
      description: 'The first actorId to compare, or null. '
    - id: y
      type: Microsoft.ServiceFabric.Actors.ActorId
      description: 'The second actorId to compare, or null. '
    return:
      type: System.Boolean
      description: true if the id and <xref href="Microsoft.ServiceFabric.Actors.ActorIdKind" data-throw-if-not-resolved="false"></xref> is same for both objects; otherwise, false.
  overload: Microsoft.ServiceFabric.Actors.ActorId.op_Equality*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.ServiceFabric.Actors.ActorId.op_Inequality(Microsoft.ServiceFabric.Actors.ActorId,Microsoft.ServiceFabric.Actors.ActorId)
  commentId: M:Microsoft.ServiceFabric.Actors.ActorId.op_Inequality(Microsoft.ServiceFabric.Actors.ActorId,Microsoft.ServiceFabric.Actors.ActorId)
  id: op_Inequality(Microsoft.ServiceFabric.Actors.ActorId,Microsoft.ServiceFabric.Actors.ActorId)
  parent: Microsoft.ServiceFabric.Actors.ActorId
  langs:
  - csharp
  - vb
  name: Inequality(ActorId, ActorId)
  nameWithType: ActorId.Inequality(ActorId, ActorId)
  fullName: Microsoft.ServiceFabric.Actors.ActorId.Inequality(Microsoft.ServiceFabric.Actors.ActorId, Microsoft.ServiceFabric.Actors.ActorId)
  type: Operator
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Actors/ActorId.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: op_Inequality
    path: src/prod/src/managed/Microsoft.ServiceFabric.Actors/ActorId.cs
    startLine: 423
  assemblies:
  - Microsoft.ServiceFabric.Actors
  namespace: Microsoft.ServiceFabric.Actors
  summary: "\nDetermines whether two specified actorIds have different values for id and <xref href=\"Microsoft.ServiceFabric.Actors.ActorIdKind\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public static bool operator !=(ActorId x, ActorId y)
    content.vb: Public Shared Operator <>(x As ActorId, y As ActorId) As Boolean
    parameters:
    - id: x
      type: Microsoft.ServiceFabric.Actors.ActorId
      description: 'The first actorId to compare, or null. '
    - id: y
      type: Microsoft.ServiceFabric.Actors.ActorId
      description: 'The second actorId to compare, or null. '
    return:
      type: System.Boolean
      description: true if the id or <xref href="Microsoft.ServiceFabric.Actors.ActorIdKind" data-throw-if-not-resolved="false"></xref> is different for both objects; otherwise, true.
  overload: Microsoft.ServiceFabric.Actors.ActorId.op_Inequality*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Guid
  commentId: T:System.Guid
  parent: System
  isExternal: true
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: System.Int64
  commentId: T:System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: Microsoft.ServiceFabric.Actors
  commentId: N:Microsoft.ServiceFabric.Actors
  isExternal: false
  name: Microsoft.ServiceFabric.Actors
  nameWithType: Microsoft.ServiceFabric.Actors
  fullName: Microsoft.ServiceFabric.Actors
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.IEquatable{Microsoft.ServiceFabric.Actors.ActorId}
  commentId: T:System.IEquatable{Microsoft.ServiceFabric.Actors.ActorId}
  parent: System
  definition: System.IEquatable`1
  name: IEquatable<ActorId>
  nameWithType: IEquatable<ActorId>
  fullName: System.IEquatable<Microsoft.ServiceFabric.Actors.ActorId>
  nameWithType.vb: IEquatable(Of ActorId)
  fullname.vb: System.IEquatable(Of Microsoft.ServiceFabric.Actors.ActorId)
  name.vb: IEquatable(Of ActorId)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.ServiceFabric.Actors.ActorId
    name: ActorId
    nameWithType: ActorId
    fullName: Microsoft.ServiceFabric.Actors.ActorId
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.ServiceFabric.Actors.ActorId
    name: ActorId
    nameWithType: ActorId
    fullName: Microsoft.ServiceFabric.Actors.ActorId
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IComparable{Microsoft.ServiceFabric.Actors.ActorId}
  commentId: T:System.IComparable{Microsoft.ServiceFabric.Actors.ActorId}
  parent: System
  definition: System.IComparable`1
  name: IComparable<ActorId>
  nameWithType: IComparable<ActorId>
  fullName: System.IComparable<Microsoft.ServiceFabric.Actors.ActorId>
  nameWithType.vb: IComparable(Of ActorId)
  fullname.vb: System.IComparable(Of Microsoft.ServiceFabric.Actors.ActorId)
  name.vb: IComparable(Of ActorId)
  spec.csharp:
  - uid: System.IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: System.IComparable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.ServiceFabric.Actors.ActorId
    name: ActorId
    nameWithType: ActorId
    fullName: Microsoft.ServiceFabric.Actors.ActorId
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: System.IComparable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.ServiceFabric.Actors.ActorId
    name: ActorId
    nameWithType: ActorId
    fullName: Microsoft.ServiceFabric.Actors.ActorId
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceFabric.Actors.ActorId.System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
  commentId: M:System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  parent: System.Fabric.Messaging.Stream.ByteArraySerializer
  definition: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  name: Serialize<ActorId>()
  nameWithType: ByteArraySerializer.Serialize<ActorId>()
  fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<Microsoft.ServiceFabric.Actors.ActorId>()
  nameWithType.vb: ByteArraySerializer.Serialize(Of ActorId)()
  fullname.vb: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of Microsoft.ServiceFabric.Actors.ActorId)()
  name.vb: Serialize(Of ActorId)()
  spec.csharp:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
    name: Serialize<ActorId>
    nameWithType: ByteArraySerializer.Serialize<ActorId>
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<Microsoft.ServiceFabric.Actors.ActorId>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
    name: Serialize(Of ActorId)
    nameWithType: ByteArraySerializer.Serialize(Of ActorId)
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of Microsoft.ServiceFabric.Actors.ActorId)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.IEquatable`1
  commentId: T:System.IEquatable`1
  isExternal: true
  name: IEquatable<T>
  nameWithType: IEquatable<T>
  fullName: System.IEquatable<T>
  nameWithType.vb: IEquatable(Of T)
  fullname.vb: System.IEquatable(Of T)
  name.vb: IEquatable(Of T)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IComparable`1
  commentId: T:System.IComparable`1
  isExternal: true
  name: IComparable<T>
  nameWithType: IComparable<T>
  fullName: System.IComparable<T>
  nameWithType.vb: IComparable(Of T)
  fullname.vb: System.IComparable(Of T)
  name.vb: IComparable(Of T)
  spec.csharp:
  - uid: System.IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: System.IComparable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: System.IComparable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  commentId: M:System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  isExternal: false
  name: Serialize<T>(T)
  nameWithType: ByteArraySerializer.Serialize<T>(T)
  fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<T>(T)
  nameWithType.vb: ByteArraySerializer.Serialize(Of T)(T)
  fullname.vb: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of T)(T)
  name.vb: Serialize(Of T)(T)
  spec.csharp:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
    name: Serialize<T>
    nameWithType: ByteArraySerializer.Serialize<T>
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
    name: Serialize(Of T)
    nameWithType: ByteArraySerializer.Serialize(Of T)
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.Messaging.Stream.ByteArraySerializer
  commentId: T:System.Fabric.Messaging.Stream.ByteArraySerializer
  parent: System.Fabric.Messaging.Stream
  isExternal: false
  name: ByteArraySerializer
  nameWithType: ByteArraySerializer
  fullName: System.Fabric.Messaging.Stream.ByteArraySerializer
- uid: System.Fabric.Messaging.Stream
  commentId: N:System.Fabric.Messaging.Stream
  isExternal: false
  name: System.Fabric.Messaging.Stream
  nameWithType: System.Fabric.Messaging.Stream
  fullName: System.Fabric.Messaging.Stream
- uid: Microsoft.ServiceFabric.Actors.ActorId.#ctor*
  commentId: Overload:Microsoft.ServiceFabric.Actors.ActorId.#ctor
  isExternal: false
  name: ActorId
  nameWithType: ActorId.ActorId
  fullName: Microsoft.ServiceFabric.Actors.ActorId.ActorId
- uid: Microsoft.ServiceFabric.Actors.ActorIdKind
  commentId: T:Microsoft.ServiceFabric.Actors.ActorIdKind
  parent: Microsoft.ServiceFabric.Actors
  isExternal: false
  name: ActorIdKind
  nameWithType: ActorIdKind
  fullName: Microsoft.ServiceFabric.Actors.ActorIdKind
- uid: Microsoft.ServiceFabric.Actors.ActorId.Kind*
  commentId: Overload:Microsoft.ServiceFabric.Actors.ActorId.Kind
  isExternal: false
  name: Kind
  nameWithType: ActorId.Kind
  fullName: Microsoft.ServiceFabric.Actors.ActorId.Kind
- uid: Microsoft.ServiceFabric.Actors.ActorIdKind.Long
  commentId: F:Microsoft.ServiceFabric.Actors.ActorIdKind.Long
- uid: Microsoft.ServiceFabric.Actors.ActorId.GetLongId*
  commentId: Overload:Microsoft.ServiceFabric.Actors.ActorId.GetLongId
  isExternal: false
  name: GetLongId
  nameWithType: ActorId.GetLongId
  fullName: Microsoft.ServiceFabric.Actors.ActorId.GetLongId
- uid: Microsoft.ServiceFabric.Actors.ActorIdKind.Guid
  commentId: F:Microsoft.ServiceFabric.Actors.ActorIdKind.Guid
- uid: Microsoft.ServiceFabric.Actors.ActorId.GetGuidId*
  commentId: Overload:Microsoft.ServiceFabric.Actors.ActorId.GetGuidId
  isExternal: false
  name: GetGuidId
  nameWithType: ActorId.GetGuidId
  fullName: Microsoft.ServiceFabric.Actors.ActorId.GetGuidId
- uid: Microsoft.ServiceFabric.Actors.ActorIdKind.String
  commentId: F:Microsoft.ServiceFabric.Actors.ActorIdKind.String
- uid: Microsoft.ServiceFabric.Actors.ActorId.GetStringId*
  commentId: Overload:Microsoft.ServiceFabric.Actors.ActorId.GetStringId
  isExternal: false
  name: GetStringId
  nameWithType: ActorId.GetStringId
  fullName: Microsoft.ServiceFabric.Actors.ActorId.GetStringId
- uid: Microsoft.ServiceFabric.Actors.ActorId.GetPartitionKey*
  commentId: Overload:Microsoft.ServiceFabric.Actors.ActorId.GetPartitionKey
  isExternal: false
  name: GetPartitionKey
  nameWithType: ActorId.GetPartitionKey
  fullName: Microsoft.ServiceFabric.Actors.ActorId.GetPartitionKey
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceFabric.Actors.ActorId.ToString*
  commentId: Overload:Microsoft.ServiceFabric.Actors.ActorId.ToString
  isExternal: false
  name: ToString
  nameWithType: ActorId.ToString
  fullName: Microsoft.ServiceFabric.Actors.ActorId.ToString
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceFabric.Actors.ActorId.GetHashCode*
  commentId: Overload:Microsoft.ServiceFabric.Actors.ActorId.GetHashCode
  isExternal: false
  name: GetHashCode
  nameWithType: ActorId.GetHashCode
  fullName: Microsoft.ServiceFabric.Actors.ActorId.GetHashCode
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Microsoft.ServiceFabric.Actors.ActorId
  commentId: T:Microsoft.ServiceFabric.Actors.ActorId
  parent: Microsoft.ServiceFabric.Actors
  isExternal: false
  name: ActorId
  nameWithType: ActorId
  fullName: Microsoft.ServiceFabric.Actors.ActorId
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceFabric.Actors.ActorId.Equals*
  commentId: Overload:Microsoft.ServiceFabric.Actors.ActorId.Equals
  isExternal: false
  name: Equals
  nameWithType: ActorId.Equals
  fullName: Microsoft.ServiceFabric.Actors.ActorId.Equals
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.IEquatable{Microsoft.ServiceFabric.Actors.ActorId}.Equals(Microsoft.ServiceFabric.Actors.ActorId)
  commentId: M:System.IEquatable{Microsoft.ServiceFabric.Actors.ActorId}.Equals(Microsoft.ServiceFabric.Actors.ActorId)
  parent: System.IEquatable{Microsoft.ServiceFabric.Actors.ActorId}
  definition: System.IEquatable`1.Equals(`0)
  name: Equals(ActorId)
  nameWithType: IEquatable<ActorId>.Equals(ActorId)
  fullName: System.IEquatable<Microsoft.ServiceFabric.Actors.ActorId>.Equals(Microsoft.ServiceFabric.Actors.ActorId)
  nameWithType.vb: IEquatable(Of ActorId).Equals(ActorId)
  fullname.vb: System.IEquatable(Of Microsoft.ServiceFabric.Actors.ActorId).Equals(Microsoft.ServiceFabric.Actors.ActorId)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable<ActorId>.Equals
    fullName: System.IEquatable<Microsoft.ServiceFabric.Actors.ActorId>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.ServiceFabric.Actors.ActorId
    name: ActorId
    nameWithType: ActorId
    fullName: Microsoft.ServiceFabric.Actors.ActorId
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable(Of ActorId).Equals
    fullName: System.IEquatable(Of Microsoft.ServiceFabric.Actors.ActorId).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.ServiceFabric.Actors.ActorId
    name: ActorId
    nameWithType: ActorId
    fullName: Microsoft.ServiceFabric.Actors.ActorId
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IEquatable`1.Equals(`0)
  commentId: M:System.IEquatable`1.Equals(`0)
  isExternal: true
  name: Equals(T)
  nameWithType: IEquatable<T>.Equals(T)
  fullName: System.IEquatable<T>.Equals(T)
  nameWithType.vb: IEquatable(Of T).Equals(T)
  fullname.vb: System.IEquatable(Of T).Equals(T)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable<T>.Equals
    fullName: System.IEquatable<T>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable(Of T).Equals
    fullName: System.IEquatable(Of T).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceFabric.Actors.ActorId.CompareTo*
  commentId: Overload:Microsoft.ServiceFabric.Actors.ActorId.CompareTo
  isExternal: false
  name: CompareTo
  nameWithType: ActorId.CompareTo
  fullName: Microsoft.ServiceFabric.Actors.ActorId.CompareTo
- uid: System.IComparable{Microsoft.ServiceFabric.Actors.ActorId}.CompareTo(Microsoft.ServiceFabric.Actors.ActorId)
  commentId: M:System.IComparable{Microsoft.ServiceFabric.Actors.ActorId}.CompareTo(Microsoft.ServiceFabric.Actors.ActorId)
  parent: System.IComparable{Microsoft.ServiceFabric.Actors.ActorId}
  definition: System.IComparable`1.CompareTo(`0)
  name: CompareTo(ActorId)
  nameWithType: IComparable<ActorId>.CompareTo(ActorId)
  fullName: System.IComparable<Microsoft.ServiceFabric.Actors.ActorId>.CompareTo(Microsoft.ServiceFabric.Actors.ActorId)
  nameWithType.vb: IComparable(Of ActorId).CompareTo(ActorId)
  fullname.vb: System.IComparable(Of Microsoft.ServiceFabric.Actors.ActorId).CompareTo(Microsoft.ServiceFabric.Actors.ActorId)
  spec.csharp:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    nameWithType: IComparable<ActorId>.CompareTo
    fullName: System.IComparable<Microsoft.ServiceFabric.Actors.ActorId>.CompareTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.ServiceFabric.Actors.ActorId
    name: ActorId
    nameWithType: ActorId
    fullName: Microsoft.ServiceFabric.Actors.ActorId
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    nameWithType: IComparable(Of ActorId).CompareTo
    fullName: System.IComparable(Of Microsoft.ServiceFabric.Actors.ActorId).CompareTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.ServiceFabric.Actors.ActorId
    name: ActorId
    nameWithType: ActorId
    fullName: Microsoft.ServiceFabric.Actors.ActorId
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IComparable`1.CompareTo(`0)
  commentId: M:System.IComparable`1.CompareTo(`0)
  isExternal: true
  name: CompareTo(T)
  nameWithType: IComparable<T>.CompareTo(T)
  fullName: System.IComparable<T>.CompareTo(T)
  nameWithType.vb: IComparable(Of T).CompareTo(T)
  fullname.vb: System.IComparable(Of T).CompareTo(T)
  spec.csharp:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    nameWithType: IComparable<T>.CompareTo
    fullName: System.IComparable<T>.CompareTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    nameWithType: IComparable(Of T).CompareTo
    fullName: System.IComparable(Of T).CompareTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceFabric.Actors.ActorId.CreateRandom*
  commentId: Overload:Microsoft.ServiceFabric.Actors.ActorId.CreateRandom
  isExternal: false
  name: CreateRandom
  nameWithType: ActorId.CreateRandom
  fullName: Microsoft.ServiceFabric.Actors.ActorId.CreateRandom
- uid: Microsoft.ServiceFabric.Actors.ActorId.op_Equality*
  commentId: Overload:Microsoft.ServiceFabric.Actors.ActorId.op_Equality
  isExternal: false
  name: Equality
  nameWithType: ActorId.Equality
  fullName: Microsoft.ServiceFabric.Actors.ActorId.Equality
- uid: Microsoft.ServiceFabric.Actors.ActorId.op_Inequality*
  commentId: Overload:Microsoft.ServiceFabric.Actors.ActorId.op_Inequality
  isExternal: false
  name: Inequality
  nameWithType: ActorId.Inequality
  fullName: Microsoft.ServiceFabric.Actors.ActorId.Inequality
