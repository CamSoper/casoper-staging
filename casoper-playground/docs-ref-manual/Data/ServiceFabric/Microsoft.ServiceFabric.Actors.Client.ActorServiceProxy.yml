### YamlMime:ManagedReference
items:
- uid: Microsoft.ServiceFabric.Actors.Client.ActorServiceProxy
  commentId: T:Microsoft.ServiceFabric.Actors.Client.ActorServiceProxy
  id: ActorServiceProxy
  parent: Microsoft.ServiceFabric.Actors.Client
  children:
  - Microsoft.ServiceFabric.Actors.Client.ActorServiceProxy.#ctor
  - Microsoft.ServiceFabric.Actors.Client.ActorServiceProxy.Create(System.Uri,Microsoft.ServiceFabric.Actors.ActorId,System.String)
  - Microsoft.ServiceFabric.Actors.Client.ActorServiceProxy.Create(System.Uri,System.Int64,System.String)
  - Microsoft.ServiceFabric.Actors.Client.ActorServiceProxy.Create``1(System.Uri,Microsoft.ServiceFabric.Actors.ActorId,System.String)
  - Microsoft.ServiceFabric.Actors.Client.ActorServiceProxy.Create``1(System.Uri,System.Int64,System.String)
  langs:
  - csharp
  - vb
  name: ActorServiceProxy
  nameWithType: ActorServiceProxy
  fullName: Microsoft.ServiceFabric.Actors.Client.ActorServiceProxy
  type: Class
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Actors/Client/ActorServiceProxy.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: ActorServiceProxy
    path: src/prod/src/managed/Microsoft.ServiceFabric.Actors/Client/ActorServiceProxy.cs
    startLine: 13
  assemblies:
  - Microsoft.ServiceFabric.Actors
  namespace: Microsoft.ServiceFabric.Actors.Client
  summary: "\nProxy used by clients to interact with the actor service running in Service Fabric cluster\nand perform actor service level operations.\n"
  example: []
  syntax:
    content: public sealed class ActorServiceProxy
    content.vb: Public NotInheritable Class ActorServiceProxy
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  extensionMethods:
  - Microsoft.ServiceFabric.Actors.Client.ActorServiceProxy.System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: Microsoft.ServiceFabric.Actors.Client.ActorServiceProxy.#ctor
  commentId: M:Microsoft.ServiceFabric.Actors.Client.ActorServiceProxy.#ctor
  id: '#ctor'
  parent: Microsoft.ServiceFabric.Actors.Client.ActorServiceProxy
  langs:
  - csharp
  - vb
  name: ActorServiceProxy()
  nameWithType: ActorServiceProxy.ActorServiceProxy()
  fullName: Microsoft.ServiceFabric.Actors.Client.ActorServiceProxy.ActorServiceProxy()
  type: Constructor
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Actors/Client/ActorServiceProxy.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: .ctor
    path: src/prod/src/managed/Microsoft.ServiceFabric.Actors/Client/ActorServiceProxy.cs
    startLine: 18
  assemblies:
  - Microsoft.ServiceFabric.Actors
  namespace: Microsoft.ServiceFabric.Actors.Client
  summary: "\nInitializes a new instance of the <xref href=\"Microsoft.ServiceFabric.Actors.Client.ActorServiceProxy\" data-throw-if-not-resolved=\"false\"></xref> class.\n"
  example: []
  syntax:
    content: public ActorServiceProxy()
    content.vb: Public Sub New
  overload: Microsoft.ServiceFabric.Actors.Client.ActorServiceProxy.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceFabric.Actors.Client.ActorServiceProxy.Create``1(System.Uri,Microsoft.ServiceFabric.Actors.ActorId,System.String)
  commentId: M:Microsoft.ServiceFabric.Actors.Client.ActorServiceProxy.Create``1(System.Uri,Microsoft.ServiceFabric.Actors.ActorId,System.String)
  id: Create``1(System.Uri,Microsoft.ServiceFabric.Actors.ActorId,System.String)
  parent: Microsoft.ServiceFabric.Actors.Client.ActorServiceProxy
  langs:
  - csharp
  - vb
  name: Create<TServiceInterface>(Uri, ActorId, String)
  nameWithType: ActorServiceProxy.Create<TServiceInterface>(Uri, ActorId, String)
  fullName: Microsoft.ServiceFabric.Actors.Client.ActorServiceProxy.Create<TServiceInterface>(System.Uri, Microsoft.ServiceFabric.Actors.ActorId, System.String)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Actors/Client/ActorServiceProxy.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: Create
    path: src/prod/src/managed/Microsoft.ServiceFabric.Actors/Client/ActorServiceProxy.cs
    startLine: 33
  assemblies:
  - Microsoft.ServiceFabric.Actors
  namespace: Microsoft.ServiceFabric.Actors.Client
  summary: "\nCreate a proxy to the actor service that is hosting the specified type of actor and implementing specified type of the service interface.\n"
  example: []
  syntax:
    content: 'public static TServiceInterface Create<TServiceInterface>(Uri serviceUri, ActorId actorId, string listenerName = null)where TServiceInterface : IService'
    content.vb: Public Shared Function Create(Of TServiceInterface As IService)(serviceUri As Uri, actorId As ActorId, listenerName As String = Nothing) As TServiceInterface
    parameters:
    - id: serviceUri
      type: System.Uri
      description: Uri of the actor service to connect to.
    - id: actorId
      type: Microsoft.ServiceFabric.Actors.ActorId
      description: Id of the actor. The created proxy will be connected to the partition of the actor service hosting actor with this id.
    - id: listenerName
      type: System.String
      description: "\nBy default an actor service has only one listener for clients to connect to and communicate with.\nHowever it is possible to configure an actor service with more than one listeners, the listenerName parameter specifies the name of the listener to connect to.\n"
    typeParameters:
    - id: TServiceInterface
      description: The service interface implemented by the actor service.
    return:
      type: '{TServiceInterface}'
      description: A service proxy object that implements <xref href="Microsoft.ServiceFabric.Services.Remoting.Client.IServiceProxy" data-throw-if-not-resolved="false"></xref> and TServiceInterface.
  overload: Microsoft.ServiceFabric.Actors.Client.ActorServiceProxy.Create*
  nameWithType.vb: ActorServiceProxy.Create(Of TServiceInterface)(Uri, ActorId, String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.ServiceFabric.Actors.Client.ActorServiceProxy.Create(Of TServiceInterface)(System.Uri, Microsoft.ServiceFabric.Actors.ActorId, System.String)
  name.vb: Create(Of TServiceInterface)(Uri, ActorId, String)
- uid: Microsoft.ServiceFabric.Actors.Client.ActorServiceProxy.Create``1(System.Uri,System.Int64,System.String)
  commentId: M:Microsoft.ServiceFabric.Actors.Client.ActorServiceProxy.Create``1(System.Uri,System.Int64,System.String)
  id: Create``1(System.Uri,System.Int64,System.String)
  parent: Microsoft.ServiceFabric.Actors.Client.ActorServiceProxy
  langs:
  - csharp
  - vb
  name: Create<TServiceInterface>(Uri, Int64, String)
  nameWithType: ActorServiceProxy.Create<TServiceInterface>(Uri, Int64, String)
  fullName: Microsoft.ServiceFabric.Actors.Client.ActorServiceProxy.Create<TServiceInterface>(System.Uri, System.Int64, System.String)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Actors/Client/ActorServiceProxy.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: Create
    path: src/prod/src/managed/Microsoft.ServiceFabric.Actors/Client/ActorServiceProxy.cs
    startLine: 56
  assemblies:
  - Microsoft.ServiceFabric.Actors
  namespace: Microsoft.ServiceFabric.Actors.Client
  summary: "\nCreate a proxy to the actor service that is hosting the specified type of actor and implementing specified type of the service interface.\n"
  example: []
  syntax:
    content: 'public static TServiceInterface Create<TServiceInterface>(Uri serviceUri, long partitionKey, string listenerName = null)where TServiceInterface : IService'
    content.vb: Public Shared Function Create(Of TServiceInterface As IService)(serviceUri As Uri, partitionKey As Long, listenerName As String = Nothing) As TServiceInterface
    parameters:
    - id: serviceUri
      type: System.Uri
      description: Uri of the actor service to connect to.
    - id: partitionKey
      type: System.Int64
      description: The key of the actor service partition to connect to.
    - id: listenerName
      type: System.String
      description: "\nBy default an actor service has only one listener for clients to connect to and communicate with.\nHowever it is possible to configure an actor service with more than one listeners, the listenerName parameter specifies the name of the listener to connect to.\n"
    typeParameters:
    - id: TServiceInterface
      description: The service interface implemented by the actor service.
    return:
      type: '{TServiceInterface}'
      description: A service proxy object that implements <xref href="Microsoft.ServiceFabric.Services.Remoting.Client.IServiceProxy" data-throw-if-not-resolved="false"></xref> and TServiceInterface.
  overload: Microsoft.ServiceFabric.Actors.Client.ActorServiceProxy.Create*
  nameWithType.vb: ActorServiceProxy.Create(Of TServiceInterface)(Uri, Int64, String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.ServiceFabric.Actors.Client.ActorServiceProxy.Create(Of TServiceInterface)(System.Uri, System.Int64, System.String)
  name.vb: Create(Of TServiceInterface)(Uri, Int64, String)
- uid: Microsoft.ServiceFabric.Actors.Client.ActorServiceProxy.Create(System.Uri,Microsoft.ServiceFabric.Actors.ActorId,System.String)
  commentId: M:Microsoft.ServiceFabric.Actors.Client.ActorServiceProxy.Create(System.Uri,Microsoft.ServiceFabric.Actors.ActorId,System.String)
  id: Create(System.Uri,Microsoft.ServiceFabric.Actors.ActorId,System.String)
  parent: Microsoft.ServiceFabric.Actors.Client.ActorServiceProxy
  langs:
  - csharp
  - vb
  name: Create(Uri, ActorId, String)
  nameWithType: ActorServiceProxy.Create(Uri, ActorId, String)
  fullName: Microsoft.ServiceFabric.Actors.Client.ActorServiceProxy.Create(System.Uri, Microsoft.ServiceFabric.Actors.ActorId, System.String)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Actors/Client/ActorServiceProxy.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: Create
    path: src/prod/src/managed/Microsoft.ServiceFabric.Actors/Client/ActorServiceProxy.cs
    startLine: 78
  assemblies:
  - Microsoft.ServiceFabric.Actors
  namespace: Microsoft.ServiceFabric.Actors.Client
  summary: "\nCreate a proxy to the actor service that is hosting the specified type of actor and implementing specified type of the service interface.\n"
  example: []
  syntax:
    content: public static IActorService Create(Uri serviceUri, ActorId actorId, string listenerName = null)
    content.vb: Public Shared Function Create(serviceUri As Uri, actorId As ActorId, listenerName As String = Nothing) As IActorService
    parameters:
    - id: serviceUri
      type: System.Uri
      description: Uri of the actor service to connect to.
    - id: actorId
      type: Microsoft.ServiceFabric.Actors.ActorId
      description: Id of the actor. The created proxy will be connected to the partition of the actor service hosting actor with this id.
    - id: listenerName
      type: System.String
      description: "\nBy default an actor service has only one listener for clients to connect to and communicate with.\nHowever it is possible to configure an actor service with more than one listeners, the listenerName parameter specifies the name of the listener to connect to.\n"
    return:
      type: Microsoft.ServiceFabric.Actors.IActorService
      description: A service proxy object that implements <xref href="Microsoft.ServiceFabric.Services.Remoting.Client.IServiceProxy" data-throw-if-not-resolved="false"></xref> and <xref href="Microsoft.ServiceFabric.Actors.IActorService" data-throw-if-not-resolved="false"></xref> interfaces.
  overload: Microsoft.ServiceFabric.Actors.Client.ActorServiceProxy.Create*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.ServiceFabric.Actors.Client.ActorServiceProxy.Create(System.Uri,System.Int64,System.String)
  commentId: M:Microsoft.ServiceFabric.Actors.Client.ActorServiceProxy.Create(System.Uri,System.Int64,System.String)
  id: Create(System.Uri,System.Int64,System.String)
  parent: Microsoft.ServiceFabric.Actors.Client.ActorServiceProxy
  langs:
  - csharp
  - vb
  name: Create(Uri, Int64, String)
  nameWithType: ActorServiceProxy.Create(Uri, Int64, String)
  fullName: Microsoft.ServiceFabric.Actors.Client.ActorServiceProxy.Create(System.Uri, System.Int64, System.String)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Actors/Client/ActorServiceProxy.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: Create
    path: src/prod/src/managed/Microsoft.ServiceFabric.Actors/Client/ActorServiceProxy.cs
    startLine: 99
  assemblies:
  - Microsoft.ServiceFabric.Actors
  namespace: Microsoft.ServiceFabric.Actors.Client
  summary: "\nCreate a proxy to the actor service that is hosting the specified type of actor and implementing specified type of the service interface.\n"
  example: []
  syntax:
    content: public static IActorService Create(Uri serviceUri, long partitionKey, string listenerName = null)
    content.vb: Public Shared Function Create(serviceUri As Uri, partitionKey As Long, listenerName As String = Nothing) As IActorService
    parameters:
    - id: serviceUri
      type: System.Uri
      description: Uri of the actor service to connect to.
    - id: partitionKey
      type: System.Int64
      description: The key of the actor service partition to connect to.
    - id: listenerName
      type: System.String
      description: "\nBy default an actor service has only one listener for clients to connect to and communicate with.\nHowever it is possible to configure an actor service with more than one listeners, the listenerName parameter specifies the name of the listener to connect to.\n"
    return:
      type: Microsoft.ServiceFabric.Actors.IActorService
      description: A service proxy object that implements <xref href="Microsoft.ServiceFabric.Services.Remoting.Client.IServiceProxy" data-throw-if-not-resolved="false"></xref> and <xref href="Microsoft.ServiceFabric.Actors.IActorService" data-throw-if-not-resolved="false"></xref> interfaces.
  overload: Microsoft.ServiceFabric.Actors.Client.ActorServiceProxy.Create*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: Microsoft.ServiceFabric.Actors.Client
  commentId: N:Microsoft.ServiceFabric.Actors.Client
  isExternal: false
  name: Microsoft.ServiceFabric.Actors.Client
  nameWithType: Microsoft.ServiceFabric.Actors.Client
  fullName: Microsoft.ServiceFabric.Actors.Client
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceFabric.Actors.Client.ActorServiceProxy.System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
  commentId: M:System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  parent: System.Fabric.Messaging.Stream.ByteArraySerializer
  definition: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  name: Serialize<ActorServiceProxy>()
  nameWithType: ByteArraySerializer.Serialize<ActorServiceProxy>()
  fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<Microsoft.ServiceFabric.Actors.Client.ActorServiceProxy>()
  nameWithType.vb: ByteArraySerializer.Serialize(Of ActorServiceProxy)()
  fullname.vb: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of Microsoft.ServiceFabric.Actors.Client.ActorServiceProxy)()
  name.vb: Serialize(Of ActorServiceProxy)()
  spec.csharp:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
    name: Serialize<ActorServiceProxy>
    nameWithType: ByteArraySerializer.Serialize<ActorServiceProxy>
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<Microsoft.ServiceFabric.Actors.Client.ActorServiceProxy>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
    name: Serialize(Of ActorServiceProxy)
    nameWithType: ByteArraySerializer.Serialize(Of ActorServiceProxy)
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of Microsoft.ServiceFabric.Actors.Client.ActorServiceProxy)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  commentId: M:System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  isExternal: false
  name: Serialize<T>(T)
  nameWithType: ByteArraySerializer.Serialize<T>(T)
  fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<T>(T)
  nameWithType.vb: ByteArraySerializer.Serialize(Of T)(T)
  fullname.vb: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of T)(T)
  name.vb: Serialize(Of T)(T)
  spec.csharp:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
    name: Serialize<T>
    nameWithType: ByteArraySerializer.Serialize<T>
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
    name: Serialize(Of T)
    nameWithType: ByteArraySerializer.Serialize(Of T)
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.Messaging.Stream.ByteArraySerializer
  commentId: T:System.Fabric.Messaging.Stream.ByteArraySerializer
  parent: System.Fabric.Messaging.Stream
  isExternal: false
  name: ByteArraySerializer
  nameWithType: ByteArraySerializer
  fullName: System.Fabric.Messaging.Stream.ByteArraySerializer
- uid: System.Fabric.Messaging.Stream
  commentId: N:System.Fabric.Messaging.Stream
  isExternal: false
  name: System.Fabric.Messaging.Stream
  nameWithType: System.Fabric.Messaging.Stream
  fullName: System.Fabric.Messaging.Stream
- uid: Microsoft.ServiceFabric.Actors.Client.ActorServiceProxy
  commentId: T:Microsoft.ServiceFabric.Actors.Client.ActorServiceProxy
  isExternal: false
  name: ActorServiceProxy
  nameWithType: ActorServiceProxy
  fullName: Microsoft.ServiceFabric.Actors.Client.ActorServiceProxy
- uid: Microsoft.ServiceFabric.Actors.Client.ActorServiceProxy.#ctor*
  commentId: Overload:Microsoft.ServiceFabric.Actors.Client.ActorServiceProxy.#ctor
  isExternal: false
  name: ActorServiceProxy
  nameWithType: ActorServiceProxy.ActorServiceProxy
  fullName: Microsoft.ServiceFabric.Actors.Client.ActorServiceProxy.ActorServiceProxy
- uid: Microsoft.ServiceFabric.Services.Remoting.Client.IServiceProxy
  commentId: T:Microsoft.ServiceFabric.Services.Remoting.Client.IServiceProxy
  parent: Microsoft.ServiceFabric.Services.Remoting.Client
  isExternal: false
  name: IServiceProxy
  nameWithType: IServiceProxy
  fullName: Microsoft.ServiceFabric.Services.Remoting.Client.IServiceProxy
- uid: Microsoft.ServiceFabric.Actors.Client.ActorServiceProxy.Create*
  commentId: Overload:Microsoft.ServiceFabric.Actors.Client.ActorServiceProxy.Create
  isExternal: false
  name: Create<TServiceInterface>
  nameWithType: ActorServiceProxy.Create<TServiceInterface>
  fullName: Microsoft.ServiceFabric.Actors.Client.ActorServiceProxy.Create<TServiceInterface>
  nameWithType.vb: ActorServiceProxy.Create(Of TServiceInterface)
  fullname.vb: Microsoft.ServiceFabric.Actors.Client.ActorServiceProxy.Create(Of TServiceInterface)
  name.vb: Create(Of TServiceInterface)
- uid: System.Uri
  commentId: T:System.Uri
  parent: System
  isExternal: true
  name: Uri
  nameWithType: Uri
  fullName: System.Uri
- uid: Microsoft.ServiceFabric.Actors.ActorId
  commentId: T:Microsoft.ServiceFabric.Actors.ActorId
  parent: Microsoft.ServiceFabric.Actors
  isExternal: false
  name: ActorId
  nameWithType: ActorId
  fullName: Microsoft.ServiceFabric.Actors.ActorId
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: '{TServiceInterface}'
  commentId: '!:TServiceInterface'
  definition: TServiceInterface
  name: TServiceInterface
  nameWithType: TServiceInterface
  fullName: TServiceInterface
- uid: Microsoft.ServiceFabric.Services.Remoting.Client
  commentId: N:Microsoft.ServiceFabric.Services.Remoting.Client
  isExternal: false
  name: Microsoft.ServiceFabric.Services.Remoting.Client
  nameWithType: Microsoft.ServiceFabric.Services.Remoting.Client
  fullName: Microsoft.ServiceFabric.Services.Remoting.Client
- uid: Microsoft.ServiceFabric.Actors
  commentId: N:Microsoft.ServiceFabric.Actors
  isExternal: false
  name: Microsoft.ServiceFabric.Actors
  nameWithType: Microsoft.ServiceFabric.Actors
  fullName: Microsoft.ServiceFabric.Actors
- uid: TServiceInterface
  isExternal: false
  name: TServiceInterface
  nameWithType: TServiceInterface
  fullName: TServiceInterface
- uid: System.Int64
  commentId: T:System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: Microsoft.ServiceFabric.Actors.IActorService
  commentId: T:Microsoft.ServiceFabric.Actors.IActorService
  parent: Microsoft.ServiceFabric.Actors
  isExternal: false
  name: IActorService
  nameWithType: IActorService
  fullName: Microsoft.ServiceFabric.Actors.IActorService
