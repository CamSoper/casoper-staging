### YamlMime:ManagedReference
items:
- uid: System.Fabric.FabricClient.HealthClient
  commentId: T:System.Fabric.FabricClient.HealthClient
  id: FabricClient.HealthClient
  parent: System.Fabric
  children:
  - System.Fabric.FabricClient.HealthClient.GetApplicationHealthAsync(System.Fabric.Description.ApplicationHealthQueryDescription)
  - System.Fabric.FabricClient.HealthClient.GetApplicationHealthAsync(System.Fabric.Description.ApplicationHealthQueryDescription,System.TimeSpan,System.Threading.CancellationToken)
  - System.Fabric.FabricClient.HealthClient.GetApplicationHealthAsync(System.Uri)
  - System.Fabric.FabricClient.HealthClient.GetApplicationHealthAsync(System.Uri,System.Fabric.Health.ApplicationHealthPolicy)
  - System.Fabric.FabricClient.HealthClient.GetApplicationHealthAsync(System.Uri,System.Fabric.Health.ApplicationHealthPolicy,System.TimeSpan,System.Threading.CancellationToken)
  - System.Fabric.FabricClient.HealthClient.GetApplicationHealthAsync(System.Uri,System.TimeSpan,System.Threading.CancellationToken)
  - System.Fabric.FabricClient.HealthClient.GetClusterHealthAsync
  - System.Fabric.FabricClient.HealthClient.GetClusterHealthAsync(System.Fabric.Description.ClusterHealthQueryDescription)
  - System.Fabric.FabricClient.HealthClient.GetClusterHealthAsync(System.Fabric.Description.ClusterHealthQueryDescription,System.TimeSpan,System.Threading.CancellationToken)
  - System.Fabric.FabricClient.HealthClient.GetClusterHealthAsync(System.Fabric.Health.ClusterHealthPolicy)
  - System.Fabric.FabricClient.HealthClient.GetClusterHealthAsync(System.Fabric.Health.ClusterHealthPolicy,System.TimeSpan,System.Threading.CancellationToken)
  - System.Fabric.FabricClient.HealthClient.GetClusterHealthAsync(System.TimeSpan,System.Threading.CancellationToken)
  - System.Fabric.FabricClient.HealthClient.GetClusterHealthChunkAsync
  - System.Fabric.FabricClient.HealthClient.GetClusterHealthChunkAsync(System.Fabric.Description.ClusterHealthChunkQueryDescription)
  - System.Fabric.FabricClient.HealthClient.GetClusterHealthChunkAsync(System.Fabric.Description.ClusterHealthChunkQueryDescription,System.TimeSpan,System.Threading.CancellationToken)
  - System.Fabric.FabricClient.HealthClient.GetClusterHealthChunkAsync(System.TimeSpan,System.Threading.CancellationToken)
  - System.Fabric.FabricClient.HealthClient.GetDeployedApplicationHealthAsync(System.Fabric.Description.DeployedApplicationHealthQueryDescription)
  - System.Fabric.FabricClient.HealthClient.GetDeployedApplicationHealthAsync(System.Fabric.Description.DeployedApplicationHealthQueryDescription,System.TimeSpan,System.Threading.CancellationToken)
  - System.Fabric.FabricClient.HealthClient.GetDeployedApplicationHealthAsync(System.Uri,System.String)
  - System.Fabric.FabricClient.HealthClient.GetDeployedApplicationHealthAsync(System.Uri,System.String,System.Fabric.Health.ApplicationHealthPolicy)
  - System.Fabric.FabricClient.HealthClient.GetDeployedApplicationHealthAsync(System.Uri,System.String,System.Fabric.Health.ApplicationHealthPolicy,System.TimeSpan,System.Threading.CancellationToken)
  - System.Fabric.FabricClient.HealthClient.GetDeployedApplicationHealthAsync(System.Uri,System.String,System.TimeSpan,System.Threading.CancellationToken)
  - System.Fabric.FabricClient.HealthClient.GetDeployedServicePackageHealthAsync(System.Fabric.Description.DeployedServicePackageHealthQueryDescription)
  - System.Fabric.FabricClient.HealthClient.GetDeployedServicePackageHealthAsync(System.Fabric.Description.DeployedServicePackageHealthQueryDescription,System.TimeSpan,System.Threading.CancellationToken)
  - System.Fabric.FabricClient.HealthClient.GetDeployedServicePackageHealthAsync(System.Uri,System.String,System.String)
  - System.Fabric.FabricClient.HealthClient.GetDeployedServicePackageHealthAsync(System.Uri,System.String,System.String,System.Fabric.Health.ApplicationHealthPolicy)
  - System.Fabric.FabricClient.HealthClient.GetDeployedServicePackageHealthAsync(System.Uri,System.String,System.String,System.Fabric.Health.ApplicationHealthPolicy,System.TimeSpan,System.Threading.CancellationToken)
  - System.Fabric.FabricClient.HealthClient.GetDeployedServicePackageHealthAsync(System.Uri,System.String,System.String,System.TimeSpan,System.Threading.CancellationToken)
  - System.Fabric.FabricClient.HealthClient.GetNodeHealthAsync(System.Fabric.Description.NodeHealthQueryDescription)
  - System.Fabric.FabricClient.HealthClient.GetNodeHealthAsync(System.Fabric.Description.NodeHealthQueryDescription,System.TimeSpan,System.Threading.CancellationToken)
  - System.Fabric.FabricClient.HealthClient.GetNodeHealthAsync(System.String)
  - System.Fabric.FabricClient.HealthClient.GetNodeHealthAsync(System.String,System.Fabric.Health.ClusterHealthPolicy)
  - System.Fabric.FabricClient.HealthClient.GetNodeHealthAsync(System.String,System.Fabric.Health.ClusterHealthPolicy,System.TimeSpan,System.Threading.CancellationToken)
  - System.Fabric.FabricClient.HealthClient.GetNodeHealthAsync(System.String,System.TimeSpan,System.Threading.CancellationToken)
  - System.Fabric.FabricClient.HealthClient.GetPartitionHealthAsync(System.Fabric.Description.PartitionHealthQueryDescription)
  - System.Fabric.FabricClient.HealthClient.GetPartitionHealthAsync(System.Fabric.Description.PartitionHealthQueryDescription,System.TimeSpan,System.Threading.CancellationToken)
  - System.Fabric.FabricClient.HealthClient.GetPartitionHealthAsync(System.Guid)
  - System.Fabric.FabricClient.HealthClient.GetPartitionHealthAsync(System.Guid,System.Fabric.Health.ApplicationHealthPolicy)
  - System.Fabric.FabricClient.HealthClient.GetPartitionHealthAsync(System.Guid,System.Fabric.Health.ApplicationHealthPolicy,System.TimeSpan,System.Threading.CancellationToken)
  - System.Fabric.FabricClient.HealthClient.GetPartitionHealthAsync(System.Guid,System.TimeSpan,System.Threading.CancellationToken)
  - System.Fabric.FabricClient.HealthClient.GetReplicaHealthAsync(System.Fabric.Description.ReplicaHealthQueryDescription)
  - System.Fabric.FabricClient.HealthClient.GetReplicaHealthAsync(System.Fabric.Description.ReplicaHealthQueryDescription,System.TimeSpan,System.Threading.CancellationToken)
  - System.Fabric.FabricClient.HealthClient.GetReplicaHealthAsync(System.Guid,System.Int64)
  - System.Fabric.FabricClient.HealthClient.GetReplicaHealthAsync(System.Guid,System.Int64,System.Fabric.Health.ApplicationHealthPolicy)
  - System.Fabric.FabricClient.HealthClient.GetReplicaHealthAsync(System.Guid,System.Int64,System.Fabric.Health.ApplicationHealthPolicy,System.TimeSpan,System.Threading.CancellationToken)
  - System.Fabric.FabricClient.HealthClient.GetReplicaHealthAsync(System.Guid,System.Int64,System.TimeSpan,System.Threading.CancellationToken)
  - System.Fabric.FabricClient.HealthClient.GetServiceHealthAsync(System.Fabric.Description.ServiceHealthQueryDescription)
  - System.Fabric.FabricClient.HealthClient.GetServiceHealthAsync(System.Fabric.Description.ServiceHealthQueryDescription,System.TimeSpan,System.Threading.CancellationToken)
  - System.Fabric.FabricClient.HealthClient.GetServiceHealthAsync(System.Uri)
  - System.Fabric.FabricClient.HealthClient.GetServiceHealthAsync(System.Uri,System.Fabric.Health.ApplicationHealthPolicy)
  - System.Fabric.FabricClient.HealthClient.GetServiceHealthAsync(System.Uri,System.Fabric.Health.ApplicationHealthPolicy,System.TimeSpan,System.Threading.CancellationToken)
  - System.Fabric.FabricClient.HealthClient.GetServiceHealthAsync(System.Uri,System.TimeSpan,System.Threading.CancellationToken)
  - System.Fabric.FabricClient.HealthClient.ReportHealth(System.Fabric.Health.HealthReport)
  langs:
  - csharp
  - vb
  name: FabricClient.HealthClient
  nameWithType: FabricClient.HealthClient
  fullName: System.Fabric.FabricClient.HealthClient
  type: Class
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.HealthClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: HealthClient
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.HealthClient.cs
    startLine: 19
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Represents the health client used to perform health related operations, like report and query health.</p>\n"
  example: []
  syntax:
    content: public sealed class HealthClient
    content.vb: Public NotInheritable Class HealthClient
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  extensionMethods:
  - System.Fabric.FabricClient.HealthClient.System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: System.Fabric.FabricClient.HealthClient.ReportHealth(System.Fabric.Health.HealthReport)
  commentId: M:System.Fabric.FabricClient.HealthClient.ReportHealth(System.Fabric.Health.HealthReport)
  id: ReportHealth(System.Fabric.Health.HealthReport)
  parent: System.Fabric.FabricClient.HealthClient
  langs:
  - csharp
  - vb
  name: ReportHealth(HealthReport)
  nameWithType: FabricClient.HealthClient.ReportHealth(HealthReport)
  fullName: System.Fabric.FabricClient.HealthClient.ReportHealth(System.Fabric.Health.HealthReport)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.HealthClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: ReportHealth
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.HealthClient.cs
    startLine: 219
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Reports health on a Service Fabric entity.</p>\n"
  remarks: "\n<p>The following example reports the health of a partition.</p>\n<pre><code class=\"c#\">static bool ReportPartitionHealth(string clusterConnection)\n{\n    // By default, health reports are sent within 30 seconds. Because this\n    //   FabricClient object will not exist for 30 seconds, health reports\n    //   will be sent immediately.\n    FabricClientSettings fabricClientSettings = new FabricClientSettings()\n    {\n        HealthReportSendInterval = new TimeSpan(0)\n    };\n\n    // Create the fabric client.\n    FabricClient fabricClient = new FabricClient(fabricClientSettings, clusterConnection);\n\n    // Create the PartitionHealthReport\n    PartitionHealthReport partitionHealth = new PartitionHealthReport(\n        new System.Guid(\"a199fb35d8534da795aeb398e57fb112\"),            // partitionID\n        new HealthInformation(\"ExternalWatchdog\",                       // sourceID\n            \"LogicProperty\",                                            // property name\n            HealthState.Ok)                                             // health state\n        {\n            Description = \"Description of health report goes here.\",    // description\n            TimeToLive = TimeSpan.FromMinutes(60)                       // time to live\n        });\n\n    // Report health\n    try\n    {\n        fabricClient.HealthManager.ReportHealth(partitionHealth);\n    }\n    catch (Exception e)\n    {\n        Console.WriteLine(\"Error: \" + e.Message);\n\n        if (e.InnerException != null)\n            Console.WriteLine(\"  Inner Exception: \" + e.InnerException.Message);\n\n        return false;\n    }\n\n    Console.WriteLine(\"Partition health reported successfully.\");\n    return true;\n}</code></pre>\n<p>The following example reports the health of an application</p>\n<pre><code class=\"c#\">static bool ReportApplicationHealth(string clusterConnection)\n{\n    Uri applicationName = new Uri(\"fabric:/myapp/todo\");\n\n    // By default, health reports are sent within 30 seconds. Because this\n    //   FabricClient object will not exist for 30 seconds, health reports\n    //   will be sent immediately.\n    FabricClientSettings fabricClientSettings = new FabricClientSettings()\n    {\n        HealthReportSendInterval = new TimeSpan(0)\n    };\n\n    // Create the fabric client.\n    FabricClient fabricClient = new FabricClient(fabricClientSettings, clusterConnection);\n\n    // Create the health report.\n    ApplicationHealthReport applicationHealthReport = new ApplicationHealthReport(applicationName, \n        new HealthInformation(\"InternalWatchdog\", \"LogicProperty\", HealthState.Ok)\n        {\n            Description = \"Description of health report goes here.\",\n            TimeToLive = TimeSpan.FromMinutes(60)\n        });\n\n    // Report health\n    try\n    {\n        fabricClient.HealthManager.ReportHealth(applicationHealthReport);\n    }\n    catch (Exception e)\n    {\n        Console.WriteLine(\"Error: \" + e.Message);\n\n        if (e.InnerException != null)\n            Console.WriteLine(\"  Inner Exception: \" + e.InnerException.Message);\n\n        return false;\n    }\n\n    Console.WriteLine(\"Application health reported successfully.\");\n    return true;\n}</code></pre>\n<p>The following example reports the health of a deployed application.</p>\n<pre><code class=\"c#\">static bool ReportDeployedApplicationHealth(string clusterConnection)\n{\n    Uri applicationName = new Uri(\"fabric:/myapp/todo\");\n\n    // By default, health reports are sent within 30 seconds. Because this\n    //   FabricClient object will not exist for 30 seconds, health reports\n    //   will be sent immediately.\n    FabricClientSettings fabricClientSettings = new FabricClientSettings()\n    {\n        HealthReportSendInterval = new TimeSpan(0)\n    };\n\n    // Create the fabric client.\n    FabricClient fabricClient = new FabricClient(fabricClientSettings, clusterConnection);\n\n    // Create the health report.\n    DeployedApplicationHealthReport deployedAppHealthReport = new DeployedApplicationHealthReport(\n        applicationName, \"Node1\", \n        new HealthInformation(\"ExternalWatchdog\", \"LogicProperty\", HealthState.Ok)\n        {\n            Description = \"Description of health report.\",\n            TimeToLive = TimeSpan.FromMinutes(60)\n        });\n\n    // Report health\n    try\n    {\n        fabricClient.HealthManager.ReportHealth(deployedAppHealthReport);\n    }\n    catch (Exception e)\n    {\n        Console.WriteLine(\"Error: \" + e.Message);\n\n        if (e.InnerException != null)\n            Console.WriteLine(\"  Inner Exception: \" + e.InnerException.Message);\n\n        return false;\n    }\n\n    Console.WriteLine(\"Deployed application health reported successfully.\");\n    return true;\n}</code></pre>\n"
  example: []
  syntax:
    content: public void ReportHealth(HealthReport healthReport)
    content.vb: Public Sub ReportHealth(healthReport As HealthReport)
    parameters:
    - id: healthReport
      type: System.Fabric.Health.HealthReport
      description: "\n<p>The health report to submit.</p>\n"
  overload: System.Fabric.FabricClient.HealthClient.ReportHealth*
  exceptions:
  - type: System.Fabric.FabricObjectClosedException
    commentId: T:System.Fabric.FabricObjectClosedException
    description: "\n<p>The <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object is in a closed state. Dispose of the <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object you are using and instantiate a new <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>Returned when a null reference is passed to a method that does not accept it as a valid argument.</p>\n"
  - type: System.Fabric.FabricException
    commentId: T:System.Fabric.FabricException
    description: "\n<p>Caused by one of the following:</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.FabricHealthStaleReport\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.FabricHealthMaxReportsReached\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidCredentialType\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509FindType\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509StoreLocation\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509StoreName\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509Thumbprint\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidProtectionLevel\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509Store\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidSubjectName\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  - type: System.Fabric.FabricTransientException
    commentId: T:System.Fabric.FabricTransientException
    description: "\n<p>Caused by one of the following:</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.ServiceTooBusy\" data-throw-if-not-resolved=\"false\"></xref> is returned when the service is too busy to process the operation.</p>\n"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>Caused by one of the following:</p>\n<p>E_ACCESSDENIED is returned when the access check has failed for this operation.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.HealthClient.GetClusterHealthAsync
  commentId: M:System.Fabric.FabricClient.HealthClient.GetClusterHealthAsync
  id: GetClusterHealthAsync
  parent: System.Fabric.FabricClient.HealthClient
  langs:
  - csharp
  - vb
  name: GetClusterHealthAsync()
  nameWithType: FabricClient.HealthClient.GetClusterHealthAsync()
  fullName: System.Fabric.FabricClient.HealthClient.GetClusterHealthAsync()
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.HealthClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: GetClusterHealthAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.HealthClient.cs
    startLine: 359
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Asynchronously gets the health of a Service Fabric cluster.</p>\n"
  remarks: "\n<p>The following example gets the health of the cluster.</p>\n<pre><code class=\"c#\">public static bool GetClusterHealth(string clusterConnection)\n{\n  ClusterHealth clusterHealth;\n\n  // Connect to the cluster.\n  FabricClient fabricClient = new FabricClient(clusterConnection);\n\n  // Get the cluster health.\n  try\n  {\n      clusterHealth = fabricClient.HealthManager.GetClusterHealthAsync().Result;\n  }\n  catch (Exception e)\n  {\n      Console.WriteLine(\"Error: \" + e.Message);\n\n      if (e.InnerException != null)\nConsole.WriteLine(\"  Inner Exception: \" + e.InnerException.Message);\n\n      return false;\n  }\n\n  // Display the cluster health state.\n  Console.WriteLine(\"Cluster Health:\");\n  Console.WriteLine(\"  Aggregated Health State: \" + clusterHealth.AggregatedHealthState);\n  Console.WriteLine();\n\n  // Display the application health states on the cluster.\n  Console.WriteLine(\"  Application Health States:\");\n  IList&lt;ApplicationHealthState&gt; applicationHealthStateList = clusterHealth.ApplicationHealthStates;\n  foreach(ApplicationHealthState applicationHealthState in applicationHealthStateList)\n  {\n      Console.WriteLine(\"    Application {0}: {1}\", applicationHealthState.ApplicationName, applicationHealthState.AggregatedHealthState);\n  }\n\n  // Display Node Health States on the cluster.\n  Console.WriteLine(\"  Node Health States:\");\n  IList&lt;NodeHealthState&gt; nodeHealthStateList = clusterHealth.NodeHealthStates;\n  foreach (NodeHealthState nodeHealthState in nodeHealthStateList)\n  {\n      Console.WriteLine(\"    Node Name: \" + nodeHealthState.NodeName);\n      Console.WriteLine(\"      Aggregated Health State: \" + nodeHealthState.AggregatedHealthState);\n  }\n\n  // Display Health Events.\n  Console.WriteLine(\"  Health Events:\");\n  IList&lt;HealthEvent&gt; healthEventList = clusterHealth.HealthEvents;\n  foreach(HealthEvent healthEvent in healthEventList)\n  {\n      Console.WriteLine(\"      Health Event:\");\n      Console.WriteLine(\"        Last Modified: \" + healthEvent.LastModifiedUtcTimestamp);\n      Console.WriteLine(\"        Source UTC Timestamp: \" + healthEvent.SourceUtcTimestamp);\n      Console.WriteLine(\"        Is Expired: \" + healthEvent.IsExpired);\n      Console.WriteLine(\"        Health Information:\");\n      Console.WriteLine(\"          Description: \" + healthEvent.HealthInformation.Description);\n      Console.WriteLine(\"          Source ID: \" + healthEvent.HealthInformation.SourceId);\n      Console.WriteLine(\"          Health State: \" + healthEvent.HealthInformation.HealthState);\n      Console.WriteLine(\"          Property: \" + healthEvent.HealthInformation.Property);\n      Console.WriteLine(\"          Remove When Expired: \" + healthEvent.HealthInformation.RemoveWhenExpired);\n      Console.WriteLine(\"          Sequence Number: \" + healthEvent.HealthInformation.SequenceNumber);\n      Console.WriteLine(\"          Time to Live: \" + healthEvent.HealthInformation.TimeToLive);\n  }\n\n  Console.WriteLine(\"  Unhealthy Evaluations:\");\n  IList&lt;HealthEvaluation&gt; healthEvaluationList = clusterHealth.UnhealthyEvaluations;\n  foreach(HealthEvaluation healthEvaluation in healthEvaluationList)\n  {\n      Console.WriteLine(\"    Kind: \" + healthEvaluation.Kind);\n      Console.WriteLine(\"      Aggregated Health State: \" + healthEvaluation.AggregatedHealthState);\n      Console.WriteLine(\"      Description: \" + healthEvaluation.Description);\n  }\n\n  return true;\n}</code></pre>\n"
  example: []
  syntax:
    content: public Task<ClusterHealth> GetClusterHealthAsync()
    content.vb: Public Function GetClusterHealthAsync As Task(Of ClusterHealth)
    return:
      type: System.Threading.Tasks.Task{System.Fabric.Health.ClusterHealth}
      description: "\n<p>The health of a Service Fabric cluster.</p>\n"
  overload: System.Fabric.FabricClient.HealthClient.GetClusterHealthAsync*
  exceptions:
  - type: System.Fabric.FabricObjectClosedException
    commentId: T:System.Fabric.FabricObjectClosedException
    description: "\n<p>The <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object is in a closed state. \nDispose of the <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object you are using and instantiate a new <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>Returned when a null reference is passed to a method that does not accept it as a valid argument.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>Caused by one of the following:</p>\n<p>E_INVALIDARG is returned when one or more arguments are not valid.</p>\n"
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: "\n<p>Caused by one of the following:</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.OperationTimedOut\" data-throw-if-not-resolved=\"false\"></xref> is returned when the operation takes more than MaxOperationTimeout to complete.</p>\n"
  - type: System.Fabric.FabricException
    commentId: T:System.Fabric.FabricException
    description: "\n<p>Caused by one of the following:</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.FabricHealthEntityNotFound\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.CommunicationError\" data-throw-if-not-resolved=\"false\"></xref> is returned when a communication error caused the operation to fail.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidCredentialType\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509FindType\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509StoreLocation\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509StoreName\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509Thumbprint\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidProtectionLevel\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509Store\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidSubjectName\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  - type: System.Fabric.FabricTransientException
    commentId: T:System.Fabric.FabricTransientException
    description: "\n<p>Caused by one of the following:</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.ServiceTooBusy\" data-throw-if-not-resolved=\"false\"></xref> is returned when the service is too busy to process the operation.</p>\n"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>Caused by one of the following:</p>\n<p>E_ACCESSDENIED is returned when the access check has failed for this operation.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.HealthClient.GetClusterHealthAsync(System.Fabric.Health.ClusterHealthPolicy)
  commentId: M:System.Fabric.FabricClient.HealthClient.GetClusterHealthAsync(System.Fabric.Health.ClusterHealthPolicy)
  id: GetClusterHealthAsync(System.Fabric.Health.ClusterHealthPolicy)
  parent: System.Fabric.FabricClient.HealthClient
  langs:
  - csharp
  - vb
  name: GetClusterHealthAsync(ClusterHealthPolicy)
  nameWithType: FabricClient.HealthClient.GetClusterHealthAsync(ClusterHealthPolicy)
  fullName: System.Fabric.FabricClient.HealthClient.GetClusterHealthAsync(System.Fabric.Health.ClusterHealthPolicy)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.HealthClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: GetClusterHealthAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.HealthClient.cs
    startLine: 421
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Asynchronously gets the health of a Service Fabric cluster, evaluating it using the specified policy.</p>\n"
  example: []
  syntax:
    content: public Task<ClusterHealth> GetClusterHealthAsync(ClusterHealthPolicy healthPolicy)
    content.vb: Public Function GetClusterHealthAsync(healthPolicy As ClusterHealthPolicy) As Task(Of ClusterHealth)
    parameters:
    - id: healthPolicy
      type: System.Fabric.Health.ClusterHealthPolicy
      description: The cluster health policy used to evaluate cluster health.
    return:
      type: System.Threading.Tasks.Task{System.Fabric.Health.ClusterHealth}
      description: "\n<p>The health of a Service Fabric cluster.</p>\n"
  overload: System.Fabric.FabricClient.HealthClient.GetClusterHealthAsync*
  exceptions:
  - type: System.Fabric.FabricObjectClosedException
    commentId: T:System.Fabric.FabricObjectClosedException
    description: "\n<p>The <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object is in a closed state. \nDispose of the <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object you are using and instantiate a new <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>Returned when a null reference is passed to a method that does not accept it as a valid argument.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>Caused by one of the following:</p>\n<p>E_INVALIDARG is returned when one or more arguments are not valid.</p>\n"
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: "\n<p>Caused by one of the following:</p>\n<p><xref href=\"System.Fabric.FabricErrorCode.OperationTimedOut\" data-throw-if-not-resolved=\"false\"></xref> is returned when the operation takes more than MaxOperationTimeout to complete.</p>\n"
  - type: System.Fabric.FabricException
    commentId: T:System.Fabric.FabricException
    description: "\n<p>Caused by one of the following:</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.FabricHealthEntityNotFound\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.CommunicationError\" data-throw-if-not-resolved=\"false\"></xref> is returned when a communication error caused the operation to fail.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidCredentialType\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509FindType\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509StoreLocation\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509StoreName\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509Thumbprint\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidProtectionLevel\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509Store\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidSubjectName\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  - type: System.Fabric.FabricTransientException
    commentId: T:System.Fabric.FabricTransientException
    description: "\n<p>Caused by one of the following:</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.ServiceTooBusy\" data-throw-if-not-resolved=\"false\"></xref> is returned when the service is too busy to process the operation.</p>\n"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>Caused by one of the following:</p>\n<p>E_ACCESSDENIED is returned when the access check has failed for this operation.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.HealthClient.GetClusterHealthAsync(System.TimeSpan,System.Threading.CancellationToken)
  commentId: M:System.Fabric.FabricClient.HealthClient.GetClusterHealthAsync(System.TimeSpan,System.Threading.CancellationToken)
  id: GetClusterHealthAsync(System.TimeSpan,System.Threading.CancellationToken)
  parent: System.Fabric.FabricClient.HealthClient
  langs:
  - csharp
  - vb
  name: GetClusterHealthAsync(TimeSpan, CancellationToken)
  nameWithType: FabricClient.HealthClient.GetClusterHealthAsync(TimeSpan, CancellationToken)
  fullName: System.Fabric.FabricClient.HealthClient.GetClusterHealthAsync(System.TimeSpan, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.HealthClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: GetClusterHealthAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.HealthClient.cs
    startLine: 490
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Asynchronously gets the health of a Service Fabric cluster by using the specified timeout and cancellation token.</p>\n"
  example: []
  syntax:
    content: public Task<ClusterHealth> GetClusterHealthAsync(TimeSpan timeout, CancellationToken cancellationToken)
    content.vb: Public Function GetClusterHealthAsync(timeout As TimeSpan, cancellationToken As CancellationToken) As Task(Of ClusterHealth)
    parameters:
    - id: timeout
      type: System.TimeSpan
      description: "\n<p>The maximum amount of time Service Fabric will allow this operation to continue before returning a <xref href=\"System.TimeoutException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The optional cancellation token that the operation is observing. It can be used to send a notification that the operation should be canceled. \nNote that cancellation is advisory and that the operation may still be completed even if it is canceled.</p>\n"
    return:
      type: System.Threading.Tasks.Task{System.Fabric.Health.ClusterHealth}
      description: "\n<p>The health of a Service Fabric cluster.</p>\n"
  overload: System.Fabric.FabricClient.HealthClient.GetClusterHealthAsync*
  exceptions:
  - type: System.Fabric.FabricObjectClosedException
    commentId: T:System.Fabric.FabricObjectClosedException
    description: "\n<p>The <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object is in a closed state. Dispose of the <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> \nobject you are using and instantiate a new <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>Returned when a null reference is passed to a method that does not accept it as a valid argument.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>Caused by one of the following:</p>\n<p>E_INVALIDARG is returned when one or more arguments are not valid.</p>\n"
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: "\n<p>Caused by one of the following:</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.OperationTimedOut\" data-throw-if-not-resolved=\"false\"></xref> is returned when the operation takes more than the user provided <em>timeout</em> to complete.</p>\n"
  - type: System.Fabric.FabricException
    commentId: T:System.Fabric.FabricException
    description: "\n<p>Caused by one of the following:</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.FabricHealthEntityNotFound\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.CommunicationError\" data-throw-if-not-resolved=\"false\"></xref> is returned when a communication error caused the operation to fail.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidCredentialType\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509FindType\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509StoreLocation\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509StoreName\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509Thumbprint\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidProtectionLevel\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509Store\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidSubjectName\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  - type: System.Fabric.FabricTransientException
    commentId: T:System.Fabric.FabricTransientException
    description: "\n<p>Caused by one of the following:</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.ServiceTooBusy\" data-throw-if-not-resolved=\"false\"></xref> is returned when the service is too busy to process the operation.</p>\n"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>Caused by one of the following:</p>\n<p>E_ACCESSDENIED is returned when the access check has failed for this operation.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.HealthClient.GetClusterHealthAsync(System.Fabric.Health.ClusterHealthPolicy,System.TimeSpan,System.Threading.CancellationToken)
  commentId: M:System.Fabric.FabricClient.HealthClient.GetClusterHealthAsync(System.Fabric.Health.ClusterHealthPolicy,System.TimeSpan,System.Threading.CancellationToken)
  id: GetClusterHealthAsync(System.Fabric.Health.ClusterHealthPolicy,System.TimeSpan,System.Threading.CancellationToken)
  parent: System.Fabric.FabricClient.HealthClient
  langs:
  - csharp
  - vb
  name: GetClusterHealthAsync(ClusterHealthPolicy, TimeSpan, CancellationToken)
  nameWithType: FabricClient.HealthClient.GetClusterHealthAsync(ClusterHealthPolicy, TimeSpan, CancellationToken)
  fullName: System.Fabric.FabricClient.HealthClient.GetClusterHealthAsync(System.Fabric.Health.ClusterHealthPolicy, System.TimeSpan, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.HealthClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: GetClusterHealthAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.HealthClient.cs
    startLine: 560
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Asynchronously gets the health of a Service Fabric cluster by using the specified health policy, timeout and cancellation token.</p>\n"
  example: []
  syntax:
    content: public Task<ClusterHealth> GetClusterHealthAsync(ClusterHealthPolicy healthPolicy, TimeSpan timeout, CancellationToken cancellationToken)
    content.vb: Public Function GetClusterHealthAsync(healthPolicy As ClusterHealthPolicy, timeout As TimeSpan, cancellationToken As CancellationToken) As Task(Of ClusterHealth)
    parameters:
    - id: healthPolicy
      type: System.Fabric.Health.ClusterHealthPolicy
      description: The cluster health policy used to evaluate cluster health.
    - id: timeout
      type: System.TimeSpan
      description: "\n<p>The maximum amount of time Service Fabric will allow this operation to continue before returning a <xref href=\"System.TimeoutException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The optional cancellation token that the operation is observing. It can be used to send a notification that the operation should be canceled. \nNote that cancellation is advisory and that the operation may still be completed even if it is canceled.</p>\n"
    return:
      type: System.Threading.Tasks.Task{System.Fabric.Health.ClusterHealth}
      description: "\n<p>The health of a Service Fabric cluster.</p>\n"
  overload: System.Fabric.FabricClient.HealthClient.GetClusterHealthAsync*
  exceptions:
  - type: System.Fabric.FabricObjectClosedException
    commentId: T:System.Fabric.FabricObjectClosedException
    description: "\n<p>The <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object is in a closed state. Dispose of the <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> \nobject you are using and instantiate a new <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>Returned when a null reference is passed to a method that does not accept it as a valid argument.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>Caused by one of the following:</p>\n<p>E_INVALIDARG is returned when one or more arguments are not valid.</p>\n"
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: "\n<p>Caused by one of the following:</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.OperationTimedOut\" data-throw-if-not-resolved=\"false\"></xref> is returned when the operation takes more than the user provided <em>timeout</em> to complete.</p>\n"
  - type: System.Fabric.FabricException
    commentId: T:System.Fabric.FabricException
    description: "\n<p>Caused by one of the following:</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.FabricHealthEntityNotFound\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.CommunicationError\" data-throw-if-not-resolved=\"false\"></xref> is returned when a communication error caused the operation to fail.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidCredentialType\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509FindType\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509StoreLocation\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509StoreName\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509Thumbprint\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidProtectionLevel\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509Store\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidSubjectName\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  - type: System.Fabric.FabricTransientException
    commentId: T:System.Fabric.FabricTransientException
    description: "\n<p>Caused by one of the following:</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.ServiceTooBusy\" data-throw-if-not-resolved=\"false\"></xref> is returned when the service is too busy to process the operation.</p>\n"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>Caused by one of the following:</p>\n<p>E_ACCESSDENIED is returned when the access check has failed for this operation.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.HealthClient.GetClusterHealthAsync(System.Fabric.Description.ClusterHealthQueryDescription)
  commentId: M:System.Fabric.FabricClient.HealthClient.GetClusterHealthAsync(System.Fabric.Description.ClusterHealthQueryDescription)
  id: GetClusterHealthAsync(System.Fabric.Description.ClusterHealthQueryDescription)
  parent: System.Fabric.FabricClient.HealthClient
  langs:
  - csharp
  - vb
  name: GetClusterHealthAsync(ClusterHealthQueryDescription)
  nameWithType: FabricClient.HealthClient.GetClusterHealthAsync(ClusterHealthQueryDescription)
  fullName: System.Fabric.FabricClient.HealthClient.GetClusterHealthAsync(System.Fabric.Description.ClusterHealthQueryDescription)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.HealthClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: GetClusterHealthAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.HealthClient.cs
    startLine: 623
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Asynchronously gets the health of a Service Fabric cluster by using a query description.</p>\n"
  example: []
  syntax:
    content: public Task<ClusterHealth> GetClusterHealthAsync(ClusterHealthQueryDescription queryDescription)
    content.vb: Public Function GetClusterHealthAsync(queryDescription As ClusterHealthQueryDescription) As Task(Of ClusterHealth)
    parameters:
    - id: queryDescription
      type: System.Fabric.Description.ClusterHealthQueryDescription
      description: The query description that defined query parameters like health policies, filters etc.
    return:
      type: System.Threading.Tasks.Task{System.Fabric.Health.ClusterHealth}
      description: "\n<p>The health of a Service Fabric cluster.</p>\n"
  overload: System.Fabric.FabricClient.HealthClient.GetClusterHealthAsync*
  exceptions:
  - type: System.Fabric.FabricObjectClosedException
    commentId: T:System.Fabric.FabricObjectClosedException
    description: "\n<p>The <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object is in a closed state. Dispose of the <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> \nobject you are using and instantiate a new <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>Returned when a null reference is passed to a method that does not accept it as a valid argument.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>Caused by one of the following:</p>\n<p>E_INVALIDARG is returned when one or more arguments are not valid.</p>\n"
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: "\n<p>Caused by one of the following:</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.OperationTimedOut\" data-throw-if-not-resolved=\"false\"></xref> is returned when the operation takes more than MaxOperationTimeout to complete.</p>\n"
  - type: System.Fabric.FabricException
    commentId: T:System.Fabric.FabricException
    description: "\n<p>Caused by one of the following:</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.FabricHealthEntityNotFound\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.CommunicationError\" data-throw-if-not-resolved=\"false\"></xref> is returned when a communication error caused the operation to fail.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidCredentialType\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509FindType\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509StoreLocation\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509StoreName\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509Thumbprint\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidProtectionLevel\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509Store\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidSubjectName\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  - type: System.Fabric.FabricTransientException
    commentId: T:System.Fabric.FabricTransientException
    description: "\n<p>Caused by one of the following:</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.ServiceTooBusy\" data-throw-if-not-resolved=\"false\"></xref> is returned when the service is too busy to process the operation.</p>\n"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>Caused by one of the following:</p>\n<p>E_ACCESSDENIED is returned when the access check has failed for this operation.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.HealthClient.GetClusterHealthAsync(System.Fabric.Description.ClusterHealthQueryDescription,System.TimeSpan,System.Threading.CancellationToken)
  commentId: M:System.Fabric.FabricClient.HealthClient.GetClusterHealthAsync(System.Fabric.Description.ClusterHealthQueryDescription,System.TimeSpan,System.Threading.CancellationToken)
  id: GetClusterHealthAsync(System.Fabric.Description.ClusterHealthQueryDescription,System.TimeSpan,System.Threading.CancellationToken)
  parent: System.Fabric.FabricClient.HealthClient
  langs:
  - csharp
  - vb
  name: GetClusterHealthAsync(ClusterHealthQueryDescription, TimeSpan, CancellationToken)
  nameWithType: FabricClient.HealthClient.GetClusterHealthAsync(ClusterHealthQueryDescription, TimeSpan, CancellationToken)
  fullName: System.Fabric.FabricClient.HealthClient.GetClusterHealthAsync(System.Fabric.Description.ClusterHealthQueryDescription, System.TimeSpan, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.HealthClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: GetClusterHealthAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.HealthClient.cs
    startLine: 693
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Asynchronously gets the health of a Service Fabric cluster by using a query description, a timeout and cancellation token.</p>\n"
  example: []
  syntax:
    content: public Task<ClusterHealth> GetClusterHealthAsync(ClusterHealthQueryDescription queryDescription, TimeSpan timeout, CancellationToken cancellationToken)
    content.vb: Public Function GetClusterHealthAsync(queryDescription As ClusterHealthQueryDescription, timeout As TimeSpan, cancellationToken As CancellationToken) As Task(Of ClusterHealth)
    parameters:
    - id: queryDescription
      type: System.Fabric.Description.ClusterHealthQueryDescription
      description: The query description that defined query parameters like health policies, filters etc.
    - id: timeout
      type: System.TimeSpan
      description: "\n<p>The maximum amount of time Service Fabric will allow this operation to continue before returning a <xref href=\"System.TimeoutException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The optional cancellation token that the operation is observing. It can be used to send a notification that the operation should be canceled. \nNote that cancellation is advisory and that the operation may still be completed even if it is canceled.</p>\n"
    return:
      type: System.Threading.Tasks.Task{System.Fabric.Health.ClusterHealth}
      description: "\n<p>The health of a Service Fabric cluster.</p>\n"
  overload: System.Fabric.FabricClient.HealthClient.GetClusterHealthAsync*
  exceptions:
  - type: System.Fabric.FabricObjectClosedException
    commentId: T:System.Fabric.FabricObjectClosedException
    description: "\n<p>The <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object is in a closed state. Dispose of the <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> \nobject you are using and instantiate a new <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>Returned when a null reference is passed to a method that does not accept it as a valid argument.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>Caused by one of the following:</p>\n<p>E_INVALIDARG is returned when one or more arguments are not valid.</p>\n"
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: "\n<p>Caused by one of the following:</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.OperationTimedOut\" data-throw-if-not-resolved=\"false\"></xref> is returned when the operation takes more than the user provided <em>timeout</em> to complete.</p>\n"
  - type: System.Fabric.FabricException
    commentId: T:System.Fabric.FabricException
    description: "\n<p>Caused by one of the following:</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.FabricHealthEntityNotFound\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.CommunicationError\" data-throw-if-not-resolved=\"false\"></xref> is returned when a communication error caused the operation to fail.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidCredentialType\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509FindType\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509StoreLocation\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509StoreName\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509Thumbprint\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidProtectionLevel\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509Store\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidSubjectName\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  - type: System.Fabric.FabricTransientException
    commentId: T:System.Fabric.FabricTransientException
    description: "\n<p>Caused by one of the following:</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.ServiceTooBusy\" data-throw-if-not-resolved=\"false\"></xref> is returned when the service is too busy to process the operation.</p>\n"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>Caused by one of the following:</p>\n<p>E_ACCESSDENIED is returned when the access check has failed for this operation.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.HealthClient.GetNodeHealthAsync(System.String)
  commentId: M:System.Fabric.FabricClient.HealthClient.GetNodeHealthAsync(System.String)
  id: GetNodeHealthAsync(System.String)
  parent: System.Fabric.FabricClient.HealthClient
  langs:
  - csharp
  - vb
  name: GetNodeHealthAsync(String)
  nameWithType: FabricClient.HealthClient.GetNodeHealthAsync(String)
  fullName: System.Fabric.FabricClient.HealthClient.GetNodeHealthAsync(System.String)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.HealthClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: GetNodeHealthAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.HealthClient.cs
    startLine: 820
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Asynchronously gets the health of a Service Fabric node.</p>\n"
  remarks: "\n<p>The following example gets the health of a node.</p>\n<pre><code class=\"c#\">public static bool GetNodeHealth(string clusterConnection)\n{\n  NodeHealth nodeHealth;\n\n  // Connect to the cluster.\n  FabricClient fabricClient = new FabricClient(clusterConnection);\n\n  // Get the node health.\n  try\n  {\n      nodeHealth = fabricClient.HealthManager.GetNodeHealthAsync(\"Node1\").Result;\n  }\n  catch (Exception e)\n  {\n      Console.WriteLine(\"Error: \" + e.Message);\n\n      if (e.InnerException != null)\nConsole.WriteLine(\"  Inner Exception: \" + e.InnerException.Message);\n\n      return false;\n  }\n\n  // Display the node health information.\n  Console.WriteLine(\"Node Health:\");\n  Console.WriteLine(\"  Node {0}: {1}\", nodeHealth.NodeName, nodeHealth.AggregatedHealthState);\n\n  // List the health events.\n  Console.WriteLine(\"    Health Events:\");\n  IList&lt;HealthEvent&gt; healthEvents = nodeHealth.HealthEvents;\n  foreach (HealthEvent healthEvent in healthEvents)\n  {\n      Console.WriteLine(\"      Health Event:\");\n      Console.WriteLine(\"        Last Modified: \" + healthEvent.LastModifiedUtcTimestamp);\n      Console.WriteLine(\"        Source UTC Timestamp: \" + healthEvent.SourceUtcTimestamp);\n      Console.WriteLine(\"        Is Expired: \" + healthEvent.IsExpired);\n      Console.WriteLine(\"        Health Information:\");\n      Console.WriteLine(\"          Description: \" + healthEvent.HealthInformation.Description);\n      Console.WriteLine(\"          Source ID: \" + healthEvent.HealthInformation.SourceId);\n      Console.WriteLine(\"          Health State: \" + healthEvent.HealthInformation.HealthState);\n      Console.WriteLine(\"          Property: \" + healthEvent.HealthInformation.Property);\n      Console.WriteLine(\"          Remove When Expired: \" + healthEvent.HealthInformation.RemoveWhenExpired);\n      Console.WriteLine(\"          Sequence Number: \" + healthEvent.HealthInformation.SequenceNumber);\n      Console.WriteLine(\"          Time to Live: \" + healthEvent.HealthInformation.TimeToLive);\n  }\n\n  // List the unhealthy evaluations.\n  Console.WriteLine(\"    Unhealthy Evaluations:\");\n  IList&lt;HealthEvaluation&gt; healthEvaluationList = nodeHealth.UnhealthyEvaluations;\n  foreach (HealthEvaluation healthEvaluation in healthEvaluationList)\n  {\n      Console.WriteLine(\"      Kind: \" + healthEvaluation.Kind);\n      Console.WriteLine(\"        Aggregated Health State: \" + healthEvaluation.AggregatedHealthState);\n      Console.WriteLine(\"        Description: \" + healthEvaluation.Description);\n  }\n\n  Console.WriteLine(); \n  return true;\n}</code></pre>\n"
  example: []
  syntax:
    content: public Task<NodeHealth> GetNodeHealthAsync(string nodeName)
    content.vb: Public Function GetNodeHealthAsync(nodeName As String) As Task(Of NodeHealth)
    parameters:
    - id: nodeName
      type: System.String
      description: "\n<p>The Service Fabric node name.</p>\n"
    return:
      type: System.Threading.Tasks.Task{System.Fabric.Health.NodeHealth}
      description: "\n<p>The health of a Service Fabric node.</p>\n"
  overload: System.Fabric.FabricClient.HealthClient.GetNodeHealthAsync*
  exceptions:
  - type: System.Fabric.FabricObjectClosedException
    commentId: T:System.Fabric.FabricObjectClosedException
    description: "\n<p>The <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object is in a closed state. Dispose of the <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> \nobject you are using and instantiate a new <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>Returned when a null reference is passed to a method that does not accept it as a valid argument.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>Caused by one of the following:</p>\n<p>E_INVALIDARG is returned when one or more arguments are not valid.</p>\n"
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: "\n<p>Caused by one of the following:</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.OperationTimedOut\" data-throw-if-not-resolved=\"false\"></xref> is returned when the operation takes more than MaxOperationTimeout to complete.</p>\n"
  - type: System.Fabric.FabricException
    commentId: T:System.Fabric.FabricException
    description: "\n<p>Caused by one of the following:</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.FabricHealthEntityNotFound\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.CommunicationError\" data-throw-if-not-resolved=\"false\"></xref> is returned when a communication error caused the operation to fail.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidCredentialType\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509FindType\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509StoreLocation\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509StoreName\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509Thumbprint\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidProtectionLevel\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509Store\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidSubjectName\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  - type: System.Fabric.FabricTransientException
    commentId: T:System.Fabric.FabricTransientException
    description: "\n<p>Caused by one of the following:</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.ServiceTooBusy\" data-throw-if-not-resolved=\"false\"></xref> is returned when the service is too busy to process the operation.</p>\n"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>Caused by one of the following:</p>\n<p>E_ACCESSDENIED is returned when the access check has failed for this operation.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.HealthClient.GetNodeHealthAsync(System.String,System.Fabric.Health.ClusterHealthPolicy)
  commentId: M:System.Fabric.FabricClient.HealthClient.GetNodeHealthAsync(System.String,System.Fabric.Health.ClusterHealthPolicy)
  id: GetNodeHealthAsync(System.String,System.Fabric.Health.ClusterHealthPolicy)
  parent: System.Fabric.FabricClient.HealthClient
  langs:
  - csharp
  - vb
  name: GetNodeHealthAsync(String, ClusterHealthPolicy)
  nameWithType: FabricClient.HealthClient.GetNodeHealthAsync(String, ClusterHealthPolicy)
  fullName: System.Fabric.FabricClient.HealthClient.GetNodeHealthAsync(System.String, System.Fabric.Health.ClusterHealthPolicy)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.HealthClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: GetNodeHealthAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.HealthClient.cs
    startLine: 886
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Asynchronously gets the health of a Service Fabric node.</p>\n"
  example: []
  syntax:
    content: public Task<NodeHealth> GetNodeHealthAsync(string nodeName, ClusterHealthPolicy healthPolicy)
    content.vb: Public Function GetNodeHealthAsync(nodeName As String, healthPolicy As ClusterHealthPolicy) As Task(Of NodeHealth)
    parameters:
    - id: nodeName
      type: System.String
      description: "\n<p>The Service Fabric node name.</p>\n"
    - id: healthPolicy
      type: System.Fabric.Health.ClusterHealthPolicy
      description: The cluster health policy used to evaluate the node health.
    return:
      type: System.Threading.Tasks.Task{System.Fabric.Health.NodeHealth}
      description: "\n<p>The health of a Service Fabric node.</p>\n"
  overload: System.Fabric.FabricClient.HealthClient.GetNodeHealthAsync*
  exceptions:
  - type: System.Fabric.FabricObjectClosedException
    commentId: T:System.Fabric.FabricObjectClosedException
    description: "\n<p>The <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object is in a closed state. Dispose of the <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> \nobject you are using and instantiate a new <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>Returned when a null reference is passed to a method that does not accept it as a valid argument.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>Caused by one of the following:</p>\n<p>E_INVALIDARG is returned when one or more arguments are not valid.</p>\n"
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: "\n<p>Caused by one of the following:</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.OperationTimedOut\" data-throw-if-not-resolved=\"false\"></xref> is returned when the operation takes more than MaxOperationTimeout to complete.</p>\n"
  - type: System.Fabric.FabricException
    commentId: T:System.Fabric.FabricException
    description: "\n<p>Caused by one of the following:</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.FabricHealthEntityNotFound\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.CommunicationError\" data-throw-if-not-resolved=\"false\"></xref> is returned when a communication error caused the operation to fail.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidCredentialType\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509FindType\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509StoreLocation\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509StoreName\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509Thumbprint\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidProtectionLevel\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509Store\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidSubjectName\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  - type: System.Fabric.FabricTransientException
    commentId: T:System.Fabric.FabricTransientException
    description: "\n<p>Caused by one of the following:</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.ServiceTooBusy\" data-throw-if-not-resolved=\"false\"></xref> is returned when the service is too busy to process the operation.</p>\n"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>Caused by one of the following:</p>\n<p>E_ACCESSDENIED is returned when the access check has failed for this operation.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.HealthClient.GetNodeHealthAsync(System.String,System.TimeSpan,System.Threading.CancellationToken)
  commentId: M:System.Fabric.FabricClient.HealthClient.GetNodeHealthAsync(System.String,System.TimeSpan,System.Threading.CancellationToken)
  id: GetNodeHealthAsync(System.String,System.TimeSpan,System.Threading.CancellationToken)
  parent: System.Fabric.FabricClient.HealthClient
  langs:
  - csharp
  - vb
  name: GetNodeHealthAsync(String, TimeSpan, CancellationToken)
  nameWithType: FabricClient.HealthClient.GetNodeHealthAsync(String, TimeSpan, CancellationToken)
  fullName: System.Fabric.FabricClient.HealthClient.GetNodeHealthAsync(System.String, System.TimeSpan, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.HealthClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: GetNodeHealthAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.HealthClient.cs
    startLine: 958
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Asynchronously gets the health of a Service Fabric node by using the specified timeout and cancellation token.</p>\n"
  example: []
  syntax:
    content: public Task<NodeHealth> GetNodeHealthAsync(string nodeName, TimeSpan timeout, CancellationToken cancellationToken)
    content.vb: Public Function GetNodeHealthAsync(nodeName As String, timeout As TimeSpan, cancellationToken As CancellationToken) As Task(Of NodeHealth)
    parameters:
    - id: nodeName
      type: System.String
      description: "\n<p>The Service Fabric node.</p>\n"
    - id: timeout
      type: System.TimeSpan
      description: "\n<p>The maximum amount of time Service Fabric will allow this operation to continue before returning a <xref href=\"System.TimeoutException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The optional cancellation token that the operation is observing. It can be used to send a notification that the \noperation should be canceled. Note that cancellation is advisory and that the operation may still be completed even if it is canceled.</p>\n"
    return:
      type: System.Threading.Tasks.Task{System.Fabric.Health.NodeHealth}
      description: "\n<p>The health of a Service Fabric node.</p>\n"
  overload: System.Fabric.FabricClient.HealthClient.GetNodeHealthAsync*
  exceptions:
  - type: System.Fabric.FabricObjectClosedException
    commentId: T:System.Fabric.FabricObjectClosedException
    description: "\n<p>The <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object is in a closed state. Dispose of the <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> \nobject you are using and instantiate a new <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>Returned when a null reference is passed to a method that does not accept it as a valid argument.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>Caused by one of the following:</p>\n<p>E_INVALIDARG is returned when one or more arguments are not valid.</p>\n"
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: "\n<p>Caused by one of the following:</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.OperationTimedOut\" data-throw-if-not-resolved=\"false\"></xref> is returned when the operation takes more than the user provided <em>timeout</em> to complete.</p>\n"
  - type: System.Fabric.FabricException
    commentId: T:System.Fabric.FabricException
    description: "\n<p>Caused by one of the following:</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.FabricHealthEntityNotFound\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.CommunicationError\" data-throw-if-not-resolved=\"false\"></xref> is returned when a communication error caused the operation to fail.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidCredentialType\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509FindType\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509StoreLocation\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509StoreName\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509Thumbprint\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidProtectionLevel\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509Store\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidSubjectName\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  - type: System.Fabric.FabricTransientException
    commentId: T:System.Fabric.FabricTransientException
    description: "\n<p>Caused by one of the following:</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.ServiceTooBusy\" data-throw-if-not-resolved=\"false\"></xref> is returned when the service is too busy to process the operation.</p>\n"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>Caused by one of the following:</p>\n<p>E_ACCESSDENIED is returned when the access check has failed for this operation.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.HealthClient.GetNodeHealthAsync(System.String,System.Fabric.Health.ClusterHealthPolicy,System.TimeSpan,System.Threading.CancellationToken)
  commentId: M:System.Fabric.FabricClient.HealthClient.GetNodeHealthAsync(System.String,System.Fabric.Health.ClusterHealthPolicy,System.TimeSpan,System.Threading.CancellationToken)
  id: GetNodeHealthAsync(System.String,System.Fabric.Health.ClusterHealthPolicy,System.TimeSpan,System.Threading.CancellationToken)
  parent: System.Fabric.FabricClient.HealthClient
  langs:
  - csharp
  - vb
  name: GetNodeHealthAsync(String, ClusterHealthPolicy, TimeSpan, CancellationToken)
  nameWithType: FabricClient.HealthClient.GetNodeHealthAsync(String, ClusterHealthPolicy, TimeSpan, CancellationToken)
  fullName: System.Fabric.FabricClient.HealthClient.GetNodeHealthAsync(System.String, System.Fabric.Health.ClusterHealthPolicy, System.TimeSpan, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.HealthClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: GetNodeHealthAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.HealthClient.cs
    startLine: 1031
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Asynchronously gets the health of a Service Fabric node by using the specified timeout and cancellation token.</p>\n"
  example: []
  syntax:
    content: public Task<NodeHealth> GetNodeHealthAsync(string nodeName, ClusterHealthPolicy healthPolicy, TimeSpan timeout, CancellationToken cancellationToken)
    content.vb: Public Function GetNodeHealthAsync(nodeName As String, healthPolicy As ClusterHealthPolicy, timeout As TimeSpan, cancellationToken As CancellationToken) As Task(Of NodeHealth)
    parameters:
    - id: nodeName
      type: System.String
      description: "\n<p>The Service Fabric node.</p>\n"
    - id: healthPolicy
      type: System.Fabric.Health.ClusterHealthPolicy
      description: The cluster health policy used to evaluate the node health.
    - id: timeout
      type: System.TimeSpan
      description: "\n<p>The maximum amount of time Service Fabric will allow this operation to continue before returning a <xref href=\"System.TimeoutException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The optional cancellation token that the operation is observing. It can be used to send a notification that the operation should be canceled. \nNote that cancellation is advisory and that the operation may still be completed even if it is canceled.</p>\n"
    return:
      type: System.Threading.Tasks.Task{System.Fabric.Health.NodeHealth}
      description: "\n<p>The health of a Service Fabric node.</p>\n"
  overload: System.Fabric.FabricClient.HealthClient.GetNodeHealthAsync*
  exceptions:
  - type: System.Fabric.FabricObjectClosedException
    commentId: T:System.Fabric.FabricObjectClosedException
    description: "\n<p>The <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object is in a closed state. Dispose of the <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> \nobject you are using and instantiate a new <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>Returned when a null reference is passed to a method that does not accept it as a valid argument.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>Caused by one of the following:</p>\n<p>E_INVALIDARG is returned when one or more arguments are not valid.</p>\n"
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: "\n<p>Caused by one of the following:</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.OperationTimedOut\" data-throw-if-not-resolved=\"false\"></xref> is returned when the operation takes more than the user provided <em>timeout</em> to complete.</p>\n"
  - type: System.Fabric.FabricException
    commentId: T:System.Fabric.FabricException
    description: "\n<p>Caused by one of the following:</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.FabricHealthEntityNotFound\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.CommunicationError\" data-throw-if-not-resolved=\"false\"></xref> is returned when a communication error caused the operation to fail.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidCredentialType\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509FindType\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509StoreLocation\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509StoreName\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509Thumbprint\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidProtectionLevel\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509Store\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidSubjectName\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  - type: System.Fabric.FabricTransientException
    commentId: T:System.Fabric.FabricTransientException
    description: "\n<p>Caused by one of the following:</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.ServiceTooBusy\" data-throw-if-not-resolved=\"false\"></xref> is returned when the service is too busy to process the operation.</p>\n"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>Caused by one of the following:</p>\n<p>E_ACCESSDENIED is returned when the access check has failed for this operation.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.HealthClient.GetNodeHealthAsync(System.Fabric.Description.NodeHealthQueryDescription)
  commentId: M:System.Fabric.FabricClient.HealthClient.GetNodeHealthAsync(System.Fabric.Description.NodeHealthQueryDescription)
  id: GetNodeHealthAsync(System.Fabric.Description.NodeHealthQueryDescription)
  parent: System.Fabric.FabricClient.HealthClient
  langs:
  - csharp
  - vb
  name: GetNodeHealthAsync(NodeHealthQueryDescription)
  nameWithType: FabricClient.HealthClient.GetNodeHealthAsync(NodeHealthQueryDescription)
  fullName: System.Fabric.FabricClient.HealthClient.GetNodeHealthAsync(System.Fabric.Description.NodeHealthQueryDescription)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.HealthClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: GetNodeHealthAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.HealthClient.cs
    startLine: 1094
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Asynchronously gets the health of a Service Fabric node by using the specified timeout and cancellation token.</p>\n"
  example: []
  syntax:
    content: public Task<NodeHealth> GetNodeHealthAsync(NodeHealthQueryDescription queryDescription)
    content.vb: Public Function GetNodeHealthAsync(queryDescription As NodeHealthQueryDescription) As Task(Of NodeHealth)
    parameters:
    - id: queryDescription
      type: System.Fabric.Description.NodeHealthQueryDescription
      description: The query description that defines parameters like health policy, filters etc.
    return:
      type: System.Threading.Tasks.Task{System.Fabric.Health.NodeHealth}
      description: "\n<p>The health of a Service Fabric node.</p>\n"
  overload: System.Fabric.FabricClient.HealthClient.GetNodeHealthAsync*
  exceptions:
  - type: System.Fabric.FabricObjectClosedException
    commentId: T:System.Fabric.FabricObjectClosedException
    description: "\n<p>The <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object is in a closed state. Dispose of the <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> \nobject you are using and instantiate a new <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>Returned when a null reference is passed to a method that does not accept it as a valid argument.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>Caused by one of the following:</p>\n<p>E_INVALIDARG is returned when one or more arguments are not valid.</p>\n"
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: "\n<p>Caused by one of the following:</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.OperationTimedOut\" data-throw-if-not-resolved=\"false\"></xref> is returned when the operation takes more than MaxOperationTimeout to complete.</p>\n"
  - type: System.Fabric.FabricException
    commentId: T:System.Fabric.FabricException
    description: "\n<p>Caused by one of the following:</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.FabricHealthEntityNotFound\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.CommunicationError\" data-throw-if-not-resolved=\"false\"></xref> is returned when a communication error caused the operation to fail.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidCredentialType\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509FindType\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509StoreLocation\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509StoreName\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509Thumbprint\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidProtectionLevel\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509Store\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidSubjectName\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  - type: System.Fabric.FabricTransientException
    commentId: T:System.Fabric.FabricTransientException
    description: "\n<p>Caused by one of the following:</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.ServiceTooBusy\" data-throw-if-not-resolved=\"false\"></xref> is returned when the service is too busy to process the operation.</p>\n"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>Caused by one of the following:</p>\n<p>E_ACCESSDENIED is returned when the access check has failed for this operation.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.HealthClient.GetNodeHealthAsync(System.Fabric.Description.NodeHealthQueryDescription,System.TimeSpan,System.Threading.CancellationToken)
  commentId: M:System.Fabric.FabricClient.HealthClient.GetNodeHealthAsync(System.Fabric.Description.NodeHealthQueryDescription,System.TimeSpan,System.Threading.CancellationToken)
  id: GetNodeHealthAsync(System.Fabric.Description.NodeHealthQueryDescription,System.TimeSpan,System.Threading.CancellationToken)
  parent: System.Fabric.FabricClient.HealthClient
  langs:
  - csharp
  - vb
  name: GetNodeHealthAsync(NodeHealthQueryDescription, TimeSpan, CancellationToken)
  nameWithType: FabricClient.HealthClient.GetNodeHealthAsync(NodeHealthQueryDescription, TimeSpan, CancellationToken)
  fullName: System.Fabric.FabricClient.HealthClient.GetNodeHealthAsync(System.Fabric.Description.NodeHealthQueryDescription, System.TimeSpan, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.HealthClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: GetNodeHealthAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.HealthClient.cs
    startLine: 1163
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Asynchronously gets the health of a Service Fabric node by using the specified timeout and cancellation token.</p>\n"
  example: []
  syntax:
    content: public Task<NodeHealth> GetNodeHealthAsync(NodeHealthQueryDescription queryDescription, TimeSpan timeout, CancellationToken cancellationToken)
    content.vb: Public Function GetNodeHealthAsync(queryDescription As NodeHealthQueryDescription, timeout As TimeSpan, cancellationToken As CancellationToken) As Task(Of NodeHealth)
    parameters:
    - id: queryDescription
      type: System.Fabric.Description.NodeHealthQueryDescription
      description: The query description that defines parameters like health policy, filters etc.
    - id: timeout
      type: System.TimeSpan
      description: "\n<p>The maximum amount of time Service Fabric will allow this operation to continue before returning a <xref href=\"System.TimeoutException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The optional cancellation token that the operation is observing. It can be used to send a notification that the operation should be canceled. \nNote that cancellation is advisory and that the operation may still be completed even if it is canceled.</p>\n"
    return:
      type: System.Threading.Tasks.Task{System.Fabric.Health.NodeHealth}
      description: "\n<p>The health of a Service Fabric node.</p>\n"
  overload: System.Fabric.FabricClient.HealthClient.GetNodeHealthAsync*
  exceptions:
  - type: System.Fabric.FabricObjectClosedException
    commentId: T:System.Fabric.FabricObjectClosedException
    description: "\n<p>The <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object is in a closed state. Dispose of the <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object you are using and instantiate a new <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>Returned when a null reference is passed to a method that does not accept it as a valid argument.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>Caused by one of the following:</p>\n<p>E_INVALIDARG is returned when one or more arguments are not valid.</p>\n"
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: "\n<p>Caused by one of the following:</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.OperationTimedOut\" data-throw-if-not-resolved=\"false\"></xref> is returned when the operation takes more than the user provided <em>timeout</em> to complete.</p>\n"
  - type: System.Fabric.FabricException
    commentId: T:System.Fabric.FabricException
    description: "\n<p>Caused by one of the following:</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.FabricHealthEntityNotFound\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.CommunicationError\" data-throw-if-not-resolved=\"false\"></xref> is returned when a communication error caused the operation to fail.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidCredentialType\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509FindType\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509StoreLocation\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509StoreName\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509Thumbprint\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidProtectionLevel\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509Store\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidSubjectName\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  - type: System.Fabric.FabricTransientException
    commentId: T:System.Fabric.FabricTransientException
    description: "\n<p>Caused by one of the following:</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.ServiceTooBusy\" data-throw-if-not-resolved=\"false\"></xref> is returned when the service is too busy to process the operation.</p>\n"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>Caused by one of the following:</p>\n<p>E_ACCESSDENIED is returned when the access check has failed for this operation.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.HealthClient.GetApplicationHealthAsync(System.Uri)
  commentId: M:System.Fabric.FabricClient.HealthClient.GetApplicationHealthAsync(System.Uri)
  id: GetApplicationHealthAsync(System.Uri)
  parent: System.Fabric.FabricClient.HealthClient
  langs:
  - csharp
  - vb
  name: GetApplicationHealthAsync(Uri)
  nameWithType: FabricClient.HealthClient.GetApplicationHealthAsync(Uri)
  fullName: System.Fabric.FabricClient.HealthClient.GetApplicationHealthAsync(System.Uri)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.HealthClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: GetApplicationHealthAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.HealthClient.cs
    startLine: 1297
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Asynchronously gets the health of the specified Service Fabric application.</p>\n"
  remarks: "\n<p>The following example gets the health of an application.</p>\n<pre><code class=\"c#\">public static bool GetApplicationHealth(string clusterConnection)\n{\n  ApplicationHealth applicationHealth;\n  Uri applicationName = new Uri(\"fabric:/myapp/todo\");\n\n  // Connect to the cluster.\n  FabricClient fabricClient = new FabricClient(clusterConnection);\n\n  // Get the application health.\n  try\n  {\n      applicationHealth = fabricClient.HealthManager.GetApplicationHealthAsync(applicationName).Result;\n  }\n  catch (Exception e)\n  {\n      Console.WriteLine(\"Error: \" + e.Message);\n\n      if (e.InnerException != null)\nConsole.WriteLine(\"  Inner Exception: \" + e.InnerException.Message);\n\n      return false;\n  }\n\n  // Display the application health information.\n  Console.WriteLine(\"Get Application Health:\");\n  Console.WriteLine(\"  Application {0}: {1}\", applicationHealth.ApplicationName, applicationHealth.AggregatedHealthState);\n\n  // List the deployed application health states.\n  Console.WriteLine(\"    Deployed applications:\");\n  IList&lt;DeployedApplicationHealthState&gt; deployedAppHealthStateList = applicationHealth.DeployedApplicationHealthStates;\n  foreach (DeployedApplicationHealthState deployedAppHealthState in deployedAppHealthStateList)\n  {\n      Console.WriteLine(\"      Application: \" + deployedAppHealthState.ApplicationName);\n      Console.WriteLine(\"        Aggregated Health State: \" + deployedAppHealthState.AggregatedHealthState);\n      Console.WriteLine(\"        Node Name: \" + deployedAppHealthState.NodeName);\n  }\n\n  // List the deployed services health states.\n  Console.WriteLine(\"    Service Health States:\");\n  IList&lt;ServiceHealthState&gt; deployedSvcsHealthStateList = applicationHealth.ServiceHealthStates;\n  foreach (ServiceHealthState serviceHealthState in deployedSvcsHealthStateList)\n  {\n      Console.WriteLine(\"      Service {0}: {1}\", serviceHealthState.ServiceName, serviceHealthState.AggregatedHealthState);\n  }\n\n  // List the health events.\n  Console.WriteLine(\"    Health Events:\");\n  IList&lt;HealthEvent&gt; healthEvents = applicationHealth.HealthEvents;\n  foreach (HealthEvent healthEvent in healthEvents)\n  {\n      Console.WriteLine(\"      Health Event:\");\n      Console.WriteLine(\"        Last Modified: \" + healthEvent.LastModifiedUtcTimestamp);\n      Console.WriteLine(\"        Source UTC Timestamp: \" + healthEvent.SourceUtcTimestamp);\n      Console.WriteLine(\"        Is Expired: \" + healthEvent.IsExpired);\n      Console.WriteLine(\"        Health Information:\");\n      Console.WriteLine(\"          Description: \" + healthEvent.HealthInformation.Description);\n      Console.WriteLine(\"          Source ID: \" + healthEvent.HealthInformation.SourceId);\n      Console.WriteLine(\"          Health State: \" + healthEvent.HealthInformation.HealthState);\n      Console.WriteLine(\"          Property: \" + healthEvent.HealthInformation.Property);\n      Console.WriteLine(\"          Remove When Expired: \" + healthEvent.HealthInformation.RemoveWhenExpired);\n      Console.WriteLine(\"          Sequence Number: \" + healthEvent.HealthInformation.SequenceNumber);\n      Console.WriteLine(\"          Time to Live: \" + healthEvent.HealthInformation.TimeToLive);\n  }\n\n  Console.WriteLine();\n  return true;\n}</code></pre>\n"
  example: []
  syntax:
    content: public Task<ApplicationHealth> GetApplicationHealthAsync(Uri applicationName)
    content.vb: Public Function GetApplicationHealthAsync(applicationName As Uri) As Task(Of ApplicationHealth)
    parameters:
    - id: applicationName
      type: System.Uri
      description: "\n<p>The URI of the Service Fabric application.</p>\n"
    return:
      type: System.Threading.Tasks.Task{System.Fabric.Health.ApplicationHealth}
      description: "\n<p>The health of the specified Service Fabric application.</p>\n"
  overload: System.Fabric.FabricClient.HealthClient.GetApplicationHealthAsync*
  exceptions:
  - type: System.Fabric.FabricObjectClosedException
    commentId: T:System.Fabric.FabricObjectClosedException
    description: "\n<p>The <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object is in a closed state. Dispose of the <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref>\nobject you are using and instantiate a new <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>Returned when a null reference is passed to a method that does not accept it as a valid argument.</p>\n"
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: "\n<p>Caused by one of the following:</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.OperationTimedOut\" data-throw-if-not-resolved=\"false\"></xref> is returned when the operation takes more than MaxOperationTimeout to complete.</p>\n"
  - type: System.Fabric.FabricException
    commentId: T:System.Fabric.FabricException
    description: "\n<p>Caused by one of the following:</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.FabricHealthEntityNotFound\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidNameUri\" data-throw-if-not-resolved=\"false\"></xref> is returned when <em>applicationName</em> is not a valid Service Fabric Name.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.CommunicationError\" data-throw-if-not-resolved=\"false\"></xref> is returned when a communication error caused the operation to fail.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidCredentialType\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509FindType\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509StoreLocation\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509StoreName\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509Thumbprint\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidProtectionLevel\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509Store\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidSubjectName\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  - type: System.Fabric.FabricTransientException
    commentId: T:System.Fabric.FabricTransientException
    description: "\n<p>Caused by one of the following:</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.ServiceTooBusy\" data-throw-if-not-resolved=\"false\"></xref> is returned when the service is too busy to process the operation.</p>\n"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>Caused by one of the following:</p>\n<p>E_ACCESSDENIED is returned when the access check has failed for this operation.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.HealthClient.GetApplicationHealthAsync(System.Uri,System.Fabric.Health.ApplicationHealthPolicy)
  commentId: M:System.Fabric.FabricClient.HealthClient.GetApplicationHealthAsync(System.Uri,System.Fabric.Health.ApplicationHealthPolicy)
  id: GetApplicationHealthAsync(System.Uri,System.Fabric.Health.ApplicationHealthPolicy)
  parent: System.Fabric.FabricClient.HealthClient
  langs:
  - csharp
  - vb
  name: GetApplicationHealthAsync(Uri, ApplicationHealthPolicy)
  nameWithType: FabricClient.HealthClient.GetApplicationHealthAsync(Uri, ApplicationHealthPolicy)
  fullName: System.Fabric.FabricClient.HealthClient.GetApplicationHealthAsync(System.Uri, System.Fabric.Health.ApplicationHealthPolicy)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.HealthClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: GetApplicationHealthAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.HealthClient.cs
    startLine: 1365
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Asynchronously gets the health of the specified Service Fabric application by using the specified timeout and cancellation token.</p>\n"
  example: []
  syntax:
    content: public Task<ApplicationHealth> GetApplicationHealthAsync(Uri applicationName, ApplicationHealthPolicy healthPolicy)
    content.vb: Public Function GetApplicationHealthAsync(applicationName As Uri, healthPolicy As ApplicationHealthPolicy) As Task(Of ApplicationHealth)
    parameters:
    - id: applicationName
      type: System.Uri
      description: "\n<p>The URI of the Service Fabric application.</p>\n"
    - id: healthPolicy
      type: System.Fabric.Health.ApplicationHealthPolicy
      description: The application health policy used to evaluate the application.
    return:
      type: System.Threading.Tasks.Task{System.Fabric.Health.ApplicationHealth}
      description: "\n<p>The health reports of the specified Service Fabric application.</p>\n"
  overload: System.Fabric.FabricClient.HealthClient.GetApplicationHealthAsync*
  exceptions:
  - type: System.Fabric.FabricObjectClosedException
    commentId: T:System.Fabric.FabricObjectClosedException
    description: "\n<p>The <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object is in a closed state. Dispose of the <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> \nobject you are using and instantiate a new <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>Returned when a null reference is passed to a method that does not accept it as a valid argument.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>Caused by one of the following:</p>\n<p>E_INVALIDARG is returned when one or more arguments are not valid.</p>\n"
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: "\n<p>Caused by one of the following:</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.OperationTimedOut\" data-throw-if-not-resolved=\"false\"></xref> is returned when the operation takes more than MaxOperationTimeout to complete.</p>\n"
  - type: System.Fabric.FabricException
    commentId: T:System.Fabric.FabricException
    description: "\n<p>Caused by one of the following:</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.FabricHealthEntityNotFound\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidNameUri\" data-throw-if-not-resolved=\"false\"></xref> is returned when <em>applicationName</em> is not a valid Service Fabric Name.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.CommunicationError\" data-throw-if-not-resolved=\"false\"></xref> is returned when a communication error caused the operation to fail.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidCredentialType\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509FindType\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509StoreLocation\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509StoreName\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509Thumbprint\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidProtectionLevel\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509Store\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidSubjectName\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  - type: System.Fabric.FabricTransientException
    commentId: T:System.Fabric.FabricTransientException
    description: "\n<p>Caused by one of the following:</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.ServiceTooBusy\" data-throw-if-not-resolved=\"false\"></xref> is returned when the service is too busy to process the operation.</p>\n"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>Caused by one of the following:</p>\n<p>E_ACCESSDENIED is returned when the access check has failed for this operation.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.HealthClient.GetApplicationHealthAsync(System.Uri,System.TimeSpan,System.Threading.CancellationToken)
  commentId: M:System.Fabric.FabricClient.HealthClient.GetApplicationHealthAsync(System.Uri,System.TimeSpan,System.Threading.CancellationToken)
  id: GetApplicationHealthAsync(System.Uri,System.TimeSpan,System.Threading.CancellationToken)
  parent: System.Fabric.FabricClient.HealthClient
  langs:
  - csharp
  - vb
  name: GetApplicationHealthAsync(Uri, TimeSpan, CancellationToken)
  nameWithType: FabricClient.HealthClient.GetApplicationHealthAsync(Uri, TimeSpan, CancellationToken)
  fullName: System.Fabric.FabricClient.HealthClient.GetApplicationHealthAsync(System.Uri, System.TimeSpan, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.HealthClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: GetApplicationHealthAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.HealthClient.cs
    startLine: 1439
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Asynchronously gets the health of the specified Service Fabric application by using the specified timeout and cancellation token.</p>\n"
  example: []
  syntax:
    content: public Task<ApplicationHealth> GetApplicationHealthAsync(Uri applicationName, TimeSpan timeout, CancellationToken cancellationToken)
    content.vb: Public Function GetApplicationHealthAsync(applicationName As Uri, timeout As TimeSpan, cancellationToken As CancellationToken) As Task(Of ApplicationHealth)
    parameters:
    - id: applicationName
      type: System.Uri
      description: "\n<p>The URI of the Service Fabric application.</p>\n"
    - id: timeout
      type: System.TimeSpan
      description: "\n<p>The maximum amount of time Service Fabric will allow this operation to continue before returning a <xref href=\"System.TimeoutException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The cancellation token that the operation is observing. It can be used to send a notification that the operation should be canceled.\nNote that cancellation is advisory and that the operation may still be completed even if it is canceled.</p>\n"
    return:
      type: System.Threading.Tasks.Task{System.Fabric.Health.ApplicationHealth}
      description: "\n<p>The health reports of the specified Service Fabric application.</p>\n"
  overload: System.Fabric.FabricClient.HealthClient.GetApplicationHealthAsync*
  exceptions:
  - type: System.Fabric.FabricObjectClosedException
    commentId: T:System.Fabric.FabricObjectClosedException
    description: "\n<p>The <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object is in a closed state. Dispose of the <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref>\nobject you are using and instantiate a new <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>Returned when a null reference is passed to a method that does not accept it as a valid argument.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>Caused by one of the following:</p>\n<p>E_INVALIDARG is returned when one or more arguments are not valid.</p>\n"
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: "\n<p>Caused by one of the following:</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.OperationTimedOut\" data-throw-if-not-resolved=\"false\"></xref> is returned when the operation takes more than the user provided <em>timeout</em> to complete.</p>\n"
  - type: System.Fabric.FabricException
    commentId: T:System.Fabric.FabricException
    description: "\n<p>Caused by one of the following:</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.FabricHealthEntityNotFound\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidNameUri\" data-throw-if-not-resolved=\"false\"></xref> is returned when <em>applicationName</em> is not a valid Service Fabric Name.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.CommunicationError\" data-throw-if-not-resolved=\"false\"></xref> is returned when a communication error caused the operation to fail.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidCredentialType\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509FindType\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509StoreLocation\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509StoreName\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509Thumbprint\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidProtectionLevel\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509Store\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidSubjectName\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  - type: System.Fabric.FabricTransientException
    commentId: T:System.Fabric.FabricTransientException
    description: "\n<p>Caused by one of the following:</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.ServiceTooBusy\" data-throw-if-not-resolved=\"false\"></xref> is returned when the service is too busy to process the operation.</p>\n"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>Caused by one of the following:</p>\n<p>E_ACCESSDENIED is returned when the access check has failed for this operation.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.HealthClient.GetApplicationHealthAsync(System.Uri,System.Fabric.Health.ApplicationHealthPolicy,System.TimeSpan,System.Threading.CancellationToken)
  commentId: M:System.Fabric.FabricClient.HealthClient.GetApplicationHealthAsync(System.Uri,System.Fabric.Health.ApplicationHealthPolicy,System.TimeSpan,System.Threading.CancellationToken)
  id: GetApplicationHealthAsync(System.Uri,System.Fabric.Health.ApplicationHealthPolicy,System.TimeSpan,System.Threading.CancellationToken)
  parent: System.Fabric.FabricClient.HealthClient
  langs:
  - csharp
  - vb
  name: GetApplicationHealthAsync(Uri, ApplicationHealthPolicy, TimeSpan, CancellationToken)
  nameWithType: FabricClient.HealthClient.GetApplicationHealthAsync(Uri, ApplicationHealthPolicy, TimeSpan, CancellationToken)
  fullName: System.Fabric.FabricClient.HealthClient.GetApplicationHealthAsync(System.Uri, System.Fabric.Health.ApplicationHealthPolicy, System.TimeSpan, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.HealthClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: GetApplicationHealthAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.HealthClient.cs
    startLine: 1514
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Asynchronously gets the health of the specified Service Fabric application by using the specified timeout and cancellation token.</p>\n"
  example: []
  syntax:
    content: public Task<ApplicationHealth> GetApplicationHealthAsync(Uri applicationName, ApplicationHealthPolicy healthPolicy, TimeSpan timeout, CancellationToken cancellationToken)
    content.vb: Public Function GetApplicationHealthAsync(applicationName As Uri, healthPolicy As ApplicationHealthPolicy, timeout As TimeSpan, cancellationToken As CancellationToken) As Task(Of ApplicationHealth)
    parameters:
    - id: applicationName
      type: System.Uri
      description: "\n<p>The URI of the Service Fabric application.</p>\n"
    - id: healthPolicy
      type: System.Fabric.Health.ApplicationHealthPolicy
      description: The application health policy used to evaluate the application health.
    - id: timeout
      type: System.TimeSpan
      description: "\n<p>The maximum amount of time Service Fabric will allow this operation to continue before returning a <xref href=\"System.TimeoutException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The cancellation token that the operation is observing. It can be used to send a notification that the operation should be canceled.\nNote that cancellation is advisory and that the operation may still be completed even if it is canceled.</p>\n"
    return:
      type: System.Threading.Tasks.Task{System.Fabric.Health.ApplicationHealth}
      description: "\n<p>The health reports of the specified Service Fabric application.</p>\n"
  overload: System.Fabric.FabricClient.HealthClient.GetApplicationHealthAsync*
  exceptions:
  - type: System.Fabric.FabricObjectClosedException
    commentId: T:System.Fabric.FabricObjectClosedException
    description: "\n<p>The <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object is in a closed state. Dispose of the <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref>\nobject you are using and instantiate a new <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>Returned when a null reference is passed to a method that does not accept it as a valid argument.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>Caused by one of the following:</p>\n<p>E_INVALIDARG is returned when one or more arguments are not valid.</p>\n"
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: "\n<p>Caused by one of the following:</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.OperationTimedOut\" data-throw-if-not-resolved=\"false\"></xref> is returned when the operation takes more than the user provided <em>timeout</em> to complete.</p>\n"
  - type: System.Fabric.FabricException
    commentId: T:System.Fabric.FabricException
    description: "\n<p>Caused by one of the following:</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.FabricHealthEntityNotFound\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidNameUri\" data-throw-if-not-resolved=\"false\"></xref> is returned when <em>applicationName</em> is not a valid Service Fabric Name.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.CommunicationError\" data-throw-if-not-resolved=\"false\"></xref> is returned when a communication error caused the operation to fail.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidCredentialType\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509FindType\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509StoreLocation\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509StoreName\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509Thumbprint\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidProtectionLevel\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509Store\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidSubjectName\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  - type: System.Fabric.FabricTransientException
    commentId: T:System.Fabric.FabricTransientException
    description: "\n<p>Caused by one of the following:</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.ServiceTooBusy\" data-throw-if-not-resolved=\"false\"></xref> is returned when the service is too busy to process the operation.</p>\n"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>Caused by one of the following:</p>\n<p>E_ACCESSDENIED is returned when the access check has failed for this operation.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.HealthClient.GetApplicationHealthAsync(System.Fabric.Description.ApplicationHealthQueryDescription)
  commentId: M:System.Fabric.FabricClient.HealthClient.GetApplicationHealthAsync(System.Fabric.Description.ApplicationHealthQueryDescription)
  id: GetApplicationHealthAsync(System.Fabric.Description.ApplicationHealthQueryDescription)
  parent: System.Fabric.FabricClient.HealthClient
  langs:
  - csharp
  - vb
  name: GetApplicationHealthAsync(ApplicationHealthQueryDescription)
  nameWithType: FabricClient.HealthClient.GetApplicationHealthAsync(ApplicationHealthQueryDescription)
  fullName: System.Fabric.FabricClient.HealthClient.GetApplicationHealthAsync(System.Fabric.Description.ApplicationHealthQueryDescription)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.HealthClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: GetApplicationHealthAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.HealthClient.cs
    startLine: 1579
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Asynchronously gets the health of the specified Service Fabric application by using the specified timeout and cancellation token.</p>\n"
  example: []
  syntax:
    content: public Task<ApplicationHealth> GetApplicationHealthAsync(ApplicationHealthQueryDescription queryDescription)
    content.vb: Public Function GetApplicationHealthAsync(queryDescription As ApplicationHealthQueryDescription) As Task(Of ApplicationHealth)
    parameters:
    - id: queryDescription
      type: System.Fabric.Description.ApplicationHealthQueryDescription
      description: The query description.
    return:
      type: System.Threading.Tasks.Task{System.Fabric.Health.ApplicationHealth}
      description: "\n<p>The health reports of the specified Service Fabric application.</p>\n"
  overload: System.Fabric.FabricClient.HealthClient.GetApplicationHealthAsync*
  exceptions:
  - type: System.Fabric.FabricObjectClosedException
    commentId: T:System.Fabric.FabricObjectClosedException
    description: "\n<p>The <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object is in a closed state. Dispose of the <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref>\nobject you are using and instantiate a new <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>Returned when a null reference is passed to a method that does not accept it as a valid argument.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>Caused by one of the following:</p>\n<p>E_INVALIDARG is returned when one or more arguments are not valid.</p>\n"
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: "\n<p>Caused by one of the following:</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.OperationTimedOut\" data-throw-if-not-resolved=\"false\"></xref> is returned when the operation takes more than MaxOperationTimeout to complete.</p>\n"
  - type: System.Fabric.FabricException
    commentId: T:System.Fabric.FabricException
    description: "\n<p>Caused by one of the following:</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.FabricHealthEntityNotFound\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidNameUri\" data-throw-if-not-resolved=\"false\"></xref> is returned when <xref href=\"System.Fabric.Description.ApplicationHealthQueryDescription.ApplicationName\" data-throw-if-not-resolved=\"false\"></xref> is not a valid Service Fabric Name.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.CommunicationError\" data-throw-if-not-resolved=\"false\"></xref> is returned when a communication error caused the operation to fail.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidCredentialType\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509FindType\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509StoreLocation\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509StoreName\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509Thumbprint\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidProtectionLevel\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509Store\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidSubjectName\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  - type: System.Fabric.FabricTransientException
    commentId: T:System.Fabric.FabricTransientException
    description: "\n<p>Caused by one of the following:</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.ServiceTooBusy\" data-throw-if-not-resolved=\"false\"></xref> is returned when the service is too busy to process the operation.</p>\n"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>Caused by one of the following:</p>\n<p>E_ACCESSDENIED is returned when the access check has failed for this operation.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.HealthClient.GetApplicationHealthAsync(System.Fabric.Description.ApplicationHealthQueryDescription,System.TimeSpan,System.Threading.CancellationToken)
  commentId: M:System.Fabric.FabricClient.HealthClient.GetApplicationHealthAsync(System.Fabric.Description.ApplicationHealthQueryDescription,System.TimeSpan,System.Threading.CancellationToken)
  id: GetApplicationHealthAsync(System.Fabric.Description.ApplicationHealthQueryDescription,System.TimeSpan,System.Threading.CancellationToken)
  parent: System.Fabric.FabricClient.HealthClient
  langs:
  - csharp
  - vb
  name: GetApplicationHealthAsync(ApplicationHealthQueryDescription, TimeSpan, CancellationToken)
  nameWithType: FabricClient.HealthClient.GetApplicationHealthAsync(ApplicationHealthQueryDescription, TimeSpan, CancellationToken)
  fullName: System.Fabric.FabricClient.HealthClient.GetApplicationHealthAsync(System.Fabric.Description.ApplicationHealthQueryDescription, System.TimeSpan, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.HealthClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: GetApplicationHealthAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.HealthClient.cs
    startLine: 1651
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Asynchronously gets the health of the specified Service Fabric application by using the specified timeout and cancellation token.</p>\n"
  example: []
  syntax:
    content: public Task<ApplicationHealth> GetApplicationHealthAsync(ApplicationHealthQueryDescription queryDescription, TimeSpan timeout, CancellationToken cancellationToken)
    content.vb: Public Function GetApplicationHealthAsync(queryDescription As ApplicationHealthQueryDescription, timeout As TimeSpan, cancellationToken As CancellationToken) As Task(Of ApplicationHealth)
    parameters:
    - id: queryDescription
      type: System.Fabric.Description.ApplicationHealthQueryDescription
      description: The query description.
    - id: timeout
      type: System.TimeSpan
      description: "\n<p>The maximum amount of time Service Fabric will allow this operation to continue before returning a <xref href=\"System.TimeoutException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The cancellation token that the operation is observing. It can be used to send a notification that the operation should be canceled.\nNote that cancellation is advisory and that the operation may still be completed even if it is canceled.</p>\n"
    return:
      type: System.Threading.Tasks.Task{System.Fabric.Health.ApplicationHealth}
      description: "\n<p>The health reports of the specified Service Fabric application.</p>\n"
  overload: System.Fabric.FabricClient.HealthClient.GetApplicationHealthAsync*
  exceptions:
  - type: System.Fabric.FabricObjectClosedException
    commentId: T:System.Fabric.FabricObjectClosedException
    description: "\n<p>The <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object is in a closed state. Dispose of the <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref>\nobject you are using and instantiate a new <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>Returned when a null reference is passed to a method that does not accept it as a valid argument.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>Caused by one of the following:</p>\n<p>E_INVALIDARG is returned when one or more arguments are not valid.</p>\n"
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: "\n<p>Caused by one of the following:</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.OperationTimedOut\" data-throw-if-not-resolved=\"false\"></xref> is returned when the operation takes more than the user provided <em>timeout</em> to complete.</p>\n"
  - type: System.Fabric.FabricException
    commentId: T:System.Fabric.FabricException
    description: "\n<p>Caused by one of the following:</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.FabricHealthEntityNotFound\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidNameUri\" data-throw-if-not-resolved=\"false\"></xref> is returned when <xref href=\"System.Fabric.Description.ApplicationHealthQueryDescription.ApplicationName\" data-throw-if-not-resolved=\"false\"></xref> is not a valid Service Fabric Name.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.CommunicationError\" data-throw-if-not-resolved=\"false\"></xref> is returned when a communication error caused the operation to fail.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidCredentialType\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509FindType\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509StoreLocation\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509StoreName\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509Thumbprint\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidProtectionLevel\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509Store\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidSubjectName\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  - type: System.Fabric.FabricTransientException
    commentId: T:System.Fabric.FabricTransientException
    description: "\n<p>Caused by one of the following:</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.ServiceTooBusy\" data-throw-if-not-resolved=\"false\"></xref> is returned when the service is too busy to process the operation.</p>\n"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>Caused by one of the following:</p>\n<p>E_ACCESSDENIED is returned when the access check has failed for this operation.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.HealthClient.GetServiceHealthAsync(System.Uri)
  commentId: M:System.Fabric.FabricClient.HealthClient.GetServiceHealthAsync(System.Uri)
  id: GetServiceHealthAsync(System.Uri)
  parent: System.Fabric.FabricClient.HealthClient
  langs:
  - csharp
  - vb
  name: GetServiceHealthAsync(Uri)
  nameWithType: FabricClient.HealthClient.GetServiceHealthAsync(Uri)
  fullName: System.Fabric.FabricClient.HealthClient.GetServiceHealthAsync(System.Uri)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.HealthClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: GetServiceHealthAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.HealthClient.cs
    startLine: 1789
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Asynchronously gets the health of a Service Fabric service.</p>\n"
  remarks: "\n<p>The following example gets the health of a service.</p>\n<pre><code class=\"c#\">public static bool GetServiceHealth(string clusterConnection)\n{\n  ServiceHealth serviceHealth;\n  Uri serviceName = new Uri(\"fabric:/myapp/todo/svc1\");\n\n  // Connect to the cluster.\n  FabricClient fabricClient = new FabricClient(clusterConnection);\n\n  // Get the service health.\n  try\n  {\n      serviceHealth = fabricClient.HealthManager.GetServiceHealthAsync(serviceName).Result;\n  }\n  catch (Exception e)\n  {\n      Console.WriteLine(\"Error: \" + e.Message);\n\n      if (e.InnerException != null)\nConsole.WriteLine(\"  Inner Exception: \" + e.InnerException.Message);\n\n      return false;\n  }\n\n  Console.WriteLine(\"Service Health:\");\n  Console.WriteLine(\"  Service {0}: {1}\", serviceHealth.ServiceName, serviceHealth.AggregatedHealthState);\n\n  // List the health states.\n  Console.WriteLine(\"    Partition Health States:\");\n  IList&lt;PartitionHealthState&gt; partitionHealthStates = serviceHealth.PartitionHealthStates;\n  foreach (PartitionHealthState partitionHealthState in partitionHealthStates)\n  {\n      Console.WriteLine(\"      Aggregated Health State: \" + partitionHealthState.AggregatedHealthState);\n      Console.WriteLine(\"      Partition ID: \" + partitionHealthState.PartitionId);\n  }\n\n  // List the health events.\n  Console.WriteLine(\"    Health Events:\");\n  IList&lt;HealthEvent&gt; healthEvents = serviceHealth.HealthEvents;\n  foreach (HealthEvent healthEvent in healthEvents)\n  {\n      Console.WriteLine(\"      Health Event:\");\n      Console.WriteLine(\"        Last Modified: \" + healthEvent.LastModifiedUtcTimestamp);\n      Console.WriteLine(\"        Source UTC Timestamp: \" + healthEvent.SourceUtcTimestamp);\n      Console.WriteLine(\"        Is Expired: \" + healthEvent.IsExpired);\n      Console.WriteLine(\"        Health Information:\");\n      Console.WriteLine(\"          Description: \" + healthEvent.HealthInformation.Description);\n      Console.WriteLine(\"          Source ID: \" + healthEvent.HealthInformation.SourceId);\n      Console.WriteLine(\"          Health State: \" + healthEvent.HealthInformation.HealthState);\n      Console.WriteLine(\"          Property: \" + healthEvent.HealthInformation.Property);\n      Console.WriteLine(\"          Remove When Expired: \" + healthEvent.HealthInformation.RemoveWhenExpired);\n      Console.WriteLine(\"          Sequence Number: \" + healthEvent.HealthInformation.SequenceNumber);\n      Console.WriteLine(\"          Time to Live: \" + healthEvent.HealthInformation.TimeToLive);\n  }\n\n  // List the unhealthy evaluations.\n  Console.WriteLine(\"    Unhealthy Evaluations:\");\n  IList&lt;HealthEvaluation&gt; healthEvaluationList = serviceHealth.UnhealthyEvaluations;\n  foreach (HealthEvaluation healthEvaluation in healthEvaluationList)\n  {\n      Console.WriteLine(\"      Kind: \" + healthEvaluation.Kind);\n      Console.WriteLine(\"        Aggregated Health State: \" + healthEvaluation.AggregatedHealthState);\n      Console.WriteLine(\"        Description: \" + healthEvaluation.Description);\n  }\n\n  Console.WriteLine();\n  return true;\n}</code></pre>\n"
  example: []
  syntax:
    content: public Task<ServiceHealth> GetServiceHealthAsync(Uri serviceName)
    content.vb: Public Function GetServiceHealthAsync(serviceName As Uri) As Task(Of ServiceHealth)
    parameters:
    - id: serviceName
      type: System.Uri
      description: "\n<p>The name of the Service Fabric service.</p>\n"
    return:
      type: System.Threading.Tasks.Task{System.Fabric.Health.ServiceHealth}
      description: "\n<p>The health of a Service Fabric service.</p>\n"
  overload: System.Fabric.FabricClient.HealthClient.GetServiceHealthAsync*
  exceptions:
  - type: System.Fabric.FabricObjectClosedException
    commentId: T:System.Fabric.FabricObjectClosedException
    description: "\n<p>The <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object is in a closed state. Dispose of the <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> \nobject you are using and instantiate a new <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>Returned when a null reference is passed to a method that does not accept it as a valid argument.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>Caused by one of the following:</p>\n<p>E_INVALIDARG is returned when one or more arguments are not valid.</p>\n"
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: "\n<p>Caused by one of the following:</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.OperationTimedOut\" data-throw-if-not-resolved=\"false\"></xref> is returned when the operation takes more than MaxOperationTimeout to complete.</p>\n"
  - type: System.Fabric.FabricException
    commentId: T:System.Fabric.FabricException
    description: "\n<p>Caused by one of the following:</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.FabricHealthEntityNotFound\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidNameUri\" data-throw-if-not-resolved=\"false\"></xref> is returned when <em>serviceName</em> is not a valid Service Fabric Name.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.CommunicationError\" data-throw-if-not-resolved=\"false\"></xref> is returned when a communication error caused the operation to fail.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidCredentialType\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509FindType\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509StoreLocation\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509StoreName\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509Thumbprint\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidProtectionLevel\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509Store\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidSubjectName\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  - type: System.Fabric.FabricTransientException
    commentId: T:System.Fabric.FabricTransientException
    description: "\n<p>Caused by one of the following:</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.ServiceTooBusy\" data-throw-if-not-resolved=\"false\"></xref> is returned when the service is too busy to process the operation.</p>\n"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>Caused by one of the following:</p>\n<p>E_ACCESSDENIED is returned when the access check has failed for this operation.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.HealthClient.GetServiceHealthAsync(System.Uri,System.Fabric.Health.ApplicationHealthPolicy)
  commentId: M:System.Fabric.FabricClient.HealthClient.GetServiceHealthAsync(System.Uri,System.Fabric.Health.ApplicationHealthPolicy)
  id: GetServiceHealthAsync(System.Uri,System.Fabric.Health.ApplicationHealthPolicy)
  parent: System.Fabric.FabricClient.HealthClient
  langs:
  - csharp
  - vb
  name: GetServiceHealthAsync(Uri, ApplicationHealthPolicy)
  nameWithType: FabricClient.HealthClient.GetServiceHealthAsync(Uri, ApplicationHealthPolicy)
  fullName: System.Fabric.FabricClient.HealthClient.GetServiceHealthAsync(System.Uri, System.Fabric.Health.ApplicationHealthPolicy)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.HealthClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: GetServiceHealthAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.HealthClient.cs
    startLine: 1857
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Asynchronously gets the health of a Service Fabric service.</p>\n"
  example: []
  syntax:
    content: public Task<ServiceHealth> GetServiceHealthAsync(Uri serviceName, ApplicationHealthPolicy healthPolicy)
    content.vb: Public Function GetServiceHealthAsync(serviceName As Uri, healthPolicy As ApplicationHealthPolicy) As Task(Of ServiceHealth)
    parameters:
    - id: serviceName
      type: System.Uri
      description: "\n<p>The name of the Service Fabric service.</p>\n"
    - id: healthPolicy
      type: System.Fabric.Health.ApplicationHealthPolicy
      description: The application health policy used to evaluate service health.
    return:
      type: System.Threading.Tasks.Task{System.Fabric.Health.ServiceHealth}
      description: "\n<p>The health of a Service Fabric service.</p>\n"
  overload: System.Fabric.FabricClient.HealthClient.GetServiceHealthAsync*
  exceptions:
  - type: System.Fabric.FabricObjectClosedException
    commentId: T:System.Fabric.FabricObjectClosedException
    description: "\n<p>The <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object is in a closed state. Dispose of the <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> \nobject you are using and instantiate a new <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>Returned when a null reference is passed to a method that does not accept it as a valid argument.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>Caused by one of the following:</p>\n<p>E_INVALIDARG is returned when one or more arguments are not valid.</p>\n"
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: "\n<p>Caused by one of the following:</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.OperationTimedOut\" data-throw-if-not-resolved=\"false\"></xref> is returned when the operation takes more than MaxOperationTimeout to complete.</p>\n"
  - type: System.Fabric.FabricException
    commentId: T:System.Fabric.FabricException
    description: "\n<p>Caused by one of the following:</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.FabricHealthEntityNotFound\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidNameUri\" data-throw-if-not-resolved=\"false\"></xref> is returned when <em>serviceName</em> is not a valid Service Fabric Name.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.CommunicationError\" data-throw-if-not-resolved=\"false\"></xref> is returned when a communication error caused the operation to fail.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidCredentialType\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509FindType\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509StoreLocation\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509StoreName\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509Thumbprint\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidProtectionLevel\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509Store\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidSubjectName\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  - type: System.Fabric.FabricTransientException
    commentId: T:System.Fabric.FabricTransientException
    description: "\n<p>Caused by one of the following:</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.ServiceTooBusy\" data-throw-if-not-resolved=\"false\"></xref> is returned when the service is too busy to process the operation.</p>\n"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>Caused by one of the following:</p>\n<p>E_ACCESSDENIED is returned when the access check has failed for this operation.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.HealthClient.GetServiceHealthAsync(System.Uri,System.TimeSpan,System.Threading.CancellationToken)
  commentId: M:System.Fabric.FabricClient.HealthClient.GetServiceHealthAsync(System.Uri,System.TimeSpan,System.Threading.CancellationToken)
  id: GetServiceHealthAsync(System.Uri,System.TimeSpan,System.Threading.CancellationToken)
  parent: System.Fabric.FabricClient.HealthClient
  langs:
  - csharp
  - vb
  name: GetServiceHealthAsync(Uri, TimeSpan, CancellationToken)
  nameWithType: FabricClient.HealthClient.GetServiceHealthAsync(Uri, TimeSpan, CancellationToken)
  fullName: System.Fabric.FabricClient.HealthClient.GetServiceHealthAsync(System.Uri, System.TimeSpan, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.HealthClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: GetServiceHealthAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.HealthClient.cs
    startLine: 1931
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Asynchronously gets the health of a Service Fabric service by using the specified timeout and cancellation token.</p>\n"
  example: []
  syntax:
    content: public Task<ServiceHealth> GetServiceHealthAsync(Uri serviceName, TimeSpan timeout, CancellationToken cancellationToken)
    content.vb: Public Function GetServiceHealthAsync(serviceName As Uri, timeout As TimeSpan, cancellationToken As CancellationToken) As Task(Of ServiceHealth)
    parameters:
    - id: serviceName
      type: System.Uri
      description: "\n<p>The name of the Service Fabric service.</p>\n"
    - id: timeout
      type: System.TimeSpan
      description: "\n<p>The maximum amount of time Service Fabric will allow this operation to continue before returning a <xref href=\"System.TimeoutException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The optional cancellation token that the operation is observing. It can be used to send a notification that the operation should be canceled.\nNote that cancellation is advisory and that the operation may still be completed even if it is canceled.</p>\n"
    return:
      type: System.Threading.Tasks.Task{System.Fabric.Health.ServiceHealth}
      description: "\n<p>The health of a Service Fabric service.</p>\n"
  overload: System.Fabric.FabricClient.HealthClient.GetServiceHealthAsync*
  exceptions:
  - type: System.Fabric.FabricObjectClosedException
    commentId: T:System.Fabric.FabricObjectClosedException
    description: "\n<p>The <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object is in a closed state. Dispose of the <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> \nobject you are using and instantiate a new <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>Returned when a null reference is passed to a method that does not accept it as a valid argument.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>Caused by one of the following:</p>\n<p>E_INVALIDARG is returned when one or more arguments are not valid.</p>\n"
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: "\n<p>Caused by one of the following:</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.OperationTimedOut\" data-throw-if-not-resolved=\"false\"></xref> is returned when the operation takes more than the user provided <em>timeout</em> to complete.</p>\n"
  - type: System.Fabric.FabricException
    commentId: T:System.Fabric.FabricException
    description: "\n<p>Caused by one of the following:</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.FabricHealthEntityNotFound\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidNameUri\" data-throw-if-not-resolved=\"false\"></xref> is returned when <em>serviceName</em> is not a valid Service Fabric Name.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.CommunicationError\" data-throw-if-not-resolved=\"false\"></xref> is returned when a communication error caused the operation to fail.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidCredentialType\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509FindType\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509StoreLocation\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509StoreName\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509Thumbprint\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidProtectionLevel\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509Store\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidSubjectName\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  - type: System.Fabric.FabricTransientException
    commentId: T:System.Fabric.FabricTransientException
    description: "\n<p>Caused by one of the following:</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.ServiceTooBusy\" data-throw-if-not-resolved=\"false\"></xref> is returned when the service is too busy to process the operation.</p>\n"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>Caused by one of the following:</p>\n<p>E_ACCESSDENIED is returned when the access check has failed for this operation.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.HealthClient.GetServiceHealthAsync(System.Uri,System.Fabric.Health.ApplicationHealthPolicy,System.TimeSpan,System.Threading.CancellationToken)
  commentId: M:System.Fabric.FabricClient.HealthClient.GetServiceHealthAsync(System.Uri,System.Fabric.Health.ApplicationHealthPolicy,System.TimeSpan,System.Threading.CancellationToken)
  id: GetServiceHealthAsync(System.Uri,System.Fabric.Health.ApplicationHealthPolicy,System.TimeSpan,System.Threading.CancellationToken)
  parent: System.Fabric.FabricClient.HealthClient
  langs:
  - csharp
  - vb
  name: GetServiceHealthAsync(Uri, ApplicationHealthPolicy, TimeSpan, CancellationToken)
  nameWithType: FabricClient.HealthClient.GetServiceHealthAsync(Uri, ApplicationHealthPolicy, TimeSpan, CancellationToken)
  fullName: System.Fabric.FabricClient.HealthClient.GetServiceHealthAsync(System.Uri, System.Fabric.Health.ApplicationHealthPolicy, System.TimeSpan, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.HealthClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: GetServiceHealthAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.HealthClient.cs
    startLine: 2006
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Asynchronously gets the health of a Service Fabric service by using the specified timeout and cancellation token.</p>\n"
  example: []
  syntax:
    content: public Task<ServiceHealth> GetServiceHealthAsync(Uri serviceName, ApplicationHealthPolicy healthPolicy, TimeSpan timeout, CancellationToken cancellationToken)
    content.vb: Public Function GetServiceHealthAsync(serviceName As Uri, healthPolicy As ApplicationHealthPolicy, timeout As TimeSpan, cancellationToken As CancellationToken) As Task(Of ServiceHealth)
    parameters:
    - id: serviceName
      type: System.Uri
      description: "\n<p>The name of the Service Fabric service.</p>\n"
    - id: healthPolicy
      type: System.Fabric.Health.ApplicationHealthPolicy
      description: The application health policy used to evaluate the entity health.
    - id: timeout
      type: System.TimeSpan
      description: "\n<p>The maximum amount of time Service Fabric will allow this operation to continue before returning a <xref href=\"System.TimeoutException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The optional cancellation token that the operation is observing. It can be used to send a notification that the operation should be canceled.\nNote that cancellation is advisory and that the operation may still be completed even if it is canceled.</p>\n"
    return:
      type: System.Threading.Tasks.Task{System.Fabric.Health.ServiceHealth}
      description: "\n<p>The health of a Service Fabric service.</p>\n"
  overload: System.Fabric.FabricClient.HealthClient.GetServiceHealthAsync*
  exceptions:
  - type: System.Fabric.FabricObjectClosedException
    commentId: T:System.Fabric.FabricObjectClosedException
    description: "\n<p>The <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object is in a closed state. Dispose of the <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> \nobject you are using and instantiate a new <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>Returned when a null reference is passed to a method that does not accept it as a valid argument.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>Caused by one of the following:</p>\n<p>E_INVALIDARG is returned when one or more arguments are not valid.</p>\n"
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: "\n<p>Caused by one of the following:</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.OperationTimedOut\" data-throw-if-not-resolved=\"false\"></xref> is returned when the operation takes more than the user provided <em>timeout</em> to complete.</p>\n"
  - type: System.Fabric.FabricException
    commentId: T:System.Fabric.FabricException
    description: "\n<p>Caused by one of the following:</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.FabricHealthEntityNotFound\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidNameUri\" data-throw-if-not-resolved=\"false\"></xref> is returned when <em>serviceName</em> is not a valid Service Fabric Name.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.CommunicationError\" data-throw-if-not-resolved=\"false\"></xref> is returned when a communication error caused the operation to fail.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidCredentialType\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509FindType\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509StoreLocation\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509StoreName\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509Thumbprint\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidProtectionLevel\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509Store\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidSubjectName\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  - type: System.Fabric.FabricTransientException
    commentId: T:System.Fabric.FabricTransientException
    description: "\n<p>Caused by one of the following:</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.ServiceTooBusy\" data-throw-if-not-resolved=\"false\"></xref> is returned when the service is too busy to process the operation.</p>\n"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>Caused by one of the following:</p>\n<p>E_ACCESSDENIED is returned when the access check has failed for this operation.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.HealthClient.GetServiceHealthAsync(System.Fabric.Description.ServiceHealthQueryDescription)
  commentId: M:System.Fabric.FabricClient.HealthClient.GetServiceHealthAsync(System.Fabric.Description.ServiceHealthQueryDescription)
  id: GetServiceHealthAsync(System.Fabric.Description.ServiceHealthQueryDescription)
  parent: System.Fabric.FabricClient.HealthClient
  langs:
  - csharp
  - vb
  name: GetServiceHealthAsync(ServiceHealthQueryDescription)
  nameWithType: FabricClient.HealthClient.GetServiceHealthAsync(ServiceHealthQueryDescription)
  fullName: System.Fabric.FabricClient.HealthClient.GetServiceHealthAsync(System.Fabric.Description.ServiceHealthQueryDescription)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.HealthClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: GetServiceHealthAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.HealthClient.cs
    startLine: 2072
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Asynchronously gets the health of a Service Fabric service by using the specified timeout and cancellation token.</p>\n"
  example: []
  syntax:
    content: public Task<ServiceHealth> GetServiceHealthAsync(ServiceHealthQueryDescription queryDescription)
    content.vb: Public Function GetServiceHealthAsync(queryDescription As ServiceHealthQueryDescription) As Task(Of ServiceHealth)
    parameters:
    - id: queryDescription
      type: System.Fabric.Description.ServiceHealthQueryDescription
      description: The query description.
    return:
      type: System.Threading.Tasks.Task{System.Fabric.Health.ServiceHealth}
      description: "\n<p>The health of a Service Fabric service.</p>\n"
  overload: System.Fabric.FabricClient.HealthClient.GetServiceHealthAsync*
  exceptions:
  - type: System.Fabric.FabricObjectClosedException
    commentId: T:System.Fabric.FabricObjectClosedException
    description: "\n<p>The <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object is in a closed state. Dispose of the <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> \nobject you are using and instantiate a new <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>Returned when a null reference is passed to a method that does not accept it as a valid argument.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>Caused by one of the following:</p>\n<p>E_INVALIDARG is returned when one or more arguments are not valid.</p>\n"
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: "\n<p>Caused by one of the following:</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.OperationTimedOut\" data-throw-if-not-resolved=\"false\"></xref> is returned when the operation takes more than MaxOperationTimeout to complete.</p>\n"
  - type: System.Fabric.FabricException
    commentId: T:System.Fabric.FabricException
    description: "\n<p>Caused by one of the following:</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.FabricHealthEntityNotFound\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidNameUri\" data-throw-if-not-resolved=\"false\"></xref> is returned when <xref href=\"System.Fabric.Description.ServiceHealthQueryDescription.ServiceName\" data-throw-if-not-resolved=\"false\"></xref> \nis not a valid Service Fabric Name.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.CommunicationError\" data-throw-if-not-resolved=\"false\"></xref> is returned when a communication error caused the operation to fail.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidCredentialType\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509FindType\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509StoreLocation\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509StoreName\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509Thumbprint\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidProtectionLevel\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509Store\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidSubjectName\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  - type: System.Fabric.FabricTransientException
    commentId: T:System.Fabric.FabricTransientException
    description: "\n<p>Caused by one of the following:</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.ServiceTooBusy\" data-throw-if-not-resolved=\"false\"></xref> is returned when the service is too busy to process the operation.</p>\n"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>Caused by one of the following:</p>\n<p>E_ACCESSDENIED is returned when the access check has failed for this operation.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.HealthClient.GetServiceHealthAsync(System.Fabric.Description.ServiceHealthQueryDescription,System.TimeSpan,System.Threading.CancellationToken)
  commentId: M:System.Fabric.FabricClient.HealthClient.GetServiceHealthAsync(System.Fabric.Description.ServiceHealthQueryDescription,System.TimeSpan,System.Threading.CancellationToken)
  id: GetServiceHealthAsync(System.Fabric.Description.ServiceHealthQueryDescription,System.TimeSpan,System.Threading.CancellationToken)
  parent: System.Fabric.FabricClient.HealthClient
  langs:
  - csharp
  - vb
  name: GetServiceHealthAsync(ServiceHealthQueryDescription, TimeSpan, CancellationToken)
  nameWithType: FabricClient.HealthClient.GetServiceHealthAsync(ServiceHealthQueryDescription, TimeSpan, CancellationToken)
  fullName: System.Fabric.FabricClient.HealthClient.GetServiceHealthAsync(System.Fabric.Description.ServiceHealthQueryDescription, System.TimeSpan, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.HealthClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: GetServiceHealthAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.HealthClient.cs
    startLine: 2144
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Asynchronously gets the health of a Service Fabric service by using the specified timeout and cancellation token.</p>\n"
  example: []
  syntax:
    content: public Task<ServiceHealth> GetServiceHealthAsync(ServiceHealthQueryDescription queryDescription, TimeSpan timeout, CancellationToken cancellationToken)
    content.vb: Public Function GetServiceHealthAsync(queryDescription As ServiceHealthQueryDescription, timeout As TimeSpan, cancellationToken As CancellationToken) As Task(Of ServiceHealth)
    parameters:
    - id: queryDescription
      type: System.Fabric.Description.ServiceHealthQueryDescription
      description: The query description.
    - id: timeout
      type: System.TimeSpan
      description: "\n<p>The maximum amount of time Service Fabric will allow this operation to continue before returning a <xref href=\"System.TimeoutException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The optional cancellation token that the operation is observing. It can be used to send a notification that the operation should be canceled.\nNote that cancellation is advisory and that the operation may still be completed even if it is canceled.</p>\n"
    return:
      type: System.Threading.Tasks.Task{System.Fabric.Health.ServiceHealth}
      description: "\n<p>The health of a Service Fabric service.</p>\n"
  overload: System.Fabric.FabricClient.HealthClient.GetServiceHealthAsync*
  exceptions:
  - type: System.Fabric.FabricObjectClosedException
    commentId: T:System.Fabric.FabricObjectClosedException
    description: "\n<p>The <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object is in a closed state. Dispose of the <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> \nobject you are using and instantiate a new <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>Returned when a null reference is passed to a method that does not accept it as a valid argument.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>Caused by one of the following:</p>\n<p>E_INVALIDARG is returned when one or more arguments are not valid.</p>\n"
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: "\n<p>Caused by one of the following:</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.OperationTimedOut\" data-throw-if-not-resolved=\"false\"></xref> is returned when the operation takes more than the user provided <em>timeout</em> to complete.</p>\n"
  - type: System.Fabric.FabricException
    commentId: T:System.Fabric.FabricException
    description: "\n<p>Caused by one of the following:</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.FabricHealthEntityNotFound\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidNameUri\" data-throw-if-not-resolved=\"false\"></xref> is returned when <xref href=\"System.Fabric.Description.ServiceHealthQueryDescription.ServiceName\" data-throw-if-not-resolved=\"false\"></xref> is not a valid Service Fabric Name.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.CommunicationError\" data-throw-if-not-resolved=\"false\"></xref> is returned when a communication error caused the operation to fail.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidCredentialType\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509FindType\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509StoreLocation\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509StoreName\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509Thumbprint\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidProtectionLevel\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509Store\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidSubjectName\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  - type: System.Fabric.FabricTransientException
    commentId: T:System.Fabric.FabricTransientException
    description: "\n<p>Caused by one of the following:</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.ServiceTooBusy\" data-throw-if-not-resolved=\"false\"></xref> is returned when the service is too busy to process the operation.</p>\n"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>Caused by one of the following:</p>\n<p>E_ACCESSDENIED is returned when the access check has failed for this operation.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.HealthClient.GetPartitionHealthAsync(System.Guid)
  commentId: M:System.Fabric.FabricClient.HealthClient.GetPartitionHealthAsync(System.Guid)
  id: GetPartitionHealthAsync(System.Guid)
  parent: System.Fabric.FabricClient.HealthClient
  langs:
  - csharp
  - vb
  name: GetPartitionHealthAsync(Guid)
  nameWithType: FabricClient.HealthClient.GetPartitionHealthAsync(Guid)
  fullName: System.Fabric.FabricClient.HealthClient.GetPartitionHealthAsync(System.Guid)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.HealthClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: GetPartitionHealthAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.HealthClient.cs
    startLine: 2282
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Asynchronously gets the health of a Service Fabric partition.</p>\n"
  remarks: "\n<p>The following example gets the health of a partition.</p>\n<pre><code class=\"c#\">public static bool GetPartitionHealth(string clusterConnection)\n{\n  PartitionHealth partitionHealth;\n\n  // Connect to the cluster.\n  FabricClient fabricClient = new FabricClient(clusterConnection);\n\n  // Get the partition health.\n  try\n  {\n      partitionHealth = fabricClient.HealthManager.GetPartitionHealthAsync(new Guid(\"a7206315-e53b-4d05-b59c-e210caa28893\")).Result;\n  }\n  catch (Exception e)\n  {\n      Console.WriteLine(\"Error: \" + e.Message);\n\n      if (e.InnerException != null)\n          Console.WriteLine(\"  Inner Exception: \" + e.InnerException.Message);\n\n      return false;\n  }\n\n  // Display the partition health information.\n  Console.WriteLine(\"Partition Health:\");\n  Console.WriteLine(\"  Partition ID: \" + partitionHealth.PartitionId);\n  Console.WriteLine(\"    Aggregated Health State: \" + partitionHealth.AggregatedHealthState);\n\n  // List the health events.\n  Console.WriteLine(\"    Health Events:\");\n  IList&lt;HealthEvent&gt; healthEvents = partitionHealth.HealthEvents;\n  foreach (HealthEvent healthEvent in healthEvents)\n  {\n      Console.WriteLine(\"      Health Event:\");\n      Console.WriteLine(\"        Last Modified: \" + healthEvent.LastModifiedUtcTimestamp);\n      Console.WriteLine(\"        Source UTC Timestamp: \" + healthEvent.SourceUtcTimestamp);\n      Console.WriteLine(\"        Is Expired: \" + healthEvent.IsExpired);\n      Console.WriteLine(\"        Health Information:\");\n      Console.WriteLine(\"          Description: \" + healthEvent.HealthInformation.Description);\n      Console.WriteLine(\"          Source ID: \" + healthEvent.HealthInformation.SourceId);\n      Console.WriteLine(\"          Health State: \" + healthEvent.HealthInformation.HealthState);\n      Console.WriteLine(\"          Property: \" + healthEvent.HealthInformation.Property);\n      Console.WriteLine(\"          Remove When Expired: \" + healthEvent.HealthInformation.RemoveWhenExpired);\n      Console.WriteLine(\"          Sequence Number: \" + healthEvent.HealthInformation.SequenceNumber);\n      Console.WriteLine(\"          Time to Live: \" + healthEvent.HealthInformation.TimeToLive);\n  }\n\n  // List the replica health states.\n  Console.WriteLine(\"    Replica Health States:\");\n  IList&lt;ReplicaHealthState&gt; replicaHealthStates = partitionHealth.ReplicaHealthStates;\n  foreach (ReplicaHealthState replicaHealthState in replicaHealthStates)\n  {\n      Console.WriteLine(\"      ID: \" + replicaHealthState.Id);\n      Console.WriteLine(\"        Kind: \" + replicaHealthState.Kind);\n      Console.WriteLine(\"        Aggregated Health State: \" + replicaHealthState.AggregatedHealthState);\n      Console.WriteLine(\"        Partition ID: \" + replicaHealthState.PartitionId);\n  }\n\n  // List the unhealthy evaluations.\n  Console.WriteLine(\"    Unhealthy Evaluations:\");\n  IList&lt;HealthEvaluation&gt; healthEvaluationList = partitionHealth.UnhealthyEvaluations;\n  foreach (HealthEvaluation healthEvaluation in healthEvaluationList)\n  {\n      Console.WriteLine(\"      Kind: \" + healthEvaluation.Kind);\n      Console.WriteLine(\"        Aggregated Health State: \" + healthEvaluation.AggregatedHealthState);\n      Console.WriteLine(\"        Description: \" + healthEvaluation.Description);\n  }\n\n  Console.WriteLine();\n  return true;\n}</code></pre>\n"
  example: []
  syntax:
    content: public Task<PartitionHealth> GetPartitionHealthAsync(Guid partitionId)
    content.vb: Public Function GetPartitionHealthAsync(partitionId As Guid) As Task(Of PartitionHealth)
    parameters:
    - id: partitionId
      type: System.Guid
      description: "\n<p>The ID of the Service Fabric partition.</p>\n"
    return:
      type: System.Threading.Tasks.Task{System.Fabric.Health.PartitionHealth}
      description: "\n<p>The health of a Service Fabric partition.</p>\n"
  overload: System.Fabric.FabricClient.HealthClient.GetPartitionHealthAsync*
  exceptions:
  - type: System.Fabric.FabricObjectClosedException
    commentId: T:System.Fabric.FabricObjectClosedException
    description: "\n<p>The <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object is in a closed state. Dispose of the <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object you are using and instantiate a new <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>Returned when a null reference is passed to a method that does not accept it as a valid argument.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>Caused by one of the following:</p>\n<p>E_INVALIDARG is returned when one or more arguments are not valid.</p>\n"
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: "\n<p>Caused by one of the following:</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.OperationTimedOut\" data-throw-if-not-resolved=\"false\"></xref> is returned when the operation takes more than MaxOperationTimeout to complete.</p>\n"
  - type: System.Fabric.FabricException
    commentId: T:System.Fabric.FabricException
    description: "\n<p>Caused by one of the following:</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.FabricHealthEntityNotFound\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.CommunicationError\" data-throw-if-not-resolved=\"false\"></xref> is returned when a communication error caused the operation to fail.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidCredentialType\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509FindType\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509StoreLocation\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509StoreName\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509Thumbprint\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidProtectionLevel\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509Store\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidSubjectName\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  - type: System.Fabric.FabricTransientException
    commentId: T:System.Fabric.FabricTransientException
    description: "\n<p>Caused by one of the following:</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.ServiceTooBusy\" data-throw-if-not-resolved=\"false\"></xref> is returned when the service is too busy to process the operation.</p>\n"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>Caused by one of the following:</p>\n<p>E_ACCESSDENIED is returned when the access check has failed for this operation.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.HealthClient.GetPartitionHealthAsync(System.Guid,System.Fabric.Health.ApplicationHealthPolicy)
  commentId: M:System.Fabric.FabricClient.HealthClient.GetPartitionHealthAsync(System.Guid,System.Fabric.Health.ApplicationHealthPolicy)
  id: GetPartitionHealthAsync(System.Guid,System.Fabric.Health.ApplicationHealthPolicy)
  parent: System.Fabric.FabricClient.HealthClient
  langs:
  - csharp
  - vb
  name: GetPartitionHealthAsync(Guid, ApplicationHealthPolicy)
  nameWithType: FabricClient.HealthClient.GetPartitionHealthAsync(Guid, ApplicationHealthPolicy)
  fullName: System.Fabric.FabricClient.HealthClient.GetPartitionHealthAsync(System.Guid, System.Fabric.Health.ApplicationHealthPolicy)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.HealthClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: GetPartitionHealthAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.HealthClient.cs
    startLine: 2347
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Asynchronously gets the health of a Service Fabric partition.</p>\n"
  example: []
  syntax:
    content: public Task<PartitionHealth> GetPartitionHealthAsync(Guid partitionId, ApplicationHealthPolicy healthPolicy)
    content.vb: Public Function GetPartitionHealthAsync(partitionId As Guid, healthPolicy As ApplicationHealthPolicy) As Task(Of PartitionHealth)
    parameters:
    - id: partitionId
      type: System.Guid
      description: "\n<p>The ID of the Service Fabric partition.</p>\n"
    - id: healthPolicy
      type: System.Fabric.Health.ApplicationHealthPolicy
      description: The application health policy used to evaluate the entity health.
    return:
      type: System.Threading.Tasks.Task{System.Fabric.Health.PartitionHealth}
      description: "\n<p>The health of a Service Fabric partition.</p>\n"
  overload: System.Fabric.FabricClient.HealthClient.GetPartitionHealthAsync*
  exceptions:
  - type: System.Fabric.FabricObjectClosedException
    commentId: T:System.Fabric.FabricObjectClosedException
    description: "\n<p>The <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object is in a closed state. Dispose of the <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object you are using and instantiate a new <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>Returned when a null reference is passed to a method that does not accept it as a valid argument.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>Caused by one of the following:</p>\n<p>E_INVALIDARG is returned when one or more arguments are not valid.</p>\n"
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: "\n<p>Caused by one of the following:</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.OperationTimedOut\" data-throw-if-not-resolved=\"false\"></xref> is returned when the operation takes more than MaxOperationTimeout to complete.</p>\n"
  - type: System.Fabric.FabricException
    commentId: T:System.Fabric.FabricException
    description: "\n<p>Caused by one of the following:</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.FabricHealthEntityNotFound\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.CommunicationError\" data-throw-if-not-resolved=\"false\"></xref> is returned when a communication error caused the operation to fail.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidCredentialType\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509FindType\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509StoreLocation\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509StoreName\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509Thumbprint\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidProtectionLevel\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509Store\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidSubjectName\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  - type: System.Fabric.FabricTransientException
    commentId: T:System.Fabric.FabricTransientException
    description: "\n<p>Caused by one of the following:</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.ServiceTooBusy\" data-throw-if-not-resolved=\"false\"></xref> is returned when the service is too busy to process the operation.</p>\n"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>Caused by one of the following:</p>\n<p>E_ACCESSDENIED is returned when the access check has failed for this operation.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.HealthClient.GetPartitionHealthAsync(System.Guid,System.TimeSpan,System.Threading.CancellationToken)
  commentId: M:System.Fabric.FabricClient.HealthClient.GetPartitionHealthAsync(System.Guid,System.TimeSpan,System.Threading.CancellationToken)
  id: GetPartitionHealthAsync(System.Guid,System.TimeSpan,System.Threading.CancellationToken)
  parent: System.Fabric.FabricClient.HealthClient
  langs:
  - csharp
  - vb
  name: GetPartitionHealthAsync(Guid, TimeSpan, CancellationToken)
  nameWithType: FabricClient.HealthClient.GetPartitionHealthAsync(Guid, TimeSpan, CancellationToken)
  fullName: System.Fabric.FabricClient.HealthClient.GetPartitionHealthAsync(System.Guid, System.TimeSpan, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.HealthClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: GetPartitionHealthAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.HealthClient.cs
    startLine: 2419
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Asynchronously gets the health of a Service Fabric partition by using the specified timeout and cancellation token.</p>\n"
  example: []
  syntax:
    content: public Task<PartitionHealth> GetPartitionHealthAsync(Guid partitionId, TimeSpan timeout, CancellationToken cancellationToken)
    content.vb: Public Function GetPartitionHealthAsync(partitionId As Guid, timeout As TimeSpan, cancellationToken As CancellationToken) As Task(Of PartitionHealth)
    parameters:
    - id: partitionId
      type: System.Guid
      description: "\n<p>The ID of the Service Fabric partition.</p>\n"
    - id: timeout
      type: System.TimeSpan
      description: "\n<p>The maximum amount of time Service Fabric will allow this operation to continue before returning a <xref href=\"System.TimeoutException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The optional cancellation token that the operation is observing. It can be used to send a notification that the operation should be canceled.\nNote that cancellation is advisory and that the operation may still be completed even if it is canceled.</p>\n"
    return:
      type: System.Threading.Tasks.Task{System.Fabric.Health.PartitionHealth}
      description: "\n<p>The health of a Service Fabric partition.</p>\n"
  overload: System.Fabric.FabricClient.HealthClient.GetPartitionHealthAsync*
  exceptions:
  - type: System.Fabric.FabricObjectClosedException
    commentId: T:System.Fabric.FabricObjectClosedException
    description: "\n<p>The <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object is in a closed state. Dispose of the <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref>\nobject you are using and instantiate a new <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>Returned when a null reference is passed to a method that does not accept it as a valid argument.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>Caused by one of the following:</p>\n<p>E_INVALIDARG is returned when one or more arguments are not valid.</p>\n"
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: "\n<p>Caused by one of the following:</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.OperationTimedOut\" data-throw-if-not-resolved=\"false\"></xref> is returned when the operation takes more than the user provided <em>timeout</em> to complete.</p>\n"
  - type: System.Fabric.FabricException
    commentId: T:System.Fabric.FabricException
    description: "\n<p>Caused by one of the following:</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.FabricHealthEntityNotFound\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.CommunicationError\" data-throw-if-not-resolved=\"false\"></xref> is returned when a communication error caused the operation to fail.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidCredentialType\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509FindType\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509StoreLocation\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509StoreName\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509Thumbprint\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidProtectionLevel\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509Store\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidSubjectName\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  - type: System.Fabric.FabricTransientException
    commentId: T:System.Fabric.FabricTransientException
    description: "\n<p>Caused by one of the following:</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.ServiceTooBusy\" data-throw-if-not-resolved=\"false\"></xref> is returned when the service is too busy to process the operation.</p>\n"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>Caused by one of the following:</p>\n<p>E_ACCESSDENIED is returned when the access check has failed for this operation.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.HealthClient.GetPartitionHealthAsync(System.Guid,System.Fabric.Health.ApplicationHealthPolicy,System.TimeSpan,System.Threading.CancellationToken)
  commentId: M:System.Fabric.FabricClient.HealthClient.GetPartitionHealthAsync(System.Guid,System.Fabric.Health.ApplicationHealthPolicy,System.TimeSpan,System.Threading.CancellationToken)
  id: GetPartitionHealthAsync(System.Guid,System.Fabric.Health.ApplicationHealthPolicy,System.TimeSpan,System.Threading.CancellationToken)
  parent: System.Fabric.FabricClient.HealthClient
  langs:
  - csharp
  - vb
  name: GetPartitionHealthAsync(Guid, ApplicationHealthPolicy, TimeSpan, CancellationToken)
  nameWithType: FabricClient.HealthClient.GetPartitionHealthAsync(Guid, ApplicationHealthPolicy, TimeSpan, CancellationToken)
  fullName: System.Fabric.FabricClient.HealthClient.GetPartitionHealthAsync(System.Guid, System.Fabric.Health.ApplicationHealthPolicy, System.TimeSpan, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.HealthClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: GetPartitionHealthAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.HealthClient.cs
    startLine: 2492
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Asynchronously gets the health of a Service Fabric partition by using the specified timeout and cancellation token.</p>\n"
  example: []
  syntax:
    content: public Task<PartitionHealth> GetPartitionHealthAsync(Guid partitionId, ApplicationHealthPolicy healthPolicy, TimeSpan timeout, CancellationToken cancellationToken)
    content.vb: Public Function GetPartitionHealthAsync(partitionId As Guid, healthPolicy As ApplicationHealthPolicy, timeout As TimeSpan, cancellationToken As CancellationToken) As Task(Of PartitionHealth)
    parameters:
    - id: partitionId
      type: System.Guid
      description: "\n<p>The ID of the Service Fabric partition.</p>\n"
    - id: healthPolicy
      type: System.Fabric.Health.ApplicationHealthPolicy
      description: The application health policy used to evaluate the entity health.
    - id: timeout
      type: System.TimeSpan
      description: "\n<p>The maximum amount of time Service Fabric will allow this operation to continue before returning a <xref href=\"System.TimeoutException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The optional cancellation token that the operation is observing. It can be used to send a notification that the operation should be canceled.\nNote that cancellation is advisory and that the operation may still be completed even if it is canceled.</p>\n"
    return:
      type: System.Threading.Tasks.Task{System.Fabric.Health.PartitionHealth}
      description: "\n<p>The health of a Service Fabric partition.</p>\n"
  overload: System.Fabric.FabricClient.HealthClient.GetPartitionHealthAsync*
  exceptions:
  - type: System.Fabric.FabricObjectClosedException
    commentId: T:System.Fabric.FabricObjectClosedException
    description: "\n<p>The <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object is in a closed state. Dispose of the <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref>\nobject you are using and instantiate a new <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>Returned when a null reference is passed to a method that does not accept it as a valid argument.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>Caused by one of the following:</p>\n<p>E_INVALIDARG is returned when one or more arguments are not valid.</p>\n"
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: "\n<p>Caused by one of the following:</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.OperationTimedOut\" data-throw-if-not-resolved=\"false\"></xref> is returned when the operation takes more than the user provided <em>timeout</em> to complete.</p>\n"
  - type: System.Fabric.FabricException
    commentId: T:System.Fabric.FabricException
    description: "\n<p>Caused by one of the following:</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.FabricHealthEntityNotFound\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.CommunicationError\" data-throw-if-not-resolved=\"false\"></xref> is returned when a communication error caused the operation to fail.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidCredentialType\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509FindType\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509StoreLocation\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509StoreName\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509Thumbprint\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidProtectionLevel\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509Store\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidSubjectName\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  - type: System.Fabric.FabricTransientException
    commentId: T:System.Fabric.FabricTransientException
    description: "\n<p>Caused by one of the following:</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.ServiceTooBusy\" data-throw-if-not-resolved=\"false\"></xref> is returned when the service is too busy to process the operation.</p>\n"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>Caused by one of the following:</p>\n<p>E_ACCESSDENIED is returned when the access check has failed for this operation.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.HealthClient.GetPartitionHealthAsync(System.Fabric.Description.PartitionHealthQueryDescription)
  commentId: M:System.Fabric.FabricClient.HealthClient.GetPartitionHealthAsync(System.Fabric.Description.PartitionHealthQueryDescription)
  id: GetPartitionHealthAsync(System.Fabric.Description.PartitionHealthQueryDescription)
  parent: System.Fabric.FabricClient.HealthClient
  langs:
  - csharp
  - vb
  name: GetPartitionHealthAsync(PartitionHealthQueryDescription)
  nameWithType: FabricClient.HealthClient.GetPartitionHealthAsync(PartitionHealthQueryDescription)
  fullName: System.Fabric.FabricClient.HealthClient.GetPartitionHealthAsync(System.Fabric.Description.PartitionHealthQueryDescription)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.HealthClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: GetPartitionHealthAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.HealthClient.cs
    startLine: 2555
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Asynchronously gets the health of a Service Fabric partition by using the specified timeout and cancellation token.</p>\n"
  example: []
  syntax:
    content: public Task<PartitionHealth> GetPartitionHealthAsync(PartitionHealthQueryDescription queryDescription)
    content.vb: Public Function GetPartitionHealthAsync(queryDescription As PartitionHealthQueryDescription) As Task(Of PartitionHealth)
    parameters:
    - id: queryDescription
      type: System.Fabric.Description.PartitionHealthQueryDescription
      description: The query description.
    return:
      type: System.Threading.Tasks.Task{System.Fabric.Health.PartitionHealth}
      description: "\n<p>The health of a Service Fabric partition.</p>\n"
  overload: System.Fabric.FabricClient.HealthClient.GetPartitionHealthAsync*
  exceptions:
  - type: System.Fabric.FabricObjectClosedException
    commentId: T:System.Fabric.FabricObjectClosedException
    description: "\n<p>The <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object is in a closed state. Dispose of the <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref>\nobject you are using and instantiate a new <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>Returned when a null reference is passed to a method that does not accept it as a valid argument.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>Caused by one of the following:</p>\n<p>E_INVALIDARG is returned when one or more arguments are not valid.</p>\n"
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: "\n<p>Caused by one of the following:</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.OperationTimedOut\" data-throw-if-not-resolved=\"false\"></xref> is returned when the operation takes more than MaxOperationTimeout to complete.</p>\n"
  - type: System.Fabric.FabricException
    commentId: T:System.Fabric.FabricException
    description: "\n<p>Caused by one of the following:</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.FabricHealthEntityNotFound\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.CommunicationError\" data-throw-if-not-resolved=\"false\"></xref> is returned when a communication error caused the operation to fail.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidCredentialType\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509FindType\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509StoreLocation\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509StoreName\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509Thumbprint\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidProtectionLevel\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509Store\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidSubjectName\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  - type: System.Fabric.FabricTransientException
    commentId: T:System.Fabric.FabricTransientException
    description: "\n<p>Caused by one of the following:</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.ServiceTooBusy\" data-throw-if-not-resolved=\"false\"></xref> is returned when the service is too busy to process the operation.</p>\n"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>Caused by one of the following:</p>\n<p>E_ACCESSDENIED is returned when the access check has failed for this operation.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.HealthClient.GetPartitionHealthAsync(System.Fabric.Description.PartitionHealthQueryDescription,System.TimeSpan,System.Threading.CancellationToken)
  commentId: M:System.Fabric.FabricClient.HealthClient.GetPartitionHealthAsync(System.Fabric.Description.PartitionHealthQueryDescription,System.TimeSpan,System.Threading.CancellationToken)
  id: GetPartitionHealthAsync(System.Fabric.Description.PartitionHealthQueryDescription,System.TimeSpan,System.Threading.CancellationToken)
  parent: System.Fabric.FabricClient.HealthClient
  langs:
  - csharp
  - vb
  name: GetPartitionHealthAsync(PartitionHealthQueryDescription, TimeSpan, CancellationToken)
  nameWithType: FabricClient.HealthClient.GetPartitionHealthAsync(PartitionHealthQueryDescription, TimeSpan, CancellationToken)
  fullName: System.Fabric.FabricClient.HealthClient.GetPartitionHealthAsync(System.Fabric.Description.PartitionHealthQueryDescription, System.TimeSpan, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.HealthClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: GetPartitionHealthAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.HealthClient.cs
    startLine: 2625
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Asynchronously gets the health of a Service Fabric partition by using the specified timeout and cancellation token.</p>\n"
  example: []
  syntax:
    content: public Task<PartitionHealth> GetPartitionHealthAsync(PartitionHealthQueryDescription queryDescription, TimeSpan timeout, CancellationToken cancellationToken)
    content.vb: Public Function GetPartitionHealthAsync(queryDescription As PartitionHealthQueryDescription, timeout As TimeSpan, cancellationToken As CancellationToken) As Task(Of PartitionHealth)
    parameters:
    - id: queryDescription
      type: System.Fabric.Description.PartitionHealthQueryDescription
      description: The query description.
    - id: timeout
      type: System.TimeSpan
      description: "\n<p>The maximum amount of time Service Fabric will allow this operation to continue before returning a <xref href=\"System.TimeoutException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The optional cancellation token that the operation is observing. It can be used to send a notification that the operation should be canceled.\nNote that cancellation is advisory and that the operation may still be completed even if it is canceled.</p>\n"
    return:
      type: System.Threading.Tasks.Task{System.Fabric.Health.PartitionHealth}
      description: "\n<p>The health of a Service Fabric partition.</p>\n"
  overload: System.Fabric.FabricClient.HealthClient.GetPartitionHealthAsync*
  exceptions:
  - type: System.Fabric.FabricObjectClosedException
    commentId: T:System.Fabric.FabricObjectClosedException
    description: "\n<p>The <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object is in a closed state. Dispose of the <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref>\nobject you are using and instantiate a new <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>Returned when a null reference is passed to a method that does not accept it as a valid argument.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>Caused by one of the following:</p>\n<p>E_INVALIDARG is returned when one or more arguments are not valid.</p>\n"
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: "\n<p>Caused by one of the following:</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.OperationTimedOut\" data-throw-if-not-resolved=\"false\"></xref> is returned when the operation takes more than the user provided <em>timeout</em> to complete.</p>\n"
  - type: System.Fabric.FabricException
    commentId: T:System.Fabric.FabricException
    description: "\n<p>Caused by one of the following:</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.FabricHealthEntityNotFound\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.CommunicationError\" data-throw-if-not-resolved=\"false\"></xref> is returned when a communication error caused the operation to fail.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidCredentialType\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509FindType\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509StoreLocation\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509StoreName\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509Thumbprint\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidProtectionLevel\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509Store\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidSubjectName\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  - type: System.Fabric.FabricTransientException
    commentId: T:System.Fabric.FabricTransientException
    description: "\n<p>Caused by one of the following:</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.ServiceTooBusy\" data-throw-if-not-resolved=\"false\"></xref> is returned when the service is too busy to process the operation.</p>\n"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>Caused by one of the following:</p>\n<p>E_ACCESSDENIED is returned when the access check has failed for this operation.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.HealthClient.GetReplicaHealthAsync(System.Guid,System.Int64)
  commentId: M:System.Fabric.FabricClient.HealthClient.GetReplicaHealthAsync(System.Guid,System.Int64)
  id: GetReplicaHealthAsync(System.Guid,System.Int64)
  parent: System.Fabric.FabricClient.HealthClient
  langs:
  - csharp
  - vb
  name: GetReplicaHealthAsync(Guid, Int64)
  nameWithType: FabricClient.HealthClient.GetReplicaHealthAsync(Guid, Int64)
  fullName: System.Fabric.FabricClient.HealthClient.GetReplicaHealthAsync(System.Guid, System.Int64)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.HealthClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: GetReplicaHealthAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.HealthClient.cs
    startLine: 2758
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Asynchronously gets the health of a Service Fabric replica.</p>\n"
  remarks: "\n<p>The following example gets the health of a replica.</p>\n<pre><code class=\"c#\">public static bool GetReplicaHealth(string clusterConnection)\n{\n  ReplicaHealth replicaHealth;\n\n  // Connect to the cluster.\n  FabricClient fabricClient = new FabricClient(clusterConnection);\n\n  // Get the replica health.\n  try\n  {\n      replicaHealth = fabricClient.HealthManager.GetReplicaHealthAsync(\nnew Guid(\"a7206315-e53b-4d05-b59c-e210caa28893\"), 130538257146083818).Result;\n  }\n  catch (Exception e)\n  {\n      Console.WriteLine(\"Error: \" + e.Message);\n\n      if (e.InnerException != null)\nConsole.WriteLine(\"  Inner Exception: \" + e.InnerException.Message);\n\n      return false;\n  }\n\n  Console.WriteLine(\"Replica Health:\");\n  Console.WriteLine(\"  ID: \" + replicaHealth.Id);\n  Console.WriteLine(\"    Aggregated Health State: \" + replicaHealth.AggregatedHealthState);\n  Console.WriteLine(\"    Kind: \" + replicaHealth.Kind);\n  Console.WriteLine(\"    Partition ID: \" + replicaHealth.PartitionId);\n\n  // List the health events.\n  Console.WriteLine(\"    Health Events:\");\n  IList&lt;HealthEvent&gt; healthEvents = replicaHealth.HealthEvents;\n  foreach (HealthEvent healthEvent in healthEvents)\n  {\n      Console.WriteLine(\"      Health Event:\");\n      Console.WriteLine(\"        Last Modified: \" + healthEvent.LastModifiedUtcTimestamp);\n      Console.WriteLine(\"        Source UTC Timestamp: \" + healthEvent.SourceUtcTimestamp);\n      Console.WriteLine(\"        Is Expired: \" + healthEvent.IsExpired);\n      Console.WriteLine(\"        Health Information:\");\n      Console.WriteLine(\"          Description: \" + healthEvent.HealthInformation.Description);\n      Console.WriteLine(\"          Source ID: \" + healthEvent.HealthInformation.SourceId);\n      Console.WriteLine(\"          Health State: \" + healthEvent.HealthInformation.HealthState);\n      Console.WriteLine(\"          Property: \" + healthEvent.HealthInformation.Property);\n      Console.WriteLine(\"          Remove When Expired: \" + healthEvent.HealthInformation.RemoveWhenExpired);\n      Console.WriteLine(\"          Sequence Number: \" + healthEvent.HealthInformation.SequenceNumber);\n      Console.WriteLine(\"          Time to Live: \" + healthEvent.HealthInformation.TimeToLive);\n  }\n\n  // List the unhealthy evaluations.\n  Console.WriteLine(\"    Unhealthy Evaluations:\");\n  IList&lt;HealthEvaluation&gt; healthEvaluationList = replicaHealth.UnhealthyEvaluations;\n  foreach (HealthEvaluation healthEvaluation in healthEvaluationList)\n  {\n      Console.WriteLine(\"      Kind: \" + healthEvaluation.Kind);\n      Console.WriteLine(\"        Aggregated Health State: \" + healthEvaluation.AggregatedHealthState);\n      Console.WriteLine(\"        Description: \" + healthEvaluation.Description);\n  }\n\n  Console.WriteLine(); \n  return true;\n}</code></pre>\n"
  example: []
  syntax:
    content: public Task<ReplicaHealth> GetReplicaHealthAsync(Guid partitionId, long replicaId)
    content.vb: Public Function GetReplicaHealthAsync(partitionId As Guid, replicaId As Long) As Task(Of ReplicaHealth)
    parameters:
    - id: partitionId
      type: System.Guid
      description: "\n<p>The ID of the Service Fabric partition.</p>\n"
    - id: replicaId
      type: System.Int64
      description: "\n<p>The ID of the Service Fabric replica.</p>\n"
    return:
      type: System.Threading.Tasks.Task{System.Fabric.Health.ReplicaHealth}
      description: "\n<p>The health of a Service Fabric replica.</p>\n"
  overload: System.Fabric.FabricClient.HealthClient.GetReplicaHealthAsync*
  exceptions:
  - type: System.Fabric.FabricObjectClosedException
    commentId: T:System.Fabric.FabricObjectClosedException
    description: "\n<p>The <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object is in a closed state. Dispose of the <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> \nobject you are using and instantiate a new <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>Returned when a null reference is passed to a method that does not accept it as a valid argument.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>Caused by one of the following:</p>\n<p>E_INVALIDARG is returned when one or more arguments are not valid.</p>\n"
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: "\n<p>Caused by one of the following:</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.OperationTimedOut\" data-throw-if-not-resolved=\"false\"></xref> is returned when the operation takes more than MaxOperationTimeout to complete.</p>\n"
  - type: System.Fabric.FabricException
    commentId: T:System.Fabric.FabricException
    description: "\n<p>Caused by one of the following:</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.FabricHealthEntityNotFound\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.CommunicationError\" data-throw-if-not-resolved=\"false\"></xref> is returned when a communication error caused the operation to fail.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidCredentialType\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509FindType\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509StoreLocation\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509StoreName\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509Thumbprint\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidProtectionLevel\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509Store\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidSubjectName\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  - type: System.Fabric.FabricTransientException
    commentId: T:System.Fabric.FabricTransientException
    description: "\n<p>Caused by one of the following:</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.ServiceTooBusy\" data-throw-if-not-resolved=\"false\"></xref> is returned when the service is too busy to process the operation.</p>\n"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>Caused by one of the following:</p>\n<p>E_ACCESSDENIED is returned when the access check has failed for this operation.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.HealthClient.GetReplicaHealthAsync(System.Guid,System.Int64,System.Fabric.Health.ApplicationHealthPolicy)
  commentId: M:System.Fabric.FabricClient.HealthClient.GetReplicaHealthAsync(System.Guid,System.Int64,System.Fabric.Health.ApplicationHealthPolicy)
  id: GetReplicaHealthAsync(System.Guid,System.Int64,System.Fabric.Health.ApplicationHealthPolicy)
  parent: System.Fabric.FabricClient.HealthClient
  langs:
  - csharp
  - vb
  name: GetReplicaHealthAsync(Guid, Int64, ApplicationHealthPolicy)
  nameWithType: FabricClient.HealthClient.GetReplicaHealthAsync(Guid, Int64, ApplicationHealthPolicy)
  fullName: System.Fabric.FabricClient.HealthClient.GetReplicaHealthAsync(System.Guid, System.Int64, System.Fabric.Health.ApplicationHealthPolicy)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.HealthClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: GetReplicaHealthAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.HealthClient.cs
    startLine: 2827
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Asynchronously gets the health of a Service Fabric replica.</p>\n"
  example: []
  syntax:
    content: public Task<ReplicaHealth> GetReplicaHealthAsync(Guid partitionId, long replicaId, ApplicationHealthPolicy healthPolicy)
    content.vb: Public Function GetReplicaHealthAsync(partitionId As Guid, replicaId As Long, healthPolicy As ApplicationHealthPolicy) As Task(Of ReplicaHealth)
    parameters:
    - id: partitionId
      type: System.Guid
      description: "\n<p>The ID of the Service Fabric partition.</p>\n"
    - id: replicaId
      type: System.Int64
      description: "\n<p>The ID of the Service Fabric replica.</p>\n"
    - id: healthPolicy
      type: System.Fabric.Health.ApplicationHealthPolicy
      description: The application health policy used to evaluate the entity health.
    return:
      type: System.Threading.Tasks.Task{System.Fabric.Health.ReplicaHealth}
      description: "\n<p>The health of a Service Fabric replica.</p>\n"
  overload: System.Fabric.FabricClient.HealthClient.GetReplicaHealthAsync*
  exceptions:
  - type: System.Fabric.FabricObjectClosedException
    commentId: T:System.Fabric.FabricObjectClosedException
    description: "\n<p>The <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object is in a closed state. Dispose of the <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> \nobject you are using and instantiate a new <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>Returned when a null reference is passed to a method that does not accept it as a valid argument.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>Caused by one of the following:</p>\n<p>E_INVALIDARG is returned when one or more arguments are not valid.</p>\n"
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: "\n<p>Caused by one of the following:</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.OperationTimedOut\" data-throw-if-not-resolved=\"false\"></xref> is returned when the operation takes more than MaxOperationTimeout to complete.</p>\n"
  - type: System.Fabric.FabricException
    commentId: T:System.Fabric.FabricException
    description: "\n<p>Caused by one of the following:</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.FabricHealthEntityNotFound\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.CommunicationError\" data-throw-if-not-resolved=\"false\"></xref> is returned when a communication error caused the operation to fail.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidCredentialType\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509FindType\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509StoreLocation\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509StoreName\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509Thumbprint\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidProtectionLevel\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509Store\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidSubjectName\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  - type: System.Fabric.FabricTransientException
    commentId: T:System.Fabric.FabricTransientException
    description: "\n<p>Caused by one of the following:</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.ServiceTooBusy\" data-throw-if-not-resolved=\"false\"></xref> is returned when the service is too busy to process the operation.</p>\n"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>Caused by one of the following:</p>\n<p>E_ACCESSDENIED is returned when the access check has failed for this operation.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.HealthClient.GetReplicaHealthAsync(System.Guid,System.Int64,System.TimeSpan,System.Threading.CancellationToken)
  commentId: M:System.Fabric.FabricClient.HealthClient.GetReplicaHealthAsync(System.Guid,System.Int64,System.TimeSpan,System.Threading.CancellationToken)
  id: GetReplicaHealthAsync(System.Guid,System.Int64,System.TimeSpan,System.Threading.CancellationToken)
  parent: System.Fabric.FabricClient.HealthClient
  langs:
  - csharp
  - vb
  name: GetReplicaHealthAsync(Guid, Int64, TimeSpan, CancellationToken)
  nameWithType: FabricClient.HealthClient.GetReplicaHealthAsync(Guid, Int64, TimeSpan, CancellationToken)
  fullName: System.Fabric.FabricClient.HealthClient.GetReplicaHealthAsync(System.Guid, System.Int64, System.TimeSpan, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.HealthClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: GetReplicaHealthAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.HealthClient.cs
    startLine: 2902
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Asynchronously gets the health of a Service Fabric replica by using the specified timeout and cancellation token.</p>\n"
  example: []
  syntax:
    content: public Task<ReplicaHealth> GetReplicaHealthAsync(Guid partitionId, long replicaId, TimeSpan timeout, CancellationToken cancellationToken)
    content.vb: Public Function GetReplicaHealthAsync(partitionId As Guid, replicaId As Long, timeout As TimeSpan, cancellationToken As CancellationToken) As Task(Of ReplicaHealth)
    parameters:
    - id: partitionId
      type: System.Guid
      description: "\n<p>The ID of the Service Fabric partition.</p>\n"
    - id: replicaId
      type: System.Int64
      description: "\n<p>The ID of the Service Fabric replica.</p>\n"
    - id: timeout
      type: System.TimeSpan
      description: "\n<p>The maximum amount of time Service Fabric will allow this operation to continue before returning a <xref href=\"System.TimeoutException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The optional cancellation token that the operation is observing. It can be used to send a notification that the operation should be canceled.\nNote that cancellation is advisory and that the operation may still be completed even if it is canceled.</p>\n"
    return:
      type: System.Threading.Tasks.Task{System.Fabric.Health.ReplicaHealth}
      description: "\n<p>The health of a Service Fabric replica.</p>\n"
  overload: System.Fabric.FabricClient.HealthClient.GetReplicaHealthAsync*
  exceptions:
  - type: System.Fabric.FabricObjectClosedException
    commentId: T:System.Fabric.FabricObjectClosedException
    description: "\n<p>The <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object is in a closed state. Dispose of the <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> \nobject you are using and instantiate a new <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>Returned when a null reference is passed to a method that does not accept it as a valid argument.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>Caused by one of the following:</p>\n<p>E_INVALIDARG is returned when one or more arguments are not valid.</p>\n"
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: "\n<p>Caused by one of the following:</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.OperationTimedOut\" data-throw-if-not-resolved=\"false\"></xref> is returned when the operation takes more than the user provided <em>timeout</em> to complete.</p>\n"
  - type: System.Fabric.FabricException
    commentId: T:System.Fabric.FabricException
    description: "\n<p>Caused by one of the following:</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.FabricHealthEntityNotFound\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.CommunicationError\" data-throw-if-not-resolved=\"false\"></xref> is returned when a communication error caused the operation to fail.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidCredentialType\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509FindType\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509StoreLocation\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509StoreName\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509Thumbprint\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidProtectionLevel\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509Store\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidSubjectName\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  - type: System.Fabric.FabricTransientException
    commentId: T:System.Fabric.FabricTransientException
    description: "\n<p>Caused by one of the following:</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.ServiceTooBusy\" data-throw-if-not-resolved=\"false\"></xref> is returned when the service is too busy to process the operation.</p>\n"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>Caused by one of the following:</p>\n<p>E_ACCESSDENIED is returned when the access check has failed for this operation.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.HealthClient.GetReplicaHealthAsync(System.Guid,System.Int64,System.Fabric.Health.ApplicationHealthPolicy,System.TimeSpan,System.Threading.CancellationToken)
  commentId: M:System.Fabric.FabricClient.HealthClient.GetReplicaHealthAsync(System.Guid,System.Int64,System.Fabric.Health.ApplicationHealthPolicy,System.TimeSpan,System.Threading.CancellationToken)
  id: GetReplicaHealthAsync(System.Guid,System.Int64,System.Fabric.Health.ApplicationHealthPolicy,System.TimeSpan,System.Threading.CancellationToken)
  parent: System.Fabric.FabricClient.HealthClient
  langs:
  - csharp
  - vb
  name: GetReplicaHealthAsync(Guid, Int64, ApplicationHealthPolicy, TimeSpan, CancellationToken)
  nameWithType: FabricClient.HealthClient.GetReplicaHealthAsync(Guid, Int64, ApplicationHealthPolicy, TimeSpan, CancellationToken)
  fullName: System.Fabric.FabricClient.HealthClient.GetReplicaHealthAsync(System.Guid, System.Int64, System.Fabric.Health.ApplicationHealthPolicy, System.TimeSpan, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.HealthClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: GetReplicaHealthAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.HealthClient.cs
    startLine: 2978
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Asynchronously gets the health of a Service Fabric replica by using the specified timeout and cancellation token.</p>\n"
  example: []
  syntax:
    content: public Task<ReplicaHealth> GetReplicaHealthAsync(Guid partitionId, long replicaId, ApplicationHealthPolicy healthPolicy, TimeSpan timeout, CancellationToken cancellationToken)
    content.vb: Public Function GetReplicaHealthAsync(partitionId As Guid, replicaId As Long, healthPolicy As ApplicationHealthPolicy, timeout As TimeSpan, cancellationToken As CancellationToken) As Task(Of ReplicaHealth)
    parameters:
    - id: partitionId
      type: System.Guid
      description: "\n<p>The ID of the Service Fabric partition.</p>\n"
    - id: replicaId
      type: System.Int64
      description: "\n<p>The ID of the Service Fabric replica.</p>\n"
    - id: healthPolicy
      type: System.Fabric.Health.ApplicationHealthPolicy
      description: The application health policy used to evaluate the entity health.
    - id: timeout
      type: System.TimeSpan
      description: "\n<p>The maximum amount of time Service Fabric will allow this operation to continue before returning a <xref href=\"System.TimeoutException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The optional cancellation token that the operation is observing. It can be used to send a notification that the operation should be canceled.\nNote that cancellation is advisory and that the operation may still be completed even if it is canceled.</p>\n"
    return:
      type: System.Threading.Tasks.Task{System.Fabric.Health.ReplicaHealth}
      description: "\n<p>The health of a Service Fabric replica.</p>\n"
  overload: System.Fabric.FabricClient.HealthClient.GetReplicaHealthAsync*
  exceptions:
  - type: System.Fabric.FabricObjectClosedException
    commentId: T:System.Fabric.FabricObjectClosedException
    description: "\n<p>The <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object is in a closed state. Dispose of the <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> \nobject you are using and instantiate a new <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>Returned when a null reference is passed to a method that does not accept it as a valid argument.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>Caused by one of the following:</p>\n<p>E_INVALIDARG is returned when one or more arguments are not valid.</p>\n"
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: "\n<p>Caused by one of the following:</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.OperationTimedOut\" data-throw-if-not-resolved=\"false\"></xref> is returned when the operation takes more than the user provided <em>timeout</em> to complete.</p>\n"
  - type: System.Fabric.FabricException
    commentId: T:System.Fabric.FabricException
    description: "\n<p>Caused by one of the following:</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.FabricHealthEntityNotFound\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.CommunicationError\" data-throw-if-not-resolved=\"false\"></xref> is returned when a communication error caused the operation to fail.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidCredentialType\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509FindType\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509StoreLocation\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509StoreName\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509Thumbprint\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidProtectionLevel\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509Store\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidSubjectName\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  - type: System.Fabric.FabricTransientException
    commentId: T:System.Fabric.FabricTransientException
    description: "\n<p>Caused by one of the following:</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.ServiceTooBusy\" data-throw-if-not-resolved=\"false\"></xref> is returned when the service is too busy to process the operation.</p>\n"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>Caused by one of the following:</p>\n<p>E_ACCESSDENIED is returned when the access check has failed for this operation.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.HealthClient.GetReplicaHealthAsync(System.Fabric.Description.ReplicaHealthQueryDescription)
  commentId: M:System.Fabric.FabricClient.HealthClient.GetReplicaHealthAsync(System.Fabric.Description.ReplicaHealthQueryDescription)
  id: GetReplicaHealthAsync(System.Fabric.Description.ReplicaHealthQueryDescription)
  parent: System.Fabric.FabricClient.HealthClient
  langs:
  - csharp
  - vb
  name: GetReplicaHealthAsync(ReplicaHealthQueryDescription)
  nameWithType: FabricClient.HealthClient.GetReplicaHealthAsync(ReplicaHealthQueryDescription)
  fullName: System.Fabric.FabricClient.HealthClient.GetReplicaHealthAsync(System.Fabric.Description.ReplicaHealthQueryDescription)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.HealthClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: GetReplicaHealthAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.HealthClient.cs
    startLine: 3041
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Asynchronously gets the health of a Service Fabric replica by using the specified timeout and cancellation token.</p>\n"
  example: []
  syntax:
    content: public Task<ReplicaHealth> GetReplicaHealthAsync(ReplicaHealthQueryDescription queryDescription)
    content.vb: Public Function GetReplicaHealthAsync(queryDescription As ReplicaHealthQueryDescription) As Task(Of ReplicaHealth)
    parameters:
    - id: queryDescription
      type: System.Fabric.Description.ReplicaHealthQueryDescription
      description: The query description.
    return:
      type: System.Threading.Tasks.Task{System.Fabric.Health.ReplicaHealth}
      description: "\n<p>The health of a Service Fabric replica.</p>\n"
  overload: System.Fabric.FabricClient.HealthClient.GetReplicaHealthAsync*
  exceptions:
  - type: System.Fabric.FabricObjectClosedException
    commentId: T:System.Fabric.FabricObjectClosedException
    description: "\n<p>The <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object is in a closed state. Dispose of the <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> \nobject you are using and instantiate a new <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>Returned when a null reference is passed to a method that does not accept it as a valid argument.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>Caused by one of the following:</p>\n<p>E_INVALIDARG is returned when one or more arguments are not valid.</p>\n"
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: "\n<p>Caused by one of the following:</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.OperationTimedOut\" data-throw-if-not-resolved=\"false\"></xref> is returned when the operation takes more than MaxOperationTimeout to complete.</p>\n"
  - type: System.Fabric.FabricException
    commentId: T:System.Fabric.FabricException
    description: "\n<p>Caused by one of the following:</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.FabricHealthEntityNotFound\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.CommunicationError\" data-throw-if-not-resolved=\"false\"></xref> is returned when a communication error caused the operation to fail.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidCredentialType\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509FindType\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509StoreLocation\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509StoreName\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509Thumbprint\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidProtectionLevel\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509Store\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidSubjectName\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  - type: System.Fabric.FabricTransientException
    commentId: T:System.Fabric.FabricTransientException
    description: "\n<p>Caused by one of the following:</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.ServiceTooBusy\" data-throw-if-not-resolved=\"false\"></xref> is returned when the service is too busy to process the operation.</p>\n"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>Caused by one of the following:</p>\n<p>E_ACCESSDENIED is returned when the access check has failed for this operation.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.HealthClient.GetReplicaHealthAsync(System.Fabric.Description.ReplicaHealthQueryDescription,System.TimeSpan,System.Threading.CancellationToken)
  commentId: M:System.Fabric.FabricClient.HealthClient.GetReplicaHealthAsync(System.Fabric.Description.ReplicaHealthQueryDescription,System.TimeSpan,System.Threading.CancellationToken)
  id: GetReplicaHealthAsync(System.Fabric.Description.ReplicaHealthQueryDescription,System.TimeSpan,System.Threading.CancellationToken)
  parent: System.Fabric.FabricClient.HealthClient
  langs:
  - csharp
  - vb
  name: GetReplicaHealthAsync(ReplicaHealthQueryDescription, TimeSpan, CancellationToken)
  nameWithType: FabricClient.HealthClient.GetReplicaHealthAsync(ReplicaHealthQueryDescription, TimeSpan, CancellationToken)
  fullName: System.Fabric.FabricClient.HealthClient.GetReplicaHealthAsync(System.Fabric.Description.ReplicaHealthQueryDescription, System.TimeSpan, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.HealthClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: GetReplicaHealthAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.HealthClient.cs
    startLine: 3111
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Asynchronously gets the health of a Service Fabric replica by using the specified timeout and cancellation token.</p>\n"
  example: []
  syntax:
    content: public Task<ReplicaHealth> GetReplicaHealthAsync(ReplicaHealthQueryDescription queryDescription, TimeSpan timeout, CancellationToken cancellationToken)
    content.vb: Public Function GetReplicaHealthAsync(queryDescription As ReplicaHealthQueryDescription, timeout As TimeSpan, cancellationToken As CancellationToken) As Task(Of ReplicaHealth)
    parameters:
    - id: queryDescription
      type: System.Fabric.Description.ReplicaHealthQueryDescription
      description: The query description.
    - id: timeout
      type: System.TimeSpan
      description: "\n<p>The maximum amount of time Service Fabric will allow this operation to continue before returning a <xref href=\"System.TimeoutException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The optional cancellation token that the operation is observing. It can be used to send a notification that the operation should be canceled.\nNote that cancellation is advisory and that the operation may still be completed even if it is canceled.</p>\n"
    return:
      type: System.Threading.Tasks.Task{System.Fabric.Health.ReplicaHealth}
      description: "\n<p>The health of a Service Fabric replica.</p>\n"
  overload: System.Fabric.FabricClient.HealthClient.GetReplicaHealthAsync*
  exceptions:
  - type: System.Fabric.FabricObjectClosedException
    commentId: T:System.Fabric.FabricObjectClosedException
    description: "\n<p>The <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object is in a closed state. Dispose of the <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> \nobject you are using and instantiate a new <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>Returned when a null reference is passed to a method that does not accept it as a valid argument.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>Caused by one of the following:</p>\n<p>E_INVALIDARG is returned when one or more arguments are not valid.</p>\n"
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: "\n<p>Caused by one of the following:</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.OperationTimedOut\" data-throw-if-not-resolved=\"false\"></xref> is returned when the operation takes more than the user provided <em>timeout</em> to complete.</p>\n"
  - type: System.Fabric.FabricException
    commentId: T:System.Fabric.FabricException
    description: "\n<p>Caused by one of the following:</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.FabricHealthEntityNotFound\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.CommunicationError\" data-throw-if-not-resolved=\"false\"></xref> is returned when a communication error caused the operation to fail.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidCredentialType\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509FindType\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509StoreLocation\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509StoreName\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509Thumbprint\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidProtectionLevel\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509Store\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidSubjectName\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  - type: System.Fabric.FabricTransientException
    commentId: T:System.Fabric.FabricTransientException
    description: "\n<p>Caused by one of the following:</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.ServiceTooBusy\" data-throw-if-not-resolved=\"false\"></xref> is returned when the service is too busy to process the operation.</p>\n"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>Caused by one of the following:</p>\n<p>E_ACCESSDENIED is returned when the access check has failed for this operation.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.HealthClient.GetDeployedApplicationHealthAsync(System.Uri,System.String)
  commentId: M:System.Fabric.FabricClient.HealthClient.GetDeployedApplicationHealthAsync(System.Uri,System.String)
  id: GetDeployedApplicationHealthAsync(System.Uri,System.String)
  parent: System.Fabric.FabricClient.HealthClient
  langs:
  - csharp
  - vb
  name: GetDeployedApplicationHealthAsync(Uri, String)
  nameWithType: FabricClient.HealthClient.GetDeployedApplicationHealthAsync(Uri, String)
  fullName: System.Fabric.FabricClient.HealthClient.GetDeployedApplicationHealthAsync(System.Uri, System.String)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.HealthClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: GetDeployedApplicationHealthAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.HealthClient.cs
    startLine: 3268
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Asynchronously gets the health of a deployed Service Fabric application on the specified node.</p>\n"
  remarks: "\n<p>The following example gets the health of a deployed application.</p>\n<pre><code class=\"c#\">public static bool GetDeployedApplicationsHealth(string clusterConnection)\n{\n  //DeployedApplicationHealth deployedApplicationHealth;\n  //ApplicationHealth applicationHealth;\n  Uri applicationName = new Uri(\"fabric:/myapp/todo\");\n\n  // Connect to the cluster.\n  FabricClient fabricClient = new FabricClient(clusterConnection);\n\n  Console.WriteLine(\"Deployed Application Health:\");\n\n  try\n  {\n      // Determine the nodes where the application has been deployed.\n      ApplicationHealth applicationHealth = fabricClient.HealthManager.GetApplicationHealthAsync(applicationName).Result;\n\n      // Get the deployed application health for each node.\n      IList&lt;DeployedApplicationHealthState&gt; deployedAppHealthStateList = applicationHealth.DeployedApplicationHealthStates;\n      foreach (DeployedApplicationHealthState deployedAppHealthState in deployedAppHealthStateList)\n      {\nDeployedApplicationHealth deployedApplicationHealth = fabricClient.HealthManager.GetDeployedApplicationHealthAsync(applicationName, \n  deployedAppHealthState.NodeName).Result;\n\n// Display the deployed application health information for each node.\n\nConsole.WriteLine(\"  Application {0}: {1}\", deployedApplicationHealth.ApplicationName, deployedApplicationHealth.AggregatedHealthState);\nConsole.WriteLine(\"    Node Name: \" + deployedApplicationHealth.NodeName);\n\n// List the deployed application health states.\nConsole.WriteLine(\"    Deployed applications:\");\nIList&lt;DeployedServicePackageHealthState&gt; deployedSPHealthStateList = deployedApplicationHealth.DeployedServicePackageHealthStates;\nforeach (DeployedServicePackageHealthState deployedSPHealthState in deployedSPHealthStateList)\n{\n  Console.WriteLine(\"      Application: \" + deployedSPHealthState.ApplicationName);\n  Console.WriteLine(\"        Aggregated Health State: \" + deployedSPHealthState.AggregatedHealthState);\n  Console.WriteLine(\"        Node Name: \" + deployedSPHealthState.NodeName);\n  Console.WriteLine(\"        Service Manifest Name: \" + deployedSPHealthState.ServiceManifestName);\n}\n\n// List the health events.\nConsole.WriteLine(\"    Health Events:\");\nIList&lt;HealthEvent&gt; healthEvents = deployedApplicationHealth.HealthEvents;\nforeach (HealthEvent healthEvent in healthEvents)\n{\n  Console.WriteLine(\"      Health Event:\");\n  Console.WriteLine(\"        Last Modified: \" + healthEvent.LastModifiedUtcTimestamp);\n  Console.WriteLine(\"        Source UTC Timestamp: \" + healthEvent.SourceUtcTimestamp);\n  Console.WriteLine(\"        Is Expired: \" + healthEvent.IsExpired);\n  Console.WriteLine(\"        Health Information:\");\n  Console.WriteLine(\"          Description: \" + healthEvent.HealthInformation.Description);\n  Console.WriteLine(\"          Source ID: \" + healthEvent.HealthInformation.SourceId);\n  Console.WriteLine(\"          Health State: \" + healthEvent.HealthInformation.HealthState);\n  Console.WriteLine(\"          Property: \" + healthEvent.HealthInformation.Property);\n  Console.WriteLine(\"          Remove When Expired: \" + healthEvent.HealthInformation.RemoveWhenExpired);\n  Console.WriteLine(\"          Sequence Number: \" + healthEvent.HealthInformation.SequenceNumber);\n  Console.WriteLine(\"          Time to Live: \" + healthEvent.HealthInformation.TimeToLive);\n}\n\n// List the unhealthy evaluations.\nConsole.WriteLine(\"    Unhealthy Evaluations:\");\nIList&lt;HealthEvaluation&gt; healthEvaluationList = deployedApplicationHealth.UnhealthyEvaluations;\nforeach (HealthEvaluation healthEvaluation in healthEvaluationList)\n{\n  Console.WriteLine(\"      Kind: \" + healthEvaluation.Kind);\n  Console.WriteLine(\"        Aggregated Health State: \" + healthEvaluation.AggregatedHealthState);\n  Console.WriteLine(\"        Description: \" + healthEvaluation.Description);\n}\n\nConsole.WriteLine();\n      }\n  }\n  catch (Exception e)\n  {\n      Console.WriteLine(\"Error: \" + e.Message);\n\n      if (e.InnerException != null)\nConsole.WriteLine(\"  Inner Exception: \" + e.InnerException.Message);\n\n      return false;\n  }\n\n  return true;\n}</code></pre>\n"
  example: []
  syntax:
    content: public Task<DeployedApplicationHealth> GetDeployedApplicationHealthAsync(Uri applicationName, string nodeName)
    content.vb: Public Function GetDeployedApplicationHealthAsync(applicationName As Uri, nodeName As String) As Task(Of DeployedApplicationHealth)
    parameters:
    - id: applicationName
      type: System.Uri
      description: "\n<p>The URI of the Service Fabric application.</p>\n"
    - id: nodeName
      type: System.String
      description: "\n<p>The node name where the Service Fabric application is deployed.</p>\n"
    return:
      type: System.Threading.Tasks.Task{System.Fabric.Health.DeployedApplicationHealth}
      description: "\n<p>The health of a deployed Service Fabric application.</p>\n"
  overload: System.Fabric.FabricClient.HealthClient.GetDeployedApplicationHealthAsync*
  exceptions:
  - type: System.Fabric.FabricObjectClosedException
    commentId: T:System.Fabric.FabricObjectClosedException
    description: "\n<p>The <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object is in a closed state. Dispose of the <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref>\nobject you are using and instantiate a new <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>Returned when a null reference is passed to a method that does not accept it as a valid argument.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>Caused by one of the following:</p>\n<p>E_INVALIDARG is returned when one or more arguments are not valid.</p>\n"
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: "\n<p>Caused by one of the following:</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.OperationTimedOut\" data-throw-if-not-resolved=\"false\"></xref> is returned when the operation takes more than MaxOperationTimeout to complete.</p>\n"
  - type: System.Fabric.FabricException
    commentId: T:System.Fabric.FabricException
    description: "\n<p>Caused by one of the following:</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.FabricHealthEntityNotFound\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidNameUri\" data-throw-if-not-resolved=\"false\"></xref> is returned when <em>applicationName</em> is not a valid Service Fabric Name.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.CommunicationError\" data-throw-if-not-resolved=\"false\"></xref> is returned when a communication error caused the operation to fail.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidCredentialType\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509FindType\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509StoreLocation\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509StoreName\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509Thumbprint\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidProtectionLevel\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509Store\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidSubjectName\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  - type: System.Fabric.FabricTransientException
    commentId: T:System.Fabric.FabricTransientException
    description: "\n<p>Caused by one of the following:</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.ServiceTooBusy\" data-throw-if-not-resolved=\"false\"></xref> is returned when the service is too busy to process the operation.</p>\n"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>Caused by one of the following:</p>\n<p>E_ACCESSDENIED is returned when the access check has failed for this operation.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.HealthClient.GetDeployedApplicationHealthAsync(System.Uri,System.String,System.Fabric.Health.ApplicationHealthPolicy)
  commentId: M:System.Fabric.FabricClient.HealthClient.GetDeployedApplicationHealthAsync(System.Uri,System.String,System.Fabric.Health.ApplicationHealthPolicy)
  id: GetDeployedApplicationHealthAsync(System.Uri,System.String,System.Fabric.Health.ApplicationHealthPolicy)
  parent: System.Fabric.FabricClient.HealthClient
  langs:
  - csharp
  - vb
  name: GetDeployedApplicationHealthAsync(Uri, String, ApplicationHealthPolicy)
  nameWithType: FabricClient.HealthClient.GetDeployedApplicationHealthAsync(Uri, String, ApplicationHealthPolicy)
  fullName: System.Fabric.FabricClient.HealthClient.GetDeployedApplicationHealthAsync(System.Uri, System.String, System.Fabric.Health.ApplicationHealthPolicy)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.HealthClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: GetDeployedApplicationHealthAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.HealthClient.cs
    startLine: 3339
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Asynchronously gets the health of a deployed Service Fabric application on the specified node.</p>\n"
  example: []
  syntax:
    content: public Task<DeployedApplicationHealth> GetDeployedApplicationHealthAsync(Uri applicationName, string nodeName, ApplicationHealthPolicy healthPolicy)
    content.vb: Public Function GetDeployedApplicationHealthAsync(applicationName As Uri, nodeName As String, healthPolicy As ApplicationHealthPolicy) As Task(Of DeployedApplicationHealth)
    parameters:
    - id: applicationName
      type: System.Uri
      description: "\n<p>The URI of the Service Fabric application.</p>\n"
    - id: nodeName
      type: System.String
      description: "\n<p>The node name where the Service Fabric application is deployed.</p>\n"
    - id: healthPolicy
      type: System.Fabric.Health.ApplicationHealthPolicy
      description: The application health policy used to evaluate entity health.
    return:
      type: System.Threading.Tasks.Task{System.Fabric.Health.DeployedApplicationHealth}
      description: "\n<p>The health of a deployed Service Fabric application.</p>\n"
  overload: System.Fabric.FabricClient.HealthClient.GetDeployedApplicationHealthAsync*
  exceptions:
  - type: System.Fabric.FabricObjectClosedException
    commentId: T:System.Fabric.FabricObjectClosedException
    description: "\n<p>The <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object is in a closed state. Dispose of the <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref>\nobject you are using and instantiate a new <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>Returned when a null reference is passed to a method that does not accept it as a valid argument.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>Caused by one of the following:</p>\n<p>E_INVALIDARG is returned when one or more arguments are not valid.</p>\n"
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: "\n<p>Caused by one of the following:</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.OperationTimedOut\" data-throw-if-not-resolved=\"false\"></xref> is returned when the operation takes more than MaxOperationTimeout to complete.</p>\n"
  - type: System.Fabric.FabricException
    commentId: T:System.Fabric.FabricException
    description: "\n<p>Caused by one of the following:</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.FabricHealthEntityNotFound\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidNameUri\" data-throw-if-not-resolved=\"false\"></xref> is returned when <em>applicationName</em> is not a valid Service Fabric Name.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.CommunicationError\" data-throw-if-not-resolved=\"false\"></xref> is returned when a communication error caused the operation to fail.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidCredentialType\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509FindType\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509StoreLocation\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509StoreName\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509Thumbprint\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidProtectionLevel\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509Store\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidSubjectName\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  - type: System.Fabric.FabricTransientException
    commentId: T:System.Fabric.FabricTransientException
    description: "\n<p>Caused by one of the following:</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.ServiceTooBusy\" data-throw-if-not-resolved=\"false\"></xref> is returned when the service is too busy to process the operation.</p>\n"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>Caused by one of the following:</p>\n<p>E_ACCESSDENIED is returned when the access check has failed for this operation.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.HealthClient.GetDeployedApplicationHealthAsync(System.Uri,System.String,System.TimeSpan,System.Threading.CancellationToken)
  commentId: M:System.Fabric.FabricClient.HealthClient.GetDeployedApplicationHealthAsync(System.Uri,System.String,System.TimeSpan,System.Threading.CancellationToken)
  id: GetDeployedApplicationHealthAsync(System.Uri,System.String,System.TimeSpan,System.Threading.CancellationToken)
  parent: System.Fabric.FabricClient.HealthClient
  langs:
  - csharp
  - vb
  name: GetDeployedApplicationHealthAsync(Uri, String, TimeSpan, CancellationToken)
  nameWithType: FabricClient.HealthClient.GetDeployedApplicationHealthAsync(Uri, String, TimeSpan, CancellationToken)
  fullName: System.Fabric.FabricClient.HealthClient.GetDeployedApplicationHealthAsync(System.Uri, System.String, System.TimeSpan, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.HealthClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: GetDeployedApplicationHealthAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.HealthClient.cs
    startLine: 3416
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Asynchronously gets the health of a deployed Service Fabric application on the specified node by using the specified timeout and cancellation token.</p>\n"
  example: []
  syntax:
    content: public Task<DeployedApplicationHealth> GetDeployedApplicationHealthAsync(Uri applicationName, string nodeName, TimeSpan timeout, CancellationToken cancellationToken)
    content.vb: Public Function GetDeployedApplicationHealthAsync(applicationName As Uri, nodeName As String, timeout As TimeSpan, cancellationToken As CancellationToken) As Task(Of DeployedApplicationHealth)
    parameters:
    - id: applicationName
      type: System.Uri
      description: "\n<p>The URI of the Service Fabric application.</p>\n"
    - id: nodeName
      type: System.String
      description: "\n<p>The node name where the Service Fabric application is deployed.</p>\n"
    - id: timeout
      type: System.TimeSpan
      description: "\n<p>The maximum amount of time Service Fabric will allow this operation to continue before returning a <xref href=\"System.TimeoutException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The optional cancellation token that the operation is observing. It can be used to send a notification that the operation should be canceled.\nNote that cancellation is advisory and that the operation may still be completed even if it is canceled.</p>\n"
    return:
      type: System.Threading.Tasks.Task{System.Fabric.Health.DeployedApplicationHealth}
      description: "\n<p>The task representing the asynchronous operation.</p>\n"
  overload: System.Fabric.FabricClient.HealthClient.GetDeployedApplicationHealthAsync*
  exceptions:
  - type: System.Fabric.FabricObjectClosedException
    commentId: T:System.Fabric.FabricObjectClosedException
    description: "\n<p>The <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object is in a closed state. Dispose of the <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> \nobject you are using and instantiate a new <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>Returned when a null reference is passed to a method that does not accept it as a valid argument.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>Caused by one of the following:</p>\n<p>E_INVALIDARG is returned when one or more arguments are not valid.</p>\n"
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: "\n<p>Caused by one of the following:</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.OperationTimedOut\" data-throw-if-not-resolved=\"false\"></xref> is returned when the operation takes more than the user provided <em>timeout</em> to complete.</p>\n"
  - type: System.Fabric.FabricException
    commentId: T:System.Fabric.FabricException
    description: "\n<p>Caused by one of the following:</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.FabricHealthEntityNotFound\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidNameUri\" data-throw-if-not-resolved=\"false\"></xref> is returned when <em>applicationName</em> is not a valid Service Fabric Name.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.CommunicationError\" data-throw-if-not-resolved=\"false\"></xref> is returned when a communication error caused the operation to fail.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidCredentialType\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509FindType\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509StoreLocation\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509StoreName\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509Thumbprint\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidProtectionLevel\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509Store\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidSubjectName\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  - type: System.Fabric.FabricTransientException
    commentId: T:System.Fabric.FabricTransientException
    description: "\n<p>Caused by one of the following:</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.ServiceTooBusy\" data-throw-if-not-resolved=\"false\"></xref> is returned when the service is too busy to process the operation.</p>\n"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>Caused by one of the following:</p>\n<p>E_ACCESSDENIED is returned when the access check has failed for this operation.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.HealthClient.GetDeployedApplicationHealthAsync(System.Uri,System.String,System.Fabric.Health.ApplicationHealthPolicy,System.TimeSpan,System.Threading.CancellationToken)
  commentId: M:System.Fabric.FabricClient.HealthClient.GetDeployedApplicationHealthAsync(System.Uri,System.String,System.Fabric.Health.ApplicationHealthPolicy,System.TimeSpan,System.Threading.CancellationToken)
  id: GetDeployedApplicationHealthAsync(System.Uri,System.String,System.Fabric.Health.ApplicationHealthPolicy,System.TimeSpan,System.Threading.CancellationToken)
  parent: System.Fabric.FabricClient.HealthClient
  langs:
  - csharp
  - vb
  name: GetDeployedApplicationHealthAsync(Uri, String, ApplicationHealthPolicy, TimeSpan, CancellationToken)
  nameWithType: FabricClient.HealthClient.GetDeployedApplicationHealthAsync(Uri, String, ApplicationHealthPolicy, TimeSpan, CancellationToken)
  fullName: System.Fabric.FabricClient.HealthClient.GetDeployedApplicationHealthAsync(System.Uri, System.String, System.Fabric.Health.ApplicationHealthPolicy, System.TimeSpan, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.HealthClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: GetDeployedApplicationHealthAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.HealthClient.cs
    startLine: 3494
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Asynchronously gets the health of a deployed Service Fabric application on the specified node by using the specified timeout and cancellation token.</p>\n"
  example: []
  syntax:
    content: public Task<DeployedApplicationHealth> GetDeployedApplicationHealthAsync(Uri applicationName, string nodeName, ApplicationHealthPolicy healthPolicy, TimeSpan timeout, CancellationToken cancellationToken)
    content.vb: Public Function GetDeployedApplicationHealthAsync(applicationName As Uri, nodeName As String, healthPolicy As ApplicationHealthPolicy, timeout As TimeSpan, cancellationToken As CancellationToken) As Task(Of DeployedApplicationHealth)
    parameters:
    - id: applicationName
      type: System.Uri
      description: "\n<p>The URI of the Service Fabric application.</p>\n"
    - id: nodeName
      type: System.String
      description: "\n<p>The node name where the Service Fabric application is deployed.</p>\n"
    - id: healthPolicy
      type: System.Fabric.Health.ApplicationHealthPolicy
      description: The application health policy used to evaluate the entity health.
    - id: timeout
      type: System.TimeSpan
      description: "\n<p>The maximum amount of time Service Fabric will allow this operation to continue before returning a <xref href=\"System.TimeoutException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The optional cancellation token that the operation is observing. It can be used to send a notification that the operation should be canceled.\nNote that cancellation is advisory and that the operation may still be completed even if it is canceled.</p>\n"
    return:
      type: System.Threading.Tasks.Task{System.Fabric.Health.DeployedApplicationHealth}
      description: "\n<p>The task representing the asynchronous operation.</p>\n"
  overload: System.Fabric.FabricClient.HealthClient.GetDeployedApplicationHealthAsync*
  exceptions:
  - type: System.Fabric.FabricObjectClosedException
    commentId: T:System.Fabric.FabricObjectClosedException
    description: "\n<p>The <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object is in a closed state. Dispose of the <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> \nobject you are using and instantiate a new <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>Returned when a null reference is passed to a method that does not accept it as a valid argument.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>Caused by one of the following:</p>\n<p>E_INVALIDARG is returned when one or more arguments are not valid.</p>\n"
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: "\n<p>Caused by one of the following:</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.OperationTimedOut\" data-throw-if-not-resolved=\"false\"></xref> is returned when the operation takes more than the user provided <em>timeout</em> to complete.</p>\n"
  - type: System.Fabric.FabricException
    commentId: T:System.Fabric.FabricException
    description: "\n<p>Caused by one of the following:</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.FabricHealthEntityNotFound\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidNameUri\" data-throw-if-not-resolved=\"false\"></xref> is returned when <em>applicationName</em> is not a valid Service Fabric Name.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.CommunicationError\" data-throw-if-not-resolved=\"false\"></xref> is returned when a communication error caused the operation to fail.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidCredentialType\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509FindType\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509StoreLocation\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509StoreName\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509Thumbprint\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidProtectionLevel\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509Store\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidSubjectName\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  - type: System.Fabric.FabricTransientException
    commentId: T:System.Fabric.FabricTransientException
    description: "\n<p>Caused by one of the following:</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.ServiceTooBusy\" data-throw-if-not-resolved=\"false\"></xref> is returned when the service is too busy to process the operation.</p>\n"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>Caused by one of the following:</p>\n<p>E_ACCESSDENIED is returned when the access check has failed for this operation.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.HealthClient.GetDeployedApplicationHealthAsync(System.Fabric.Description.DeployedApplicationHealthQueryDescription)
  commentId: M:System.Fabric.FabricClient.HealthClient.GetDeployedApplicationHealthAsync(System.Fabric.Description.DeployedApplicationHealthQueryDescription)
  id: GetDeployedApplicationHealthAsync(System.Fabric.Description.DeployedApplicationHealthQueryDescription)
  parent: System.Fabric.FabricClient.HealthClient
  langs:
  - csharp
  - vb
  name: GetDeployedApplicationHealthAsync(DeployedApplicationHealthQueryDescription)
  nameWithType: FabricClient.HealthClient.GetDeployedApplicationHealthAsync(DeployedApplicationHealthQueryDescription)
  fullName: System.Fabric.FabricClient.HealthClient.GetDeployedApplicationHealthAsync(System.Fabric.Description.DeployedApplicationHealthQueryDescription)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.HealthClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: GetDeployedApplicationHealthAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.HealthClient.cs
    startLine: 3560
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Asynchronously gets the health of a deployed Service Fabric application on the specified node by using the specified timeout and cancellation token.</p>\n"
  example: []
  syntax:
    content: public Task<DeployedApplicationHealth> GetDeployedApplicationHealthAsync(DeployedApplicationHealthQueryDescription queryDescription)
    content.vb: Public Function GetDeployedApplicationHealthAsync(queryDescription As DeployedApplicationHealthQueryDescription) As Task(Of DeployedApplicationHealth)
    parameters:
    - id: queryDescription
      type: System.Fabric.Description.DeployedApplicationHealthQueryDescription
      description: The query description.
    return:
      type: System.Threading.Tasks.Task{System.Fabric.Health.DeployedApplicationHealth}
      description: "\n<p>The task representing the asynchronous operation.</p>\n"
  overload: System.Fabric.FabricClient.HealthClient.GetDeployedApplicationHealthAsync*
  exceptions:
  - type: System.Fabric.FabricObjectClosedException
    commentId: T:System.Fabric.FabricObjectClosedException
    description: "\n<p>The <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object is in a closed state. Dispose of the <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> \nobject you are using and instantiate a new <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>Returned when a null reference is passed to a method that does not accept it as a valid argument.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>Caused by one of the following:</p>\n<p>E_INVALIDARG is returned when one or more arguments are not valid.</p>\n"
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: "\n<p>Caused by one of the following:</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.OperationTimedOut\" data-throw-if-not-resolved=\"false\"></xref> is returned when the operation takes more than MaxOperationTimeout to complete.</p>\n"
  - type: System.Fabric.FabricException
    commentId: T:System.Fabric.FabricException
    description: "\n<p>Caused by one of the following:</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.FabricHealthEntityNotFound\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidNameUri\" data-throw-if-not-resolved=\"false\"></xref> is returned when <xref href=\"System.Fabric.Description.DeployedApplicationHealthQueryDescription.ApplicationName\" data-throw-if-not-resolved=\"false\"></xref> \nis not a valid Service Fabric Name.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.CommunicationError\" data-throw-if-not-resolved=\"false\"></xref> is returned when a communication error caused the operation to fail.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidCredentialType\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509FindType\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509StoreLocation\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509StoreName\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509Thumbprint\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidProtectionLevel\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509Store\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidSubjectName\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  - type: System.Fabric.FabricTransientException
    commentId: T:System.Fabric.FabricTransientException
    description: "\n<p>Caused by one of the following:</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.ServiceTooBusy\" data-throw-if-not-resolved=\"false\"></xref> is returned when the service is too busy to process the operation.</p>\n"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>Caused by one of the following:</p>\n<p>E_ACCESSDENIED is returned when the access check has failed for this operation.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.HealthClient.GetDeployedApplicationHealthAsync(System.Fabric.Description.DeployedApplicationHealthQueryDescription,System.TimeSpan,System.Threading.CancellationToken)
  commentId: M:System.Fabric.FabricClient.HealthClient.GetDeployedApplicationHealthAsync(System.Fabric.Description.DeployedApplicationHealthQueryDescription,System.TimeSpan,System.Threading.CancellationToken)
  id: GetDeployedApplicationHealthAsync(System.Fabric.Description.DeployedApplicationHealthQueryDescription,System.TimeSpan,System.Threading.CancellationToken)
  parent: System.Fabric.FabricClient.HealthClient
  langs:
  - csharp
  - vb
  name: GetDeployedApplicationHealthAsync(DeployedApplicationHealthQueryDescription, TimeSpan, CancellationToken)
  nameWithType: FabricClient.HealthClient.GetDeployedApplicationHealthAsync(DeployedApplicationHealthQueryDescription, TimeSpan, CancellationToken)
  fullName: System.Fabric.FabricClient.HealthClient.GetDeployedApplicationHealthAsync(System.Fabric.Description.DeployedApplicationHealthQueryDescription, System.TimeSpan, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.HealthClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: GetDeployedApplicationHealthAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.HealthClient.cs
    startLine: 3633
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Asynchronously gets the health of a deployed Service Fabric application on the specified node by using the specified timeout and cancellation token.</p>\n"
  example: []
  syntax:
    content: public Task<DeployedApplicationHealth> GetDeployedApplicationHealthAsync(DeployedApplicationHealthQueryDescription queryDescription, TimeSpan timeout, CancellationToken cancellationToken)
    content.vb: Public Function GetDeployedApplicationHealthAsync(queryDescription As DeployedApplicationHealthQueryDescription, timeout As TimeSpan, cancellationToken As CancellationToken) As Task(Of DeployedApplicationHealth)
    parameters:
    - id: queryDescription
      type: System.Fabric.Description.DeployedApplicationHealthQueryDescription
      description: The query description.
    - id: timeout
      type: System.TimeSpan
      description: "\n<p>The maximum amount of time Service Fabric will allow this operation to continue before returning a <xref href=\"System.TimeoutException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The optional cancellation token that the operation is observing. It can be used to send a notification that the operation should be canceled.\nNote that cancellation is advisory and that the operation may still be completed even if it is canceled.</p>\n"
    return:
      type: System.Threading.Tasks.Task{System.Fabric.Health.DeployedApplicationHealth}
      description: "\n<p>The task representing the asynchronous operation.</p>\n"
  overload: System.Fabric.FabricClient.HealthClient.GetDeployedApplicationHealthAsync*
  exceptions:
  - type: System.Fabric.FabricObjectClosedException
    commentId: T:System.Fabric.FabricObjectClosedException
    description: "\n<p>The <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object is in a closed state. Dispose of the <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> \nobject you are using and instantiate a new <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>Returned when a null reference is passed to a method that does not accept it as a valid argument.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>Caused by one of the following:</p>\n<p>E_INVALIDARG is returned when one or more arguments are not valid.</p>\n"
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: "\n<p>Caused by one of the following:</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.OperationTimedOut\" data-throw-if-not-resolved=\"false\"></xref> is returned when the operation takes more than the user provided <em>timeout</em> to complete.</p>\n"
  - type: System.Fabric.FabricException
    commentId: T:System.Fabric.FabricException
    description: "\n<p>Caused by one of the following:</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.FabricHealthEntityNotFound\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidNameUri\" data-throw-if-not-resolved=\"false\"></xref> is returned when <xref href=\"System.Fabric.Description.DeployedApplicationHealthQueryDescription.ApplicationName\" data-throw-if-not-resolved=\"false\"></xref> \nis not a valid Service Fabric Name.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.CommunicationError\" data-throw-if-not-resolved=\"false\"></xref> is returned when a communication error caused the operation to fail.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidCredentialType\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509FindType\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509StoreLocation\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509StoreName\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509Thumbprint\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidProtectionLevel\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509Store\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidSubjectName\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  - type: System.Fabric.FabricTransientException
    commentId: T:System.Fabric.FabricTransientException
    description: "\n<p>Caused by one of the following:</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.ServiceTooBusy\" data-throw-if-not-resolved=\"false\"></xref> is returned when the service is too busy to process the operation.</p>\n"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>Caused by one of the following:</p>\n<p>E_ACCESSDENIED is returned when the access check has failed for this operation.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.HealthClient.GetDeployedServicePackageHealthAsync(System.Uri,System.String,System.String)
  commentId: M:System.Fabric.FabricClient.HealthClient.GetDeployedServicePackageHealthAsync(System.Uri,System.String,System.String)
  id: GetDeployedServicePackageHealthAsync(System.Uri,System.String,System.String)
  parent: System.Fabric.FabricClient.HealthClient
  langs:
  - csharp
  - vb
  name: GetDeployedServicePackageHealthAsync(Uri, String, String)
  nameWithType: FabricClient.HealthClient.GetDeployedServicePackageHealthAsync(Uri, String, String)
  fullName: System.Fabric.FabricClient.HealthClient.GetDeployedServicePackageHealthAsync(System.Uri, System.String, System.String)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.HealthClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: GetDeployedServicePackageHealthAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.HealthClient.cs
    startLine: 3794
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Asynchronously gets the health of a deployed Service Fabric service package.</p>\n"
  remarks: "\n<p>The following example gets the health of a deployed service package.</p>\n<pre><code class=\"c#\">public static bool GetDeployedServicePackageHealth(string clusterConnection)\n{\n  DeployedApplicationHealth deployedApplicationHealth;\n  DeployedServicePackageHealth deployedServicePackageHealth;\n  ApplicationHealth applicationHealth;\n  Uri applicationName = new Uri(\"fabric:/myapp/todo\");\n\n  // Connect to the cluster.\n  FabricClient fabricClient = new FabricClient(clusterConnection);\n\n  Console.WriteLine(\"Deployed Service Package Health:\");\n\n  try\n  {\n      // Determine the nodes where the application has been deployed.\n      applicationHealth = fabricClient.HealthManager.GetApplicationHealthAsync(applicationName).Result;\n\n      // Get the deployed service package health for each node.\n      IList&lt;DeployedApplicationHealthState&gt; deployedApplicationHealthStateList = applicationHealth.DeployedApplicationHealthStates;\n      foreach (DeployedApplicationHealthState deployedApplicationHealthState in deployedApplicationHealthStateList)\n      {\n// Get the deployed application health, which contains the service manifest name and \n// the names of the nodes where the service has been deployed.\ndeployedApplicationHealth = fabricClient.HealthManager.GetDeployedApplicationHealthAsync(applicationName,\n  deployedApplicationHealthState.NodeName).Result;\n\n// Return if empty.\nif (deployedApplicationHealth.DeployedServicePackageHealthStates.Count == 0)\n  return false;\n\n// Get the deployed service package health.\ndeployedServicePackageHealth = fabricClient.HealthManager.GetDeployedServicePackageHealthAsync(applicationName,\n  deployedApplicationHealth.DeployedServicePackageHealthStates[0].ServiceManifestName, \n  deployedApplicationHealthState.NodeName).Result;\n\n// Display the deployed service package health information.\nConsole.WriteLine(\"  Application Name: \" + deployedServicePackageHealth.ApplicationName);\nConsole.WriteLine(\"    Node Name: \" + deployedServicePackageHealth.NodeName);\nConsole.WriteLine(\"    Aggregated Health State: \" + deployedServicePackageHealth.AggregatedHealthState);\nConsole.WriteLine(\"    Service Manifest Name: \" + deployedServicePackageHealth.ServiceManifestName);\n\n// List the health events.\nConsole.WriteLine(\"    Health Events:\");\nIList&lt;HealthEvent&gt; healthEvents = deployedServicePackageHealth.HealthEvents;\nforeach (HealthEvent healthEvent in healthEvents)\n{\n  Console.WriteLine(\"      Health Event:\");\n  Console.WriteLine(\"        Last Modified: \" + healthEvent.LastModifiedUtcTimestamp);\n  Console.WriteLine(\"        Source UTC Timestamp: \" + healthEvent.SourceUtcTimestamp);\n  Console.WriteLine(\"        Is Expired: \" + healthEvent.IsExpired);\n  Console.WriteLine(\"        Health Information:\");\n  Console.WriteLine(\"          Description: \" + healthEvent.HealthInformation.Description);\n  Console.WriteLine(\"          Source ID: \" + healthEvent.HealthInformation.SourceId);\n  Console.WriteLine(\"          Health State: \" + healthEvent.HealthInformation.HealthState);\n  Console.WriteLine(\"          Property: \" + healthEvent.HealthInformation.Property);\n  Console.WriteLine(\"          Remove When Expired: \" + healthEvent.HealthInformation.RemoveWhenExpired);\n  Console.WriteLine(\"          Sequence Number: \" + healthEvent.HealthInformation.SequenceNumber);\n  Console.WriteLine(\"          Time to Live: \" + healthEvent.HealthInformation.TimeToLive);\n}\n\n// List the unhealthy evaluations.\nConsole.WriteLine(\"    Unhealthy Evaluations:\");\nIList&lt;HealthEvaluation&gt; healthEvaluationList = deployedServicePackageHealth.UnhealthyEvaluations;\nforeach (HealthEvaluation healthEvaluation in healthEvaluationList)\n{\n  Console.WriteLine(\"      Kind: \" + healthEvaluation.Kind);\n  Console.WriteLine(\"        Aggregated Health State: \" + healthEvaluation.AggregatedHealthState);\n  Console.WriteLine(\"        Description: \" + healthEvaluation.Description);\n}\n\nConsole.WriteLine();\n      }\n  }\n  catch (Exception e)\n  {\n      Console.WriteLine(\"Error: \" + e.Message);\n\n      if (e.InnerException != null)\nConsole.WriteLine(\"  Inner Exception: \" + e.InnerException.Message);\n\n      return false;\n  }\n  return true;\n}</code></pre>\n"
  example: []
  syntax:
    content: public Task<DeployedServicePackageHealth> GetDeployedServicePackageHealthAsync(Uri applicationName, string serviceManifestName, string nodeName)
    content.vb: Public Function GetDeployedServicePackageHealthAsync(applicationName As Uri, serviceManifestName As String, nodeName As String) As Task(Of DeployedServicePackageHealth)
    parameters:
    - id: applicationName
      type: System.Uri
      description: "\n<p>The URI of the Service Fabric application.</p>\n"
    - id: serviceManifestName
      type: System.String
      description: "\n<p>The name of the service manifest file for this Service Fabric service.</p>\n"
    - id: nodeName
      type: System.String
      description: "\n<p>The name of the node that the Service Fabric service was deployed to.</p>\n"
    return:
      type: System.Threading.Tasks.Task{System.Fabric.Health.DeployedServicePackageHealth}
      description: "\n<p>The health of a deployed Service Fabric service package.</p>\n"
  overload: System.Fabric.FabricClient.HealthClient.GetDeployedServicePackageHealthAsync*
  exceptions:
  - type: System.Fabric.FabricObjectClosedException
    commentId: T:System.Fabric.FabricObjectClosedException
    description: "\n<p>The <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object is in a closed state. Dispose of the <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> \nobject you are using and instantiate a new <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>Returned when a null reference is passed to a method that does not accept it as a valid argument.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>Caused by one of the following:</p>\n<p>E_INVALIDARG is returned when one or more arguments are not valid.</p>\n"
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: "\n<p>Caused by one of the following:</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.OperationTimedOut\" data-throw-if-not-resolved=\"false\"></xref> is returned when the operation takes more than MaxOperationTimeout to complete.</p>\n"
  - type: System.Fabric.FabricException
    commentId: T:System.Fabric.FabricException
    description: "\n<p>Caused by one of the following:</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.FabricHealthEntityNotFound\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidNameUri\" data-throw-if-not-resolved=\"false\"></xref> is returned when <em>applicationName</em> is not a valid Service Fabric Name.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.CommunicationError\" data-throw-if-not-resolved=\"false\"></xref> is returned when a communication error caused the operation to fail.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidCredentialType\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509FindType\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509StoreLocation\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509StoreName\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509Thumbprint\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidProtectionLevel\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509Store\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidSubjectName\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  - type: System.Fabric.FabricTransientException
    commentId: T:System.Fabric.FabricTransientException
    description: "\n<p>Caused by one of the following:</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.ServiceTooBusy\" data-throw-if-not-resolved=\"false\"></xref> is returned when the service is too busy to process the operation.</p>\n"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>Caused by one of the following:</p>\n<p>E_ACCESSDENIED is returned when the access check has failed for this operation.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.HealthClient.GetDeployedServicePackageHealthAsync(System.Uri,System.String,System.String,System.Fabric.Health.ApplicationHealthPolicy)
  commentId: M:System.Fabric.FabricClient.HealthClient.GetDeployedServicePackageHealthAsync(System.Uri,System.String,System.String,System.Fabric.Health.ApplicationHealthPolicy)
  id: GetDeployedServicePackageHealthAsync(System.Uri,System.String,System.String,System.Fabric.Health.ApplicationHealthPolicy)
  parent: System.Fabric.FabricClient.HealthClient
  langs:
  - csharp
  - vb
  name: GetDeployedServicePackageHealthAsync(Uri, String, String, ApplicationHealthPolicy)
  nameWithType: FabricClient.HealthClient.GetDeployedServicePackageHealthAsync(Uri, String, String, ApplicationHealthPolicy)
  fullName: System.Fabric.FabricClient.HealthClient.GetDeployedServicePackageHealthAsync(System.Uri, System.String, System.String, System.Fabric.Health.ApplicationHealthPolicy)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.HealthClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: GetDeployedServicePackageHealthAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.HealthClient.cs
    startLine: 3867
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Asynchronously gets the health of a deployed Service Fabric service package.</p>\n"
  example: []
  syntax:
    content: public Task<DeployedServicePackageHealth> GetDeployedServicePackageHealthAsync(Uri applicationName, string serviceManifestName, string nodeName, ApplicationHealthPolicy healthPolicy)
    content.vb: Public Function GetDeployedServicePackageHealthAsync(applicationName As Uri, serviceManifestName As String, nodeName As String, healthPolicy As ApplicationHealthPolicy) As Task(Of DeployedServicePackageHealth)
    parameters:
    - id: applicationName
      type: System.Uri
      description: "\n<p>The URI of the Service Fabric application.</p>\n"
    - id: serviceManifestName
      type: System.String
      description: "\n<p>The name of the service manifest file for this Service Fabric service.</p>\n"
    - id: nodeName
      type: System.String
      description: "\n<p>The name of the node that the Service Fabric service was deployed to.</p>\n"
    - id: healthPolicy
      type: System.Fabric.Health.ApplicationHealthPolicy
      description: The application health policy used to evaluate the entity health.
    return:
      type: System.Threading.Tasks.Task{System.Fabric.Health.DeployedServicePackageHealth}
      description: "\n<p>The health of a deployed Service Fabric service package.</p>\n"
  overload: System.Fabric.FabricClient.HealthClient.GetDeployedServicePackageHealthAsync*
  exceptions:
  - type: System.Fabric.FabricObjectClosedException
    commentId: T:System.Fabric.FabricObjectClosedException
    description: "\n<p>The <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object is in a closed state. Dispose of the <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object you are using and instantiate a new <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>Returned when a null reference is passed to a method that does not accept it as a valid argument.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>Caused by one of the following:</p>\n<p>E_INVALIDARG is returned when one or more arguments are not valid.</p>\n"
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: "\n<p>Caused by one of the following:</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.OperationTimedOut\" data-throw-if-not-resolved=\"false\"></xref> is returned when the operation takes more than MaxOperationTimeout to complete.</p>\n"
  - type: System.Fabric.FabricException
    commentId: T:System.Fabric.FabricException
    description: "\n<p>Caused by one of the following:</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.FabricHealthEntityNotFound\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidNameUri\" data-throw-if-not-resolved=\"false\"></xref> is returned when <em>applicationName</em> is not a valid Service Fabric Name.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.CommunicationError\" data-throw-if-not-resolved=\"false\"></xref> is returned when a communication error caused the operation to fail.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidCredentialType\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509FindType\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509StoreLocation\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509StoreName\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509Thumbprint\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidProtectionLevel\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509Store\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidSubjectName\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  - type: System.Fabric.FabricTransientException
    commentId: T:System.Fabric.FabricTransientException
    description: "\n<p>Caused by one of the following:</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.ServiceTooBusy\" data-throw-if-not-resolved=\"false\"></xref> is returned when the service is too busy to process the operation.</p>\n"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>Caused by one of the following:</p>\n<p>E_ACCESSDENIED is returned when the access check has failed for this operation.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.HealthClient.GetDeployedServicePackageHealthAsync(System.Uri,System.String,System.String,System.TimeSpan,System.Threading.CancellationToken)
  commentId: M:System.Fabric.FabricClient.HealthClient.GetDeployedServicePackageHealthAsync(System.Uri,System.String,System.String,System.TimeSpan,System.Threading.CancellationToken)
  id: GetDeployedServicePackageHealthAsync(System.Uri,System.String,System.String,System.TimeSpan,System.Threading.CancellationToken)
  parent: System.Fabric.FabricClient.HealthClient
  langs:
  - csharp
  - vb
  name: GetDeployedServicePackageHealthAsync(Uri, String, String, TimeSpan, CancellationToken)
  nameWithType: FabricClient.HealthClient.GetDeployedServicePackageHealthAsync(Uri, String, String, TimeSpan, CancellationToken)
  fullName: System.Fabric.FabricClient.HealthClient.GetDeployedServicePackageHealthAsync(System.Uri, System.String, System.String, System.TimeSpan, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.HealthClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: GetDeployedServicePackageHealthAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.HealthClient.cs
    startLine: 3947
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Asynchronously gets the health of a deployed Service Fabric service package by using the specified timeout and cancellation token.</p>\n"
  example: []
  syntax:
    content: public Task<DeployedServicePackageHealth> GetDeployedServicePackageHealthAsync(Uri applicationName, string serviceManifestName, string nodeName, TimeSpan timeout, CancellationToken cancellationToken)
    content.vb: Public Function GetDeployedServicePackageHealthAsync(applicationName As Uri, serviceManifestName As String, nodeName As String, timeout As TimeSpan, cancellationToken As CancellationToken) As Task(Of DeployedServicePackageHealth)
    parameters:
    - id: applicationName
      type: System.Uri
      description: "\n<p>The URI of the Service Fabric application.</p>\n"
    - id: serviceManifestName
      type: System.String
      description: "\n<p>The name of the service manifest file for this Service Fabric service.</p>\n"
    - id: nodeName
      type: System.String
      description: "\n<p>The name of the node that the Service Fabric service was deployed to.</p>\n"
    - id: timeout
      type: System.TimeSpan
      description: "\n<p>The maximum amount of time Service Fabric will allow this operation to continue before returning a <xref href=\"System.TimeoutException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The optional cancellation token that the operation is observing. It can be used to send a notification that the operation should be canceled.\nNote that cancellation is advisory and that the operation may still be completed even if it is canceled.</p>\n"
    return:
      type: System.Threading.Tasks.Task{System.Fabric.Health.DeployedServicePackageHealth}
      description: "\n<p>The health of a deployed Service Fabric service package.</p>\n"
  overload: System.Fabric.FabricClient.HealthClient.GetDeployedServicePackageHealthAsync*
  exceptions:
  - type: System.Fabric.FabricObjectClosedException
    commentId: T:System.Fabric.FabricObjectClosedException
    description: "\n<p>The <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object is in a closed state. Dispose of the <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref>\nobject you are using and instantiate a new <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>Returned when a null reference is passed to a method that does not accept it as a valid argument.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>Caused by one of the following:</p>\n<p>E_INVALIDARG is returned when one or more arguments are not valid.</p>\n"
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: "\n<p>Caused by one of the following:</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.OperationTimedOut\" data-throw-if-not-resolved=\"false\"></xref> is returned when the operation takes more than the user provided <em>timeout</em> to complete.</p>\n"
  - type: System.Fabric.FabricException
    commentId: T:System.Fabric.FabricException
    description: "\n<p>Caused by one of the following:</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.FabricHealthEntityNotFound\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidNameUri\" data-throw-if-not-resolved=\"false\"></xref> is returned when <em>applicationName</em> is not a valid Service Fabric Name.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.CommunicationError\" data-throw-if-not-resolved=\"false\"></xref> is returned when a communication error caused the operation to fail.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidCredentialType\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509FindType\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509StoreLocation\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509StoreName\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509Thumbprint\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidProtectionLevel\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509Store\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidSubjectName\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  - type: System.Fabric.FabricTransientException
    commentId: T:System.Fabric.FabricTransientException
    description: "\n<p>Caused by one of the following:</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.ServiceTooBusy\" data-throw-if-not-resolved=\"false\"></xref> is returned when the service is too busy to process the operation.</p>\n"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>Caused by one of the following:</p>\n<p>E_ACCESSDENIED is returned when the access check has failed for this operation.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.HealthClient.GetDeployedServicePackageHealthAsync(System.Uri,System.String,System.String,System.Fabric.Health.ApplicationHealthPolicy,System.TimeSpan,System.Threading.CancellationToken)
  commentId: M:System.Fabric.FabricClient.HealthClient.GetDeployedServicePackageHealthAsync(System.Uri,System.String,System.String,System.Fabric.Health.ApplicationHealthPolicy,System.TimeSpan,System.Threading.CancellationToken)
  id: GetDeployedServicePackageHealthAsync(System.Uri,System.String,System.String,System.Fabric.Health.ApplicationHealthPolicy,System.TimeSpan,System.Threading.CancellationToken)
  parent: System.Fabric.FabricClient.HealthClient
  langs:
  - csharp
  - vb
  name: GetDeployedServicePackageHealthAsync(Uri, String, String, ApplicationHealthPolicy, TimeSpan, CancellationToken)
  nameWithType: FabricClient.HealthClient.GetDeployedServicePackageHealthAsync(Uri, String, String, ApplicationHealthPolicy, TimeSpan, CancellationToken)
  fullName: System.Fabric.FabricClient.HealthClient.GetDeployedServicePackageHealthAsync(System.Uri, System.String, System.String, System.Fabric.Health.ApplicationHealthPolicy, System.TimeSpan, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.HealthClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: GetDeployedServicePackageHealthAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.HealthClient.cs
    startLine: 4028
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Asynchronously gets the health of a deployed Service Fabric service package by using the specified timeout and cancellation token.</p>\n"
  example: []
  syntax:
    content: public Task<DeployedServicePackageHealth> GetDeployedServicePackageHealthAsync(Uri applicationName, string serviceManifestName, string nodeName, ApplicationHealthPolicy healthPolicy, TimeSpan timeout, CancellationToken cancellationToken)
    content.vb: Public Function GetDeployedServicePackageHealthAsync(applicationName As Uri, serviceManifestName As String, nodeName As String, healthPolicy As ApplicationHealthPolicy, timeout As TimeSpan, cancellationToken As CancellationToken) As Task(Of DeployedServicePackageHealth)
    parameters:
    - id: applicationName
      type: System.Uri
      description: "\n<p>The URI of the Service Fabric application.</p>\n"
    - id: serviceManifestName
      type: System.String
      description: "\n<p>The name of the service manifest file for this Service Fabric service.</p>\n"
    - id: nodeName
      type: System.String
      description: "\n<p>The name of the node that the Service Fabric service was deployed to.</p>\n"
    - id: healthPolicy
      type: System.Fabric.Health.ApplicationHealthPolicy
      description: The application health policy used to evaluate entity health.
    - id: timeout
      type: System.TimeSpan
      description: "\n<p>The maximum amount of time Service Fabric will allow this operation to continue before returning a <xref href=\"System.TimeoutException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The optional cancellation token that the operation is observing. It can be used to send a notification that the operation should be canceled.\nNote that cancellation is advisory and that the operation may still be completed even if it is canceled.</p>\n"
    return:
      type: System.Threading.Tasks.Task{System.Fabric.Health.DeployedServicePackageHealth}
      description: "\n<p>The health of a deployed Service Fabric service package.</p>\n"
  overload: System.Fabric.FabricClient.HealthClient.GetDeployedServicePackageHealthAsync*
  exceptions:
  - type: System.Fabric.FabricObjectClosedException
    commentId: T:System.Fabric.FabricObjectClosedException
    description: "\n<p>The <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object is in a closed state. Dispose of the <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref>\nobject you are using and instantiate a new <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>Returned when a null reference is passed to a method that does not accept it as a valid argument.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>Caused by one of the following:</p>\n<p>E_INVALIDARG is returned when one or more arguments are not valid.</p>\n"
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: "\n<p>Caused by one of the following:</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.OperationTimedOut\" data-throw-if-not-resolved=\"false\"></xref> is returned when the operation takes more than the user provided <em>timeout</em> to complete.</p>\n"
  - type: System.Fabric.FabricException
    commentId: T:System.Fabric.FabricException
    description: "\n<p>Caused by one of the following:</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.FabricHealthEntityNotFound\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidNameUri\" data-throw-if-not-resolved=\"false\"></xref> is returned when <em>applicationName</em> is not a valid Service Fabric Name.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.CommunicationError\" data-throw-if-not-resolved=\"false\"></xref> is returned when a communication error caused the operation to fail.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidCredentialType\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509FindType\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509StoreLocation\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509StoreName\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509Thumbprint\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidProtectionLevel\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509Store\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidSubjectName\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  - type: System.Fabric.FabricTransientException
    commentId: T:System.Fabric.FabricTransientException
    description: "\n<p>Caused by one of the following:</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.ServiceTooBusy\" data-throw-if-not-resolved=\"false\"></xref> is returned when the service is too busy to process the operation.</p>\n"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>Caused by one of the following:</p>\n<p>E_ACCESSDENIED is returned when the access check has failed for this operation.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.HealthClient.GetDeployedServicePackageHealthAsync(System.Fabric.Description.DeployedServicePackageHealthQueryDescription)
  commentId: M:System.Fabric.FabricClient.HealthClient.GetDeployedServicePackageHealthAsync(System.Fabric.Description.DeployedServicePackageHealthQueryDescription)
  id: GetDeployedServicePackageHealthAsync(System.Fabric.Description.DeployedServicePackageHealthQueryDescription)
  parent: System.Fabric.FabricClient.HealthClient
  langs:
  - csharp
  - vb
  name: GetDeployedServicePackageHealthAsync(DeployedServicePackageHealthQueryDescription)
  nameWithType: FabricClient.HealthClient.GetDeployedServicePackageHealthAsync(DeployedServicePackageHealthQueryDescription)
  fullName: System.Fabric.FabricClient.HealthClient.GetDeployedServicePackageHealthAsync(System.Fabric.Description.DeployedServicePackageHealthQueryDescription)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.HealthClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: GetDeployedServicePackageHealthAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.HealthClient.cs
    startLine: 4094
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Asynchronously gets the health of a deployed Service Fabric service package by using the specified timeout and cancellation token.</p>\n"
  example: []
  syntax:
    content: public Task<DeployedServicePackageHealth> GetDeployedServicePackageHealthAsync(DeployedServicePackageHealthQueryDescription queryDescription)
    content.vb: Public Function GetDeployedServicePackageHealthAsync(queryDescription As DeployedServicePackageHealthQueryDescription) As Task(Of DeployedServicePackageHealth)
    parameters:
    - id: queryDescription
      type: System.Fabric.Description.DeployedServicePackageHealthQueryDescription
      description: The query description.
    return:
      type: System.Threading.Tasks.Task{System.Fabric.Health.DeployedServicePackageHealth}
      description: "\n<p>The health of a deployed Service Fabric service package.</p>\n"
  overload: System.Fabric.FabricClient.HealthClient.GetDeployedServicePackageHealthAsync*
  exceptions:
  - type: System.Fabric.FabricObjectClosedException
    commentId: T:System.Fabric.FabricObjectClosedException
    description: "\n<p>The <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object is in a closed state. Dispose of the <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref>\nobject you are using and instantiate a new <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>Returned when a null reference is passed to a method that does not accept it as a valid argument.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>Caused by one of the following:</p>\n<p>E_INVALIDARG is returned when one or more arguments are not valid.</p>\n"
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: "\n<p>Caused by one of the following:</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.OperationTimedOut\" data-throw-if-not-resolved=\"false\"></xref> is returned when the operation takes more than MaxOperationTimeout to complete.</p>\n"
  - type: System.Fabric.FabricException
    commentId: T:System.Fabric.FabricException
    description: "\n<p>Caused by one of the following:</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.FabricHealthEntityNotFound\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidNameUri\" data-throw-if-not-resolved=\"false\"></xref> is returned when <xref href=\"System.Fabric.Description.DeployedServicePackageHealthQueryDescription.ApplicationName\" data-throw-if-not-resolved=\"false\"></xref> \nis not a valid Service Fabric Name.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.CommunicationError\" data-throw-if-not-resolved=\"false\"></xref> is returned when a communication error caused the operation to fail.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidCredentialType\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509FindType\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509StoreLocation\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509StoreName\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509Thumbprint\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidProtectionLevel\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509Store\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidSubjectName\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  - type: System.Fabric.FabricTransientException
    commentId: T:System.Fabric.FabricTransientException
    description: "\n<p>Caused by one of the following:</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.ServiceTooBusy\" data-throw-if-not-resolved=\"false\"></xref> is returned when the service is too busy to process the operation.</p>\n"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>Caused by one of the following:</p>\n<p>E_ACCESSDENIED is returned when the access check has failed for this operation.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.HealthClient.GetDeployedServicePackageHealthAsync(System.Fabric.Description.DeployedServicePackageHealthQueryDescription,System.TimeSpan,System.Threading.CancellationToken)
  commentId: M:System.Fabric.FabricClient.HealthClient.GetDeployedServicePackageHealthAsync(System.Fabric.Description.DeployedServicePackageHealthQueryDescription,System.TimeSpan,System.Threading.CancellationToken)
  id: GetDeployedServicePackageHealthAsync(System.Fabric.Description.DeployedServicePackageHealthQueryDescription,System.TimeSpan,System.Threading.CancellationToken)
  parent: System.Fabric.FabricClient.HealthClient
  langs:
  - csharp
  - vb
  name: GetDeployedServicePackageHealthAsync(DeployedServicePackageHealthQueryDescription, TimeSpan, CancellationToken)
  nameWithType: FabricClient.HealthClient.GetDeployedServicePackageHealthAsync(DeployedServicePackageHealthQueryDescription, TimeSpan, CancellationToken)
  fullName: System.Fabric.FabricClient.HealthClient.GetDeployedServicePackageHealthAsync(System.Fabric.Description.DeployedServicePackageHealthQueryDescription, System.TimeSpan, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.HealthClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: GetDeployedServicePackageHealthAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.HealthClient.cs
    startLine: 4167
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Asynchronously gets the health of a deployed Service Fabric service package by using the specified timeout and cancellation token.</p>\n"
  example: []
  syntax:
    content: public Task<DeployedServicePackageHealth> GetDeployedServicePackageHealthAsync(DeployedServicePackageHealthQueryDescription queryDescription, TimeSpan timeout, CancellationToken cancellationToken)
    content.vb: Public Function GetDeployedServicePackageHealthAsync(queryDescription As DeployedServicePackageHealthQueryDescription, timeout As TimeSpan, cancellationToken As CancellationToken) As Task(Of DeployedServicePackageHealth)
    parameters:
    - id: queryDescription
      type: System.Fabric.Description.DeployedServicePackageHealthQueryDescription
      description: The query description.
    - id: timeout
      type: System.TimeSpan
      description: "\n<p>The maximum amount of time Service Fabric will allow this operation to continue before returning a <xref href=\"System.TimeoutException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The optional cancellation token that the operation is observing. It can be used to send a notification that the operation should be canceled.\nNote that cancellation is advisory and that the operation may still be completed even if it is canceled.</p>\n"
    return:
      type: System.Threading.Tasks.Task{System.Fabric.Health.DeployedServicePackageHealth}
      description: "\n<p>The health of a deployed Service Fabric service package.</p>\n"
  overload: System.Fabric.FabricClient.HealthClient.GetDeployedServicePackageHealthAsync*
  exceptions:
  - type: System.Fabric.FabricObjectClosedException
    commentId: T:System.Fabric.FabricObjectClosedException
    description: "\n<p>The <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object is in a closed state. Dispose of the <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref>\nobject you are using and instantiate a new <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>Returned when a null reference is passed to a method that does not accept it as a valid argument.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>Caused by one of the following:</p>\n<p>E_INVALIDARG is returned when one or more arguments are not valid.</p>\n"
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: "\n<p>Caused by one of the following:</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.OperationTimedOut\" data-throw-if-not-resolved=\"false\"></xref> is returned when the operation takes more than the user provided <em>timeout</em> to complete.</p>\n"
  - type: System.Fabric.FabricException
    commentId: T:System.Fabric.FabricException
    description: "\n<p>Caused by one of the following:</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.FabricHealthEntityNotFound\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidNameUri\" data-throw-if-not-resolved=\"false\"></xref> is returned when <xref href=\"System.Fabric.Description.DeployedServicePackageHealthQueryDescription.ApplicationName\" data-throw-if-not-resolved=\"false\"></xref> \nis not a valid Service Fabric Name.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.CommunicationError\" data-throw-if-not-resolved=\"false\"></xref> is returned when a communication error caused the operation to fail.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidCredentialType\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509FindType\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509StoreLocation\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509StoreName\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509Thumbprint\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidProtectionLevel\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidX509Store\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidSubjectName\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  - type: System.Fabric.FabricTransientException
    commentId: T:System.Fabric.FabricTransientException
    description: "\n<p>Caused by one of the following:</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.ServiceTooBusy\" data-throw-if-not-resolved=\"false\"></xref> is returned when the service is too busy to process the operation.</p>\n"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>Caused by one of the following:</p>\n<p>E_ACCESSDENIED is returned when the access check has failed for this operation.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.HealthClient.GetClusterHealthChunkAsync
  commentId: M:System.Fabric.FabricClient.HealthClient.GetClusterHealthChunkAsync
  id: GetClusterHealthChunkAsync
  parent: System.Fabric.FabricClient.HealthClient
  langs:
  - csharp
  - vb
  name: GetClusterHealthChunkAsync()
  nameWithType: FabricClient.HealthClient.GetClusterHealthChunkAsync()
  fullName: System.Fabric.FabricClient.HealthClient.GetClusterHealthChunkAsync()
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.HealthClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: GetClusterHealthChunkAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.HealthClient.cs
    startLine: 4178
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\nGets the health of a Service Fabric cluster.\n"
  remarks: The cluster aggregated health state is computed based on all entities in the cluster. No children are included in the results, because no filters are specified.
  example: []
  syntax:
    content: public Task<ClusterHealthChunk> GetClusterHealthChunkAsync()
    content.vb: Public Function GetClusterHealthChunkAsync As Task(Of ClusterHealthChunk)
    return:
      type: System.Threading.Tasks.Task{System.Fabric.Health.ClusterHealthChunk}
      description: The health chunk representing the cluster health.
  overload: System.Fabric.FabricClient.HealthClient.GetClusterHealthChunkAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.HealthClient.GetClusterHealthChunkAsync(System.TimeSpan,System.Threading.CancellationToken)
  commentId: M:System.Fabric.FabricClient.HealthClient.GetClusterHealthChunkAsync(System.TimeSpan,System.Threading.CancellationToken)
  id: GetClusterHealthChunkAsync(System.TimeSpan,System.Threading.CancellationToken)
  parent: System.Fabric.FabricClient.HealthClient
  langs:
  - csharp
  - vb
  name: GetClusterHealthChunkAsync(TimeSpan, CancellationToken)
  nameWithType: FabricClient.HealthClient.GetClusterHealthChunkAsync(TimeSpan, CancellationToken)
  fullName: System.Fabric.FabricClient.HealthClient.GetClusterHealthChunkAsync(System.TimeSpan, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.HealthClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: GetClusterHealthChunkAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.HealthClient.cs
    startLine: 4191
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\nGets the health of a Service Fabric cluster.\n"
  remarks: The cluster aggregated health state is computed based on all entities in the cluster. No children are included in the results, because no filters are specified.
  example: []
  syntax:
    content: public Task<ClusterHealthChunk> GetClusterHealthChunkAsync(TimeSpan timeout, CancellationToken cancellationToken)
    content.vb: Public Function GetClusterHealthChunkAsync(timeout As TimeSpan, cancellationToken As CancellationToken) As Task(Of ClusterHealthChunk)
    parameters:
    - id: timeout
      type: System.TimeSpan
      description: The maximum amount of time Service Fabric will allow this operation to continue before returning a <xref href="System.TimeoutException" data-throw-if-not-resolved="false"></xref>.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The optional cancellation token that the operation is observing. It can be used to send a notification that the operation should be canceled. Note that cancellation is advisory and that the operation may still be completed even if it is canceled.
    return:
      type: System.Threading.Tasks.Task{System.Fabric.Health.ClusterHealthChunk}
      description: The health chunk representing the cluster health.
  overload: System.Fabric.FabricClient.HealthClient.GetClusterHealthChunkAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.HealthClient.GetClusterHealthChunkAsync(System.Fabric.Description.ClusterHealthChunkQueryDescription)
  commentId: M:System.Fabric.FabricClient.HealthClient.GetClusterHealthChunkAsync(System.Fabric.Description.ClusterHealthChunkQueryDescription)
  id: GetClusterHealthChunkAsync(System.Fabric.Description.ClusterHealthChunkQueryDescription)
  parent: System.Fabric.FabricClient.HealthClient
  langs:
  - csharp
  - vb
  name: GetClusterHealthChunkAsync(ClusterHealthChunkQueryDescription)
  nameWithType: FabricClient.HealthClient.GetClusterHealthChunkAsync(ClusterHealthChunkQueryDescription)
  fullName: System.Fabric.FabricClient.HealthClient.GetClusterHealthChunkAsync(System.Fabric.Description.ClusterHealthChunkQueryDescription)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.HealthClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: GetClusterHealthChunkAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.HealthClient.cs
    startLine: 4203
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\nGets the health of a Service Fabric cluster, including cluster entities as requested in the query description.\n"
  remarks: The cluster aggregated health state is computed based on all entities in the cluster. Only the children that respect the filters from the input query description (if any) are included in the results.
  example: []
  syntax:
    content: public Task<ClusterHealthChunk> GetClusterHealthChunkAsync(ClusterHealthChunkQueryDescription queryDescription)
    content.vb: Public Function GetClusterHealthChunkAsync(queryDescription As ClusterHealthChunkQueryDescription) As Task(Of ClusterHealthChunk)
    parameters:
    - id: queryDescription
      type: System.Fabric.Description.ClusterHealthChunkQueryDescription
      description: The query description that defines how health evaluation should be performed and what entities should be included in the <xref href="System.Fabric.Health.ClusterHealthChunk" data-throw-if-not-resolved="false"></xref>.
    return:
      type: System.Threading.Tasks.Task{System.Fabric.Health.ClusterHealthChunk}
      description: The health chunk representing the cluster health.
  overload: System.Fabric.FabricClient.HealthClient.GetClusterHealthChunkAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.HealthClient.GetClusterHealthChunkAsync(System.Fabric.Description.ClusterHealthChunkQueryDescription,System.TimeSpan,System.Threading.CancellationToken)
  commentId: M:System.Fabric.FabricClient.HealthClient.GetClusterHealthChunkAsync(System.Fabric.Description.ClusterHealthChunkQueryDescription,System.TimeSpan,System.Threading.CancellationToken)
  id: GetClusterHealthChunkAsync(System.Fabric.Description.ClusterHealthChunkQueryDescription,System.TimeSpan,System.Threading.CancellationToken)
  parent: System.Fabric.FabricClient.HealthClient
  langs:
  - csharp
  - vb
  name: GetClusterHealthChunkAsync(ClusterHealthChunkQueryDescription, TimeSpan, CancellationToken)
  nameWithType: FabricClient.HealthClient.GetClusterHealthChunkAsync(ClusterHealthChunkQueryDescription, TimeSpan, CancellationToken)
  fullName: System.Fabric.FabricClient.HealthClient.GetClusterHealthChunkAsync(System.Fabric.Description.ClusterHealthChunkQueryDescription, System.TimeSpan, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.HealthClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: GetClusterHealthChunkAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.HealthClient.cs
    startLine: 4217
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\nGets the health of a Service Fabric cluster, including cluster entities as requested in the query description.\n"
  remarks: The cluster aggregated health state is computed based on all entities in the cluster. Only the children that respect the filters from the input query description (if any) are included in the results.
  example: []
  syntax:
    content: public Task<ClusterHealthChunk> GetClusterHealthChunkAsync(ClusterHealthChunkQueryDescription queryDescription, TimeSpan timeout, CancellationToken cancellationToken)
    content.vb: Public Function GetClusterHealthChunkAsync(queryDescription As ClusterHealthChunkQueryDescription, timeout As TimeSpan, cancellationToken As CancellationToken) As Task(Of ClusterHealthChunk)
    parameters:
    - id: queryDescription
      type: System.Fabric.Description.ClusterHealthChunkQueryDescription
      description: The query description that defines how health evaluation should be performed and what entities should be included in the <xref href="System.Fabric.Health.ClusterHealthChunk" data-throw-if-not-resolved="false"></xref>.
    - id: timeout
      type: System.TimeSpan
      description: The maximum amount of time Service Fabric will allow this operation to continue before returning a <xref href="System.TimeoutException" data-throw-if-not-resolved="false"></xref>.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The optional cancellation token that the operation is observing. It can be used to send a notification that the operation should be canceled. Note that cancellation is advisory and that the operation may still be completed even if it is canceled.
    return:
      type: System.Threading.Tasks.Task{System.Fabric.Health.ClusterHealthChunk}
      description: The health chunk representing the cluster health.
  overload: System.Fabric.FabricClient.HealthClient.GetClusterHealthChunkAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: System.Fabric
  commentId: N:System.Fabric
  isExternal: false
  name: System.Fabric
  nameWithType: System.Fabric
  fullName: System.Fabric
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.FabricClient.HealthClient.System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
  commentId: M:System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  parent: System.Fabric.Messaging.Stream.ByteArraySerializer
  definition: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  name: Serialize<FabricClient.HealthClient>()
  nameWithType: ByteArraySerializer.Serialize<FabricClient.HealthClient>()
  fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<System.Fabric.FabricClient.HealthClient>()
  nameWithType.vb: ByteArraySerializer.Serialize(Of FabricClient.HealthClient)()
  fullname.vb: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of System.Fabric.FabricClient.HealthClient)()
  name.vb: Serialize(Of FabricClient.HealthClient)()
  spec.csharp:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
    name: Serialize<FabricClient.HealthClient>
    nameWithType: ByteArraySerializer.Serialize<FabricClient.HealthClient>
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<System.Fabric.FabricClient.HealthClient>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
    name: Serialize(Of FabricClient.HealthClient)
    nameWithType: ByteArraySerializer.Serialize(Of FabricClient.HealthClient)
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of System.Fabric.FabricClient.HealthClient)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  commentId: M:System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  isExternal: false
  name: Serialize<T>(T)
  nameWithType: ByteArraySerializer.Serialize<T>(T)
  fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<T>(T)
  nameWithType.vb: ByteArraySerializer.Serialize(Of T)(T)
  fullname.vb: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of T)(T)
  name.vb: Serialize(Of T)(T)
  spec.csharp:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
    name: Serialize<T>
    nameWithType: ByteArraySerializer.Serialize<T>
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
    name: Serialize(Of T)
    nameWithType: ByteArraySerializer.Serialize(Of T)
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.Messaging.Stream.ByteArraySerializer
  commentId: T:System.Fabric.Messaging.Stream.ByteArraySerializer
  parent: System.Fabric.Messaging.Stream
  isExternal: false
  name: ByteArraySerializer
  nameWithType: ByteArraySerializer
  fullName: System.Fabric.Messaging.Stream.ByteArraySerializer
- uid: System.Fabric.Messaging.Stream
  commentId: N:System.Fabric.Messaging.Stream
  isExternal: false
  name: System.Fabric.Messaging.Stream
  nameWithType: System.Fabric.Messaging.Stream
  fullName: System.Fabric.Messaging.Stream
- uid: System.Fabric.FabricClient
  commentId: T:System.Fabric.FabricClient
  parent: System.Fabric
  isExternal: false
  name: FabricClient
  nameWithType: FabricClient
  fullName: System.Fabric.FabricClient
- uid: System.Fabric.FabricErrorCode.FabricHealthStaleReport
  commentId: F:System.Fabric.FabricErrorCode.FabricHealthStaleReport
- uid: System.Fabric.FabricErrorCode.FabricHealthMaxReportsReached
  commentId: F:System.Fabric.FabricErrorCode.FabricHealthMaxReportsReached
- uid: System.Fabric.FabricErrorCode.InvalidCredentialType
  commentId: F:System.Fabric.FabricErrorCode.InvalidCredentialType
- uid: System.Fabric.FabricErrorCode.InvalidX509FindType
  commentId: F:System.Fabric.FabricErrorCode.InvalidX509FindType
- uid: System.Fabric.FabricErrorCode.InvalidX509StoreLocation
  commentId: F:System.Fabric.FabricErrorCode.InvalidX509StoreLocation
- uid: System.Fabric.FabricErrorCode.InvalidX509StoreName
  commentId: F:System.Fabric.FabricErrorCode.InvalidX509StoreName
- uid: System.Fabric.FabricErrorCode.InvalidX509Thumbprint
  commentId: F:System.Fabric.FabricErrorCode.InvalidX509Thumbprint
- uid: System.Fabric.FabricErrorCode.InvalidProtectionLevel
  commentId: F:System.Fabric.FabricErrorCode.InvalidProtectionLevel
- uid: System.Fabric.FabricErrorCode.InvalidX509Store
  commentId: F:System.Fabric.FabricErrorCode.InvalidX509Store
- uid: System.Fabric.FabricErrorCode.InvalidSubjectName
  commentId: F:System.Fabric.FabricErrorCode.InvalidSubjectName
- uid: System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList
  commentId: F:System.Fabric.FabricErrorCode.InvalidAllowedCommonNameList
- uid: System.Fabric.FabricErrorCode.ServiceTooBusy
  commentId: F:System.Fabric.FabricErrorCode.ServiceTooBusy
- uid: System.Fabric.FabricClient.HealthClient.ReportHealth*
  commentId: Overload:System.Fabric.FabricClient.HealthClient.ReportHealth
  isExternal: false
  name: ReportHealth
  nameWithType: FabricClient.HealthClient.ReportHealth
  fullName: System.Fabric.FabricClient.HealthClient.ReportHealth
- uid: System.Fabric.FabricObjectClosedException
  commentId: T:System.Fabric.FabricObjectClosedException
  isExternal: false
  name: FabricObjectClosedException
  nameWithType: FabricObjectClosedException
  fullName: System.Fabric.FabricObjectClosedException
- uid: System.ArgumentNullException
  commentId: T:System.ArgumentNullException
- uid: System.Fabric.FabricException
  commentId: T:System.Fabric.FabricException
  parent: System.Fabric
  isExternal: false
  name: FabricException
  nameWithType: FabricException
  fullName: System.Fabric.FabricException
- uid: System.Fabric.FabricTransientException
  commentId: T:System.Fabric.FabricTransientException
  parent: System.Fabric
  isExternal: false
  name: FabricTransientException
  nameWithType: FabricTransientException
  fullName: System.Fabric.FabricTransientException
- uid: System.UnauthorizedAccessException
  commentId: T:System.UnauthorizedAccessException
- uid: System.Fabric.Health.HealthReport
  commentId: T:System.Fabric.Health.HealthReport
  parent: System.Fabric.Health
  isExternal: false
  name: HealthReport
  nameWithType: HealthReport
  fullName: System.Fabric.Health.HealthReport
- uid: System.Fabric.Health
  commentId: N:System.Fabric.Health
  isExternal: false
  name: System.Fabric.Health
  nameWithType: System.Fabric.Health
  fullName: System.Fabric.Health
- uid: System.Fabric.FabricErrorCode.OperationTimedOut
  commentId: F:System.Fabric.FabricErrorCode.OperationTimedOut
- uid: System.Fabric.FabricErrorCode.FabricHealthEntityNotFound
  commentId: F:System.Fabric.FabricErrorCode.FabricHealthEntityNotFound
- uid: System.Fabric.FabricErrorCode.CommunicationError
  commentId: F:System.Fabric.FabricErrorCode.CommunicationError
- uid: System.Fabric.FabricClient.HealthClient.GetClusterHealthAsync*
  commentId: Overload:System.Fabric.FabricClient.HealthClient.GetClusterHealthAsync
  isExternal: false
  name: GetClusterHealthAsync
  nameWithType: FabricClient.HealthClient.GetClusterHealthAsync
  fullName: System.Fabric.FabricClient.HealthClient.GetClusterHealthAsync
- uid: System.ArgumentException
  commentId: T:System.ArgumentException
- uid: System.TimeoutException
  commentId: T:System.TimeoutException
- uid: System.Threading.Tasks.Task{System.Fabric.Health.ClusterHealth}
  commentId: T:System.Threading.Tasks.Task{System.Fabric.Health.ClusterHealth}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<ClusterHealth>
  nameWithType: Task<ClusterHealth>
  fullName: System.Threading.Tasks.Task<System.Fabric.Health.ClusterHealth>
  nameWithType.vb: Task(Of ClusterHealth)
  fullname.vb: System.Threading.Tasks.Task(Of System.Fabric.Health.ClusterHealth)
  name.vb: Task(Of ClusterHealth)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Fabric.Health.ClusterHealth
    name: ClusterHealth
    nameWithType: ClusterHealth
    fullName: System.Fabric.Health.ClusterHealth
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Fabric.Health.ClusterHealth
    name: ClusterHealth
    nameWithType: ClusterHealth
    fullName: System.Fabric.Health.ClusterHealth
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullname.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: System.Fabric.Health.ClusterHealthPolicy
  commentId: T:System.Fabric.Health.ClusterHealthPolicy
  parent: System.Fabric.Health
  isExternal: false
  name: ClusterHealthPolicy
  nameWithType: ClusterHealthPolicy
  fullName: System.Fabric.Health.ClusterHealthPolicy
- uid: System.TimeSpan
  commentId: T:System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: false
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
- uid: System.Fabric.Description.ClusterHealthQueryDescription
  commentId: T:System.Fabric.Description.ClusterHealthQueryDescription
  parent: System.Fabric.Description
  isExternal: false
  name: ClusterHealthQueryDescription
  nameWithType: ClusterHealthQueryDescription
  fullName: System.Fabric.Description.ClusterHealthQueryDescription
- uid: System.Fabric.Description
  commentId: N:System.Fabric.Description
  isExternal: false
  name: System.Fabric.Description
  nameWithType: System.Fabric.Description
  fullName: System.Fabric.Description
- uid: System.Fabric.FabricClient.HealthClient.GetNodeHealthAsync*
  commentId: Overload:System.Fabric.FabricClient.HealthClient.GetNodeHealthAsync
  isExternal: false
  name: GetNodeHealthAsync
  nameWithType: FabricClient.HealthClient.GetNodeHealthAsync
  fullName: System.Fabric.FabricClient.HealthClient.GetNodeHealthAsync
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Threading.Tasks.Task{System.Fabric.Health.NodeHealth}
  commentId: T:System.Threading.Tasks.Task{System.Fabric.Health.NodeHealth}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<NodeHealth>
  nameWithType: Task<NodeHealth>
  fullName: System.Threading.Tasks.Task<System.Fabric.Health.NodeHealth>
  nameWithType.vb: Task(Of NodeHealth)
  fullname.vb: System.Threading.Tasks.Task(Of System.Fabric.Health.NodeHealth)
  name.vb: Task(Of NodeHealth)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Fabric.Health.NodeHealth
    name: NodeHealth
    nameWithType: NodeHealth
    fullName: System.Fabric.Health.NodeHealth
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Fabric.Health.NodeHealth
    name: NodeHealth
    nameWithType: NodeHealth
    fullName: System.Fabric.Health.NodeHealth
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.Description.NodeHealthQueryDescription
  commentId: T:System.Fabric.Description.NodeHealthQueryDescription
  parent: System.Fabric.Description
  isExternal: false
  name: NodeHealthQueryDescription
  nameWithType: NodeHealthQueryDescription
  fullName: System.Fabric.Description.NodeHealthQueryDescription
- uid: System.Fabric.FabricErrorCode.InvalidNameUri
  commentId: F:System.Fabric.FabricErrorCode.InvalidNameUri
- uid: System.Fabric.FabricClient.HealthClient.GetApplicationHealthAsync*
  commentId: Overload:System.Fabric.FabricClient.HealthClient.GetApplicationHealthAsync
  isExternal: false
  name: GetApplicationHealthAsync
  nameWithType: FabricClient.HealthClient.GetApplicationHealthAsync
  fullName: System.Fabric.FabricClient.HealthClient.GetApplicationHealthAsync
- uid: System.Uri
  commentId: T:System.Uri
  parent: System
  isExternal: true
  name: Uri
  nameWithType: Uri
  fullName: System.Uri
- uid: System.Threading.Tasks.Task{System.Fabric.Health.ApplicationHealth}
  commentId: T:System.Threading.Tasks.Task{System.Fabric.Health.ApplicationHealth}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<ApplicationHealth>
  nameWithType: Task<ApplicationHealth>
  fullName: System.Threading.Tasks.Task<System.Fabric.Health.ApplicationHealth>
  nameWithType.vb: Task(Of ApplicationHealth)
  fullname.vb: System.Threading.Tasks.Task(Of System.Fabric.Health.ApplicationHealth)
  name.vb: Task(Of ApplicationHealth)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Fabric.Health.ApplicationHealth
    name: ApplicationHealth
    nameWithType: ApplicationHealth
    fullName: System.Fabric.Health.ApplicationHealth
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Fabric.Health.ApplicationHealth
    name: ApplicationHealth
    nameWithType: ApplicationHealth
    fullName: System.Fabric.Health.ApplicationHealth
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.Health.ApplicationHealthPolicy
  commentId: T:System.Fabric.Health.ApplicationHealthPolicy
  parent: System.Fabric.Health
  isExternal: false
  name: ApplicationHealthPolicy
  nameWithType: ApplicationHealthPolicy
  fullName: System.Fabric.Health.ApplicationHealthPolicy
- uid: System.Fabric.Description.ApplicationHealthQueryDescription.ApplicationName
  commentId: P:System.Fabric.Description.ApplicationHealthQueryDescription.ApplicationName
- uid: System.Fabric.Description.ApplicationHealthQueryDescription
  commentId: T:System.Fabric.Description.ApplicationHealthQueryDescription
  parent: System.Fabric.Description
  isExternal: false
  name: ApplicationHealthQueryDescription
  nameWithType: ApplicationHealthQueryDescription
  fullName: System.Fabric.Description.ApplicationHealthQueryDescription
- uid: System.Fabric.FabricClient.HealthClient.GetServiceHealthAsync*
  commentId: Overload:System.Fabric.FabricClient.HealthClient.GetServiceHealthAsync
  isExternal: false
  name: GetServiceHealthAsync
  nameWithType: FabricClient.HealthClient.GetServiceHealthAsync
  fullName: System.Fabric.FabricClient.HealthClient.GetServiceHealthAsync
- uid: System.Threading.Tasks.Task{System.Fabric.Health.ServiceHealth}
  commentId: T:System.Threading.Tasks.Task{System.Fabric.Health.ServiceHealth}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<ServiceHealth>
  nameWithType: Task<ServiceHealth>
  fullName: System.Threading.Tasks.Task<System.Fabric.Health.ServiceHealth>
  nameWithType.vb: Task(Of ServiceHealth)
  fullname.vb: System.Threading.Tasks.Task(Of System.Fabric.Health.ServiceHealth)
  name.vb: Task(Of ServiceHealth)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Fabric.Health.ServiceHealth
    name: ServiceHealth
    nameWithType: ServiceHealth
    fullName: System.Fabric.Health.ServiceHealth
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Fabric.Health.ServiceHealth
    name: ServiceHealth
    nameWithType: ServiceHealth
    fullName: System.Fabric.Health.ServiceHealth
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.Description.ServiceHealthQueryDescription.ServiceName
  commentId: P:System.Fabric.Description.ServiceHealthQueryDescription.ServiceName
- uid: System.Fabric.Description.ServiceHealthQueryDescription
  commentId: T:System.Fabric.Description.ServiceHealthQueryDescription
  parent: System.Fabric.Description
  isExternal: false
  name: ServiceHealthQueryDescription
  nameWithType: ServiceHealthQueryDescription
  fullName: System.Fabric.Description.ServiceHealthQueryDescription
- uid: System.Fabric.FabricClient.HealthClient.GetPartitionHealthAsync*
  commentId: Overload:System.Fabric.FabricClient.HealthClient.GetPartitionHealthAsync
  isExternal: false
  name: GetPartitionHealthAsync
  nameWithType: FabricClient.HealthClient.GetPartitionHealthAsync
  fullName: System.Fabric.FabricClient.HealthClient.GetPartitionHealthAsync
- uid: System.Guid
  commentId: T:System.Guid
  parent: System
  isExternal: true
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: System.Threading.Tasks.Task{System.Fabric.Health.PartitionHealth}
  commentId: T:System.Threading.Tasks.Task{System.Fabric.Health.PartitionHealth}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<PartitionHealth>
  nameWithType: Task<PartitionHealth>
  fullName: System.Threading.Tasks.Task<System.Fabric.Health.PartitionHealth>
  nameWithType.vb: Task(Of PartitionHealth)
  fullname.vb: System.Threading.Tasks.Task(Of System.Fabric.Health.PartitionHealth)
  name.vb: Task(Of PartitionHealth)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Fabric.Health.PartitionHealth
    name: PartitionHealth
    nameWithType: PartitionHealth
    fullName: System.Fabric.Health.PartitionHealth
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Fabric.Health.PartitionHealth
    name: PartitionHealth
    nameWithType: PartitionHealth
    fullName: System.Fabric.Health.PartitionHealth
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.Description.PartitionHealthQueryDescription
  commentId: T:System.Fabric.Description.PartitionHealthQueryDescription
  parent: System.Fabric.Description
  isExternal: false
  name: PartitionHealthQueryDescription
  nameWithType: PartitionHealthQueryDescription
  fullName: System.Fabric.Description.PartitionHealthQueryDescription
- uid: System.Fabric.FabricClient.HealthClient.GetReplicaHealthAsync*
  commentId: Overload:System.Fabric.FabricClient.HealthClient.GetReplicaHealthAsync
  isExternal: false
  name: GetReplicaHealthAsync
  nameWithType: FabricClient.HealthClient.GetReplicaHealthAsync
  fullName: System.Fabric.FabricClient.HealthClient.GetReplicaHealthAsync
- uid: System.Int64
  commentId: T:System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.Threading.Tasks.Task{System.Fabric.Health.ReplicaHealth}
  commentId: T:System.Threading.Tasks.Task{System.Fabric.Health.ReplicaHealth}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<ReplicaHealth>
  nameWithType: Task<ReplicaHealth>
  fullName: System.Threading.Tasks.Task<System.Fabric.Health.ReplicaHealth>
  nameWithType.vb: Task(Of ReplicaHealth)
  fullname.vb: System.Threading.Tasks.Task(Of System.Fabric.Health.ReplicaHealth)
  name.vb: Task(Of ReplicaHealth)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Fabric.Health.ReplicaHealth
    name: ReplicaHealth
    nameWithType: ReplicaHealth
    fullName: System.Fabric.Health.ReplicaHealth
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Fabric.Health.ReplicaHealth
    name: ReplicaHealth
    nameWithType: ReplicaHealth
    fullName: System.Fabric.Health.ReplicaHealth
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.Description.ReplicaHealthQueryDescription
  commentId: T:System.Fabric.Description.ReplicaHealthQueryDescription
  parent: System.Fabric.Description
  isExternal: false
  name: ReplicaHealthQueryDescription
  nameWithType: ReplicaHealthQueryDescription
  fullName: System.Fabric.Description.ReplicaHealthQueryDescription
- uid: System.Fabric.FabricClient.HealthClient.GetDeployedApplicationHealthAsync*
  commentId: Overload:System.Fabric.FabricClient.HealthClient.GetDeployedApplicationHealthAsync
  isExternal: false
  name: GetDeployedApplicationHealthAsync
  nameWithType: FabricClient.HealthClient.GetDeployedApplicationHealthAsync
  fullName: System.Fabric.FabricClient.HealthClient.GetDeployedApplicationHealthAsync
- uid: System.Threading.Tasks.Task{System.Fabric.Health.DeployedApplicationHealth}
  commentId: T:System.Threading.Tasks.Task{System.Fabric.Health.DeployedApplicationHealth}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<DeployedApplicationHealth>
  nameWithType: Task<DeployedApplicationHealth>
  fullName: System.Threading.Tasks.Task<System.Fabric.Health.DeployedApplicationHealth>
  nameWithType.vb: Task(Of DeployedApplicationHealth)
  fullname.vb: System.Threading.Tasks.Task(Of System.Fabric.Health.DeployedApplicationHealth)
  name.vb: Task(Of DeployedApplicationHealth)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Fabric.Health.DeployedApplicationHealth
    name: DeployedApplicationHealth
    nameWithType: DeployedApplicationHealth
    fullName: System.Fabric.Health.DeployedApplicationHealth
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Fabric.Health.DeployedApplicationHealth
    name: DeployedApplicationHealth
    nameWithType: DeployedApplicationHealth
    fullName: System.Fabric.Health.DeployedApplicationHealth
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.Description.DeployedApplicationHealthQueryDescription.ApplicationName
  commentId: P:System.Fabric.Description.DeployedApplicationHealthQueryDescription.ApplicationName
- uid: System.Fabric.Description.DeployedApplicationHealthQueryDescription
  commentId: T:System.Fabric.Description.DeployedApplicationHealthQueryDescription
  parent: System.Fabric.Description
  isExternal: false
  name: DeployedApplicationHealthQueryDescription
  nameWithType: DeployedApplicationHealthQueryDescription
  fullName: System.Fabric.Description.DeployedApplicationHealthQueryDescription
- uid: System.Fabric.FabricClient.HealthClient.GetDeployedServicePackageHealthAsync*
  commentId: Overload:System.Fabric.FabricClient.HealthClient.GetDeployedServicePackageHealthAsync
  isExternal: false
  name: GetDeployedServicePackageHealthAsync
  nameWithType: FabricClient.HealthClient.GetDeployedServicePackageHealthAsync
  fullName: System.Fabric.FabricClient.HealthClient.GetDeployedServicePackageHealthAsync
- uid: System.Threading.Tasks.Task{System.Fabric.Health.DeployedServicePackageHealth}
  commentId: T:System.Threading.Tasks.Task{System.Fabric.Health.DeployedServicePackageHealth}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<DeployedServicePackageHealth>
  nameWithType: Task<DeployedServicePackageHealth>
  fullName: System.Threading.Tasks.Task<System.Fabric.Health.DeployedServicePackageHealth>
  nameWithType.vb: Task(Of DeployedServicePackageHealth)
  fullname.vb: System.Threading.Tasks.Task(Of System.Fabric.Health.DeployedServicePackageHealth)
  name.vb: Task(Of DeployedServicePackageHealth)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Fabric.Health.DeployedServicePackageHealth
    name: DeployedServicePackageHealth
    nameWithType: DeployedServicePackageHealth
    fullName: System.Fabric.Health.DeployedServicePackageHealth
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Fabric.Health.DeployedServicePackageHealth
    name: DeployedServicePackageHealth
    nameWithType: DeployedServicePackageHealth
    fullName: System.Fabric.Health.DeployedServicePackageHealth
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.Description.DeployedServicePackageHealthQueryDescription.ApplicationName
  commentId: P:System.Fabric.Description.DeployedServicePackageHealthQueryDescription.ApplicationName
- uid: System.Fabric.Description.DeployedServicePackageHealthQueryDescription
  commentId: T:System.Fabric.Description.DeployedServicePackageHealthQueryDescription
  parent: System.Fabric.Description
  isExternal: false
  name: DeployedServicePackageHealthQueryDescription
  nameWithType: DeployedServicePackageHealthQueryDescription
  fullName: System.Fabric.Description.DeployedServicePackageHealthQueryDescription
- uid: System.Fabric.FabricClient.HealthClient.GetClusterHealthChunkAsync*
  commentId: Overload:System.Fabric.FabricClient.HealthClient.GetClusterHealthChunkAsync
  isExternal: false
  name: GetClusterHealthChunkAsync
  nameWithType: FabricClient.HealthClient.GetClusterHealthChunkAsync
  fullName: System.Fabric.FabricClient.HealthClient.GetClusterHealthChunkAsync
- uid: System.Threading.Tasks.Task{System.Fabric.Health.ClusterHealthChunk}
  commentId: T:System.Threading.Tasks.Task{System.Fabric.Health.ClusterHealthChunk}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<ClusterHealthChunk>
  nameWithType: Task<ClusterHealthChunk>
  fullName: System.Threading.Tasks.Task<System.Fabric.Health.ClusterHealthChunk>
  nameWithType.vb: Task(Of ClusterHealthChunk)
  fullname.vb: System.Threading.Tasks.Task(Of System.Fabric.Health.ClusterHealthChunk)
  name.vb: Task(Of ClusterHealthChunk)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Fabric.Health.ClusterHealthChunk
    name: ClusterHealthChunk
    nameWithType: ClusterHealthChunk
    fullName: System.Fabric.Health.ClusterHealthChunk
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Fabric.Health.ClusterHealthChunk
    name: ClusterHealthChunk
    nameWithType: ClusterHealthChunk
    fullName: System.Fabric.Health.ClusterHealthChunk
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.Health.ClusterHealthChunk
  commentId: T:System.Fabric.Health.ClusterHealthChunk
  isExternal: false
  name: ClusterHealthChunk
  nameWithType: ClusterHealthChunk
  fullName: System.Fabric.Health.ClusterHealthChunk
- uid: System.Fabric.Description.ClusterHealthChunkQueryDescription
  commentId: T:System.Fabric.Description.ClusterHealthChunkQueryDescription
  parent: System.Fabric.Description
  isExternal: false
  name: ClusterHealthChunkQueryDescription
  nameWithType: ClusterHealthChunkQueryDescription
  fullName: System.Fabric.Description.ClusterHealthChunkQueryDescription
