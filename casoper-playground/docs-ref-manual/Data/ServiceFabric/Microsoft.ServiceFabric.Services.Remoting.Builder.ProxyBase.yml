### YamlMime:ManagedReference
items:
- uid: Microsoft.ServiceFabric.Services.Remoting.Builder.ProxyBase
  commentId: T:Microsoft.ServiceFabric.Services.Remoting.Builder.ProxyBase
  id: ProxyBase
  parent: Microsoft.ServiceFabric.Services.Remoting.Builder
  children:
  - Microsoft.ServiceFabric.Services.Remoting.Builder.ProxyBase.#ctor
  - Microsoft.ServiceFabric.Services.Remoting.Builder.ProxyBase.ContinueWith(System.Threading.Tasks.Task{System.Object})
  - Microsoft.ServiceFabric.Services.Remoting.Builder.ProxyBase.ContinueWithResult``1(System.Int32,System.Int32,System.Threading.Tasks.Task{System.Object})
  - Microsoft.ServiceFabric.Services.Remoting.Builder.ProxyBase.GetReturnValue(System.Int32,System.Int32,System.Object)
  - Microsoft.ServiceFabric.Services.Remoting.Builder.ProxyBase.Invoke(System.Int32,System.Int32,System.Object)
  - Microsoft.ServiceFabric.Services.Remoting.Builder.ProxyBase.InvokeAsync(System.Int32,System.Int32,System.Object,System.Threading.CancellationToken)
  langs:
  - csharp
  - vb
  name: ProxyBase
  nameWithType: ProxyBase
  fullName: Microsoft.ServiceFabric.Services.Remoting.Builder.ProxyBase
  type: Class
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Services/Remoting/Builder/ProxyBase.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: ProxyBase
    path: src/prod/src/managed/Microsoft.ServiceFabric.Services/Remoting/Builder/ProxyBase.cs
    startLine: 14
  assemblies:
  - Microsoft.ServiceFabric.Services
  namespace: Microsoft.ServiceFabric.Services.Remoting.Builder
  summary: "\nThe base class used by remoting code generator to generate the proxy for the remoted interfaces.\n"
  example: []
  syntax:
    content: public abstract class ProxyBase
    content.vb: Public MustInherit Class ProxyBase
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  extensionMethods:
  - Microsoft.ServiceFabric.Services.Remoting.Builder.ProxyBase.System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: Microsoft.ServiceFabric.Services.Remoting.Builder.ProxyBase.#ctor
  commentId: M:Microsoft.ServiceFabric.Services.Remoting.Builder.ProxyBase.#ctor
  id: '#ctor'
  parent: Microsoft.ServiceFabric.Services.Remoting.Builder.ProxyBase
  langs:
  - csharp
  - vb
  name: ProxyBase()
  nameWithType: ProxyBase.ProxyBase()
  fullName: Microsoft.ServiceFabric.Services.Remoting.Builder.ProxyBase.ProxyBase()
  type: Constructor
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Services/Remoting/Builder/ProxyBase.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: .ctor
    path: src/prod/src/managed/Microsoft.ServiceFabric.Services/Remoting/Builder/ProxyBase.cs
    startLine: 19
  assemblies:
  - Microsoft.ServiceFabric.Services
  namespace: Microsoft.ServiceFabric.Services.Remoting.Builder
  summary: "\nInitializes a new instance of the ProxyBase class.\n"
  example: []
  syntax:
    content: protected ProxyBase()
    content.vb: Protected Sub New
  overload: Microsoft.ServiceFabric.Services.Remoting.Builder.ProxyBase.#ctor*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: Microsoft.ServiceFabric.Services.Remoting.Builder.ProxyBase.Invoke(System.Int32,System.Int32,System.Object)
  commentId: M:Microsoft.ServiceFabric.Services.Remoting.Builder.ProxyBase.Invoke(System.Int32,System.Int32,System.Object)
  id: Invoke(System.Int32,System.Int32,System.Object)
  parent: Microsoft.ServiceFabric.Services.Remoting.Builder.ProxyBase
  langs:
  - csharp
  - vb
  name: Invoke(Int32, Int32, Object)
  nameWithType: ProxyBase.Invoke(Int32, Int32, Object)
  fullName: Microsoft.ServiceFabric.Services.Remoting.Builder.ProxyBase.Invoke(System.Int32, System.Int32, System.Object)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Services/Remoting/Builder/ProxyBase.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: Invoke
    path: src/prod/src/managed/Microsoft.ServiceFabric.Services/Remoting/Builder/ProxyBase.cs
    startLine: 29
  assemblies:
  - Microsoft.ServiceFabric.Services
  namespace: Microsoft.ServiceFabric.Services.Remoting.Builder
  summary: "\nCalled by the generated proxy class to send the message to the remote object.\n"
  example: []
  syntax:
    content: protected void Invoke(int interfaceId, int methodId, object requestMsgBodyValue)
    content.vb: Protected Sub Invoke(interfaceId As Integer, methodId As Integer, requestMsgBodyValue As Object)
    parameters:
    - id: interfaceId
      type: System.Int32
      description: Id of the remote interface.
    - id: methodId
      type: System.Int32
      description: Id of the remote method to be invokved.
    - id: requestMsgBodyValue
      type: System.Object
      description: Message body to be sent to remote object.
  overload: Microsoft.ServiceFabric.Services.Remoting.Builder.ProxyBase.Invoke*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: Microsoft.ServiceFabric.Services.Remoting.Builder.ProxyBase.InvokeAsync(System.Int32,System.Int32,System.Object,System.Threading.CancellationToken)
  commentId: M:Microsoft.ServiceFabric.Services.Remoting.Builder.ProxyBase.InvokeAsync(System.Int32,System.Int32,System.Object,System.Threading.CancellationToken)
  id: InvokeAsync(System.Int32,System.Int32,System.Object,System.Threading.CancellationToken)
  parent: Microsoft.ServiceFabric.Services.Remoting.Builder.ProxyBase
  langs:
  - csharp
  - vb
  name: InvokeAsync(Int32, Int32, Object, CancellationToken)
  nameWithType: ProxyBase.InvokeAsync(Int32, Int32, Object, CancellationToken)
  fullName: Microsoft.ServiceFabric.Services.Remoting.Builder.ProxyBase.InvokeAsync(System.Int32, System.Int32, System.Object, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Services/Remoting/Builder/ProxyBase.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: InvokeAsync
    path: src/prod/src/managed/Microsoft.ServiceFabric.Services/Remoting/Builder/ProxyBase.cs
    startLine: 55
  assemblies:
  - Microsoft.ServiceFabric.Services
  namespace: Microsoft.ServiceFabric.Services.Remoting.Builder
  summary: "\nCalled by the generated proxy class to send the request to the remote object and get the response back.\n"
  example: []
  syntax:
    content: protected Task<object> InvokeAsync(int interfaceId, int methodId, object requestMsgBodyValue, CancellationToken cancellationToken)
    content.vb: Protected Function InvokeAsync(interfaceId As Integer, methodId As Integer, requestMsgBodyValue As Object, cancellationToken As CancellationToken) As Task(Of Object)
    parameters:
    - id: interfaceId
      type: System.Int32
      description: Id of the remote interface.
    - id: methodId
      type: System.Int32
      description: Id of the remote method to be invokved.
    - id: requestMsgBodyValue
      type: System.Object
      description: Request body.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: Cancellation token
    return:
      type: System.Threading.Tasks.Task{System.Object}
      description: A task that represents the asynchronous operation async call to remote object.
  overload: Microsoft.ServiceFabric.Services.Remoting.Builder.ProxyBase.InvokeAsync*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: Microsoft.ServiceFabric.Services.Remoting.Builder.ProxyBase.ContinueWithResult``1(System.Int32,System.Int32,System.Threading.Tasks.Task{System.Object})
  commentId: M:Microsoft.ServiceFabric.Services.Remoting.Builder.ProxyBase.ContinueWithResult``1(System.Int32,System.Int32,System.Threading.Tasks.Task{System.Object})
  id: ContinueWithResult``1(System.Int32,System.Int32,System.Threading.Tasks.Task{System.Object})
  parent: Microsoft.ServiceFabric.Services.Remoting.Builder.ProxyBase
  langs:
  - csharp
  - vb
  name: ContinueWithResult<TRetval>(Int32, Int32, Task<Object>)
  nameWithType: ProxyBase.ContinueWithResult<TRetval>(Int32, Int32, Task<Object>)
  fullName: Microsoft.ServiceFabric.Services.Remoting.Builder.ProxyBase.ContinueWithResult<TRetval>(System.Int32, System.Int32, System.Threading.Tasks.Task<System.Object>)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Services/Remoting/Builder/ProxyBase.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: ContinueWithResult
    path: src/prod/src/managed/Microsoft.ServiceFabric.Services/Remoting/Builder/ProxyBase.cs
    startLine: 93
  assemblies:
  - Microsoft.ServiceFabric.Services
  namespace: Microsoft.ServiceFabric.Services.Remoting.Builder
  summary: "\nCalled by the generated proxy class to get the result from the response body.\n"
  example: []
  syntax:
    content: protected Task<TRetval> ContinueWithResult<TRetval>(int interfaceId, int methodId, Task<object> task)
    content.vb: Protected Function ContinueWithResult(Of TRetval)(interfaceId As Integer, methodId As Integer, task As Task(Of Object)) As Task(Of TRetval)
    parameters:
    - id: interfaceId
      type: System.Int32
      description: Interface Id for the remoted interface.
    - id: methodId
      type: System.Int32
      description: Method Id for the remote method.
    - id: task
      type: System.Threading.Tasks.Task{System.Object}
      description: A task that represents the asynchronous operation for remote method call.
    typeParameters:
    - id: TRetval
      description: <xref href="System.Type" data-throw-if-not-resolved="false"></xref> of the remote method return value.
    return:
      type: System.Threading.Tasks.Task{{TRetval}}
      description: "A task that represents the asynchronous operation for remote method call.\nThe value of the TRetval contains the remote method return value. "
  overload: Microsoft.ServiceFabric.Services.Remoting.Builder.ProxyBase.ContinueWithResult*
  nameWithType.vb: ProxyBase.ContinueWithResult(Of TRetval)(Int32, Int32, Task(Of Object))
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: Microsoft.ServiceFabric.Services.Remoting.Builder.ProxyBase.ContinueWithResult(Of TRetval)(System.Int32, System.Int32, System.Threading.Tasks.Task(Of System.Object))
  name.vb: ContinueWithResult(Of TRetval)(Int32, Int32, Task(Of Object))
- uid: Microsoft.ServiceFabric.Services.Remoting.Builder.ProxyBase.ContinueWith(System.Threading.Tasks.Task{System.Object})
  commentId: M:Microsoft.ServiceFabric.Services.Remoting.Builder.ProxyBase.ContinueWith(System.Threading.Tasks.Task{System.Object})
  id: ContinueWith(System.Threading.Tasks.Task{System.Object})
  parent: Microsoft.ServiceFabric.Services.Remoting.Builder.ProxyBase
  langs:
  - csharp
  - vb
  name: ContinueWith(Task<Object>)
  nameWithType: ProxyBase.ContinueWith(Task<Object>)
  fullName: Microsoft.ServiceFabric.Services.Remoting.Builder.ProxyBase.ContinueWith(System.Threading.Tasks.Task<System.Object>)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Services/Remoting/Builder/ProxyBase.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: ContinueWith
    path: src/prod/src/managed/Microsoft.ServiceFabric.Services/Remoting/Builder/ProxyBase.cs
    startLine: 107
  assemblies:
  - Microsoft.ServiceFabric.Services
  namespace: Microsoft.ServiceFabric.Services.Remoting.Builder
  summary: "\nCalled by the generated proxy class to continue after getting the response body that does not have value.\n"
  example: []
  syntax:
    content: protected Task ContinueWith(Task<object> task)
    content.vb: Protected Function ContinueWith(task As Task(Of Object)) As Task
    parameters:
    - id: task
      type: System.Threading.Tasks.Task{System.Object}
      description: A task that represents the asynchronous operation for remote method call.
    return:
      type: System.Threading.Tasks.Task
      description: A task that represents the asynchronous operation for remote method call.
  overload: Microsoft.ServiceFabric.Services.Remoting.Builder.ProxyBase.ContinueWith*
  nameWithType.vb: ProxyBase.ContinueWith(Task(Of Object))
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: Microsoft.ServiceFabric.Services.Remoting.Builder.ProxyBase.ContinueWith(System.Threading.Tasks.Task(Of System.Object))
  name.vb: ContinueWith(Task(Of Object))
- uid: Microsoft.ServiceFabric.Services.Remoting.Builder.ProxyBase.GetReturnValue(System.Int32,System.Int32,System.Object)
  commentId: M:Microsoft.ServiceFabric.Services.Remoting.Builder.ProxyBase.GetReturnValue(System.Int32,System.Int32,System.Object)
  id: GetReturnValue(System.Int32,System.Int32,System.Object)
  parent: Microsoft.ServiceFabric.Services.Remoting.Builder.ProxyBase
  langs:
  - csharp
  - vb
  name: GetReturnValue(Int32, Int32, Object)
  nameWithType: ProxyBase.GetReturnValue(Int32, Int32, Object)
  fullName: Microsoft.ServiceFabric.Services.Remoting.Builder.ProxyBase.GetReturnValue(System.Int32, System.Int32, System.Object)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Services/Remoting/Builder/ProxyBase.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: GetReturnValue
    path: src/prod/src/managed/Microsoft.ServiceFabric.Services/Remoting/Builder/ProxyBase.cs
    startLine: 119
  assemblies:
  - Microsoft.ServiceFabric.Services
  namespace: Microsoft.ServiceFabric.Services.Remoting.Builder
  summary: "\nImplemented by the derived class to type cast the response body and extract the value from it.\n"
  example: []
  syntax:
    content: protected abstract object GetReturnValue(int interfaceId, int methodId, object responseBody)
    content.vb: Protected MustOverride Function GetReturnValue(interfaceId As Integer, methodId As Integer, responseBody As Object) As Object
    parameters:
    - id: interfaceId
      type: System.Int32
      description: Interface Id for the actor interface.
    - id: methodId
      type: System.Int32
      description: Method Id for the actor method.
    - id: responseBody
      type: System.Object
      description: Response body.
    return:
      type: System.Object
      description: Return value of method call as <xref href="System.Object" data-throw-if-not-resolved="false"></xref>.
  overload: Microsoft.ServiceFabric.Services.Remoting.Builder.ProxyBase.GetReturnValue*
  modifiers.csharp:
  - protected
  - abstract
  modifiers.vb:
  - Protected
  - MustOverride
references:
- uid: Microsoft.ServiceFabric.Services.Remoting.Builder
  commentId: N:Microsoft.ServiceFabric.Services.Remoting.Builder
  isExternal: false
  name: Microsoft.ServiceFabric.Services.Remoting.Builder
  nameWithType: Microsoft.ServiceFabric.Services.Remoting.Builder
  fullName: Microsoft.ServiceFabric.Services.Remoting.Builder
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceFabric.Services.Remoting.Builder.ProxyBase.System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
  commentId: M:System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  parent: System.Fabric.Messaging.Stream.ByteArraySerializer
  definition: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  name: Serialize<ProxyBase>()
  nameWithType: ByteArraySerializer.Serialize<ProxyBase>()
  fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<Microsoft.ServiceFabric.Services.Remoting.Builder.ProxyBase>()
  nameWithType.vb: ByteArraySerializer.Serialize(Of ProxyBase)()
  fullname.vb: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of Microsoft.ServiceFabric.Services.Remoting.Builder.ProxyBase)()
  name.vb: Serialize(Of ProxyBase)()
  spec.csharp:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
    name: Serialize<ProxyBase>
    nameWithType: ByteArraySerializer.Serialize<ProxyBase>
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<Microsoft.ServiceFabric.Services.Remoting.Builder.ProxyBase>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
    name: Serialize(Of ProxyBase)
    nameWithType: ByteArraySerializer.Serialize(Of ProxyBase)
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of Microsoft.ServiceFabric.Services.Remoting.Builder.ProxyBase)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  commentId: M:System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  isExternal: false
  name: Serialize<T>(T)
  nameWithType: ByteArraySerializer.Serialize<T>(T)
  fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<T>(T)
  nameWithType.vb: ByteArraySerializer.Serialize(Of T)(T)
  fullname.vb: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of T)(T)
  name.vb: Serialize(Of T)(T)
  spec.csharp:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
    name: Serialize<T>
    nameWithType: ByteArraySerializer.Serialize<T>
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
    name: Serialize(Of T)
    nameWithType: ByteArraySerializer.Serialize(Of T)
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.Messaging.Stream.ByteArraySerializer
  commentId: T:System.Fabric.Messaging.Stream.ByteArraySerializer
  parent: System.Fabric.Messaging.Stream
  isExternal: false
  name: ByteArraySerializer
  nameWithType: ByteArraySerializer
  fullName: System.Fabric.Messaging.Stream.ByteArraySerializer
- uid: System.Fabric.Messaging.Stream
  commentId: N:System.Fabric.Messaging.Stream
  isExternal: false
  name: System.Fabric.Messaging.Stream
  nameWithType: System.Fabric.Messaging.Stream
  fullName: System.Fabric.Messaging.Stream
- uid: Microsoft.ServiceFabric.Services.Remoting.Builder.ProxyBase.#ctor*
  commentId: Overload:Microsoft.ServiceFabric.Services.Remoting.Builder.ProxyBase.#ctor
  isExternal: false
  name: ProxyBase
  nameWithType: ProxyBase.ProxyBase
  fullName: Microsoft.ServiceFabric.Services.Remoting.Builder.ProxyBase.ProxyBase
- uid: Microsoft.ServiceFabric.Services.Remoting.Builder.ProxyBase.Invoke*
  commentId: Overload:Microsoft.ServiceFabric.Services.Remoting.Builder.ProxyBase.Invoke
  isExternal: false
  name: Invoke
  nameWithType: ProxyBase.Invoke
  fullName: Microsoft.ServiceFabric.Services.Remoting.Builder.ProxyBase.Invoke
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Microsoft.ServiceFabric.Services.Remoting.Builder.ProxyBase.InvokeAsync*
  commentId: Overload:Microsoft.ServiceFabric.Services.Remoting.Builder.ProxyBase.InvokeAsync
  isExternal: false
  name: InvokeAsync
  nameWithType: ProxyBase.InvokeAsync
  fullName: Microsoft.ServiceFabric.Services.Remoting.Builder.ProxyBase.InvokeAsync
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task{System.Object}
  commentId: T:System.Threading.Tasks.Task{System.Object}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Object>
  nameWithType: Task<Object>
  fullName: System.Threading.Tasks.Task<System.Object>
  nameWithType.vb: Task(Of Object)
  fullname.vb: System.Threading.Tasks.Task(Of System.Object)
  name.vb: Task(Of Object)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: false
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullname.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: Microsoft.ServiceFabric.Services.Remoting.Builder.ProxyBase.ContinueWithResult*
  commentId: Overload:Microsoft.ServiceFabric.Services.Remoting.Builder.ProxyBase.ContinueWithResult
  isExternal: false
  name: ContinueWithResult<TRetval>
  nameWithType: ProxyBase.ContinueWithResult<TRetval>
  fullName: Microsoft.ServiceFabric.Services.Remoting.Builder.ProxyBase.ContinueWithResult<TRetval>
  nameWithType.vb: ProxyBase.ContinueWithResult(Of TRetval)
  fullname.vb: Microsoft.ServiceFabric.Services.Remoting.Builder.ProxyBase.ContinueWithResult(Of TRetval)
  name.vb: ContinueWithResult(Of TRetval)
- uid: System.Threading.Tasks.Task{{TRetval}}
  commentId: T:System.Threading.Tasks.Task{``0}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<TRetval>
  nameWithType: Task<TRetval>
  fullName: System.Threading.Tasks.Task<TRetval>
  nameWithType.vb: Task(Of TRetval)
  fullname.vb: System.Threading.Tasks.Task(Of TRetval)
  name.vb: Task(Of TRetval)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TRetval
    nameWithType: TRetval
    fullName: TRetval
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TRetval
    nameWithType: TRetval
    fullName: TRetval
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceFabric.Services.Remoting.Builder.ProxyBase.ContinueWith*
  commentId: Overload:Microsoft.ServiceFabric.Services.Remoting.Builder.ProxyBase.ContinueWith
  isExternal: false
  name: ContinueWith
  nameWithType: ProxyBase.ContinueWith
  fullName: Microsoft.ServiceFabric.Services.Remoting.Builder.ProxyBase.ContinueWith
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: Microsoft.ServiceFabric.Services.Remoting.Builder.ProxyBase.GetReturnValue*
  commentId: Overload:Microsoft.ServiceFabric.Services.Remoting.Builder.ProxyBase.GetReturnValue
  isExternal: false
  name: GetReturnValue
  nameWithType: ProxyBase.GetReturnValue
  fullName: Microsoft.ServiceFabric.Services.Remoting.Builder.ProxyBase.GetReturnValue
