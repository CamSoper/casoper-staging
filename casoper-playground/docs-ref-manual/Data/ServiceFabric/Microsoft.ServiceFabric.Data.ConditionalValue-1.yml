### YamlMime:ManagedReference
items:
- uid: Microsoft.ServiceFabric.Data.ConditionalValue`1
  commentId: T:Microsoft.ServiceFabric.Data.ConditionalValue`1
  id: ConditionalValue`1
  parent: Microsoft.ServiceFabric.Data
  children:
  - Microsoft.ServiceFabric.Data.ConditionalValue`1.#ctor(System.Boolean,`0)
  - Microsoft.ServiceFabric.Data.ConditionalValue`1.HasValue
  - Microsoft.ServiceFabric.Data.ConditionalValue`1.Value
  langs:
  - csharp
  - vb
  name: ConditionalValue<TValue>
  nameWithType: ConditionalValue<TValue>
  fullName: Microsoft.ServiceFabric.Data.ConditionalValue<TValue>
  type: Struct
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Interfaces/ConditionalResult.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: ConditionalValue
    path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Interfaces/ConditionalResult.cs
    startLine: 12
  assemblies:
  - Microsoft.ServiceFabric.Data.Interfaces
  namespace: Microsoft.ServiceFabric.Data
  summary: "\nResult class returned by DistributedCollections APIs that may or may not return a value.\n"
  example: []
  syntax:
    content: public struct ConditionalValue<TValue>
    content.vb: Public Structure ConditionalValue(Of TValue)
    typeParameters:
    - id: TValue
      description: Value to initialize the result with.
  inheritedMembers:
  - System.ValueType.Equals(System.Object)
  - System.ValueType.GetHashCode
  - System.ValueType.ToString
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetType
  extensionMethods:
  - Microsoft.ServiceFabric.Data.ConditionalValue`1.System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
  nameWithType.vb: ConditionalValue(Of TValue)
  modifiers.csharp:
  - public
  - struct
  modifiers.vb:
  - Public
  - Structure
  fullName.vb: Microsoft.ServiceFabric.Data.ConditionalValue(Of TValue)
  name.vb: ConditionalValue(Of TValue)
- uid: Microsoft.ServiceFabric.Data.ConditionalValue`1.#ctor(System.Boolean,`0)
  commentId: M:Microsoft.ServiceFabric.Data.ConditionalValue`1.#ctor(System.Boolean,`0)
  id: '#ctor(System.Boolean,`0)'
  parent: Microsoft.ServiceFabric.Data.ConditionalValue`1
  langs:
  - csharp
  - vb
  name: ConditionalValue(Boolean, TValue)
  nameWithType: ConditionalValue<TValue>.ConditionalValue(Boolean, TValue)
  fullName: Microsoft.ServiceFabric.Data.ConditionalValue<TValue>.ConditionalValue(System.Boolean, TValue)
  type: Constructor
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Interfaces/ConditionalResult.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: .ctor
    path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Interfaces/ConditionalResult.cs
    startLine: 29
  assemblies:
  - Microsoft.ServiceFabric.Data.Interfaces
  namespace: Microsoft.ServiceFabric.Data
  summary: "\nInitializes a new instance of the ConditionalValue class with the given value.\n"
  example: []
  syntax:
    content: public ConditionalValue(bool hasValue, TValue value)
    content.vb: Public Sub New(hasValue As Boolean, value As TValue)
    parameters:
    - id: hasValue
      type: System.Boolean
      description: Indicates whether the value is valid.
    - id: value
      type: '{TValue}'
      description: The value.
  overload: Microsoft.ServiceFabric.Data.ConditionalValue`1.#ctor*
  nameWithType.vb: ConditionalValue(Of TValue).ConditionalValue(Boolean, TValue)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.ServiceFabric.Data.ConditionalValue(Of TValue).ConditionalValue(System.Boolean, TValue)
- uid: Microsoft.ServiceFabric.Data.ConditionalValue`1.HasValue
  commentId: P:Microsoft.ServiceFabric.Data.ConditionalValue`1.HasValue
  id: HasValue
  parent: Microsoft.ServiceFabric.Data.ConditionalValue`1
  langs:
  - csharp
  - vb
  name: HasValue
  nameWithType: ConditionalValue<TValue>.HasValue
  fullName: Microsoft.ServiceFabric.Data.ConditionalValue<TValue>.HasValue
  type: Property
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Interfaces/ConditionalResult.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: HasValue
    path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Interfaces/ConditionalResult.cs
    startLine: 39
  assemblies:
  - Microsoft.ServiceFabric.Data.Interfaces
  namespace: Microsoft.ServiceFabric.Data
  summary: "\nGets a value indicating whether the value is valid.\n"
  example: []
  syntax:
    content: public bool HasValue { get; }
    content.vb: Public ReadOnly Property HasValue As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: Whether the value is valid.
  overload: Microsoft.ServiceFabric.Data.ConditionalValue`1.HasValue*
  nameWithType.vb: ConditionalValue(Of TValue).HasValue
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: Microsoft.ServiceFabric.Data.ConditionalValue(Of TValue).HasValue
- uid: Microsoft.ServiceFabric.Data.ConditionalValue`1.Value
  commentId: P:Microsoft.ServiceFabric.Data.ConditionalValue`1.Value
  id: Value
  parent: Microsoft.ServiceFabric.Data.ConditionalValue`1
  langs:
  - csharp
  - vb
  name: Value
  nameWithType: ConditionalValue<TValue>.Value
  fullName: Microsoft.ServiceFabric.Data.ConditionalValue<TValue>.Value
  type: Property
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Interfaces/ConditionalResult.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: Value
    path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Interfaces/ConditionalResult.cs
    startLine: 51
  assemblies:
  - Microsoft.ServiceFabric.Data.Interfaces
  namespace: Microsoft.ServiceFabric.Data
  summary: "\nGets the value.\n"
  example: []
  syntax:
    content: public TValue Value { get; }
    content.vb: Public ReadOnly Property Value As TValue
    parameters: []
    return:
      type: '{TValue}'
      description: The value.
  overload: Microsoft.ServiceFabric.Data.ConditionalValue`1.Value*
  nameWithType.vb: ConditionalValue(Of TValue).Value
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: Microsoft.ServiceFabric.Data.ConditionalValue(Of TValue).Value
references:
- uid: Microsoft.ServiceFabric.Data
  commentId: N:Microsoft.ServiceFabric.Data
  isExternal: false
  name: Microsoft.ServiceFabric.Data
  nameWithType: Microsoft.ServiceFabric.Data
  fullName: Microsoft.ServiceFabric.Data
- uid: System.ValueType.Equals(System.Object)
  commentId: M:System.ValueType.Equals(System.Object)
  parent: System.ValueType
  isExternal: true
  name: Equals(Object)
  nameWithType: ValueType.Equals(Object)
  fullName: System.ValueType.Equals(System.Object)
  spec.csharp:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueType.GetHashCode
  commentId: M:System.ValueType.GetHashCode
  parent: System.ValueType
  isExternal: true
  name: GetHashCode()
  nameWithType: ValueType.GetHashCode()
  fullName: System.ValueType.GetHashCode()
  spec.csharp:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueType.ToString
  commentId: M:System.ValueType.ToString
  parent: System.ValueType
  isExternal: true
  name: ToString()
  nameWithType: ValueType.ToString()
  fullName: System.ValueType.ToString()
  spec.csharp:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceFabric.Data.ConditionalValue`1.System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
  commentId: M:System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  parent: System.Fabric.Messaging.Stream.ByteArraySerializer
  definition: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  name: Serialize<ConditionalValue<TValue>>()
  nameWithType: ByteArraySerializer.Serialize<ConditionalValue<TValue>>()
  fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<Microsoft.ServiceFabric.Data.ConditionalValue<TValue>>()
  nameWithType.vb: ByteArraySerializer.Serialize(Of ConditionalValue(Of TValue))()
  fullname.vb: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of Microsoft.ServiceFabric.Data.ConditionalValue(Of TValue))()
  name.vb: Serialize(Of ConditionalValue(Of TValue))()
  spec.csharp:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
    name: Serialize<ConditionalValue<TValue>>
    nameWithType: ByteArraySerializer.Serialize<ConditionalValue<TValue>>
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<Microsoft.ServiceFabric.Data.ConditionalValue<TValue>>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
    name: Serialize(Of ConditionalValue(Of TValue))
    nameWithType: ByteArraySerializer.Serialize(Of ConditionalValue(Of TValue))
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of Microsoft.ServiceFabric.Data.ConditionalValue(Of TValue))
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueType
  commentId: T:System.ValueType
  parent: System
  isExternal: true
  name: ValueType
  nameWithType: ValueType
  fullName: System.ValueType
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  commentId: M:System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  isExternal: false
  name: Serialize<T>(T)
  nameWithType: ByteArraySerializer.Serialize<T>(T)
  fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<T>(T)
  nameWithType.vb: ByteArraySerializer.Serialize(Of T)(T)
  fullname.vb: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of T)(T)
  name.vb: Serialize(Of T)(T)
  spec.csharp:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
    name: Serialize<T>
    nameWithType: ByteArraySerializer.Serialize<T>
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
    name: Serialize(Of T)
    nameWithType: ByteArraySerializer.Serialize(Of T)
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.Messaging.Stream.ByteArraySerializer
  commentId: T:System.Fabric.Messaging.Stream.ByteArraySerializer
  parent: System.Fabric.Messaging.Stream
  isExternal: false
  name: ByteArraySerializer
  nameWithType: ByteArraySerializer
  fullName: System.Fabric.Messaging.Stream.ByteArraySerializer
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Fabric.Messaging.Stream
  commentId: N:System.Fabric.Messaging.Stream
  isExternal: false
  name: System.Fabric.Messaging.Stream
  nameWithType: System.Fabric.Messaging.Stream
  fullName: System.Fabric.Messaging.Stream
- uid: Microsoft.ServiceFabric.Data.ConditionalValue`1.#ctor*
  commentId: Overload:Microsoft.ServiceFabric.Data.ConditionalValue`1.#ctor
  isExternal: false
  name: ConditionalValue
  nameWithType: ConditionalValue<TValue>.ConditionalValue
  fullName: Microsoft.ServiceFabric.Data.ConditionalValue<TValue>.ConditionalValue
  nameWithType.vb: ConditionalValue(Of TValue).ConditionalValue
  fullname.vb: Microsoft.ServiceFabric.Data.ConditionalValue(Of TValue).ConditionalValue
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: '{TValue}'
  commentId: '!:TValue'
  definition: TValue
  name: TValue
  nameWithType: TValue
  fullName: TValue
- uid: TValue
  isExternal: false
  name: TValue
  nameWithType: TValue
  fullName: TValue
- uid: Microsoft.ServiceFabric.Data.ConditionalValue`1.HasValue*
  commentId: Overload:Microsoft.ServiceFabric.Data.ConditionalValue`1.HasValue
  isExternal: false
  name: HasValue
  nameWithType: ConditionalValue<TValue>.HasValue
  fullName: Microsoft.ServiceFabric.Data.ConditionalValue<TValue>.HasValue
  nameWithType.vb: ConditionalValue(Of TValue).HasValue
  fullname.vb: Microsoft.ServiceFabric.Data.ConditionalValue(Of TValue).HasValue
- uid: Microsoft.ServiceFabric.Data.ConditionalValue`1.Value*
  commentId: Overload:Microsoft.ServiceFabric.Data.ConditionalValue`1.Value
  isExternal: false
  name: Value
  nameWithType: ConditionalValue<TValue>.Value
  fullName: Microsoft.ServiceFabric.Data.ConditionalValue<TValue>.Value
  nameWithType.vb: ConditionalValue(Of TValue).Value
  fullname.vb: Microsoft.ServiceFabric.Data.ConditionalValue(Of TValue).Value
