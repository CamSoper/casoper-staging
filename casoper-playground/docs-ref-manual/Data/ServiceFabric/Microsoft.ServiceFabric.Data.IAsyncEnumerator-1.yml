### YamlMime:ManagedReference
items:
- uid: Microsoft.ServiceFabric.Data.IAsyncEnumerator`1
  commentId: T:Microsoft.ServiceFabric.Data.IAsyncEnumerator`1
  id: IAsyncEnumerator`1
  parent: Microsoft.ServiceFabric.Data
  children:
  - Microsoft.ServiceFabric.Data.IAsyncEnumerator`1.Current
  - Microsoft.ServiceFabric.Data.IAsyncEnumerator`1.MoveNextAsync(System.Threading.CancellationToken)
  - Microsoft.ServiceFabric.Data.IAsyncEnumerator`1.Reset
  langs:
  - csharp
  - vb
  name: IAsyncEnumerator<T>
  nameWithType: IAsyncEnumerator<T>
  fullName: Microsoft.ServiceFabric.Data.IAsyncEnumerator<T>
  type: Interface
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Interfaces/IAsyncEnumerator.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: IAsyncEnumerator
    path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Interfaces/IAsyncEnumerator.cs
    startLine: 14
  assemblies:
  - Microsoft.ServiceFabric.Data.Interfaces
  namespace: Microsoft.ServiceFabric.Data
  summary: "\nAsynchronous enumerator.\n"
  example: []
  syntax:
    content: 'public interface IAsyncEnumerator<out T> : IDisposable'
    content.vb: >-
      Public Interface IAsyncEnumerator(Of Out T)
          Inherits IDisposable
    typeParameters:
    - id: T
      description: The type of objects to enumerate.
  inheritedMembers:
  - System.IDisposable.Dispose
  extensionMethods:
  - Microsoft.ServiceFabric.Data.IAsyncEnumerator`1.System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
  nameWithType.vb: IAsyncEnumerator(Of T)
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
  fullName.vb: Microsoft.ServiceFabric.Data.IAsyncEnumerator(Of T)
  name.vb: IAsyncEnumerator(Of T)
- uid: Microsoft.ServiceFabric.Data.IAsyncEnumerator`1.Current
  commentId: P:Microsoft.ServiceFabric.Data.IAsyncEnumerator`1.Current
  id: Current
  parent: Microsoft.ServiceFabric.Data.IAsyncEnumerator`1
  langs:
  - csharp
  - vb
  name: Current
  nameWithType: IAsyncEnumerator<T>.Current
  fullName: Microsoft.ServiceFabric.Data.IAsyncEnumerator<T>.Current
  type: Property
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Interfaces/IAsyncEnumerator.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: Current
    path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Interfaces/IAsyncEnumerator.cs
    startLine: 22
  assemblies:
  - Microsoft.ServiceFabric.Data.Interfaces
  namespace: Microsoft.ServiceFabric.Data
  summary: "\nGets the current element in the enumerator.\n"
  example: []
  syntax:
    content: T Current { get; }
    content.vb: ReadOnly Property Current As T
    parameters: []
    return:
      type: '{T}'
      description: "\nCurrent element in the enumerator.\n"
  overload: Microsoft.ServiceFabric.Data.IAsyncEnumerator`1.Current*
  nameWithType.vb: IAsyncEnumerator(Of T).Current
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  fullName.vb: Microsoft.ServiceFabric.Data.IAsyncEnumerator(Of T).Current
- uid: Microsoft.ServiceFabric.Data.IAsyncEnumerator`1.MoveNextAsync(System.Threading.CancellationToken)
  commentId: M:Microsoft.ServiceFabric.Data.IAsyncEnumerator`1.MoveNextAsync(System.Threading.CancellationToken)
  id: MoveNextAsync(System.Threading.CancellationToken)
  parent: Microsoft.ServiceFabric.Data.IAsyncEnumerator`1
  langs:
  - csharp
  - vb
  name: MoveNextAsync(CancellationToken)
  nameWithType: IAsyncEnumerator<T>.MoveNextAsync(CancellationToken)
  fullName: Microsoft.ServiceFabric.Data.IAsyncEnumerator<T>.MoveNextAsync(System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Interfaces/IAsyncEnumerator.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: MoveNextAsync
    path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Interfaces/IAsyncEnumerator.cs
    startLine: 33
  assemblies:
  - Microsoft.ServiceFabric.Data.Interfaces
  namespace: Microsoft.ServiceFabric.Data
  summary: "\nAdvances the enumerator to the next element of the enumerator.\n"
  example: []
  syntax:
    content: Task<bool> MoveNextAsync(CancellationToken cancellationToken)
    content.vb: Function MoveNextAsync(cancellationToken As CancellationToken) As Task(Of Boolean)
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The token to monitor for cancellation requests.
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
      description: "\ntrue if the enumerator was successfully advanced to the next element; false\nif the enumerator has passed the end of the collection.\n"
  overload: Microsoft.ServiceFabric.Data.IAsyncEnumerator`1.MoveNextAsync*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The collection was modified after the enumerator was created.
  nameWithType.vb: IAsyncEnumerator(Of T).MoveNextAsync(CancellationToken)
  fullName.vb: Microsoft.ServiceFabric.Data.IAsyncEnumerator(Of T).MoveNextAsync(System.Threading.CancellationToken)
- uid: Microsoft.ServiceFabric.Data.IAsyncEnumerator`1.Reset
  commentId: M:Microsoft.ServiceFabric.Data.IAsyncEnumerator`1.Reset
  id: Reset
  parent: Microsoft.ServiceFabric.Data.IAsyncEnumerator`1
  langs:
  - csharp
  - vb
  name: Reset()
  nameWithType: IAsyncEnumerator<T>.Reset()
  fullName: Microsoft.ServiceFabric.Data.IAsyncEnumerator<T>.Reset()
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Interfaces/IAsyncEnumerator.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: Reset
    path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Interfaces/IAsyncEnumerator.cs
    startLine: 40
  assemblies:
  - Microsoft.ServiceFabric.Data.Interfaces
  namespace: Microsoft.ServiceFabric.Data
  summary: "\nSets the enumerator to its initial position, which is before the first element\nin the collection.\n"
  example: []
  syntax:
    content: void Reset()
    content.vb: Sub Reset
  overload: Microsoft.ServiceFabric.Data.IAsyncEnumerator`1.Reset*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The collection was modified after the enumerator was created.
  nameWithType.vb: IAsyncEnumerator(Of T).Reset()
  fullName.vb: Microsoft.ServiceFabric.Data.IAsyncEnumerator(Of T).Reset()
references:
- uid: Microsoft.ServiceFabric.Data
  commentId: N:Microsoft.ServiceFabric.Data
  isExternal: false
  name: Microsoft.ServiceFabric.Data
  nameWithType: Microsoft.ServiceFabric.Data
  fullName: Microsoft.ServiceFabric.Data
- uid: System.IDisposable.Dispose
  commentId: M:System.IDisposable.Dispose
  parent: System.IDisposable
  isExternal: true
  name: Dispose()
  nameWithType: IDisposable.Dispose()
  fullName: System.IDisposable.Dispose()
  spec.csharp:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceFabric.Data.IAsyncEnumerator`1.System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
  commentId: M:System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  parent: System.Fabric.Messaging.Stream.ByteArraySerializer
  definition: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  name: Serialize<IAsyncEnumerator<T>>()
  nameWithType: ByteArraySerializer.Serialize<IAsyncEnumerator<T>>()
  fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<Microsoft.ServiceFabric.Data.IAsyncEnumerator<T>>()
  nameWithType.vb: ByteArraySerializer.Serialize(Of IAsyncEnumerator(Of T))()
  fullname.vb: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of Microsoft.ServiceFabric.Data.IAsyncEnumerator(Of T))()
  name.vb: Serialize(Of IAsyncEnumerator(Of T))()
  spec.csharp:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
    name: Serialize<IAsyncEnumerator<T>>
    nameWithType: ByteArraySerializer.Serialize<IAsyncEnumerator<T>>
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<Microsoft.ServiceFabric.Data.IAsyncEnumerator<T>>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
    name: Serialize(Of IAsyncEnumerator(Of T))
    nameWithType: ByteArraySerializer.Serialize(Of IAsyncEnumerator(Of T))
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of Microsoft.ServiceFabric.Data.IAsyncEnumerator(Of T))
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  commentId: M:System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  isExternal: false
  name: Serialize<T>(T)
  nameWithType: ByteArraySerializer.Serialize<T>(T)
  fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<T>(T)
  nameWithType.vb: ByteArraySerializer.Serialize(Of T)(T)
  fullname.vb: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of T)(T)
  name.vb: Serialize(Of T)(T)
  spec.csharp:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
    name: Serialize<T>
    nameWithType: ByteArraySerializer.Serialize<T>
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
    name: Serialize(Of T)
    nameWithType: ByteArraySerializer.Serialize(Of T)
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.Messaging.Stream.ByteArraySerializer
  commentId: T:System.Fabric.Messaging.Stream.ByteArraySerializer
  parent: System.Fabric.Messaging.Stream
  isExternal: false
  name: ByteArraySerializer
  nameWithType: ByteArraySerializer
  fullName: System.Fabric.Messaging.Stream.ByteArraySerializer
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Fabric.Messaging.Stream
  commentId: N:System.Fabric.Messaging.Stream
  isExternal: false
  name: System.Fabric.Messaging.Stream
  nameWithType: System.Fabric.Messaging.Stream
  fullName: System.Fabric.Messaging.Stream
- uid: Microsoft.ServiceFabric.Data.IAsyncEnumerator`1.Current*
  commentId: Overload:Microsoft.ServiceFabric.Data.IAsyncEnumerator`1.Current
  isExternal: false
  name: Current
  nameWithType: IAsyncEnumerator<T>.Current
  fullName: Microsoft.ServiceFabric.Data.IAsyncEnumerator<T>.Current
  nameWithType.vb: IAsyncEnumerator(Of T).Current
  fullname.vb: Microsoft.ServiceFabric.Data.IAsyncEnumerator(Of T).Current
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  isExternal: false
  name: T
  nameWithType: T
  fullName: T
- uid: Microsoft.ServiceFabric.Data.IAsyncEnumerator`1.MoveNextAsync*
  commentId: Overload:Microsoft.ServiceFabric.Data.IAsyncEnumerator`1.MoveNextAsync
  isExternal: false
  name: MoveNextAsync
  nameWithType: IAsyncEnumerator<T>.MoveNextAsync
  fullName: Microsoft.ServiceFabric.Data.IAsyncEnumerator<T>.MoveNextAsync
  nameWithType.vb: IAsyncEnumerator(Of T).MoveNextAsync
  fullname.vb: Microsoft.ServiceFabric.Data.IAsyncEnumerator(Of T).MoveNextAsync
- uid: System.InvalidOperationException
  commentId: T:System.InvalidOperationException
  parent: System
  isExternal: true
  name: InvalidOperationException
  nameWithType: InvalidOperationException
  fullName: System.InvalidOperationException
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task{System.Boolean}
  commentId: T:System.Threading.Tasks.Task{System.Boolean}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Boolean>
  nameWithType: Task<Boolean>
  fullName: System.Threading.Tasks.Task<System.Boolean>
  nameWithType.vb: Task(Of Boolean)
  fullname.vb: System.Threading.Tasks.Task(Of System.Boolean)
  name.vb: Task(Of Boolean)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: false
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullname.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: Microsoft.ServiceFabric.Data.IAsyncEnumerator`1.Reset*
  commentId: Overload:Microsoft.ServiceFabric.Data.IAsyncEnumerator`1.Reset
  isExternal: false
  name: Reset
  nameWithType: IAsyncEnumerator<T>.Reset
  fullName: Microsoft.ServiceFabric.Data.IAsyncEnumerator<T>.Reset
  nameWithType.vb: IAsyncEnumerator(Of T).Reset
  fullname.vb: Microsoft.ServiceFabric.Data.IAsyncEnumerator(Of T).Reset
