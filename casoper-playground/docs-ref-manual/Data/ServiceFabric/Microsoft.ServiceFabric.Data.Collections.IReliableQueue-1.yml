### YamlMime:ManagedReference
items:
- uid: Microsoft.ServiceFabric.Data.Collections.IReliableQueue`1
  commentId: T:Microsoft.ServiceFabric.Data.Collections.IReliableQueue`1
  id: IReliableQueue`1
  parent: Microsoft.ServiceFabric.Data.Collections
  children:
  - Microsoft.ServiceFabric.Data.Collections.IReliableQueue`1.CreateEnumerableAsync(Microsoft.ServiceFabric.Data.ITransaction)
  - Microsoft.ServiceFabric.Data.Collections.IReliableQueue`1.EnqueueAsync(Microsoft.ServiceFabric.Data.ITransaction,`0)
  - Microsoft.ServiceFabric.Data.Collections.IReliableQueue`1.EnqueueAsync(Microsoft.ServiceFabric.Data.ITransaction,`0,System.TimeSpan,System.Threading.CancellationToken)
  - Microsoft.ServiceFabric.Data.Collections.IReliableQueue`1.TryDequeueAsync(Microsoft.ServiceFabric.Data.ITransaction)
  - Microsoft.ServiceFabric.Data.Collections.IReliableQueue`1.TryDequeueAsync(Microsoft.ServiceFabric.Data.ITransaction,System.TimeSpan,System.Threading.CancellationToken)
  - Microsoft.ServiceFabric.Data.Collections.IReliableQueue`1.TryPeekAsync(Microsoft.ServiceFabric.Data.ITransaction)
  - Microsoft.ServiceFabric.Data.Collections.IReliableQueue`1.TryPeekAsync(Microsoft.ServiceFabric.Data.ITransaction,Microsoft.ServiceFabric.Data.Collections.LockMode)
  - Microsoft.ServiceFabric.Data.Collections.IReliableQueue`1.TryPeekAsync(Microsoft.ServiceFabric.Data.ITransaction,Microsoft.ServiceFabric.Data.Collections.LockMode,System.TimeSpan,System.Threading.CancellationToken)
  - Microsoft.ServiceFabric.Data.Collections.IReliableQueue`1.TryPeekAsync(Microsoft.ServiceFabric.Data.ITransaction,System.TimeSpan,System.Threading.CancellationToken)
  langs:
  - csharp
  - vb
  name: IReliableQueue<T>
  nameWithType: IReliableQueue<T>
  fullName: Microsoft.ServiceFabric.Data.Collections.IReliableQueue<T>
  type: Interface
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Interfaces/IReliableQueue.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: IReliableQueue
    path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Interfaces/IReliableQueue.cs
    startLine: 26
  assemblies:
  - Microsoft.ServiceFabric.Data.Interfaces
  namespace: Microsoft.ServiceFabric.Data.Collections
  summary: "\nRepresents a reliable first-in, first-out collection of objects that are persisted and replicated.\n"
  remarks: "\n<p>\nValues stored in this queue MUST NOT be mutated outside the context of an operation on the queue. It is\nhighly recommended to make <em>T</em> immutable in order to avoid accidental data corruption.\n</p>\n<p>\nTransaction is the unit of concurrency: Users can have multiple transactions in-flight at any given point of time but for a given transaction each API must be called one at a time.\nSo all Reliable Collection APIs that take in a transaction and return a Task, must be awaited one at a time.\n<xref href=\"Microsoft.ServiceFabric.Data.ITransaction\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n"
  example: []
  syntax:
    content: 'public interface IReliableQueue<T> : IReliableCollection<T>, IReliableState'
    content.vb: >-
      Public Interface IReliableQueue(Of T)
          Inherits IReliableCollection(Of T)
    typeParameters:
    - id: T
      description: The type of the elements contained in the reliable queue.
  inheritedMembers:
  - Microsoft.ServiceFabric.Data.Collections.IReliableCollection{{T}}.GetCountAsync(Microsoft.ServiceFabric.Data.ITransaction)
  - Microsoft.ServiceFabric.Data.Collections.IReliableCollection{{T}}.ClearAsync
  - Microsoft.ServiceFabric.Data.IReliableState.Name
  extensionMethods:
  - Microsoft.ServiceFabric.Data.Collections.IReliableQueue`1.System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
  nameWithType.vb: IReliableQueue(Of T)
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
  fullName.vb: Microsoft.ServiceFabric.Data.Collections.IReliableQueue(Of T)
  name.vb: IReliableQueue(Of T)
- uid: Microsoft.ServiceFabric.Data.Collections.IReliableQueue`1.EnqueueAsync(Microsoft.ServiceFabric.Data.ITransaction,`0)
  commentId: M:Microsoft.ServiceFabric.Data.Collections.IReliableQueue`1.EnqueueAsync(Microsoft.ServiceFabric.Data.ITransaction,`0)
  id: EnqueueAsync(Microsoft.ServiceFabric.Data.ITransaction,`0)
  parent: Microsoft.ServiceFabric.Data.Collections.IReliableQueue`1
  langs:
  - csharp
  - vb
  name: EnqueueAsync(ITransaction, T)
  nameWithType: IReliableQueue<T>.EnqueueAsync(ITransaction, T)
  fullName: Microsoft.ServiceFabric.Data.Collections.IReliableQueue<T>.EnqueueAsync(Microsoft.ServiceFabric.Data.ITransaction, T)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Interfaces/IReliableQueue.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: EnqueueAsync
    path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Interfaces/IReliableQueue.cs
    startLine: 41
  assemblies:
  - Microsoft.ServiceFabric.Data.Interfaces
  namespace: Microsoft.ServiceFabric.Data.Collections
  summary: "\nAdds an object to the end of the reliable queue.\n"
  example: []
  syntax:
    content: Task EnqueueAsync(ITransaction tx, T item)
    content.vb: Function EnqueueAsync(tx As ITransaction, item As T) As Task
    parameters:
    - id: tx
      type: Microsoft.ServiceFabric.Data.ITransaction
      description: Transaction to associate this operation with.
    - id: item
      type: '{T}'
      description: The object to add to the end of the queue. The value can be null for reference types.
    return:
      type: System.Threading.Tasks.Task
      description: Task that represents the asynchronous enqueue operation.
  overload: Microsoft.ServiceFabric.Data.Collections.IReliableQueue`1.EnqueueAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <em>tx</em> is null.
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: The operation failed to complete within the default timeout.
  - type: System.Fabric.FabricNotPrimaryException
    commentId: T:System.Fabric.FabricNotPrimaryException
    description: The exception that is thrown when the <cref name="IReliableQueue{T}"></cref> is not in <cref name="ReplicaRole.Primary"></cref>.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\nThe exception that is thrown when a method call is invalid for the object's current state.\nExample, transaction used is already terminated: comitted or aborted.\n"
  nameWithType.vb: IReliableQueue(Of T).EnqueueAsync(ITransaction, T)
  fullName.vb: Microsoft.ServiceFabric.Data.Collections.IReliableQueue(Of T).EnqueueAsync(Microsoft.ServiceFabric.Data.ITransaction, T)
- uid: Microsoft.ServiceFabric.Data.Collections.IReliableQueue`1.EnqueueAsync(Microsoft.ServiceFabric.Data.ITransaction,`0,System.TimeSpan,System.Threading.CancellationToken)
  commentId: M:Microsoft.ServiceFabric.Data.Collections.IReliableQueue`1.EnqueueAsync(Microsoft.ServiceFabric.Data.ITransaction,`0,System.TimeSpan,System.Threading.CancellationToken)
  id: EnqueueAsync(Microsoft.ServiceFabric.Data.ITransaction,`0,System.TimeSpan,System.Threading.CancellationToken)
  parent: Microsoft.ServiceFabric.Data.Collections.IReliableQueue`1
  langs:
  - csharp
  - vb
  name: EnqueueAsync(ITransaction, T, TimeSpan, CancellationToken)
  nameWithType: IReliableQueue<T>.EnqueueAsync(ITransaction, T, TimeSpan, CancellationToken)
  fullName: Microsoft.ServiceFabric.Data.Collections.IReliableQueue<T>.EnqueueAsync(Microsoft.ServiceFabric.Data.ITransaction, T, System.TimeSpan, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Interfaces/IReliableQueue.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: EnqueueAsync
    path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Interfaces/IReliableQueue.cs
    startLine: 60
  assemblies:
  - Microsoft.ServiceFabric.Data.Interfaces
  namespace: Microsoft.ServiceFabric.Data.Collections
  summary: "\nAdds an object to the end of the reliable queue.\n"
  example: []
  syntax:
    content: Task EnqueueAsync(ITransaction tx, T item, TimeSpan timeout, CancellationToken cancellationToken)
    content.vb: Function EnqueueAsync(tx As ITransaction, item As T, timeout As TimeSpan, cancellationToken As CancellationToken) As Task
    parameters:
    - id: tx
      type: Microsoft.ServiceFabric.Data.ITransaction
      description: Transaction to associate this operation with.
    - id: item
      type: '{T}'
      description: The object to add to the end of the queue. The value can be null for reference types.
    - id: timeout
      type: System.TimeSpan
      description: The amount of time to wait for the operation to complete before throwing a TimeoutException. Primarily used to prevent deadlocks. The default is 4 seconds.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The token to monitor for cancellation requests. The default is None.
    return:
      type: System.Threading.Tasks.Task
      description: Task that represents the asynchronous enqueue operation.
  overload: Microsoft.ServiceFabric.Data.Collections.IReliableQueue`1.EnqueueAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <em>tx</em> is null.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <em>timeout</em> is negative.
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: The operation failed to complete within the given timeout.
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: The operation was canceled.
  - type: System.Fabric.FabricNotPrimaryException
    commentId: T:System.Fabric.FabricNotPrimaryException
    description: The exception that is thrown when the <cref name="IReliableQueue{T}"></cref> is not in <cref name="ReplicaRole.Primary"></cref>.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\nThe exception that is thrown when a method call is invalid for the object's current state.\nExample, transaction used is already terminated: comitted or aborted.\n"
  nameWithType.vb: IReliableQueue(Of T).EnqueueAsync(ITransaction, T, TimeSpan, CancellationToken)
  fullName.vb: Microsoft.ServiceFabric.Data.Collections.IReliableQueue(Of T).EnqueueAsync(Microsoft.ServiceFabric.Data.ITransaction, T, System.TimeSpan, System.Threading.CancellationToken)
- uid: Microsoft.ServiceFabric.Data.Collections.IReliableQueue`1.TryDequeueAsync(Microsoft.ServiceFabric.Data.ITransaction)
  commentId: M:Microsoft.ServiceFabric.Data.Collections.IReliableQueue`1.TryDequeueAsync(Microsoft.ServiceFabric.Data.ITransaction)
  id: TryDequeueAsync(Microsoft.ServiceFabric.Data.ITransaction)
  parent: Microsoft.ServiceFabric.Data.Collections.IReliableQueue`1
  langs:
  - csharp
  - vb
  name: TryDequeueAsync(ITransaction)
  nameWithType: IReliableQueue<T>.TryDequeueAsync(ITransaction)
  fullName: Microsoft.ServiceFabric.Data.Collections.IReliableQueue<T>.TryDequeueAsync(Microsoft.ServiceFabric.Data.ITransaction)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Interfaces/IReliableQueue.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: TryDequeueAsync
    path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Interfaces/IReliableQueue.cs
    startLine: 77
  assemblies:
  - Microsoft.ServiceFabric.Data.Interfaces
  namespace: Microsoft.ServiceFabric.Data.Collections
  summary: "\nTries to remove and return the object at the beginning of the reliable queue.\n"
  example: []
  syntax:
    content: Task<ConditionalValue<T>> TryDequeueAsync(ITransaction tx)
    content.vb: Function TryDequeueAsync(tx As ITransaction) As Task(Of ConditionalValue(Of T))
    parameters:
    - id: tx
      type: Microsoft.ServiceFabric.Data.ITransaction
      description: Transaction to associate this operation with.
    return:
      type: System.Threading.Tasks.Task{Microsoft.ServiceFabric.Data.ConditionalValue{{T}}}
      description: "\nTask that represents the asynchronous dequeue operation. The task result is a tuple indicating\nwhether an object was removed and if so, the object.\n"
  overload: Microsoft.ServiceFabric.Data.Collections.IReliableQueue`1.TryDequeueAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <em>tx</em> is null.
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: The operation failed to complete within the default timeout.
  - type: System.Fabric.FabricNotPrimaryException
    commentId: T:System.Fabric.FabricNotPrimaryException
    description: The exception that is thrown when the <cref name="IReliableQueue{T}"></cref> is not in <cref name="ReplicaRole.Primary"></cref>.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\nThe exception that is thrown when a method call is invalid for the object's current state.\nExample, transaction used is already terminated: comitted or aborted.\n"
  nameWithType.vb: IReliableQueue(Of T).TryDequeueAsync(ITransaction)
  fullName.vb: Microsoft.ServiceFabric.Data.Collections.IReliableQueue(Of T).TryDequeueAsync(Microsoft.ServiceFabric.Data.ITransaction)
- uid: Microsoft.ServiceFabric.Data.Collections.IReliableQueue`1.TryDequeueAsync(Microsoft.ServiceFabric.Data.ITransaction,System.TimeSpan,System.Threading.CancellationToken)
  commentId: M:Microsoft.ServiceFabric.Data.Collections.IReliableQueue`1.TryDequeueAsync(Microsoft.ServiceFabric.Data.ITransaction,System.TimeSpan,System.Threading.CancellationToken)
  id: TryDequeueAsync(Microsoft.ServiceFabric.Data.ITransaction,System.TimeSpan,System.Threading.CancellationToken)
  parent: Microsoft.ServiceFabric.Data.Collections.IReliableQueue`1
  langs:
  - csharp
  - vb
  name: TryDequeueAsync(ITransaction, TimeSpan, CancellationToken)
  nameWithType: IReliableQueue<T>.TryDequeueAsync(ITransaction, TimeSpan, CancellationToken)
  fullName: Microsoft.ServiceFabric.Data.Collections.IReliableQueue<T>.TryDequeueAsync(Microsoft.ServiceFabric.Data.ITransaction, System.TimeSpan, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Interfaces/IReliableQueue.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: TryDequeueAsync
    path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Interfaces/IReliableQueue.cs
    startLine: 98
  assemblies:
  - Microsoft.ServiceFabric.Data.Interfaces
  namespace: Microsoft.ServiceFabric.Data.Collections
  summary: "\nTries to remove and return the object at the beginning of the reliable queue.\n"
  example: []
  syntax:
    content: Task<ConditionalValue<T>> TryDequeueAsync(ITransaction tx, TimeSpan timeout, CancellationToken cancellationToken)
    content.vb: Function TryDequeueAsync(tx As ITransaction, timeout As TimeSpan, cancellationToken As CancellationToken) As Task(Of ConditionalValue(Of T))
    parameters:
    - id: tx
      type: Microsoft.ServiceFabric.Data.ITransaction
      description: Transaction to associate this operation with.
    - id: timeout
      type: System.TimeSpan
      description: The amount of time to wait for the operation to complete before throwing a TimeoutException. Primarily used to prevent deadlocks. The default is 4 seconds.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The token to monitor for cancellation requests. The default is None.
    return:
      type: System.Threading.Tasks.Task{Microsoft.ServiceFabric.Data.ConditionalValue{{T}}}
      description: "\nTask that represents the asynchronous dequeue operation. The task result is a tuple indicating\nwhether an object was removed and if so, the object.\n"
  overload: Microsoft.ServiceFabric.Data.Collections.IReliableQueue`1.TryDequeueAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <em>tx</em> is null.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <em>timeout</em> is negative.
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: The operation failed to complete within the given timeout.
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: The operation was canceled.
  - type: System.Fabric.FabricNotPrimaryException
    commentId: T:System.Fabric.FabricNotPrimaryException
    description: The exception that is thrown when the <cref name="IReliableQueue{T}"></cref> is not in <cref name="ReplicaRole.Primary"></cref>.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\nThe exception that is thrown when a method call is invalid for the object's current state.\nExample, transaction used is already terminated: comitted or aborted.\n"
  nameWithType.vb: IReliableQueue(Of T).TryDequeueAsync(ITransaction, TimeSpan, CancellationToken)
  fullName.vb: Microsoft.ServiceFabric.Data.Collections.IReliableQueue(Of T).TryDequeueAsync(Microsoft.ServiceFabric.Data.ITransaction, System.TimeSpan, System.Threading.CancellationToken)
- uid: Microsoft.ServiceFabric.Data.Collections.IReliableQueue`1.TryPeekAsync(Microsoft.ServiceFabric.Data.ITransaction)
  commentId: M:Microsoft.ServiceFabric.Data.Collections.IReliableQueue`1.TryPeekAsync(Microsoft.ServiceFabric.Data.ITransaction)
  id: TryPeekAsync(Microsoft.ServiceFabric.Data.ITransaction)
  parent: Microsoft.ServiceFabric.Data.Collections.IReliableQueue`1
  langs:
  - csharp
  - vb
  name: TryPeekAsync(ITransaction)
  nameWithType: IReliableQueue<T>.TryPeekAsync(ITransaction)
  fullName: Microsoft.ServiceFabric.Data.Collections.IReliableQueue<T>.TryPeekAsync(Microsoft.ServiceFabric.Data.ITransaction)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Interfaces/IReliableQueue.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: TryPeekAsync
    path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Interfaces/IReliableQueue.cs
    startLine: 121
  assemblies:
  - Microsoft.ServiceFabric.Data.Interfaces
  namespace: Microsoft.ServiceFabric.Data.Collections
  summary: "\nTries to return an object from the beginning of the reliable queue without removing it.\n"
  example: []
  syntax:
    content: Task<ConditionalValue<T>> TryPeekAsync(ITransaction tx)
    content.vb: Function TryPeekAsync(tx As ITransaction) As Task(Of ConditionalValue(Of T))
    parameters:
    - id: tx
      type: Microsoft.ServiceFabric.Data.ITransaction
      description: Transaction to associate this operation with.
    return:
      type: System.Threading.Tasks.Task{Microsoft.ServiceFabric.Data.ConditionalValue{{T}}}
      description: "\nTask that represents the asynchronous peek operation. The task result is a tuple indicating\nwhether an object was found at the beginning of the queue and if so, the object.\n"
  overload: Microsoft.ServiceFabric.Data.Collections.IReliableQueue`1.TryPeekAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <em>tx</em> is null.
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: The operation failed to complete within the default timeout.
  - type: System.Fabric.FabricNotReadableException
    commentId: T:System.Fabric.FabricNotReadableException
    description: "\nException indicates that the <cref name=\"IReliableQueue{T}\"></cref> cannot serve reads at the moment.\n<cref name=\"FabricNotReadableException\"></cref> can be thrown in all <cref name=\"ReplicaRole\"></cref>s.\nOne example for it being thrown in the <cref name=\"ReplicaRole.Primary\"></cref> is loss of <cref name=\"IStatefulServicePartition.ReadStatus\"></cref>.\nOne example for it being thrown in the <cref name=\"ReplicaRole.ActiveSecondary\"></cref> is that Reliable Queue's state is not yet consistent.\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\nThe exception that is thrown when a method call is invalid for the object's current state.\nExample, transaction used is already terminated: comitted or aborted.\n"
  nameWithType.vb: IReliableQueue(Of T).TryPeekAsync(ITransaction)
  fullName.vb: Microsoft.ServiceFabric.Data.Collections.IReliableQueue(Of T).TryPeekAsync(Microsoft.ServiceFabric.Data.ITransaction)
- uid: Microsoft.ServiceFabric.Data.Collections.IReliableQueue`1.TryPeekAsync(Microsoft.ServiceFabric.Data.ITransaction,System.TimeSpan,System.Threading.CancellationToken)
  commentId: M:Microsoft.ServiceFabric.Data.Collections.IReliableQueue`1.TryPeekAsync(Microsoft.ServiceFabric.Data.ITransaction,System.TimeSpan,System.Threading.CancellationToken)
  id: TryPeekAsync(Microsoft.ServiceFabric.Data.ITransaction,System.TimeSpan,System.Threading.CancellationToken)
  parent: Microsoft.ServiceFabric.Data.Collections.IReliableQueue`1
  langs:
  - csharp
  - vb
  name: TryPeekAsync(ITransaction, TimeSpan, CancellationToken)
  nameWithType: IReliableQueue<T>.TryPeekAsync(ITransaction, TimeSpan, CancellationToken)
  fullName: Microsoft.ServiceFabric.Data.Collections.IReliableQueue<T>.TryPeekAsync(Microsoft.ServiceFabric.Data.ITransaction, System.TimeSpan, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Interfaces/IReliableQueue.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: TryPeekAsync
    path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Interfaces/IReliableQueue.cs
    startLine: 147
  assemblies:
  - Microsoft.ServiceFabric.Data.Interfaces
  namespace: Microsoft.ServiceFabric.Data.Collections
  summary: "\nTries to return an object from the beginning of the reliable queue without removing it.\n"
  example: []
  syntax:
    content: Task<ConditionalValue<T>> TryPeekAsync(ITransaction tx, TimeSpan timeout, CancellationToken cancellationToken)
    content.vb: Function TryPeekAsync(tx As ITransaction, timeout As TimeSpan, cancellationToken As CancellationToken) As Task(Of ConditionalValue(Of T))
    parameters:
    - id: tx
      type: Microsoft.ServiceFabric.Data.ITransaction
      description: Transaction to associate this operation with.
    - id: timeout
      type: System.TimeSpan
      description: The amount of time to wait for the operation to complete before throwing a TimeoutException. Primarily used to prevent deadlocks. The default is 4 seconds.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The token to monitor for cancellation requests. The default is None.
    return:
      type: System.Threading.Tasks.Task{Microsoft.ServiceFabric.Data.ConditionalValue{{T}}}
      description: "\nTask that represents the asynchronous peek operation. The task result is a tuple indicating\nwhether an object was found at the beginning of the queue and if so, the object.\n"
  overload: Microsoft.ServiceFabric.Data.Collections.IReliableQueue`1.TryPeekAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <em>tx</em> is null.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <em>timeout</em> is negative.
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: The operation failed to complete within the given timeout.
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: The operation was canceled.
  - type: System.Fabric.FabricNotReadableException
    commentId: T:System.Fabric.FabricNotReadableException
    description: "\nException indicates that the <cref name=\"IReliableQueue{T}\"></cref> cannot serve reads at the moment.\n<cref name=\"FabricNotReadableException\"></cref> can be thrown in all <cref name=\"ReplicaRole\"></cref>s.\nOne example for it being thrown in the <cref name=\"ReplicaRole.Primary\"></cref> is loss of <cref name=\"IStatefulServicePartition.ReadStatus\"></cref>.\nOne example for it being thrown in the <cref name=\"ReplicaRole.ActiveSecondary\"></cref> is that Reliable Queue's state is not yet consistent.\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\nThe exception that is thrown when a method call is invalid for the object's current state.\nExample, transaction used is already terminated: comitted or aborted.\n"
  nameWithType.vb: IReliableQueue(Of T).TryPeekAsync(ITransaction, TimeSpan, CancellationToken)
  fullName.vb: Microsoft.ServiceFabric.Data.Collections.IReliableQueue(Of T).TryPeekAsync(Microsoft.ServiceFabric.Data.ITransaction, System.TimeSpan, System.Threading.CancellationToken)
- uid: Microsoft.ServiceFabric.Data.Collections.IReliableQueue`1.TryPeekAsync(Microsoft.ServiceFabric.Data.ITransaction,Microsoft.ServiceFabric.Data.Collections.LockMode)
  commentId: M:Microsoft.ServiceFabric.Data.Collections.IReliableQueue`1.TryPeekAsync(Microsoft.ServiceFabric.Data.ITransaction,Microsoft.ServiceFabric.Data.Collections.LockMode)
  id: TryPeekAsync(Microsoft.ServiceFabric.Data.ITransaction,Microsoft.ServiceFabric.Data.Collections.LockMode)
  parent: Microsoft.ServiceFabric.Data.Collections.IReliableQueue`1
  langs:
  - csharp
  - vb
  name: TryPeekAsync(ITransaction, LockMode)
  nameWithType: IReliableQueue<T>.TryPeekAsync(ITransaction, LockMode)
  fullName: Microsoft.ServiceFabric.Data.Collections.IReliableQueue<T>.TryPeekAsync(Microsoft.ServiceFabric.Data.ITransaction, Microsoft.ServiceFabric.Data.Collections.LockMode)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Interfaces/IReliableQueue.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: TryPeekAsync
    path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Interfaces/IReliableQueue.cs
    startLine: 171
  assemblies:
  - Microsoft.ServiceFabric.Data.Interfaces
  namespace: Microsoft.ServiceFabric.Data.Collections
  summary: "\nTries to return an object from the beginning of the reliable queue without removing it.\n"
  example: []
  syntax:
    content: Task<ConditionalValue<T>> TryPeekAsync(ITransaction tx, LockMode lockMode)
    content.vb: Function TryPeekAsync(tx As ITransaction, lockMode As LockMode) As Task(Of ConditionalValue(Of T))
    parameters:
    - id: tx
      type: Microsoft.ServiceFabric.Data.ITransaction
      description: Transaction to associate this operation with.
    - id: lockMode
      type: Microsoft.ServiceFabric.Data.Collections.LockMode
      description: Type of locking to use for this read operation.
    return:
      type: System.Threading.Tasks.Task{Microsoft.ServiceFabric.Data.ConditionalValue{{T}}}
      description: "\nTask that represents the asynchronous peek operation. The task result is a tuple indicating\nwhether an object was found at the beginning of the queue and if so, the object.\n"
  overload: Microsoft.ServiceFabric.Data.Collections.IReliableQueue`1.TryPeekAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <em>tx</em> is null.
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: The operation failed to complete within the default timeout.
  - type: System.Fabric.FabricNotReadableException
    commentId: T:System.Fabric.FabricNotReadableException
    description: "\nException indicates that the <cref name=\"IReliableQueue{T}\"></cref> cannot serve reads at the moment.\n<cref name=\"FabricNotReadableException\"></cref> can be thrown in all <cref name=\"ReplicaRole\"></cref>s.\nOne example for it being thrown in the <cref name=\"ReplicaRole.Primary\"></cref> is loss of <cref name=\"IStatefulServicePartition.ReadStatus\"></cref>.\nOne example for it being thrown in the <cref name=\"ReplicaRole.ActiveSecondary\"></cref> is that Reliable Queue's state is not yet consistent.\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\nThe exception that is thrown when a method call is invalid for the object's current state.\nExample, transaction used is already terminated: comitted or aborted.\n"
  nameWithType.vb: IReliableQueue(Of T).TryPeekAsync(ITransaction, LockMode)
  fullName.vb: Microsoft.ServiceFabric.Data.Collections.IReliableQueue(Of T).TryPeekAsync(Microsoft.ServiceFabric.Data.ITransaction, Microsoft.ServiceFabric.Data.Collections.LockMode)
- uid: Microsoft.ServiceFabric.Data.Collections.IReliableQueue`1.TryPeekAsync(Microsoft.ServiceFabric.Data.ITransaction,Microsoft.ServiceFabric.Data.Collections.LockMode,System.TimeSpan,System.Threading.CancellationToken)
  commentId: M:Microsoft.ServiceFabric.Data.Collections.IReliableQueue`1.TryPeekAsync(Microsoft.ServiceFabric.Data.ITransaction,Microsoft.ServiceFabric.Data.Collections.LockMode,System.TimeSpan,System.Threading.CancellationToken)
  id: TryPeekAsync(Microsoft.ServiceFabric.Data.ITransaction,Microsoft.ServiceFabric.Data.Collections.LockMode,System.TimeSpan,System.Threading.CancellationToken)
  parent: Microsoft.ServiceFabric.Data.Collections.IReliableQueue`1
  langs:
  - csharp
  - vb
  name: TryPeekAsync(ITransaction, LockMode, TimeSpan, CancellationToken)
  nameWithType: IReliableQueue<T>.TryPeekAsync(ITransaction, LockMode, TimeSpan, CancellationToken)
  fullName: Microsoft.ServiceFabric.Data.Collections.IReliableQueue<T>.TryPeekAsync(Microsoft.ServiceFabric.Data.ITransaction, Microsoft.ServiceFabric.Data.Collections.LockMode, System.TimeSpan, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Interfaces/IReliableQueue.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: TryPeekAsync
    path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Interfaces/IReliableQueue.cs
    startLine: 198
  assemblies:
  - Microsoft.ServiceFabric.Data.Interfaces
  namespace: Microsoft.ServiceFabric.Data.Collections
  summary: "\nTries to return an object from the beginning of the reliable queue without removing it.\n"
  example: []
  syntax:
    content: Task<ConditionalValue<T>> TryPeekAsync(ITransaction tx, LockMode lockMode, TimeSpan timeout, CancellationToken cancellationToken)
    content.vb: Function TryPeekAsync(tx As ITransaction, lockMode As LockMode, timeout As TimeSpan, cancellationToken As CancellationToken) As Task(Of ConditionalValue(Of T))
    parameters:
    - id: tx
      type: Microsoft.ServiceFabric.Data.ITransaction
      description: Transaction to associate this operation with.
    - id: lockMode
      type: Microsoft.ServiceFabric.Data.Collections.LockMode
      description: Type of locking to use for this read operation.
    - id: timeout
      type: System.TimeSpan
      description: The amount of time to wait for the operation to complete before throwing a TimeoutException. Primarily used to prevent deadlocks. The default is 4 seconds.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The token to monitor for cancellation requests. The default is None.
    return:
      type: System.Threading.Tasks.Task{Microsoft.ServiceFabric.Data.ConditionalValue{{T}}}
      description: "\nTask that represents the asynchronous peek operation. The task result is a tuple indicating\nwhether an object was found at the beginning of the queue and if so, the object.\n"
  overload: Microsoft.ServiceFabric.Data.Collections.IReliableQueue`1.TryPeekAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <em>tx</em> is null.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <em>timeout</em> is negative.
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: The operation failed to complete within the given timeout.
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: The operation was canceled.
  - type: System.Fabric.FabricNotReadableException
    commentId: T:System.Fabric.FabricNotReadableException
    description: "\nException indicates that the <cref name=\"IReliableQueue{T}\"></cref> cannot serve reads at the moment.\n<cref name=\"FabricNotReadableException\"></cref> can be thrown in all <cref name=\"ReplicaRole\"></cref>s.\nOne example for it being thrown in the <cref name=\"ReplicaRole.Primary\"></cref> is loss of <cref name=\"IStatefulServicePartition.ReadStatus\"></cref>.\nOne example for it being thrown in the <cref name=\"ReplicaRole.ActiveSecondary\"></cref> is that Reliable Queue's state is not yet consistent.\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\nThe exception that is thrown when a method call is invalid for the object's current state.\nExample, transaction used is already terminated: comitted or aborted.\n"
  nameWithType.vb: IReliableQueue(Of T).TryPeekAsync(ITransaction, LockMode, TimeSpan, CancellationToken)
  fullName.vb: Microsoft.ServiceFabric.Data.Collections.IReliableQueue(Of T).TryPeekAsync(Microsoft.ServiceFabric.Data.ITransaction, Microsoft.ServiceFabric.Data.Collections.LockMode, System.TimeSpan, System.Threading.CancellationToken)
- uid: Microsoft.ServiceFabric.Data.Collections.IReliableQueue`1.CreateEnumerableAsync(Microsoft.ServiceFabric.Data.ITransaction)
  commentId: M:Microsoft.ServiceFabric.Data.Collections.IReliableQueue`1.CreateEnumerableAsync(Microsoft.ServiceFabric.Data.ITransaction)
  id: CreateEnumerableAsync(Microsoft.ServiceFabric.Data.ITransaction)
  parent: Microsoft.ServiceFabric.Data.Collections.IReliableQueue`1
  langs:
  - csharp
  - vb
  name: CreateEnumerableAsync(ITransaction)
  nameWithType: IReliableQueue<T>.CreateEnumerableAsync(ITransaction)
  fullName: Microsoft.ServiceFabric.Data.Collections.IReliableQueue<T>.CreateEnumerableAsync(Microsoft.ServiceFabric.Data.ITransaction)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Interfaces/IReliableQueue.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: CreateEnumerableAsync
    path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Interfaces/IReliableQueue.cs
    startLine: 212
  assemblies:
  - Microsoft.ServiceFabric.Data.Interfaces
  namespace: Microsoft.ServiceFabric.Data.Collections
  summary: "\nCreates an async enumerable over the <xref href=\"Microsoft.ServiceFabric.Data.Collections.IReliableQueue%601\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: Task<IAsyncEnumerable<T>> CreateEnumerableAsync(ITransaction tx)
    content.vb: Function CreateEnumerableAsync(tx As ITransaction) As Task(Of IAsyncEnumerable(Of T))
    parameters:
    - id: tx
      type: Microsoft.ServiceFabric.Data.ITransaction
      description: Transaction to associate this operation with.
    return:
      type: System.Threading.Tasks.Task{Microsoft.ServiceFabric.Data.IAsyncEnumerable{{T}}}
      description: IEnumerable that represents all the values.
  overload: Microsoft.ServiceFabric.Data.Collections.IReliableQueue`1.CreateEnumerableAsync*
  exceptions:
  - type: System.Fabric.FabricNotReadableException
    commentId: T:System.Fabric.FabricNotReadableException
    description: "\nException indicates that the <cref name=\"IReliableQueue{T}\"></cref> cannot serve reads at the moment.\n<cref name=\"FabricNotReadableException\"></cref> can be thrown in all <cref name=\"ReplicaRole\"></cref>s.\nOne example for it being thrown in the <cref name=\"ReplicaRole.Primary\"></cref> is loss of <cref name=\"IStatefulServicePartition.ReadStatus\"></cref>.\nOne example for it being thrown in the <cref name=\"ReplicaRole.ActiveSecondary\"></cref> is that Reliable Queue's state is not yet consistent.\n"
  nameWithType.vb: IReliableQueue(Of T).CreateEnumerableAsync(ITransaction)
  fullName.vb: Microsoft.ServiceFabric.Data.Collections.IReliableQueue(Of T).CreateEnumerableAsync(Microsoft.ServiceFabric.Data.ITransaction)
references:
- uid: Microsoft.ServiceFabric.Data.ITransaction
  commentId: T:Microsoft.ServiceFabric.Data.ITransaction
  parent: Microsoft.ServiceFabric.Data
  isExternal: false
  name: ITransaction
  nameWithType: ITransaction
  fullName: Microsoft.ServiceFabric.Data.ITransaction
- uid: Microsoft.ServiceFabric.Data.Collections
  commentId: N:Microsoft.ServiceFabric.Data.Collections
  isExternal: false
  name: Microsoft.ServiceFabric.Data.Collections
  nameWithType: Microsoft.ServiceFabric.Data.Collections
  fullName: Microsoft.ServiceFabric.Data.Collections
- uid: Microsoft.ServiceFabric.Data.Collections.IReliableCollection{{T}}.GetCountAsync(Microsoft.ServiceFabric.Data.ITransaction)
  commentId: M:Microsoft.ServiceFabric.Data.Collections.IReliableCollection{`0}.GetCountAsync(Microsoft.ServiceFabric.Data.ITransaction)
  parent: Microsoft.ServiceFabric.Data.Collections.IReliableCollection{{T}}
  definition: Microsoft.ServiceFabric.Data.Collections.IReliableCollection`1.GetCountAsync(Microsoft.ServiceFabric.Data.ITransaction)
  name: GetCountAsync(ITransaction)
  nameWithType: IReliableCollection<T>.GetCountAsync(ITransaction)
  fullName: Microsoft.ServiceFabric.Data.Collections.IReliableCollection<T>.GetCountAsync(Microsoft.ServiceFabric.Data.ITransaction)
  nameWithType.vb: IReliableCollection(Of T).GetCountAsync(ITransaction)
  fullname.vb: Microsoft.ServiceFabric.Data.Collections.IReliableCollection(Of T).GetCountAsync(Microsoft.ServiceFabric.Data.ITransaction)
  spec.csharp:
  - uid: Microsoft.ServiceFabric.Data.Collections.IReliableCollection`1.GetCountAsync(Microsoft.ServiceFabric.Data.ITransaction)
    name: GetCountAsync
    nameWithType: IReliableCollection<T>.GetCountAsync
    fullName: Microsoft.ServiceFabric.Data.Collections.IReliableCollection<T>.GetCountAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.ServiceFabric.Data.ITransaction
    name: ITransaction
    nameWithType: ITransaction
    fullName: Microsoft.ServiceFabric.Data.ITransaction
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ServiceFabric.Data.Collections.IReliableCollection`1.GetCountAsync(Microsoft.ServiceFabric.Data.ITransaction)
    name: GetCountAsync
    nameWithType: IReliableCollection(Of T).GetCountAsync
    fullName: Microsoft.ServiceFabric.Data.Collections.IReliableCollection(Of T).GetCountAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.ServiceFabric.Data.ITransaction
    name: ITransaction
    nameWithType: ITransaction
    fullName: Microsoft.ServiceFabric.Data.ITransaction
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceFabric.Data.Collections.IReliableCollection{{T}}.ClearAsync
  commentId: M:Microsoft.ServiceFabric.Data.Collections.IReliableCollection{`0}.ClearAsync
  parent: Microsoft.ServiceFabric.Data.Collections.IReliableCollection{{T}}
  definition: Microsoft.ServiceFabric.Data.Collections.IReliableCollection`1.ClearAsync
  name: ClearAsync()
  nameWithType: IReliableCollection<T>.ClearAsync()
  fullName: Microsoft.ServiceFabric.Data.Collections.IReliableCollection<T>.ClearAsync()
  nameWithType.vb: IReliableCollection(Of T).ClearAsync()
  fullname.vb: Microsoft.ServiceFabric.Data.Collections.IReliableCollection(Of T).ClearAsync()
  spec.csharp:
  - uid: Microsoft.ServiceFabric.Data.Collections.IReliableCollection`1.ClearAsync
    name: ClearAsync
    nameWithType: IReliableCollection<T>.ClearAsync
    fullName: Microsoft.ServiceFabric.Data.Collections.IReliableCollection<T>.ClearAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ServiceFabric.Data.Collections.IReliableCollection`1.ClearAsync
    name: ClearAsync
    nameWithType: IReliableCollection(Of T).ClearAsync
    fullName: Microsoft.ServiceFabric.Data.Collections.IReliableCollection(Of T).ClearAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceFabric.Data.IReliableState.Name
  commentId: P:Microsoft.ServiceFabric.Data.IReliableState.Name
  parent: Microsoft.ServiceFabric.Data.IReliableState
  isExternal: false
  name: Name
  nameWithType: IReliableState.Name
  fullName: Microsoft.ServiceFabric.Data.IReliableState.Name
- uid: Microsoft.ServiceFabric.Data.Collections.IReliableQueue`1.System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
  commentId: M:System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  parent: System.Fabric.Messaging.Stream.ByteArraySerializer
  definition: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  name: Serialize<IReliableQueue<T>>()
  nameWithType: ByteArraySerializer.Serialize<IReliableQueue<T>>()
  fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<Microsoft.ServiceFabric.Data.Collections.IReliableQueue<T>>()
  nameWithType.vb: ByteArraySerializer.Serialize(Of IReliableQueue(Of T))()
  fullname.vb: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of Microsoft.ServiceFabric.Data.Collections.IReliableQueue(Of T))()
  name.vb: Serialize(Of IReliableQueue(Of T))()
  spec.csharp:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
    name: Serialize<IReliableQueue<T>>
    nameWithType: ByteArraySerializer.Serialize<IReliableQueue<T>>
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<Microsoft.ServiceFabric.Data.Collections.IReliableQueue<T>>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
    name: Serialize(Of IReliableQueue(Of T))
    nameWithType: ByteArraySerializer.Serialize(Of IReliableQueue(Of T))
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of Microsoft.ServiceFabric.Data.Collections.IReliableQueue(Of T))
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceFabric.Data
  commentId: N:Microsoft.ServiceFabric.Data
  isExternal: false
  name: Microsoft.ServiceFabric.Data
  nameWithType: Microsoft.ServiceFabric.Data
  fullName: Microsoft.ServiceFabric.Data
- uid: Microsoft.ServiceFabric.Data.Collections.IReliableCollection`1.GetCountAsync(Microsoft.ServiceFabric.Data.ITransaction)
  commentId: M:Microsoft.ServiceFabric.Data.Collections.IReliableCollection`1.GetCountAsync(Microsoft.ServiceFabric.Data.ITransaction)
  isExternal: false
  name: GetCountAsync(ITransaction)
  nameWithType: IReliableCollection<T>.GetCountAsync(ITransaction)
  fullName: Microsoft.ServiceFabric.Data.Collections.IReliableCollection<T>.GetCountAsync(Microsoft.ServiceFabric.Data.ITransaction)
  nameWithType.vb: IReliableCollection(Of T).GetCountAsync(ITransaction)
  fullname.vb: Microsoft.ServiceFabric.Data.Collections.IReliableCollection(Of T).GetCountAsync(Microsoft.ServiceFabric.Data.ITransaction)
  spec.csharp:
  - uid: Microsoft.ServiceFabric.Data.Collections.IReliableCollection`1.GetCountAsync(Microsoft.ServiceFabric.Data.ITransaction)
    name: GetCountAsync
    nameWithType: IReliableCollection<T>.GetCountAsync
    fullName: Microsoft.ServiceFabric.Data.Collections.IReliableCollection<T>.GetCountAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.ServiceFabric.Data.ITransaction
    name: ITransaction
    nameWithType: ITransaction
    fullName: Microsoft.ServiceFabric.Data.ITransaction
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ServiceFabric.Data.Collections.IReliableCollection`1.GetCountAsync(Microsoft.ServiceFabric.Data.ITransaction)
    name: GetCountAsync
    nameWithType: IReliableCollection(Of T).GetCountAsync
    fullName: Microsoft.ServiceFabric.Data.Collections.IReliableCollection(Of T).GetCountAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.ServiceFabric.Data.ITransaction
    name: ITransaction
    nameWithType: ITransaction
    fullName: Microsoft.ServiceFabric.Data.ITransaction
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceFabric.Data.Collections.IReliableCollection{{T}}
  commentId: T:Microsoft.ServiceFabric.Data.Collections.IReliableCollection{`0}
  parent: Microsoft.ServiceFabric.Data.Collections
  definition: Microsoft.ServiceFabric.Data.Collections.IReliableCollection`1
  name: IReliableCollection<T>
  nameWithType: IReliableCollection<T>
  fullName: Microsoft.ServiceFabric.Data.Collections.IReliableCollection<T>
  nameWithType.vb: IReliableCollection(Of T)
  fullname.vb: Microsoft.ServiceFabric.Data.Collections.IReliableCollection(Of T)
  name.vb: IReliableCollection(Of T)
  spec.csharp:
  - uid: Microsoft.ServiceFabric.Data.Collections.IReliableCollection`1
    name: IReliableCollection
    nameWithType: IReliableCollection
    fullName: Microsoft.ServiceFabric.Data.Collections.IReliableCollection
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.ServiceFabric.Data.Collections.IReliableCollection`1
    name: IReliableCollection
    nameWithType: IReliableCollection
    fullName: Microsoft.ServiceFabric.Data.Collections.IReliableCollection
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceFabric.Data.Collections.IReliableCollection`1.ClearAsync
  commentId: M:Microsoft.ServiceFabric.Data.Collections.IReliableCollection`1.ClearAsync
  isExternal: false
  name: ClearAsync()
  nameWithType: IReliableCollection<T>.ClearAsync()
  fullName: Microsoft.ServiceFabric.Data.Collections.IReliableCollection<T>.ClearAsync()
  nameWithType.vb: IReliableCollection(Of T).ClearAsync()
  fullname.vb: Microsoft.ServiceFabric.Data.Collections.IReliableCollection(Of T).ClearAsync()
  spec.csharp:
  - uid: Microsoft.ServiceFabric.Data.Collections.IReliableCollection`1.ClearAsync
    name: ClearAsync
    nameWithType: IReliableCollection<T>.ClearAsync
    fullName: Microsoft.ServiceFabric.Data.Collections.IReliableCollection<T>.ClearAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ServiceFabric.Data.Collections.IReliableCollection`1.ClearAsync
    name: ClearAsync
    nameWithType: IReliableCollection(Of T).ClearAsync
    fullName: Microsoft.ServiceFabric.Data.Collections.IReliableCollection(Of T).ClearAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceFabric.Data.IReliableState
  commentId: T:Microsoft.ServiceFabric.Data.IReliableState
  parent: Microsoft.ServiceFabric.Data
  isExternal: false
  name: IReliableState
  nameWithType: IReliableState
  fullName: Microsoft.ServiceFabric.Data.IReliableState
- uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  commentId: M:System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  isExternal: false
  name: Serialize<T>(T)
  nameWithType: ByteArraySerializer.Serialize<T>(T)
  fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<T>(T)
  nameWithType.vb: ByteArraySerializer.Serialize(Of T)(T)
  fullname.vb: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of T)(T)
  name.vb: Serialize(Of T)(T)
  spec.csharp:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
    name: Serialize<T>
    nameWithType: ByteArraySerializer.Serialize<T>
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
    name: Serialize(Of T)
    nameWithType: ByteArraySerializer.Serialize(Of T)
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.Messaging.Stream.ByteArraySerializer
  commentId: T:System.Fabric.Messaging.Stream.ByteArraySerializer
  parent: System.Fabric.Messaging.Stream
  isExternal: false
  name: ByteArraySerializer
  nameWithType: ByteArraySerializer
  fullName: System.Fabric.Messaging.Stream.ByteArraySerializer
- uid: Microsoft.ServiceFabric.Data.Collections.IReliableCollection`1
  commentId: T:Microsoft.ServiceFabric.Data.Collections.IReliableCollection`1
  isExternal: false
  name: IReliableCollection<T>
  nameWithType: IReliableCollection<T>
  fullName: Microsoft.ServiceFabric.Data.Collections.IReliableCollection<T>
  nameWithType.vb: IReliableCollection(Of T)
  fullname.vb: Microsoft.ServiceFabric.Data.Collections.IReliableCollection(Of T)
  name.vb: IReliableCollection(Of T)
  spec.csharp:
  - uid: Microsoft.ServiceFabric.Data.Collections.IReliableCollection`1
    name: IReliableCollection
    nameWithType: IReliableCollection
    fullName: Microsoft.ServiceFabric.Data.Collections.IReliableCollection
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.ServiceFabric.Data.Collections.IReliableCollection`1
    name: IReliableCollection
    nameWithType: IReliableCollection
    fullName: Microsoft.ServiceFabric.Data.Collections.IReliableCollection
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.Messaging.Stream
  commentId: N:System.Fabric.Messaging.Stream
  isExternal: false
  name: System.Fabric.Messaging.Stream
  nameWithType: System.Fabric.Messaging.Stream
  fullName: System.Fabric.Messaging.Stream
- uid: Microsoft.ServiceFabric.Data.Collections.IReliableQueue`1.EnqueueAsync*
  commentId: Overload:Microsoft.ServiceFabric.Data.Collections.IReliableQueue`1.EnqueueAsync
  isExternal: false
  name: EnqueueAsync
  nameWithType: IReliableQueue<T>.EnqueueAsync
  fullName: Microsoft.ServiceFabric.Data.Collections.IReliableQueue<T>.EnqueueAsync
  nameWithType.vb: IReliableQueue(Of T).EnqueueAsync
  fullname.vb: Microsoft.ServiceFabric.Data.Collections.IReliableQueue(Of T).EnqueueAsync
- uid: System.ArgumentNullException
  commentId: T:System.ArgumentNullException
- uid: System.TimeoutException
  commentId: T:System.TimeoutException
- uid: System.Fabric.FabricNotPrimaryException
  commentId: T:System.Fabric.FabricNotPrimaryException
  isExternal: false
  name: FabricNotPrimaryException
  nameWithType: FabricNotPrimaryException
  fullName: System.Fabric.FabricNotPrimaryException
- uid: System.InvalidOperationException
  commentId: T:System.InvalidOperationException
  parent: System
  isExternal: true
  name: InvalidOperationException
  nameWithType: InvalidOperationException
  fullName: System.InvalidOperationException
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: T
  isExternal: false
  name: T
  nameWithType: T
  fullName: T
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: System.ArgumentException
  commentId: T:System.ArgumentException
- uid: System.OperationCanceledException
  commentId: T:System.OperationCanceledException
- uid: System.TimeSpan
  commentId: T:System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: false
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
- uid: Microsoft.ServiceFabric.Data.Collections.IReliableQueue`1.TryDequeueAsync*
  commentId: Overload:Microsoft.ServiceFabric.Data.Collections.IReliableQueue`1.TryDequeueAsync
  isExternal: false
  name: TryDequeueAsync
  nameWithType: IReliableQueue<T>.TryDequeueAsync
  fullName: Microsoft.ServiceFabric.Data.Collections.IReliableQueue<T>.TryDequeueAsync
  nameWithType.vb: IReliableQueue(Of T).TryDequeueAsync
  fullname.vb: Microsoft.ServiceFabric.Data.Collections.IReliableQueue(Of T).TryDequeueAsync
- uid: System.Threading.Tasks.Task{Microsoft.ServiceFabric.Data.ConditionalValue{{T}}}
  commentId: T:System.Threading.Tasks.Task{Microsoft.ServiceFabric.Data.ConditionalValue{``0}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<ConditionalValue<T>>
  nameWithType: Task<ConditionalValue<T>>
  fullName: System.Threading.Tasks.Task<Microsoft.ServiceFabric.Data.ConditionalValue<T>>
  nameWithType.vb: Task(Of ConditionalValue(Of T))
  fullname.vb: System.Threading.Tasks.Task(Of Microsoft.ServiceFabric.Data.ConditionalValue(Of T))
  name.vb: Task(Of ConditionalValue(Of T))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.ServiceFabric.Data.ConditionalValue`1
    name: ConditionalValue
    nameWithType: ConditionalValue
    fullName: Microsoft.ServiceFabric.Data.ConditionalValue
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.ServiceFabric.Data.ConditionalValue`1
    name: ConditionalValue
    nameWithType: ConditionalValue
    fullName: Microsoft.ServiceFabric.Data.ConditionalValue
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullname.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceFabric.Data.Collections.IReliableQueue`1.TryPeekAsync*
  commentId: Overload:Microsoft.ServiceFabric.Data.Collections.IReliableQueue`1.TryPeekAsync
  isExternal: false
  name: TryPeekAsync
  nameWithType: IReliableQueue<T>.TryPeekAsync
  fullName: Microsoft.ServiceFabric.Data.Collections.IReliableQueue<T>.TryPeekAsync
  nameWithType.vb: IReliableQueue(Of T).TryPeekAsync
  fullname.vb: Microsoft.ServiceFabric.Data.Collections.IReliableQueue(Of T).TryPeekAsync
- uid: System.Fabric.FabricNotReadableException
  commentId: T:System.Fabric.FabricNotReadableException
  isExternal: false
  name: FabricNotReadableException
  nameWithType: FabricNotReadableException
  fullName: System.Fabric.FabricNotReadableException
- uid: Microsoft.ServiceFabric.Data.Collections.LockMode
  commentId: T:Microsoft.ServiceFabric.Data.Collections.LockMode
  parent: Microsoft.ServiceFabric.Data.Collections
  isExternal: false
  name: LockMode
  nameWithType: LockMode
  fullName: Microsoft.ServiceFabric.Data.Collections.LockMode
- uid: Microsoft.ServiceFabric.Data.Collections.IReliableQueue`1
  commentId: T:Microsoft.ServiceFabric.Data.Collections.IReliableQueue`1
  isExternal: false
  name: IReliableQueue<T>
  nameWithType: IReliableQueue<T>
  fullName: Microsoft.ServiceFabric.Data.Collections.IReliableQueue<T>
  nameWithType.vb: IReliableQueue(Of T)
  fullname.vb: Microsoft.ServiceFabric.Data.Collections.IReliableQueue(Of T)
  name.vb: IReliableQueue(Of T)
  spec.csharp:
  - uid: Microsoft.ServiceFabric.Data.Collections.IReliableQueue`1
    name: IReliableQueue
    nameWithType: IReliableQueue
    fullName: Microsoft.ServiceFabric.Data.Collections.IReliableQueue
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.ServiceFabric.Data.Collections.IReliableQueue`1
    name: IReliableQueue
    nameWithType: IReliableQueue
    fullName: Microsoft.ServiceFabric.Data.Collections.IReliableQueue
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceFabric.Data.Collections.IReliableQueue`1.CreateEnumerableAsync*
  commentId: Overload:Microsoft.ServiceFabric.Data.Collections.IReliableQueue`1.CreateEnumerableAsync
  isExternal: false
  name: CreateEnumerableAsync
  nameWithType: IReliableQueue<T>.CreateEnumerableAsync
  fullName: Microsoft.ServiceFabric.Data.Collections.IReliableQueue<T>.CreateEnumerableAsync
  nameWithType.vb: IReliableQueue(Of T).CreateEnumerableAsync
  fullname.vb: Microsoft.ServiceFabric.Data.Collections.IReliableQueue(Of T).CreateEnumerableAsync
- uid: System.Threading.Tasks.Task{Microsoft.ServiceFabric.Data.IAsyncEnumerable{{T}}}
  commentId: T:System.Threading.Tasks.Task{Microsoft.ServiceFabric.Data.IAsyncEnumerable{`0}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<IAsyncEnumerable<T>>
  nameWithType: Task<IAsyncEnumerable<T>>
  fullName: System.Threading.Tasks.Task<Microsoft.ServiceFabric.Data.IAsyncEnumerable<T>>
  nameWithType.vb: Task(Of IAsyncEnumerable(Of T))
  fullname.vb: System.Threading.Tasks.Task(Of Microsoft.ServiceFabric.Data.IAsyncEnumerable(Of T))
  name.vb: Task(Of IAsyncEnumerable(Of T))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.ServiceFabric.Data.IAsyncEnumerable`1
    name: IAsyncEnumerable
    nameWithType: IAsyncEnumerable
    fullName: Microsoft.ServiceFabric.Data.IAsyncEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.ServiceFabric.Data.IAsyncEnumerable`1
    name: IAsyncEnumerable
    nameWithType: IAsyncEnumerable
    fullName: Microsoft.ServiceFabric.Data.IAsyncEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
