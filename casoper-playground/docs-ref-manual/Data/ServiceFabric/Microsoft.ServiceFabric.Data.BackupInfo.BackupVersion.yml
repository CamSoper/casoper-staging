### YamlMime:ManagedReference
items:
- uid: Microsoft.ServiceFabric.Data.BackupInfo.BackupVersion
  commentId: T:Microsoft.ServiceFabric.Data.BackupInfo.BackupVersion
  id: BackupInfo.BackupVersion
  parent: Microsoft.ServiceFabric.Data
  children:
  - Microsoft.ServiceFabric.Data.BackupInfo.BackupVersion.#ctor(System.Fabric.Epoch,System.Int64)
  - Microsoft.ServiceFabric.Data.BackupInfo.BackupVersion.CompareTo(Microsoft.ServiceFabric.Data.BackupInfo.BackupVersion)
  - Microsoft.ServiceFabric.Data.BackupInfo.BackupVersion.Epoch
  - Microsoft.ServiceFabric.Data.BackupInfo.BackupVersion.Equals(Microsoft.ServiceFabric.Data.BackupInfo.BackupVersion)
  - Microsoft.ServiceFabric.Data.BackupInfo.BackupVersion.Equals(System.Object)
  - Microsoft.ServiceFabric.Data.BackupInfo.BackupVersion.GetHashCode
  - Microsoft.ServiceFabric.Data.BackupInfo.BackupVersion.InvalidBackupVersion
  - Microsoft.ServiceFabric.Data.BackupInfo.BackupVersion.Lsn
  langs:
  - csharp
  - vb
  name: BackupInfo.BackupVersion
  nameWithType: BackupInfo.BackupVersion
  fullName: Microsoft.ServiceFabric.Data.BackupInfo.BackupVersion
  type: Struct
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Interfaces/BackupInfo.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: BackupVersion
    path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Interfaces/BackupInfo.cs
    startLine: 61
  assemblies:
  - Microsoft.ServiceFabric.Data.Interfaces
  namespace: Microsoft.ServiceFabric.Data
  summary: "\nRepresents the version of the backup.\n"
  example: []
  syntax:
    content: 'public struct BackupVersion : IComparable<BackupInfo.BackupVersion>, IEquatable<BackupInfo.BackupVersion>'
    content.vb: >-
      Public Structure BackupVersion
          Implements IComparable(Of BackupInfo.BackupVersion), IEquatable(Of BackupInfo.BackupVersion)
  implements:
  - System.IComparable{Microsoft.ServiceFabric.Data.BackupInfo.BackupVersion}
  - System.IEquatable{Microsoft.ServiceFabric.Data.BackupInfo.BackupVersion}
  inheritedMembers:
  - System.ValueType.ToString
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetType
  extensionMethods:
  - Microsoft.ServiceFabric.Data.BackupInfo.BackupVersion.System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
  modifiers.csharp:
  - public
  - struct
  modifiers.vb:
  - Public
  - Structure
- uid: Microsoft.ServiceFabric.Data.BackupInfo.BackupVersion.InvalidBackupVersion
  commentId: F:Microsoft.ServiceFabric.Data.BackupInfo.BackupVersion.InvalidBackupVersion
  id: InvalidBackupVersion
  parent: Microsoft.ServiceFabric.Data.BackupInfo.BackupVersion
  langs:
  - csharp
  - vb
  name: InvalidBackupVersion
  nameWithType: BackupInfo.BackupVersion.InvalidBackupVersion
  fullName: Microsoft.ServiceFabric.Data.BackupInfo.BackupVersion.InvalidBackupVersion
  type: Field
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Interfaces/BackupInfo.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: InvalidBackupVersion
    path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Interfaces/BackupInfo.cs
    startLine: 67
  assemblies:
  - Microsoft.ServiceFabric.Data.Interfaces
  namespace: Microsoft.ServiceFabric.Data
  summary: "\nInvalid Backup Version.\n"
  example: []
  syntax:
    content: public static readonly BackupInfo.BackupVersion InvalidBackupVersion
    content.vb: Public Shared ReadOnly InvalidBackupVersion As BackupInfo.BackupVersion
    return:
      type: Microsoft.ServiceFabric.Data.BackupInfo.BackupVersion
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: Microsoft.ServiceFabric.Data.BackupInfo.BackupVersion.#ctor(System.Fabric.Epoch,System.Int64)
  commentId: M:Microsoft.ServiceFabric.Data.BackupInfo.BackupVersion.#ctor(System.Fabric.Epoch,System.Int64)
  id: '#ctor(System.Fabric.Epoch,System.Int64)'
  parent: Microsoft.ServiceFabric.Data.BackupInfo.BackupVersion
  langs:
  - csharp
  - vb
  name: BackupVersion(Epoch, Int64)
  nameWithType: BackupInfo.BackupVersion.BackupVersion(Epoch, Int64)
  fullName: Microsoft.ServiceFabric.Data.BackupInfo.BackupVersion.BackupVersion(System.Fabric.Epoch, System.Int64)
  type: Constructor
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Interfaces/BackupInfo.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: .ctor
    path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Interfaces/BackupInfo.cs
    startLine: 77
  assemblies:
  - Microsoft.ServiceFabric.Data.Interfaces
  namespace: Microsoft.ServiceFabric.Data
  summary: "\nInitializes a new instance of the <cref name=\"BackupVersion\"></cref>\n"
  example: []
  syntax:
    content: public BackupVersion(Epoch epoch, long lsn)
    content.vb: Public Sub New(epoch As Epoch, lsn As Long)
    parameters:
    - id: epoch
      type: System.Fabric.Epoch
      description: The <cref name="Epoch"></cref> at which the backup was taken.
    - id: lsn
      type: System.Int64
      description: The last committed logical sequence number included in the backup.
  overload: Microsoft.ServiceFabric.Data.BackupInfo.BackupVersion.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceFabric.Data.BackupInfo.BackupVersion.Epoch
  commentId: P:Microsoft.ServiceFabric.Data.BackupInfo.BackupVersion.Epoch
  id: Epoch
  parent: Microsoft.ServiceFabric.Data.BackupInfo.BackupVersion
  langs:
  - csharp
  - vb
  name: Epoch
  nameWithType: BackupInfo.BackupVersion.Epoch
  fullName: Microsoft.ServiceFabric.Data.BackupInfo.BackupVersion.Epoch
  type: Property
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Interfaces/BackupInfo.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: Epoch
    path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Interfaces/BackupInfo.cs
    startLine: 87
  assemblies:
  - Microsoft.ServiceFabric.Data.Interfaces
  namespace: Microsoft.ServiceFabric.Data
  summary: "\nGets the <cref name=\"Epoch\"></cref> at which the backup was taken.\n"
  example: []
  syntax:
    content: public Epoch Epoch { get; }
    content.vb: Public ReadOnly Property Epoch As Epoch
    parameters: []
    return:
      type: System.Fabric.Epoch
      description: The <cref name="Epoch"></cref> at which the backup was taken.
  overload: Microsoft.ServiceFabric.Data.BackupInfo.BackupVersion.Epoch*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.ServiceFabric.Data.BackupInfo.BackupVersion.Lsn
  commentId: P:Microsoft.ServiceFabric.Data.BackupInfo.BackupVersion.Lsn
  id: Lsn
  parent: Microsoft.ServiceFabric.Data.BackupInfo.BackupVersion
  langs:
  - csharp
  - vb
  name: Lsn
  nameWithType: BackupInfo.BackupVersion.Lsn
  fullName: Microsoft.ServiceFabric.Data.BackupInfo.BackupVersion.Lsn
  type: Property
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Interfaces/BackupInfo.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: Lsn
    path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Interfaces/BackupInfo.cs
    startLine: 94
  assemblies:
  - Microsoft.ServiceFabric.Data.Interfaces
  namespace: Microsoft.ServiceFabric.Data
  summary: "\nGets the last committed logical sequence number included in the backup.\n"
  example: []
  syntax:
    content: public long Lsn { get; }
    content.vb: Public ReadOnly Property Lsn As Long
    parameters: []
    return:
      type: System.Int64
      description: The last committed logical sequence number included in the backup.
  overload: Microsoft.ServiceFabric.Data.BackupInfo.BackupVersion.Lsn*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.ServiceFabric.Data.BackupInfo.BackupVersion.CompareTo(Microsoft.ServiceFabric.Data.BackupInfo.BackupVersion)
  commentId: M:Microsoft.ServiceFabric.Data.BackupInfo.BackupVersion.CompareTo(Microsoft.ServiceFabric.Data.BackupInfo.BackupVersion)
  id: CompareTo(Microsoft.ServiceFabric.Data.BackupInfo.BackupVersion)
  parent: Microsoft.ServiceFabric.Data.BackupInfo.BackupVersion
  langs:
  - csharp
  - vb
  name: CompareTo(BackupInfo.BackupVersion)
  nameWithType: BackupInfo.BackupVersion.CompareTo(BackupInfo.BackupVersion)
  fullName: Microsoft.ServiceFabric.Data.BackupInfo.BackupVersion.CompareTo(Microsoft.ServiceFabric.Data.BackupInfo.BackupVersion)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Interfaces/BackupInfo.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: CompareTo
    path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Interfaces/BackupInfo.cs
    startLine: 108
  assemblies:
  - Microsoft.ServiceFabric.Data.Interfaces
  namespace: Microsoft.ServiceFabric.Data
  summary: "\nCompares this instance with a specified <cref name=\"BackupVersion\"></cref> object and indicates whether this instance precedes, \nfollows, or appears in the same position in the sort order as the specified <cref name=\"BackupVersion\"></cref>. \n"
  example: []
  syntax:
    content: public int CompareTo(BackupInfo.BackupVersion other)
    content.vb: Public Function CompareTo(other As BackupInfo.BackupVersion) As Integer
    parameters:
    - id: other
      type: Microsoft.ServiceFabric.Data.BackupInfo.BackupVersion
      description: An object that evaluates to a <cref name="BackupVersion"></cref>.
    return:
      type: System.Int32
      description: "\nA value that indicates the relative order of the objects being compared.\nLess than zero indicates that this instance precedes other in the sort order.\nZero indicates that this instance occurs in the same position in the sort order as other. \nGreater than zero indicates that this instance follows other in the sort order.\n"
  overload: Microsoft.ServiceFabric.Data.BackupInfo.BackupVersion.CompareTo*
  implements:
  - System.IComparable{Microsoft.ServiceFabric.Data.BackupInfo.BackupVersion}.CompareTo(Microsoft.ServiceFabric.Data.BackupInfo.BackupVersion)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceFabric.Data.BackupInfo.BackupVersion.Equals(Microsoft.ServiceFabric.Data.BackupInfo.BackupVersion)
  commentId: M:Microsoft.ServiceFabric.Data.BackupInfo.BackupVersion.Equals(Microsoft.ServiceFabric.Data.BackupInfo.BackupVersion)
  id: Equals(Microsoft.ServiceFabric.Data.BackupInfo.BackupVersion)
  parent: Microsoft.ServiceFabric.Data.BackupInfo.BackupVersion
  langs:
  - csharp
  - vb
  name: Equals(BackupInfo.BackupVersion)
  nameWithType: BackupInfo.BackupVersion.Equals(BackupInfo.BackupVersion)
  fullName: Microsoft.ServiceFabric.Data.BackupInfo.BackupVersion.Equals(Microsoft.ServiceFabric.Data.BackupInfo.BackupVersion)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Interfaces/BackupInfo.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: Equals
    path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Interfaces/BackupInfo.cs
    startLine: 127
  assemblies:
  - Microsoft.ServiceFabric.Data.Interfaces
  namespace: Microsoft.ServiceFabric.Data
  summary: "\nDetermines whether this instance and another specified <cref name=\"BackupVersion\"></cref> object have the same value.\n"
  example: []
  syntax:
    content: public bool Equals(BackupInfo.BackupVersion other)
    content.vb: Public Function Equals(other As BackupInfo.BackupVersion) As Boolean
    parameters:
    - id: other
      type: Microsoft.ServiceFabric.Data.BackupInfo.BackupVersion
      description: 'The <cref name="BackupVersion"></cref> to compare to this instance. '
    return:
      type: System.Boolean
      description: "\ntrue if the value of the value parameter is the same as the value of this instance; otherwise, false. \n"
  overload: Microsoft.ServiceFabric.Data.BackupInfo.BackupVersion.Equals*
  implements:
  - System.IEquatable{Microsoft.ServiceFabric.Data.BackupInfo.BackupVersion}.Equals(Microsoft.ServiceFabric.Data.BackupInfo.BackupVersion)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceFabric.Data.BackupInfo.BackupVersion.Equals(System.Object)
  commentId: M:Microsoft.ServiceFabric.Data.BackupInfo.BackupVersion.Equals(System.Object)
  id: Equals(System.Object)
  parent: Microsoft.ServiceFabric.Data.BackupInfo.BackupVersion
  langs:
  - csharp
  - vb
  name: Equals(Object)
  nameWithType: BackupInfo.BackupVersion.Equals(Object)
  fullName: Microsoft.ServiceFabric.Data.BackupInfo.BackupVersion.Equals(System.Object)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Interfaces/BackupInfo.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: Equals
    path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Interfaces/BackupInfo.cs
    startLine: 144
  assemblies:
  - Microsoft.ServiceFabric.Data.Interfaces
  namespace: Microsoft.ServiceFabric.Data
  summary: "\nDetermines whether this instance and another specified <cref name=\"BackupVersion\"></cref> object have the same value.\n"
  example: []
  syntax:
    content: public override bool Equals(object obj)
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
    parameters:
    - id: obj
      type: System.Object
      description: 'The <cref name="BackupVersion"></cref> to compare to this instance. '
    return:
      type: System.Boolean
      description: "\ntrue if the value of the value parameter is the same as the value of this instance; otherwise, false. \n"
  overridden: System.ValueType.Equals(System.Object)
  overload: Microsoft.ServiceFabric.Data.BackupInfo.BackupVersion.Equals*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Microsoft.ServiceFabric.Data.BackupInfo.BackupVersion.GetHashCode
  commentId: M:Microsoft.ServiceFabric.Data.BackupInfo.BackupVersion.GetHashCode
  id: GetHashCode
  parent: Microsoft.ServiceFabric.Data.BackupInfo.BackupVersion
  langs:
  - csharp
  - vb
  name: GetHashCode()
  nameWithType: BackupInfo.BackupVersion.GetHashCode()
  fullName: Microsoft.ServiceFabric.Data.BackupInfo.BackupVersion.GetHashCode()
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Interfaces/BackupInfo.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: GetHashCode
    path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Interfaces/BackupInfo.cs
    startLine: 160
  assemblies:
  - Microsoft.ServiceFabric.Data.Interfaces
  namespace: Microsoft.ServiceFabric.Data
  summary: "\nReturns the hash code for this <cref name=\"BackupVersion\"></cref>.\n"
  example: []
  syntax:
    content: public override int GetHashCode()
    content.vb: Public Overrides Function GetHashCode As Integer
    return:
      type: System.Int32
      description: "\nA 32-bit signed integer hash code.\n"
  overridden: System.ValueType.GetHashCode
  overload: Microsoft.ServiceFabric.Data.BackupInfo.BackupVersion.GetHashCode*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
references:
- uid: Microsoft.ServiceFabric.Data
  commentId: N:Microsoft.ServiceFabric.Data
  isExternal: false
  name: Microsoft.ServiceFabric.Data
  nameWithType: Microsoft.ServiceFabric.Data
  fullName: Microsoft.ServiceFabric.Data
- uid: System.IComparable{Microsoft.ServiceFabric.Data.BackupInfo.BackupVersion}
  commentId: T:System.IComparable{Microsoft.ServiceFabric.Data.BackupInfo.BackupVersion}
  parent: System
  definition: System.IComparable`1
  name: IComparable<BackupInfo.BackupVersion>
  nameWithType: IComparable<BackupInfo.BackupVersion>
  fullName: System.IComparable<Microsoft.ServiceFabric.Data.BackupInfo.BackupVersion>
  nameWithType.vb: IComparable(Of BackupInfo.BackupVersion)
  fullname.vb: System.IComparable(Of Microsoft.ServiceFabric.Data.BackupInfo.BackupVersion)
  name.vb: IComparable(Of BackupInfo.BackupVersion)
  spec.csharp:
  - uid: System.IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: System.IComparable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.ServiceFabric.Data.BackupInfo.BackupVersion
    name: BackupInfo.BackupVersion
    nameWithType: BackupInfo.BackupVersion
    fullName: Microsoft.ServiceFabric.Data.BackupInfo.BackupVersion
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: System.IComparable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.ServiceFabric.Data.BackupInfo.BackupVersion
    name: BackupInfo.BackupVersion
    nameWithType: BackupInfo.BackupVersion
    fullName: Microsoft.ServiceFabric.Data.BackupInfo.BackupVersion
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IEquatable{Microsoft.ServiceFabric.Data.BackupInfo.BackupVersion}
  commentId: T:System.IEquatable{Microsoft.ServiceFabric.Data.BackupInfo.BackupVersion}
  parent: System
  definition: System.IEquatable`1
  name: IEquatable<BackupInfo.BackupVersion>
  nameWithType: IEquatable<BackupInfo.BackupVersion>
  fullName: System.IEquatable<Microsoft.ServiceFabric.Data.BackupInfo.BackupVersion>
  nameWithType.vb: IEquatable(Of BackupInfo.BackupVersion)
  fullname.vb: System.IEquatable(Of Microsoft.ServiceFabric.Data.BackupInfo.BackupVersion)
  name.vb: IEquatable(Of BackupInfo.BackupVersion)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.ServiceFabric.Data.BackupInfo.BackupVersion
    name: BackupInfo.BackupVersion
    nameWithType: BackupInfo.BackupVersion
    fullName: Microsoft.ServiceFabric.Data.BackupInfo.BackupVersion
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.ServiceFabric.Data.BackupInfo.BackupVersion
    name: BackupInfo.BackupVersion
    nameWithType: BackupInfo.BackupVersion
    fullName: Microsoft.ServiceFabric.Data.BackupInfo.BackupVersion
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueType.ToString
  commentId: M:System.ValueType.ToString
  parent: System.ValueType
  isExternal: true
  name: ToString()
  nameWithType: ValueType.ToString()
  fullName: System.ValueType.ToString()
  spec.csharp:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceFabric.Data.BackupInfo.BackupVersion.System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
  commentId: M:System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  parent: System.Fabric.Messaging.Stream.ByteArraySerializer
  definition: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  name: Serialize<BackupInfo.BackupVersion>()
  nameWithType: ByteArraySerializer.Serialize<BackupInfo.BackupVersion>()
  fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<Microsoft.ServiceFabric.Data.BackupInfo.BackupVersion>()
  nameWithType.vb: ByteArraySerializer.Serialize(Of BackupInfo.BackupVersion)()
  fullname.vb: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of Microsoft.ServiceFabric.Data.BackupInfo.BackupVersion)()
  name.vb: Serialize(Of BackupInfo.BackupVersion)()
  spec.csharp:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
    name: Serialize<BackupInfo.BackupVersion>
    nameWithType: ByteArraySerializer.Serialize<BackupInfo.BackupVersion>
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<Microsoft.ServiceFabric.Data.BackupInfo.BackupVersion>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
    name: Serialize(Of BackupInfo.BackupVersion)
    nameWithType: ByteArraySerializer.Serialize(Of BackupInfo.BackupVersion)
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of Microsoft.ServiceFabric.Data.BackupInfo.BackupVersion)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IComparable`1
  commentId: T:System.IComparable`1
  isExternal: true
  name: IComparable<T>
  nameWithType: IComparable<T>
  fullName: System.IComparable<T>
  nameWithType.vb: IComparable(Of T)
  fullname.vb: System.IComparable(Of T)
  name.vb: IComparable(Of T)
  spec.csharp:
  - uid: System.IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: System.IComparable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: System.IComparable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.IEquatable`1
  commentId: T:System.IEquatable`1
  isExternal: true
  name: IEquatable<T>
  nameWithType: IEquatable<T>
  fullName: System.IEquatable<T>
  nameWithType.vb: IEquatable(Of T)
  fullname.vb: System.IEquatable(Of T)
  name.vb: IEquatable(Of T)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueType
  commentId: T:System.ValueType
  parent: System
  isExternal: true
  name: ValueType
  nameWithType: ValueType
  fullName: System.ValueType
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  commentId: M:System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  isExternal: false
  name: Serialize<T>(T)
  nameWithType: ByteArraySerializer.Serialize<T>(T)
  fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<T>(T)
  nameWithType.vb: ByteArraySerializer.Serialize(Of T)(T)
  fullname.vb: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of T)(T)
  name.vb: Serialize(Of T)(T)
  spec.csharp:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
    name: Serialize<T>
    nameWithType: ByteArraySerializer.Serialize<T>
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
    name: Serialize(Of T)
    nameWithType: ByteArraySerializer.Serialize(Of T)
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.Messaging.Stream.ByteArraySerializer
  commentId: T:System.Fabric.Messaging.Stream.ByteArraySerializer
  parent: System.Fabric.Messaging.Stream
  isExternal: false
  name: ByteArraySerializer
  nameWithType: ByteArraySerializer
  fullName: System.Fabric.Messaging.Stream.ByteArraySerializer
- uid: System.Fabric.Messaging.Stream
  commentId: N:System.Fabric.Messaging.Stream
  isExternal: false
  name: System.Fabric.Messaging.Stream
  nameWithType: System.Fabric.Messaging.Stream
  fullName: System.Fabric.Messaging.Stream
- uid: Microsoft.ServiceFabric.Data.BackupInfo.BackupVersion
  commentId: T:Microsoft.ServiceFabric.Data.BackupInfo.BackupVersion
  parent: Microsoft.ServiceFabric.Data
  isExternal: false
  name: BackupInfo.BackupVersion
  nameWithType: BackupInfo.BackupVersion
  fullName: Microsoft.ServiceFabric.Data.BackupInfo.BackupVersion
- uid: Microsoft.ServiceFabric.Data.BackupInfo.BackupVersion.#ctor*
  commentId: Overload:Microsoft.ServiceFabric.Data.BackupInfo.BackupVersion.#ctor
  isExternal: false
  name: BackupVersion
  nameWithType: BackupInfo.BackupVersion.BackupVersion
  fullName: Microsoft.ServiceFabric.Data.BackupInfo.BackupVersion.BackupVersion
- uid: System.Fabric.Epoch
  commentId: T:System.Fabric.Epoch
  parent: System.Fabric
  isExternal: false
  name: Epoch
  nameWithType: Epoch
  fullName: System.Fabric.Epoch
- uid: System.Int64
  commentId: T:System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.Fabric
  commentId: N:System.Fabric
  isExternal: false
  name: System.Fabric
  nameWithType: System.Fabric
  fullName: System.Fabric
- uid: Microsoft.ServiceFabric.Data.BackupInfo.BackupVersion.Epoch*
  commentId: Overload:Microsoft.ServiceFabric.Data.BackupInfo.BackupVersion.Epoch
  isExternal: false
  name: Epoch
  nameWithType: BackupInfo.BackupVersion.Epoch
  fullName: Microsoft.ServiceFabric.Data.BackupInfo.BackupVersion.Epoch
- uid: Microsoft.ServiceFabric.Data.BackupInfo.BackupVersion.Lsn*
  commentId: Overload:Microsoft.ServiceFabric.Data.BackupInfo.BackupVersion.Lsn
  isExternal: false
  name: Lsn
  nameWithType: BackupInfo.BackupVersion.Lsn
  fullName: Microsoft.ServiceFabric.Data.BackupInfo.BackupVersion.Lsn
- uid: Microsoft.ServiceFabric.Data.BackupInfo.BackupVersion.CompareTo*
  commentId: Overload:Microsoft.ServiceFabric.Data.BackupInfo.BackupVersion.CompareTo
  isExternal: false
  name: CompareTo
  nameWithType: BackupInfo.BackupVersion.CompareTo
  fullName: Microsoft.ServiceFabric.Data.BackupInfo.BackupVersion.CompareTo
- uid: System.IComparable{Microsoft.ServiceFabric.Data.BackupInfo.BackupVersion}.CompareTo(Microsoft.ServiceFabric.Data.BackupInfo.BackupVersion)
  commentId: M:System.IComparable{Microsoft.ServiceFabric.Data.BackupInfo.BackupVersion}.CompareTo(Microsoft.ServiceFabric.Data.BackupInfo.BackupVersion)
  parent: System.IComparable{Microsoft.ServiceFabric.Data.BackupInfo.BackupVersion}
  definition: System.IComparable`1.CompareTo(`0)
  name: CompareTo(BackupInfo.BackupVersion)
  nameWithType: IComparable<BackupInfo.BackupVersion>.CompareTo(BackupInfo.BackupVersion)
  fullName: System.IComparable<Microsoft.ServiceFabric.Data.BackupInfo.BackupVersion>.CompareTo(Microsoft.ServiceFabric.Data.BackupInfo.BackupVersion)
  nameWithType.vb: IComparable(Of BackupInfo.BackupVersion).CompareTo(BackupInfo.BackupVersion)
  fullname.vb: System.IComparable(Of Microsoft.ServiceFabric.Data.BackupInfo.BackupVersion).CompareTo(Microsoft.ServiceFabric.Data.BackupInfo.BackupVersion)
  spec.csharp:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    nameWithType: IComparable<BackupInfo.BackupVersion>.CompareTo
    fullName: System.IComparable<Microsoft.ServiceFabric.Data.BackupInfo.BackupVersion>.CompareTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.ServiceFabric.Data.BackupInfo.BackupVersion
    name: BackupInfo.BackupVersion
    nameWithType: BackupInfo.BackupVersion
    fullName: Microsoft.ServiceFabric.Data.BackupInfo.BackupVersion
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    nameWithType: IComparable(Of BackupInfo.BackupVersion).CompareTo
    fullName: System.IComparable(Of Microsoft.ServiceFabric.Data.BackupInfo.BackupVersion).CompareTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.ServiceFabric.Data.BackupInfo.BackupVersion
    name: BackupInfo.BackupVersion
    nameWithType: BackupInfo.BackupVersion
    fullName: Microsoft.ServiceFabric.Data.BackupInfo.BackupVersion
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.IComparable`1.CompareTo(`0)
  commentId: M:System.IComparable`1.CompareTo(`0)
  isExternal: true
  name: CompareTo(T)
  nameWithType: IComparable<T>.CompareTo(T)
  fullName: System.IComparable<T>.CompareTo(T)
  nameWithType.vb: IComparable(Of T).CompareTo(T)
  fullname.vb: System.IComparable(Of T).CompareTo(T)
  spec.csharp:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    nameWithType: IComparable<T>.CompareTo
    fullName: System.IComparable<T>.CompareTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    nameWithType: IComparable(Of T).CompareTo
    fullName: System.IComparable(Of T).CompareTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceFabric.Data.BackupInfo.BackupVersion.Equals*
  commentId: Overload:Microsoft.ServiceFabric.Data.BackupInfo.BackupVersion.Equals
  isExternal: false
  name: Equals
  nameWithType: BackupInfo.BackupVersion.Equals
  fullName: Microsoft.ServiceFabric.Data.BackupInfo.BackupVersion.Equals
- uid: System.IEquatable{Microsoft.ServiceFabric.Data.BackupInfo.BackupVersion}.Equals(Microsoft.ServiceFabric.Data.BackupInfo.BackupVersion)
  commentId: M:System.IEquatable{Microsoft.ServiceFabric.Data.BackupInfo.BackupVersion}.Equals(Microsoft.ServiceFabric.Data.BackupInfo.BackupVersion)
  parent: System.IEquatable{Microsoft.ServiceFabric.Data.BackupInfo.BackupVersion}
  definition: System.IEquatable`1.Equals(`0)
  name: Equals(BackupInfo.BackupVersion)
  nameWithType: IEquatable<BackupInfo.BackupVersion>.Equals(BackupInfo.BackupVersion)
  fullName: System.IEquatable<Microsoft.ServiceFabric.Data.BackupInfo.BackupVersion>.Equals(Microsoft.ServiceFabric.Data.BackupInfo.BackupVersion)
  nameWithType.vb: IEquatable(Of BackupInfo.BackupVersion).Equals(BackupInfo.BackupVersion)
  fullname.vb: System.IEquatable(Of Microsoft.ServiceFabric.Data.BackupInfo.BackupVersion).Equals(Microsoft.ServiceFabric.Data.BackupInfo.BackupVersion)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable<BackupInfo.BackupVersion>.Equals
    fullName: System.IEquatable<Microsoft.ServiceFabric.Data.BackupInfo.BackupVersion>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.ServiceFabric.Data.BackupInfo.BackupVersion
    name: BackupInfo.BackupVersion
    nameWithType: BackupInfo.BackupVersion
    fullName: Microsoft.ServiceFabric.Data.BackupInfo.BackupVersion
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable(Of BackupInfo.BackupVersion).Equals
    fullName: System.IEquatable(Of Microsoft.ServiceFabric.Data.BackupInfo.BackupVersion).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.ServiceFabric.Data.BackupInfo.BackupVersion
    name: BackupInfo.BackupVersion
    nameWithType: BackupInfo.BackupVersion
    fullName: Microsoft.ServiceFabric.Data.BackupInfo.BackupVersion
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.IEquatable`1.Equals(`0)
  commentId: M:System.IEquatable`1.Equals(`0)
  isExternal: true
  name: Equals(T)
  nameWithType: IEquatable<T>.Equals(T)
  fullName: System.IEquatable<T>.Equals(T)
  nameWithType.vb: IEquatable(Of T).Equals(T)
  fullname.vb: System.IEquatable(Of T).Equals(T)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable<T>.Equals
    fullName: System.IEquatable<T>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable(Of T).Equals
    fullName: System.IEquatable(Of T).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueType.Equals(System.Object)
  commentId: M:System.ValueType.Equals(System.Object)
  parent: System.ValueType
  isExternal: true
  name: Equals(Object)
  nameWithType: ValueType.Equals(Object)
  fullName: System.ValueType.Equals(System.Object)
  spec.csharp:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueType.GetHashCode
  commentId: M:System.ValueType.GetHashCode
  parent: System.ValueType
  isExternal: true
  name: GetHashCode()
  nameWithType: ValueType.GetHashCode()
  fullName: System.ValueType.GetHashCode()
  spec.csharp:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceFabric.Data.BackupInfo.BackupVersion.GetHashCode*
  commentId: Overload:Microsoft.ServiceFabric.Data.BackupInfo.BackupVersion.GetHashCode
  isExternal: false
  name: GetHashCode
  nameWithType: BackupInfo.BackupVersion.GetHashCode
  fullName: Microsoft.ServiceFabric.Data.BackupInfo.BackupVersion.GetHashCode
