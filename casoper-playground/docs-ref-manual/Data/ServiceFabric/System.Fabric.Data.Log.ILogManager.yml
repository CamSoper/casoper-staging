### YamlMime:ManagedReference
items:
- uid: System.Fabric.Data.Log.ILogManager
  commentId: T:System.Fabric.Data.Log.ILogManager
  id: ILogManager
  parent: System.Fabric.Data.Log
  children:
  - System.Fabric.Data.Log.ILogManager.Abort
  - System.Fabric.Data.Log.ILogManager.CloseAsync(System.Threading.CancellationToken)
  - System.Fabric.Data.Log.ILogManager.CreatePhysicalLogAsync(System.String,System.Guid,System.Int64,System.UInt32,System.UInt32,System.Fabric.Data.Log.LogManager.LogCreationFlags,System.Threading.CancellationToken)
  - System.Fabric.Data.Log.ILogManager.DeletePhysicalLogAsync(System.String,System.Guid,System.Threading.CancellationToken)
  - System.Fabric.Data.Log.ILogManager.OpenPhysicalLogAsync(System.String,System.Guid,System.Threading.CancellationToken)
  langs:
  - csharp
  - vb
  name: ILogManager
  nameWithType: ILogManager
  fullName: System.Fabric.Data.Log.ILogManager
  type: Interface
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Impl/Log/Interfaces.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: ILogManager
    path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Impl/Log/Interfaces.cs
    startLine: 49
  assemblies:
  - Microsoft.ServiceFabric.Data.Impl
  namespace: System.Fabric.Data.Log
  summary: "\nA LogManager implementation is the root of the log system object hierarchy within an AppDomain. To \nsupport isolated/partitioned views into this AppDomain-wide hierarchy, ILogManager handle instances \nare provided via the LogManager.OpenAsync() static method. \n\nAll other log-related objects are created directly or indirectly through the ILogManager instances.\n"
  example: []
  syntax:
    content: 'public interface ILogManager : IDisposable'
    content.vb: >-
      Public Interface ILogManager
          Inherits IDisposable
  inheritedMembers:
  - System.IDisposable.Dispose
  extensionMethods:
  - System.Fabric.Data.Log.ILogManager.System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: System.Fabric.Data.Log.ILogManager.CloseAsync(System.Threading.CancellationToken)
  commentId: M:System.Fabric.Data.Log.ILogManager.CloseAsync(System.Threading.CancellationToken)
  id: CloseAsync(System.Threading.CancellationToken)
  parent: System.Fabric.Data.Log.ILogManager
  langs:
  - csharp
  - vb
  name: CloseAsync(CancellationToken)
  nameWithType: ILogManager.CloseAsync(CancellationToken)
  fullName: System.Fabric.Data.Log.ILogManager.CloseAsync(System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Impl/Log/Interfaces.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: CloseAsync
    path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Impl/Log/Interfaces.cs
    startLine: 61
  assemblies:
  - Microsoft.ServiceFabric.Data.Impl
  namespace: System.Fabric.Data.Log
  summary: "\nClose the log manager asynchronously\n\nNOTE: Any currently opened IPhysicalLog instances that were created/opened thru a current ILogManager\n   will remain open - they have an independent life-span once created.\n\nKnown Exceptions:\n\n"
  example: []
  syntax:
    content: Task CloseAsync(CancellationToken cancellationToken)
    content.vb: Function CloseAsync(cancellationToken As CancellationToken) As Task
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: Used to cancel the OpenAsync operation
    return:
      type: System.Threading.Tasks.Task
  overload: System.Fabric.Data.Log.ILogManager.CloseAsync*
- uid: System.Fabric.Data.Log.ILogManager.Abort
  commentId: M:System.Fabric.Data.Log.ILogManager.Abort
  id: Abort
  parent: System.Fabric.Data.Log.ILogManager
  langs:
  - csharp
  - vb
  name: Abort()
  nameWithType: ILogManager.Abort()
  fullName: System.Fabric.Data.Log.ILogManager.Abort()
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Impl/Log/Interfaces.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: Abort
    path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Impl/Log/Interfaces.cs
    startLine: 72
  assemblies:
  - Microsoft.ServiceFabric.Data.Impl
  namespace: System.Fabric.Data.Log
  summary: "\nAbort the log manager handle synchronously - will occur automatically thru GC if CloseAsync is not called.\n\nNOTE: Any currently opened IPhysicalLog instances that were created/opened thru a current ILogManager\n   will remain open - they have an independent life-span once created.\n\nKnown Exceptions:\n\n"
  example: []
  syntax:
    content: void Abort()
    content.vb: Sub Abort
  overload: System.Fabric.Data.Log.ILogManager.Abort*
- uid: System.Fabric.Data.Log.ILogManager.CreatePhysicalLogAsync(System.String,System.Guid,System.Int64,System.UInt32,System.UInt32,System.Fabric.Data.Log.LogManager.LogCreationFlags,System.Threading.CancellationToken)
  commentId: M:System.Fabric.Data.Log.ILogManager.CreatePhysicalLogAsync(System.String,System.Guid,System.Int64,System.UInt32,System.UInt32,System.Fabric.Data.Log.LogManager.LogCreationFlags,System.Threading.CancellationToken)
  id: CreatePhysicalLogAsync(System.String,System.Guid,System.Int64,System.UInt32,System.UInt32,System.Fabric.Data.Log.LogManager.LogCreationFlags,System.Threading.CancellationToken)
  parent: System.Fabric.Data.Log.ILogManager
  langs:
  - csharp
  - vb
  name: CreatePhysicalLogAsync(String, Guid, Int64, UInt32, UInt32, LogManager.LogCreationFlags, CancellationToken)
  nameWithType: ILogManager.CreatePhysicalLogAsync(String, Guid, Int64, UInt32, UInt32, LogManager.LogCreationFlags, CancellationToken)
  fullName: System.Fabric.Data.Log.ILogManager.CreatePhysicalLogAsync(System.String, System.Guid, System.Int64, System.UInt32, System.UInt32, System.Fabric.Data.Log.LogManager.LogCreationFlags, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Impl/Log/Interfaces.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: CreatePhysicalLogAsync
    path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Impl/Log/Interfaces.cs
    startLine: 98
  assemblies:
  - Microsoft.ServiceFabric.Data.Impl
  namespace: System.Fabric.Data.Log
  summary: "\nCreate a new physical log after which the container storage structures exists for the new physical log.\n\nKnown Exceptions:\n\nSystem.Fabric.FabricException\nSystem.IOException\nSystem.IO.DirectoryNotFoundException\nSystem.IO.DriveNotFoundException\nSystem.IO.FileNotFoundException\nSystem.IO.PathTooLongException\nUnauthorizedAccessException\nFabricObjectClosedException\n\n"
  example: []
  syntax:
    content: Task<IPhysicalLog> CreatePhysicalLogAsync(string pathToCommonContainer, Guid physicalLogId, long containerSize, uint maximumNumberStreams, uint maximumLogicalLogBlockSize, LogManager.LogCreationFlags creationFlags, CancellationToken cancellationToken)
    content.vb: Function CreatePhysicalLogAsync(pathToCommonContainer As String, physicalLogId As Guid, containerSize As Long, maximumNumberStreams As UInteger, maximumLogicalLogBlockSize As UInteger, creationFlags As LogManager.LogCreationFlags, cancellationToken As CancellationToken) As Task(Of IPhysicalLog)
    parameters:
    - id: pathToCommonContainer
      type: System.String
      description: Supplies fully qualified pathname to the logger file
    - id: physicalLogId
      type: System.Guid
      description: Supplies ID (Guid) of the log container to create
    - id: containerSize
      type: System.Int64
      description: Supplies the desired size of the log container in bytes
    - id: maximumNumberStreams
      type: System.UInt32
      description: Supplies the maximum number of streams that can be created in the log container
    - id: maximumLogicalLogBlockSize
      type: System.UInt32
      description: "Supplies the maximum size of a physical log stream block to write in a shared intermediate \nlog containers - stream that write blocks larger than this may not use such a shared container"
    - id: creationFlags
      type: System.Fabric.Data.Log.LogManager.LogCreationFlags
      description: ''
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: Used to cancel the CreatePhysicalLogAsync operation
    return:
      type: System.Threading.Tasks.Task{System.Fabric.Data.Log.IPhysicalLog}
      description: An open IPhysicalLog handle used to further manipulate the created physical log
  overload: System.Fabric.Data.Log.ILogManager.CreatePhysicalLogAsync*
- uid: System.Fabric.Data.Log.ILogManager.OpenPhysicalLogAsync(System.String,System.Guid,System.Threading.CancellationToken)
  commentId: M:System.Fabric.Data.Log.ILogManager.OpenPhysicalLogAsync(System.String,System.Guid,System.Threading.CancellationToken)
  id: OpenPhysicalLogAsync(System.String,System.Guid,System.Threading.CancellationToken)
  parent: System.Fabric.Data.Log.ILogManager
  langs:
  - csharp
  - vb
  name: OpenPhysicalLogAsync(String, Guid, CancellationToken)
  nameWithType: ILogManager.OpenPhysicalLogAsync(String, Guid, CancellationToken)
  fullName: System.Fabric.Data.Log.ILogManager.OpenPhysicalLogAsync(System.String, System.Guid, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Impl/Log/Interfaces.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: OpenPhysicalLogAsync
    path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Impl/Log/Interfaces.cs
    startLine: 126
  assemblies:
  - Microsoft.ServiceFabric.Data.Impl
  namespace: System.Fabric.Data.Log
  summary: "\nOpens an existing physical log. Once this operation completes, the returned IPhysicalLog represents the \nunderyling physical log state that has been recovered and is ready to use.\n\nKnown Exceptions:\n\nSystem.Fabric.FabricException\nSystem.IOException\nSystem.IO.DirectoryNotFoundException\nSystem.IO.DriveNotFoundException\nSystem.IO.FileNotFoundException\nSystem.IO.PathTooLongException\nFabricObjectClosedException\n\n"
  example: []
  syntax:
    content: Task<IPhysicalLog> OpenPhysicalLogAsync(string pathToCommonPhysicalLog, Guid physicalLogId, CancellationToken cancellationToken)
    content.vb: Function OpenPhysicalLogAsync(pathToCommonPhysicalLog As String, physicalLogId As Guid, cancellationToken As CancellationToken) As Task(Of IPhysicalLog)
    parameters:
    - id: pathToCommonPhysicalLog
      type: System.String
      description: Fully qualified pathname to the log container file
    - id: physicalLogId
      type: System.Guid
      description: Supplies ID (Guid) of the log container
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: Used to cancel the OpenPhysicalLogAsync operation
    return:
      type: System.Threading.Tasks.Task{System.Fabric.Data.Log.IPhysicalLog}
      description: An open IPhysicalLog handle used to further manipulate the opened physical log
  overload: System.Fabric.Data.Log.ILogManager.OpenPhysicalLogAsync*
- uid: System.Fabric.Data.Log.ILogManager.DeletePhysicalLogAsync(System.String,System.Guid,System.Threading.CancellationToken)
  commentId: M:System.Fabric.Data.Log.ILogManager.DeletePhysicalLogAsync(System.String,System.Guid,System.Threading.CancellationToken)
  id: DeletePhysicalLogAsync(System.String,System.Guid,System.Threading.CancellationToken)
  parent: System.Fabric.Data.Log.ILogManager
  langs:
  - csharp
  - vb
  name: DeletePhysicalLogAsync(String, Guid, CancellationToken)
  nameWithType: ILogManager.DeletePhysicalLogAsync(String, Guid, CancellationToken)
  fullName: System.Fabric.Data.Log.ILogManager.DeletePhysicalLogAsync(System.String, System.Guid, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Impl/Log/Interfaces.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: DeletePhysicalLogAsync
    path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Impl/Log/Interfaces.cs
    startLine: 148
  assemblies:
  - Microsoft.ServiceFabric.Data.Impl
  namespace: System.Fabric.Data.Log
  summary: "\nDeletes an existing log container\n\nKnown Exceptions:\n\nSystem.Fabric.FabricException\nSystem.IOException\nSystem.IO.DirectoryNotFoundException\nSystem.IO.DriveNotFoundException\nSystem.IO.FileNotFoundException\nSystem.IO.PathTooLongException\nFabricObjectClosedException\n\n"
  example: []
  syntax:
    content: Task DeletePhysicalLogAsync(string pathToCommonPhysicalLog, Guid physicalLogId, CancellationToken cancellationToken)
    content.vb: Function DeletePhysicalLogAsync(pathToCommonPhysicalLog As String, physicalLogId As Guid, cancellationToken As CancellationToken) As Task
    parameters:
    - id: pathToCommonPhysicalLog
      type: System.String
      description: Fully qualified pathname to the log container file
    - id: physicalLogId
      type: System.Guid
      description: Supplies ID (Guid) of the log container
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: Used to cancel the DeletePhysicalLogAsync operation
    return:
      type: System.Threading.Tasks.Task
  overload: System.Fabric.Data.Log.ILogManager.DeletePhysicalLogAsync*
references:
- uid: System.Fabric.Data.Log
  commentId: N:System.Fabric.Data.Log
  isExternal: false
  name: System.Fabric.Data.Log
  nameWithType: System.Fabric.Data.Log
  fullName: System.Fabric.Data.Log
- uid: System.IDisposable.Dispose
  commentId: M:System.IDisposable.Dispose
  parent: System.IDisposable
  isExternal: true
  name: Dispose()
  nameWithType: IDisposable.Dispose()
  fullName: System.IDisposable.Dispose()
  spec.csharp:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.Data.Log.ILogManager.System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
  commentId: M:System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  parent: System.Fabric.Messaging.Stream.ByteArraySerializer
  definition: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  name: Serialize<ILogManager>()
  nameWithType: ByteArraySerializer.Serialize<ILogManager>()
  fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<System.Fabric.Data.Log.ILogManager>()
  nameWithType.vb: ByteArraySerializer.Serialize(Of ILogManager)()
  fullname.vb: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of System.Fabric.Data.Log.ILogManager)()
  name.vb: Serialize(Of ILogManager)()
  spec.csharp:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
    name: Serialize<ILogManager>
    nameWithType: ByteArraySerializer.Serialize<ILogManager>
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<System.Fabric.Data.Log.ILogManager>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
    name: Serialize(Of ILogManager)
    nameWithType: ByteArraySerializer.Serialize(Of ILogManager)
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of System.Fabric.Data.Log.ILogManager)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  commentId: M:System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  isExternal: false
  name: Serialize<T>(T)
  nameWithType: ByteArraySerializer.Serialize<T>(T)
  fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<T>(T)
  nameWithType.vb: ByteArraySerializer.Serialize(Of T)(T)
  fullname.vb: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of T)(T)
  name.vb: Serialize(Of T)(T)
  spec.csharp:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
    name: Serialize<T>
    nameWithType: ByteArraySerializer.Serialize<T>
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
    name: Serialize(Of T)
    nameWithType: ByteArraySerializer.Serialize(Of T)
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.Messaging.Stream.ByteArraySerializer
  commentId: T:System.Fabric.Messaging.Stream.ByteArraySerializer
  parent: System.Fabric.Messaging.Stream
  isExternal: false
  name: ByteArraySerializer
  nameWithType: ByteArraySerializer
  fullName: System.Fabric.Messaging.Stream.ByteArraySerializer
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Fabric.Messaging.Stream
  commentId: N:System.Fabric.Messaging.Stream
  isExternal: false
  name: System.Fabric.Messaging.Stream
  nameWithType: System.Fabric.Messaging.Stream
  fullName: System.Fabric.Messaging.Stream
- uid: System.Fabric.Data.Log.ILogManager.CloseAsync*
  commentId: Overload:System.Fabric.Data.Log.ILogManager.CloseAsync
  isExternal: false
  name: CloseAsync
  nameWithType: ILogManager.CloseAsync
  fullName: System.Fabric.Data.Log.ILogManager.CloseAsync
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: false
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: System.Fabric.Data.Log.ILogManager.Abort*
  commentId: Overload:System.Fabric.Data.Log.ILogManager.Abort
  isExternal: false
  name: Abort
  nameWithType: ILogManager.Abort
  fullName: System.Fabric.Data.Log.ILogManager.Abort
- uid: System.Fabric.Data.Log.ILogManager.CreatePhysicalLogAsync*
  commentId: Overload:System.Fabric.Data.Log.ILogManager.CreatePhysicalLogAsync
  isExternal: false
  name: CreatePhysicalLogAsync
  nameWithType: ILogManager.CreatePhysicalLogAsync
  fullName: System.Fabric.Data.Log.ILogManager.CreatePhysicalLogAsync
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Guid
  commentId: T:System.Guid
  parent: System
  isExternal: true
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: System.Int64
  commentId: T:System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.UInt32
  commentId: T:System.UInt32
  parent: System
  isExternal: true
  name: UInt32
  nameWithType: UInt32
  fullName: System.UInt32
- uid: System.Fabric.Data.Log.LogManager.LogCreationFlags
  commentId: T:System.Fabric.Data.Log.LogManager.LogCreationFlags
  parent: System.Fabric.Data.Log
  isExternal: false
  name: LogManager.LogCreationFlags
  nameWithType: LogManager.LogCreationFlags
  fullName: System.Fabric.Data.Log.LogManager.LogCreationFlags
- uid: System.Threading.Tasks.Task{System.Fabric.Data.Log.IPhysicalLog}
  commentId: T:System.Threading.Tasks.Task{System.Fabric.Data.Log.IPhysicalLog}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<IPhysicalLog>
  nameWithType: Task<IPhysicalLog>
  fullName: System.Threading.Tasks.Task<System.Fabric.Data.Log.IPhysicalLog>
  nameWithType.vb: Task(Of IPhysicalLog)
  fullname.vb: System.Threading.Tasks.Task(Of System.Fabric.Data.Log.IPhysicalLog)
  name.vb: Task(Of IPhysicalLog)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Fabric.Data.Log.IPhysicalLog
    name: IPhysicalLog
    nameWithType: IPhysicalLog
    fullName: System.Fabric.Data.Log.IPhysicalLog
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Fabric.Data.Log.IPhysicalLog
    name: IPhysicalLog
    nameWithType: IPhysicalLog
    fullName: System.Fabric.Data.Log.IPhysicalLog
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullname.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.Data.Log.ILogManager.OpenPhysicalLogAsync*
  commentId: Overload:System.Fabric.Data.Log.ILogManager.OpenPhysicalLogAsync
  isExternal: false
  name: OpenPhysicalLogAsync
  nameWithType: ILogManager.OpenPhysicalLogAsync
  fullName: System.Fabric.Data.Log.ILogManager.OpenPhysicalLogAsync
- uid: System.Fabric.Data.Log.ILogManager.DeletePhysicalLogAsync*
  commentId: Overload:System.Fabric.Data.Log.ILogManager.DeletePhysicalLogAsync
  isExternal: false
  name: DeletePhysicalLogAsync
  nameWithType: ILogManager.DeletePhysicalLogAsync
  fullName: System.Fabric.Data.Log.ILogManager.DeletePhysicalLogAsync
