### YamlMime:ManagedReference
items:
- uid: System.Fabric.Description.ProvisionApplicationTypeDescription
  commentId: T:System.Fabric.Description.ProvisionApplicationTypeDescription
  id: ProvisionApplicationTypeDescription
  parent: System.Fabric.Description
  children:
  - System.Fabric.Description.ProvisionApplicationTypeDescription.#ctor(System.String)
  - System.Fabric.Description.ProvisionApplicationTypeDescription.Async
  - System.Fabric.Description.ProvisionApplicationTypeDescription.BuildPath
  langs:
  - csharp
  - vb
  name: ProvisionApplicationTypeDescription
  nameWithType: ProvisionApplicationTypeDescription
  fullName: System.Fabric.Description.ProvisionApplicationTypeDescription
  type: Class
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/Description/ProvisionApplicationTypeDescription.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: ProvisionApplicationTypeDescription
    path: src/prod/src/managed/Api/src/System/Fabric/Description/ProvisionApplicationTypeDescription.cs
    startLine: 19
  assemblies:
  - System.Fabric
  namespace: System.Fabric.Description
  summary: "\n<p>Describes an application type to be provisioned by using \n<xref href=\"System.Fabric.FabricClient.ApplicationManagementClient.ProvisionApplicationAsync(System.Fabric.Description.ProvisionApplicationTypeDescription%2cSystem.TimeSpan%2cSystem.Threading.CancellationToken)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example: []
  syntax:
    content: public sealed class ProvisionApplicationTypeDescription
    content.vb: Public NotInheritable Class ProvisionApplicationTypeDescription
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  extensionMethods:
  - System.Fabric.Description.ProvisionApplicationTypeDescription.System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: System.Fabric.Description.ProvisionApplicationTypeDescription.#ctor(System.String)
  commentId: M:System.Fabric.Description.ProvisionApplicationTypeDescription.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.Fabric.Description.ProvisionApplicationTypeDescription
  langs:
  - csharp
  - vb
  name: ProvisionApplicationTypeDescription(String)
  nameWithType: ProvisionApplicationTypeDescription.ProvisionApplicationTypeDescription(String)
  fullName: System.Fabric.Description.ProvisionApplicationTypeDescription.ProvisionApplicationTypeDescription(System.String)
  type: Constructor
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/Description/ProvisionApplicationTypeDescription.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: .ctor
    path: src/prod/src/managed/Api/src/System/Fabric/Description/ProvisionApplicationTypeDescription.cs
    startLine: 27
  assemblies:
  - System.Fabric
  namespace: System.Fabric.Description
  summary: "\n<p>Instantiates an instance of <xref href=\"System.Fabric.Description.ProvisionApplicationTypeDescription\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  example: []
  syntax:
    content: public ProvisionApplicationTypeDescription(string buildPath)
    content.vb: Public Sub New(buildPath As String)
    parameters:
    - id: buildPath
      type: System.String
      description: "\n<p>The relative path to the application package in the ImageStore location specified in the Cluster Manifest.</p>\n"
  overload: System.Fabric.Description.ProvisionApplicationTypeDescription.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.Description.ProvisionApplicationTypeDescription.BuildPath
  commentId: P:System.Fabric.Description.ProvisionApplicationTypeDescription.BuildPath
  id: BuildPath
  parent: System.Fabric.Description.ProvisionApplicationTypeDescription
  langs:
  - csharp
  - vb
  name: BuildPath
  nameWithType: ProvisionApplicationTypeDescription.BuildPath
  fullName: System.Fabric.Description.ProvisionApplicationTypeDescription.BuildPath
  type: Property
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/Description/ProvisionApplicationTypeDescription.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: BuildPath
    path: src/prod/src/managed/Api/src/System/Fabric/Description/ProvisionApplicationTypeDescription.cs
    startLine: 40
  assemblies:
  - System.Fabric
  namespace: System.Fabric.Description
  summary: "\n<p>Gets the relative path to the application package in the ImageStore location specified in the Cluster Manifest.</p>\n"
  example: []
  syntax:
    content: public string BuildPath { get; }
    content.vb: Public ReadOnly Property BuildPath As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>The application build path.</p>\n"
  overload: System.Fabric.Description.ProvisionApplicationTypeDescription.BuildPath*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Fabric.Description.ProvisionApplicationTypeDescription.Async
  commentId: P:System.Fabric.Description.ProvisionApplicationTypeDescription.Async
  id: Async
  parent: System.Fabric.Description.ProvisionApplicationTypeDescription
  langs:
  - csharp
  - vb
  name: Async
  nameWithType: ProvisionApplicationTypeDescription.Async
  fullName: System.Fabric.Description.ProvisionApplicationTypeDescription.Async
  type: Property
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/Description/ProvisionApplicationTypeDescription.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: Async
    path: src/prod/src/managed/Api/src/System/Fabric/Description/ProvisionApplicationTypeDescription.cs
    startLine: 49
  assemblies:
  - System.Fabric
  namespace: System.Fabric.Description
  summary: "\n<p>Gets or sets the flag indicating whether provisioning should occur asynchronously.</p>\n"
  example: []
  syntax:
    content: public bool Async { get; set; }
    content.vb: Public Property Async As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>If this flag is false, then the behavior is equivalent to calling <xref href=\"System.Fabric.FabricClient.ApplicationManagementClient.ProvisionApplicationAsync(System.String%2cSystem.TimeSpan%2cSystem.Threading.CancellationToken)\" data-throw-if-not-resolved=\"false\"></xref>. The timeout argument is applied to the provision operation itself and the returned task completes only when the provision operation completes in the system.</p>\n<p>If this flag is true, then the timeout argument is only applied to message delivery and the returned task completes once the system has accepted the request. The system will process the provision operation without any timeout limit and its state can be queried using <xref href=\"System.Fabric.FabricClient.QueryClient.GetApplicationTypeListAsync\" data-throw-if-not-resolved=\"false\"></xref>. The pending provision operation can be interrupted using <xref href=\"System.Fabric.FabricClient.ApplicationManagementClient.UnprovisionApplicationAsync(System.String%2cSystem.String)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  overload: System.Fabric.Description.ProvisionApplicationTypeDescription.Async*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
references:
- uid: System.Fabric.FabricClient.ApplicationManagementClient.ProvisionApplicationAsync(System.Fabric.Description.ProvisionApplicationTypeDescription,System.TimeSpan,System.Threading.CancellationToken)
  commentId: M:System.Fabric.FabricClient.ApplicationManagementClient.ProvisionApplicationAsync(System.Fabric.Description.ProvisionApplicationTypeDescription,System.TimeSpan,System.Threading.CancellationToken)
- uid: System.Fabric.Description
  commentId: N:System.Fabric.Description
  isExternal: false
  name: System.Fabric.Description
  nameWithType: System.Fabric.Description
  fullName: System.Fabric.Description
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.Description.ProvisionApplicationTypeDescription.System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
  commentId: M:System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  parent: System.Fabric.Messaging.Stream.ByteArraySerializer
  definition: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  name: Serialize<ProvisionApplicationTypeDescription>()
  nameWithType: ByteArraySerializer.Serialize<ProvisionApplicationTypeDescription>()
  fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<System.Fabric.Description.ProvisionApplicationTypeDescription>()
  nameWithType.vb: ByteArraySerializer.Serialize(Of ProvisionApplicationTypeDescription)()
  fullname.vb: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of System.Fabric.Description.ProvisionApplicationTypeDescription)()
  name.vb: Serialize(Of ProvisionApplicationTypeDescription)()
  spec.csharp:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
    name: Serialize<ProvisionApplicationTypeDescription>
    nameWithType: ByteArraySerializer.Serialize<ProvisionApplicationTypeDescription>
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<System.Fabric.Description.ProvisionApplicationTypeDescription>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
    name: Serialize(Of ProvisionApplicationTypeDescription)
    nameWithType: ByteArraySerializer.Serialize(Of ProvisionApplicationTypeDescription)
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of System.Fabric.Description.ProvisionApplicationTypeDescription)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  commentId: M:System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  isExternal: false
  name: Serialize<T>(T)
  nameWithType: ByteArraySerializer.Serialize<T>(T)
  fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<T>(T)
  nameWithType.vb: ByteArraySerializer.Serialize(Of T)(T)
  fullname.vb: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of T)(T)
  name.vb: Serialize(Of T)(T)
  spec.csharp:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
    name: Serialize<T>
    nameWithType: ByteArraySerializer.Serialize<T>
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
    name: Serialize(Of T)
    nameWithType: ByteArraySerializer.Serialize(Of T)
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.Messaging.Stream.ByteArraySerializer
  commentId: T:System.Fabric.Messaging.Stream.ByteArraySerializer
  parent: System.Fabric.Messaging.Stream
  isExternal: false
  name: ByteArraySerializer
  nameWithType: ByteArraySerializer
  fullName: System.Fabric.Messaging.Stream.ByteArraySerializer
- uid: System.Fabric.Messaging.Stream
  commentId: N:System.Fabric.Messaging.Stream
  isExternal: false
  name: System.Fabric.Messaging.Stream
  nameWithType: System.Fabric.Messaging.Stream
  fullName: System.Fabric.Messaging.Stream
- uid: System.Fabric.Description.ProvisionApplicationTypeDescription
  commentId: T:System.Fabric.Description.ProvisionApplicationTypeDescription
  parent: System.Fabric.Description
  isExternal: false
  name: ProvisionApplicationTypeDescription
  nameWithType: ProvisionApplicationTypeDescription
  fullName: System.Fabric.Description.ProvisionApplicationTypeDescription
- uid: System.Fabric.Description.ProvisionApplicationTypeDescription.#ctor*
  commentId: Overload:System.Fabric.Description.ProvisionApplicationTypeDescription.#ctor
  isExternal: false
  name: ProvisionApplicationTypeDescription
  nameWithType: ProvisionApplicationTypeDescription.ProvisionApplicationTypeDescription
  fullName: System.Fabric.Description.ProvisionApplicationTypeDescription.ProvisionApplicationTypeDescription
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Fabric.Description.ProvisionApplicationTypeDescription.BuildPath*
  commentId: Overload:System.Fabric.Description.ProvisionApplicationTypeDescription.BuildPath
  isExternal: false
  name: BuildPath
  nameWithType: ProvisionApplicationTypeDescription.BuildPath
  fullName: System.Fabric.Description.ProvisionApplicationTypeDescription.BuildPath
- uid: System.Fabric.FabricClient.ApplicationManagementClient.ProvisionApplicationAsync(System.String,System.TimeSpan,System.Threading.CancellationToken)
  commentId: M:System.Fabric.FabricClient.ApplicationManagementClient.ProvisionApplicationAsync(System.String,System.TimeSpan,System.Threading.CancellationToken)
- uid: System.Fabric.FabricClient.QueryClient.GetApplicationTypeListAsync
  commentId: M:System.Fabric.FabricClient.QueryClient.GetApplicationTypeListAsync
- uid: System.Fabric.FabricClient.ApplicationManagementClient.UnprovisionApplicationAsync(System.String,System.String)
  commentId: M:System.Fabric.FabricClient.ApplicationManagementClient.UnprovisionApplicationAsync(System.String,System.String)
- uid: System.Fabric.Description.ProvisionApplicationTypeDescription.Async*
  commentId: Overload:System.Fabric.Description.ProvisionApplicationTypeDescription.Async
  isExternal: false
  name: Async
  nameWithType: ProvisionApplicationTypeDescription.Async
  fullName: System.Fabric.Description.ProvisionApplicationTypeDescription.Async
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
