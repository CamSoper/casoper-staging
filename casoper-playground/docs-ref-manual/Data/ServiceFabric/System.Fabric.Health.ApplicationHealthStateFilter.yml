### YamlMime:ManagedReference
items:
- uid: System.Fabric.Health.ApplicationHealthStateFilter
  commentId: T:System.Fabric.Health.ApplicationHealthStateFilter
  id: ApplicationHealthStateFilter
  parent: System.Fabric.Health
  children:
  - System.Fabric.Health.ApplicationHealthStateFilter.#ctor
  - System.Fabric.Health.ApplicationHealthStateFilter.ApplicationNameFilter
  - System.Fabric.Health.ApplicationHealthStateFilter.ApplicationTypeNameFilter
  - System.Fabric.Health.ApplicationHealthStateFilter.DeployedApplicationFilters
  - System.Fabric.Health.ApplicationHealthStateFilter.HealthStateFilter
  - System.Fabric.Health.ApplicationHealthStateFilter.ServiceFilters
  - System.Fabric.Health.ApplicationHealthStateFilter.ToString
  langs:
  - csharp
  - vb
  name: ApplicationHealthStateFilter
  nameWithType: ApplicationHealthStateFilter
  fullName: System.Fabric.Health.ApplicationHealthStateFilter
  type: Class
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/Health/ApplicationHealthStateFilter.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: ApplicationHealthStateFilter
    path: src/prod/src/managed/Api/src/System/Fabric/Health/ApplicationHealthStateFilter.cs
    startLine: 19
  assemblies:
  - System.Fabric
  namespace: System.Fabric.Health
  summary: "\nFilter for <xref href=\"System.Fabric.Health.ApplicationHealthState\" data-throw-if-not-resolved=\"false\"></xref> objects.\n"
  remarks: >-
    The entity health state chunk queries can specify a list of application filters to fine-grain

    select the applications that should be included in the query result.

    Note that all the applications are used to evaluate cluster aggregated health state, regardless of the filter passed in.
  example: []
  syntax:
    content: public sealed class ApplicationHealthStateFilter
    content.vb: Public NotInheritable Class ApplicationHealthStateFilter
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  extensionMethods:
  - System.Fabric.Health.ApplicationHealthStateFilter.System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: System.Fabric.Health.ApplicationHealthStateFilter.#ctor
  commentId: M:System.Fabric.Health.ApplicationHealthStateFilter.#ctor
  id: '#ctor'
  parent: System.Fabric.Health.ApplicationHealthStateFilter
  langs:
  - csharp
  - vb
  name: ApplicationHealthStateFilter()
  nameWithType: ApplicationHealthStateFilter.ApplicationHealthStateFilter()
  fullName: System.Fabric.Health.ApplicationHealthStateFilter.ApplicationHealthStateFilter()
  type: Constructor
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/Health/ApplicationHealthStateFilter.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: .ctor
    path: src/prod/src/managed/Api/src/System/Fabric/Health/ApplicationHealthStateFilter.cs
    startLine: 24
  assemblies:
  - System.Fabric
  namespace: System.Fabric.Health
  summary: "\nInitializes a new instance of the <xref href=\"System.Fabric.Health.ApplicationHealthStateFilter\" data-throw-if-not-resolved=\"false\"></xref> class.\n"
  example: []
  syntax:
    content: public ApplicationHealthStateFilter()
    content.vb: Public Sub New
  overload: System.Fabric.Health.ApplicationHealthStateFilter.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.Health.ApplicationHealthStateFilter.HealthStateFilter
  commentId: P:System.Fabric.Health.ApplicationHealthStateFilter.HealthStateFilter
  id: HealthStateFilter
  parent: System.Fabric.Health.ApplicationHealthStateFilter
  langs:
  - csharp
  - vb
  name: HealthStateFilter
  nameWithType: ApplicationHealthStateFilter.HealthStateFilter
  fullName: System.Fabric.Health.ApplicationHealthStateFilter.HealthStateFilter
  type: Property
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/Health/ApplicationHealthStateFilter.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: HealthStateFilter
    path: src/prod/src/managed/Api/src/System/Fabric/Health/ApplicationHealthStateFilter.cs
    startLine: 39
  assemblies:
  - System.Fabric
  namespace: System.Fabric.Health
  summary: "\nGets or sets filter for the aggregated health state of the <xref href=\"System.Fabric.Health.ApplicationHealthState\" data-throw-if-not-resolved=\"false\"></xref> entries in the collection. \n"
  remarks: "The health state filter value comes from members or bitwise combination of members of <xref href=\"System.Fabric.Health.ApplicationHealthStateFilter.HealthStateFilter\" data-throw-if-not-resolved=\"false\"></xref>. \nFor an application to match the filter, its aggregated health state must match the specified health state filter.\nIf the health state filter is Default, the health state filter defaults to None if there are no specific filters (application name or application type name).\nOtherwise, the Default filter is considered to apply to All.\n"
  example: []
  syntax:
    content: public HealthStateFilter HealthStateFilter { get; set; }
    content.vb: Public Property HealthStateFilter As HealthStateFilter
    parameters: []
    return:
      type: System.Fabric.Health.HealthStateFilter
      description: The filter for the aggregated health state of the <xref href="System.Fabric.Health.ApplicationHealthState" data-throw-if-not-resolved="false"></xref> entries in the collection.
  overload: System.Fabric.Health.ApplicationHealthStateFilter.HealthStateFilter*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Fabric.Health.ApplicationHealthStateFilter.ApplicationNameFilter
  commentId: P:System.Fabric.Health.ApplicationHealthStateFilter.ApplicationNameFilter
  id: ApplicationNameFilter
  parent: System.Fabric.Health.ApplicationHealthStateFilter
  langs:
  - csharp
  - vb
  name: ApplicationNameFilter
  nameWithType: ApplicationHealthStateFilter.ApplicationNameFilter
  fullName: System.Fabric.Health.ApplicationHealthStateFilter.ApplicationNameFilter
  type: Property
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/Health/ApplicationHealthStateFilter.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: ApplicationNameFilter
    path: src/prod/src/managed/Api/src/System/Fabric/Health/ApplicationHealthStateFilter.cs
    startLine: 53
  assemblies:
  - System.Fabric
  namespace: System.Fabric.Health
  summary: "\nGets or sets the application name filter.\n"
  remarks: "If specified, the filter applies only to the desired application. \nFor the application to match the filter, its aggregated health state must match\nthe specified health state filter.\n"
  example: []
  syntax:
    content: public Uri ApplicationNameFilter { get; set; }
    content.vb: Public Property ApplicationNameFilter As Uri
    parameters: []
    return:
      type: System.Uri
      description: The application name filter.
  overload: System.Fabric.Health.ApplicationHealthStateFilter.ApplicationNameFilter*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Fabric.Health.ApplicationHealthStateFilter.ApplicationTypeNameFilter
  commentId: P:System.Fabric.Health.ApplicationHealthStateFilter.ApplicationTypeNameFilter
  id: ApplicationTypeNameFilter
  parent: System.Fabric.Health.ApplicationHealthStateFilter
  langs:
  - csharp
  - vb
  name: ApplicationTypeNameFilter
  nameWithType: ApplicationHealthStateFilter.ApplicationTypeNameFilter
  fullName: System.Fabric.Health.ApplicationHealthStateFilter.ApplicationTypeNameFilter
  type: Property
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/Health/ApplicationHealthStateFilter.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: ApplicationTypeNameFilter
    path: src/prod/src/managed/Api/src/System/Fabric/Health/ApplicationHealthStateFilter.cs
    startLine: 67
  assemblies:
  - System.Fabric
  namespace: System.Fabric.Health
  summary: "\nGets or sets the application type name filter.\n"
  remarks: >
    If specified, the filter applies to all applications of specified application type that don't have a more specific filter (for a specific application name).

    For an application to match the filter, its aggregated health state must match the specified health state filter.
  example: []
  syntax:
    content: public string ApplicationTypeNameFilter { get; set; }
    content.vb: Public Property ApplicationTypeNameFilter As String
    parameters: []
    return:
      type: System.String
      description: The application type name filter.
  overload: System.Fabric.Health.ApplicationHealthStateFilter.ApplicationTypeNameFilter*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Fabric.Health.ApplicationHealthStateFilter.ServiceFilters
  commentId: P:System.Fabric.Health.ApplicationHealthStateFilter.ServiceFilters
  id: ServiceFilters
  parent: System.Fabric.Health.ApplicationHealthStateFilter
  langs:
  - csharp
  - vb
  name: ServiceFilters
  nameWithType: ApplicationHealthStateFilter.ServiceFilters
  fullName: System.Fabric.Health.ApplicationHealthStateFilter.ServiceFilters
  type: Property
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/Health/ApplicationHealthStateFilter.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: ServiceFilters
    path: src/prod/src/managed/Api/src/System/Fabric/Health/ApplicationHealthStateFilter.cs
    startLine: 81
  assemblies:
  - System.Fabric
  namespace: System.Fabric.Health
  summary: "\nGets the list of <xref href=\"System.Fabric.Health.ServiceHealthStateFilter\" data-throw-if-not-resolved=\"false\"></xref> to be applied to the service children health states.\n"
  remarks: >-
    The list can contain one default service filter or service filters for specific services to fine-grain entities returned by the query.

    All service children that match the filter will be returned as children of the application.

    If empty, the children are not returned by default.
  example: []
  syntax:
    content: public IList<ServiceHealthStateFilter> ServiceFilters { get; }
    content.vb: Public ReadOnly Property ServiceFilters As IList(Of ServiceHealthStateFilter)
    parameters: []
    return:
      type: System.Collections.Generic.IList{System.Fabric.Health.ServiceHealthStateFilter}
      description: The list of <xref href="System.Fabric.Health.ServiceHealthStateFilter" data-throw-if-not-resolved="false"></xref> to be applied to the service children health states.
  overload: System.Fabric.Health.ApplicationHealthStateFilter.ServiceFilters*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Fabric.Health.ApplicationHealthStateFilter.DeployedApplicationFilters
  commentId: P:System.Fabric.Health.ApplicationHealthStateFilter.DeployedApplicationFilters
  id: DeployedApplicationFilters
  parent: System.Fabric.Health.ApplicationHealthStateFilter
  langs:
  - csharp
  - vb
  name: DeployedApplicationFilters
  nameWithType: ApplicationHealthStateFilter.DeployedApplicationFilters
  fullName: System.Fabric.Health.ApplicationHealthStateFilter.DeployedApplicationFilters
  type: Property
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/Health/ApplicationHealthStateFilter.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: DeployedApplicationFilters
    path: src/prod/src/managed/Api/src/System/Fabric/Health/ApplicationHealthStateFilter.cs
    startLine: 94
  assemblies:
  - System.Fabric
  namespace: System.Fabric.Health
  summary: "\nGets the list of <xref href=\"System.Fabric.Health.DeployedApplicationHealthStateFilter\" data-throw-if-not-resolved=\"false\"></xref> to be applied to the deployed application children health states.\n"
  remarks: >-
    The list can contain one default deployed application filter or deployed application filters for specific deployed applications to fine-grain entities returned by the query.

    All deployed application children that match the filter will be returned as children of the application.

    If empty, the children are not returned by default.
  example: []
  syntax:
    content: public IList<DeployedApplicationHealthStateFilter> DeployedApplicationFilters { get; }
    content.vb: Public ReadOnly Property DeployedApplicationFilters As IList(Of DeployedApplicationHealthStateFilter)
    parameters: []
    return:
      type: System.Collections.Generic.IList{System.Fabric.Health.DeployedApplicationHealthStateFilter}
      description: The list of <xref href="System.Fabric.Health.DeployedApplicationHealthStateFilter" data-throw-if-not-resolved="false"></xref> to be applied to the deployed application children health states.
  overload: System.Fabric.Health.ApplicationHealthStateFilter.DeployedApplicationFilters*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Fabric.Health.ApplicationHealthStateFilter.ToString
  commentId: M:System.Fabric.Health.ApplicationHealthStateFilter.ToString
  id: ToString
  parent: System.Fabric.Health.ApplicationHealthStateFilter
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: ApplicationHealthStateFilter.ToString()
  fullName: System.Fabric.Health.ApplicationHealthStateFilter.ToString()
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/Health/ApplicationHealthStateFilter.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: ToString
    path: src/prod/src/managed/Api/src/System/Fabric/Health/ApplicationHealthStateFilter.cs
    startLine: 104
  assemblies:
  - System.Fabric
  namespace: System.Fabric.Health
  summary: "\nReturns a string representation of the filter.\n"
  example: []
  syntax:
    content: public override string ToString()
    content.vb: Public Overrides Function ToString As String
    return:
      type: System.String
      description: A string representation of the filter.
  overridden: System.Object.ToString
  overload: System.Fabric.Health.ApplicationHealthStateFilter.ToString*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
references:
- uid: System.Fabric.Health.ApplicationHealthState
  commentId: T:System.Fabric.Health.ApplicationHealthState
  parent: System.Fabric.Health
  isExternal: false
  name: ApplicationHealthState
  nameWithType: ApplicationHealthState
  fullName: System.Fabric.Health.ApplicationHealthState
- uid: System.Fabric.Health
  commentId: N:System.Fabric.Health
  isExternal: false
  name: System.Fabric.Health
  nameWithType: System.Fabric.Health
  fullName: System.Fabric.Health
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.Health.ApplicationHealthStateFilter.System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
  commentId: M:System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  parent: System.Fabric.Messaging.Stream.ByteArraySerializer
  definition: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  name: Serialize<ApplicationHealthStateFilter>()
  nameWithType: ByteArraySerializer.Serialize<ApplicationHealthStateFilter>()
  fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<System.Fabric.Health.ApplicationHealthStateFilter>()
  nameWithType.vb: ByteArraySerializer.Serialize(Of ApplicationHealthStateFilter)()
  fullname.vb: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of System.Fabric.Health.ApplicationHealthStateFilter)()
  name.vb: Serialize(Of ApplicationHealthStateFilter)()
  spec.csharp:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
    name: Serialize<ApplicationHealthStateFilter>
    nameWithType: ByteArraySerializer.Serialize<ApplicationHealthStateFilter>
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<System.Fabric.Health.ApplicationHealthStateFilter>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
    name: Serialize(Of ApplicationHealthStateFilter)
    nameWithType: ByteArraySerializer.Serialize(Of ApplicationHealthStateFilter)
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of System.Fabric.Health.ApplicationHealthStateFilter)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  commentId: M:System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  isExternal: false
  name: Serialize<T>(T)
  nameWithType: ByteArraySerializer.Serialize<T>(T)
  fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<T>(T)
  nameWithType.vb: ByteArraySerializer.Serialize(Of T)(T)
  fullname.vb: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of T)(T)
  name.vb: Serialize(Of T)(T)
  spec.csharp:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
    name: Serialize<T>
    nameWithType: ByteArraySerializer.Serialize<T>
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
    name: Serialize(Of T)
    nameWithType: ByteArraySerializer.Serialize(Of T)
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.Messaging.Stream.ByteArraySerializer
  commentId: T:System.Fabric.Messaging.Stream.ByteArraySerializer
  parent: System.Fabric.Messaging.Stream
  isExternal: false
  name: ByteArraySerializer
  nameWithType: ByteArraySerializer
  fullName: System.Fabric.Messaging.Stream.ByteArraySerializer
- uid: System.Fabric.Messaging.Stream
  commentId: N:System.Fabric.Messaging.Stream
  isExternal: false
  name: System.Fabric.Messaging.Stream
  nameWithType: System.Fabric.Messaging.Stream
  fullName: System.Fabric.Messaging.Stream
- uid: System.Fabric.Health.ApplicationHealthStateFilter
  commentId: T:System.Fabric.Health.ApplicationHealthStateFilter
  isExternal: false
  name: ApplicationHealthStateFilter
  nameWithType: ApplicationHealthStateFilter
  fullName: System.Fabric.Health.ApplicationHealthStateFilter
- uid: System.Fabric.Health.ApplicationHealthStateFilter.#ctor*
  commentId: Overload:System.Fabric.Health.ApplicationHealthStateFilter.#ctor
  isExternal: false
  name: ApplicationHealthStateFilter
  nameWithType: ApplicationHealthStateFilter.ApplicationHealthStateFilter
  fullName: System.Fabric.Health.ApplicationHealthStateFilter.ApplicationHealthStateFilter
- uid: System.Fabric.Health.ApplicationHealthStateFilter.HealthStateFilter
  commentId: P:System.Fabric.Health.ApplicationHealthStateFilter.HealthStateFilter
- uid: System.Fabric.Health.ApplicationHealthStateFilter.HealthStateFilter*
  commentId: Overload:System.Fabric.Health.ApplicationHealthStateFilter.HealthStateFilter
  isExternal: false
  name: HealthStateFilter
  nameWithType: ApplicationHealthStateFilter.HealthStateFilter
  fullName: System.Fabric.Health.ApplicationHealthStateFilter.HealthStateFilter
- uid: System.Fabric.Health.HealthStateFilter
  commentId: T:System.Fabric.Health.HealthStateFilter
  parent: System.Fabric.Health
  isExternal: false
  name: HealthStateFilter
  nameWithType: HealthStateFilter
  fullName: System.Fabric.Health.HealthStateFilter
- uid: System.Fabric.Health.ApplicationHealthStateFilter.ApplicationNameFilter*
  commentId: Overload:System.Fabric.Health.ApplicationHealthStateFilter.ApplicationNameFilter
  isExternal: false
  name: ApplicationNameFilter
  nameWithType: ApplicationHealthStateFilter.ApplicationNameFilter
  fullName: System.Fabric.Health.ApplicationHealthStateFilter.ApplicationNameFilter
- uid: System.Uri
  commentId: T:System.Uri
  parent: System
  isExternal: true
  name: Uri
  nameWithType: Uri
  fullName: System.Uri
- uid: System.Fabric.Health.ApplicationHealthStateFilter.ApplicationTypeNameFilter*
  commentId: Overload:System.Fabric.Health.ApplicationHealthStateFilter.ApplicationTypeNameFilter
  isExternal: false
  name: ApplicationTypeNameFilter
  nameWithType: ApplicationHealthStateFilter.ApplicationTypeNameFilter
  fullName: System.Fabric.Health.ApplicationHealthStateFilter.ApplicationTypeNameFilter
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Fabric.Health.ServiceHealthStateFilter
  commentId: T:System.Fabric.Health.ServiceHealthStateFilter
  isExternal: false
  name: ServiceHealthStateFilter
  nameWithType: ServiceHealthStateFilter
  fullName: System.Fabric.Health.ServiceHealthStateFilter
- uid: System.Fabric.Health.ApplicationHealthStateFilter.ServiceFilters*
  commentId: Overload:System.Fabric.Health.ApplicationHealthStateFilter.ServiceFilters
  isExternal: false
  name: ServiceFilters
  nameWithType: ApplicationHealthStateFilter.ServiceFilters
  fullName: System.Fabric.Health.ApplicationHealthStateFilter.ServiceFilters
- uid: System.Collections.Generic.IList{System.Fabric.Health.ServiceHealthStateFilter}
  commentId: T:System.Collections.Generic.IList{System.Fabric.Health.ServiceHealthStateFilter}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<ServiceHealthStateFilter>
  nameWithType: IList<ServiceHealthStateFilter>
  fullName: System.Collections.Generic.IList<System.Fabric.Health.ServiceHealthStateFilter>
  nameWithType.vb: IList(Of ServiceHealthStateFilter)
  fullname.vb: System.Collections.Generic.IList(Of System.Fabric.Health.ServiceHealthStateFilter)
  name.vb: IList(Of ServiceHealthStateFilter)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Fabric.Health.ServiceHealthStateFilter
    name: ServiceHealthStateFilter
    nameWithType: ServiceHealthStateFilter
    fullName: System.Fabric.Health.ServiceHealthStateFilter
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Fabric.Health.ServiceHealthStateFilter
    name: ServiceHealthStateFilter
    nameWithType: ServiceHealthStateFilter
    fullName: System.Fabric.Health.ServiceHealthStateFilter
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList`1
  commentId: T:System.Collections.Generic.IList`1
  isExternal: true
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullname.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Fabric.Health.DeployedApplicationHealthStateFilter
  commentId: T:System.Fabric.Health.DeployedApplicationHealthStateFilter
  isExternal: false
  name: DeployedApplicationHealthStateFilter
  nameWithType: DeployedApplicationHealthStateFilter
  fullName: System.Fabric.Health.DeployedApplicationHealthStateFilter
- uid: System.Fabric.Health.ApplicationHealthStateFilter.DeployedApplicationFilters*
  commentId: Overload:System.Fabric.Health.ApplicationHealthStateFilter.DeployedApplicationFilters
  isExternal: false
  name: DeployedApplicationFilters
  nameWithType: ApplicationHealthStateFilter.DeployedApplicationFilters
  fullName: System.Fabric.Health.ApplicationHealthStateFilter.DeployedApplicationFilters
- uid: System.Collections.Generic.IList{System.Fabric.Health.DeployedApplicationHealthStateFilter}
  commentId: T:System.Collections.Generic.IList{System.Fabric.Health.DeployedApplicationHealthStateFilter}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<DeployedApplicationHealthStateFilter>
  nameWithType: IList<DeployedApplicationHealthStateFilter>
  fullName: System.Collections.Generic.IList<System.Fabric.Health.DeployedApplicationHealthStateFilter>
  nameWithType.vb: IList(Of DeployedApplicationHealthStateFilter)
  fullname.vb: System.Collections.Generic.IList(Of System.Fabric.Health.DeployedApplicationHealthStateFilter)
  name.vb: IList(Of DeployedApplicationHealthStateFilter)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Fabric.Health.DeployedApplicationHealthStateFilter
    name: DeployedApplicationHealthStateFilter
    nameWithType: DeployedApplicationHealthStateFilter
    fullName: System.Fabric.Health.DeployedApplicationHealthStateFilter
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Fabric.Health.DeployedApplicationHealthStateFilter
    name: DeployedApplicationHealthStateFilter
    nameWithType: DeployedApplicationHealthStateFilter
    fullName: System.Fabric.Health.DeployedApplicationHealthStateFilter
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.Health.ApplicationHealthStateFilter.ToString*
  commentId: Overload:System.Fabric.Health.ApplicationHealthStateFilter.ToString
  isExternal: false
  name: ToString
  nameWithType: ApplicationHealthStateFilter.ToString
  fullName: System.Fabric.Health.ApplicationHealthStateFilter.ToString
