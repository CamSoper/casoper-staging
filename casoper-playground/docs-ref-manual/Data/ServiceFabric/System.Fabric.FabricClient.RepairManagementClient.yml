### YamlMime:ManagedReference
items:
- uid: System.Fabric.FabricClient.RepairManagementClient
  commentId: T:System.Fabric.FabricClient.RepairManagementClient
  id: FabricClient.RepairManagementClient
  parent: System.Fabric
  children:
  - System.Fabric.FabricClient.RepairManagementClient.CancelRepairTaskAsync(System.String,System.Int64,System.Boolean)
  - System.Fabric.FabricClient.RepairManagementClient.CancelRepairTaskAsync(System.String,System.Int64,System.Boolean,System.TimeSpan,System.Threading.CancellationToken)
  - System.Fabric.FabricClient.RepairManagementClient.CreateRepairTaskAsync(System.Fabric.Repair.RepairTask)
  - System.Fabric.FabricClient.RepairManagementClient.CreateRepairTaskAsync(System.Fabric.Repair.RepairTask,System.TimeSpan,System.Threading.CancellationToken)
  - System.Fabric.FabricClient.RepairManagementClient.DeleteRepairTaskAsync(System.String,System.Int64)
  - System.Fabric.FabricClient.RepairManagementClient.DeleteRepairTaskAsync(System.String,System.Int64,System.TimeSpan,System.Threading.CancellationToken)
  - System.Fabric.FabricClient.RepairManagementClient.ForceApproveRepairTaskAsync(System.String,System.Int64)
  - System.Fabric.FabricClient.RepairManagementClient.ForceApproveRepairTaskAsync(System.String,System.Int64,System.TimeSpan,System.Threading.CancellationToken)
  - System.Fabric.FabricClient.RepairManagementClient.GetRepairTaskListAsync
  - System.Fabric.FabricClient.RepairManagementClient.GetRepairTaskListAsync(System.String,System.Fabric.Repair.RepairTaskStateFilter,System.String)
  - System.Fabric.FabricClient.RepairManagementClient.GetRepairTaskListAsync(System.String,System.Fabric.Repair.RepairTaskStateFilter,System.String,System.TimeSpan,System.Threading.CancellationToken)
  - System.Fabric.FabricClient.RepairManagementClient.GetRepairTaskListAsync(System.TimeSpan,System.Threading.CancellationToken)
  - System.Fabric.FabricClient.RepairManagementClient.UpdateRepairExecutionStateAsync(System.Fabric.Repair.RepairTask)
  - System.Fabric.FabricClient.RepairManagementClient.UpdateRepairExecutionStateAsync(System.Fabric.Repair.RepairTask,System.TimeSpan,System.Threading.CancellationToken)
  - System.Fabric.FabricClient.RepairManagementClient.UpdateRepairTaskHealthPolicyAsync(System.String,System.Int64,System.Nullable{System.Boolean},System.Nullable{System.Boolean})
  - System.Fabric.FabricClient.RepairManagementClient.UpdateRepairTaskHealthPolicyAsync(System.String,System.Int64,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.TimeSpan,System.Threading.CancellationToken)
  langs:
  - csharp
  - vb
  name: FabricClient.RepairManagementClient
  nameWithType: FabricClient.RepairManagementClient
  fullName: System.Fabric.FabricClient.RepairManagementClient
  type: Class
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.RepairManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: RepairManagementClient
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.RepairManagementClient.cs
    startLine: 19
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Provides methods for managing repair tasks.</p>\n<p>This class supports the Service Fabric platform; it is not meant to be called directly from your code.</p>\n"
  example: []
  syntax:
    content: public sealed class RepairManagementClient
    content.vb: Public NotInheritable Class RepairManagementClient
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  extensionMethods:
  - System.Fabric.FabricClient.RepairManagementClient.System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: System.Fabric.FabricClient.RepairManagementClient.CreateRepairTaskAsync(System.Fabric.Repair.RepairTask)
  commentId: M:System.Fabric.FabricClient.RepairManagementClient.CreateRepairTaskAsync(System.Fabric.Repair.RepairTask)
  id: CreateRepairTaskAsync(System.Fabric.Repair.RepairTask)
  parent: System.Fabric.FabricClient.RepairManagementClient
  langs:
  - csharp
  - vb
  name: CreateRepairTaskAsync(RepairTask)
  nameWithType: FabricClient.RepairManagementClient.CreateRepairTaskAsync(RepairTask)
  fullName: System.Fabric.FabricClient.RepairManagementClient.CreateRepairTaskAsync(System.Fabric.Repair.RepairTask)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.RepairManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: CreateRepairTaskAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.RepairManagementClient.cs
    startLine: 51
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Creates a new repair task.</p>\n"
  example: []
  syntax:
    content: public Task<long> CreateRepairTaskAsync(RepairTask repairTask)
    content.vb: Public Function CreateRepairTaskAsync(repairTask As RepairTask) As Task(Of Long)
    parameters:
    - id: repairTask
      type: System.Fabric.Repair.RepairTask
      description: "\n<p> The description of the repair task to be created.</p>\n"
    return:
      type: System.Threading.Tasks.Task{System.Int64}
      description: "\n<p>The version number of the newly-created repair task.</p>\n"
  overload: System.Fabric.FabricClient.RepairManagementClient.CreateRepairTaskAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.RepairManagementClient.CreateRepairTaskAsync(System.Fabric.Repair.RepairTask,System.TimeSpan,System.Threading.CancellationToken)
  commentId: M:System.Fabric.FabricClient.RepairManagementClient.CreateRepairTaskAsync(System.Fabric.Repair.RepairTask,System.TimeSpan,System.Threading.CancellationToken)
  id: CreateRepairTaskAsync(System.Fabric.Repair.RepairTask,System.TimeSpan,System.Threading.CancellationToken)
  parent: System.Fabric.FabricClient.RepairManagementClient
  langs:
  - csharp
  - vb
  name: CreateRepairTaskAsync(RepairTask, TimeSpan, CancellationToken)
  nameWithType: FabricClient.RepairManagementClient.CreateRepairTaskAsync(RepairTask, TimeSpan, CancellationToken)
  fullName: System.Fabric.FabricClient.RepairManagementClient.CreateRepairTaskAsync(System.Fabric.Repair.RepairTask, System.TimeSpan, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.RepairManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: CreateRepairTaskAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.RepairManagementClient.cs
    startLine: 72
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Creates a new repair task.</p>\n"
  example: []
  syntax:
    content: public Task<long> CreateRepairTaskAsync(RepairTask repairTask, TimeSpan timeout, CancellationToken cancellationToken)
    content.vb: Public Function CreateRepairTaskAsync(repairTask As RepairTask, timeout As TimeSpan, cancellationToken As CancellationToken) As Task(Of Long)
    parameters:
    - id: repairTask
      type: System.Fabric.Repair.RepairTask
      description: "\n<p> The description of the repair task to be created.</p>\n"
    - id: timeout
      type: System.TimeSpan
      description: "\n<p>The maximum amount of time Service Fabric will allow this operation to continue before returning a<xref href=\"System.TimeoutException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p> The optional cancellation token that the operation is observing.It can be used to send a notification that the operation should be canceled.\nNote that cancellation is advisory and that the operation may still be completed even if it is cancelled.</p>\n"
    return:
      type: System.Threading.Tasks.Task{System.Int64}
      description: "\n<p>The version number of the newly-created repair task.</p>\n"
  overload: System.Fabric.FabricClient.RepairManagementClient.CreateRepairTaskAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.RepairManagementClient.CancelRepairTaskAsync(System.String,System.Int64,System.Boolean)
  commentId: M:System.Fabric.FabricClient.RepairManagementClient.CancelRepairTaskAsync(System.String,System.Int64,System.Boolean)
  id: CancelRepairTaskAsync(System.String,System.Int64,System.Boolean)
  parent: System.Fabric.FabricClient.RepairManagementClient
  langs:
  - csharp
  - vb
  name: CancelRepairTaskAsync(String, Int64, Boolean)
  nameWithType: FabricClient.RepairManagementClient.CancelRepairTaskAsync(String, Int64, Boolean)
  fullName: System.Fabric.FabricClient.RepairManagementClient.CancelRepairTaskAsync(System.String, System.Int64, System.Boolean)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.RepairManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: CancelRepairTaskAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.RepairManagementClient.cs
    startLine: 100
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Requests the cancellation of the given repair task.</p>\n"
  example: []
  syntax:
    content: public Task<long> CancelRepairTaskAsync(string repairTaskId, long version, bool requestAbort)
    content.vb: Public Function CancelRepairTaskAsync(repairTaskId As String, version As Long, requestAbort As Boolean) As Task(Of Long)
    parameters:
    - id: repairTaskId
      type: System.String
      description: "\n<p>The ID of the repair task to be cancelled.</p>\n"
    - id: version
      type: System.Int64
      description: "\n<p>The current version number of the repair task. If non-zero, then the request will only succeed if this value matches the actual current value of the repair task. If zero, then no version check is performed.</p>\n"
    - id: requestAbort
      type: System.Boolean
      description: "\n<p>\n<strong>True</strong> if the repair should be stopped as soon as possible even if it has already started executing. <strong>False</strong> if the repair should be cancelled only if execution has not yet started.</p>\n"
    return:
      type: System.Threading.Tasks.Task{System.Int64}
      description: "\n<p>The new version number of the repair task.</p>\n"
  overload: System.Fabric.FabricClient.RepairManagementClient.CancelRepairTaskAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.RepairManagementClient.CancelRepairTaskAsync(System.String,System.Int64,System.Boolean,System.TimeSpan,System.Threading.CancellationToken)
  commentId: M:System.Fabric.FabricClient.RepairManagementClient.CancelRepairTaskAsync(System.String,System.Int64,System.Boolean,System.TimeSpan,System.Threading.CancellationToken)
  id: CancelRepairTaskAsync(System.String,System.Int64,System.Boolean,System.TimeSpan,System.Threading.CancellationToken)
  parent: System.Fabric.FabricClient.RepairManagementClient
  langs:
  - csharp
  - vb
  name: CancelRepairTaskAsync(String, Int64, Boolean, TimeSpan, CancellationToken)
  nameWithType: FabricClient.RepairManagementClient.CancelRepairTaskAsync(String, Int64, Boolean, TimeSpan, CancellationToken)
  fullName: System.Fabric.FabricClient.RepairManagementClient.CancelRepairTaskAsync(System.String, System.Int64, System.Boolean, System.TimeSpan, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.RepairManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: CancelRepairTaskAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.RepairManagementClient.cs
    startLine: 127
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Requests the cancellation of the given repair task.</p>\n"
  example: []
  syntax:
    content: public Task<long> CancelRepairTaskAsync(string repairTaskId, long version, bool requestAbort, TimeSpan timeout, CancellationToken cancellationToken)
    content.vb: Public Function CancelRepairTaskAsync(repairTaskId As String, version As Long, requestAbort As Boolean, timeout As TimeSpan, cancellationToken As CancellationToken) As Task(Of Long)
    parameters:
    - id: repairTaskId
      type: System.String
      description: "\n<p>The ID of the repair task to be cancelled.</p>\n"
    - id: version
      type: System.Int64
      description: "\n<p>The current version number of the repair task. If non-zero, then the request will only succeed if this value matches the actual current value of the repair task. If zero, then no version check is performed.</p>\n"
    - id: requestAbort
      type: System.Boolean
      description: "\n<p>\n<strong>True</strong> if the repair should be stopped as soon as possible even if it has already started executing. <strong>False</strong> if the repair should be cancelled only if execution has not yet started.</p>\n"
    - id: timeout
      type: System.TimeSpan
      description: "\n<p>The maximum amount of time Service Fabric will allow this operation to continue before returning a <xref href=\"System.TimeoutException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The optional cancellation token that the operation is observing. It can be used to send a notification that the operation should be canceled. Note that cancellation is advisory and that the operation may still be completed even if it is cancelled.</p>\n"
    return:
      type: System.Threading.Tasks.Task{System.Int64}
      description: "\n<p>The new version number of the repair task.</p>\n"
  overload: System.Fabric.FabricClient.RepairManagementClient.CancelRepairTaskAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.RepairManagementClient.ForceApproveRepairTaskAsync(System.String,System.Int64)
  commentId: M:System.Fabric.FabricClient.RepairManagementClient.ForceApproveRepairTaskAsync(System.String,System.Int64)
  id: ForceApproveRepairTaskAsync(System.String,System.Int64)
  parent: System.Fabric.FabricClient.RepairManagementClient
  langs:
  - csharp
  - vb
  name: ForceApproveRepairTaskAsync(String, Int64)
  nameWithType: FabricClient.RepairManagementClient.ForceApproveRepairTaskAsync(String, Int64)
  fullName: System.Fabric.FabricClient.RepairManagementClient.ForceApproveRepairTaskAsync(System.String, System.Int64)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.RepairManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: ForceApproveRepairTaskAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.RepairManagementClient.cs
    startLine: 151
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Forces the approval of the given repair task.</p>\n"
  example: []
  syntax:
    content: public Task<long> ForceApproveRepairTaskAsync(string repairTaskId, long version)
    content.vb: Public Function ForceApproveRepairTaskAsync(repairTaskId As String, version As Long) As Task(Of Long)
    parameters:
    - id: repairTaskId
      type: System.String
      description: "\n<p>The ID of the repair task to be approved.</p>\n"
    - id: version
      type: System.Int64
      description: "\n<p>The current version number of the repair task. If non-zero, then the request will only succeed if this value matches the actual current value of the repair task. If zero, then no version check is performed.</p>\n"
    return:
      type: System.Threading.Tasks.Task{System.Int64}
      description: "\n<p>The new version number of the repair task.</p>\n"
  overload: System.Fabric.FabricClient.RepairManagementClient.ForceApproveRepairTaskAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.RepairManagementClient.ForceApproveRepairTaskAsync(System.String,System.Int64,System.TimeSpan,System.Threading.CancellationToken)
  commentId: M:System.Fabric.FabricClient.RepairManagementClient.ForceApproveRepairTaskAsync(System.String,System.Int64,System.TimeSpan,System.Threading.CancellationToken)
  id: ForceApproveRepairTaskAsync(System.String,System.Int64,System.TimeSpan,System.Threading.CancellationToken)
  parent: System.Fabric.FabricClient.RepairManagementClient
  langs:
  - csharp
  - vb
  name: ForceApproveRepairTaskAsync(String, Int64, TimeSpan, CancellationToken)
  nameWithType: FabricClient.RepairManagementClient.ForceApproveRepairTaskAsync(String, Int64, TimeSpan, CancellationToken)
  fullName: System.Fabric.FabricClient.RepairManagementClient.ForceApproveRepairTaskAsync(System.String, System.Int64, System.TimeSpan, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.RepairManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: ForceApproveRepairTaskAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.RepairManagementClient.cs
    startLine: 174
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Forces the approval of the given repair task.</p>\n"
  example: []
  syntax:
    content: public Task<long> ForceApproveRepairTaskAsync(string repairTaskId, long version, TimeSpan timeout, CancellationToken cancellationToken)
    content.vb: Public Function ForceApproveRepairTaskAsync(repairTaskId As String, version As Long, timeout As TimeSpan, cancellationToken As CancellationToken) As Task(Of Long)
    parameters:
    - id: repairTaskId
      type: System.String
      description: "\n<p>The ID of the repair task to be approved.</p>\n"
    - id: version
      type: System.Int64
      description: "\n<p>The current version number of the repair task. If non-zero, then the request will only succeed if this value matches the actual current value of the repair task. If zero, then no version check is performed.</p>\n"
    - id: timeout
      type: System.TimeSpan
      description: "\n<p>The maximum amount of time Service Fabric will allow this operation to continue before returning a <xref href=\"System.TimeoutException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The optional cancellation token that the operation is observing. It can be used to send a notification that the operation should be canceled. Note that cancellation is advisory and that the operation may still be completed even if it is cancelled.</p>\n"
    return:
      type: System.Threading.Tasks.Task{System.Int64}
      description: "\n<p>The new version number of the repair task.</p>\n"
  overload: System.Fabric.FabricClient.RepairManagementClient.ForceApproveRepairTaskAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.RepairManagementClient.DeleteRepairTaskAsync(System.String,System.Int64)
  commentId: M:System.Fabric.FabricClient.RepairManagementClient.DeleteRepairTaskAsync(System.String,System.Int64)
  id: DeleteRepairTaskAsync(System.String,System.Int64)
  parent: System.Fabric.FabricClient.RepairManagementClient
  langs:
  - csharp
  - vb
  name: DeleteRepairTaskAsync(String, Int64)
  nameWithType: FabricClient.RepairManagementClient.DeleteRepairTaskAsync(String, Int64)
  fullName: System.Fabric.FabricClient.RepairManagementClient.DeleteRepairTaskAsync(System.String, System.Int64)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.RepairManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: DeleteRepairTaskAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.RepairManagementClient.cs
    startLine: 198
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Deletes the given repair task.</p>\n"
  example: []
  syntax:
    content: public Task DeleteRepairTaskAsync(string repairTaskId, long version)
    content.vb: Public Function DeleteRepairTaskAsync(repairTaskId As String, version As Long) As Task
    parameters:
    - id: repairTaskId
      type: System.String
      description: "\n<p>The ID of the completed repair task to be deleted.</p>\n"
    - id: version
      type: System.Int64
      description: "\n<p>The current version number of the repair task. If non-zero, then the request will only succeed if this value matches the actual current value of the repair task. If zero, then no version check is performed.</p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>A task representing the asynchronous operation.</p>\n"
  overload: System.Fabric.FabricClient.RepairManagementClient.DeleteRepairTaskAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.RepairManagementClient.DeleteRepairTaskAsync(System.String,System.Int64,System.TimeSpan,System.Threading.CancellationToken)
  commentId: M:System.Fabric.FabricClient.RepairManagementClient.DeleteRepairTaskAsync(System.String,System.Int64,System.TimeSpan,System.Threading.CancellationToken)
  id: DeleteRepairTaskAsync(System.String,System.Int64,System.TimeSpan,System.Threading.CancellationToken)
  parent: System.Fabric.FabricClient.RepairManagementClient
  langs:
  - csharp
  - vb
  name: DeleteRepairTaskAsync(String, Int64, TimeSpan, CancellationToken)
  nameWithType: FabricClient.RepairManagementClient.DeleteRepairTaskAsync(String, Int64, TimeSpan, CancellationToken)
  fullName: System.Fabric.FabricClient.RepairManagementClient.DeleteRepairTaskAsync(System.String, System.Int64, System.TimeSpan, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.RepairManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: DeleteRepairTaskAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.RepairManagementClient.cs
    startLine: 221
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Deletes the given repair task.</p>\n"
  example: []
  syntax:
    content: public Task DeleteRepairTaskAsync(string repairTaskId, long version, TimeSpan timeout, CancellationToken cancellationToken)
    content.vb: Public Function DeleteRepairTaskAsync(repairTaskId As String, version As Long, timeout As TimeSpan, cancellationToken As CancellationToken) As Task
    parameters:
    - id: repairTaskId
      type: System.String
      description: "\n<p>The ID of the completed repair task to be deleted.</p>\n"
    - id: version
      type: System.Int64
      description: "\n<p>The current version number of the repair task. If non-zero, then the request will only succeed if this value matches the actual current value of the repair task. If zero, then no version check is performed.</p>\n"
    - id: timeout
      type: System.TimeSpan
      description: "\n<p>The maximum amount of time Service Fabric will allow this operation to continue before returning a <xref href=\"System.TimeoutException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The optional cancellation token that the operation is observing. It can be used to send a notification that the operation should be canceled. Note that cancellation is advisory and that the operation may still be completed even if it is cancelled.</p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>A task representing the asynchronous operation.</p>\n"
  overload: System.Fabric.FabricClient.RepairManagementClient.DeleteRepairTaskAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.RepairManagementClient.UpdateRepairExecutionStateAsync(System.Fabric.Repair.RepairTask)
  commentId: M:System.Fabric.FabricClient.RepairManagementClient.UpdateRepairExecutionStateAsync(System.Fabric.Repair.RepairTask)
  id: UpdateRepairExecutionStateAsync(System.Fabric.Repair.RepairTask)
  parent: System.Fabric.FabricClient.RepairManagementClient
  langs:
  - csharp
  - vb
  name: UpdateRepairExecutionStateAsync(RepairTask)
  nameWithType: FabricClient.RepairManagementClient.UpdateRepairExecutionStateAsync(RepairTask)
  fullName: System.Fabric.FabricClient.RepairManagementClient.UpdateRepairExecutionStateAsync(System.Fabric.Repair.RepairTask)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.RepairManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: UpdateRepairExecutionStateAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.RepairManagementClient.cs
    startLine: 238
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\nUpdates a repair task.\n"
  example: []
  syntax:
    content: public Task<long> UpdateRepairExecutionStateAsync(RepairTask repairTask)
    content.vb: Public Function UpdateRepairExecutionStateAsync(repairTask As RepairTask) As Task(Of Long)
    parameters:
    - id: repairTask
      type: System.Fabric.Repair.RepairTask
      description: The modified repair task.
    return:
      type: System.Threading.Tasks.Task{System.Int64}
      description: <p>The new version number of the repair task.</p>
  overload: System.Fabric.FabricClient.RepairManagementClient.UpdateRepairExecutionStateAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.RepairManagementClient.UpdateRepairExecutionStateAsync(System.Fabric.Repair.RepairTask,System.TimeSpan,System.Threading.CancellationToken)
  commentId: M:System.Fabric.FabricClient.RepairManagementClient.UpdateRepairExecutionStateAsync(System.Fabric.Repair.RepairTask,System.TimeSpan,System.Threading.CancellationToken)
  id: UpdateRepairExecutionStateAsync(System.Fabric.Repair.RepairTask,System.TimeSpan,System.Threading.CancellationToken)
  parent: System.Fabric.FabricClient.RepairManagementClient
  langs:
  - csharp
  - vb
  name: UpdateRepairExecutionStateAsync(RepairTask, TimeSpan, CancellationToken)
  nameWithType: FabricClient.RepairManagementClient.UpdateRepairExecutionStateAsync(RepairTask, TimeSpan, CancellationToken)
  fullName: System.Fabric.FabricClient.RepairManagementClient.UpdateRepairExecutionStateAsync(System.Fabric.Repair.RepairTask, System.TimeSpan, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.RepairManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: UpdateRepairExecutionStateAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.RepairManagementClient.cs
    startLine: 254
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\nUpdates a repair task.\n"
  example: []
  syntax:
    content: public Task<long> UpdateRepairExecutionStateAsync(RepairTask repairTask, TimeSpan timeout, CancellationToken cancellationToken)
    content.vb: Public Function UpdateRepairExecutionStateAsync(repairTask As RepairTask, timeout As TimeSpan, cancellationToken As CancellationToken) As Task(Of Long)
    parameters:
    - id: repairTask
      type: System.Fabric.Repair.RepairTask
      description: The modified repair task.
    - id: timeout
      type: System.TimeSpan
      description: "\n<p>The maximum amount of time Service Fabric will allow this operation to continue before returning a <xref href=\"System.TimeoutException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The optional cancellation token that the operation is observing. It can be used to send a notification that the operation should be canceled. Note that cancellation is advisory and that the operation may still be completed even if it is cancelled.</p>\n"
    return:
      type: System.Threading.Tasks.Task{System.Int64}
      description: <p>The new version number of the repair task.</p>
  overload: System.Fabric.FabricClient.RepairManagementClient.UpdateRepairExecutionStateAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.RepairManagementClient.GetRepairTaskListAsync
  commentId: M:System.Fabric.FabricClient.RepairManagementClient.GetRepairTaskListAsync
  id: GetRepairTaskListAsync
  parent: System.Fabric.FabricClient.RepairManagementClient
  langs:
  - csharp
  - vb
  name: GetRepairTaskListAsync()
  nameWithType: FabricClient.RepairManagementClient.GetRepairTaskListAsync()
  fullName: System.Fabric.FabricClient.RepairManagementClient.GetRepairTaskListAsync()
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.RepairManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: GetRepairTaskListAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.RepairManagementClient.cs
    startLine: 272
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Gets a list of all repair tasks.</p>\n"
  example: []
  syntax:
    content: public Task<RepairTaskList> GetRepairTaskListAsync()
    content.vb: Public Function GetRepairTaskListAsync As Task(Of RepairTaskList)
    return:
      type: System.Threading.Tasks.Task{System.Fabric.Repair.RepairTaskList}
      description: "\n<p>The list of all repair tasks.</p>\n"
  overload: System.Fabric.FabricClient.RepairManagementClient.GetRepairTaskListAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.RepairManagementClient.GetRepairTaskListAsync(System.TimeSpan,System.Threading.CancellationToken)
  commentId: M:System.Fabric.FabricClient.RepairManagementClient.GetRepairTaskListAsync(System.TimeSpan,System.Threading.CancellationToken)
  id: GetRepairTaskListAsync(System.TimeSpan,System.Threading.CancellationToken)
  parent: System.Fabric.FabricClient.RepairManagementClient
  langs:
  - csharp
  - vb
  name: GetRepairTaskListAsync(TimeSpan, CancellationToken)
  nameWithType: FabricClient.RepairManagementClient.GetRepairTaskListAsync(TimeSpan, CancellationToken)
  fullName: System.Fabric.FabricClient.RepairManagementClient.GetRepairTaskListAsync(System.TimeSpan, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.RepairManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: GetRepairTaskListAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.RepairManagementClient.cs
    startLine: 289
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Gets a list of all repair tasks.</p>\n"
  example: []
  syntax:
    content: public Task<RepairTaskList> GetRepairTaskListAsync(TimeSpan timeout, CancellationToken cancellationToken)
    content.vb: Public Function GetRepairTaskListAsync(timeout As TimeSpan, cancellationToken As CancellationToken) As Task(Of RepairTaskList)
    parameters:
    - id: timeout
      type: System.TimeSpan
      description: "\n<p>The maximum amount of time Service Fabric will allow this operation to continue before returning a <xref href=\"System.TimeoutException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The optional cancellation token that the operation is observing. It can be used to send a notification that the operation should be canceled. Note that cancellation is advisory and that the operation may still be completed even if it is cancelled.</p>\n"
    return:
      type: System.Threading.Tasks.Task{System.Fabric.Repair.RepairTaskList}
      description: "\n<p>The list of all repair tasks.</p>\n"
  overload: System.Fabric.FabricClient.RepairManagementClient.GetRepairTaskListAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.RepairManagementClient.GetRepairTaskListAsync(System.String,System.Fabric.Repair.RepairTaskStateFilter,System.String)
  commentId: M:System.Fabric.FabricClient.RepairManagementClient.GetRepairTaskListAsync(System.String,System.Fabric.Repair.RepairTaskStateFilter,System.String)
  id: GetRepairTaskListAsync(System.String,System.Fabric.Repair.RepairTaskStateFilter,System.String)
  parent: System.Fabric.FabricClient.RepairManagementClient
  langs:
  - csharp
  - vb
  name: GetRepairTaskListAsync(String, RepairTaskStateFilter, String)
  nameWithType: FabricClient.RepairManagementClient.GetRepairTaskListAsync(String, RepairTaskStateFilter, String)
  fullName: System.Fabric.FabricClient.RepairManagementClient.GetRepairTaskListAsync(System.String, System.Fabric.Repair.RepairTaskStateFilter, System.String)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.RepairManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: GetRepairTaskListAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.RepairManagementClient.cs
    startLine: 311
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Gets a list of repair tasks matching all of the given filters.</p>\n"
  example: []
  syntax:
    content: public Task<RepairTaskList> GetRepairTaskListAsync(string taskIdFilter, RepairTaskStateFilter stateFilter, string executorFilter)
    content.vb: Public Function GetRepairTaskListAsync(taskIdFilter As String, stateFilter As RepairTaskStateFilter, executorFilter As String) As Task(Of RepairTaskList)
    parameters:
    - id: taskIdFilter
      type: System.String
      description: "\n<p>The repair task ID prefix to be matched.  If null, no filter is applied to the task ID.</p>\n"
    - id: stateFilter
      type: System.Fabric.Repair.RepairTaskStateFilter
      description: "\n<p>A bitwise combination of state filter values that specify which task states should be included in the list.</p>\n"
    - id: executorFilter
      type: System.String
      description: "\n<p>The name of the repair executor whose claimed tasks should be included in the list. If null, no filter is applied to the executor name.</p>\n"
    return:
      type: System.Threading.Tasks.Task{System.Fabric.Repair.RepairTaskList}
      description: "\n<p>The list of repair tasks matching all of the given filters.</p>\n"
  overload: System.Fabric.FabricClient.RepairManagementClient.GetRepairTaskListAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.RepairManagementClient.GetRepairTaskListAsync(System.String,System.Fabric.Repair.RepairTaskStateFilter,System.String,System.TimeSpan,System.Threading.CancellationToken)
  commentId: M:System.Fabric.FabricClient.RepairManagementClient.GetRepairTaskListAsync(System.String,System.Fabric.Repair.RepairTaskStateFilter,System.String,System.TimeSpan,System.Threading.CancellationToken)
  id: GetRepairTaskListAsync(System.String,System.Fabric.Repair.RepairTaskStateFilter,System.String,System.TimeSpan,System.Threading.CancellationToken)
  parent: System.Fabric.FabricClient.RepairManagementClient
  langs:
  - csharp
  - vb
  name: GetRepairTaskListAsync(String, RepairTaskStateFilter, String, TimeSpan, CancellationToken)
  nameWithType: FabricClient.RepairManagementClient.GetRepairTaskListAsync(String, RepairTaskStateFilter, String, TimeSpan, CancellationToken)
  fullName: System.Fabric.FabricClient.RepairManagementClient.GetRepairTaskListAsync(System.String, System.Fabric.Repair.RepairTaskStateFilter, System.String, System.TimeSpan, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.RepairManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: GetRepairTaskListAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.RepairManagementClient.cs
    startLine: 340
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Gets a list of repair tasks matching all of the given filters.</p>\n"
  example: []
  syntax:
    content: public Task<RepairTaskList> GetRepairTaskListAsync(string taskIdFilter, RepairTaskStateFilter stateFilter, string executorFilter, TimeSpan timeout, CancellationToken cancellationToken)
    content.vb: Public Function GetRepairTaskListAsync(taskIdFilter As String, stateFilter As RepairTaskStateFilter, executorFilter As String, timeout As TimeSpan, cancellationToken As CancellationToken) As Task(Of RepairTaskList)
    parameters:
    - id: taskIdFilter
      type: System.String
      description: "\n<p>The repair task ID prefix to be matched.  If null, no filter is applied to the task ID.</p>\n"
    - id: stateFilter
      type: System.Fabric.Repair.RepairTaskStateFilter
      description: "\n<p>A bitwise combination of state filter values that specify which task states should be included in the list.</p>\n"
    - id: executorFilter
      type: System.String
      description: "\n<p>The name of the repair executor whose claimed tasks should be included in the list. If null, no filter is applied to the executor name.</p>\n"
    - id: timeout
      type: System.TimeSpan
      description: "\n<p>The maximum amount of time Service Fabric will allow this operation to continue before returning a <xref href=\"System.TimeoutException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The optional cancellation token that the operation is observing. It can be used to send a notification that the operation should be canceled. Note that cancellation is advisory and that the operation may still be completed even if it is cancelled.</p>\n"
    return:
      type: System.Threading.Tasks.Task{System.Fabric.Repair.RepairTaskList}
      description: "\n<p>The list of repair tasks matching all of the given filters.</p>\n"
  overload: System.Fabric.FabricClient.RepairManagementClient.GetRepairTaskListAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.RepairManagementClient.UpdateRepairTaskHealthPolicyAsync(System.String,System.Int64,System.Nullable{System.Boolean},System.Nullable{System.Boolean})
  commentId: M:System.Fabric.FabricClient.RepairManagementClient.UpdateRepairTaskHealthPolicyAsync(System.String,System.Int64,System.Nullable{System.Boolean},System.Nullable{System.Boolean})
  id: UpdateRepairTaskHealthPolicyAsync(System.String,System.Int64,System.Nullable{System.Boolean},System.Nullable{System.Boolean})
  parent: System.Fabric.FabricClient.RepairManagementClient
  langs:
  - csharp
  - vb
  name: UpdateRepairTaskHealthPolicyAsync(String, Int64, Nullable<Boolean>, Nullable<Boolean>)
  nameWithType: FabricClient.RepairManagementClient.UpdateRepairTaskHealthPolicyAsync(String, Int64, Nullable<Boolean>, Nullable<Boolean>)
  fullName: System.Fabric.FabricClient.RepairManagementClient.UpdateRepairTaskHealthPolicyAsync(System.String, System.Int64, System.Nullable<System.Boolean>, System.Nullable<System.Boolean>)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.RepairManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: UpdateRepairTaskHealthPolicyAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.RepairManagementClient.cs
    startLine: 382
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Updates the health policy of the given repair task.</p>\n"
  example: []
  syntax:
    content: public Task<long> UpdateRepairTaskHealthPolicyAsync(string repairTaskId, long version, bool ? performPreparingHealthCheck, bool ? performRestoringHealthCheck)
    content.vb: Public Function UpdateRepairTaskHealthPolicyAsync(repairTaskId As String, version As Long, performPreparingHealthCheck As Boolean?, performRestoringHealthCheck As Boolean?) As Task(Of Long)
    parameters:
    - id: repairTaskId
      type: System.String
      description: "\n<p>The ID of the repair task for which the health policy is to be updated.</p>\n"
    - id: version
      type: System.Int64
      description: "\n<p>The current version number of the repair task. If non-zero, then the request will only succeed if this value matches the actual current value of the repair task. If zero, then no version check is performed.</p>\n"
    - id: performPreparingHealthCheck
      type: System.Nullable{System.Boolean}
      description: "\n<p>\nA nullable boolean indicating if health check is to be performed in the Preparing stage of the repair task.\nSpecify <code>null</code> for this parameter if the existing value should not be altered. Otherwise, specify the desired new value. \n</p>\n"
    - id: performRestoringHealthCheck
      type: System.Nullable{System.Boolean}
      description: "\n<p>\nA nullable boolean indicating if health check is to be performed in the Restoring stage of the repair task.\nSpecify <code>null</code> for this parameter if the existing value should not be altered. Otherwise, specify the desired new value. \n</p>\n"
    return:
      type: System.Threading.Tasks.Task{System.Int64}
  overload: System.Fabric.FabricClient.RepairManagementClient.UpdateRepairTaskHealthPolicyAsync*
  nameWithType.vb: FabricClient.RepairManagementClient.UpdateRepairTaskHealthPolicyAsync(String, Int64, Nullable(Of Boolean), Nullable(Of Boolean))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Fabric.FabricClient.RepairManagementClient.UpdateRepairTaskHealthPolicyAsync(System.String, System.Int64, System.Nullable(Of System.Boolean), System.Nullable(Of System.Boolean))
  name.vb: UpdateRepairTaskHealthPolicyAsync(String, Int64, Nullable(Of Boolean), Nullable(Of Boolean))
- uid: System.Fabric.FabricClient.RepairManagementClient.UpdateRepairTaskHealthPolicyAsync(System.String,System.Int64,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.TimeSpan,System.Threading.CancellationToken)
  commentId: M:System.Fabric.FabricClient.RepairManagementClient.UpdateRepairTaskHealthPolicyAsync(System.String,System.Int64,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.TimeSpan,System.Threading.CancellationToken)
  id: UpdateRepairTaskHealthPolicyAsync(System.String,System.Int64,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.TimeSpan,System.Threading.CancellationToken)
  parent: System.Fabric.FabricClient.RepairManagementClient
  langs:
  - csharp
  - vb
  name: UpdateRepairTaskHealthPolicyAsync(String, Int64, Nullable<Boolean>, Nullable<Boolean>, TimeSpan, CancellationToken)
  nameWithType: FabricClient.RepairManagementClient.UpdateRepairTaskHealthPolicyAsync(String, Int64, Nullable<Boolean>, Nullable<Boolean>, TimeSpan, CancellationToken)
  fullName: System.Fabric.FabricClient.RepairManagementClient.UpdateRepairTaskHealthPolicyAsync(System.String, System.Int64, System.Nullable<System.Boolean>, System.Nullable<System.Boolean>, System.TimeSpan, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.RepairManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: UpdateRepairTaskHealthPolicyAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.RepairManagementClient.cs
    startLine: 423
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Updates the health policy of the given repair task.</p>\n"
  example: []
  syntax:
    content: public Task<long> UpdateRepairTaskHealthPolicyAsync(string repairTaskId, long version, bool ? performPreparingHealthCheck, bool ? performRestoringHealthCheck, TimeSpan timeout, CancellationToken cancellationToken)
    content.vb: Public Function UpdateRepairTaskHealthPolicyAsync(repairTaskId As String, version As Long, performPreparingHealthCheck As Boolean?, performRestoringHealthCheck As Boolean?, timeout As TimeSpan, cancellationToken As CancellationToken) As Task(Of Long)
    parameters:
    - id: repairTaskId
      type: System.String
      description: "\n<p>The ID of the repair task for which the health policy is to be updated.</p>\n"
    - id: version
      type: System.Int64
      description: "\n<p>The current version number of the repair task. If non-zero, then the request will only succeed if this value matches the actual current value of the repair task. If zero, then no version check is performed.</p>\n"
    - id: performPreparingHealthCheck
      type: System.Nullable{System.Boolean}
      description: "\n<p>\nA nullable boolean indicating if health check is to be performed in the Preparing stage of the repair task.\nSpecify <code>null</code> for this parameter if the existing value should not be altered. Else, specify the appropriate <code>bool</code> value. \n</p>\n"
    - id: performRestoringHealthCheck
      type: System.Nullable{System.Boolean}
      description: "\n<p>\nA nullable boolean indicating if health check is to be performed in the Restoring stage of the repair task.\nSpecify <code>null</code> for this parameter if the existing value should not be altered. Else, specify the appropriate <code>bool</code> value. \n</p>\n"
    - id: timeout
      type: System.TimeSpan
      description: "\n<p>The maximum amount of time Service Fabric will allow this operation to continue before returning a <xref href=\"System.TimeoutException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The optional cancellation token that the operation is observing. It can be used to send a notification that the operation should be canceled. Note that cancellation is advisory and that the operation may still be completed even if it is cancelled.</p>\n"
    return:
      type: System.Threading.Tasks.Task{System.Int64}
      description: "\n<p>A task representing the asynchronous operation.</p>\n"
  overload: System.Fabric.FabricClient.RepairManagementClient.UpdateRepairTaskHealthPolicyAsync*
  nameWithType.vb: FabricClient.RepairManagementClient.UpdateRepairTaskHealthPolicyAsync(String, Int64, Nullable(Of Boolean), Nullable(Of Boolean), TimeSpan, CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Fabric.FabricClient.RepairManagementClient.UpdateRepairTaskHealthPolicyAsync(System.String, System.Int64, System.Nullable(Of System.Boolean), System.Nullable(Of System.Boolean), System.TimeSpan, System.Threading.CancellationToken)
  name.vb: UpdateRepairTaskHealthPolicyAsync(String, Int64, Nullable(Of Boolean), Nullable(Of Boolean), TimeSpan, CancellationToken)
references:
- uid: System.Fabric
  commentId: N:System.Fabric
  isExternal: false
  name: System.Fabric
  nameWithType: System.Fabric
  fullName: System.Fabric
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.FabricClient.RepairManagementClient.System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
  commentId: M:System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  parent: System.Fabric.Messaging.Stream.ByteArraySerializer
  definition: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  name: Serialize<FabricClient.RepairManagementClient>()
  nameWithType: ByteArraySerializer.Serialize<FabricClient.RepairManagementClient>()
  fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<System.Fabric.FabricClient.RepairManagementClient>()
  nameWithType.vb: ByteArraySerializer.Serialize(Of FabricClient.RepairManagementClient)()
  fullname.vb: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of System.Fabric.FabricClient.RepairManagementClient)()
  name.vb: Serialize(Of FabricClient.RepairManagementClient)()
  spec.csharp:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
    name: Serialize<FabricClient.RepairManagementClient>
    nameWithType: ByteArraySerializer.Serialize<FabricClient.RepairManagementClient>
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<System.Fabric.FabricClient.RepairManagementClient>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
    name: Serialize(Of FabricClient.RepairManagementClient)
    nameWithType: ByteArraySerializer.Serialize(Of FabricClient.RepairManagementClient)
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of System.Fabric.FabricClient.RepairManagementClient)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  commentId: M:System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  isExternal: false
  name: Serialize<T>(T)
  nameWithType: ByteArraySerializer.Serialize<T>(T)
  fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<T>(T)
  nameWithType.vb: ByteArraySerializer.Serialize(Of T)(T)
  fullname.vb: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of T)(T)
  name.vb: Serialize(Of T)(T)
  spec.csharp:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
    name: Serialize<T>
    nameWithType: ByteArraySerializer.Serialize<T>
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
    name: Serialize(Of T)
    nameWithType: ByteArraySerializer.Serialize(Of T)
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.Messaging.Stream.ByteArraySerializer
  commentId: T:System.Fabric.Messaging.Stream.ByteArraySerializer
  parent: System.Fabric.Messaging.Stream
  isExternal: false
  name: ByteArraySerializer
  nameWithType: ByteArraySerializer
  fullName: System.Fabric.Messaging.Stream.ByteArraySerializer
- uid: System.Fabric.Messaging.Stream
  commentId: N:System.Fabric.Messaging.Stream
  isExternal: false
  name: System.Fabric.Messaging.Stream
  nameWithType: System.Fabric.Messaging.Stream
  fullName: System.Fabric.Messaging.Stream
- uid: System.Fabric.FabricClient.RepairManagementClient.CreateRepairTaskAsync*
  commentId: Overload:System.Fabric.FabricClient.RepairManagementClient.CreateRepairTaskAsync
  isExternal: false
  name: CreateRepairTaskAsync
  nameWithType: FabricClient.RepairManagementClient.CreateRepairTaskAsync
  fullName: System.Fabric.FabricClient.RepairManagementClient.CreateRepairTaskAsync
- uid: System.Fabric.Repair.RepairTask
  commentId: T:System.Fabric.Repair.RepairTask
  parent: System.Fabric.Repair
  isExternal: false
  name: RepairTask
  nameWithType: RepairTask
  fullName: System.Fabric.Repair.RepairTask
- uid: System.Threading.Tasks.Task{System.Int64}
  commentId: T:System.Threading.Tasks.Task{System.Int64}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Int64>
  nameWithType: Task<Int64>
  fullName: System.Threading.Tasks.Task<System.Int64>
  nameWithType.vb: Task(Of Int64)
  fullname.vb: System.Threading.Tasks.Task(Of System.Int64)
  name.vb: Task(Of Int64)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.Repair
  commentId: N:System.Fabric.Repair
  isExternal: false
  name: System.Fabric.Repair
  nameWithType: System.Fabric.Repair
  fullName: System.Fabric.Repair
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullname.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: System.TimeoutException
  commentId: T:System.TimeoutException
- uid: System.TimeSpan
  commentId: T:System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: false
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
- uid: System.Fabric.FabricClient.RepairManagementClient.CancelRepairTaskAsync*
  commentId: Overload:System.Fabric.FabricClient.RepairManagementClient.CancelRepairTaskAsync
  isExternal: false
  name: CancelRepairTaskAsync
  nameWithType: FabricClient.RepairManagementClient.CancelRepairTaskAsync
  fullName: System.Fabric.FabricClient.RepairManagementClient.CancelRepairTaskAsync
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Int64
  commentId: T:System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Fabric.FabricClient.RepairManagementClient.ForceApproveRepairTaskAsync*
  commentId: Overload:System.Fabric.FabricClient.RepairManagementClient.ForceApproveRepairTaskAsync
  isExternal: false
  name: ForceApproveRepairTaskAsync
  nameWithType: FabricClient.RepairManagementClient.ForceApproveRepairTaskAsync
  fullName: System.Fabric.FabricClient.RepairManagementClient.ForceApproveRepairTaskAsync
- uid: System.Fabric.FabricClient.RepairManagementClient.DeleteRepairTaskAsync*
  commentId: Overload:System.Fabric.FabricClient.RepairManagementClient.DeleteRepairTaskAsync
  isExternal: false
  name: DeleteRepairTaskAsync
  nameWithType: FabricClient.RepairManagementClient.DeleteRepairTaskAsync
  fullName: System.Fabric.FabricClient.RepairManagementClient.DeleteRepairTaskAsync
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Fabric.FabricClient.RepairManagementClient.UpdateRepairExecutionStateAsync*
  commentId: Overload:System.Fabric.FabricClient.RepairManagementClient.UpdateRepairExecutionStateAsync
  isExternal: false
  name: UpdateRepairExecutionStateAsync
  nameWithType: FabricClient.RepairManagementClient.UpdateRepairExecutionStateAsync
  fullName: System.Fabric.FabricClient.RepairManagementClient.UpdateRepairExecutionStateAsync
- uid: System.Fabric.FabricClient.RepairManagementClient.GetRepairTaskListAsync*
  commentId: Overload:System.Fabric.FabricClient.RepairManagementClient.GetRepairTaskListAsync
  isExternal: false
  name: GetRepairTaskListAsync
  nameWithType: FabricClient.RepairManagementClient.GetRepairTaskListAsync
  fullName: System.Fabric.FabricClient.RepairManagementClient.GetRepairTaskListAsync
- uid: System.Threading.Tasks.Task{System.Fabric.Repair.RepairTaskList}
  commentId: T:System.Threading.Tasks.Task{System.Fabric.Repair.RepairTaskList}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<RepairTaskList>
  nameWithType: Task<RepairTaskList>
  fullName: System.Threading.Tasks.Task<System.Fabric.Repair.RepairTaskList>
  nameWithType.vb: Task(Of RepairTaskList)
  fullname.vb: System.Threading.Tasks.Task(Of System.Fabric.Repair.RepairTaskList)
  name.vb: Task(Of RepairTaskList)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Fabric.Repair.RepairTaskList
    name: RepairTaskList
    nameWithType: RepairTaskList
    fullName: System.Fabric.Repair.RepairTaskList
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Fabric.Repair.RepairTaskList
    name: RepairTaskList
    nameWithType: RepairTaskList
    fullName: System.Fabric.Repair.RepairTaskList
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.Repair.RepairTaskStateFilter
  commentId: T:System.Fabric.Repair.RepairTaskStateFilter
  parent: System.Fabric.Repair
  isExternal: false
  name: RepairTaskStateFilter
  nameWithType: RepairTaskStateFilter
  fullName: System.Fabric.Repair.RepairTaskStateFilter
- uid: System.Fabric.FabricClient.RepairManagementClient.UpdateRepairTaskHealthPolicyAsync*
  commentId: Overload:System.Fabric.FabricClient.RepairManagementClient.UpdateRepairTaskHealthPolicyAsync
  isExternal: false
  name: UpdateRepairTaskHealthPolicyAsync
  nameWithType: FabricClient.RepairManagementClient.UpdateRepairTaskHealthPolicyAsync
  fullName: System.Fabric.FabricClient.RepairManagementClient.UpdateRepairTaskHealthPolicyAsync
- uid: System.Nullable{System.Boolean}
  commentId: T:System.Nullable{System.Boolean}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Boolean>
  nameWithType: Nullable<Boolean>
  fullName: System.Nullable<System.Boolean>
  nameWithType.vb: Nullable(Of Boolean)
  fullname.vb: System.Nullable(Of System.Boolean)
  name.vb: Nullable(Of Boolean)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullname.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
