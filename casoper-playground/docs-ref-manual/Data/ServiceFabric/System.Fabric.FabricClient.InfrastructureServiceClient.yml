### YamlMime:ManagedReference
items:
- uid: System.Fabric.FabricClient.InfrastructureServiceClient
  commentId: T:System.Fabric.FabricClient.InfrastructureServiceClient
  id: FabricClient.InfrastructureServiceClient
  parent: System.Fabric
  children:
  - System.Fabric.FabricClient.InfrastructureServiceClient.InvokeInfrastructureCommandAsync(System.Uri,System.String)
  - System.Fabric.FabricClient.InfrastructureServiceClient.InvokeInfrastructureCommandAsync(System.Uri,System.String,System.TimeSpan,System.Threading.CancellationToken)
  - System.Fabric.FabricClient.InfrastructureServiceClient.InvokeInfrastructureQueryAsync(System.Uri,System.String)
  - System.Fabric.FabricClient.InfrastructureServiceClient.InvokeInfrastructureQueryAsync(System.Uri,System.String,System.TimeSpan,System.Threading.CancellationToken)
  langs:
  - csharp
  - vb
  name: FabricClient.InfrastructureServiceClient
  nameWithType: FabricClient.InfrastructureServiceClient
  fullName: System.Fabric.FabricClient.InfrastructureServiceClient
  type: Class
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.InfrastructureServiceClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: InfrastructureServiceClient
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.InfrastructureServiceClient.cs
    startLine: 20
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Provides methods for performing infrastructure-specific operations.</p>\n<p>This class supports the Service Fabric platform; it is not meant to be called directly from your code.</p>\n"
  remarks: "\n<p>The InfrastructureService must be enabled before this client can be used. The InfrastructureService is only supported on some infrastructures.</p>\n"
  example: []
  syntax:
    content: public sealed class InfrastructureServiceClient
    content.vb: Public NotInheritable Class InfrastructureServiceClient
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  extensionMethods:
  - System.Fabric.FabricClient.InfrastructureServiceClient.System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: System.Fabric.FabricClient.InfrastructureServiceClient.InvokeInfrastructureCommandAsync(System.Uri,System.String)
  commentId: M:System.Fabric.FabricClient.InfrastructureServiceClient.InvokeInfrastructureCommandAsync(System.Uri,System.String)
  id: InvokeInfrastructureCommandAsync(System.Uri,System.String)
  parent: System.Fabric.FabricClient.InfrastructureServiceClient
  langs:
  - csharp
  - vb
  name: InvokeInfrastructureCommandAsync(Uri, String)
  nameWithType: FabricClient.InfrastructureServiceClient.InvokeInfrastructureCommandAsync(Uri, String)
  fullName: System.Fabric.FabricClient.InfrastructureServiceClient.InvokeInfrastructureCommandAsync(System.Uri, System.String)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.InfrastructureServiceClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: InvokeInfrastructureCommandAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.InfrastructureServiceClient.cs
    startLine: 53
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Asynchronously invokes an administrative command on the given infrastructure service instance.</p>\n"
  example: []
  syntax:
    content: public Task<string> InvokeInfrastructureCommandAsync(Uri serviceName, string command)
    content.vb: Public Function InvokeInfrastructureCommandAsync(serviceName As Uri, command As String) As Task(Of String)
    parameters:
    - id: serviceName
      type: System.Uri
      description: "\n<p>The name of the target infrastructure service instance.</p>\n"
    - id: command
      type: System.String
      description: "\n<p>The text of the command to be invoked.  The content of the command is infrastructure-specific.</p>\n"
    return:
      type: System.Threading.Tasks.Task{System.String}
      description: "\n<p>The response from the infrastructure service. The response format is a JSON string. The contents of the response depend on which command was issued.</p>\n"
  overload: System.Fabric.FabricClient.InfrastructureServiceClient.InvokeInfrastructureCommandAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.InfrastructureServiceClient.InvokeInfrastructureCommandAsync(System.Uri,System.String,System.TimeSpan,System.Threading.CancellationToken)
  commentId: M:System.Fabric.FabricClient.InfrastructureServiceClient.InvokeInfrastructureCommandAsync(System.Uri,System.String,System.TimeSpan,System.Threading.CancellationToken)
  id: InvokeInfrastructureCommandAsync(System.Uri,System.String,System.TimeSpan,System.Threading.CancellationToken)
  parent: System.Fabric.FabricClient.InfrastructureServiceClient
  langs:
  - csharp
  - vb
  name: InvokeInfrastructureCommandAsync(Uri, String, TimeSpan, CancellationToken)
  nameWithType: FabricClient.InfrastructureServiceClient.InvokeInfrastructureCommandAsync(Uri, String, TimeSpan, CancellationToken)
  fullName: System.Fabric.FabricClient.InfrastructureServiceClient.InvokeInfrastructureCommandAsync(System.Uri, System.String, System.TimeSpan, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.InfrastructureServiceClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: InvokeInfrastructureCommandAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.InfrastructureServiceClient.cs
    startLine: 76
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Asynchronously invokes an administrative command on an infrastructure service.</p>\n"
  example: []
  syntax:
    content: public Task<string> InvokeInfrastructureCommandAsync(Uri serviceName, string command, TimeSpan timeout, CancellationToken cancellationToken)
    content.vb: Public Function InvokeInfrastructureCommandAsync(serviceName As Uri, command As String, timeout As TimeSpan, cancellationToken As CancellationToken) As Task(Of String)
    parameters:
    - id: serviceName
      type: System.Uri
      description: "\n<p>The name of the target infrastructure service instance.</p>\n"
    - id: command
      type: System.String
      description: "\n<p>The text of the command to be invoked.  The content of the command is infrastructure-specific.</p>\n"
    - id: timeout
      type: System.TimeSpan
      description: "\n<p>The maximum amount of time Service Fabric will allow this operation to continue before returning a <xref href=\"System.TimeoutException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The optional cancellation token that the operation is observing. It can be used to send a notification that the operation should be canceled. Note that cancellation is advisory and that the operation may still be completed even if it is cancelled.</p>\n"
    return:
      type: System.Threading.Tasks.Task{System.String}
      description: "\n<p>The response from the infrastructure service. The response format is a JSON string. The contents of the response depend on which command was issued.</p>\n"
  overload: System.Fabric.FabricClient.InfrastructureServiceClient.InvokeInfrastructureCommandAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.InfrastructureServiceClient.InvokeInfrastructureQueryAsync(System.Uri,System.String)
  commentId: M:System.Fabric.FabricClient.InfrastructureServiceClient.InvokeInfrastructureQueryAsync(System.Uri,System.String)
  id: InvokeInfrastructureQueryAsync(System.Uri,System.String)
  parent: System.Fabric.FabricClient.InfrastructureServiceClient
  langs:
  - csharp
  - vb
  name: InvokeInfrastructureQueryAsync(Uri, String)
  nameWithType: FabricClient.InfrastructureServiceClient.InvokeInfrastructureQueryAsync(Uri, String)
  fullName: System.Fabric.FabricClient.InfrastructureServiceClient.InvokeInfrastructureQueryAsync(System.Uri, System.String)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.InfrastructureServiceClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: InvokeInfrastructureQueryAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.InfrastructureServiceClient.cs
    startLine: 94
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Asynchronously invokes a read-only query on the given infrastructure service instance.</p>\n"
  example: []
  syntax:
    content: public Task<string> InvokeInfrastructureQueryAsync(Uri serviceName, string command)
    content.vb: Public Function InvokeInfrastructureQueryAsync(serviceName As Uri, command As String) As Task(Of String)
    parameters:
    - id: serviceName
      type: System.Uri
      description: "\n<p>The name of the target infrastructure service instance.</p>\n"
    - id: command
      type: System.String
      description: "\n<p>The text of the command to be invoked.  The content of the command is infrastructure-specific.</p>\n"
    return:
      type: System.Threading.Tasks.Task{System.String}
      description: "\n<p>The response from the infrastructure service. The response format is a JSON string. The contents of the response depend on which command was issued.</p>\n"
  overload: System.Fabric.FabricClient.InfrastructureServiceClient.InvokeInfrastructureQueryAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.InfrastructureServiceClient.InvokeInfrastructureQueryAsync(System.Uri,System.String,System.TimeSpan,System.Threading.CancellationToken)
  commentId: M:System.Fabric.FabricClient.InfrastructureServiceClient.InvokeInfrastructureQueryAsync(System.Uri,System.String,System.TimeSpan,System.Threading.CancellationToken)
  id: InvokeInfrastructureQueryAsync(System.Uri,System.String,System.TimeSpan,System.Threading.CancellationToken)
  parent: System.Fabric.FabricClient.InfrastructureServiceClient
  langs:
  - csharp
  - vb
  name: InvokeInfrastructureQueryAsync(Uri, String, TimeSpan, CancellationToken)
  nameWithType: FabricClient.InfrastructureServiceClient.InvokeInfrastructureQueryAsync(Uri, String, TimeSpan, CancellationToken)
  fullName: System.Fabric.FabricClient.InfrastructureServiceClient.InvokeInfrastructureQueryAsync(System.Uri, System.String, System.TimeSpan, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.InfrastructureServiceClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: InvokeInfrastructureQueryAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.InfrastructureServiceClient.cs
    startLine: 117
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Asynchronously invokes a read-only query on the given infrastructure service instance.</p>\n"
  example: []
  syntax:
    content: public Task<string> InvokeInfrastructureQueryAsync(Uri serviceName, string command, TimeSpan timeout, CancellationToken cancellationToken)
    content.vb: Public Function InvokeInfrastructureQueryAsync(serviceName As Uri, command As String, timeout As TimeSpan, cancellationToken As CancellationToken) As Task(Of String)
    parameters:
    - id: serviceName
      type: System.Uri
      description: "\n<p>The name of the target infrastructure service instance.</p>\n"
    - id: command
      type: System.String
      description: "\n<p>The text of the command to be invoked.  The content of the command is infrastructure-specific.</p>\n"
    - id: timeout
      type: System.TimeSpan
      description: "\n<p>The maximum amount of time Service Fabric will allow this operation to continue before returning a <xref href=\"System.TimeoutException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The optional cancellation token that the operation is observing. It can be used to send a notification that the operation should be canceled. Note that cancellation is advisory and that the operation may still be completed even if it is cancelled.</p>\n"
    return:
      type: System.Threading.Tasks.Task{System.String}
      description: "\n<p>The response from the infrastructure service. The response format is a JSON string. The contents of the response depend on which command was issued.</p>\n"
  overload: System.Fabric.FabricClient.InfrastructureServiceClient.InvokeInfrastructureQueryAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: System.Fabric
  commentId: N:System.Fabric
  isExternal: false
  name: System.Fabric
  nameWithType: System.Fabric
  fullName: System.Fabric
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.FabricClient.InfrastructureServiceClient.System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
  commentId: M:System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  parent: System.Fabric.Messaging.Stream.ByteArraySerializer
  definition: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  name: Serialize<FabricClient.InfrastructureServiceClient>()
  nameWithType: ByteArraySerializer.Serialize<FabricClient.InfrastructureServiceClient>()
  fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<System.Fabric.FabricClient.InfrastructureServiceClient>()
  nameWithType.vb: ByteArraySerializer.Serialize(Of FabricClient.InfrastructureServiceClient)()
  fullname.vb: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of System.Fabric.FabricClient.InfrastructureServiceClient)()
  name.vb: Serialize(Of FabricClient.InfrastructureServiceClient)()
  spec.csharp:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
    name: Serialize<FabricClient.InfrastructureServiceClient>
    nameWithType: ByteArraySerializer.Serialize<FabricClient.InfrastructureServiceClient>
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<System.Fabric.FabricClient.InfrastructureServiceClient>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
    name: Serialize(Of FabricClient.InfrastructureServiceClient)
    nameWithType: ByteArraySerializer.Serialize(Of FabricClient.InfrastructureServiceClient)
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of System.Fabric.FabricClient.InfrastructureServiceClient)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  commentId: M:System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  isExternal: false
  name: Serialize<T>(T)
  nameWithType: ByteArraySerializer.Serialize<T>(T)
  fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<T>(T)
  nameWithType.vb: ByteArraySerializer.Serialize(Of T)(T)
  fullname.vb: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of T)(T)
  name.vb: Serialize(Of T)(T)
  spec.csharp:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
    name: Serialize<T>
    nameWithType: ByteArraySerializer.Serialize<T>
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
    name: Serialize(Of T)
    nameWithType: ByteArraySerializer.Serialize(Of T)
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.Messaging.Stream.ByteArraySerializer
  commentId: T:System.Fabric.Messaging.Stream.ByteArraySerializer
  parent: System.Fabric.Messaging.Stream
  isExternal: false
  name: ByteArraySerializer
  nameWithType: ByteArraySerializer
  fullName: System.Fabric.Messaging.Stream.ByteArraySerializer
- uid: System.Fabric.Messaging.Stream
  commentId: N:System.Fabric.Messaging.Stream
  isExternal: false
  name: System.Fabric.Messaging.Stream
  nameWithType: System.Fabric.Messaging.Stream
  fullName: System.Fabric.Messaging.Stream
- uid: System.Fabric.FabricClient.InfrastructureServiceClient.InvokeInfrastructureCommandAsync*
  commentId: Overload:System.Fabric.FabricClient.InfrastructureServiceClient.InvokeInfrastructureCommandAsync
  isExternal: false
  name: InvokeInfrastructureCommandAsync
  nameWithType: FabricClient.InfrastructureServiceClient.InvokeInfrastructureCommandAsync
  fullName: System.Fabric.FabricClient.InfrastructureServiceClient.InvokeInfrastructureCommandAsync
- uid: System.Uri
  commentId: T:System.Uri
  parent: System
  isExternal: true
  name: Uri
  nameWithType: Uri
  fullName: System.Uri
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Threading.Tasks.Task{System.String}
  commentId: T:System.Threading.Tasks.Task{System.String}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<String>
  nameWithType: Task<String>
  fullName: System.Threading.Tasks.Task<System.String>
  nameWithType.vb: Task(Of String)
  fullname.vb: System.Threading.Tasks.Task(Of System.String)
  name.vb: Task(Of String)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullname.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: System.TimeoutException
  commentId: T:System.TimeoutException
- uid: System.TimeSpan
  commentId: T:System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: false
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
- uid: System.Fabric.FabricClient.InfrastructureServiceClient.InvokeInfrastructureQueryAsync*
  commentId: Overload:System.Fabric.FabricClient.InfrastructureServiceClient.InvokeInfrastructureQueryAsync
  isExternal: false
  name: InvokeInfrastructureQueryAsync
  nameWithType: FabricClient.InfrastructureServiceClient.InvokeInfrastructureQueryAsync
  fullName: System.Fabric.FabricClient.InfrastructureServiceClient.InvokeInfrastructureQueryAsync
