### YamlMime:ManagedReference
items:
- uid: Microsoft.ServiceFabric.Services.Communication.Runtime.ICommunicationListener
  commentId: T:Microsoft.ServiceFabric.Services.Communication.Runtime.ICommunicationListener
  id: ICommunicationListener
  parent: Microsoft.ServiceFabric.Services.Communication.Runtime
  children:
  - Microsoft.ServiceFabric.Services.Communication.Runtime.ICommunicationListener.Abort
  - Microsoft.ServiceFabric.Services.Communication.Runtime.ICommunicationListener.CloseAsync(System.Threading.CancellationToken)
  - Microsoft.ServiceFabric.Services.Communication.Runtime.ICommunicationListener.OpenAsync(System.Threading.CancellationToken)
  langs:
  - csharp
  - vb
  name: ICommunicationListener
  nameWithType: ICommunicationListener
  fullName: Microsoft.ServiceFabric.Services.Communication.Runtime.ICommunicationListener
  type: Interface
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Services/Communication/Runtime/ICommunicationListener.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: ICommunicationListener
    path: src/prod/src/managed/Microsoft.ServiceFabric.Services/Communication/Runtime/ICommunicationListener.cs
    startLine: 13
  assemblies:
  - Microsoft.ServiceFabric.Services
  namespace: Microsoft.ServiceFabric.Services.Communication.Runtime
  summary: "\nDefines the base interface and the state machine contract for the communication listener \nfor a Service Fabric Service.\n"
  example: []
  syntax:
    content: public interface ICommunicationListener
    content.vb: Public Interface ICommunicationListener
  extensionMethods:
  - Microsoft.ServiceFabric.Services.Communication.Runtime.ICommunicationListener.System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: Microsoft.ServiceFabric.Services.Communication.Runtime.ICommunicationListener.OpenAsync(System.Threading.CancellationToken)
  commentId: M:Microsoft.ServiceFabric.Services.Communication.Runtime.ICommunicationListener.OpenAsync(System.Threading.CancellationToken)
  id: OpenAsync(System.Threading.CancellationToken)
  parent: Microsoft.ServiceFabric.Services.Communication.Runtime.ICommunicationListener
  langs:
  - csharp
  - vb
  name: OpenAsync(CancellationToken)
  nameWithType: ICommunicationListener.OpenAsync(CancellationToken)
  fullName: Microsoft.ServiceFabric.Services.Communication.Runtime.ICommunicationListener.OpenAsync(System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Services/Communication/Runtime/ICommunicationListener.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: OpenAsync
    path: src/prod/src/managed/Microsoft.ServiceFabric.Services/Communication/Runtime/ICommunicationListener.cs
    startLine: 26
  assemblies:
  - Microsoft.ServiceFabric.Services
  namespace: Microsoft.ServiceFabric.Services.Communication.Runtime
  summary: "\nThis method causes the communication listener to be opened. Once the Open\ncompletes, the communication listener becomes usable - accepts and sends messages.\n"
  example: []
  syntax:
    content: Task<string> OpenAsync(CancellationToken cancellationToken)
    content.vb: Function OpenAsync(cancellationToken As CancellationToken) As Task(Of String)
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\nCancellation token\n"
    return:
      type: System.Threading.Tasks.Task{System.String}
      description: "\nA <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> that represents outstanding operation. The result of the Task is\nthe endpoint string.\n"
  overload: Microsoft.ServiceFabric.Services.Communication.Runtime.ICommunicationListener.OpenAsync*
- uid: Microsoft.ServiceFabric.Services.Communication.Runtime.ICommunicationListener.CloseAsync(System.Threading.CancellationToken)
  commentId: M:Microsoft.ServiceFabric.Services.Communication.Runtime.ICommunicationListener.CloseAsync(System.Threading.CancellationToken)
  id: CloseAsync(System.Threading.CancellationToken)
  parent: Microsoft.ServiceFabric.Services.Communication.Runtime.ICommunicationListener
  langs:
  - csharp
  - vb
  name: CloseAsync(CancellationToken)
  nameWithType: ICommunicationListener.CloseAsync(CancellationToken)
  fullName: Microsoft.ServiceFabric.Services.Communication.Runtime.ICommunicationListener.CloseAsync(System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Services/Communication/Runtime/ICommunicationListener.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: CloseAsync
    path: src/prod/src/managed/Microsoft.ServiceFabric.Services/Communication/Runtime/ICommunicationListener.cs
    startLine: 37
  assemblies:
  - Microsoft.ServiceFabric.Services
  namespace: Microsoft.ServiceFabric.Services.Communication.Runtime
  summary: "\nThis method causes the communication listener to close. Close is a terminal state and \nthis method allows the communication listener to transition to this state in a\ngraceful manner.\n"
  example: []
  syntax:
    content: Task CloseAsync(CancellationToken cancellationToken)
    content.vb: Function CloseAsync(cancellationToken As CancellationToken) As Task
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: Cancellation token
    return:
      type: System.Threading.Tasks.Task
      description: "\nA <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> that represents outstanding operation.\n"
  overload: Microsoft.ServiceFabric.Services.Communication.Runtime.ICommunicationListener.CloseAsync*
- uid: Microsoft.ServiceFabric.Services.Communication.Runtime.ICommunicationListener.Abort
  commentId: M:Microsoft.ServiceFabric.Services.Communication.Runtime.ICommunicationListener.Abort
  id: Abort
  parent: Microsoft.ServiceFabric.Services.Communication.Runtime.ICommunicationListener
  langs:
  - csharp
  - vb
  name: Abort()
  nameWithType: ICommunicationListener.Abort()
  fullName: Microsoft.ServiceFabric.Services.Communication.Runtime.ICommunicationListener.Abort()
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Services/Communication/Runtime/ICommunicationListener.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: Abort
    path: src/prod/src/managed/Microsoft.ServiceFabric.Services/Communication/Runtime/ICommunicationListener.cs
    startLine: 44
  assemblies:
  - Microsoft.ServiceFabric.Services
  namespace: Microsoft.ServiceFabric.Services.Communication.Runtime
  summary: "\nThis method causes the communication listener to close. Close is a terminal state and\nthis method causes the transition to close ungracefully. Any outstanding operations\n(including close) should be canceled when this method is called.\n"
  example: []
  syntax:
    content: void Abort()
    content.vb: Sub Abort
  overload: Microsoft.ServiceFabric.Services.Communication.Runtime.ICommunicationListener.Abort*
references:
- uid: Microsoft.ServiceFabric.Services.Communication.Runtime
  commentId: N:Microsoft.ServiceFabric.Services.Communication.Runtime
  isExternal: false
  name: Microsoft.ServiceFabric.Services.Communication.Runtime
  nameWithType: Microsoft.ServiceFabric.Services.Communication.Runtime
  fullName: Microsoft.ServiceFabric.Services.Communication.Runtime
- uid: Microsoft.ServiceFabric.Services.Communication.Runtime.ICommunicationListener.System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
  commentId: M:System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  parent: System.Fabric.Messaging.Stream.ByteArraySerializer
  definition: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  name: Serialize<ICommunicationListener>()
  nameWithType: ByteArraySerializer.Serialize<ICommunicationListener>()
  fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<Microsoft.ServiceFabric.Services.Communication.Runtime.ICommunicationListener>()
  nameWithType.vb: ByteArraySerializer.Serialize(Of ICommunicationListener)()
  fullname.vb: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of Microsoft.ServiceFabric.Services.Communication.Runtime.ICommunicationListener)()
  name.vb: Serialize(Of ICommunicationListener)()
  spec.csharp:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
    name: Serialize<ICommunicationListener>
    nameWithType: ByteArraySerializer.Serialize<ICommunicationListener>
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<Microsoft.ServiceFabric.Services.Communication.Runtime.ICommunicationListener>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
    name: Serialize(Of ICommunicationListener)
    nameWithType: ByteArraySerializer.Serialize(Of ICommunicationListener)
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of Microsoft.ServiceFabric.Services.Communication.Runtime.ICommunicationListener)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  commentId: M:System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  isExternal: false
  name: Serialize<T>(T)
  nameWithType: ByteArraySerializer.Serialize<T>(T)
  fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<T>(T)
  nameWithType.vb: ByteArraySerializer.Serialize(Of T)(T)
  fullname.vb: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of T)(T)
  name.vb: Serialize(Of T)(T)
  spec.csharp:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
    name: Serialize<T>
    nameWithType: ByteArraySerializer.Serialize<T>
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
    name: Serialize(Of T)
    nameWithType: ByteArraySerializer.Serialize(Of T)
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.Messaging.Stream.ByteArraySerializer
  commentId: T:System.Fabric.Messaging.Stream.ByteArraySerializer
  parent: System.Fabric.Messaging.Stream
  isExternal: false
  name: ByteArraySerializer
  nameWithType: ByteArraySerializer
  fullName: System.Fabric.Messaging.Stream.ByteArraySerializer
- uid: System.Fabric.Messaging.Stream
  commentId: N:System.Fabric.Messaging.Stream
  isExternal: false
  name: System.Fabric.Messaging.Stream
  nameWithType: System.Fabric.Messaging.Stream
  fullName: System.Fabric.Messaging.Stream
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: Microsoft.ServiceFabric.Services.Communication.Runtime.ICommunicationListener.OpenAsync*
  commentId: Overload:Microsoft.ServiceFabric.Services.Communication.Runtime.ICommunicationListener.OpenAsync
  isExternal: false
  name: OpenAsync
  nameWithType: ICommunicationListener.OpenAsync
  fullName: Microsoft.ServiceFabric.Services.Communication.Runtime.ICommunicationListener.OpenAsync
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task{System.String}
  commentId: T:System.Threading.Tasks.Task{System.String}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<String>
  nameWithType: Task<String>
  fullName: System.Threading.Tasks.Task<System.String>
  nameWithType.vb: Task(Of String)
  fullname.vb: System.Threading.Tasks.Task(Of System.String)
  name.vb: Task(Of String)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: false
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullname.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceFabric.Services.Communication.Runtime.ICommunicationListener.CloseAsync*
  commentId: Overload:Microsoft.ServiceFabric.Services.Communication.Runtime.ICommunicationListener.CloseAsync
  isExternal: false
  name: CloseAsync
  nameWithType: ICommunicationListener.CloseAsync
  fullName: Microsoft.ServiceFabric.Services.Communication.Runtime.ICommunicationListener.CloseAsync
- uid: Microsoft.ServiceFabric.Services.Communication.Runtime.ICommunicationListener.Abort*
  commentId: Overload:Microsoft.ServiceFabric.Services.Communication.Runtime.ICommunicationListener.Abort
  isExternal: false
  name: Abort
  nameWithType: ICommunicationListener.Abort
  fullName: Microsoft.ServiceFabric.Services.Communication.Runtime.ICommunicationListener.Abort
