### YamlMime:ManagedReference
items:
- uid: System.Fabric.Health.ApplicationHealthPolicy
  commentId: T:System.Fabric.Health.ApplicationHealthPolicy
  id: ApplicationHealthPolicy
  parent: System.Fabric.Health
  children:
  - System.Fabric.Health.ApplicationHealthPolicy.#ctor
  - System.Fabric.Health.ApplicationHealthPolicy.ConsiderWarningAsError
  - System.Fabric.Health.ApplicationHealthPolicy.DefaultServiceTypeHealthPolicy
  - System.Fabric.Health.ApplicationHealthPolicy.MaxPercentUnhealthyDeployedApplications
  - System.Fabric.Health.ApplicationHealthPolicy.ServiceTypeHealthPolicyMap
  - System.Fabric.Health.ApplicationHealthPolicy.ToString
  langs:
  - csharp
  - vb
  name: ApplicationHealthPolicy
  nameWithType: ApplicationHealthPolicy
  fullName: System.Fabric.Health.ApplicationHealthPolicy
  type: Class
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/Health/ApplicationHealthPolicy.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: ApplicationHealthPolicy
    path: src/prod/src/managed/Api/src/System/Fabric/Health/ApplicationHealthPolicy.cs
    startLine: 16
  assemblies:
  - System.Fabric
  namespace: System.Fabric.Health
  summary: "\n<p>Defines a health policy used to evaluate the health of an application or one of its children entities.</p>\n"
  example: []
  syntax:
    content: public class ApplicationHealthPolicy
    content.vb: Public Class ApplicationHealthPolicy
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  extensionMethods:
  - System.Fabric.Health.ApplicationHealthPolicy.System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: System.Fabric.Health.ApplicationHealthPolicy.#ctor
  commentId: M:System.Fabric.Health.ApplicationHealthPolicy.#ctor
  id: '#ctor'
  parent: System.Fabric.Health.ApplicationHealthPolicy
  langs:
  - csharp
  - vb
  name: ApplicationHealthPolicy()
  nameWithType: ApplicationHealthPolicy.ApplicationHealthPolicy()
  fullName: System.Fabric.Health.ApplicationHealthPolicy.ApplicationHealthPolicy()
  type: Constructor
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/Health/ApplicationHealthPolicy.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: .ctor
    path: src/prod/src/managed/Api/src/System/Fabric/Health/ApplicationHealthPolicy.cs
    startLine: 29
  assemblies:
  - System.Fabric
  namespace: System.Fabric.Health
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Fabric.Health.ApplicationHealthPolicy\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  remarks: By default, no errors or warnings are tolerated.
  example: []
  syntax:
    content: public ApplicationHealthPolicy()
    content.vb: Public Sub New
  overload: System.Fabric.Health.ApplicationHealthPolicy.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.Health.ApplicationHealthPolicy.ConsiderWarningAsError
  commentId: P:System.Fabric.Health.ApplicationHealthPolicy.ConsiderWarningAsError
  id: ConsiderWarningAsError
  parent: System.Fabric.Health.ApplicationHealthPolicy
  langs:
  - csharp
  - vb
  name: ConsiderWarningAsError
  nameWithType: ApplicationHealthPolicy.ConsiderWarningAsError
  fullName: System.Fabric.Health.ApplicationHealthPolicy.ConsiderWarningAsError
  type: Property
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/Health/ApplicationHealthPolicy.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: ConsiderWarningAsError
    path: src/prod/src/managed/Api/src/System/Fabric/Health/ApplicationHealthPolicy.cs
    startLine: 45
  assemblies:
  - System.Fabric
  namespace: System.Fabric.Health
  summary: "\n<p>Gets or sets a <xref href=\"System.Boolean\" data-throw-if-not-resolved=\"false\"></xref> that determines whetherÂ reports with warning state should be treated with the same severity as errors.</p>\n"
  example: []
  syntax:
    content: public bool ConsiderWarningAsError { get; set; }
    content.vb: Public Property ConsiderWarningAsError As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if reports with warning state should be treated as errors; <strong>false</strong> when \nwarnings should not be treated as errors.</p>\n"
  overload: System.Fabric.Health.ApplicationHealthPolicy.ConsiderWarningAsError*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Fabric.Health.ApplicationHealthPolicy.MaxPercentUnhealthyDeployedApplications
  commentId: P:System.Fabric.Health.ApplicationHealthPolicy.MaxPercentUnhealthyDeployedApplications
  id: MaxPercentUnhealthyDeployedApplications
  parent: System.Fabric.Health.ApplicationHealthPolicy
  langs:
  - csharp
  - vb
  name: MaxPercentUnhealthyDeployedApplications
  nameWithType: ApplicationHealthPolicy.MaxPercentUnhealthyDeployedApplications
  fullName: System.Fabric.Health.ApplicationHealthPolicy.MaxPercentUnhealthyDeployedApplications
  type: Property
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/Health/ApplicationHealthPolicy.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: MaxPercentUnhealthyDeployedApplications
    path: src/prod/src/managed/Api/src/System/Fabric/Health/ApplicationHealthPolicy.cs
    startLine: 76
  assemblies:
  - System.Fabric
  namespace: System.Fabric.Health
  summary: "\n<p>Gets or sets the maximum allowed percentage of unhealthy deployed applications.</p>\n"
  remarks: "\n<p>\nThe percentage represents the maximum tolerated percentage of deployed applications that can be unhealthy \nbefore the application is considered in error. \nThis is calculated by dividing the number of unhealthy deployed applications over the number of nodes\nthat the applications are currently deployed on in the cluster.\nThe computation rounds up to tolerate one failure on small numbers of nodes. Default percentage: zero.\n</p>\n"
  example: []
  syntax:
    content: public byte MaxPercentUnhealthyDeployedApplications { get; set; }
    content.vb: Public Property MaxPercentUnhealthyDeployedApplications As Byte
    parameters: []
    return:
      type: System.Byte
      description: "\n<p>The maximum allowed percentage of unhealthy deployed applications. Allowed values are <xref href=\"System.Byte\" data-throw-if-not-resolved=\"false\"></xref> values from zero to 100.</p>\n"
  overload: System.Fabric.Health.ApplicationHealthPolicy.MaxPercentUnhealthyDeployedApplications*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The specified value was outside the range of integer values from zero to 100.</p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Fabric.Health.ApplicationHealthPolicy.ToString
  commentId: M:System.Fabric.Health.ApplicationHealthPolicy.ToString
  id: ToString
  parent: System.Fabric.Health.ApplicationHealthPolicy
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: ApplicationHealthPolicy.ToString()
  fullName: System.Fabric.Health.ApplicationHealthPolicy.ToString()
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/Health/ApplicationHealthPolicy.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: ToString
    path: src/prod/src/managed/Api/src/System/Fabric/Health/ApplicationHealthPolicy.cs
    startLine: 98
  assemblies:
  - System.Fabric
  namespace: System.Fabric.Health
  summary: "\nGets a string representation of the application health policy.\n"
  example: []
  syntax:
    content: public override string ToString()
    content.vb: Public Overrides Function ToString As String
    return:
      type: System.String
      description: A string representation of the application health policy.
  overridden: System.Object.ToString
  overload: System.Fabric.Health.ApplicationHealthPolicy.ToString*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Fabric.Health.ApplicationHealthPolicy.DefaultServiceTypeHealthPolicy
  commentId: P:System.Fabric.Health.ApplicationHealthPolicy.DefaultServiceTypeHealthPolicy
  id: DefaultServiceTypeHealthPolicy
  parent: System.Fabric.Health.ApplicationHealthPolicy
  langs:
  - csharp
  - vb
  name: DefaultServiceTypeHealthPolicy
  nameWithType: ApplicationHealthPolicy.DefaultServiceTypeHealthPolicy
  fullName: System.Fabric.Health.ApplicationHealthPolicy.DefaultServiceTypeHealthPolicy
  type: Property
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/Health/ApplicationHealthPolicy.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: DefaultServiceTypeHealthPolicy
    path: src/prod/src/managed/Api/src/System/Fabric/Health/ApplicationHealthPolicy.cs
    startLine: 137
  assemblies:
  - System.Fabric
  namespace: System.Fabric.Health
  summary: "\n<p>Gets or sets the health policy used by default to evaluate the health of a service type.</p>\n"
  example: []
  syntax:
    content: public ServiceTypeHealthPolicy DefaultServiceTypeHealthPolicy { get; set; }
    content.vb: Public Property DefaultServiceTypeHealthPolicy As ServiceTypeHealthPolicy
    parameters: []
    return:
      type: System.Fabric.Health.ServiceTypeHealthPolicy
      description: "\n<p>The <xref href=\"System.Fabric.Health.ServiceTypeHealthPolicy\" data-throw-if-not-resolved=\"false\"></xref> used to evaluate service type health if no service type policy is defined.</p>\n"
  overload: System.Fabric.Health.ApplicationHealthPolicy.DefaultServiceTypeHealthPolicy*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Fabric.Health.ApplicationHealthPolicy.ServiceTypeHealthPolicyMap
  commentId: P:System.Fabric.Health.ApplicationHealthPolicy.ServiceTypeHealthPolicyMap
  id: ServiceTypeHealthPolicyMap
  parent: System.Fabric.Health.ApplicationHealthPolicy
  langs:
  - csharp
  - vb
  name: ServiceTypeHealthPolicyMap
  nameWithType: ApplicationHealthPolicy.ServiceTypeHealthPolicyMap
  fullName: System.Fabric.Health.ApplicationHealthPolicy.ServiceTypeHealthPolicyMap
  type: Property
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/Health/ApplicationHealthPolicy.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: ServiceTypeHealthPolicyMap
    path: src/prod/src/managed/Api/src/System/Fabric/Health/ApplicationHealthPolicy.cs
    startLine: 168
  assemblies:
  - System.Fabric
  namespace: System.Fabric.Health
  summary: "\n<p>Gets or sets the map with <xref href=\"System.Fabric.Health.ServiceTypeHealthPolicy\" data-throw-if-not-resolved=\"false\"></xref> per service type name. </p>\n"
  remarks: "\n<p>The entries in the map replace the default service type health policy for each specified service type.\nFor example, in an application that contains both a stateless gateway service type and a stateful engine service type,\nthe health policies for the stateless and stateful services can be configured differently.\nWith policy per service type, there's more granular control of the health of the service.\n</p>\n<p>If no policy is \nspecified for a service type name, the <xref href=\"System.Fabric.Health.ApplicationHealthPolicy.DefaultServiceTypeHealthPolicy\" data-throw-if-not-resolved=\"false\"></xref>\nis used for evaluation.\n</p>\n"
  example: []
  syntax:
    content: public IDictionary<string, ServiceTypeHealthPolicy> ServiceTypeHealthPolicyMap { get; }
    content.vb: Public ReadOnly Property ServiceTypeHealthPolicyMap As IDictionary(Of String, ServiceTypeHealthPolicy)
    parameters: []
    return:
      type: System.Collections.Generic.IDictionary{System.String,System.Fabric.Health.ServiceTypeHealthPolicy}
      description: "\n<p>The map with service type health policy per service type name.</p>\n"
  overload: System.Fabric.Health.ApplicationHealthPolicy.ServiceTypeHealthPolicyMap*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
references:
- uid: System.Fabric.Health
  commentId: N:System.Fabric.Health
  isExternal: false
  name: System.Fabric.Health
  nameWithType: System.Fabric.Health
  fullName: System.Fabric.Health
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.Health.ApplicationHealthPolicy.System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
  commentId: M:System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  parent: System.Fabric.Messaging.Stream.ByteArraySerializer
  definition: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  name: Serialize<ApplicationHealthPolicy>()
  nameWithType: ByteArraySerializer.Serialize<ApplicationHealthPolicy>()
  fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<System.Fabric.Health.ApplicationHealthPolicy>()
  nameWithType.vb: ByteArraySerializer.Serialize(Of ApplicationHealthPolicy)()
  fullname.vb: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of System.Fabric.Health.ApplicationHealthPolicy)()
  name.vb: Serialize(Of ApplicationHealthPolicy)()
  spec.csharp:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
    name: Serialize<ApplicationHealthPolicy>
    nameWithType: ByteArraySerializer.Serialize<ApplicationHealthPolicy>
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<System.Fabric.Health.ApplicationHealthPolicy>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
    name: Serialize(Of ApplicationHealthPolicy)
    nameWithType: ByteArraySerializer.Serialize(Of ApplicationHealthPolicy)
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of System.Fabric.Health.ApplicationHealthPolicy)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  commentId: M:System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  isExternal: false
  name: Serialize<T>(T)
  nameWithType: ByteArraySerializer.Serialize<T>(T)
  fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<T>(T)
  nameWithType.vb: ByteArraySerializer.Serialize(Of T)(T)
  fullname.vb: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of T)(T)
  name.vb: Serialize(Of T)(T)
  spec.csharp:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
    name: Serialize<T>
    nameWithType: ByteArraySerializer.Serialize<T>
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
    name: Serialize(Of T)
    nameWithType: ByteArraySerializer.Serialize(Of T)
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.Messaging.Stream.ByteArraySerializer
  commentId: T:System.Fabric.Messaging.Stream.ByteArraySerializer
  parent: System.Fabric.Messaging.Stream
  isExternal: false
  name: ByteArraySerializer
  nameWithType: ByteArraySerializer
  fullName: System.Fabric.Messaging.Stream.ByteArraySerializer
- uid: System.Fabric.Messaging.Stream
  commentId: N:System.Fabric.Messaging.Stream
  isExternal: false
  name: System.Fabric.Messaging.Stream
  nameWithType: System.Fabric.Messaging.Stream
  fullName: System.Fabric.Messaging.Stream
- uid: System.Fabric.Health.ApplicationHealthPolicy
  commentId: T:System.Fabric.Health.ApplicationHealthPolicy
  parent: System.Fabric.Health
  isExternal: false
  name: ApplicationHealthPolicy
  nameWithType: ApplicationHealthPolicy
  fullName: System.Fabric.Health.ApplicationHealthPolicy
- uid: System.Fabric.Health.ApplicationHealthPolicy.#ctor*
  commentId: Overload:System.Fabric.Health.ApplicationHealthPolicy.#ctor
  isExternal: false
  name: ApplicationHealthPolicy
  nameWithType: ApplicationHealthPolicy.ApplicationHealthPolicy
  fullName: System.Fabric.Health.ApplicationHealthPolicy.ApplicationHealthPolicy
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Fabric.Health.ApplicationHealthPolicy.ConsiderWarningAsError*
  commentId: Overload:System.Fabric.Health.ApplicationHealthPolicy.ConsiderWarningAsError
  isExternal: false
  name: ConsiderWarningAsError
  nameWithType: ApplicationHealthPolicy.ConsiderWarningAsError
  fullName: System.Fabric.Health.ApplicationHealthPolicy.ConsiderWarningAsError
- uid: System.Byte
  commentId: T:System.Byte
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte
- uid: System.Fabric.Health.ApplicationHealthPolicy.MaxPercentUnhealthyDeployedApplications*
  commentId: Overload:System.Fabric.Health.ApplicationHealthPolicy.MaxPercentUnhealthyDeployedApplications
  isExternal: false
  name: MaxPercentUnhealthyDeployedApplications
  nameWithType: ApplicationHealthPolicy.MaxPercentUnhealthyDeployedApplications
  fullName: System.Fabric.Health.ApplicationHealthPolicy.MaxPercentUnhealthyDeployedApplications
- uid: System.ArgumentOutOfRangeException
  commentId: T:System.ArgumentOutOfRangeException
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.Health.ApplicationHealthPolicy.ToString*
  commentId: Overload:System.Fabric.Health.ApplicationHealthPolicy.ToString
  isExternal: false
  name: ToString
  nameWithType: ApplicationHealthPolicy.ToString
  fullName: System.Fabric.Health.ApplicationHealthPolicy.ToString
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Fabric.Health.ServiceTypeHealthPolicy
  commentId: T:System.Fabric.Health.ServiceTypeHealthPolicy
  parent: System.Fabric.Health
  isExternal: false
  name: ServiceTypeHealthPolicy
  nameWithType: ServiceTypeHealthPolicy
  fullName: System.Fabric.Health.ServiceTypeHealthPolicy
- uid: System.Fabric.Health.ApplicationHealthPolicy.DefaultServiceTypeHealthPolicy*
  commentId: Overload:System.Fabric.Health.ApplicationHealthPolicy.DefaultServiceTypeHealthPolicy
  isExternal: false
  name: DefaultServiceTypeHealthPolicy
  nameWithType: ApplicationHealthPolicy.DefaultServiceTypeHealthPolicy
  fullName: System.Fabric.Health.ApplicationHealthPolicy.DefaultServiceTypeHealthPolicy
- uid: System.Fabric.Health.ApplicationHealthPolicy.DefaultServiceTypeHealthPolicy
  commentId: P:System.Fabric.Health.ApplicationHealthPolicy.DefaultServiceTypeHealthPolicy
- uid: System.Fabric.Health.ApplicationHealthPolicy.ServiceTypeHealthPolicyMap*
  commentId: Overload:System.Fabric.Health.ApplicationHealthPolicy.ServiceTypeHealthPolicyMap
  isExternal: false
  name: ServiceTypeHealthPolicyMap
  nameWithType: ApplicationHealthPolicy.ServiceTypeHealthPolicyMap
  fullName: System.Fabric.Health.ApplicationHealthPolicy.ServiceTypeHealthPolicyMap
- uid: System.Collections.Generic.IDictionary{System.String,System.Fabric.Health.ServiceTypeHealthPolicy}
  commentId: T:System.Collections.Generic.IDictionary{System.String,System.Fabric.Health.ServiceTypeHealthPolicy}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IDictionary`2
  name: IDictionary<String, ServiceTypeHealthPolicy>
  nameWithType: IDictionary<String, ServiceTypeHealthPolicy>
  fullName: System.Collections.Generic.IDictionary<System.String, System.Fabric.Health.ServiceTypeHealthPolicy>
  nameWithType.vb: IDictionary(Of String, ServiceTypeHealthPolicy)
  fullname.vb: System.Collections.Generic.IDictionary(Of System.String, System.Fabric.Health.ServiceTypeHealthPolicy)
  name.vb: IDictionary(Of String, ServiceTypeHealthPolicy)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Fabric.Health.ServiceTypeHealthPolicy
    name: ServiceTypeHealthPolicy
    nameWithType: ServiceTypeHealthPolicy
    fullName: System.Fabric.Health.ServiceTypeHealthPolicy
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Fabric.Health.ServiceTypeHealthPolicy
    name: ServiceTypeHealthPolicy
    nameWithType: ServiceTypeHealthPolicy
    fullName: System.Fabric.Health.ServiceTypeHealthPolicy
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IDictionary`2
  commentId: T:System.Collections.Generic.IDictionary`2
  isExternal: true
  name: IDictionary<TKey, TValue>
  nameWithType: IDictionary<TKey, TValue>
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>
  nameWithType.vb: IDictionary(Of TKey, TValue)
  fullname.vb: System.Collections.Generic.IDictionary(Of TKey, TValue)
  name.vb: IDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
