### YamlMime:ManagedReference
items:
- uid: System.Fabric.Data.Log.ILogicalLog
  commentId: T:System.Fabric.Data.Log.ILogicalLog
  id: ILogicalLog
  parent: System.Fabric.Data.Log
  children:
  - System.Fabric.Data.Log.ILogicalLog.Abort
  - System.Fabric.Data.Log.ILogicalLog.AppendAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  - System.Fabric.Data.Log.ILogicalLog.CloseAsync(System.Threading.CancellationToken)
  - System.Fabric.Data.Log.ILogicalLog.ConfigureWritesToOnlyDedicatedLogAsync(System.Threading.CancellationToken)
  - System.Fabric.Data.Log.ILogicalLog.ConfigureWritesToSharedAndDedicatedLogAsync(System.Threading.CancellationToken)
  - System.Fabric.Data.Log.ILogicalLog.CreateReadStream(System.Int32)
  - System.Fabric.Data.Log.ILogicalLog.FlushAsync(System.Threading.CancellationToken)
  - System.Fabric.Data.Log.ILogicalLog.FlushWithMarkerAsync(System.Threading.CancellationToken)
  - System.Fabric.Data.Log.ILogicalLog.HeadTruncationPosition
  - System.Fabric.Data.Log.ILogicalLog.IsFunctional
  - System.Fabric.Data.Log.ILogicalLog.Length
  - System.Fabric.Data.Log.ILogicalLog.MaximumBlockSize
  - System.Fabric.Data.Log.ILogicalLog.MetadataBlockHeaderSize
  - System.Fabric.Data.Log.ILogicalLog.QueryLogUsageAsync(System.Threading.CancellationToken)
  - System.Fabric.Data.Log.ILogicalLog.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Int32,System.Threading.CancellationToken)
  - System.Fabric.Data.Log.ILogicalLog.ReadPosition
  - System.Fabric.Data.Log.ILogicalLog.SeekForRead(System.Int64,System.IO.SeekOrigin)
  - System.Fabric.Data.Log.ILogicalLog.SetSequentialAccessReadSize(System.IO.Stream,System.Int32)
  - System.Fabric.Data.Log.ILogicalLog.TruncateHead(System.Int64)
  - System.Fabric.Data.Log.ILogicalLog.TruncateTail(System.Int64,System.Threading.CancellationToken)
  - System.Fabric.Data.Log.ILogicalLog.WaitBufferFullNotificationAsync(System.Threading.CancellationToken)
  - System.Fabric.Data.Log.ILogicalLog.WaitCapacityNotificationAsync(System.UInt32,System.Threading.CancellationToken)
  - System.Fabric.Data.Log.ILogicalLog.WritePosition
  langs:
  - csharp
  - vb
  name: ILogicalLog
  nameWithType: ILogicalLog
  fullName: System.Fabric.Data.Log.ILogicalLog
  type: Interface
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Impl/Log/Interfaces.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: ILogicalLog
    path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Impl/Log/Interfaces.cs
    startLine: 372
  assemblies:
  - Microsoft.ServiceFabric.Data.Impl
  namespace: System.Fabric.Data.Log
  summary: "\nA logical log represents a sequence of logged bytes via simple streaming semantics. An application can \nuse an ILogicalLog handle instance to write and read log records - format defined entirely by that user. \nILogicalLogs are also used to truncate a log stream - on either end - Head or Tail. New bytes are Appended \n(written) only at the Tail and the oldest bytes are at the Head.\n\nLogical Logs may be physically multiplexed into a single log container (aka physical log), but they are \nlogically separate with their own 63-bit address space.\n"
  example: []
  syntax:
    content: 'public interface ILogicalLog : IDisposable'
    content.vb: >-
      Public Interface ILogicalLog
          Inherits IDisposable
  inheritedMembers:
  - System.IDisposable.Dispose
  extensionMethods:
  - System.Fabric.Data.Log.ILogicalLog.System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: System.Fabric.Data.Log.ILogicalLog.CloseAsync(System.Threading.CancellationToken)
  commentId: M:System.Fabric.Data.Log.ILogicalLog.CloseAsync(System.Threading.CancellationToken)
  id: CloseAsync(System.Threading.CancellationToken)
  parent: System.Fabric.Data.Log.ILogicalLog
  langs:
  - csharp
  - vb
  name: CloseAsync(CancellationToken)
  nameWithType: ILogicalLog.CloseAsync(CancellationToken)
  fullName: System.Fabric.Data.Log.ILogicalLog.CloseAsync(System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Impl/Log/Interfaces.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: CloseAsync
    path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Impl/Log/Interfaces.cs
    startLine: 386
  assemblies:
  - Microsoft.ServiceFabric.Data.Impl
  namespace: System.Fabric.Data.Log
  summary: "\nClose access to a current logical log and release any associated resources\n\nKnown Exceptions:\n\nSystem.Fabric.FabricException\nFabricObjectClosedException\nSystem.IOException\n\n"
  example: []
  syntax:
    content: Task CloseAsync(CancellationToken cancellationToken)
    content.vb: Function CloseAsync(cancellationToken As CancellationToken) As Task
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: Used to cancel the CloseAsync operation
    return:
      type: System.Threading.Tasks.Task
      description: ''
  overload: System.Fabric.Data.Log.ILogicalLog.CloseAsync*
- uid: System.Fabric.Data.Log.ILogicalLog.Abort
  commentId: M:System.Fabric.Data.Log.ILogicalLog.Abort
  id: Abort
  parent: System.Fabric.Data.Log.ILogicalLog
  langs:
  - csharp
  - vb
  name: Abort()
  nameWithType: ILogicalLog.Abort()
  fullName: System.Fabric.Data.Log.ILogicalLog.Abort()
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Impl/Log/Interfaces.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: Abort
    path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Impl/Log/Interfaces.cs
    startLine: 391
  assemblies:
  - Microsoft.ServiceFabric.Data.Impl
  namespace: System.Fabric.Data.Log
  summary: "\nAbort (rude close) the logical log use synchronously - will occur automatically thru GC if CloseAsync is not called\n"
  example: []
  syntax:
    content: void Abort()
    content.vb: Sub Abort
  overload: System.Fabric.Data.Log.ILogicalLog.Abort*
- uid: System.Fabric.Data.Log.ILogicalLog.IsFunctional
  commentId: P:System.Fabric.Data.Log.ILogicalLog.IsFunctional
  id: IsFunctional
  parent: System.Fabric.Data.Log.ILogicalLog
  langs:
  - csharp
  - vb
  name: IsFunctional
  nameWithType: ILogicalLog.IsFunctional
  fullName: System.Fabric.Data.Log.ILogicalLog.IsFunctional
  type: Property
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Impl/Log/Interfaces.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: IsFunctional
    path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Impl/Log/Interfaces.cs
    startLine: 396
  assemblies:
  - Microsoft.ServiceFabric.Data.Impl
  namespace: System.Fabric.Data.Log
  summary: "\nDetermine if a current ILogicalLog and underlying resources are functional and available\n"
  example: []
  syntax:
    content: bool IsFunctional { get; }
    content.vb: ReadOnly Property IsFunctional As Boolean
    parameters: []
    return:
      type: System.Boolean
  overload: System.Fabric.Data.Log.ILogicalLog.IsFunctional*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: System.Fabric.Data.Log.ILogicalLog.Length
  commentId: P:System.Fabric.Data.Log.ILogicalLog.Length
  id: Length
  parent: System.Fabric.Data.Log.ILogicalLog
  langs:
  - csharp
  - vb
  name: Length
  nameWithType: ILogicalLog.Length
  fullName: System.Fabric.Data.Log.ILogicalLog.Length
  type: Property
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Impl/Log/Interfaces.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: Length
    path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Impl/Log/Interfaces.cs
    startLine: 401
  assemblies:
  - Microsoft.ServiceFabric.Data.Impl
  namespace: System.Fabric.Data.Log
  summary: "\nSize of log stream's contents - only non-truncated space\n"
  example: []
  syntax:
    content: long Length { get; }
    content.vb: ReadOnly Property Length As Long
    parameters: []
    return:
      type: System.Int64
  overload: System.Fabric.Data.Log.ILogicalLog.Length*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: System.Fabric.Data.Log.ILogicalLog.WritePosition
  commentId: P:System.Fabric.Data.Log.ILogicalLog.WritePosition
  id: WritePosition
  parent: System.Fabric.Data.Log.ILogicalLog
  langs:
  - csharp
  - vb
  name: WritePosition
  nameWithType: ILogicalLog.WritePosition
  fullName: System.Fabric.Data.Log.ILogicalLog.WritePosition
  type: Property
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Impl/Log/Interfaces.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: WritePosition
    path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Impl/Log/Interfaces.cs
    startLine: 406
  assemblies:
  - Microsoft.ServiceFabric.Data.Impl
  namespace: System.Fabric.Data.Log
  summary: "\nReturn the next stream-space address to be written into\n"
  example: []
  syntax:
    content: long WritePosition { get; }
    content.vb: ReadOnly Property WritePosition As Long
    parameters: []
    return:
      type: System.Int64
  overload: System.Fabric.Data.Log.ILogicalLog.WritePosition*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: System.Fabric.Data.Log.ILogicalLog.ReadPosition
  commentId: P:System.Fabric.Data.Log.ILogicalLog.ReadPosition
  id: ReadPosition
  parent: System.Fabric.Data.Log.ILogicalLog
  langs:
  - csharp
  - vb
  name: ReadPosition
  nameWithType: ILogicalLog.ReadPosition
  fullName: System.Fabric.Data.Log.ILogicalLog.ReadPosition
  type: Property
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Impl/Log/Interfaces.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: ReadPosition
    path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Impl/Log/Interfaces.cs
    startLine: 411
  assemblies:
  - Microsoft.ServiceFabric.Data.Impl
  namespace: System.Fabric.Data.Log
  summary: "\nReturn the next stream-space to be read from\n"
  example: []
  syntax:
    content: long ReadPosition { get; }
    content.vb: ReadOnly Property ReadPosition As Long
    parameters: []
    return:
      type: System.Int64
  overload: System.Fabric.Data.Log.ILogicalLog.ReadPosition*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: System.Fabric.Data.Log.ILogicalLog.HeadTruncationPosition
  commentId: P:System.Fabric.Data.Log.ILogicalLog.HeadTruncationPosition
  id: HeadTruncationPosition
  parent: System.Fabric.Data.Log.ILogicalLog
  langs:
  - csharp
  - vb
  name: HeadTruncationPosition
  nameWithType: ILogicalLog.HeadTruncationPosition
  fullName: System.Fabric.Data.Log.ILogicalLog.HeadTruncationPosition
  type: Property
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Impl/Log/Interfaces.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: HeadTruncationPosition
    path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Impl/Log/Interfaces.cs
    startLine: 417
  assemblies:
  - Microsoft.ServiceFabric.Data.Impl
  namespace: System.Fabric.Data.Log
  summary: "\nReturn the current Head truncation stream-space location - no information logically exists at and \nbelow this point in the logical log\n"
  example: []
  syntax:
    content: long HeadTruncationPosition { get; }
    content.vb: ReadOnly Property HeadTruncationPosition As Long
    parameters: []
    return:
      type: System.Int64
  overload: System.Fabric.Data.Log.ILogicalLog.HeadTruncationPosition*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: System.Fabric.Data.Log.ILogicalLog.MaximumBlockSize
  commentId: P:System.Fabric.Data.Log.ILogicalLog.MaximumBlockSize
  id: MaximumBlockSize
  parent: System.Fabric.Data.Log.ILogicalLog
  langs:
  - csharp
  - vb
  name: MaximumBlockSize
  nameWithType: ILogicalLog.MaximumBlockSize
  fullName: System.Fabric.Data.Log.ILogicalLog.MaximumBlockSize
  type: Property
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Impl/Log/Interfaces.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: MaximumBlockSize
    path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Impl/Log/Interfaces.cs
    startLine: 422
  assemblies:
  - Microsoft.ServiceFabric.Data.Impl
  namespace: System.Fabric.Data.Log
  summary: "\nReturn the maximum block size available for a physical record\n"
  example: []
  syntax:
    content: long MaximumBlockSize { get; }
    content.vb: ReadOnly Property MaximumBlockSize As Long
    parameters: []
    return:
      type: System.Int64
  overload: System.Fabric.Data.Log.ILogicalLog.MaximumBlockSize*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: System.Fabric.Data.Log.ILogicalLog.MetadataBlockHeaderSize
  commentId: P:System.Fabric.Data.Log.ILogicalLog.MetadataBlockHeaderSize
  id: MetadataBlockHeaderSize
  parent: System.Fabric.Data.Log.ILogicalLog
  langs:
  - csharp
  - vb
  name: MetadataBlockHeaderSize
  nameWithType: ILogicalLog.MetadataBlockHeaderSize
  fullName: System.Fabric.Data.Log.ILogicalLog.MetadataBlockHeaderSize
  type: Property
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Impl/Log/Interfaces.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: MetadataBlockHeaderSize
    path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Impl/Log/Interfaces.cs
    startLine: 427
  assemblies:
  - Microsoft.ServiceFabric.Data.Impl
  namespace: System.Fabric.Data.Log
  summary: "\nReturn the size of the header used in the metadata block\n"
  example: []
  syntax:
    content: uint MetadataBlockHeaderSize { get; }
    content.vb: ReadOnly Property MetadataBlockHeaderSize As UInteger
    parameters: []
    return:
      type: System.UInt32
  overload: System.Fabric.Data.Log.ILogicalLog.MetadataBlockHeaderSize*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: System.Fabric.Data.Log.ILogicalLog.CreateReadStream(System.Int32)
  commentId: M:System.Fabric.Data.Log.ILogicalLog.CreateReadStream(System.Int32)
  id: CreateReadStream(System.Int32)
  parent: System.Fabric.Data.Log.ILogicalLog
  langs:
  - csharp
  - vb
  name: CreateReadStream(Int32)
  nameWithType: ILogicalLog.CreateReadStream(Int32)
  fullName: System.Fabric.Data.Log.ILogicalLog.CreateReadStream(System.Int32)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Impl/Log/Interfaces.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: CreateReadStream
    path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Impl/Log/Interfaces.cs
    startLine: 433
  assemblies:
  - Microsoft.ServiceFabric.Data.Impl
  namespace: System.Fabric.Data.Log
  summary: "\nReturn an abstract Stream reference for this ILogicalLog optimized for sequential or random reads\n"
  example: []
  syntax:
    content: Stream CreateReadStream(int SequentialAccessReadSize)
    content.vb: Function CreateReadStream(SequentialAccessReadSize As Integer) As Stream
    parameters:
    - id: SequentialAccessReadSize
      type: System.Int32
      description: Number of bytes to read and cache on each read request for sequential access. Zero for random access with no read ahead.
    return:
      type: System.IO.Stream
  overload: System.Fabric.Data.Log.ILogicalLog.CreateReadStream*
- uid: System.Fabric.Data.Log.ILogicalLog.SetSequentialAccessReadSize(System.IO.Stream,System.Int32)
  commentId: M:System.Fabric.Data.Log.ILogicalLog.SetSequentialAccessReadSize(System.IO.Stream,System.Int32)
  id: SetSequentialAccessReadSize(System.IO.Stream,System.Int32)
  parent: System.Fabric.Data.Log.ILogicalLog
  langs:
  - csharp
  - vb
  name: SetSequentialAccessReadSize(Stream, Int32)
  nameWithType: ILogicalLog.SetSequentialAccessReadSize(Stream, Int32)
  fullName: System.Fabric.Data.Log.ILogicalLog.SetSequentialAccessReadSize(System.IO.Stream, System.Int32)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Impl/Log/Interfaces.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: SetSequentialAccessReadSize
    path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Impl/Log/Interfaces.cs
    startLine: 440
  assemblies:
  - Microsoft.ServiceFabric.Data.Impl
  namespace: System.Fabric.Data.Log
  summary: "\nSet the read size for a sequential access stream\n"
  example: []
  syntax:
    content: void SetSequentialAccessReadSize(Stream LogStream, int SequentialAccessReadSize)
    content.vb: Sub SetSequentialAccessReadSize(LogStream As Stream, SequentialAccessReadSize As Integer)
    parameters:
    - id: LogStream
      type: System.IO.Stream
      description: Sequential access LogicalLogStream on which to set the size
    - id: SequentialAccessReadSize
      type: System.Int32
      description: Number of bytes to read and cache on each read request. Zero for random access with no read ahead.
  overload: System.Fabric.Data.Log.ILogicalLog.SetSequentialAccessReadSize*
- uid: System.Fabric.Data.Log.ILogicalLog.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Int32,System.Threading.CancellationToken)
  commentId: M:System.Fabric.Data.Log.ILogicalLog.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Int32,System.Threading.CancellationToken)
  id: ReadAsync(System.Byte[],System.Int32,System.Int32,System.Int32,System.Threading.CancellationToken)
  parent: System.Fabric.Data.Log.ILogicalLog
  langs:
  - csharp
  - vb
  name: ReadAsync(Byte[], Int32, Int32, Int32, CancellationToken)
  nameWithType: ILogicalLog.ReadAsync(Byte[], Int32, Int32, Int32, CancellationToken)
  fullName: System.Fabric.Data.Log.ILogicalLog.ReadAsync(System.Byte[], System.Int32, System.Int32, System.Int32, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Impl/Log/Interfaces.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: ReadAsync
    path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Impl/Log/Interfaces.cs
    startLine: 461
  assemblies:
  - Microsoft.ServiceFabric.Data.Impl
  namespace: System.Fabric.Data.Log
  summary: "\nRead a sequence of bytes from the current logical log, advancing the ReadPosition within the stream by the \nnumber of bytes read\n\nKnown Exceptions:\n\nSystem.Fabric.FabricException\nFabricObjectClosedException\nSystem.IOException\nArgumentOutOfRangeException\nInvalidDataException\n\n"
  example: []
  syntax:
    content: Task<int> ReadAsync(byte[] buffer, int offset, int count, int bytesToRead, CancellationToken cancellationToken)
    content.vb: Function ReadAsync(buffer As Byte(), offset As Integer, count As Integer, bytesToRead As Integer, cancellationToken As CancellationToken) As Task(Of Integer)
    parameters:
    - id: buffer
      type: System.Byte[]
      description: buffer to receive the bytes read
    - id: offset
      type: System.Int32
      description: offset into buffer to start the transfer
    - id: count
      type: System.Int32
      description: length of desired read
    - id: bytesToRead
      type: System.Int32
      description: number of bytes to read from log
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: Used to cancel the ReadAsync operation
    return:
      type: System.Threading.Tasks.Task{System.Int32}
      description: The number of bytes actually read - a zero indicates end-of-stream (WritePosition)
  overload: System.Fabric.Data.Log.ILogicalLog.ReadAsync*
  nameWithType.vb: ILogicalLog.ReadAsync(Byte(), Int32, Int32, Int32, CancellationToken)
  fullName.vb: System.Fabric.Data.Log.ILogicalLog.ReadAsync(System.Byte(), System.Int32, System.Int32, System.Int32, System.Threading.CancellationToken)
  name.vb: ReadAsync(Byte(), Int32, Int32, Int32, CancellationToken)
- uid: System.Fabric.Data.Log.ILogicalLog.SeekForRead(System.Int64,System.IO.SeekOrigin)
  commentId: M:System.Fabric.Data.Log.ILogicalLog.SeekForRead(System.Int64,System.IO.SeekOrigin)
  id: SeekForRead(System.Int64,System.IO.SeekOrigin)
  parent: System.Fabric.Data.Log.ILogicalLog
  langs:
  - csharp
  - vb
  name: SeekForRead(Int64, SeekOrigin)
  nameWithType: ILogicalLog.SeekForRead(Int64, SeekOrigin)
  fullName: System.Fabric.Data.Log.ILogicalLog.SeekForRead(System.Int64, System.IO.SeekOrigin)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Impl/Log/Interfaces.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: SeekForRead
    path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Impl/Log/Interfaces.cs
    startLine: 477
  assemblies:
  - Microsoft.ServiceFabric.Data.Impl
  namespace: System.Fabric.Data.Log
  summary: "\nSet the ReadPosition within the current ILogicalLog\n\nKnown Exceptions:\n\nSystem.Fabric.FabricException\nFabricObjectClosedException\nSystem.IOException\nArgumentOutOfRangeException\n\n"
  example: []
  syntax:
    content: long SeekForRead(long offset, SeekOrigin origin)
    content.vb: Function SeekForRead(offset As Long, origin As SeekOrigin) As Long
    parameters:
    - id: offset
      type: System.Int64
      description: Offset to the new ReadPosition
    - id: origin
      type: System.IO.SeekOrigin
      description: 'Starting position: current, start, or end'
    return:
      type: System.Int64
      description: New ReadLocation
  overload: System.Fabric.Data.Log.ILogicalLog.SeekForRead*
- uid: System.Fabric.Data.Log.ILogicalLog.AppendAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  commentId: M:System.Fabric.Data.Log.ILogicalLog.AppendAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  id: AppendAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  parent: System.Fabric.Data.Log.ILogicalLog
  langs:
  - csharp
  - vb
  name: AppendAsync(Byte[], Int32, Int32, CancellationToken)
  nameWithType: ILogicalLog.AppendAsync(Byte[], Int32, Int32, CancellationToken)
  fullName: System.Fabric.Data.Log.ILogicalLog.AppendAsync(System.Byte[], System.Int32, System.Int32, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Impl/Log/Interfaces.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: AppendAsync
    path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Impl/Log/Interfaces.cs
    startLine: 494
  assemblies:
  - Microsoft.ServiceFabric.Data.Impl
  namespace: System.Fabric.Data.Log
  summary: "\nWrite a sequence of bytes to the current stream at WriteLocation, advancing the position within \nthis stream by the number of bytes written\n\nKnown Exceptions:\n\nSystem.Fabric.FabricException\nFabricObjectClosedException\nSystem.IOException\n\n"
  example: []
  syntax:
    content: Task AppendAsync(byte[] buffer, int offset, int count, CancellationToken cancellationToken)
    content.vb: Function AppendAsync(buffer As Byte(), offset As Integer, count As Integer, cancellationToken As CancellationToken) As Task
    parameters:
    - id: buffer
      type: System.Byte[]
      description: source buffer for the bytes to be written
    - id: offset
      type: System.Int32
      description: offset into the source buffer at which the write starts
    - id: count
      type: System.Int32
      description: Size of the write
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: Used to cancel the AppendAsync operation
    return:
      type: System.Threading.Tasks.Task
  overload: System.Fabric.Data.Log.ILogicalLog.AppendAsync*
  nameWithType.vb: ILogicalLog.AppendAsync(Byte(), Int32, Int32, CancellationToken)
  fullName.vb: System.Fabric.Data.Log.ILogicalLog.AppendAsync(System.Byte(), System.Int32, System.Int32, System.Threading.CancellationToken)
  name.vb: AppendAsync(Byte(), Int32, Int32, CancellationToken)
- uid: System.Fabric.Data.Log.ILogicalLog.FlushAsync(System.Threading.CancellationToken)
  commentId: M:System.Fabric.Data.Log.ILogicalLog.FlushAsync(System.Threading.CancellationToken)
  id: FlushAsync(System.Threading.CancellationToken)
  parent: System.Fabric.Data.Log.ILogicalLog
  langs:
  - csharp
  - vb
  name: FlushAsync(CancellationToken)
  nameWithType: ILogicalLog.FlushAsync(CancellationToken)
  fullName: System.Fabric.Data.Log.ILogicalLog.FlushAsync(System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Impl/Log/Interfaces.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: FlushAsync
    path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Impl/Log/Interfaces.cs
    startLine: 507
  assemblies:
  - Microsoft.ServiceFabric.Data.Impl
  namespace: System.Fabric.Data.Log
  summary: "\nCause any new buffered data from AppendAsync() to be written to the underlying device\n\nKnown Exceptions:\n\nSystem.Fabric.FabricException\nFabricObjectClosedException\nSystem.IOException\n\n"
  example: []
  syntax:
    content: Task FlushAsync(CancellationToken cancellationToken)
    content.vb: Function FlushAsync(cancellationToken As CancellationToken) As Task
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: Used to cancel the FlushAsync
    return:
      type: System.Threading.Tasks.Task
  overload: System.Fabric.Data.Log.ILogicalLog.FlushAsync*
- uid: System.Fabric.Data.Log.ILogicalLog.FlushWithMarkerAsync(System.Threading.CancellationToken)
  commentId: M:System.Fabric.Data.Log.ILogicalLog.FlushWithMarkerAsync(System.Threading.CancellationToken)
  id: FlushWithMarkerAsync(System.Threading.CancellationToken)
  parent: System.Fabric.Data.Log.ILogicalLog
  langs:
  - csharp
  - vb
  name: FlushWithMarkerAsync(CancellationToken)
  nameWithType: ILogicalLog.FlushWithMarkerAsync(CancellationToken)
  fullName: System.Fabric.Data.Log.ILogicalLog.FlushWithMarkerAsync(System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Impl/Log/Interfaces.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: FlushWithMarkerAsync
    path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Impl/Log/Interfaces.cs
    startLine: 521
  assemblies:
  - Microsoft.ServiceFabric.Data.Impl
  namespace: System.Fabric.Data.Log
  summary: "\nCause any new buffered data from AppendAsync() to be written to the underlying device along with the\nbarrier flag marking the end of a logical log record\n\nKnown Exceptions:\n\nSystem.Fabric.FabricException\nFabricObjectClosedException\nSystem.IOException\n\n"
  example: []
  syntax:
    content: Task FlushWithMarkerAsync(CancellationToken cancellationToken)
    content.vb: Function FlushWithMarkerAsync(cancellationToken As CancellationToken) As Task
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: Used to cancel the FlushWithMarkerAsync
    return:
      type: System.Threading.Tasks.Task
  overload: System.Fabric.Data.Log.ILogicalLog.FlushWithMarkerAsync*
- uid: System.Fabric.Data.Log.ILogicalLog.TruncateHead(System.Int64)
  commentId: M:System.Fabric.Data.Log.ILogicalLog.TruncateHead(System.Int64)
  id: TruncateHead(System.Int64)
  parent: System.Fabric.Data.Log.ILogicalLog
  langs:
  - csharp
  - vb
  name: TruncateHead(Int64)
  nameWithType: ILogicalLog.TruncateHead(Int64)
  fullName: System.Fabric.Data.Log.ILogicalLog.TruncateHead(System.Int64)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Impl/Log/Interfaces.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: TruncateHead
    path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Impl/Log/Interfaces.cs
    startLine: 535
  assemblies:
  - Microsoft.ServiceFabric.Data.Impl
  namespace: System.Fabric.Data.Log
  summary: "\nTrigger the background truncation of the stream-space [0, StreamOffset]\n\nKnown Exceptions:\n\nSystem.Fabric.FabricException\nFabricObjectClosedException\nSystem.IOException\nArgumentOutOfRangeException\n\n"
  example: []
  syntax:
    content: void TruncateHead(long StreamOffset)
    content.vb: Sub TruncateHead(StreamOffset As Long)
    parameters:
    - id: StreamOffset
      type: System.Int64
      description: New HeadTruncationPosition
  overload: System.Fabric.Data.Log.ILogicalLog.TruncateHead*
- uid: System.Fabric.Data.Log.ILogicalLog.TruncateTail(System.Int64,System.Threading.CancellationToken)
  commentId: M:System.Fabric.Data.Log.ILogicalLog.TruncateTail(System.Int64,System.Threading.CancellationToken)
  id: TruncateTail(System.Int64,System.Threading.CancellationToken)
  parent: System.Fabric.Data.Log.ILogicalLog
  langs:
  - csharp
  - vb
  name: TruncateTail(Int64, CancellationToken)
  nameWithType: ILogicalLog.TruncateTail(Int64, CancellationToken)
  fullName: System.Fabric.Data.Log.ILogicalLog.TruncateTail(System.Int64, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Impl/Log/Interfaces.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: TruncateTail
    path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Impl/Log/Interfaces.cs
    startLine: 550
  assemblies:
  - Microsoft.ServiceFabric.Data.Impl
  namespace: System.Fabric.Data.Log
  summary: "\nTruncation the stream-space [StreamOffset, WritePosition] - repositions WritePosition\n\nKnown Exceptions:\n\nSystem.Fabric.FabricException\nFabricObjectClosedException\nSystem.IOException\nArgumentOutOfRangeException\n\n"
  example: []
  syntax:
    content: Task TruncateTail(long StreamOffset, CancellationToken cancellationToken)
    content.vb: Function TruncateTail(StreamOffset As Long, cancellationToken As CancellationToken) As Task
    parameters:
    - id: StreamOffset
      type: System.Int64
      description: New WritePosition
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: Used to cancel the TruncateTail
    return:
      type: System.Threading.Tasks.Task
  overload: System.Fabric.Data.Log.ILogicalLog.TruncateTail*
- uid: System.Fabric.Data.Log.ILogicalLog.WaitCapacityNotificationAsync(System.UInt32,System.Threading.CancellationToken)
  commentId: M:System.Fabric.Data.Log.ILogicalLog.WaitCapacityNotificationAsync(System.UInt32,System.Threading.CancellationToken)
  id: WaitCapacityNotificationAsync(System.UInt32,System.Threading.CancellationToken)
  parent: System.Fabric.Data.Log.ILogicalLog
  langs:
  - csharp
  - vb
  name: WaitCapacityNotificationAsync(UInt32, CancellationToken)
  nameWithType: ILogicalLog.WaitCapacityNotificationAsync(UInt32, CancellationToken)
  fullName: System.Fabric.Data.Log.ILogicalLog.WaitCapacityNotificationAsync(System.UInt32, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Impl/Log/Interfaces.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: WaitCapacityNotificationAsync
    path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Impl/Log/Interfaces.cs
    startLine: 563
  assemblies:
  - Microsoft.ServiceFabric.Data.Impl
  namespace: System.Fabric.Data.Log
  summary: "\nAsynchronously wait for a given percentage of the logical log's stream-space to be used\n\nKnown Exceptions:\n\nSystem.Fabric.FabricException\nFabricObjectClosedException\n\n"
  example: []
  syntax:
    content: Task WaitCapacityNotificationAsync(uint percentOfSpaceUsed, CancellationToken cancellationToken)
    content.vb: Function WaitCapacityNotificationAsync(percentOfSpaceUsed As UInteger, cancellationToken As CancellationToken) As Task
    parameters:
    - id: percentOfSpaceUsed
      type: System.UInt32
      description: Percentage full trigger point
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: Used to cancel the WaitCapacityNotificationAsync
    return:
      type: System.Threading.Tasks.Task
  overload: System.Fabric.Data.Log.ILogicalLog.WaitCapacityNotificationAsync*
- uid: System.Fabric.Data.Log.ILogicalLog.WaitBufferFullNotificationAsync(System.Threading.CancellationToken)
  commentId: M:System.Fabric.Data.Log.ILogicalLog.WaitBufferFullNotificationAsync(System.Threading.CancellationToken)
  id: WaitBufferFullNotificationAsync(System.Threading.CancellationToken)
  parent: System.Fabric.Data.Log.ILogicalLog
  langs:
  - csharp
  - vb
  name: WaitBufferFullNotificationAsync(CancellationToken)
  nameWithType: ILogicalLog.WaitBufferFullNotificationAsync(CancellationToken)
  fullName: System.Fabric.Data.Log.ILogicalLog.WaitBufferFullNotificationAsync(System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Impl/Log/Interfaces.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: WaitBufferFullNotificationAsync
    path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Impl/Log/Interfaces.cs
    startLine: 574
  assemblies:
  - Microsoft.ServiceFabric.Data.Impl
  namespace: System.Fabric.Data.Log
  summary: "\nAsynchronously wait for the write buffer of a current logical log to come close to full\n\nKnown Exceptions:\n\nNotImplementedException\n\n"
  example: []
  syntax:
    content: Task WaitBufferFullNotificationAsync(CancellationToken cancellationToken)
    content.vb: Function WaitBufferFullNotificationAsync(cancellationToken As CancellationToken) As Task
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: Used to cancel the WaitBufferFullNotificationAsync
    return:
      type: System.Threading.Tasks.Task
  overload: System.Fabric.Data.Log.ILogicalLog.WaitBufferFullNotificationAsync*
- uid: System.Fabric.Data.Log.ILogicalLog.ConfigureWritesToOnlyDedicatedLogAsync(System.Threading.CancellationToken)
  commentId: M:System.Fabric.Data.Log.ILogicalLog.ConfigureWritesToOnlyDedicatedLogAsync(System.Threading.CancellationToken)
  id: ConfigureWritesToOnlyDedicatedLogAsync(System.Threading.CancellationToken)
  parent: System.Fabric.Data.Log.ILogicalLog
  langs:
  - csharp
  - vb
  name: ConfigureWritesToOnlyDedicatedLogAsync(CancellationToken)
  nameWithType: ILogicalLog.ConfigureWritesToOnlyDedicatedLogAsync(CancellationToken)
  fullName: System.Fabric.Data.Log.ILogicalLog.ConfigureWritesToOnlyDedicatedLogAsync(System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Impl/Log/Interfaces.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: ConfigureWritesToOnlyDedicatedLogAsync
    path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Impl/Log/Interfaces.cs
    startLine: 585
  assemblies:
  - Microsoft.ServiceFabric.Data.Impl
  namespace: System.Fabric.Data.Log
  summary: "\nAsynchronously configure logical log to use dedicated log only\n\nKnown Exceptions:\n\nSystem.Fabric.FabricException\nFabricObjectClosedException\n\n"
  example: []
  syntax:
    content: Task ConfigureWritesToOnlyDedicatedLogAsync(CancellationToken cancellationToken)
    content.vb: Function ConfigureWritesToOnlyDedicatedLogAsync(cancellationToken As CancellationToken) As Task
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task
  overload: System.Fabric.Data.Log.ILogicalLog.ConfigureWritesToOnlyDedicatedLogAsync*
- uid: System.Fabric.Data.Log.ILogicalLog.ConfigureWritesToSharedAndDedicatedLogAsync(System.Threading.CancellationToken)
  commentId: M:System.Fabric.Data.Log.ILogicalLog.ConfigureWritesToSharedAndDedicatedLogAsync(System.Threading.CancellationToken)
  id: ConfigureWritesToSharedAndDedicatedLogAsync(System.Threading.CancellationToken)
  parent: System.Fabric.Data.Log.ILogicalLog
  langs:
  - csharp
  - vb
  name: ConfigureWritesToSharedAndDedicatedLogAsync(CancellationToken)
  nameWithType: ILogicalLog.ConfigureWritesToSharedAndDedicatedLogAsync(CancellationToken)
  fullName: System.Fabric.Data.Log.ILogicalLog.ConfigureWritesToSharedAndDedicatedLogAsync(System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Impl/Log/Interfaces.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: ConfigureWritesToSharedAndDedicatedLogAsync
    path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Impl/Log/Interfaces.cs
    startLine: 596
  assemblies:
  - Microsoft.ServiceFabric.Data.Impl
  namespace: System.Fabric.Data.Log
  summary: "\nAsynchronously configure logical log to use both shared and dedicated log\n\nKnown Exceptions:\n\nSystem.Fabric.FabricException\nFabricObjectClosedException\n\n"
  example: []
  syntax:
    content: Task ConfigureWritesToSharedAndDedicatedLogAsync(CancellationToken cancellationToken)
    content.vb: Function ConfigureWritesToSharedAndDedicatedLogAsync(cancellationToken As CancellationToken) As Task
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task
  overload: System.Fabric.Data.Log.ILogicalLog.ConfigureWritesToSharedAndDedicatedLogAsync*
- uid: System.Fabric.Data.Log.ILogicalLog.QueryLogUsageAsync(System.Threading.CancellationToken)
  commentId: M:System.Fabric.Data.Log.ILogicalLog.QueryLogUsageAsync(System.Threading.CancellationToken)
  id: QueryLogUsageAsync(System.Threading.CancellationToken)
  parent: System.Fabric.Data.Log.ILogicalLog
  langs:
  - csharp
  - vb
  name: QueryLogUsageAsync(CancellationToken)
  nameWithType: ILogicalLog.QueryLogUsageAsync(CancellationToken)
  fullName: System.Fabric.Data.Log.ILogicalLog.QueryLogUsageAsync(System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Impl/Log/Interfaces.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: QueryLogUsageAsync
    path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Impl/Log/Interfaces.cs
    startLine: 607
  assemblies:
  - Microsoft.ServiceFabric.Data.Impl
  namespace: System.Fabric.Data.Log
  summary: "\nAsynchronously query the percentagee usage of the logical log\n\nKnown Exceptions:\n\nSystem.Fabric.FabricException\nFabricObjectClosedException\n\n"
  example: []
  syntax:
    content: Task<uint> QueryLogUsageAsync(CancellationToken cancellationToken)
    content.vb: Function QueryLogUsageAsync(cancellationToken As CancellationToken) As Task(Of UInteger)
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.UInt32}
  overload: System.Fabric.Data.Log.ILogicalLog.QueryLogUsageAsync*
references:
- uid: System.Fabric.Data.Log
  commentId: N:System.Fabric.Data.Log
  isExternal: false
  name: System.Fabric.Data.Log
  nameWithType: System.Fabric.Data.Log
  fullName: System.Fabric.Data.Log
- uid: System.IDisposable.Dispose
  commentId: M:System.IDisposable.Dispose
  parent: System.IDisposable
  isExternal: true
  name: Dispose()
  nameWithType: IDisposable.Dispose()
  fullName: System.IDisposable.Dispose()
  spec.csharp:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.Data.Log.ILogicalLog.System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
  commentId: M:System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  parent: System.Fabric.Messaging.Stream.ByteArraySerializer
  definition: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  name: Serialize<ILogicalLog>()
  nameWithType: ByteArraySerializer.Serialize<ILogicalLog>()
  fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<System.Fabric.Data.Log.ILogicalLog>()
  nameWithType.vb: ByteArraySerializer.Serialize(Of ILogicalLog)()
  fullname.vb: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of System.Fabric.Data.Log.ILogicalLog)()
  name.vb: Serialize(Of ILogicalLog)()
  spec.csharp:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
    name: Serialize<ILogicalLog>
    nameWithType: ByteArraySerializer.Serialize<ILogicalLog>
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<System.Fabric.Data.Log.ILogicalLog>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
    name: Serialize(Of ILogicalLog)
    nameWithType: ByteArraySerializer.Serialize(Of ILogicalLog)
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of System.Fabric.Data.Log.ILogicalLog)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  commentId: M:System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  isExternal: false
  name: Serialize<T>(T)
  nameWithType: ByteArraySerializer.Serialize<T>(T)
  fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<T>(T)
  nameWithType.vb: ByteArraySerializer.Serialize(Of T)(T)
  fullname.vb: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of T)(T)
  name.vb: Serialize(Of T)(T)
  spec.csharp:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
    name: Serialize<T>
    nameWithType: ByteArraySerializer.Serialize<T>
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
    name: Serialize(Of T)
    nameWithType: ByteArraySerializer.Serialize(Of T)
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.Messaging.Stream.ByteArraySerializer
  commentId: T:System.Fabric.Messaging.Stream.ByteArraySerializer
  parent: System.Fabric.Messaging.Stream
  isExternal: false
  name: ByteArraySerializer
  nameWithType: ByteArraySerializer
  fullName: System.Fabric.Messaging.Stream.ByteArraySerializer
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Fabric.Messaging.Stream
  commentId: N:System.Fabric.Messaging.Stream
  isExternal: false
  name: System.Fabric.Messaging.Stream
  nameWithType: System.Fabric.Messaging.Stream
  fullName: System.Fabric.Messaging.Stream
- uid: System.Fabric.Data.Log.ILogicalLog.CloseAsync*
  commentId: Overload:System.Fabric.Data.Log.ILogicalLog.CloseAsync
  isExternal: false
  name: CloseAsync
  nameWithType: ILogicalLog.CloseAsync
  fullName: System.Fabric.Data.Log.ILogicalLog.CloseAsync
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: false
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: System.Fabric.Data.Log.ILogicalLog.Abort*
  commentId: Overload:System.Fabric.Data.Log.ILogicalLog.Abort
  isExternal: false
  name: Abort
  nameWithType: ILogicalLog.Abort
  fullName: System.Fabric.Data.Log.ILogicalLog.Abort
- uid: System.Fabric.Data.Log.ILogicalLog.IsFunctional*
  commentId: Overload:System.Fabric.Data.Log.ILogicalLog.IsFunctional
  isExternal: false
  name: IsFunctional
  nameWithType: ILogicalLog.IsFunctional
  fullName: System.Fabric.Data.Log.ILogicalLog.IsFunctional
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Fabric.Data.Log.ILogicalLog.Length*
  commentId: Overload:System.Fabric.Data.Log.ILogicalLog.Length
  isExternal: false
  name: Length
  nameWithType: ILogicalLog.Length
  fullName: System.Fabric.Data.Log.ILogicalLog.Length
- uid: System.Int64
  commentId: T:System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.Fabric.Data.Log.ILogicalLog.WritePosition*
  commentId: Overload:System.Fabric.Data.Log.ILogicalLog.WritePosition
  isExternal: false
  name: WritePosition
  nameWithType: ILogicalLog.WritePosition
  fullName: System.Fabric.Data.Log.ILogicalLog.WritePosition
- uid: System.Fabric.Data.Log.ILogicalLog.ReadPosition*
  commentId: Overload:System.Fabric.Data.Log.ILogicalLog.ReadPosition
  isExternal: false
  name: ReadPosition
  nameWithType: ILogicalLog.ReadPosition
  fullName: System.Fabric.Data.Log.ILogicalLog.ReadPosition
- uid: System.Fabric.Data.Log.ILogicalLog.HeadTruncationPosition*
  commentId: Overload:System.Fabric.Data.Log.ILogicalLog.HeadTruncationPosition
  isExternal: false
  name: HeadTruncationPosition
  nameWithType: ILogicalLog.HeadTruncationPosition
  fullName: System.Fabric.Data.Log.ILogicalLog.HeadTruncationPosition
- uid: System.Fabric.Data.Log.ILogicalLog.MaximumBlockSize*
  commentId: Overload:System.Fabric.Data.Log.ILogicalLog.MaximumBlockSize
  isExternal: false
  name: MaximumBlockSize
  nameWithType: ILogicalLog.MaximumBlockSize
  fullName: System.Fabric.Data.Log.ILogicalLog.MaximumBlockSize
- uid: System.Fabric.Data.Log.ILogicalLog.MetadataBlockHeaderSize*
  commentId: Overload:System.Fabric.Data.Log.ILogicalLog.MetadataBlockHeaderSize
  isExternal: false
  name: MetadataBlockHeaderSize
  nameWithType: ILogicalLog.MetadataBlockHeaderSize
  fullName: System.Fabric.Data.Log.ILogicalLog.MetadataBlockHeaderSize
- uid: System.UInt32
  commentId: T:System.UInt32
  parent: System
  isExternal: true
  name: UInt32
  nameWithType: UInt32
  fullName: System.UInt32
- uid: System.Fabric.Data.Log.ILogicalLog.CreateReadStream*
  commentId: Overload:System.Fabric.Data.Log.ILogicalLog.CreateReadStream
  isExternal: false
  name: CreateReadStream
  nameWithType: ILogicalLog.CreateReadStream
  fullName: System.Fabric.Data.Log.ILogicalLog.CreateReadStream
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.IO.Stream
  commentId: T:System.IO.Stream
  parent: System.IO
  isExternal: true
  name: Stream
  nameWithType: Stream
  fullName: System.IO.Stream
- uid: System.IO
  commentId: N:System.IO
  isExternal: false
  name: System.IO
  nameWithType: System.IO
  fullName: System.IO
- uid: System.Fabric.Data.Log.ILogicalLog.SetSequentialAccessReadSize*
  commentId: Overload:System.Fabric.Data.Log.ILogicalLog.SetSequentialAccessReadSize
  isExternal: false
  name: SetSequentialAccessReadSize
  nameWithType: ILogicalLog.SetSequentialAccessReadSize
  fullName: System.Fabric.Data.Log.ILogicalLog.SetSequentialAccessReadSize
- uid: System.Fabric.Data.Log.ILogicalLog.ReadAsync*
  commentId: Overload:System.Fabric.Data.Log.ILogicalLog.ReadAsync
  isExternal: false
  name: ReadAsync
  nameWithType: ILogicalLog.ReadAsync
  fullName: System.Fabric.Data.Log.ILogicalLog.ReadAsync
- uid: System.Byte[]
  name: Byte[]
  nameWithType: Byte[]
  fullName: System.Byte[]
  nameWithType.vb: Byte()
  fullname.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Threading.Tasks.Task{System.Int32}
  commentId: T:System.Threading.Tasks.Task{System.Int32}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Int32>
  nameWithType: Task<Int32>
  fullName: System.Threading.Tasks.Task<System.Int32>
  nameWithType.vb: Task(Of Int32)
  fullname.vb: System.Threading.Tasks.Task(Of System.Int32)
  name.vb: Task(Of Int32)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullname.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.Data.Log.ILogicalLog.SeekForRead*
  commentId: Overload:System.Fabric.Data.Log.ILogicalLog.SeekForRead
  isExternal: false
  name: SeekForRead
  nameWithType: ILogicalLog.SeekForRead
  fullName: System.Fabric.Data.Log.ILogicalLog.SeekForRead
- uid: System.IO.SeekOrigin
  commentId: T:System.IO.SeekOrigin
  parent: System.IO
  isExternal: true
  name: SeekOrigin
  nameWithType: SeekOrigin
  fullName: System.IO.SeekOrigin
- uid: System.Fabric.Data.Log.ILogicalLog.AppendAsync*
  commentId: Overload:System.Fabric.Data.Log.ILogicalLog.AppendAsync
  isExternal: false
  name: AppendAsync
  nameWithType: ILogicalLog.AppendAsync
  fullName: System.Fabric.Data.Log.ILogicalLog.AppendAsync
- uid: System.Fabric.Data.Log.ILogicalLog.FlushAsync*
  commentId: Overload:System.Fabric.Data.Log.ILogicalLog.FlushAsync
  isExternal: false
  name: FlushAsync
  nameWithType: ILogicalLog.FlushAsync
  fullName: System.Fabric.Data.Log.ILogicalLog.FlushAsync
- uid: System.Fabric.Data.Log.ILogicalLog.FlushWithMarkerAsync*
  commentId: Overload:System.Fabric.Data.Log.ILogicalLog.FlushWithMarkerAsync
  isExternal: false
  name: FlushWithMarkerAsync
  nameWithType: ILogicalLog.FlushWithMarkerAsync
  fullName: System.Fabric.Data.Log.ILogicalLog.FlushWithMarkerAsync
- uid: System.Fabric.Data.Log.ILogicalLog.TruncateHead*
  commentId: Overload:System.Fabric.Data.Log.ILogicalLog.TruncateHead
  isExternal: false
  name: TruncateHead
  nameWithType: ILogicalLog.TruncateHead
  fullName: System.Fabric.Data.Log.ILogicalLog.TruncateHead
- uid: System.Fabric.Data.Log.ILogicalLog.TruncateTail*
  commentId: Overload:System.Fabric.Data.Log.ILogicalLog.TruncateTail
  isExternal: false
  name: TruncateTail
  nameWithType: ILogicalLog.TruncateTail
  fullName: System.Fabric.Data.Log.ILogicalLog.TruncateTail
- uid: System.Fabric.Data.Log.ILogicalLog.WaitCapacityNotificationAsync*
  commentId: Overload:System.Fabric.Data.Log.ILogicalLog.WaitCapacityNotificationAsync
  isExternal: false
  name: WaitCapacityNotificationAsync
  nameWithType: ILogicalLog.WaitCapacityNotificationAsync
  fullName: System.Fabric.Data.Log.ILogicalLog.WaitCapacityNotificationAsync
- uid: System.Fabric.Data.Log.ILogicalLog.WaitBufferFullNotificationAsync*
  commentId: Overload:System.Fabric.Data.Log.ILogicalLog.WaitBufferFullNotificationAsync
  isExternal: false
  name: WaitBufferFullNotificationAsync
  nameWithType: ILogicalLog.WaitBufferFullNotificationAsync
  fullName: System.Fabric.Data.Log.ILogicalLog.WaitBufferFullNotificationAsync
- uid: System.Fabric.Data.Log.ILogicalLog.ConfigureWritesToOnlyDedicatedLogAsync*
  commentId: Overload:System.Fabric.Data.Log.ILogicalLog.ConfigureWritesToOnlyDedicatedLogAsync
  isExternal: false
  name: ConfigureWritesToOnlyDedicatedLogAsync
  nameWithType: ILogicalLog.ConfigureWritesToOnlyDedicatedLogAsync
  fullName: System.Fabric.Data.Log.ILogicalLog.ConfigureWritesToOnlyDedicatedLogAsync
- uid: System.Fabric.Data.Log.ILogicalLog.ConfigureWritesToSharedAndDedicatedLogAsync*
  commentId: Overload:System.Fabric.Data.Log.ILogicalLog.ConfigureWritesToSharedAndDedicatedLogAsync
  isExternal: false
  name: ConfigureWritesToSharedAndDedicatedLogAsync
  nameWithType: ILogicalLog.ConfigureWritesToSharedAndDedicatedLogAsync
  fullName: System.Fabric.Data.Log.ILogicalLog.ConfigureWritesToSharedAndDedicatedLogAsync
- uid: System.Fabric.Data.Log.ILogicalLog.QueryLogUsageAsync*
  commentId: Overload:System.Fabric.Data.Log.ILogicalLog.QueryLogUsageAsync
  isExternal: false
  name: QueryLogUsageAsync
  nameWithType: ILogicalLog.QueryLogUsageAsync
  fullName: System.Fabric.Data.Log.ILogicalLog.QueryLogUsageAsync
- uid: System.Threading.Tasks.Task{System.UInt32}
  commentId: T:System.Threading.Tasks.Task{System.UInt32}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<UInt32>
  nameWithType: Task<UInt32>
  fullName: System.Threading.Tasks.Task<System.UInt32>
  nameWithType.vb: Task(Of UInt32)
  fullname.vb: System.Threading.Tasks.Task(Of System.UInt32)
  name.vb: Task(Of UInt32)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.UInt32
    name: UInt32
    nameWithType: UInt32
    fullName: System.UInt32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.UInt32
    name: UInt32
    nameWithType: UInt32
    fullName: System.UInt32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
