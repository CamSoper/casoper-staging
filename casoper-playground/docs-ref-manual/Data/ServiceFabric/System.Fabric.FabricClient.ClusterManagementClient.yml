### YamlMime:ManagedReference
items:
- uid: System.Fabric.FabricClient.ClusterManagementClient
  commentId: T:System.Fabric.FabricClient.ClusterManagementClient
  id: FabricClient.ClusterManagementClient
  parent: System.Fabric
  children:
  - System.Fabric.FabricClient.ClusterManagementClient.ActivateNodeAsync(System.String)
  - System.Fabric.FabricClient.ClusterManagementClient.ActivateNodeAsync(System.String,System.TimeSpan,System.Threading.CancellationToken)
  - System.Fabric.FabricClient.ClusterManagementClient.CopyClusterPackage(System.String,System.String,System.String,System.String,System.String)
  - System.Fabric.FabricClient.ClusterManagementClient.DeactivateNodeAsync(System.String,System.Fabric.NodeDeactivationIntent)
  - System.Fabric.FabricClient.ClusterManagementClient.DeactivateNodeAsync(System.String,System.Fabric.NodeDeactivationIntent,System.TimeSpan,System.Threading.CancellationToken)
  - System.Fabric.FabricClient.ClusterManagementClient.GetClusterConfigurationAsync
  - System.Fabric.FabricClient.ClusterManagementClient.GetClusterConfigurationAsync(System.TimeSpan,System.Threading.CancellationToken)
  - System.Fabric.FabricClient.ClusterManagementClient.GetClusterConfigurationUpgradeStatusAsync
  - System.Fabric.FabricClient.ClusterManagementClient.GetClusterConfigurationUpgradeStatusAsync(System.Threading.CancellationToken)
  - System.Fabric.FabricClient.ClusterManagementClient.GetClusterConfigurationUpgradeStatusAsync(System.TimeSpan)
  - System.Fabric.FabricClient.ClusterManagementClient.GetClusterConfigurationUpgradeStatusAsync(System.TimeSpan,System.Threading.CancellationToken)
  - System.Fabric.FabricClient.ClusterManagementClient.GetClusterManifestAsync
  - System.Fabric.FabricClient.ClusterManagementClient.GetClusterManifestAsync(System.TimeSpan,System.Threading.CancellationToken)
  - System.Fabric.FabricClient.ClusterManagementClient.GetFabricUpgradeProgressAsync
  - System.Fabric.FabricClient.ClusterManagementClient.GetFabricUpgradeProgressAsync(System.TimeSpan,System.Threading.CancellationToken)
  - System.Fabric.FabricClient.ClusterManagementClient.MoveNextFabricUpgradeDomainAsync(System.Fabric.FabricUpgradeProgress)
  - System.Fabric.FabricClient.ClusterManagementClient.MoveNextFabricUpgradeDomainAsync(System.Fabric.FabricUpgradeProgress,System.TimeSpan,System.Threading.CancellationToken)
  - System.Fabric.FabricClient.ClusterManagementClient.ProvisionFabricAsync(System.String,System.String)
  - System.Fabric.FabricClient.ClusterManagementClient.ProvisionFabricAsync(System.String,System.String,System.TimeSpan,System.Threading.CancellationToken)
  - System.Fabric.FabricClient.ClusterManagementClient.RecoverPartitionAsync(System.Guid)
  - System.Fabric.FabricClient.ClusterManagementClient.RecoverPartitionAsync(System.Guid,System.TimeSpan,System.Threading.CancellationToken)
  - System.Fabric.FabricClient.ClusterManagementClient.RecoverPartitionsAsync
  - System.Fabric.FabricClient.ClusterManagementClient.RecoverPartitionsAsync(System.TimeSpan,System.Threading.CancellationToken)
  - System.Fabric.FabricClient.ClusterManagementClient.RecoverServicePartitionsAsync(System.Uri)
  - System.Fabric.FabricClient.ClusterManagementClient.RecoverServicePartitionsAsync(System.Uri,System.TimeSpan,System.Threading.CancellationToken)
  - System.Fabric.FabricClient.ClusterManagementClient.RecoverSystemPartitionsAsync
  - System.Fabric.FabricClient.ClusterManagementClient.RecoverSystemPartitionsAsync(System.TimeSpan,System.Threading.CancellationToken)
  - System.Fabric.FabricClient.ClusterManagementClient.RemoveClusterPackage(System.String,System.String,System.String)
  - System.Fabric.FabricClient.ClusterManagementClient.RemoveNodeStateAsync(System.String)
  - System.Fabric.FabricClient.ClusterManagementClient.RemoveNodeStateAsync(System.String,System.TimeSpan,System.Threading.CancellationToken)
  - System.Fabric.FabricClient.ClusterManagementClient.ResetPartitionLoadAsync(System.Guid)
  - System.Fabric.FabricClient.ClusterManagementClient.ResetPartitionLoadAsync(System.Guid,System.TimeSpan,System.Threading.CancellationToken)
  - System.Fabric.FabricClient.ClusterManagementClient.RollbackFabricUpgradeAsync
  - System.Fabric.FabricClient.ClusterManagementClient.RollbackFabricUpgradeAsync(System.TimeSpan,System.Threading.CancellationToken)
  - System.Fabric.FabricClient.ClusterManagementClient.ToggleVerboseServicePlacementHealthReportingAsync(System.Boolean)
  - System.Fabric.FabricClient.ClusterManagementClient.ToggleVerboseServicePlacementHealthReportingAsync(System.Boolean,System.TimeSpan,System.Threading.CancellationToken)
  - System.Fabric.FabricClient.ClusterManagementClient.UnprovisionFabricAsync(System.String,System.String)
  - System.Fabric.FabricClient.ClusterManagementClient.UnprovisionFabricAsync(System.String,System.String,System.TimeSpan,System.Threading.CancellationToken)
  - System.Fabric.FabricClient.ClusterManagementClient.UpdateFabricUpgradeAsync(System.Fabric.Description.FabricUpgradeUpdateDescription)
  - System.Fabric.FabricClient.ClusterManagementClient.UpdateFabricUpgradeAsync(System.Fabric.Description.FabricUpgradeUpdateDescription,System.TimeSpan,System.Threading.CancellationToken)
  - System.Fabric.FabricClient.ClusterManagementClient.UpgradeConfigurationAsync(System.Fabric.Description.ConfigurationUpgradeDescription)
  - System.Fabric.FabricClient.ClusterManagementClient.UpgradeConfigurationAsync(System.Fabric.Description.ConfigurationUpgradeDescription,System.Threading.CancellationToken)
  - System.Fabric.FabricClient.ClusterManagementClient.UpgradeConfigurationAsync(System.Fabric.Description.ConfigurationUpgradeDescription,System.TimeSpan)
  - System.Fabric.FabricClient.ClusterManagementClient.UpgradeConfigurationAsync(System.Fabric.Description.ConfigurationUpgradeDescription,System.TimeSpan,System.Threading.CancellationToken)
  - System.Fabric.FabricClient.ClusterManagementClient.UpgradeFabricAsync(System.Fabric.Description.FabricUpgradeDescription)
  - System.Fabric.FabricClient.ClusterManagementClient.UpgradeFabricAsync(System.Fabric.Description.FabricUpgradeDescription,System.TimeSpan,System.Threading.CancellationToken)
  langs:
  - csharp
  - vb
  name: FabricClient.ClusterManagementClient
  nameWithType: FabricClient.ClusterManagementClient
  fullName: System.Fabric.FabricClient.ClusterManagementClient
  type: Class
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ClusterManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: ClusterManagementClient
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ClusterManagementClient.cs
    startLine: 24
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Represents the cluster management client for performing cluster maintenance operations.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Fabric.FabricClient.ClusterManagementClient\" data-throw-if-not-resolved=\"false\"></xref> provides APIs which help to manage the cluster as a whole. \nThese are typically administrative commands which relate to major cluster events such as the loss of nodes and the need to recover services in the case of major failures.</p>\n"
  example: []
  syntax:
    content: public sealed class ClusterManagementClient
    content.vb: Public NotInheritable Class ClusterManagementClient
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  extensionMethods:
  - System.Fabric.FabricClient.ClusterManagementClient.System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: System.Fabric.FabricClient.ClusterManagementClient.DeactivateNodeAsync(System.String,System.Fabric.NodeDeactivationIntent)
  commentId: M:System.Fabric.FabricClient.ClusterManagementClient.DeactivateNodeAsync(System.String,System.Fabric.NodeDeactivationIntent)
  id: DeactivateNodeAsync(System.String,System.Fabric.NodeDeactivationIntent)
  parent: System.Fabric.FabricClient.ClusterManagementClient
  langs:
  - csharp
  - vb
  name: DeactivateNodeAsync(String, NodeDeactivationIntent)
  nameWithType: FabricClient.ClusterManagementClient.DeactivateNodeAsync(String, NodeDeactivationIntent)
  fullName: System.Fabric.FabricClient.ClusterManagementClient.DeactivateNodeAsync(System.String, System.Fabric.NodeDeactivationIntent)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ClusterManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: DeactivateNodeAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ClusterManagementClient.cs
    startLine: 111
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Deactivates a particular node with the specified <xref href=\"System.Fabric.NodeDeactivationIntent\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>\n    When this API completes it implies that the intent to deactivate has been registered by the system. It does not mean that the deactivation is complete. The progress of the operation can be determined by using the <xref href=\"System.Fabric.FabricClient.QueryClient.GetNodeListAsync\" data-throw-if-not-resolved=\"false\"></xref> API </p>\n<p>\n    Once the deactivation is in progress, the deactivation intent can be “increased” but not decreased (for example, a node which is was deactivated with the <xref href=\"System.Fabric.NodeDeactivationIntent.Pause\" data-throw-if-not-resolved=\"false\"></xref> intent can be deactivated further with <xref href=\"System.Fabric.NodeDeactivationIntent.Restart\" data-throw-if-not-resolved=\"false\"></xref>, but not the other way around. Nodes may be reactivated via <xref href=\"System.Fabric.FabricClient.ClusterManagementClient.ActivateNodeAsync(System.String)\" data-throw-if-not-resolved=\"false\"></xref> any time after they are deactivated. If the deactivation is not complete this will cancel the deactivation. A node which goes down and comes back up while deactivated will still need to be reactivated before services will be placed on that node.</p>\n<p>\n    Service Fabric ensures that deactivation is a 'safe' process. It performs several safety checks (see <xref href=\"System.Fabric.SafetyCheckKind\" data-throw-if-not-resolved=\"false\"></xref>) to ensure that there is no loss of availability or data </p>\n"
  example: []
  syntax:
    content: public Task DeactivateNodeAsync(string nodeName, NodeDeactivationIntent deactivationIntent)
    content.vb: Public Function DeactivateNodeAsync(nodeName As String, deactivationIntent As NodeDeactivationIntent) As Task
    parameters:
    - id: nodeName
      type: System.String
      description: "\n<p>The name of the node to deactivate.</p>\n"
    - id: deactivationIntent
      type: System.Fabric.NodeDeactivationIntent
      description: "\n<p>The <xref href=\"System.Fabric.NodeDeactivationIntent\" data-throw-if-not-resolved=\"false\"></xref> for deactivating the node.</p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>A Task that represents the asynchronous acknowledgment of the request.</p>\n"
  overload: System.Fabric.FabricClient.ClusterManagementClient.DeactivateNodeAsync*
  exceptions:
  - type: System.Fabric.FabricObjectClosedException
    commentId: T:System.Fabric.FabricObjectClosedException
    description: "\n<p>\n    See <a href=\"https://azure.microsoft.com/documentation/articles/service-fabric-errors-and-exceptions/\"></a> for handling common FabricClient failures.</p>\n"
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: "\n<p>\n    See <a href=\"https://azure.microsoft.com/documentation/articles/service-fabric-errors-and-exceptions/\"></a> for handling common FabricClient failures.</p>\n"
  - type: System.Fabric.FabricException
    commentId: T:System.Fabric.FabricException
    description: "\n<p>\n    See also <a href=\"https://azure.microsoft.com/documentation/articles/service-fabric-errors-and-exceptions/\"></a> for handling common FabricClient failures.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.ClusterManagementClient.DeactivateNodeAsync(System.String,System.Fabric.NodeDeactivationIntent,System.TimeSpan,System.Threading.CancellationToken)
  commentId: M:System.Fabric.FabricClient.ClusterManagementClient.DeactivateNodeAsync(System.String,System.Fabric.NodeDeactivationIntent,System.TimeSpan,System.Threading.CancellationToken)
  id: DeactivateNodeAsync(System.String,System.Fabric.NodeDeactivationIntent,System.TimeSpan,System.Threading.CancellationToken)
  parent: System.Fabric.FabricClient.ClusterManagementClient
  langs:
  - csharp
  - vb
  name: DeactivateNodeAsync(String, NodeDeactivationIntent, TimeSpan, CancellationToken)
  nameWithType: FabricClient.ClusterManagementClient.DeactivateNodeAsync(String, NodeDeactivationIntent, TimeSpan, CancellationToken)
  fullName: System.Fabric.FabricClient.ClusterManagementClient.DeactivateNodeAsync(System.String, System.Fabric.NodeDeactivationIntent, System.TimeSpan, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ClusterManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: DeactivateNodeAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ClusterManagementClient.cs
    startLine: 154
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Deactivates a particular node with the specified <xref href=\"System.Fabric.NodeDeactivationIntent\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>\n    When this API completes it implies that the intent to deactivate has been registered by the system. It does not mean that the deactivation is complete. The progress of the operation can be determined by using the <xref href=\"System.Fabric.FabricClient.QueryClient.GetNodeListAsync\" data-throw-if-not-resolved=\"false\"></xref> API </p>\n<p>\n    Once the deactivation is in progress, the deactivation intent can be “increased” but not decreased (for example, a node which is was deactivated with the <xref href=\"System.Fabric.NodeDeactivationIntent.Pause\" data-throw-if-not-resolved=\"false\"></xref> intent can be deactivated further with <xref href=\"System.Fabric.NodeDeactivationIntent.Restart\" data-throw-if-not-resolved=\"false\"></xref>, but not the other way around. Nodes may be reactivated via <xref href=\"System.Fabric.FabricClient.ClusterManagementClient.ActivateNodeAsync(System.String)\" data-throw-if-not-resolved=\"false\"></xref> any time after they are deactivated. If the deactivation is not complete this will cancel the deactivation. A node which goes down and comes back up while deactivated will still need to be reactivated before services will be placed on that node.</p>\n<p>\n    Service Fabric ensures that deactivation is a 'safe' process. It performs several safety checks (see <xref href=\"System.Fabric.SafetyCheckKind\" data-throw-if-not-resolved=\"false\"></xref>) to ensure that there is no loss of availability or data </p>\n"
  example: []
  syntax:
    content: public Task DeactivateNodeAsync(string nodeName, NodeDeactivationIntent deactivationIntent, TimeSpan timeout, CancellationToken cancellationToken)
    content.vb: Public Function DeactivateNodeAsync(nodeName As String, deactivationIntent As NodeDeactivationIntent, timeout As TimeSpan, cancellationToken As CancellationToken) As Task
    parameters:
    - id: nodeName
      type: System.String
      description: "\n<p>The name of the node to deactivate.</p>\n"
    - id: deactivationIntent
      type: System.Fabric.NodeDeactivationIntent
      description: "\n<p>The <xref href=\"System.Fabric.NodeDeactivationIntent\" data-throw-if-not-resolved=\"false\"></xref> for deactivating the node.</p>\n"
    - id: timeout
      type: System.TimeSpan
      description: "\n<p>The timespan that defines the maximum amount of time  will allow this operation to continue before returning a <xref href=\"System.TimeoutException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The optional cancellation token that the operation is observing. It can be used to send a notification that the operation should be canceled. Note that cancellation is advisory and that the operation may still be completed even if it is cancelled.</p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>A Task that represents the asynchronous acknowledgment of the request.</p>\n"
  overload: System.Fabric.FabricClient.ClusterManagementClient.DeactivateNodeAsync*
  exceptions:
  - type: System.Fabric.FabricObjectClosedException
    commentId: T:System.Fabric.FabricObjectClosedException
    description: "\n<p>\n    See <a href=\"https://azure.microsoft.com/documentation/articles/service-fabric-errors-and-exceptions/\"></a> for handling common FabricClient failures.</p>\n"
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: "\n<p>\n    See <a href=\"https://azure.microsoft.com/documentation/articles/service-fabric-errors-and-exceptions/\"></a> for handling common FabricClient failures.</p>\n"
  - type: System.Fabric.FabricException
    commentId: T:System.Fabric.FabricException
    description: "\n<p>\n    See also <a href=\"https://azure.microsoft.com/documentation/articles/service-fabric-errors-and-exceptions/\"></a> for handling common FabricClient failures.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.ClusterManagementClient.ActivateNodeAsync(System.String)
  commentId: M:System.Fabric.FabricClient.ClusterManagementClient.ActivateNodeAsync(System.String)
  id: ActivateNodeAsync(System.String)
  parent: System.Fabric.FabricClient.ClusterManagementClient
  langs:
  - csharp
  - vb
  name: ActivateNodeAsync(String)
  nameWithType: FabricClient.ClusterManagementClient.ActivateNodeAsync(String)
  fullName: System.Fabric.FabricClient.ClusterManagementClient.ActivateNodeAsync(System.String)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ClusterManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: ActivateNodeAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ClusterManagementClient.cs
    startLine: 187
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Activates a Service Fabric cluster node which is currently deactivated.</p>\n"
  remarks: "\n<p>\n    Once activated, the node will again become a viable target for placing new replicas, and any closed replicas remaining on the node will be opened.</p>\n<p>\n    When this API completes it implies that the intent to activate has been registered by the system. It does not mean that the activation is complete. The progress of the operation can be determined by using the <xref href=\"System.Fabric.FabricClient.QueryClient.GetNodeListAsync\" data-throw-if-not-resolved=\"false\"></xref> API </p>\n"
  example: []
  syntax:
    content: public Task ActivateNodeAsync(string nodeName)
    content.vb: Public Function ActivateNodeAsync(nodeName As String) As Task
    parameters:
    - id: nodeName
      type: System.String
      description: "\n<p>The Node to be Activated.</p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>A Task that represents the asynchronous acknowledgment of the request.</p>\n"
  overload: System.Fabric.FabricClient.ClusterManagementClient.ActivateNodeAsync*
  exceptions:
  - type: System.Fabric.FabricObjectClosedException
    commentId: T:System.Fabric.FabricObjectClosedException
    description: "\n<p>\n    See <a href=\"https://azure.microsoft.com/documentation/articles/service-fabric-errors-and-exceptions/\"></a> for handling common FabricClient failures.</p>\n"
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: "\n<p>\n    See <a href=\"https://azure.microsoft.com/documentation/articles/service-fabric-errors-and-exceptions/\"></a> for handling common FabricClient failures.</p>\n"
  - type: System.Fabric.FabricException
    commentId: T:System.Fabric.FabricException
    description: "\n<p>\n    See also <a href=\"https://azure.microsoft.com/documentation/articles/service-fabric-errors-and-exceptions/\"></a> for handling common FabricClient failures.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.ClusterManagementClient.ActivateNodeAsync(System.String,System.TimeSpan,System.Threading.CancellationToken)
  commentId: M:System.Fabric.FabricClient.ClusterManagementClient.ActivateNodeAsync(System.String,System.TimeSpan,System.Threading.CancellationToken)
  id: ActivateNodeAsync(System.String,System.TimeSpan,System.Threading.CancellationToken)
  parent: System.Fabric.FabricClient.ClusterManagementClient
  langs:
  - csharp
  - vb
  name: ActivateNodeAsync(String, TimeSpan, CancellationToken)
  nameWithType: FabricClient.ClusterManagementClient.ActivateNodeAsync(String, TimeSpan, CancellationToken)
  fullName: System.Fabric.FabricClient.ClusterManagementClient.ActivateNodeAsync(System.String, System.TimeSpan, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ClusterManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: ActivateNodeAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ClusterManagementClient.cs
    startLine: 225
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Activates a Service Fabric cluster node which is currently deactivated.</p>\n"
  remarks: "\n<p>\n    Once activated, the node will again become a viable target for placing new replicas, and any closed replicas remaining on the node will be opened.</p>\n<p>\n    When this API completes it implies that the intent to activate has been registered by the system. It does not mean that the activation is complete. The progress of the operation can be determined by using the <xref href=\"System.Fabric.FabricClient.QueryClient.GetNodeListAsync\" data-throw-if-not-resolved=\"false\"></xref> API </p>\n"
  example: []
  syntax:
    content: public Task ActivateNodeAsync(string nodeName, TimeSpan timeout, CancellationToken cancellationToken)
    content.vb: Public Function ActivateNodeAsync(nodeName As String, timeout As TimeSpan, cancellationToken As CancellationToken) As Task
    parameters:
    - id: nodeName
      type: System.String
      description: "\n<p>The Node to be Activated.</p>\n"
    - id: timeout
      type: System.TimeSpan
      description: "\n<p>The timespan that defines the maximum amount of time  will allow this operation to continue before returning a <xref href=\"System.TimeoutException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The optional cancellation token that the operation is observing. It can be used to send a notification that the operation should be canceled. Note that cancellation is advisory and that the operation may still be completed even if it is cancelled.</p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>A Task that represents the asynchronous acknowledgment of the request.</p>\n"
  overload: System.Fabric.FabricClient.ClusterManagementClient.ActivateNodeAsync*
  exceptions:
  - type: System.Fabric.FabricObjectClosedException
    commentId: T:System.Fabric.FabricObjectClosedException
    description: "\n<p>\n    See <a href=\"https://azure.microsoft.com/documentation/articles/service-fabric-errors-and-exceptions/\"></a> for handling common FabricClient failures.</p>\n"
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: "\n<p>\n    See <a href=\"https://azure.microsoft.com/documentation/articles/service-fabric-errors-and-exceptions/\"></a> for handling common FabricClient failures.</p>\n"
  - type: System.Fabric.FabricException
    commentId: T:System.Fabric.FabricException
    description: "\n<p>\n    See also <a href=\"https://azure.microsoft.com/documentation/articles/service-fabric-errors-and-exceptions/\"></a> for handling common FabricClient failures.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.ClusterManagementClient.RemoveNodeStateAsync(System.String)
  commentId: M:System.Fabric.FabricClient.ClusterManagementClient.RemoveNodeStateAsync(System.String)
  id: RemoveNodeStateAsync(System.String)
  parent: System.Fabric.FabricClient.ClusterManagementClient
  langs:
  - csharp
  - vb
  name: RemoveNodeStateAsync(String)
  nameWithType: FabricClient.ClusterManagementClient.RemoveNodeStateAsync(String)
  fullName: System.Fabric.FabricClient.ClusterManagementClient.RemoveNodeStateAsync(System.String)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ClusterManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: RemoveNodeStateAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ClusterManagementClient.cs
    startLine: 264
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Indicates that the persisted data of a node is lost (e.g., due to disk failure, or reimage, etc.), and that Service Fabric should treat any services or state on that node as lost and unrecoverable.</p>\n"
  remarks: "\n<p>\n    After a node goes down, Service Fabric will keep track of replicas of persisted services on that node as they have state on that node.</p>\n<p>\n    In cases where the administrator knows that the persisted state on a node has been permanently lost the <xref href=\"System.Fabric.FabricClient.ClusterManagementClient.RemoveNodeStateAsync(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method should be called ... to notify Service Fabric that the state on the node is gone (or the node can never come back with the state it had).</p>\n<p>\n    This instructs Service Fabric to stop waiting for that node (and any persisted replicas on that node) to recover.</p>\n<p>\n    NOTE: This API must be called only after it has been determined that the state on that node has been lost. </p>\n<p>\n    If this API is called and then the node comes back with its state intact it is Undefined Behavior</p>\n"
  example: []
  syntax:
    content: public Task RemoveNodeStateAsync(string nodeName)
    content.vb: Public Function RemoveNodeStateAsync(nodeName As String) As Task
    parameters:
    - id: nodeName
      type: System.String
      description: "\n<p>The name of the node which has been permanently lost.</p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>A task representing the operation.</p>\n"
  overload: System.Fabric.FabricClient.ClusterManagementClient.RemoveNodeStateAsync*
  exceptions:
  - type: System.Fabric.FabricObjectClosedException
    commentId: T:System.Fabric.FabricObjectClosedException
    description: "\n<p>\n    See <a href=\"https://azure.microsoft.com/documentation/articles/service-fabric-errors-and-exceptions/\"></a> for handling common FabricClient failures.</p>\n"
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: "\n<p>\n    See <a href=\"https://azure.microsoft.com/documentation/articles/service-fabric-errors-and-exceptions/\"></a> for handling common FabricClient failures.</p>\n"
  - type: System.Fabric.FabricException
    commentId: T:System.Fabric.FabricException
    description: "\n<p>\n    See also <a href=\"https://azure.microsoft.com/documentation/articles/service-fabric-errors-and-exceptions/\"></a> for handling common FabricClient failures.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.ClusterManagementClient.RemoveNodeStateAsync(System.String,System.TimeSpan,System.Threading.CancellationToken)
  commentId: M:System.Fabric.FabricClient.ClusterManagementClient.RemoveNodeStateAsync(System.String,System.TimeSpan,System.Threading.CancellationToken)
  id: RemoveNodeStateAsync(System.String,System.TimeSpan,System.Threading.CancellationToken)
  parent: System.Fabric.FabricClient.ClusterManagementClient
  langs:
  - csharp
  - vb
  name: RemoveNodeStateAsync(String, TimeSpan, CancellationToken)
  nameWithType: FabricClient.ClusterManagementClient.RemoveNodeStateAsync(String, TimeSpan, CancellationToken)
  fullName: System.Fabric.FabricClient.ClusterManagementClient.RemoveNodeStateAsync(System.String, System.TimeSpan, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ClusterManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: RemoveNodeStateAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ClusterManagementClient.cs
    startLine: 308
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Indicates that a particular node (which is down) has actually been lost, and that Service Fabric should treat any services or state on that node as lost and unrecoverable.</p>\n"
  remarks: "\n<p>\n    After a node goes down, Service Fabric will keep track of replicas of persisted services on that node as they have state on that node.</p>\n<p>\n    In cases where the administrator knows that a node (and its state) has been permanently lost the <xref href=\"System.Fabric.FabricClient.ClusterManagementClient.RemoveNodeStateAsync(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method should be called.</p>\n<p>\n    This instructs Service Fabric to stop waiting for that node (and any persisted replicas on that node) to recover.</p>\n<p>\n    NOTE: This API must be called only after it has been determined that the state on that node has been lost. </p>\n<p>\n    If this API is called and then the node comes back with its state intact it is Undefined Behavior</p>\n"
  example: []
  syntax:
    content: public Task RemoveNodeStateAsync(string nodeName, TimeSpan timeout, CancellationToken cancellationToken)
    content.vb: Public Function RemoveNodeStateAsync(nodeName As String, timeout As TimeSpan, cancellationToken As CancellationToken) As Task
    parameters:
    - id: nodeName
      type: System.String
      description: "\n<p>The name of the node which has been permanently lost.</p>\n"
    - id: timeout
      type: System.TimeSpan
      description: "\n<p>The timespan that defines the maximum amount of time  will allow this operation to continue before returning a <xref href=\"System.TimeoutException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The optional cancellation token that the operation is observing. It can be used to send a notification that the operation should be canceled. Note that cancellation is advisory and that the operation may still be completed even if it is cancelled.</p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>A task representing the operation.</p>\n"
  overload: System.Fabric.FabricClient.ClusterManagementClient.RemoveNodeStateAsync*
  exceptions:
  - type: System.Fabric.FabricObjectClosedException
    commentId: T:System.Fabric.FabricObjectClosedException
    description: "\n<p>\n    See <a href=\"https://azure.microsoft.com/documentation/articles/service-fabric-errors-and-exceptions/\"></a> for handling common FabricClient failures.</p>\n"
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: "\n<p>\n    See <a href=\"https://azure.microsoft.com/documentation/articles/service-fabric-errors-and-exceptions/\"></a> for handling common FabricClient failures.</p>\n"
  - type: System.Fabric.FabricException
    commentId: T:System.Fabric.FabricException
    description: "\n<p>\n    See also <a href=\"https://azure.microsoft.com/documentation/articles/service-fabric-errors-and-exceptions/\"></a> for handling common FabricClient failures.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.ClusterManagementClient.RecoverPartitionsAsync
  commentId: M:System.Fabric.FabricClient.ClusterManagementClient.RecoverPartitionsAsync
  id: RecoverPartitionsAsync
  parent: System.Fabric.FabricClient.ClusterManagementClient
  langs:
  - csharp
  - vb
  name: RecoverPartitionsAsync()
  nameWithType: FabricClient.ClusterManagementClient.RecoverPartitionsAsync()
  fullName: System.Fabric.FabricClient.ClusterManagementClient.RecoverPartitionsAsync()
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ClusterManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: RecoverPartitionsAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ClusterManagementClient.cs
    startLine: 338
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Indicates to the Service Fabric cluster that it should attempt to recover any services (including system services) which are currently stuck in quorum loss.</p>\n"
  remarks: "\n<p>\n    This operation should only be performed if it is known that the replicas that are down cannot be recovered. Incorrect use of this API can cause potential data loss.</p>\n"
  example: []
  syntax:
    content: public Task RecoverPartitionsAsync()
    content.vb: Public Function RecoverPartitionsAsync As Task
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>A task representing acknowledgement of the intent.</p>\n"
  overload: System.Fabric.FabricClient.ClusterManagementClient.RecoverPartitionsAsync*
  exceptions:
  - type: System.Fabric.FabricObjectClosedException
    commentId: T:System.Fabric.FabricObjectClosedException
    description: "\n<p>\n    See <a href=\"https://azure.microsoft.com/documentation/articles/service-fabric-errors-and-exceptions/\"></a> for handling common FabricClient failures.</p>\n"
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: "\n<p>\n    See <a href=\"https://azure.microsoft.com/documentation/articles/service-fabric-errors-and-exceptions/\"></a> for handling common FabricClient failures.</p>\n"
  - type: System.Fabric.FabricException
    commentId: T:System.Fabric.FabricException
    description: "\n<p>\n    See also <a href=\"https://azure.microsoft.com/documentation/articles/service-fabric-errors-and-exceptions/\"></a> for handling common FabricClient failures.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.ClusterManagementClient.RecoverPartitionsAsync(System.TimeSpan,System.Threading.CancellationToken)
  commentId: M:System.Fabric.FabricClient.ClusterManagementClient.RecoverPartitionsAsync(System.TimeSpan,System.Threading.CancellationToken)
  id: RecoverPartitionsAsync(System.TimeSpan,System.Threading.CancellationToken)
  parent: System.Fabric.FabricClient.ClusterManagementClient
  langs:
  - csharp
  - vb
  name: RecoverPartitionsAsync(TimeSpan, CancellationToken)
  nameWithType: FabricClient.ClusterManagementClient.RecoverPartitionsAsync(TimeSpan, CancellationToken)
  fullName: System.Fabric.FabricClient.ClusterManagementClient.RecoverPartitionsAsync(System.TimeSpan, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ClusterManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: RecoverPartitionsAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ClusterManagementClient.cs
    startLine: 372
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Indicates to the Service Fabric cluster that it should attempt to recover any services (including system services) which are currently stuck in quorum loss.</p>\n"
  remarks: "\n<p>\n    This operation should only be performed if it is known that the replicas that are down cannot be recovered. Incorrect use of this API can cause potential data loss. </p>\n"
  example: []
  syntax:
    content: public Task RecoverPartitionsAsync(TimeSpan timeout, CancellationToken cancellationToken)
    content.vb: Public Function RecoverPartitionsAsync(timeout As TimeSpan, cancellationToken As CancellationToken) As Task
    parameters:
    - id: timeout
      type: System.TimeSpan
      description: "\n<p>The timespan that defines the maximum amount of time  will allow this operation to continue before returning a <xref href=\"System.TimeoutException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The optional cancellation token that the operation is observing. It can be used to send a notification that the operation should be canceled. Note that cancellation is advisory and that the operation may still be completed even if it is cancelled.</p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>A task representing acknowledgement of the intent.</p>\n"
  overload: System.Fabric.FabricClient.ClusterManagementClient.RecoverPartitionsAsync*
  exceptions:
  - type: System.Fabric.FabricObjectClosedException
    commentId: T:System.Fabric.FabricObjectClosedException
    description: "\n<p>\n    See <a href=\"https://azure.microsoft.com/documentation/articles/service-fabric-errors-and-exceptions/\"></a> for handling common FabricClient failures.</p>\n"
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: "\n<p>\n    See <a href=\"https://azure.microsoft.com/documentation/articles/service-fabric-errors-and-exceptions/\"></a> for handling common FabricClient failures.</p>\n"
  - type: System.Fabric.FabricException
    commentId: T:System.Fabric.FabricException
    description: "\n<p>\n    See also <a href=\"https://azure.microsoft.com/documentation/articles/service-fabric-errors-and-exceptions/\"></a> for handling common FabricClient failures.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.ClusterManagementClient.RecoverPartitionAsync(System.Guid)
  commentId: M:System.Fabric.FabricClient.ClusterManagementClient.RecoverPartitionAsync(System.Guid)
  id: RecoverPartitionAsync(System.Guid)
  parent: System.Fabric.FabricClient.ClusterManagementClient
  langs:
  - csharp
  - vb
  name: RecoverPartitionAsync(Guid)
  nameWithType: FabricClient.ClusterManagementClient.RecoverPartitionAsync(Guid)
  fullName: System.Fabric.FabricClient.ClusterManagementClient.RecoverPartitionAsync(System.Guid)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ClusterManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: RecoverPartitionAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ClusterManagementClient.cs
    startLine: 401
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Indicates to the Service Fabric cluster that it should attempt to recover a specific partition which is currently stuck in quorum loss.</p>\n"
  remarks: "\n<p>\n    This operation should only be performed if it is known that the replicas that are down cannot be recovered. Incorrect use of this API can cause potential data loss. </p>\n"
  example: []
  syntax:
    content: public Task RecoverPartitionAsync(Guid partitionId)
    content.vb: Public Function RecoverPartitionAsync(partitionId As Guid) As Task
    parameters:
    - id: partitionId
      type: System.Guid
      description: The partition id to recover
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>A task representing acknowledgement of the intent.</p>\n"
  overload: System.Fabric.FabricClient.ClusterManagementClient.RecoverPartitionAsync*
  exceptions:
  - type: System.Fabric.FabricObjectClosedException
    commentId: T:System.Fabric.FabricObjectClosedException
    description: "\n<p>\n    See <a href=\"https://azure.microsoft.com/documentation/articles/service-fabric-errors-and-exceptions/\"></a> for handling common FabricClient failures.</p>\n"
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: "\n<p>\n    See <a href=\"https://azure.microsoft.com/documentation/articles/service-fabric-errors-and-exceptions/\"></a> for handling common FabricClient failures.</p>\n"
  - type: System.Fabric.FabricException
    commentId: T:System.Fabric.FabricException
    description: "\n<p>\n    See also <a href=\"https://azure.microsoft.com/documentation/articles/service-fabric-errors-and-exceptions/\"></a> for handling common FabricClient failures.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.ClusterManagementClient.RecoverPartitionAsync(System.Guid,System.TimeSpan,System.Threading.CancellationToken)
  commentId: M:System.Fabric.FabricClient.ClusterManagementClient.RecoverPartitionAsync(System.Guid,System.TimeSpan,System.Threading.CancellationToken)
  id: RecoverPartitionAsync(System.Guid,System.TimeSpan,System.Threading.CancellationToken)
  parent: System.Fabric.FabricClient.ClusterManagementClient
  langs:
  - csharp
  - vb
  name: RecoverPartitionAsync(Guid, TimeSpan, CancellationToken)
  nameWithType: FabricClient.ClusterManagementClient.RecoverPartitionAsync(Guid, TimeSpan, CancellationToken)
  fullName: System.Fabric.FabricClient.ClusterManagementClient.RecoverPartitionAsync(System.Guid, System.TimeSpan, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ClusterManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: RecoverPartitionAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ClusterManagementClient.cs
    startLine: 435
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Indicates to the Service Fabric cluster that it should attempt to recover a specific partition which is currently stuck in quorum loss.</p>\n"
  remarks: "\n<p>\n    This operation should only be performed if it is known that the replicas that are down cannot be recovered. Incorrect use of this API can cause potential data loss. </p>\n"
  example: []
  syntax:
    content: public Task RecoverPartitionAsync(Guid partitionId, TimeSpan timeout, CancellationToken cancellationToken)
    content.vb: Public Function RecoverPartitionAsync(partitionId As Guid, timeout As TimeSpan, cancellationToken As CancellationToken) As Task
    parameters:
    - id: partitionId
      type: System.Guid
      description: The partition id to recover
    - id: timeout
      type: System.TimeSpan
      description: "\n<p>The timespan that defines the maximum amount of time  will allow this operation to continue before returning a <xref href=\"System.TimeoutException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The optional cancellation token that the operation is observing. It can be used to send a notification that the operation should be canceled. Note that cancellation is advisory and that the operation may still be completed even if it is cancelled.</p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>A task representing acknowledgement of the intent.</p>\n"
  overload: System.Fabric.FabricClient.ClusterManagementClient.RecoverPartitionAsync*
  exceptions:
  - type: System.Fabric.FabricObjectClosedException
    commentId: T:System.Fabric.FabricObjectClosedException
    description: "\n<p>\n    See <a href=\"https://azure.microsoft.com/documentation/articles/service-fabric-errors-and-exceptions/\"></a> for handling common FabricClient failures.</p>\n"
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: "\n<p>\n    See <a href=\"https://azure.microsoft.com/documentation/articles/service-fabric-errors-and-exceptions/\"></a> for handling common FabricClient failures.</p>\n"
  - type: System.Fabric.FabricException
    commentId: T:System.Fabric.FabricException
    description: "\n<p>\n    See also <a href=\"https://azure.microsoft.com/documentation/articles/service-fabric-errors-and-exceptions/\"></a> for handling common FabricClient failures.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.ClusterManagementClient.RecoverServicePartitionsAsync(System.Uri)
  commentId: M:System.Fabric.FabricClient.ClusterManagementClient.RecoverServicePartitionsAsync(System.Uri)
  id: RecoverServicePartitionsAsync(System.Uri)
  parent: System.Fabric.FabricClient.ClusterManagementClient
  langs:
  - csharp
  - vb
  name: RecoverServicePartitionsAsync(Uri)
  nameWithType: FabricClient.ClusterManagementClient.RecoverServicePartitionsAsync(Uri)
  fullName: System.Fabric.FabricClient.ClusterManagementClient.RecoverServicePartitionsAsync(System.Uri)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ClusterManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: RecoverServicePartitionsAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ClusterManagementClient.cs
    startLine: 466
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Indicates to the Service Fabric cluster that it should attempt to recover the specified service which is currently stuck in quorum loss.</p>\n"
  remarks: "\n<p>\n    This operation should only be performed if it is known that the replicas that are down cannot be recovered. Incorrect use of this API can cause potential data loss. </p>\n"
  example: []
  syntax:
    content: public Task RecoverServicePartitionsAsync(Uri serviceName)
    content.vb: Public Function RecoverServicePartitionsAsync(serviceName As Uri) As Task
    parameters:
    - id: serviceName
      type: System.Uri
      description: "\n<p>The name of the service to recover.</p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>A task representing acknowledgement of the intent.</p>\n"
  overload: System.Fabric.FabricClient.ClusterManagementClient.RecoverServicePartitionsAsync*
  exceptions:
  - type: System.Fabric.FabricObjectClosedException
    commentId: T:System.Fabric.FabricObjectClosedException
    description: "\n<p>\n    See <a href=\"https://azure.microsoft.com/documentation/articles/service-fabric-errors-and-exceptions/\"></a> for handling common FabricClient failures.</p>\n"
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: "\n<p>\n    See <a href=\"https://azure.microsoft.com/documentation/articles/service-fabric-errors-and-exceptions/\"></a> for handling common FabricClient failures.</p>\n"
  - type: System.Fabric.FabricException
    commentId: T:System.Fabric.FabricException
    description: "\n<p>\n    See also <a href=\"https://azure.microsoft.com/documentation/articles/service-fabric-errors-and-exceptions/\"></a> for handling common FabricClient failures.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.ClusterManagementClient.RecoverServicePartitionsAsync(System.Uri,System.TimeSpan,System.Threading.CancellationToken)
  commentId: M:System.Fabric.FabricClient.ClusterManagementClient.RecoverServicePartitionsAsync(System.Uri,System.TimeSpan,System.Threading.CancellationToken)
  id: RecoverServicePartitionsAsync(System.Uri,System.TimeSpan,System.Threading.CancellationToken)
  parent: System.Fabric.FabricClient.ClusterManagementClient
  langs:
  - csharp
  - vb
  name: RecoverServicePartitionsAsync(Uri, TimeSpan, CancellationToken)
  nameWithType: FabricClient.ClusterManagementClient.RecoverServicePartitionsAsync(Uri, TimeSpan, CancellationToken)
  fullName: System.Fabric.FabricClient.ClusterManagementClient.RecoverServicePartitionsAsync(System.Uri, System.TimeSpan, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ClusterManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: RecoverServicePartitionsAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ClusterManagementClient.cs
    startLine: 502
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Indicates to the Service Fabric cluster that it should attempt to recover the specified service which is currently stuck in quorum loss by using the specified timeout and cancellation token.</p>\n"
  remarks: "\n<p>\n    This operation should only be performed if it is known that the replicas that are down cannot be recovered. Incorrect use of this API can cause potential data loss. </p>\n"
  example: []
  syntax:
    content: public Task RecoverServicePartitionsAsync(Uri serviceName, TimeSpan timeout, CancellationToken cancellationToken)
    content.vb: Public Function RecoverServicePartitionsAsync(serviceName As Uri, timeout As TimeSpan, cancellationToken As CancellationToken) As Task
    parameters:
    - id: serviceName
      type: System.Uri
      description: "\n<p>The name of the service to recover.</p>\n"
    - id: timeout
      type: System.TimeSpan
      description: "\n<p>The maximum amount of time Service Fabric will allow this operation to continue before returning a <xref href=\"System.TimeoutException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The cancellation token that the operation is observing. It can be used to send a notification that the operation should be canceled. Note that cancellation is advisory and that the operation may still be completed even if it is cancelled.</p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>A task representing acknowledgement of the intent.</p>\n"
  overload: System.Fabric.FabricClient.ClusterManagementClient.RecoverServicePartitionsAsync*
  exceptions:
  - type: System.Fabric.FabricObjectClosedException
    commentId: T:System.Fabric.FabricObjectClosedException
    description: "\n<p>\n    See <a href=\"https://azure.microsoft.com/documentation/articles/service-fabric-errors-and-exceptions/\"></a> for handling common FabricClient failures.</p>\n"
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: "\n<p>\n    See <a href=\"https://azure.microsoft.com/documentation/articles/service-fabric-errors-and-exceptions/\"></a> for handling common FabricClient failures.</p>\n"
  - type: System.Fabric.FabricException
    commentId: T:System.Fabric.FabricException
    description: "\n<p>\n    See also <a href=\"https://azure.microsoft.com/documentation/articles/service-fabric-errors-and-exceptions/\"></a> for handling common FabricClient failures.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.ClusterManagementClient.RecoverSystemPartitionsAsync
  commentId: M:System.Fabric.FabricClient.ClusterManagementClient.RecoverSystemPartitionsAsync
  id: RecoverSystemPartitionsAsync
  parent: System.Fabric.FabricClient.ClusterManagementClient
  langs:
  - csharp
  - vb
  name: RecoverSystemPartitionsAsync()
  nameWithType: FabricClient.ClusterManagementClient.RecoverSystemPartitionsAsync()
  fullName: System.Fabric.FabricClient.ClusterManagementClient.RecoverSystemPartitionsAsync()
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ClusterManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: RecoverSystemPartitionsAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ClusterManagementClient.cs
    startLine: 530
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Indicates to the Service Fabric cluster that it should attempt to recover the system services which are currently stuck in quorum loss.</p>\n"
  remarks: "\n<p>\n    This operation should only be performed if it is known that the replicas that are down cannot be recovered. Incorrect use of this API can cause potential data loss. </p>\n"
  example: []
  syntax:
    content: public Task RecoverSystemPartitionsAsync()
    content.vb: Public Function RecoverSystemPartitionsAsync As Task
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>A task representing acknowledgement of the intent.</p>\n"
  overload: System.Fabric.FabricClient.ClusterManagementClient.RecoverSystemPartitionsAsync*
  exceptions:
  - type: System.Fabric.FabricObjectClosedException
    commentId: T:System.Fabric.FabricObjectClosedException
    description: "\n<p>\n    See <a href=\"https://azure.microsoft.com/documentation/articles/service-fabric-errors-and-exceptions/\"></a> for handling common FabricClient failures.</p>\n"
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: "\n<p>\n    See <a href=\"https://azure.microsoft.com/documentation/articles/service-fabric-errors-and-exceptions/\"></a> for handling common FabricClient failures.</p>\n"
  - type: System.Fabric.FabricException
    commentId: T:System.Fabric.FabricException
    description: "\n<p>\n    See also <a href=\"https://azure.microsoft.com/documentation/articles/service-fabric-errors-and-exceptions/\"></a> for handling common FabricClient failures.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.ClusterManagementClient.RecoverSystemPartitionsAsync(System.TimeSpan,System.Threading.CancellationToken)
  commentId: M:System.Fabric.FabricClient.ClusterManagementClient.RecoverSystemPartitionsAsync(System.TimeSpan,System.Threading.CancellationToken)
  id: RecoverSystemPartitionsAsync(System.TimeSpan,System.Threading.CancellationToken)
  parent: System.Fabric.FabricClient.ClusterManagementClient
  langs:
  - csharp
  - vb
  name: RecoverSystemPartitionsAsync(TimeSpan, CancellationToken)
  nameWithType: FabricClient.ClusterManagementClient.RecoverSystemPartitionsAsync(TimeSpan, CancellationToken)
  fullName: System.Fabric.FabricClient.ClusterManagementClient.RecoverSystemPartitionsAsync(System.TimeSpan, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ClusterManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: RecoverSystemPartitionsAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ClusterManagementClient.cs
    startLine: 563
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Indicates to the Service Fabric cluster that it should attempt to recover the system services which are currently stuck in quorum loss.</p>\n"
  remarks: "\n<p>\n    This operation should only be performed if it is known that the replicas that are down cannot be recovered. Incorrect use of this API can cause potential data loss. </p>\n"
  example: []
  syntax:
    content: public Task RecoverSystemPartitionsAsync(TimeSpan timeout, CancellationToken cancellationToken)
    content.vb: Public Function RecoverSystemPartitionsAsync(timeout As TimeSpan, cancellationToken As CancellationToken) As Task
    parameters:
    - id: timeout
      type: System.TimeSpan
      description: "\n<p>The timespan that defines the maximum amount of time Service Fabric will allow this operation to continue before returning a <xref href=\"System.TimeoutException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The cancellation token that the operation is observing. It can be used to send a notification that the operation should be canceled. Note that cancellation is advisory and that the operation may still be completed even if it is cancelled.</p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>A task representing acknowledgement of the intent.</p>\n"
  overload: System.Fabric.FabricClient.ClusterManagementClient.RecoverSystemPartitionsAsync*
  exceptions:
  - type: System.Fabric.FabricObjectClosedException
    commentId: T:System.Fabric.FabricObjectClosedException
    description: "\n<p>\n    See <a href=\"https://azure.microsoft.com/documentation/articles/service-fabric-errors-and-exceptions/\"></a> for handling common FabricClient failures.</p>\n"
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: "\n<p>\n    See <a href=\"https://azure.microsoft.com/documentation/articles/service-fabric-errors-and-exceptions/\"></a> for handling common FabricClient failures.</p>\n"
  - type: System.Fabric.FabricException
    commentId: T:System.Fabric.FabricException
    description: "\n<p>\n    See also <a href=\"https://azure.microsoft.com/documentation/articles/service-fabric-errors-and-exceptions/\"></a> for handling common FabricClient failures.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.ClusterManagementClient.ResetPartitionLoadAsync(System.Guid)
  commentId: M:System.Fabric.FabricClient.ClusterManagementClient.ResetPartitionLoadAsync(System.Guid)
  id: ResetPartitionLoadAsync(System.Guid)
  parent: System.Fabric.FabricClient.ClusterManagementClient
  langs:
  - csharp
  - vb
  name: ResetPartitionLoadAsync(Guid)
  nameWithType: FabricClient.ClusterManagementClient.ResetPartitionLoadAsync(Guid)
  fullName: System.Fabric.FabricClient.ClusterManagementClient.ResetPartitionLoadAsync(System.Guid)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ClusterManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: ResetPartitionLoadAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ClusterManagementClient.cs
    startLine: 580
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p> \nResets a given partition's load\n</p>\n"
  example: []
  syntax:
    content: public Task ResetPartitionLoadAsync(Guid partitionId)
    content.vb: Public Function ResetPartitionLoadAsync(partitionId As Guid) As Task
    parameters:
    - id: partitionId
      type: System.Guid
      description: "\n<p>The partition Id represented as a Guid </p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>The task associated with this async method. </p>\n"
  overload: System.Fabric.FabricClient.ClusterManagementClient.ResetPartitionLoadAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.ClusterManagementClient.ResetPartitionLoadAsync(System.Guid,System.TimeSpan,System.Threading.CancellationToken)
  commentId: M:System.Fabric.FabricClient.ClusterManagementClient.ResetPartitionLoadAsync(System.Guid,System.TimeSpan,System.Threading.CancellationToken)
  id: ResetPartitionLoadAsync(System.Guid,System.TimeSpan,System.Threading.CancellationToken)
  parent: System.Fabric.FabricClient.ClusterManagementClient
  langs:
  - csharp
  - vb
  name: ResetPartitionLoadAsync(Guid, TimeSpan, CancellationToken)
  nameWithType: FabricClient.ClusterManagementClient.ResetPartitionLoadAsync(Guid, TimeSpan, CancellationToken)
  fullName: System.Fabric.FabricClient.ClusterManagementClient.ResetPartitionLoadAsync(System.Guid, System.TimeSpan, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ClusterManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: ResetPartitionLoadAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ClusterManagementClient.cs
    startLine: 602
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p> \nResets a given partition's load\n</p>\n"
  example: []
  syntax:
    content: public Task ResetPartitionLoadAsync(Guid partitionId, TimeSpan timeout, CancellationToken cancellationToken)
    content.vb: Public Function ResetPartitionLoadAsync(partitionId As Guid, timeout As TimeSpan, cancellationToken As CancellationToken) As Task
    parameters:
    - id: partitionId
      type: System.Guid
      description: "\n<p>The partition Id represented as a Guid </p>\n"
    - id: timeout
      type: System.TimeSpan
      description: "\n<p> The length of time within which the async method must complete in order for the method to not time out.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>A cancellation token for this method. </p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>The task associated with this async method. </p>\n"
  overload: System.Fabric.FabricClient.ClusterManagementClient.ResetPartitionLoadAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.ClusterManagementClient.ToggleVerboseServicePlacementHealthReportingAsync(System.Boolean)
  commentId: M:System.Fabric.FabricClient.ClusterManagementClient.ToggleVerboseServicePlacementHealthReportingAsync(System.Boolean)
  id: ToggleVerboseServicePlacementHealthReportingAsync(System.Boolean)
  parent: System.Fabric.FabricClient.ClusterManagementClient
  langs:
  - csharp
  - vb
  name: ToggleVerboseServicePlacementHealthReportingAsync(Boolean)
  nameWithType: FabricClient.ClusterManagementClient.ToggleVerboseServicePlacementHealthReportingAsync(Boolean)
  fullName: System.Fabric.FabricClient.ClusterManagementClient.ToggleVerboseServicePlacementHealthReportingAsync(System.Boolean)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ClusterManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: ToggleVerboseServicePlacementHealthReportingAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ClusterManagementClient.cs
    startLine: 624
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p> \nToggles whether the Cluster Resource Balancer will report a health warning when it's unable to place a replica.\n</p>\n"
  remarks: "\n<p>If this method is called twice with the value false, it clears from memory the reports that would potentially have been emitted.\nIf this method is called with the value true, the Cluster Resource Balancer will report a health warning when it's unable to place a replica.\nIf such health warnings are blocking a monitored upgrade's health checks the toggle can be switched off. </p>\n"
  example: []
  syntax:
    content: public Task ToggleVerboseServicePlacementHealthReportingAsync(bool enabled)
    content.vb: Public Function ToggleVerboseServicePlacementHealthReportingAsync(enabled As Boolean) As Task
    parameters:
    - id: enabled
      type: System.Boolean
      description: "\n<p>A boolean value, which if true causes reporting when a replica is unabled to be placed. </p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>The task associated with this async method. </p>\n"
  overload: System.Fabric.FabricClient.ClusterManagementClient.ToggleVerboseServicePlacementHealthReportingAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.ClusterManagementClient.ToggleVerboseServicePlacementHealthReportingAsync(System.Boolean,System.TimeSpan,System.Threading.CancellationToken)
  commentId: M:System.Fabric.FabricClient.ClusterManagementClient.ToggleVerboseServicePlacementHealthReportingAsync(System.Boolean,System.TimeSpan,System.Threading.CancellationToken)
  id: ToggleVerboseServicePlacementHealthReportingAsync(System.Boolean,System.TimeSpan,System.Threading.CancellationToken)
  parent: System.Fabric.FabricClient.ClusterManagementClient
  langs:
  - csharp
  - vb
  name: ToggleVerboseServicePlacementHealthReportingAsync(Boolean, TimeSpan, CancellationToken)
  nameWithType: FabricClient.ClusterManagementClient.ToggleVerboseServicePlacementHealthReportingAsync(Boolean, TimeSpan, CancellationToken)
  fullName: System.Fabric.FabricClient.ClusterManagementClient.ToggleVerboseServicePlacementHealthReportingAsync(System.Boolean, System.TimeSpan, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ClusterManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: ToggleVerboseServicePlacementHealthReportingAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ClusterManagementClient.cs
    startLine: 651
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p> \nToggles whether the Cluster Resource Balancer will report a health warning when it's unable to place a replica.\n</p>\n"
  remarks: "\n<p>If this method is called twice with the value false, it clears from memory the reports that would potentially have been emitted.\nIf this method is called with the value true, the Cluster Resource Balancer will report a health warning when it's unable to place a replica.\nIf such health warnings are blocking a monitored upgrade's health checks, the toggle can be switched off. </p>\n"
  example: []
  syntax:
    content: public Task ToggleVerboseServicePlacementHealthReportingAsync(bool enabled, TimeSpan timeout, CancellationToken cancellationToken)
    content.vb: Public Function ToggleVerboseServicePlacementHealthReportingAsync(enabled As Boolean, timeout As TimeSpan, cancellationToken As CancellationToken) As Task
    parameters:
    - id: enabled
      type: System.Boolean
      description: "\n<p>A boolean value, which if true causes reporting when a replica is unabled to be placed. </p>\n"
    - id: timeout
      type: System.TimeSpan
      description: "\n<p> The length of time within which the async method must complete in order for the method to not time out.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>A cancellation token for this method. </p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>The task associated with this async method. </p>\n"
  overload: System.Fabric.FabricClient.ClusterManagementClient.ToggleVerboseServicePlacementHealthReportingAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.ClusterManagementClient.ProvisionFabricAsync(System.String,System.String)
  commentId: M:System.Fabric.FabricClient.ClusterManagementClient.ProvisionFabricAsync(System.String,System.String)
  id: ProvisionFabricAsync(System.String,System.String)
  parent: System.Fabric.FabricClient.ClusterManagementClient
  langs:
  - csharp
  - vb
  name: ProvisionFabricAsync(String, String)
  nameWithType: FabricClient.ClusterManagementClient.ProvisionFabricAsync(String, String)
  fullName: System.Fabric.FabricClient.ClusterManagementClient.ProvisionFabricAsync(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ClusterManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: ProvisionFabricAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ClusterManagementClient.cs
    startLine: 677
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Provisions the Service Fabric.</p>\n"
  remarks: "\n<p>A <strong>null</strong> value is permitted for either the <em>patchFilePath</em> parameter or the <em>clusterManifestFilePath</em> parameter. A <strong>null</strong> value cannot be used for both parameters.</p>\n<p>This will upload the patch file and/or cluster manifest file to the image store location. The image store location is specified as a configuration setting in the cluster manifest that was provided when the cluster was created.</p>\n<p>Cluster manifest validation will occur within the context of this call.</p>\n"
  example: []
  syntax:
    content: public Task ProvisionFabricAsync(string patchFilePath, string clusterManifestFilePath)
    content.vb: Public Function ProvisionFabricAsync(patchFilePath As String, clusterManifestFilePath As String) As Task
    parameters:
    - id: patchFilePath
      type: System.String
      description: "\n<p>The path to the update patch file.</p>\n"
    - id: clusterManifestFilePath
      type: System.String
      description: "\n<p>The path to the cluster manifest.</p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>The provisioned Service Fabric.</p>\n"
  overload: System.Fabric.FabricClient.ClusterManagementClient.ProvisionFabricAsync*
  exceptions:
  - type: System.Fabric.FabricObjectClosedException
    commentId: T:System.Fabric.FabricObjectClosedException
    description: "\n<p>The <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object is in a closed state. Dispose of the <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object you are using and instantiate a new <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.ClusterManagementClient.ProvisionFabricAsync(System.String,System.String,System.TimeSpan,System.Threading.CancellationToken)
  commentId: M:System.Fabric.FabricClient.ClusterManagementClient.ProvisionFabricAsync(System.String,System.String,System.TimeSpan,System.Threading.CancellationToken)
  id: ProvisionFabricAsync(System.String,System.String,System.TimeSpan,System.Threading.CancellationToken)
  parent: System.Fabric.FabricClient.ClusterManagementClient
  langs:
  - csharp
  - vb
  name: ProvisionFabricAsync(String, String, TimeSpan, CancellationToken)
  nameWithType: FabricClient.ClusterManagementClient.ProvisionFabricAsync(String, String, TimeSpan, CancellationToken)
  fullName: System.Fabric.FabricClient.ClusterManagementClient.ProvisionFabricAsync(System.String, System.String, System.TimeSpan, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ClusterManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: ProvisionFabricAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ClusterManagementClient.cs
    startLine: 710
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Provisions the Service Fabric by using the specified timeout and cancellation token.</p>\n"
  remarks: "\n<p>A <strong>null</strong> value is permitted for either the <em>patchFilePath</em> parameter or the <em>clusterManifestFilePath</em>\nparameter. A <strong>null</strong> value cannot be used for both parameters.</p>\n<p>This will upload the patch file and/or cluster manifest file to the image store location. The image store location is specified as a configuration setting\nin the cluster manifest that was provided when the cluster was created.</p>\n<p>Cluster manifest validation will occur within the context of this call.</p>\n"
  example: []
  syntax:
    content: public Task ProvisionFabricAsync(string patchFilePath, string clusterManifestFilePath, TimeSpan timeout, CancellationToken cancellationToken)
    content.vb: Public Function ProvisionFabricAsync(patchFilePath As String, clusterManifestFilePath As String, timeout As TimeSpan, cancellationToken As CancellationToken) As Task
    parameters:
    - id: patchFilePath
      type: System.String
      description: "\n<p>The path to the update patch file.</p>\n"
    - id: clusterManifestFilePath
      type: System.String
      description: "\n<p>The path to the cluster manifest.</p>\n"
    - id: timeout
      type: System.TimeSpan
      description: "\n<p>The maximum amount of time Service Fabric will allow this operation to continue before returning a <xref href=\"System.TimeoutException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The cancellation token that the operation is observing. It can be used to send a notification that the operation should be canceled. Note that cancellation is advisory and that the operation may still be completed even if it is cancelled.</p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>The provisioned Service Fabric.</p>\n"
  overload: System.Fabric.FabricClient.ClusterManagementClient.ProvisionFabricAsync*
  exceptions:
  - type: System.Fabric.FabricObjectClosedException
    commentId: T:System.Fabric.FabricObjectClosedException
    description: "\n<p>The <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object is in a closed state. Dispose of the <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object you are using and instantiate a new <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.ClusterManagementClient.UnprovisionFabricAsync(System.String,System.String)
  commentId: M:System.Fabric.FabricClient.ClusterManagementClient.UnprovisionFabricAsync(System.String,System.String)
  id: UnprovisionFabricAsync(System.String,System.String)
  parent: System.Fabric.FabricClient.ClusterManagementClient
  langs:
  - csharp
  - vb
  name: UnprovisionFabricAsync(String, String)
  nameWithType: FabricClient.ClusterManagementClient.UnprovisionFabricAsync(String, String)
  fullName: System.Fabric.FabricClient.ClusterManagementClient.UnprovisionFabricAsync(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ClusterManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: UnprovisionFabricAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ClusterManagementClient.cs
    startLine: 735
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Unprovisions the Service Fabric.</p>\n"
  remarks: "\n<p>A <strong>null</strong> value is permitted for either the <em>codeVersion</em> parameter or the <em>configVersion</em> parameter. A <strong>null</strong> value cannot be used for both parameters.</p>\n<p>This will delete the patch file and/or cluster manifest file from the image store location. The image store location is specified as a configuration setting in the cluster manifest that was provided when the cluster was created.</p>\n"
  example: []
  syntax:
    content: public Task UnprovisionFabricAsync(string codeVersion, string configVersion)
    content.vb: Public Function UnprovisionFabricAsync(codeVersion As String, configVersion As String) As Task
    parameters:
    - id: codeVersion
      type: System.String
      description: "\n<p>The code version to unprovision.</p>\n"
    - id: configVersion
      type: System.String
      description: "\n<p>The configuration version to unprovision.</p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>The unprovisioned Service Fabric.</p>\n"
  overload: System.Fabric.FabricClient.ClusterManagementClient.UnprovisionFabricAsync*
  exceptions:
  - type: System.Fabric.FabricObjectClosedException
    commentId: T:System.Fabric.FabricObjectClosedException
    description: "\n<p>The <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object is in a closed state. Dispose of the <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object you are using and instantiate a new <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.ClusterManagementClient.UnprovisionFabricAsync(System.String,System.String,System.TimeSpan,System.Threading.CancellationToken)
  commentId: M:System.Fabric.FabricClient.ClusterManagementClient.UnprovisionFabricAsync(System.String,System.String,System.TimeSpan,System.Threading.CancellationToken)
  id: UnprovisionFabricAsync(System.String,System.String,System.TimeSpan,System.Threading.CancellationToken)
  parent: System.Fabric.FabricClient.ClusterManagementClient
  langs:
  - csharp
  - vb
  name: UnprovisionFabricAsync(String, String, TimeSpan, CancellationToken)
  nameWithType: FabricClient.ClusterManagementClient.UnprovisionFabricAsync(String, String, TimeSpan, CancellationToken)
  fullName: System.Fabric.FabricClient.ClusterManagementClient.UnprovisionFabricAsync(System.String, System.String, System.TimeSpan, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ClusterManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: UnprovisionFabricAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ClusterManagementClient.cs
    startLine: 761
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Unprovisions the Service Fabric by using the specified timeout and cancellation token.</p>\n"
  example: []
  syntax:
    content: public Task UnprovisionFabricAsync(string codeVersion, string configVersion, TimeSpan timeout, CancellationToken cancellationToken)
    content.vb: Public Function UnprovisionFabricAsync(codeVersion As String, configVersion As String, timeout As TimeSpan, cancellationToken As CancellationToken) As Task
    parameters:
    - id: codeVersion
      type: System.String
      description: "\n<p>The code version to unprovision.</p>\n"
    - id: configVersion
      type: System.String
      description: "\n<p>The configuration version to unprovision.</p>\n"
    - id: timeout
      type: System.TimeSpan
      description: "\n<p>The maximum amount of time Service Fabric will allow this operation to continue before returning a <xref href=\"System.TimeoutException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The cancellation token that the operation is observing. It can be used to send a notification that the operation should be canceled. Note that cancellation is advisory and that the operation may still be completed even if it is cancelled.</p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>The unprovisioned Service Fabric.</p>\n"
  overload: System.Fabric.FabricClient.ClusterManagementClient.UnprovisionFabricAsync*
  exceptions:
  - type: System.Fabric.FabricObjectClosedException
    commentId: T:System.Fabric.FabricObjectClosedException
    description: "\n<p>The <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object is in a closed state. Dispose of the <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object you are using and instantiate a new <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.ClusterManagementClient.UpgradeFabricAsync(System.Fabric.Description.FabricUpgradeDescription)
  commentId: M:System.Fabric.FabricClient.ClusterManagementClient.UpgradeFabricAsync(System.Fabric.Description.FabricUpgradeDescription)
  id: UpgradeFabricAsync(System.Fabric.Description.FabricUpgradeDescription)
  parent: System.Fabric.FabricClient.ClusterManagementClient
  langs:
  - csharp
  - vb
  name: UpgradeFabricAsync(FabricUpgradeDescription)
  nameWithType: FabricClient.ClusterManagementClient.UpgradeFabricAsync(FabricUpgradeDescription)
  fullName: System.Fabric.FabricClient.ClusterManagementClient.UpgradeFabricAsync(System.Fabric.Description.FabricUpgradeDescription)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ClusterManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: UpgradeFabricAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ClusterManagementClient.cs
    startLine: 779
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Upgrades the Service Fabric.</p>\n"
  example: []
  syntax:
    content: public Task UpgradeFabricAsync(FabricUpgradeDescription upgradeDescription)
    content.vb: Public Function UpgradeFabricAsync(upgradeDescription As FabricUpgradeDescription) As Task
    parameters:
    - id: upgradeDescription
      type: System.Fabric.Description.FabricUpgradeDescription
      description: "\n<p>The description of the upgrade.</p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>The upgraded Service Fabric.</p>\n"
  overload: System.Fabric.FabricClient.ClusterManagementClient.UpgradeFabricAsync*
  exceptions:
  - type: System.Fabric.FabricObjectClosedException
    commentId: T:System.Fabric.FabricObjectClosedException
    description: "\n<p>The <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object is in a closed state. Dispose of the <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object you are using and instantiate a new <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.ClusterManagementClient.UpgradeFabricAsync(System.Fabric.Description.FabricUpgradeDescription,System.TimeSpan,System.Threading.CancellationToken)
  commentId: M:System.Fabric.FabricClient.ClusterManagementClient.UpgradeFabricAsync(System.Fabric.Description.FabricUpgradeDescription,System.TimeSpan,System.Threading.CancellationToken)
  id: UpgradeFabricAsync(System.Fabric.Description.FabricUpgradeDescription,System.TimeSpan,System.Threading.CancellationToken)
  parent: System.Fabric.FabricClient.ClusterManagementClient
  langs:
  - csharp
  - vb
  name: UpgradeFabricAsync(FabricUpgradeDescription, TimeSpan, CancellationToken)
  nameWithType: FabricClient.ClusterManagementClient.UpgradeFabricAsync(FabricUpgradeDescription, TimeSpan, CancellationToken)
  fullName: System.Fabric.FabricClient.ClusterManagementClient.UpgradeFabricAsync(System.Fabric.Description.FabricUpgradeDescription, System.TimeSpan, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ClusterManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: UpgradeFabricAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ClusterManagementClient.cs
    startLine: 802
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Upgrades the Service Fabric by using the specified timeout and cancellation token.</p>\n"
  example: []
  syntax:
    content: public Task UpgradeFabricAsync(FabricUpgradeDescription upgradeDescription, TimeSpan timeout, CancellationToken cancellationToken)
    content.vb: Public Function UpgradeFabricAsync(upgradeDescription As FabricUpgradeDescription, timeout As TimeSpan, cancellationToken As CancellationToken) As Task
    parameters:
    - id: upgradeDescription
      type: System.Fabric.Description.FabricUpgradeDescription
      description: "\n<p>The description of the upgrade.</p>\n"
    - id: timeout
      type: System.TimeSpan
      description: "\n<p>The timespan that defines the maximum amount of time Service Fabric will allow this operation to continue before returning a <xref href=\"System.TimeoutException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The cancellation token that the operation is observing. It can be used to send a notification that the operation should be canceled. Note that cancellation is advisory and that the operation may still be completed even if it is cancelled.</p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>The upgraded Service Fabric.</p>\n"
  overload: System.Fabric.FabricClient.ClusterManagementClient.UpgradeFabricAsync*
  exceptions:
  - type: System.Fabric.FabricObjectClosedException
    commentId: T:System.Fabric.FabricObjectClosedException
    description: "\n<p>The <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object is in a closed state. Dispose of the <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object you are using and instantiate a new <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.ClusterManagementClient.UpdateFabricUpgradeAsync(System.Fabric.Description.FabricUpgradeUpdateDescription)
  commentId: M:System.Fabric.FabricClient.ClusterManagementClient.UpdateFabricUpgradeAsync(System.Fabric.Description.FabricUpgradeUpdateDescription)
  id: UpdateFabricUpgradeAsync(System.Fabric.Description.FabricUpgradeUpdateDescription)
  parent: System.Fabric.FabricClient.ClusterManagementClient
  langs:
  - csharp
  - vb
  name: UpdateFabricUpgradeAsync(FabricUpgradeUpdateDescription)
  nameWithType: FabricClient.ClusterManagementClient.UpdateFabricUpgradeAsync(FabricUpgradeUpdateDescription)
  fullName: System.Fabric.FabricClient.ClusterManagementClient.UpdateFabricUpgradeAsync(System.Fabric.Description.FabricUpgradeUpdateDescription)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ClusterManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: UpdateFabricUpgradeAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ClusterManagementClient.cs
    startLine: 821
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Modifies the upgrade parameters that describe the behavior of the current cluster upgrade.</p>\n"
  remarks: ''
  example: []
  syntax:
    content: public Task UpdateFabricUpgradeAsync(FabricUpgradeUpdateDescription updateDescription)
    content.vb: Public Function UpdateFabricUpgradeAsync(updateDescription As FabricUpgradeUpdateDescription) As Task
    parameters:
    - id: updateDescription
      type: System.Fabric.Description.FabricUpgradeUpdateDescription
      description: "\n<p>Description of the new upgrade parameters to apply.</p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>The current cluster upgrade.</p>\n"
  overload: System.Fabric.FabricClient.ClusterManagementClient.UpdateFabricUpgradeAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.ClusterManagementClient.UpdateFabricUpgradeAsync(System.Fabric.Description.FabricUpgradeUpdateDescription,System.TimeSpan,System.Threading.CancellationToken)
  commentId: M:System.Fabric.FabricClient.ClusterManagementClient.UpdateFabricUpgradeAsync(System.Fabric.Description.FabricUpgradeUpdateDescription,System.TimeSpan,System.Threading.CancellationToken)
  id: UpdateFabricUpgradeAsync(System.Fabric.Description.FabricUpgradeUpdateDescription,System.TimeSpan,System.Threading.CancellationToken)
  parent: System.Fabric.FabricClient.ClusterManagementClient
  langs:
  - csharp
  - vb
  name: UpdateFabricUpgradeAsync(FabricUpgradeUpdateDescription, TimeSpan, CancellationToken)
  nameWithType: FabricClient.ClusterManagementClient.UpdateFabricUpgradeAsync(FabricUpgradeUpdateDescription, TimeSpan, CancellationToken)
  fullName: System.Fabric.FabricClient.ClusterManagementClient.UpdateFabricUpgradeAsync(System.Fabric.Description.FabricUpgradeUpdateDescription, System.TimeSpan, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ClusterManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: UpdateFabricUpgradeAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ClusterManagementClient.cs
    startLine: 841
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Modifies the upgrade parameters that describe the behavior of the current cluster upgrade.</p>\n"
  example: []
  syntax:
    content: public Task UpdateFabricUpgradeAsync(FabricUpgradeUpdateDescription updateDescription, TimeSpan timeout, CancellationToken cancellationToken)
    content.vb: Public Function UpdateFabricUpgradeAsync(updateDescription As FabricUpgradeUpdateDescription, timeout As TimeSpan, cancellationToken As CancellationToken) As Task
    parameters:
    - id: updateDescription
      type: System.Fabric.Description.FabricUpgradeUpdateDescription
      description: "\n<p> The new upgrade parameters to apply.</p>\n"
    - id: timeout
      type: System.TimeSpan
      description: "\n<p>The maximum amount of time Service Fabric will allow this operation to continue before throwing a <xref href=\"System.TimeoutException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The cancellation token that the operation is observing. It can be used to send a notification that the operation should be canceled. Note that cancellation is advisory and that the operation may still be completed even if it is cancelled.</p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>The current cluster upgrade.</p>\n"
  overload: System.Fabric.FabricClient.ClusterManagementClient.UpdateFabricUpgradeAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.ClusterManagementClient.RollbackFabricUpgradeAsync
  commentId: M:System.Fabric.FabricClient.ClusterManagementClient.RollbackFabricUpgradeAsync
  id: RollbackFabricUpgradeAsync
  parent: System.Fabric.FabricClient.ClusterManagementClient
  langs:
  - csharp
  - vb
  name: RollbackFabricUpgradeAsync()
  nameWithType: FabricClient.ClusterManagementClient.RollbackFabricUpgradeAsync()
  fullName: System.Fabric.FabricClient.ClusterManagementClient.RollbackFabricUpgradeAsync()
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ClusterManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: RollbackFabricUpgradeAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ClusterManagementClient.cs
    startLine: 856
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Rolls back the Service Fabric to upgrade the operation.</p>\n"
  example: []
  syntax:
    content: public Task RollbackFabricUpgradeAsync()
    content.vb: Public Function RollbackFabricUpgradeAsync As Task
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>The rollback Service Fabric to upgrade the operation.</p>\n"
  overload: System.Fabric.FabricClient.ClusterManagementClient.RollbackFabricUpgradeAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.ClusterManagementClient.RollbackFabricUpgradeAsync(System.TimeSpan,System.Threading.CancellationToken)
  commentId: M:System.Fabric.FabricClient.ClusterManagementClient.RollbackFabricUpgradeAsync(System.TimeSpan,System.Threading.CancellationToken)
  id: RollbackFabricUpgradeAsync(System.TimeSpan,System.Threading.CancellationToken)
  parent: System.Fabric.FabricClient.ClusterManagementClient
  langs:
  - csharp
  - vb
  name: RollbackFabricUpgradeAsync(TimeSpan, CancellationToken)
  nameWithType: FabricClient.ClusterManagementClient.RollbackFabricUpgradeAsync(TimeSpan, CancellationToken)
  fullName: System.Fabric.FabricClient.ClusterManagementClient.RollbackFabricUpgradeAsync(System.TimeSpan, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ClusterManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: RollbackFabricUpgradeAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ClusterManagementClient.cs
    startLine: 873
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Rolls back the Service Fabric to upgrade the operation.</p>\n"
  example: []
  syntax:
    content: public Task RollbackFabricUpgradeAsync(TimeSpan timeout, CancellationToken cancellationToken)
    content.vb: Public Function RollbackFabricUpgradeAsync(timeout As TimeSpan, cancellationToken As CancellationToken) As Task
    parameters:
    - id: timeout
      type: System.TimeSpan
      description: "\n<p>The timespan that defines the maximum amount of time Service Fabric will allow this operation to continue before returning a timeout exception.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The cancellation token that the operation is observing. It can be used to send a notification that the operation should be canceled. Note that cancellation is advisory and that the operation may still be completed even if it is cancelled.</p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>The rollback Service Fabric to upgrade the operation.</p>\n"
  overload: System.Fabric.FabricClient.ClusterManagementClient.RollbackFabricUpgradeAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.ClusterManagementClient.GetFabricUpgradeProgressAsync
  commentId: M:System.Fabric.FabricClient.ClusterManagementClient.GetFabricUpgradeProgressAsync
  id: GetFabricUpgradeProgressAsync
  parent: System.Fabric.FabricClient.ClusterManagementClient
  langs:
  - csharp
  - vb
  name: GetFabricUpgradeProgressAsync()
  nameWithType: FabricClient.ClusterManagementClient.GetFabricUpgradeProgressAsync()
  fullName: System.Fabric.FabricClient.ClusterManagementClient.GetFabricUpgradeProgressAsync()
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ClusterManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: GetFabricUpgradeProgressAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ClusterManagementClient.cs
    startLine: 888
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Returns the progress of a Service Fabric upgrade process.</p>\n"
  example: []
  syntax:
    content: public Task<FabricUpgradeProgress> GetFabricUpgradeProgressAsync()
    content.vb: Public Function GetFabricUpgradeProgressAsync As Task(Of FabricUpgradeProgress)
    return:
      type: System.Threading.Tasks.Task{System.Fabric.FabricUpgradeProgress}
      description: "\n<p>The progress of a Service Fabric upgrade process.</p>\n"
  overload: System.Fabric.FabricClient.ClusterManagementClient.GetFabricUpgradeProgressAsync*
  exceptions:
  - type: System.Fabric.FabricObjectClosedException
    commentId: T:System.Fabric.FabricObjectClosedException
    description: "\n<p>The <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object is in a closed state. Dispose of the <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object you are using and instantiate a new <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.ClusterManagementClient.GetFabricUpgradeProgressAsync(System.TimeSpan,System.Threading.CancellationToken)
  commentId: M:System.Fabric.FabricClient.ClusterManagementClient.GetFabricUpgradeProgressAsync(System.TimeSpan,System.Threading.CancellationToken)
  id: GetFabricUpgradeProgressAsync(System.TimeSpan,System.Threading.CancellationToken)
  parent: System.Fabric.FabricClient.ClusterManagementClient
  langs:
  - csharp
  - vb
  name: GetFabricUpgradeProgressAsync(TimeSpan, CancellationToken)
  nameWithType: FabricClient.ClusterManagementClient.GetFabricUpgradeProgressAsync(TimeSpan, CancellationToken)
  fullName: System.Fabric.FabricClient.ClusterManagementClient.GetFabricUpgradeProgressAsync(System.TimeSpan, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ClusterManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: GetFabricUpgradeProgressAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ClusterManagementClient.cs
    startLine: 908
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Returns the progress of a Service Fabric upgrade process.</p>\n"
  example: []
  syntax:
    content: public Task<FabricUpgradeProgress> GetFabricUpgradeProgressAsync(TimeSpan timeout, CancellationToken cancellationToken)
    content.vb: Public Function GetFabricUpgradeProgressAsync(timeout As TimeSpan, cancellationToken As CancellationToken) As Task(Of FabricUpgradeProgress)
    parameters:
    - id: timeout
      type: System.TimeSpan
      description: "\n<p>The timespan that defines the maximum amount of time Service Fabric will allow this operation to continue before returning a <xref href=\"System.TimeoutException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The cancellation token that the operation is observing. It can be used to send a notification that the operation should be canceled. Note that cancellation is advisory and that the operation may still be completed even if it is cancelled.</p>\n"
    return:
      type: System.Threading.Tasks.Task{System.Fabric.FabricUpgradeProgress}
      description: "\n<p>The progress of a Service Fabric upgrade process.</p>\n"
  overload: System.Fabric.FabricClient.ClusterManagementClient.GetFabricUpgradeProgressAsync*
  exceptions:
  - type: System.Fabric.FabricObjectClosedException
    commentId: T:System.Fabric.FabricObjectClosedException
    description: "\n<p>The <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object is in a closed state. Dispose of the <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object you are using and instantiate a new <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.ClusterManagementClient.MoveNextFabricUpgradeDomainAsync(System.Fabric.FabricUpgradeProgress)
  commentId: M:System.Fabric.FabricClient.ClusterManagementClient.MoveNextFabricUpgradeDomainAsync(System.Fabric.FabricUpgradeProgress)
  id: MoveNextFabricUpgradeDomainAsync(System.Fabric.FabricUpgradeProgress)
  parent: System.Fabric.FabricClient.ClusterManagementClient
  langs:
  - csharp
  - vb
  name: MoveNextFabricUpgradeDomainAsync(FabricUpgradeProgress)
  nameWithType: FabricClient.ClusterManagementClient.MoveNextFabricUpgradeDomainAsync(FabricUpgradeProgress)
  fullName: System.Fabric.FabricClient.ClusterManagementClient.MoveNextFabricUpgradeDomainAsync(System.Fabric.FabricUpgradeProgress)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ClusterManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: MoveNextFabricUpgradeDomainAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ClusterManagementClient.cs
    startLine: 929
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Instructs the Service Fabric to upgrade the next upgrade domain in the cluster if the current upgrade domain has been completed.</p>\n"
  remarks: "\n<p>Similar to <xref href=\"System.Fabric.FabricClient.ApplicationManagementClient.MoveNextApplicationUpgradeDomainAsync(System.Fabric.ApplicationUpgradeProgress)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example: []
  syntax:
    content: public Task MoveNextFabricUpgradeDomainAsync(FabricUpgradeProgress upgradeProgress)
    content.vb: Public Function MoveNextFabricUpgradeDomainAsync(upgradeProgress As FabricUpgradeProgress) As Task
    parameters:
    - id: upgradeProgress
      type: System.Fabric.FabricUpgradeProgress
      description: "\n<p>The fabric upgrade process object to use.</p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>The upgraded domain in the cluster.</p>\n"
  overload: System.Fabric.FabricClient.ClusterManagementClient.MoveNextFabricUpgradeDomainAsync*
  exceptions:
  - type: System.Fabric.FabricObjectClosedException
    commentId: T:System.Fabric.FabricObjectClosedException
    description: "\n<p>The <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object is in a closed state. Dispose of the <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object you are using and instantiate a new <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.ClusterManagementClient.MoveNextFabricUpgradeDomainAsync(System.Fabric.FabricUpgradeProgress,System.TimeSpan,System.Threading.CancellationToken)
  commentId: M:System.Fabric.FabricClient.ClusterManagementClient.MoveNextFabricUpgradeDomainAsync(System.Fabric.FabricUpgradeProgress,System.TimeSpan,System.Threading.CancellationToken)
  id: MoveNextFabricUpgradeDomainAsync(System.Fabric.FabricUpgradeProgress,System.TimeSpan,System.Threading.CancellationToken)
  parent: System.Fabric.FabricClient.ClusterManagementClient
  langs:
  - csharp
  - vb
  name: MoveNextFabricUpgradeDomainAsync(FabricUpgradeProgress, TimeSpan, CancellationToken)
  nameWithType: FabricClient.ClusterManagementClient.MoveNextFabricUpgradeDomainAsync(FabricUpgradeProgress, TimeSpan, CancellationToken)
  fullName: System.Fabric.FabricClient.ClusterManagementClient.MoveNextFabricUpgradeDomainAsync(System.Fabric.FabricUpgradeProgress, System.TimeSpan, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ClusterManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: MoveNextFabricUpgradeDomainAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ClusterManagementClient.cs
    startLine: 955
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Instructs Service Fabric to upgrade the next upgrade domain in the cluster if the current upgrade domain has been completed, by using the specified timeout and cancellation token.</p>\n"
  remarks: "\n<p>Similar to <xref href=\"System.Fabric.FabricClient.ApplicationManagementClient.MoveNextApplicationUpgradeDomainAsync(System.Fabric.ApplicationUpgradeProgress%2cSystem.TimeSpan%2cSystem.Threading.CancellationToken)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example: []
  syntax:
    content: public Task MoveNextFabricUpgradeDomainAsync(FabricUpgradeProgress upgradeProgress, TimeSpan timeout, CancellationToken cancellationToken)
    content.vb: Public Function MoveNextFabricUpgradeDomainAsync(upgradeProgress As FabricUpgradeProgress, timeout As TimeSpan, cancellationToken As CancellationToken) As Task
    parameters:
    - id: upgradeProgress
      type: System.Fabric.FabricUpgradeProgress
      description: "\n<p>The fabric upgrade process object to use.</p>\n"
    - id: timeout
      type: System.TimeSpan
      description: "\n<p>The maximum amount of time Service Fabric will allow this operation to continue before returning a <xref href=\"System.TimeoutException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The cancellation token that the operation is observing. It can be used to send a notification that the operation should be canceled. Note that cancellation is advisory and that the operation may still be completed even if it is cancelled.</p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>The upgraded domain in the cluster.</p>\n"
  overload: System.Fabric.FabricClient.ClusterManagementClient.MoveNextFabricUpgradeDomainAsync*
  exceptions:
  - type: System.Fabric.FabricObjectClosedException
    commentId: T:System.Fabric.FabricObjectClosedException
    description: "\n<p>The <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object is in a closed state. Dispose of the <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object you are using and instantiate a new <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.ClusterManagementClient.GetClusterManifestAsync
  commentId: M:System.Fabric.FabricClient.ClusterManagementClient.GetClusterManifestAsync
  id: GetClusterManifestAsync
  parent: System.Fabric.FabricClient.ClusterManagementClient
  langs:
  - csharp
  - vb
  name: GetClusterManifestAsync()
  nameWithType: FabricClient.ClusterManagementClient.GetClusterManifestAsync()
  fullName: System.Fabric.FabricClient.ClusterManagementClient.GetClusterManifestAsync()
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ClusterManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: GetClusterManifestAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ClusterManagementClient.cs
    startLine: 985
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Gets the Service Fabric cluster manifest XML file as a string.</p>\n"
  example: []
  syntax:
    content: public Task<string> GetClusterManifestAsync()
    content.vb: Public Function GetClusterManifestAsync As Task(Of String)
    return:
      type: System.Threading.Tasks.Task{System.String}
      description: "\n<p>The Service Fabric cluster manifest XML file as a string.</p>\n"
  overload: System.Fabric.FabricClient.ClusterManagementClient.GetClusterManifestAsync*
  exceptions:
  - type: System.Fabric.FabricObjectClosedException
    commentId: T:System.Fabric.FabricObjectClosedException
    description: "\n<p>The <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object is in a closed state. Dispose of the <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object you are using and instantiate a new <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.ClusterManagementClient.GetClusterManifestAsync(System.TimeSpan,System.Threading.CancellationToken)
  commentId: M:System.Fabric.FabricClient.ClusterManagementClient.GetClusterManifestAsync(System.TimeSpan,System.Threading.CancellationToken)
  id: GetClusterManifestAsync(System.TimeSpan,System.Threading.CancellationToken)
  parent: System.Fabric.FabricClient.ClusterManagementClient
  langs:
  - csharp
  - vb
  name: GetClusterManifestAsync(TimeSpan, CancellationToken)
  nameWithType: FabricClient.ClusterManagementClient.GetClusterManifestAsync(TimeSpan, CancellationToken)
  fullName: System.Fabric.FabricClient.ClusterManagementClient.GetClusterManifestAsync(System.TimeSpan, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ClusterManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: GetClusterManifestAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ClusterManagementClient.cs
    startLine: 1007
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Gets the Service Fabric cluster manifest XML file as a string, by using the specified timeout and cancellation token.</p>\n"
  example: []
  syntax:
    content: public Task<string> GetClusterManifestAsync(TimeSpan timeout, CancellationToken cancellationToken)
    content.vb: Public Function GetClusterManifestAsync(timeout As TimeSpan, cancellationToken As CancellationToken) As Task(Of String)
    parameters:
    - id: timeout
      type: System.TimeSpan
      description: "\n<p>The timespan that defines the maximum amount of time Service Fabric will allow this operation to continue before returning a <xref href=\"System.TimeoutException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The cancellation token that the operation is observing. It can be used to send a notification that the operation should be canceled. \nNote that cancellation is advisory and that the operation may still be completed even if it is canceled.</p>\n"
    return:
      type: System.Threading.Tasks.Task{System.String}
      description: "\n<p>The Service Fabric cluster manifest XML file as a string, by using the specified timeout and cancellation token.</p>\n"
  overload: System.Fabric.FabricClient.ClusterManagementClient.GetClusterManifestAsync*
  exceptions:
  - type: System.Fabric.FabricObjectClosedException
    commentId: T:System.Fabric.FabricObjectClosedException
    description: "\n<p>The <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object is in a closed state. Dispose of the <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object you are using \nand instantiate a new <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.ClusterManagementClient.CopyClusterPackage(System.String,System.String,System.String,System.String,System.String)
  commentId: M:System.Fabric.FabricClient.ClusterManagementClient.CopyClusterPackage(System.String,System.String,System.String,System.String,System.String)
  id: CopyClusterPackage(System.String,System.String,System.String,System.String,System.String)
  parent: System.Fabric.FabricClient.ClusterManagementClient
  langs:
  - csharp
  - vb
  name: CopyClusterPackage(String, String, String, String, String)
  nameWithType: FabricClient.ClusterManagementClient.CopyClusterPackage(String, String, String, String, String)
  fullName: System.Fabric.FabricClient.ClusterManagementClient.CopyClusterPackage(System.String, System.String, System.String, System.String, System.String)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ClusterManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: CopyClusterPackage
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ClusterManagementClient.cs
    startLine: 1079
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Copies the cluster manifest file and/or Service Fabric MSI file to the image store.</p>\n"
  remarks: "\n<p>Both source cluster manifest path and source code path cannot be null.</p>\n"
  example: []
  syntax:
    content: public void CopyClusterPackage(string imageStoreConnectionString, string clusterManifestPath, string clusterManifestPathInImageStore, string codePackagePath, string codePackagePathInImageStore)
    content.vb: Public Sub CopyClusterPackage(imageStoreConnectionString As String, clusterManifestPath As String, clusterManifestPathInImageStore As String, codePackagePath As String, codePackagePathInImageStore As String)
    parameters:
    - id: imageStoreConnectionString
      type: System.String
      description: "\n<p>The connection string of the image store as specified in the cluster manifest.</p>\n"
    - id: clusterManifestPath
      type: System.String
      description: "\n<p>The full path to the cluster manifest file to be copied.</p>\n"
    - id: clusterManifestPathInImageStore
      type: System.String
      description: "\n<p>The relative path along with the file name of the destination in the image store. This parameter is required when source cluster manifest path is specified.</p>\n"
    - id: codePackagePath
      type: System.String
      description: "\n<p>The full path to the Service Fabric MSI file to be copied.</p>\n"
    - id: codePackagePathInImageStore
      type: System.String
      description: "\n<p>The relative path along with the file name of the destination in the image store. This parameter is required when destination code relative path is specified.</p>\n"
  overload: System.Fabric.FabricClient.ClusterManagementClient.CopyClusterPackage*
  exceptions:
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>There was an error accessing a file on the image store.</p>\n"
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "\n<p>A required file was not found on the image store.</p>\n"
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "\n<p>A required directory was not found on the image store.</p>\n"
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "\n<p>A path to an image store file/directory was too long.</p>\n"
  - type: System.Fabric.FabricException
    commentId: T:System.Fabric.FabricException
    description: "\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.ImageStoreIOException\" data-throw-if-not-resolved=\"false\"></xref>: There was an IO error communicating with the image store.</p>\n"
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: "\n<p>The request timed out but may have already been accepted for processing by the system.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.ClusterManagementClient.RemoveClusterPackage(System.String,System.String,System.String)
  commentId: M:System.Fabric.FabricClient.ClusterManagementClient.RemoveClusterPackage(System.String,System.String,System.String)
  id: RemoveClusterPackage(System.String,System.String,System.String)
  parent: System.Fabric.FabricClient.ClusterManagementClient
  langs:
  - csharp
  - vb
  name: RemoveClusterPackage(String, String, String)
  nameWithType: FabricClient.ClusterManagementClient.RemoveClusterPackage(String, String, String)
  fullName: System.Fabric.FabricClient.ClusterManagementClient.RemoveClusterPackage(System.String, System.String, System.String)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ClusterManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: RemoveClusterPackage
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ClusterManagementClient.cs
    startLine: 1141
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Deletes the ClusterManifest file and/or Service Fabric MSI file from the ImageStore.</p>\n"
  remarks: "\n<p>Either clusterManifestRelativePath or codeRelativePath parameter can be <strong>null</strong>. However, both of them cannot be <strong>null</strong>.</p>\n"
  example: []
  syntax:
    content: public void RemoveClusterPackage(string imageStoreConnectionString, string clusterManifestPathInImageStore, string codePackagePathInImageStore)
    content.vb: Public Sub RemoveClusterPackage(imageStoreConnectionString As String, clusterManifestPathInImageStore As String, codePackagePathInImageStore As String)
    parameters:
    - id: imageStoreConnectionString
      type: System.String
      description: "\n<p>The connection string for the ImageStore as specified in the Cluster Manifest.</p>\n"
    - id: clusterManifestPathInImageStore
      type: System.String
      description: "\n<p>The relative path of ClusterManifest file in the ImageStore.</p>\n"
    - id: codePackagePathInImageStore
      type: System.String
      description: "\n<p>The relative path of Service Fabric MSI file in the ImageStore.</p>\n"
  overload: System.Fabric.FabricClient.ClusterManagementClient.RemoveClusterPackage*
  exceptions:
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>There was an error accessing a file on the ImageStore.</p>\n"
  - type: System.Fabric.FabricException
    commentId: T:System.Fabric.FabricException
    description: "\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.ImageStoreIOException\" data-throw-if-not-resolved=\"false\"></xref>: There was an IO error communicating with the ImageStore.</p>\n"
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: "\n<p>The request timed out but may have already been accepted for processing by the system.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.ClusterManagementClient.UpgradeConfigurationAsync(System.Fabric.Description.ConfigurationUpgradeDescription)
  commentId: M:System.Fabric.FabricClient.ClusterManagementClient.UpgradeConfigurationAsync(System.Fabric.Description.ConfigurationUpgradeDescription)
  id: UpgradeConfigurationAsync(System.Fabric.Description.ConfigurationUpgradeDescription)
  parent: System.Fabric.FabricClient.ClusterManagementClient
  langs:
  - csharp
  - vb
  name: UpgradeConfigurationAsync(ConfigurationUpgradeDescription)
  nameWithType: FabricClient.ClusterManagementClient.UpgradeConfigurationAsync(ConfigurationUpgradeDescription)
  fullName: System.Fabric.FabricClient.ClusterManagementClient.UpgradeConfigurationAsync(System.Fabric.Description.ConfigurationUpgradeDescription)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ClusterManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: UpgradeConfigurationAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ClusterManagementClient.cs
    startLine: 1177
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\nInitiate an Upgrade using a cluster configuration file.\n"
  example: []
  syntax:
    content: public Task UpgradeConfigurationAsync(ConfigurationUpgradeDescription description)
    content.vb: Public Function UpgradeConfigurationAsync(description As ConfigurationUpgradeDescription) As Task
    parameters:
    - id: description
      type: System.Fabric.Description.ConfigurationUpgradeDescription
      description: >
        Contains:

        ClusterConfig, HealthCheckRetryTimeout, HealthCheckWaitDuration,

        HealthCheckStableDuration, UpgradeDomainTimeout, UpgradeTimeout,

        MaxPercentUnhealthyApplications, MaxPercentUnhealthyNodes, MaxPercentDeltaUnhealthyNodes,

        MaxPercentUpgradeDomainDeltaUnhealthyNodes
    return:
      type: System.Threading.Tasks.Task
      description: Task
  overload: System.Fabric.FabricClient.ClusterManagementClient.UpgradeConfigurationAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.ClusterManagementClient.UpgradeConfigurationAsync(System.Fabric.Description.ConfigurationUpgradeDescription,System.TimeSpan)
  commentId: M:System.Fabric.FabricClient.ClusterManagementClient.UpgradeConfigurationAsync(System.Fabric.Description.ConfigurationUpgradeDescription,System.TimeSpan)
  id: UpgradeConfigurationAsync(System.Fabric.Description.ConfigurationUpgradeDescription,System.TimeSpan)
  parent: System.Fabric.FabricClient.ClusterManagementClient
  langs:
  - csharp
  - vb
  name: UpgradeConfigurationAsync(ConfigurationUpgradeDescription, TimeSpan)
  nameWithType: FabricClient.ClusterManagementClient.UpgradeConfigurationAsync(ConfigurationUpgradeDescription, TimeSpan)
  fullName: System.Fabric.FabricClient.ClusterManagementClient.UpgradeConfigurationAsync(System.Fabric.Description.ConfigurationUpgradeDescription, System.TimeSpan)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ClusterManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: UpgradeConfigurationAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ClusterManagementClient.cs
    startLine: 1199
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\nInitiate an Upgrade using a cluster configuration file.\n"
  example: []
  syntax:
    content: public Task UpgradeConfigurationAsync(ConfigurationUpgradeDescription description, TimeSpan timeout)
    content.vb: Public Function UpgradeConfigurationAsync(description As ConfigurationUpgradeDescription, timeout As TimeSpan) As Task
    parameters:
    - id: description
      type: System.Fabric.Description.ConfigurationUpgradeDescription
      description: >-
        Contains:

        ClusterConfig, HealthCheckRetryTimeout, HealthCheckWaitDuration,

        HealthCheckStableDuration, UpgradeDomainTimeout, UpgradeTimeout,

        MaxPercentUnhealthyApplications, MaxPercentUnhealthyNodes, MaxPercentDeltaUnhealthyNodes,

        MaxPercentUpgradeDomainDeltaUnhealthyNodes
    - id: timeout
      type: System.TimeSpan
      description: "\n<p>The timespan that defines the maximum amount of time Service Fabric will allow this operation to continue before returning a <xref href=\"System.TimeoutException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: Task
  overload: System.Fabric.FabricClient.ClusterManagementClient.UpgradeConfigurationAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.ClusterManagementClient.UpgradeConfigurationAsync(System.Fabric.Description.ConfigurationUpgradeDescription,System.Threading.CancellationToken)
  commentId: M:System.Fabric.FabricClient.ClusterManagementClient.UpgradeConfigurationAsync(System.Fabric.Description.ConfigurationUpgradeDescription,System.Threading.CancellationToken)
  id: UpgradeConfigurationAsync(System.Fabric.Description.ConfigurationUpgradeDescription,System.Threading.CancellationToken)
  parent: System.Fabric.FabricClient.ClusterManagementClient
  langs:
  - csharp
  - vb
  name: UpgradeConfigurationAsync(ConfigurationUpgradeDescription, CancellationToken)
  nameWithType: FabricClient.ClusterManagementClient.UpgradeConfigurationAsync(ConfigurationUpgradeDescription, CancellationToken)
  fullName: System.Fabric.FabricClient.ClusterManagementClient.UpgradeConfigurationAsync(System.Fabric.Description.ConfigurationUpgradeDescription, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ClusterManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: UpgradeConfigurationAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ClusterManagementClient.cs
    startLine: 1224
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\nInitiate an Upgrade using a cluster configuration file.\n"
  example: []
  syntax:
    content: public Task UpgradeConfigurationAsync(ConfigurationUpgradeDescription description, CancellationToken cancellationToken)
    content.vb: Public Function UpgradeConfigurationAsync(description As ConfigurationUpgradeDescription, cancellationToken As CancellationToken) As Task
    parameters:
    - id: description
      type: System.Fabric.Description.ConfigurationUpgradeDescription
      description: >-
        Contains:

        ClusterConfigPath, HealthCheckRetryTimeout, HealthCheckWaitDuration,

        HealthCheckStableDuration, UpgradeDomainTimeout, UpgradeTimeout,

        MaxPercentUnhealthyApplications, MaxPercentUnhealthyNodes, MaxPercentDeltaUnhealthyNodes,

        MaxPercentUpgradeDomainDeltaUnhealthyNodes
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The cancellation token that the operation is observing. It can be used to send a notification that the operation should be canceled. \nNote that cancellation is advisory and that the operation may still be completed even if it is canceled.</p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: Task
  overload: System.Fabric.FabricClient.ClusterManagementClient.UpgradeConfigurationAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.ClusterManagementClient.UpgradeConfigurationAsync(System.Fabric.Description.ConfigurationUpgradeDescription,System.TimeSpan,System.Threading.CancellationToken)
  commentId: M:System.Fabric.FabricClient.ClusterManagementClient.UpgradeConfigurationAsync(System.Fabric.Description.ConfigurationUpgradeDescription,System.TimeSpan,System.Threading.CancellationToken)
  id: UpgradeConfigurationAsync(System.Fabric.Description.ConfigurationUpgradeDescription,System.TimeSpan,System.Threading.CancellationToken)
  parent: System.Fabric.FabricClient.ClusterManagementClient
  langs:
  - csharp
  - vb
  name: UpgradeConfigurationAsync(ConfigurationUpgradeDescription, TimeSpan, CancellationToken)
  nameWithType: FabricClient.ClusterManagementClient.UpgradeConfigurationAsync(ConfigurationUpgradeDescription, TimeSpan, CancellationToken)
  fullName: System.Fabric.FabricClient.ClusterManagementClient.UpgradeConfigurationAsync(System.Fabric.Description.ConfigurationUpgradeDescription, System.TimeSpan, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ClusterManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: UpgradeConfigurationAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ClusterManagementClient.cs
    startLine: 1252
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\nInitiate an Upgrade using a cluster configuration file.\n"
  example: []
  syntax:
    content: public Task UpgradeConfigurationAsync(ConfigurationUpgradeDescription description, TimeSpan timeout, CancellationToken cancellationToken)
    content.vb: Public Function UpgradeConfigurationAsync(description As ConfigurationUpgradeDescription, timeout As TimeSpan, cancellationToken As CancellationToken) As Task
    parameters:
    - id: description
      type: System.Fabric.Description.ConfigurationUpgradeDescription
      description: >-
        Contains:

        ClusterConfig, HealthCheckRetryTimeout, HealthCheckWaitDuration,

        HealthCheckStableDuration, UpgradeDomainTimeout, UpgradeTimeout,

        MaxPercentUnhealthyApplications, MaxPercentUnhealthyNodes, MaxPercentDeltaUnhealthyNodes,

        MaxPercentUpgradeDomainDeltaUnhealthyNodes
    - id: timeout
      type: System.TimeSpan
      description: "\n<p>The timespan that defines the maximum amount of time Service Fabric will allow this operation to continue before returning a <xref href=\"System.TimeoutException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The cancellation token that the operation is observing. It can be used to send a notification that the operation should be canceled. \nNote that cancellation is advisory and that the operation may still be completed even if it is canceled.</p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: Task
  overload: System.Fabric.FabricClient.ClusterManagementClient.UpgradeConfigurationAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.ClusterManagementClient.GetClusterConfigurationUpgradeStatusAsync
  commentId: M:System.Fabric.FabricClient.ClusterManagementClient.GetClusterConfigurationUpgradeStatusAsync
  id: GetClusterConfigurationUpgradeStatusAsync
  parent: System.Fabric.FabricClient.ClusterManagementClient
  langs:
  - csharp
  - vb
  name: GetClusterConfigurationUpgradeStatusAsync()
  nameWithType: FabricClient.ClusterManagementClient.GetClusterConfigurationUpgradeStatusAsync()
  fullName: System.Fabric.FabricClient.ClusterManagementClient.GetClusterConfigurationUpgradeStatusAsync()
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ClusterManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: GetClusterConfigurationUpgradeStatusAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ClusterManagementClient.cs
    startLine: 1273
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\nObtains the status of an upgrade in progress.\n"
  example: []
  syntax:
    content: public Task<FabricOrchestrationUpgradeProgress> GetClusterConfigurationUpgradeStatusAsync()
    content.vb: Public Function GetClusterConfigurationUpgradeStatusAsync As Task(Of FabricOrchestrationUpgradeProgress)
    return:
      type: System.Threading.Tasks.Task{System.Fabric.FabricOrchestrationUpgradeProgress}
      description: FabricOrchestrationUpgradeProgress
  overload: System.Fabric.FabricClient.ClusterManagementClient.GetClusterConfigurationUpgradeStatusAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.ClusterManagementClient.GetClusterConfigurationUpgradeStatusAsync(System.TimeSpan)
  commentId: M:System.Fabric.FabricClient.ClusterManagementClient.GetClusterConfigurationUpgradeStatusAsync(System.TimeSpan)
  id: GetClusterConfigurationUpgradeStatusAsync(System.TimeSpan)
  parent: System.Fabric.FabricClient.ClusterManagementClient
  langs:
  - csharp
  - vb
  name: GetClusterConfigurationUpgradeStatusAsync(TimeSpan)
  nameWithType: FabricClient.ClusterManagementClient.GetClusterConfigurationUpgradeStatusAsync(TimeSpan)
  fullName: System.Fabric.FabricClient.ClusterManagementClient.GetClusterConfigurationUpgradeStatusAsync(System.TimeSpan)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ClusterManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: GetClusterConfigurationUpgradeStatusAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ClusterManagementClient.cs
    startLine: 1287
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\nObtains the status of an upgrade in progress.\n"
  example: []
  syntax:
    content: public Task<FabricOrchestrationUpgradeProgress> GetClusterConfigurationUpgradeStatusAsync(TimeSpan timeout)
    content.vb: Public Function GetClusterConfigurationUpgradeStatusAsync(timeout As TimeSpan) As Task(Of FabricOrchestrationUpgradeProgress)
    parameters:
    - id: timeout
      type: System.TimeSpan
      description: "\n<p>The timespan that defines the maximum amount of time Service Fabric will allow this operation to continue before returning a <xref href=\"System.TimeoutException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    return:
      type: System.Threading.Tasks.Task{System.Fabric.FabricOrchestrationUpgradeProgress}
      description: FabricOrchestrationUpgradeProgress
  overload: System.Fabric.FabricClient.ClusterManagementClient.GetClusterConfigurationUpgradeStatusAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.ClusterManagementClient.GetClusterConfigurationUpgradeStatusAsync(System.Threading.CancellationToken)
  commentId: M:System.Fabric.FabricClient.ClusterManagementClient.GetClusterConfigurationUpgradeStatusAsync(System.Threading.CancellationToken)
  id: GetClusterConfigurationUpgradeStatusAsync(System.Threading.CancellationToken)
  parent: System.Fabric.FabricClient.ClusterManagementClient
  langs:
  - csharp
  - vb
  name: GetClusterConfigurationUpgradeStatusAsync(CancellationToken)
  nameWithType: FabricClient.ClusterManagementClient.GetClusterConfigurationUpgradeStatusAsync(CancellationToken)
  fullName: System.Fabric.FabricClient.ClusterManagementClient.GetClusterConfigurationUpgradeStatusAsync(System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ClusterManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: GetClusterConfigurationUpgradeStatusAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ClusterManagementClient.cs
    startLine: 1300
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\nObtains the status of an upgrade in progress.\n"
  example: []
  syntax:
    content: public Task<FabricOrchestrationUpgradeProgress> GetClusterConfigurationUpgradeStatusAsync(CancellationToken cancellationToken)
    content.vb: Public Function GetClusterConfigurationUpgradeStatusAsync(cancellationToken As CancellationToken) As Task(Of FabricOrchestrationUpgradeProgress)
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: ''
    return:
      type: System.Threading.Tasks.Task{System.Fabric.FabricOrchestrationUpgradeProgress}
      description: FabricOrchestrationUpgradeProgress
  overload: System.Fabric.FabricClient.ClusterManagementClient.GetClusterConfigurationUpgradeStatusAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.ClusterManagementClient.GetClusterConfigurationUpgradeStatusAsync(System.TimeSpan,System.Threading.CancellationToken)
  commentId: M:System.Fabric.FabricClient.ClusterManagementClient.GetClusterConfigurationUpgradeStatusAsync(System.TimeSpan,System.Threading.CancellationToken)
  id: GetClusterConfigurationUpgradeStatusAsync(System.TimeSpan,System.Threading.CancellationToken)
  parent: System.Fabric.FabricClient.ClusterManagementClient
  langs:
  - csharp
  - vb
  name: GetClusterConfigurationUpgradeStatusAsync(TimeSpan, CancellationToken)
  nameWithType: FabricClient.ClusterManagementClient.GetClusterConfigurationUpgradeStatusAsync(TimeSpan, CancellationToken)
  fullName: System.Fabric.FabricClient.ClusterManagementClient.GetClusterConfigurationUpgradeStatusAsync(System.TimeSpan, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ClusterManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: GetClusterConfigurationUpgradeStatusAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ClusterManagementClient.cs
    startLine: 1319
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\nObtains the status of an upgrade in progress.\n"
  example: []
  syntax:
    content: public Task<FabricOrchestrationUpgradeProgress> GetClusterConfigurationUpgradeStatusAsync(TimeSpan timeout, CancellationToken cancellationToken)
    content.vb: Public Function GetClusterConfigurationUpgradeStatusAsync(timeout As TimeSpan, cancellationToken As CancellationToken) As Task(Of FabricOrchestrationUpgradeProgress)
    parameters:
    - id: timeout
      type: System.TimeSpan
      description: "\n<p>The timespan that defines the maximum amount of time Service Fabric will allow this operation to continue before returning a <xref href=\"System.TimeoutException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The cancellation token that the operation is observing. It can be used to send a notification that the operation should be canceled. \nNote that cancellation is advisory and that the operation may still be completed even if it is canceled.</p>\n"
    return:
      type: System.Threading.Tasks.Task{System.Fabric.FabricOrchestrationUpgradeProgress}
      description: FabricOrchestrationUpgradeProgress
  overload: System.Fabric.FabricClient.ClusterManagementClient.GetClusterConfigurationUpgradeStatusAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.ClusterManagementClient.GetClusterConfigurationAsync
  commentId: M:System.Fabric.FabricClient.ClusterManagementClient.GetClusterConfigurationAsync
  id: GetClusterConfigurationAsync
  parent: System.Fabric.FabricClient.ClusterManagementClient
  langs:
  - csharp
  - vb
  name: GetClusterConfigurationAsync()
  nameWithType: FabricClient.ClusterManagementClient.GetClusterConfigurationAsync()
  fullName: System.Fabric.FabricClient.ClusterManagementClient.GetClusterConfigurationAsync()
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ClusterManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: GetClusterConfigurationAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ClusterManagementClient.cs
    startLine: 1339
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Gets the Service Fabric cluster configuration file as a string.</p>\n"
  example: []
  syntax:
    content: public Task<string> GetClusterConfigurationAsync()
    content.vb: Public Function GetClusterConfigurationAsync As Task(Of String)
    return:
      type: System.Threading.Tasks.Task{System.String}
      description: "\n<p>The Service Fabric cluster configuration file as a string.</p>\n"
  overload: System.Fabric.FabricClient.ClusterManagementClient.GetClusterConfigurationAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.ClusterManagementClient.GetClusterConfigurationAsync(System.TimeSpan,System.Threading.CancellationToken)
  commentId: M:System.Fabric.FabricClient.ClusterManagementClient.GetClusterConfigurationAsync(System.TimeSpan,System.Threading.CancellationToken)
  id: GetClusterConfigurationAsync(System.TimeSpan,System.Threading.CancellationToken)
  parent: System.Fabric.FabricClient.ClusterManagementClient
  langs:
  - csharp
  - vb
  name: GetClusterConfigurationAsync(TimeSpan, CancellationToken)
  nameWithType: FabricClient.ClusterManagementClient.GetClusterConfigurationAsync(TimeSpan, CancellationToken)
  fullName: System.Fabric.FabricClient.ClusterManagementClient.GetClusterConfigurationAsync(System.TimeSpan, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ClusterManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: GetClusterConfigurationAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ClusterManagementClient.cs
    startLine: 1357
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Gets the Service Fabric cluster configuration file as a string, by using the specified timeout and cancellation token.</p>\n"
  example: []
  syntax:
    content: public Task<string> GetClusterConfigurationAsync(TimeSpan timeout, CancellationToken cancellationToken)
    content.vb: Public Function GetClusterConfigurationAsync(timeout As TimeSpan, cancellationToken As CancellationToken) As Task(Of String)
    parameters:
    - id: timeout
      type: System.TimeSpan
      description: "\n<p>The timespan that defines the maximum amount of time Service Fabric will allow this operation to continue before returning a <xref href=\"System.TimeoutException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The cancellation token that the operation is observing. It can be used to send a notification that the operation should be canceled. \nNote that cancellation is advisory and that the operation may still be completed even if it is canceled.</p>\n"
    return:
      type: System.Threading.Tasks.Task{System.String}
      description: "\n<p>The Service Fabric cluster configuration file as a string, by using the specified timeout and cancellation token.</p>\n"
  overload: System.Fabric.FabricClient.ClusterManagementClient.GetClusterConfigurationAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: System.Fabric.FabricClient.ClusterManagementClient
  commentId: T:System.Fabric.FabricClient.ClusterManagementClient
  parent: System.Fabric
  isExternal: false
  name: FabricClient.ClusterManagementClient
  nameWithType: FabricClient.ClusterManagementClient
  fullName: System.Fabric.FabricClient.ClusterManagementClient
- uid: System.Fabric
  commentId: N:System.Fabric
  isExternal: false
  name: System.Fabric
  nameWithType: System.Fabric
  fullName: System.Fabric
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.FabricClient.ClusterManagementClient.System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
  commentId: M:System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  parent: System.Fabric.Messaging.Stream.ByteArraySerializer
  definition: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  name: Serialize<FabricClient.ClusterManagementClient>()
  nameWithType: ByteArraySerializer.Serialize<FabricClient.ClusterManagementClient>()
  fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<System.Fabric.FabricClient.ClusterManagementClient>()
  nameWithType.vb: ByteArraySerializer.Serialize(Of FabricClient.ClusterManagementClient)()
  fullname.vb: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of System.Fabric.FabricClient.ClusterManagementClient)()
  name.vb: Serialize(Of FabricClient.ClusterManagementClient)()
  spec.csharp:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
    name: Serialize<FabricClient.ClusterManagementClient>
    nameWithType: ByteArraySerializer.Serialize<FabricClient.ClusterManagementClient>
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<System.Fabric.FabricClient.ClusterManagementClient>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
    name: Serialize(Of FabricClient.ClusterManagementClient)
    nameWithType: ByteArraySerializer.Serialize(Of FabricClient.ClusterManagementClient)
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of System.Fabric.FabricClient.ClusterManagementClient)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  commentId: M:System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  isExternal: false
  name: Serialize<T>(T)
  nameWithType: ByteArraySerializer.Serialize<T>(T)
  fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<T>(T)
  nameWithType.vb: ByteArraySerializer.Serialize(Of T)(T)
  fullname.vb: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of T)(T)
  name.vb: Serialize(Of T)(T)
  spec.csharp:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
    name: Serialize<T>
    nameWithType: ByteArraySerializer.Serialize<T>
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
    name: Serialize(Of T)
    nameWithType: ByteArraySerializer.Serialize(Of T)
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.Messaging.Stream.ByteArraySerializer
  commentId: T:System.Fabric.Messaging.Stream.ByteArraySerializer
  parent: System.Fabric.Messaging.Stream
  isExternal: false
  name: ByteArraySerializer
  nameWithType: ByteArraySerializer
  fullName: System.Fabric.Messaging.Stream.ByteArraySerializer
- uid: System.Fabric.Messaging.Stream
  commentId: N:System.Fabric.Messaging.Stream
  isExternal: false
  name: System.Fabric.Messaging.Stream
  nameWithType: System.Fabric.Messaging.Stream
  fullName: System.Fabric.Messaging.Stream
- uid: System.Fabric.NodeDeactivationIntent
  commentId: T:System.Fabric.NodeDeactivationIntent
  parent: System.Fabric
  isExternal: false
  name: NodeDeactivationIntent
  nameWithType: NodeDeactivationIntent
  fullName: System.Fabric.NodeDeactivationIntent
- uid: System.Fabric.FabricClient.QueryClient.GetNodeListAsync
  commentId: M:System.Fabric.FabricClient.QueryClient.GetNodeListAsync
- uid: System.Fabric.NodeDeactivationIntent.Pause
  commentId: F:System.Fabric.NodeDeactivationIntent.Pause
- uid: System.Fabric.NodeDeactivationIntent.Restart
  commentId: F:System.Fabric.NodeDeactivationIntent.Restart
- uid: System.Fabric.FabricClient.ClusterManagementClient.ActivateNodeAsync(System.String)
  commentId: M:System.Fabric.FabricClient.ClusterManagementClient.ActivateNodeAsync(System.String)
- uid: System.Fabric.SafetyCheckKind
  commentId: T:System.Fabric.SafetyCheckKind
  parent: System.Fabric
  isExternal: false
  name: SafetyCheckKind
  nameWithType: SafetyCheckKind
  fullName: System.Fabric.SafetyCheckKind
- uid: System.Fabric.FabricClient.ClusterManagementClient.DeactivateNodeAsync*
  commentId: Overload:System.Fabric.FabricClient.ClusterManagementClient.DeactivateNodeAsync
  isExternal: false
  name: DeactivateNodeAsync
  nameWithType: FabricClient.ClusterManagementClient.DeactivateNodeAsync
  fullName: System.Fabric.FabricClient.ClusterManagementClient.DeactivateNodeAsync
- uid: System.Fabric.FabricObjectClosedException
  commentId: T:System.Fabric.FabricObjectClosedException
  isExternal: false
  name: FabricObjectClosedException
  nameWithType: FabricObjectClosedException
  fullName: System.Fabric.FabricObjectClosedException
- uid: System.TimeoutException
  commentId: T:System.TimeoutException
- uid: System.Fabric.FabricException
  commentId: T:System.Fabric.FabricException
  parent: System.Fabric
  isExternal: false
  name: FabricException
  nameWithType: FabricException
  fullName: System.Fabric.FabricException
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: System.TimeSpan
  commentId: T:System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: false
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
- uid: System.Fabric.FabricClient.ClusterManagementClient.ActivateNodeAsync*
  commentId: Overload:System.Fabric.FabricClient.ClusterManagementClient.ActivateNodeAsync
  isExternal: false
  name: ActivateNodeAsync
  nameWithType: FabricClient.ClusterManagementClient.ActivateNodeAsync
  fullName: System.Fabric.FabricClient.ClusterManagementClient.ActivateNodeAsync
- uid: System.Fabric.FabricClient.ClusterManagementClient.RemoveNodeStateAsync(System.String)
  commentId: M:System.Fabric.FabricClient.ClusterManagementClient.RemoveNodeStateAsync(System.String)
- uid: System.Fabric.FabricClient.ClusterManagementClient.RemoveNodeStateAsync*
  commentId: Overload:System.Fabric.FabricClient.ClusterManagementClient.RemoveNodeStateAsync
  isExternal: false
  name: RemoveNodeStateAsync
  nameWithType: FabricClient.ClusterManagementClient.RemoveNodeStateAsync
  fullName: System.Fabric.FabricClient.ClusterManagementClient.RemoveNodeStateAsync
- uid: System.Fabric.FabricClient.ClusterManagementClient.RecoverPartitionsAsync*
  commentId: Overload:System.Fabric.FabricClient.ClusterManagementClient.RecoverPartitionsAsync
  isExternal: false
  name: RecoverPartitionsAsync
  nameWithType: FabricClient.ClusterManagementClient.RecoverPartitionsAsync
  fullName: System.Fabric.FabricClient.ClusterManagementClient.RecoverPartitionsAsync
- uid: System.Fabric.FabricClient.ClusterManagementClient.RecoverPartitionAsync*
  commentId: Overload:System.Fabric.FabricClient.ClusterManagementClient.RecoverPartitionAsync
  isExternal: false
  name: RecoverPartitionAsync
  nameWithType: FabricClient.ClusterManagementClient.RecoverPartitionAsync
  fullName: System.Fabric.FabricClient.ClusterManagementClient.RecoverPartitionAsync
- uid: System.Guid
  commentId: T:System.Guid
  parent: System
  isExternal: true
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: System.Fabric.FabricClient.ClusterManagementClient.RecoverServicePartitionsAsync*
  commentId: Overload:System.Fabric.FabricClient.ClusterManagementClient.RecoverServicePartitionsAsync
  isExternal: false
  name: RecoverServicePartitionsAsync
  nameWithType: FabricClient.ClusterManagementClient.RecoverServicePartitionsAsync
  fullName: System.Fabric.FabricClient.ClusterManagementClient.RecoverServicePartitionsAsync
- uid: System.Uri
  commentId: T:System.Uri
  parent: System
  isExternal: true
  name: Uri
  nameWithType: Uri
  fullName: System.Uri
- uid: System.Fabric.FabricClient.ClusterManagementClient.RecoverSystemPartitionsAsync*
  commentId: Overload:System.Fabric.FabricClient.ClusterManagementClient.RecoverSystemPartitionsAsync
  isExternal: false
  name: RecoverSystemPartitionsAsync
  nameWithType: FabricClient.ClusterManagementClient.RecoverSystemPartitionsAsync
  fullName: System.Fabric.FabricClient.ClusterManagementClient.RecoverSystemPartitionsAsync
- uid: System.Fabric.FabricClient.ClusterManagementClient.ResetPartitionLoadAsync*
  commentId: Overload:System.Fabric.FabricClient.ClusterManagementClient.ResetPartitionLoadAsync
  isExternal: false
  name: ResetPartitionLoadAsync
  nameWithType: FabricClient.ClusterManagementClient.ResetPartitionLoadAsync
  fullName: System.Fabric.FabricClient.ClusterManagementClient.ResetPartitionLoadAsync
- uid: System.Fabric.FabricClient.ClusterManagementClient.ToggleVerboseServicePlacementHealthReportingAsync*
  commentId: Overload:System.Fabric.FabricClient.ClusterManagementClient.ToggleVerboseServicePlacementHealthReportingAsync
  isExternal: false
  name: ToggleVerboseServicePlacementHealthReportingAsync
  nameWithType: FabricClient.ClusterManagementClient.ToggleVerboseServicePlacementHealthReportingAsync
  fullName: System.Fabric.FabricClient.ClusterManagementClient.ToggleVerboseServicePlacementHealthReportingAsync
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Fabric.FabricClient
  commentId: T:System.Fabric.FabricClient
  parent: System.Fabric
  isExternal: false
  name: FabricClient
  nameWithType: FabricClient
  fullName: System.Fabric.FabricClient
- uid: System.Fabric.FabricClient.ClusterManagementClient.ProvisionFabricAsync*
  commentId: Overload:System.Fabric.FabricClient.ClusterManagementClient.ProvisionFabricAsync
  isExternal: false
  name: ProvisionFabricAsync
  nameWithType: FabricClient.ClusterManagementClient.ProvisionFabricAsync
  fullName: System.Fabric.FabricClient.ClusterManagementClient.ProvisionFabricAsync
- uid: System.Fabric.FabricClient.ClusterManagementClient.UnprovisionFabricAsync*
  commentId: Overload:System.Fabric.FabricClient.ClusterManagementClient.UnprovisionFabricAsync
  isExternal: false
  name: UnprovisionFabricAsync
  nameWithType: FabricClient.ClusterManagementClient.UnprovisionFabricAsync
  fullName: System.Fabric.FabricClient.ClusterManagementClient.UnprovisionFabricAsync
- uid: System.Fabric.FabricClient.ClusterManagementClient.UpgradeFabricAsync*
  commentId: Overload:System.Fabric.FabricClient.ClusterManagementClient.UpgradeFabricAsync
  isExternal: false
  name: UpgradeFabricAsync
  nameWithType: FabricClient.ClusterManagementClient.UpgradeFabricAsync
  fullName: System.Fabric.FabricClient.ClusterManagementClient.UpgradeFabricAsync
- uid: System.Fabric.Description.FabricUpgradeDescription
  commentId: T:System.Fabric.Description.FabricUpgradeDescription
  parent: System.Fabric.Description
  isExternal: false
  name: FabricUpgradeDescription
  nameWithType: FabricUpgradeDescription
  fullName: System.Fabric.Description.FabricUpgradeDescription
- uid: System.Fabric.Description
  commentId: N:System.Fabric.Description
  isExternal: false
  name: System.Fabric.Description
  nameWithType: System.Fabric.Description
  fullName: System.Fabric.Description
- uid: System.Fabric.FabricClient.ClusterManagementClient.UpdateFabricUpgradeAsync*
  commentId: Overload:System.Fabric.FabricClient.ClusterManagementClient.UpdateFabricUpgradeAsync
  isExternal: false
  name: UpdateFabricUpgradeAsync
  nameWithType: FabricClient.ClusterManagementClient.UpdateFabricUpgradeAsync
  fullName: System.Fabric.FabricClient.ClusterManagementClient.UpdateFabricUpgradeAsync
- uid: System.Fabric.Description.FabricUpgradeUpdateDescription
  commentId: T:System.Fabric.Description.FabricUpgradeUpdateDescription
  parent: System.Fabric.Description
  isExternal: false
  name: FabricUpgradeUpdateDescription
  nameWithType: FabricUpgradeUpdateDescription
  fullName: System.Fabric.Description.FabricUpgradeUpdateDescription
- uid: System.Fabric.FabricClient.ClusterManagementClient.RollbackFabricUpgradeAsync*
  commentId: Overload:System.Fabric.FabricClient.ClusterManagementClient.RollbackFabricUpgradeAsync
  isExternal: false
  name: RollbackFabricUpgradeAsync
  nameWithType: FabricClient.ClusterManagementClient.RollbackFabricUpgradeAsync
  fullName: System.Fabric.FabricClient.ClusterManagementClient.RollbackFabricUpgradeAsync
- uid: System.Fabric.FabricClient.ClusterManagementClient.GetFabricUpgradeProgressAsync*
  commentId: Overload:System.Fabric.FabricClient.ClusterManagementClient.GetFabricUpgradeProgressAsync
  isExternal: false
  name: GetFabricUpgradeProgressAsync
  nameWithType: FabricClient.ClusterManagementClient.GetFabricUpgradeProgressAsync
  fullName: System.Fabric.FabricClient.ClusterManagementClient.GetFabricUpgradeProgressAsync
- uid: System.Threading.Tasks.Task{System.Fabric.FabricUpgradeProgress}
  commentId: T:System.Threading.Tasks.Task{System.Fabric.FabricUpgradeProgress}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<FabricUpgradeProgress>
  nameWithType: Task<FabricUpgradeProgress>
  fullName: System.Threading.Tasks.Task<System.Fabric.FabricUpgradeProgress>
  nameWithType.vb: Task(Of FabricUpgradeProgress)
  fullname.vb: System.Threading.Tasks.Task(Of System.Fabric.FabricUpgradeProgress)
  name.vb: Task(Of FabricUpgradeProgress)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Fabric.FabricUpgradeProgress
    name: FabricUpgradeProgress
    nameWithType: FabricUpgradeProgress
    fullName: System.Fabric.FabricUpgradeProgress
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Fabric.FabricUpgradeProgress
    name: FabricUpgradeProgress
    nameWithType: FabricUpgradeProgress
    fullName: System.Fabric.FabricUpgradeProgress
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullname.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.FabricClient.ApplicationManagementClient.MoveNextApplicationUpgradeDomainAsync(System.Fabric.ApplicationUpgradeProgress)
  commentId: M:System.Fabric.FabricClient.ApplicationManagementClient.MoveNextApplicationUpgradeDomainAsync(System.Fabric.ApplicationUpgradeProgress)
- uid: System.Fabric.FabricClient.ClusterManagementClient.MoveNextFabricUpgradeDomainAsync*
  commentId: Overload:System.Fabric.FabricClient.ClusterManagementClient.MoveNextFabricUpgradeDomainAsync
  isExternal: false
  name: MoveNextFabricUpgradeDomainAsync
  nameWithType: FabricClient.ClusterManagementClient.MoveNextFabricUpgradeDomainAsync
  fullName: System.Fabric.FabricClient.ClusterManagementClient.MoveNextFabricUpgradeDomainAsync
- uid: System.Fabric.FabricUpgradeProgress
  commentId: T:System.Fabric.FabricUpgradeProgress
  parent: System.Fabric
  isExternal: false
  name: FabricUpgradeProgress
  nameWithType: FabricUpgradeProgress
  fullName: System.Fabric.FabricUpgradeProgress
- uid: System.Fabric.FabricClient.ApplicationManagementClient.MoveNextApplicationUpgradeDomainAsync(System.Fabric.ApplicationUpgradeProgress,System.TimeSpan,System.Threading.CancellationToken)
  commentId: M:System.Fabric.FabricClient.ApplicationManagementClient.MoveNextApplicationUpgradeDomainAsync(System.Fabric.ApplicationUpgradeProgress,System.TimeSpan,System.Threading.CancellationToken)
- uid: System.Fabric.FabricClient.ClusterManagementClient.GetClusterManifestAsync*
  commentId: Overload:System.Fabric.FabricClient.ClusterManagementClient.GetClusterManifestAsync
  isExternal: false
  name: GetClusterManifestAsync
  nameWithType: FabricClient.ClusterManagementClient.GetClusterManifestAsync
  fullName: System.Fabric.FabricClient.ClusterManagementClient.GetClusterManifestAsync
- uid: System.Threading.Tasks.Task{System.String}
  commentId: T:System.Threading.Tasks.Task{System.String}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<String>
  nameWithType: Task<String>
  fullName: System.Threading.Tasks.Task<System.String>
  nameWithType.vb: Task(Of String)
  fullname.vb: System.Threading.Tasks.Task(Of System.String)
  name.vb: Task(Of String)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.FabricErrorCode.ImageStoreIOException
  commentId: F:System.Fabric.FabricErrorCode.ImageStoreIOException
- uid: System.Fabric.FabricClient.ClusterManagementClient.CopyClusterPackage*
  commentId: Overload:System.Fabric.FabricClient.ClusterManagementClient.CopyClusterPackage
  isExternal: false
  name: CopyClusterPackage
  nameWithType: FabricClient.ClusterManagementClient.CopyClusterPackage
  fullName: System.Fabric.FabricClient.ClusterManagementClient.CopyClusterPackage
- uid: System.UnauthorizedAccessException
  commentId: T:System.UnauthorizedAccessException
- uid: System.IO.FileNotFoundException
  commentId: T:System.IO.FileNotFoundException
- uid: System.IO.DirectoryNotFoundException
  commentId: T:System.IO.DirectoryNotFoundException
- uid: System.IO.PathTooLongException
  commentId: T:System.IO.PathTooLongException
- uid: System.Fabric.FabricClient.ClusterManagementClient.RemoveClusterPackage*
  commentId: Overload:System.Fabric.FabricClient.ClusterManagementClient.RemoveClusterPackage
  isExternal: false
  name: RemoveClusterPackage
  nameWithType: FabricClient.ClusterManagementClient.RemoveClusterPackage
  fullName: System.Fabric.FabricClient.ClusterManagementClient.RemoveClusterPackage
- uid: System.Fabric.FabricClient.ClusterManagementClient.UpgradeConfigurationAsync*
  commentId: Overload:System.Fabric.FabricClient.ClusterManagementClient.UpgradeConfigurationAsync
  isExternal: false
  name: UpgradeConfigurationAsync
  nameWithType: FabricClient.ClusterManagementClient.UpgradeConfigurationAsync
  fullName: System.Fabric.FabricClient.ClusterManagementClient.UpgradeConfigurationAsync
- uid: System.Fabric.Description.ConfigurationUpgradeDescription
  commentId: T:System.Fabric.Description.ConfigurationUpgradeDescription
  parent: System.Fabric.Description
  isExternal: false
  name: ConfigurationUpgradeDescription
  nameWithType: ConfigurationUpgradeDescription
  fullName: System.Fabric.Description.ConfigurationUpgradeDescription
- uid: System.Fabric.FabricClient.ClusterManagementClient.GetClusterConfigurationUpgradeStatusAsync*
  commentId: Overload:System.Fabric.FabricClient.ClusterManagementClient.GetClusterConfigurationUpgradeStatusAsync
  isExternal: false
  name: GetClusterConfigurationUpgradeStatusAsync
  nameWithType: FabricClient.ClusterManagementClient.GetClusterConfigurationUpgradeStatusAsync
  fullName: System.Fabric.FabricClient.ClusterManagementClient.GetClusterConfigurationUpgradeStatusAsync
- uid: System.Threading.Tasks.Task{System.Fabric.FabricOrchestrationUpgradeProgress}
  commentId: T:System.Threading.Tasks.Task{System.Fabric.FabricOrchestrationUpgradeProgress}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<FabricOrchestrationUpgradeProgress>
  nameWithType: Task<FabricOrchestrationUpgradeProgress>
  fullName: System.Threading.Tasks.Task<System.Fabric.FabricOrchestrationUpgradeProgress>
  nameWithType.vb: Task(Of FabricOrchestrationUpgradeProgress)
  fullname.vb: System.Threading.Tasks.Task(Of System.Fabric.FabricOrchestrationUpgradeProgress)
  name.vb: Task(Of FabricOrchestrationUpgradeProgress)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Fabric.FabricOrchestrationUpgradeProgress
    name: FabricOrchestrationUpgradeProgress
    nameWithType: FabricOrchestrationUpgradeProgress
    fullName: System.Fabric.FabricOrchestrationUpgradeProgress
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Fabric.FabricOrchestrationUpgradeProgress
    name: FabricOrchestrationUpgradeProgress
    nameWithType: FabricOrchestrationUpgradeProgress
    fullName: System.Fabric.FabricOrchestrationUpgradeProgress
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.FabricClient.ClusterManagementClient.GetClusterConfigurationAsync*
  commentId: Overload:System.Fabric.FabricClient.ClusterManagementClient.GetClusterConfigurationAsync
  isExternal: false
  name: GetClusterConfigurationAsync
  nameWithType: FabricClient.ClusterManagementClient.GetClusterConfigurationAsync
  fullName: System.Fabric.FabricClient.ClusterManagementClient.GetClusterConfigurationAsync
