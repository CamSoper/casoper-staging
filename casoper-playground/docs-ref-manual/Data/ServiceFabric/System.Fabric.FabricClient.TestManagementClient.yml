### YamlMime:ManagedReference
items:
- uid: System.Fabric.FabricClient.TestManagementClient
  commentId: T:System.Fabric.FabricClient.TestManagementClient
  id: FabricClient.TestManagementClient
  parent: System.Fabric
  children:
  - System.Fabric.FabricClient.TestManagementClient.CancelTestCommandAsync(System.Guid,System.Boolean)
  - System.Fabric.FabricClient.TestManagementClient.CancelTestCommandAsync(System.Guid,System.Boolean,System.Threading.CancellationToken)
  - System.Fabric.FabricClient.TestManagementClient.CancelTestCommandAsync(System.Guid,System.Boolean,System.TimeSpan)
  - System.Fabric.FabricClient.TestManagementClient.CancelTestCommandAsync(System.Guid,System.Boolean,System.TimeSpan,System.Threading.CancellationToken)
  - System.Fabric.FabricClient.TestManagementClient.CleanTestStateAsync
  - System.Fabric.FabricClient.TestManagementClient.CleanTestStateAsync(System.TimeSpan,System.Threading.CancellationToken)
  - System.Fabric.FabricClient.TestManagementClient.GetChaosReportAsync(System.Fabric.Chaos.DataStructures.ChaosReportFilter)
  - System.Fabric.FabricClient.TestManagementClient.GetChaosReportAsync(System.Fabric.Chaos.DataStructures.ChaosReportFilter,System.TimeSpan,System.Threading.CancellationToken)
  - System.Fabric.FabricClient.TestManagementClient.GetChaosReportAsync(System.String)
  - System.Fabric.FabricClient.TestManagementClient.GetChaosReportAsync(System.String,System.TimeSpan,System.Threading.CancellationToken)
  - System.Fabric.FabricClient.TestManagementClient.GetNodeTransitionProgressAsync(System.Guid,System.TimeSpan,System.Threading.CancellationToken)
  - System.Fabric.FabricClient.TestManagementClient.GetPartitionDataLossProgressAsync(System.Guid)
  - System.Fabric.FabricClient.TestManagementClient.GetPartitionDataLossProgressAsync(System.Guid,System.Threading.CancellationToken)
  - System.Fabric.FabricClient.TestManagementClient.GetPartitionDataLossProgressAsync(System.Guid,System.TimeSpan)
  - System.Fabric.FabricClient.TestManagementClient.GetPartitionDataLossProgressAsync(System.Guid,System.TimeSpan,System.Threading.CancellationToken)
  - System.Fabric.FabricClient.TestManagementClient.GetPartitionQuorumLossProgressAsync(System.Guid)
  - System.Fabric.FabricClient.TestManagementClient.GetPartitionQuorumLossProgressAsync(System.Guid,System.Threading.CancellationToken)
  - System.Fabric.FabricClient.TestManagementClient.GetPartitionQuorumLossProgressAsync(System.Guid,System.TimeSpan)
  - System.Fabric.FabricClient.TestManagementClient.GetPartitionQuorumLossProgressAsync(System.Guid,System.TimeSpan,System.Threading.CancellationToken)
  - System.Fabric.FabricClient.TestManagementClient.GetPartitionRestartProgressAsync(System.Guid)
  - System.Fabric.FabricClient.TestManagementClient.GetPartitionRestartProgressAsync(System.Guid,System.Threading.CancellationToken)
  - System.Fabric.FabricClient.TestManagementClient.GetPartitionRestartProgressAsync(System.Guid,System.TimeSpan)
  - System.Fabric.FabricClient.TestManagementClient.GetPartitionRestartProgressAsync(System.Guid,System.TimeSpan,System.Threading.CancellationToken)
  - System.Fabric.FabricClient.TestManagementClient.GetTestCommandStatusListAsync(System.Fabric.Query.TestCommandStateFilter,System.Fabric.Query.TestCommandTypeFilter,System.TimeSpan,System.Threading.CancellationToken)
  - System.Fabric.FabricClient.TestManagementClient.GetTestCommandStatusListAsync(System.Fabric.Query.TestCommandStateFilter,System.TimeSpan,System.Threading.CancellationToken)
  - System.Fabric.FabricClient.TestManagementClient.GetTestCommandStatusListAsync(System.Fabric.Query.TestCommandTypeFilter,System.TimeSpan,System.Threading.CancellationToken)
  - System.Fabric.FabricClient.TestManagementClient.GetTestCommandStatusListAsync(System.Threading.CancellationToken)
  - System.Fabric.FabricClient.TestManagementClient.GetTestCommandStatusListAsync(System.TimeSpan)
  - System.Fabric.FabricClient.TestManagementClient.GetTestCommandStatusListAsync(System.TimeSpan,System.Threading.CancellationToken)
  - System.Fabric.FabricClient.TestManagementClient.InvokeDataLossAsync(System.Fabric.PartitionSelector,System.Fabric.DataLossMode)
  - System.Fabric.FabricClient.TestManagementClient.InvokeDataLossAsync(System.Fabric.PartitionSelector,System.Fabric.DataLossMode,System.Threading.CancellationToken)
  - System.Fabric.FabricClient.TestManagementClient.InvokeDataLossAsync(System.Fabric.PartitionSelector,System.Fabric.DataLossMode,System.TimeSpan)
  - System.Fabric.FabricClient.TestManagementClient.InvokeDataLossAsync(System.Fabric.PartitionSelector,System.Fabric.DataLossMode,System.TimeSpan,System.Threading.CancellationToken)
  - System.Fabric.FabricClient.TestManagementClient.InvokeQuorumLossAsync(System.Fabric.PartitionSelector,System.Fabric.QuorumLossMode,System.TimeSpan)
  - System.Fabric.FabricClient.TestManagementClient.InvokeQuorumLossAsync(System.Fabric.PartitionSelector,System.Fabric.QuorumLossMode,System.TimeSpan,System.Threading.CancellationToken)
  - System.Fabric.FabricClient.TestManagementClient.InvokeQuorumLossAsync(System.Fabric.PartitionSelector,System.Fabric.QuorumLossMode,System.TimeSpan,System.TimeSpan)
  - System.Fabric.FabricClient.TestManagementClient.InvokeQuorumLossAsync(System.Fabric.PartitionSelector,System.Fabric.QuorumLossMode,System.TimeSpan,System.TimeSpan,System.Threading.CancellationToken)
  - System.Fabric.FabricClient.TestManagementClient.RestartPartitionAsync(System.Fabric.PartitionSelector,System.Fabric.RestartPartitionMode)
  - System.Fabric.FabricClient.TestManagementClient.RestartPartitionAsync(System.Fabric.PartitionSelector,System.Fabric.RestartPartitionMode,System.Threading.CancellationToken)
  - System.Fabric.FabricClient.TestManagementClient.RestartPartitionAsync(System.Fabric.PartitionSelector,System.Fabric.RestartPartitionMode,System.TimeSpan)
  - System.Fabric.FabricClient.TestManagementClient.RestartPartitionAsync(System.Fabric.PartitionSelector,System.Fabric.RestartPartitionMode,System.TimeSpan,System.Threading.CancellationToken)
  - System.Fabric.FabricClient.TestManagementClient.StartChaosAsync(System.Fabric.Chaos.DataStructures.ChaosParameters)
  - System.Fabric.FabricClient.TestManagementClient.StartChaosAsync(System.Fabric.Chaos.DataStructures.ChaosParameters,System.TimeSpan,System.Threading.CancellationToken)
  - System.Fabric.FabricClient.TestManagementClient.StartNodeTransitionAsync(System.Fabric.Description.NodeTransitionDescription,System.TimeSpan,System.Threading.CancellationToken)
  - System.Fabric.FabricClient.TestManagementClient.StartPartitionDataLossAsync(System.Guid,System.Fabric.PartitionSelector,System.Fabric.DataLossMode)
  - System.Fabric.FabricClient.TestManagementClient.StartPartitionDataLossAsync(System.Guid,System.Fabric.PartitionSelector,System.Fabric.DataLossMode,System.Threading.CancellationToken)
  - System.Fabric.FabricClient.TestManagementClient.StartPartitionDataLossAsync(System.Guid,System.Fabric.PartitionSelector,System.Fabric.DataLossMode,System.TimeSpan)
  - System.Fabric.FabricClient.TestManagementClient.StartPartitionDataLossAsync(System.Guid,System.Fabric.PartitionSelector,System.Fabric.DataLossMode,System.TimeSpan,System.Threading.CancellationToken)
  - System.Fabric.FabricClient.TestManagementClient.StartPartitionQuorumLossAsync(System.Guid,System.Fabric.PartitionSelector,System.Fabric.QuorumLossMode,System.TimeSpan)
  - System.Fabric.FabricClient.TestManagementClient.StartPartitionQuorumLossAsync(System.Guid,System.Fabric.PartitionSelector,System.Fabric.QuorumLossMode,System.TimeSpan,System.Threading.CancellationToken)
  - System.Fabric.FabricClient.TestManagementClient.StartPartitionQuorumLossAsync(System.Guid,System.Fabric.PartitionSelector,System.Fabric.QuorumLossMode,System.TimeSpan,System.TimeSpan)
  - System.Fabric.FabricClient.TestManagementClient.StartPartitionQuorumLossAsync(System.Guid,System.Fabric.PartitionSelector,System.Fabric.QuorumLossMode,System.TimeSpan,System.TimeSpan,System.Threading.CancellationToken)
  - System.Fabric.FabricClient.TestManagementClient.StartPartitionRestartAsync(System.Guid,System.Fabric.PartitionSelector,System.Fabric.RestartPartitionMode)
  - System.Fabric.FabricClient.TestManagementClient.StartPartitionRestartAsync(System.Guid,System.Fabric.PartitionSelector,System.Fabric.RestartPartitionMode,System.Threading.CancellationToken)
  - System.Fabric.FabricClient.TestManagementClient.StartPartitionRestartAsync(System.Guid,System.Fabric.PartitionSelector,System.Fabric.RestartPartitionMode,System.TimeSpan)
  - System.Fabric.FabricClient.TestManagementClient.StartPartitionRestartAsync(System.Guid,System.Fabric.PartitionSelector,System.Fabric.RestartPartitionMode,System.TimeSpan,System.Threading.CancellationToken)
  - System.Fabric.FabricClient.TestManagementClient.StopChaosAsync
  - System.Fabric.FabricClient.TestManagementClient.StopChaosAsync(System.TimeSpan,System.Threading.CancellationToken)
  - System.Fabric.FabricClient.TestManagementClient.ValidateApplicationAsync(System.Uri,System.TimeSpan)
  - System.Fabric.FabricClient.TestManagementClient.ValidateApplicationAsync(System.Uri,System.TimeSpan,System.Threading.CancellationToken)
  - System.Fabric.FabricClient.TestManagementClient.ValidateApplicationAsync(System.Uri,System.TimeSpan,System.TimeSpan,System.Threading.CancellationToken)
  - System.Fabric.FabricClient.TestManagementClient.ValidateServiceAsync(System.Uri,System.TimeSpan)
  - System.Fabric.FabricClient.TestManagementClient.ValidateServiceAsync(System.Uri,System.TimeSpan,System.Threading.CancellationToken)
  - System.Fabric.FabricClient.TestManagementClient.ValidateServiceAsync(System.Uri,System.TimeSpan,System.TimeSpan,System.Threading.CancellationToken)
  langs:
  - csharp
  - vb
  name: FabricClient.TestManagementClient
  nameWithType: FabricClient.TestManagementClient
  fullName: System.Fabric.FabricClient.TestManagementClient
  type: Class
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.TestManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: TestManagementClient
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.TestManagementClient.cs
    startLine: 22
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Represents the fabric client that can be used to issue and control test commands.</p>\n"
  example: []
  syntax:
    content: public sealed class TestManagementClient
    content.vb: Public NotInheritable Class TestManagementClient
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  extensionMethods:
  - System.Fabric.FabricClient.TestManagementClient.System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: System.Fabric.FabricClient.TestManagementClient.StartPartitionDataLossAsync(System.Guid,System.Fabric.PartitionSelector,System.Fabric.DataLossMode)
  commentId: M:System.Fabric.FabricClient.TestManagementClient.StartPartitionDataLossAsync(System.Guid,System.Fabric.PartitionSelector,System.Fabric.DataLossMode)
  id: StartPartitionDataLossAsync(System.Guid,System.Fabric.PartitionSelector,System.Fabric.DataLossMode)
  parent: System.Fabric.FabricClient.TestManagementClient
  langs:
  - csharp
  - vb
  name: StartPartitionDataLossAsync(Guid, PartitionSelector, DataLossMode)
  nameWithType: FabricClient.TestManagementClient.StartPartitionDataLossAsync(Guid, PartitionSelector, DataLossMode)
  fullName: System.Fabric.FabricClient.TestManagementClient.StartPartitionDataLossAsync(System.Guid, System.Fabric.PartitionSelector, System.Fabric.DataLossMode)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.TestManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: StartPartitionDataLossAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.TestManagementClient.cs
    startLine: 103
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\nThis API will induce data loss for the specified partition. It will trigger a call to the OnDataLoss API of the partition.\n"
  remarks: "\n<p>\nActual data loss will depend on the specified <xref href=\"System.Fabric.DataLossMode\" data-throw-if-not-resolved=\"false\"></xref>\nPartialDataLoss - PartialDataLoss - Only a quorum of replicas are removed and OnDataLoss is triggered for the partition but actual data loss depends on presence of in-flight replication.\nFullDataLoss - All replicas are removed hence all data is lost and OnDataLoss is triggered.\n</p>\n<p>\nThis API should only be called with a stateful service as the target.\n</p>\n<p>\nCalling this API with a system service as the target is not advised.\n</p>\n<p>\nNote:  Once this API has been called, it cannot be reversed.  Calling CancelTestCommandAsync() will only stop execution and clean up internal system state.  \nIt will not restore data if the command has progressed far enough to cause data loss.\n</p>\n<p>\nThe FaultAnalysisService must be enabled to use this API.\n</p>\n"
  example: []
  syntax:
    content: public Task StartPartitionDataLossAsync(Guid operationId, PartitionSelector partitionSelector, DataLossMode dataLossMode)
    content.vb: Public Function StartPartitionDataLossAsync(operationId As Guid, partitionSelector As PartitionSelector, dataLossMode As DataLossMode) As Task
    parameters:
    - id: operationId
      type: System.Guid
      description: A GUID that identifies a call of this API; this is passed into the corresponding GetProgress API
    - id: partitionSelector
      type: System.Fabric.PartitionSelector
      description: The <xref href="System.Fabric.PartitionSelector" data-throw-if-not-resolved="false"></xref> to specify which partition data loss needs to be induced for
    - id: dataLossMode
      type: System.Fabric.DataLossMode
      description: Specifies the <xref href="System.Fabric.DataLossMode" data-throw-if-not-resolved="false"></xref> i.e. the options for inducing data loss.
    return:
      type: System.Threading.Tasks.Task
      description: A task.
  overload: System.Fabric.FabricClient.TestManagementClient.StartPartitionDataLossAsync*
  exceptions:
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: Action took more than its allocated time.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Any of the required arguments are null.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: If the API is called for a partition belonging to a stateless service.
  - type: System.Fabric.FabricException
    commentId: T:System.Fabric.FabricException
    description: >-
      These are the fabric failures

      FabricErrorCode.PartitionNotFound - if the specified partition selected does not exist.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.TestManagementClient.StartPartitionDataLossAsync(System.Guid,System.Fabric.PartitionSelector,System.Fabric.DataLossMode,System.Threading.CancellationToken)
  commentId: M:System.Fabric.FabricClient.TestManagementClient.StartPartitionDataLossAsync(System.Guid,System.Fabric.PartitionSelector,System.Fabric.DataLossMode,System.Threading.CancellationToken)
  id: StartPartitionDataLossAsync(System.Guid,System.Fabric.PartitionSelector,System.Fabric.DataLossMode,System.Threading.CancellationToken)
  parent: System.Fabric.FabricClient.TestManagementClient
  langs:
  - csharp
  - vb
  name: StartPartitionDataLossAsync(Guid, PartitionSelector, DataLossMode, CancellationToken)
  nameWithType: FabricClient.TestManagementClient.StartPartitionDataLossAsync(Guid, PartitionSelector, DataLossMode, CancellationToken)
  fullName: System.Fabric.FabricClient.TestManagementClient.StartPartitionDataLossAsync(System.Guid, System.Fabric.PartitionSelector, System.Fabric.DataLossMode, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.TestManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: StartPartitionDataLossAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.TestManagementClient.cs
    startLine: 149
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\nThis API will induce data loss for the specified partition. It will trigger a call to the OnDataLoss API of the partition.\n"
  remarks: "\n<p>\nActual data loss will depend on the specified <xref href=\"System.Fabric.DataLossMode\" data-throw-if-not-resolved=\"false\"></xref>\nPartialDataLoss - PartialDataLoss - Only a quorum of replicas are removed and OnDataLoss is triggered for the partition but actual data loss depends on presence of inflight replication.\nFullDataLoss - All replicas are removed hence all data is lost and OnDataLoss is triggered.\n</p>\n<p>\nThis API should only be called with a stateful service as the target.\n</p>\n<p>\nCalling this API with a system service as the target is not advised.\n</p>\n<p>\nThe FaultAnalysisService must be enabled to use this API.\n</p>\n<p>\nNote:  Once this API has been called, it cannot be reversed.  Calling CancelTestCommandAsync() will only stop execution and clean up internal system state.  \nIt will not restore data if the command has progressed far enough to cause data loss.\n</p>\n"
  example: []
  syntax:
    content: public Task StartPartitionDataLossAsync(Guid operationId, PartitionSelector partitionSelector, DataLossMode dataLossMode, CancellationToken cancellationToken)
    content.vb: Public Function StartPartitionDataLossAsync(operationId As Guid, partitionSelector As PartitionSelector, dataLossMode As DataLossMode, cancellationToken As CancellationToken) As Task
    parameters:
    - id: operationId
      type: System.Guid
      description: A GUID that identifies a call of this API; this is passed into the corresponding GetProgress API
    - id: partitionSelector
      type: System.Fabric.PartitionSelector
      description: The <xref href="System.Fabric.PartitionSelector" data-throw-if-not-resolved="false"></xref> to specify which partition data loss needs to be induced for.
    - id: dataLossMode
      type: System.Fabric.DataLossMode
      description: Specifies the <xref href="System.Fabric.DataLossMode" data-throw-if-not-resolved="false"></xref> i.e. the options for inducing data loss.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: Cancellation token
    return:
      type: System.Threading.Tasks.Task
      description: A task.
  overload: System.Fabric.FabricClient.TestManagementClient.StartPartitionDataLossAsync*
  exceptions:
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: Action took more than its allocated time.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Any of the required arguments are null.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: If the API is called for a partition belonging to a stateless service.
  - type: System.Fabric.FabricException
    commentId: T:System.Fabric.FabricException
    description: >-
      These are the fabric failures

      FabricErrorCode.PartitionNotFound - if the specified partition selected does not exist.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.TestManagementClient.StartPartitionDataLossAsync(System.Guid,System.Fabric.PartitionSelector,System.Fabric.DataLossMode,System.TimeSpan)
  commentId: M:System.Fabric.FabricClient.TestManagementClient.StartPartitionDataLossAsync(System.Guid,System.Fabric.PartitionSelector,System.Fabric.DataLossMode,System.TimeSpan)
  id: StartPartitionDataLossAsync(System.Guid,System.Fabric.PartitionSelector,System.Fabric.DataLossMode,System.TimeSpan)
  parent: System.Fabric.FabricClient.TestManagementClient
  langs:
  - csharp
  - vb
  name: StartPartitionDataLossAsync(Guid, PartitionSelector, DataLossMode, TimeSpan)
  nameWithType: FabricClient.TestManagementClient.StartPartitionDataLossAsync(Guid, PartitionSelector, DataLossMode, TimeSpan)
  fullName: System.Fabric.FabricClient.TestManagementClient.StartPartitionDataLossAsync(System.Guid, System.Fabric.PartitionSelector, System.Fabric.DataLossMode, System.TimeSpan)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.TestManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: StartPartitionDataLossAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.TestManagementClient.cs
    startLine: 196
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\nThis API will induce data loss for the specified partition. It will trigger a call to the OnDataLoss API of the partition.\n"
  remarks: "\n<p>\nActual data loss will depend on the specified <xref href=\"System.Fabric.DataLossMode\" data-throw-if-not-resolved=\"false\"></xref>\nPartialDataLoss - PartialDataLoss - Only a quorum of replicas are removed and OnDataLoss is triggered for the partition but actual data loss depends on presence of in-flight replication.\nFullDataLoss - All replicas are removed hence all data is lost and OnDataLoss is triggered.\n</p>\n<p>\nThis API should only be called with a stateful service as the target.\n</p>\n<p>\nCalling this API with a system service as the target is not advised.\n</p>\n<p>\nThe FaultAnalysisService must be enabled to use this API.\n</p>\n<p>\nNote:  Once this API has been called, it cannot be reversed.  Calling CancelTestCommandAsync() will only stop execution and clean up internal system state.  \nIt will not restore data if the command has progressed far enough to cause data loss.\n</p>\n"
  example: []
  syntax:
    content: public Task StartPartitionDataLossAsync(Guid operationId, PartitionSelector partitionSelector, DataLossMode dataLossMode, TimeSpan operationTimeout)
    content.vb: Public Function StartPartitionDataLossAsync(operationId As Guid, partitionSelector As PartitionSelector, dataLossMode As DataLossMode, operationTimeout As TimeSpan) As Task
    parameters:
    - id: operationId
      type: System.Guid
      description: A GUID that identifies a call of this API; this is passed into the corresponding GetProgress API
    - id: partitionSelector
      type: System.Fabric.PartitionSelector
      description: The <xref href="System.Fabric.PartitionSelector" data-throw-if-not-resolved="false"></xref> to specify which partition data loss needs to be induced for.
    - id: dataLossMode
      type: System.Fabric.DataLossMode
      description: Specifies the <xref href="System.Fabric.DataLossMode" data-throw-if-not-resolved="false"></xref> i.e. the options for inducing data loss.
    - id: operationTimeout
      type: System.TimeSpan
      description: The overall timeout for the operation
    return:
      type: System.Threading.Tasks.Task
      description: A task.
  overload: System.Fabric.FabricClient.TestManagementClient.StartPartitionDataLossAsync*
  exceptions:
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: Action took more than its allocated time.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Any of the required arguments are null.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: If the API is called for a partition belonging to a stateless service.
  - type: System.Fabric.FabricException
    commentId: T:System.Fabric.FabricException
    description: >-
      These are the fabric failures

      FabricErrorCode.PartitionNotFound - if the specified partition selected does not exist.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.TestManagementClient.StartPartitionDataLossAsync(System.Guid,System.Fabric.PartitionSelector,System.Fabric.DataLossMode,System.TimeSpan,System.Threading.CancellationToken)
  commentId: M:System.Fabric.FabricClient.TestManagementClient.StartPartitionDataLossAsync(System.Guid,System.Fabric.PartitionSelector,System.Fabric.DataLossMode,System.TimeSpan,System.Threading.CancellationToken)
  id: StartPartitionDataLossAsync(System.Guid,System.Fabric.PartitionSelector,System.Fabric.DataLossMode,System.TimeSpan,System.Threading.CancellationToken)
  parent: System.Fabric.FabricClient.TestManagementClient
  langs:
  - csharp
  - vb
  name: StartPartitionDataLossAsync(Guid, PartitionSelector, DataLossMode, TimeSpan, CancellationToken)
  nameWithType: FabricClient.TestManagementClient.StartPartitionDataLossAsync(Guid, PartitionSelector, DataLossMode, TimeSpan, CancellationToken)
  fullName: System.Fabric.FabricClient.TestManagementClient.StartPartitionDataLossAsync(System.Guid, System.Fabric.PartitionSelector, System.Fabric.DataLossMode, System.TimeSpan, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.TestManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: StartPartitionDataLossAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.TestManagementClient.cs
    startLine: 244
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\nThis API will induce data loss for the specified partition. It will trigger a call to the OnDataLoss API of the partition.\n"
  remarks: "\n<p>\nActual data loss will depend on the specified <xref href=\"System.Fabric.DataLossMode\" data-throw-if-not-resolved=\"false\"></xref>\nPartialDataLoss - PartialDataLoss - Only a quorum of replicas are removed and OnDataLoss is triggered for the partition but actual data loss depends on presence of in-flight replication.\nFullDataLoss - All replicas are removed hence all data is lost and OnDataLoss is triggered.\n</p>\n<p>\nThis API should only be called with a stateful service as the target.\n</p>\n<p>\nCalling this API with a system service as the target is not advised.\n</p>\n<p>\nThe FaultAnalysisService must be enabled to use this API.\n</p>\n<p>\nNote:  Once this API has been called, it cannot be reversed.  Calling CancelTestCommandAsync() will only stop execution and clean up internal system state.\nIt will not restore data if the command has progressed far enough to cause data loss.\n</p>\n"
  example: []
  syntax:
    content: public Task StartPartitionDataLossAsync(Guid operationId, PartitionSelector partitionSelector, DataLossMode dataLossMode, TimeSpan operationTimeout, CancellationToken cancellationToken)
    content.vb: Public Function StartPartitionDataLossAsync(operationId As Guid, partitionSelector As PartitionSelector, dataLossMode As DataLossMode, operationTimeout As TimeSpan, cancellationToken As CancellationToken) As Task
    parameters:
    - id: operationId
      type: System.Guid
      description: A GUID that identifies a call of this API; this is passed into the corresponding GetProgress API
    - id: partitionSelector
      type: System.Fabric.PartitionSelector
      description: The <xref href="System.Fabric.PartitionSelector" data-throw-if-not-resolved="false"></xref> to specify which partition data loss needs to be induced for.
    - id: dataLossMode
      type: System.Fabric.DataLossMode
      description: Specifies the <xref href="System.Fabric.DataLossMode" data-throw-if-not-resolved="false"></xref> i.e. the options for inducing data loss.
    - id: operationTimeout
      type: System.TimeSpan
      description: The overall timeout for the operation
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: Cancellation token
    return:
      type: System.Threading.Tasks.Task
      description: A task.
  overload: System.Fabric.FabricClient.TestManagementClient.StartPartitionDataLossAsync*
  exceptions:
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: Action took more than its allocated time.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Any of the required arguments are null.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: If the API is called for a partition belonging to a stateless service.
  - type: System.Fabric.FabricException
    commentId: T:System.Fabric.FabricException
    description: >-
      These are the fabric failures

      FabricErrorCode.PartitionNotFound - if the specified partition selected does not exist.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.TestManagementClient.InvokeDataLossAsync(System.Fabric.PartitionSelector,System.Fabric.DataLossMode)
  commentId: M:System.Fabric.FabricClient.TestManagementClient.InvokeDataLossAsync(System.Fabric.PartitionSelector,System.Fabric.DataLossMode)
  id: InvokeDataLossAsync(System.Fabric.PartitionSelector,System.Fabric.DataLossMode)
  parent: System.Fabric.FabricClient.TestManagementClient
  langs:
  - csharp
  - vb
  name: InvokeDataLossAsync(PartitionSelector, DataLossMode)
  nameWithType: FabricClient.TestManagementClient.InvokeDataLossAsync(PartitionSelector, DataLossMode)
  fullName: System.Fabric.FabricClient.TestManagementClient.InvokeDataLossAsync(System.Fabric.PartitionSelector, System.Fabric.DataLossMode)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.TestManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: InvokeDataLossAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.TestManagementClient.cs
    startLine: 289
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\nThis API will induce data loss for the specified partition. It will trigger a call to the OnDataLoss API of the partition.\n"
  remarks: "\n<p>\nActual data loss will depend on the specified <xref href=\"System.Fabric.DataLossMode\" data-throw-if-not-resolved=\"false\"></xref>\nPartialDataLoss - PartialDataLoss - Only a quorum of replicas are removed and OnDataLoss is triggered for the partition but actual data loss depends on presence of in-flight replication.\nFullDataLoss - All replicas are removed hence all data is lost and OnDataLoss is triggered.\n</p>\n<p>\nThis API should only be called with a stateful service as the target.\n</p>\n<p>\nCalling this API with a system service as the target is not advised.\n</p>                        \n<p>\nImportant note:  this API should not be aborted while running.  Aborting this API while it is running may leave state behind.  \nIf this API is aborted while running, CleanTestStateAsync() should be invoked to remove state that may have been left behind.\n</p>\n"
  example: []
  syntax:
    content: >-
      [Obsolete("This api is deprecated, use StartPartitionDataLossAsync instead.  StartPartitionDataLossAsync requires the FaultAnalysisService")]

      public Task<InvokeDataLossResult> InvokeDataLossAsync(PartitionSelector partitionSelector, DataLossMode dataLossMode)
    content.vb: >-
      <Obsolete("This api is deprecated, use StartPartitionDataLossAsync instead.  StartPartitionDataLossAsync requires the FaultAnalysisService")>

      Public Function InvokeDataLossAsync(partitionSelector As PartitionSelector, dataLossMode As DataLossMode) As Task(Of InvokeDataLossResult)
    parameters:
    - id: partitionSelector
      type: System.Fabric.PartitionSelector
      description: The <xref href="System.Fabric.PartitionSelector" data-throw-if-not-resolved="false"></xref> to specify which partition data loss needs to be induced for
    - id: dataLossMode
      type: System.Fabric.DataLossMode
      description: Specifies the <xref href="System.Fabric.DataLossMode" data-throw-if-not-resolved="false"></xref> i.e. the options for inducing data loss.
    return:
      type: System.Threading.Tasks.Task{System.Fabric.Result.InvokeDataLossResult}
      description: InvokeDataLossResult which gives information about the Partition that was selected for data loss.
  overload: System.Fabric.FabricClient.TestManagementClient.InvokeDataLossAsync*
  exceptions:
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: Action took more than its allocated time.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Any of the required arguments are null.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: If the API is called for a partition belonging to a stateless service.
  - type: System.Fabric.FabricException
    commentId: T:System.Fabric.FabricException
    description: >-
      These are the fabric failures

      FabricErrorCode.PartitionNotFound - if the specified partition selected does not exist.
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: This api is deprecated, use StartPartitionDataLossAsync instead.  StartPartitionDataLossAsync requires the FaultAnalysisService
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.TestManagementClient.InvokeDataLossAsync(System.Fabric.PartitionSelector,System.Fabric.DataLossMode,System.Threading.CancellationToken)
  commentId: M:System.Fabric.FabricClient.TestManagementClient.InvokeDataLossAsync(System.Fabric.PartitionSelector,System.Fabric.DataLossMode,System.Threading.CancellationToken)
  id: InvokeDataLossAsync(System.Fabric.PartitionSelector,System.Fabric.DataLossMode,System.Threading.CancellationToken)
  parent: System.Fabric.FabricClient.TestManagementClient
  langs:
  - csharp
  - vb
  name: InvokeDataLossAsync(PartitionSelector, DataLossMode, CancellationToken)
  nameWithType: FabricClient.TestManagementClient.InvokeDataLossAsync(PartitionSelector, DataLossMode, CancellationToken)
  fullName: System.Fabric.FabricClient.TestManagementClient.InvokeDataLossAsync(System.Fabric.PartitionSelector, System.Fabric.DataLossMode, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.TestManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: InvokeDataLossAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.TestManagementClient.cs
    startLine: 330
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\nThis API will induce data loss for the specified partition. It will trigger a call to the OnDataLoss API of the partition.\n"
  remarks: "\n<p>\nActual data loss will depend on the specified <xref href=\"System.Fabric.DataLossMode\" data-throw-if-not-resolved=\"false\"></xref>\nPartialDataLoss - PartialDataLoss - Only a quorum of replicas are removed and OnDataLoss is triggered for the partition but actual data loss depends on presence of in-flight replication.\nFullDataLoss - All replicas are removed hence all data is lost and OnDataLoss is triggered.\n</p>\n<p>\nThis API should only be called with a stateful service as the target.\n</p>\n<p>\nCalling this API with a system service as the target is not advised.\n</p>            \n<p>\nImportant note:  this API should not be aborted while running.  Aborting this API while it is running may leave state behind.  \nIf this API is aborted while running, CleanTestStateAsync() should be invoked to remove state that may have been left behind.\n</p>\n"
  example: []
  syntax:
    content: >-
      [Obsolete("This api is deprecated, use StartPartitionDataLossAsync instead.  StartPartitionDataLossAsync requires the FaultAnalysisService")]

      public Task<InvokeDataLossResult> InvokeDataLossAsync(PartitionSelector partitionSelector, DataLossMode dataLossMode, CancellationToken cancellationToken)
    content.vb: >-
      <Obsolete("This api is deprecated, use StartPartitionDataLossAsync instead.  StartPartitionDataLossAsync requires the FaultAnalysisService")>

      Public Function InvokeDataLossAsync(partitionSelector As PartitionSelector, dataLossMode As DataLossMode, cancellationToken As CancellationToken) As Task(Of InvokeDataLossResult)
    parameters:
    - id: partitionSelector
      type: System.Fabric.PartitionSelector
      description: The <xref href="System.Fabric.PartitionSelector" data-throw-if-not-resolved="false"></xref> to specify which partition data loss needs to be induced for.
    - id: dataLossMode
      type: System.Fabric.DataLossMode
      description: Specifies the <xref href="System.Fabric.DataLossMode" data-throw-if-not-resolved="false"></xref> i.e. the options for inducing data loss.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: Cancellation token
    return:
      type: System.Threading.Tasks.Task{System.Fabric.Result.InvokeDataLossResult}
      description: InvokeDataLossResult which gives information about the Partition that was selected for data loss.
  overload: System.Fabric.FabricClient.TestManagementClient.InvokeDataLossAsync*
  exceptions:
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: Action took more than its allocated time.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Any of the required arguments are null.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: If the API is called for a partition belonging to a stateless service.
  - type: System.Fabric.FabricException
    commentId: T:System.Fabric.FabricException
    description: >-
      These are the fabric failures

      FabricErrorCode.PartitionNotFound - if the specified partition selected does not exist.
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: This api is deprecated, use StartPartitionDataLossAsync instead.  StartPartitionDataLossAsync requires the FaultAnalysisService
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.TestManagementClient.InvokeDataLossAsync(System.Fabric.PartitionSelector,System.Fabric.DataLossMode,System.TimeSpan)
  commentId: M:System.Fabric.FabricClient.TestManagementClient.InvokeDataLossAsync(System.Fabric.PartitionSelector,System.Fabric.DataLossMode,System.TimeSpan)
  id: InvokeDataLossAsync(System.Fabric.PartitionSelector,System.Fabric.DataLossMode,System.TimeSpan)
  parent: System.Fabric.FabricClient.TestManagementClient
  langs:
  - csharp
  - vb
  name: InvokeDataLossAsync(PartitionSelector, DataLossMode, TimeSpan)
  nameWithType: FabricClient.TestManagementClient.InvokeDataLossAsync(PartitionSelector, DataLossMode, TimeSpan)
  fullName: System.Fabric.FabricClient.TestManagementClient.InvokeDataLossAsync(System.Fabric.PartitionSelector, System.Fabric.DataLossMode, System.TimeSpan)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.TestManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: InvokeDataLossAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.TestManagementClient.cs
    startLine: 372
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\nThis API will induce data loss for the specified partition. It will trigger a call to the OnDataLoss API of the partition.\n"
  remarks: "\n<p>\nActual data loss will depend on the specified <xref href=\"System.Fabric.DataLossMode\" data-throw-if-not-resolved=\"false\"></xref>\nPartialDataLoss - PartialDataLoss - Only a quorum of replicas are removed and OnDataLoss is triggered for the partition but actual data loss depends on presence of in-flight replication.\nFullDataLoss - All replicas are removed hence all data is lost and OnDataLoss is triggered.\n</p>\n<p>\nThis API should only be called with a stateful service as the target.\n</p>\n<p>\nCalling this API with a system service as the target is not advised.\n</p>            \n<p>\nImportant note:  this API should not be aborted while running.  Aborting this API while it is running may leave state behind.  \nIf this API is aborted while running, CleanTestStateAsync() should be invoked to remove state that may have been left behind.\n</p>\n"
  example: []
  syntax:
    content: >-
      [Obsolete("This api is deprecated, use StartPartitionDataLossAsync instead.  StartPartitionDataLossAsync requires the FaultAnalysisService")]

      public Task<InvokeDataLossResult> InvokeDataLossAsync(PartitionSelector partitionSelector, DataLossMode dataLossMode, TimeSpan operationTimeout)
    content.vb: >-
      <Obsolete("This api is deprecated, use StartPartitionDataLossAsync instead.  StartPartitionDataLossAsync requires the FaultAnalysisService")>

      Public Function InvokeDataLossAsync(partitionSelector As PartitionSelector, dataLossMode As DataLossMode, operationTimeout As TimeSpan) As Task(Of InvokeDataLossResult)
    parameters:
    - id: partitionSelector
      type: System.Fabric.PartitionSelector
      description: The <xref href="System.Fabric.PartitionSelector" data-throw-if-not-resolved="false"></xref> to specify which partition data loss needs to be induced for.
    - id: dataLossMode
      type: System.Fabric.DataLossMode
      description: Specifies the <xref href="System.Fabric.DataLossMode" data-throw-if-not-resolved="false"></xref> i.e. the options for inducing data loss.
    - id: operationTimeout
      type: System.TimeSpan
      description: The overall timeout for the operation
    return:
      type: System.Threading.Tasks.Task{System.Fabric.Result.InvokeDataLossResult}
      description: InvokeDataLossResult which gives information about the Partition that was selected for data loss.
  overload: System.Fabric.FabricClient.TestManagementClient.InvokeDataLossAsync*
  exceptions:
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: Action took more than its allocated time.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Any of the required arguments are null.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: If the API is called for a partition belonging to a stateless service.
  - type: System.Fabric.FabricException
    commentId: T:System.Fabric.FabricException
    description: >-
      These are the fabric failures

      FabricErrorCode.PartitionNotFound - if the specified partition selected does not exist.
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: This api is deprecated, use StartPartitionDataLossAsync instead.  StartPartitionDataLossAsync requires the FaultAnalysisService
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.TestManagementClient.InvokeDataLossAsync(System.Fabric.PartitionSelector,System.Fabric.DataLossMode,System.TimeSpan,System.Threading.CancellationToken)
  commentId: M:System.Fabric.FabricClient.TestManagementClient.InvokeDataLossAsync(System.Fabric.PartitionSelector,System.Fabric.DataLossMode,System.TimeSpan,System.Threading.CancellationToken)
  id: InvokeDataLossAsync(System.Fabric.PartitionSelector,System.Fabric.DataLossMode,System.TimeSpan,System.Threading.CancellationToken)
  parent: System.Fabric.FabricClient.TestManagementClient
  langs:
  - csharp
  - vb
  name: InvokeDataLossAsync(PartitionSelector, DataLossMode, TimeSpan, CancellationToken)
  nameWithType: FabricClient.TestManagementClient.InvokeDataLossAsync(PartitionSelector, DataLossMode, TimeSpan, CancellationToken)
  fullName: System.Fabric.FabricClient.TestManagementClient.InvokeDataLossAsync(System.Fabric.PartitionSelector, System.Fabric.DataLossMode, System.TimeSpan, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.TestManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: InvokeDataLossAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.TestManagementClient.cs
    startLine: 415
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\nThis API will induce data loss for the specified partition. It will trigger a call to the OnDataLoss API of the partition.\n"
  remarks: "\n<p>\nActual data loss will depend on the specified <xref href=\"System.Fabric.DataLossMode\" data-throw-if-not-resolved=\"false\"></xref>\nPartialDataLoss - PartialDataLoss - Only a quorum of replicas are removed and OnDataLoss is triggered for the partition but actual data loss depends on presence of in-flight replication.\nFullDataLoss - All replicas are removed hence all data is lost and OnDataLoss is triggered.\n</p>\n<p>\nThis API should only be called with a stateful service as the target.\n</p>\n<p>\nCalling this API with a system service as the target is not advised.\n</p>            \n<p>\nImportant note:  this API should not be aborted while running.  Aborting this API while it is running may leave state behind.  \nIf this API is aborted while running, CleanTestStateAsync() should be invoked to remove state that may have been left behind.\n</p>\n"
  example: []
  syntax:
    content: >-
      [Obsolete("This api is deprecated, use StartPartitionDataLossAsync instead.  StartPartitionDataLossAsync requires the FaultAnalysisService")]

      public Task<InvokeDataLossResult> InvokeDataLossAsync(PartitionSelector partitionSelector, DataLossMode dataLossMode, TimeSpan operationTimeout, CancellationToken cancellationToken)
    content.vb: >-
      <Obsolete("This api is deprecated, use StartPartitionDataLossAsync instead.  StartPartitionDataLossAsync requires the FaultAnalysisService")>

      Public Function InvokeDataLossAsync(partitionSelector As PartitionSelector, dataLossMode As DataLossMode, operationTimeout As TimeSpan, cancellationToken As CancellationToken) As Task(Of InvokeDataLossResult)
    parameters:
    - id: partitionSelector
      type: System.Fabric.PartitionSelector
      description: The <xref href="System.Fabric.PartitionSelector" data-throw-if-not-resolved="false"></xref> to specify which partition data loss needs to be induced for.
    - id: dataLossMode
      type: System.Fabric.DataLossMode
      description: Specifies the <xref href="System.Fabric.DataLossMode" data-throw-if-not-resolved="false"></xref> i.e. the options for inducing data loss.
    - id: operationTimeout
      type: System.TimeSpan
      description: The overall timeout for the operation
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: Cancellation token
    return:
      type: System.Threading.Tasks.Task{System.Fabric.Result.InvokeDataLossResult}
      description: InvokeDataLossResult which gives information about the Partition that was selected for data loss.
  overload: System.Fabric.FabricClient.TestManagementClient.InvokeDataLossAsync*
  exceptions:
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: Action took more than its allocated time.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Any of the required arguments are null.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: If the API is called for a partition belonging to a stateless service.
  - type: System.Fabric.FabricException
    commentId: T:System.Fabric.FabricException
    description: >-
      These are the fabric failures

      FabricErrorCode.PartitionNotFound - if the specified partition selected does not exist.
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: This api is deprecated, use StartPartitionDataLossAsync instead.  StartPartitionDataLossAsync requires the FaultAnalysisService
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.TestManagementClient.StartPartitionQuorumLossAsync(System.Guid,System.Fabric.PartitionSelector,System.Fabric.QuorumLossMode,System.TimeSpan)
  commentId: M:System.Fabric.FabricClient.TestManagementClient.StartPartitionQuorumLossAsync(System.Guid,System.Fabric.PartitionSelector,System.Fabric.QuorumLossMode,System.TimeSpan)
  id: StartPartitionQuorumLossAsync(System.Guid,System.Fabric.PartitionSelector,System.Fabric.QuorumLossMode,System.TimeSpan)
  parent: System.Fabric.FabricClient.TestManagementClient
  langs:
  - csharp
  - vb
  name: StartPartitionQuorumLossAsync(Guid, PartitionSelector, QuorumLossMode, TimeSpan)
  nameWithType: FabricClient.TestManagementClient.StartPartitionQuorumLossAsync(Guid, PartitionSelector, QuorumLossMode, TimeSpan)
  fullName: System.Fabric.FabricClient.TestManagementClient.StartPartitionQuorumLossAsync(System.Guid, System.Fabric.PartitionSelector, System.Fabric.QuorumLossMode, System.TimeSpan)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.TestManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: StartPartitionQuorumLossAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.TestManagementClient.cs
    startLine: 550
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: 'Induces quorum loss for a given stateful service partition. '
  remarks: "\n<p>\nFullQuorumLoss - All replicas for the target partition will be downed.\nPartialQuorumLoss - A quorum of replicas for the target partition will be downed..\n</p>\n<p>\nquorumLossMode indicates the number of replicas that will be faulted in order to cause quorum loss. The partition will remain in quorum loss for quorumLossDuration.\n</p>\n<p>\nThis API should only be called with a stateful service as the target.\n</p>\n<p>\nCalling this API with a system service as the target is not advised.\n</p>\n<p>\nThe FaultAnalysisService must be enabled to use this API.\n</p>\n"
  example: []
  syntax:
    content: public Task StartPartitionQuorumLossAsync(Guid operationId, PartitionSelector partitionSelector, QuorumLossMode quorumLossMode, TimeSpan quorumLossDuration)
    content.vb: Public Function StartPartitionQuorumLossAsync(operationId As Guid, partitionSelector As PartitionSelector, quorumLossMode As QuorumLossMode, quorumLossDuration As TimeSpan) As Task
    parameters:
    - id: operationId
      type: System.Guid
      description: A user-provided identifier.  This identifier can also be passed into the corresponding GetProgress API
    - id: partitionSelector
      type: System.Fabric.PartitionSelector
      description: Partition which the quorum loss will be invoked. <xref href="System.Fabric.PartitionSelector" data-throw-if-not-resolved="false"></xref>
    - id: quorumLossMode
      type: System.Fabric.QuorumLossMode
      description: PartialQuorumLoss or FullQuorumLoss.
    - id: quorumLossDuration
      type: System.TimeSpan
      description: Amount of time for which the partition will be kept in quorum loss.
    return:
      type: System.Threading.Tasks.Task
      description: A task.
  overload: System.Fabric.FabricClient.TestManagementClient.StartPartitionQuorumLossAsync*
  exceptions:
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: Action took more than its allocated time.
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: Async operation is canceled.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: Partition specified is not a part of a stateful Persisted Service.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.TestManagementClient.StartPartitionQuorumLossAsync(System.Guid,System.Fabric.PartitionSelector,System.Fabric.QuorumLossMode,System.TimeSpan,System.Threading.CancellationToken)
  commentId: M:System.Fabric.FabricClient.TestManagementClient.StartPartitionQuorumLossAsync(System.Guid,System.Fabric.PartitionSelector,System.Fabric.QuorumLossMode,System.TimeSpan,System.Threading.CancellationToken)
  id: StartPartitionQuorumLossAsync(System.Guid,System.Fabric.PartitionSelector,System.Fabric.QuorumLossMode,System.TimeSpan,System.Threading.CancellationToken)
  parent: System.Fabric.FabricClient.TestManagementClient
  langs:
  - csharp
  - vb
  name: StartPartitionQuorumLossAsync(Guid, PartitionSelector, QuorumLossMode, TimeSpan, CancellationToken)
  nameWithType: FabricClient.TestManagementClient.StartPartitionQuorumLossAsync(Guid, PartitionSelector, QuorumLossMode, TimeSpan, CancellationToken)
  fullName: System.Fabric.FabricClient.TestManagementClient.StartPartitionQuorumLossAsync(System.Guid, System.Fabric.PartitionSelector, System.Fabric.QuorumLossMode, System.TimeSpan, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.TestManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: StartPartitionQuorumLossAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.TestManagementClient.cs
    startLine: 593
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: 'Induces quorum loss for a given stateful service partition. '
  remarks: "\n<p>\nFullQuorumLoss - All replicas for the target partition will be downed.\nPartialQuorumLoss - A quorum of replicas for the target partition will be downed..\n</p>\n<p>\nquorumLossMode indicates the number of replicas that will be faulted in order to cause quorum loss. The partition will remain in quorum loss for quorumLossDuration.\n</p>\n<p>\nThis API should only be called with a stateful service as the target.\n</p>\n<p>\nCalling this API with a system service as the target is not advised.\n</p>\n<p>\nThe FaultAnalysisService must be enabled to use this API.\n</p>\n"
  example: []
  syntax:
    content: public Task StartPartitionQuorumLossAsync(Guid operationId, PartitionSelector partitionSelector, QuorumLossMode quorumLossMode, TimeSpan quorumLossDuration, CancellationToken cancellationToken)
    content.vb: Public Function StartPartitionQuorumLossAsync(operationId As Guid, partitionSelector As PartitionSelector, quorumLossMode As QuorumLossMode, quorumLossDuration As TimeSpan, cancellationToken As CancellationToken) As Task
    parameters:
    - id: operationId
      type: System.Guid
      description: A user-provided identifier.  This identifier can also be passed into the corresponding GetProgress API
    - id: partitionSelector
      type: System.Fabric.PartitionSelector
      description: Partition which the quorum loss will be invoked. <xref href="System.Fabric.PartitionSelector" data-throw-if-not-resolved="false"></xref>
    - id: quorumLossMode
      type: System.Fabric.QuorumLossMode
      description: PartialQuorumLoss or FullQuorumLoss.
    - id: quorumLossDuration
      type: System.TimeSpan
      description: Amount of time for which the partition will be kept in quorum loss.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token for the operation.
    return:
      type: System.Threading.Tasks.Task
      description: A task.
  overload: System.Fabric.FabricClient.TestManagementClient.StartPartitionQuorumLossAsync*
  exceptions:
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: Action took more than its allocated time.
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: Async operation is canceled.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: Partition specified is not a part of a stateful Persisted Service.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.TestManagementClient.StartPartitionQuorumLossAsync(System.Guid,System.Fabric.PartitionSelector,System.Fabric.QuorumLossMode,System.TimeSpan,System.TimeSpan)
  commentId: M:System.Fabric.FabricClient.TestManagementClient.StartPartitionQuorumLossAsync(System.Guid,System.Fabric.PartitionSelector,System.Fabric.QuorumLossMode,System.TimeSpan,System.TimeSpan)
  id: StartPartitionQuorumLossAsync(System.Guid,System.Fabric.PartitionSelector,System.Fabric.QuorumLossMode,System.TimeSpan,System.TimeSpan)
  parent: System.Fabric.FabricClient.TestManagementClient
  langs:
  - csharp
  - vb
  name: StartPartitionQuorumLossAsync(Guid, PartitionSelector, QuorumLossMode, TimeSpan, TimeSpan)
  nameWithType: FabricClient.TestManagementClient.StartPartitionQuorumLossAsync(Guid, PartitionSelector, QuorumLossMode, TimeSpan, TimeSpan)
  fullName: System.Fabric.FabricClient.TestManagementClient.StartPartitionQuorumLossAsync(System.Guid, System.Fabric.PartitionSelector, System.Fabric.QuorumLossMode, System.TimeSpan, System.TimeSpan)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.TestManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: StartPartitionQuorumLossAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.TestManagementClient.cs
    startLine: 637
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: 'Induces quorum loss for a given stateful service partition. '
  remarks: "\n<p>\nFullQuorumLoss - All replicas for the target partition will be downed.\nPartialQuorumLoss - A quorum of replicas for the target partition will be downed..\n</p>\n<p>\nquorumLossMode indicates the number of replicas that will be faulted in order to cause quorum loss. The partition will remain in quorum loss for quorumLossDuration.\n</p>\n<p>\nThis API should only be called with a stateful service as the target.\n</p>\n<p>\nCalling this API with a system service as the target is not advised.\n</p>\n<p>\nThe FaultAnalysisService must be enabled to use this API.\n</p>\n"
  example: []
  syntax:
    content: public Task StartPartitionQuorumLossAsync(Guid operationId, PartitionSelector partitionSelector, QuorumLossMode quorumLossMode, TimeSpan quorumLossDuration, TimeSpan operationTimeout)
    content.vb: Public Function StartPartitionQuorumLossAsync(operationId As Guid, partitionSelector As PartitionSelector, quorumLossMode As QuorumLossMode, quorumLossDuration As TimeSpan, operationTimeout As TimeSpan) As Task
    parameters:
    - id: operationId
      type: System.Guid
      description: A user-provided identifier.  This identifier can also be passed into the corresponding GetProgress API
    - id: partitionSelector
      type: System.Fabric.PartitionSelector
      description: Partition which the quorum loss will be invoked. <xref href="System.Fabric.PartitionSelector" data-throw-if-not-resolved="false"></xref>
    - id: quorumLossMode
      type: System.Fabric.QuorumLossMode
      description: PartialQuorumLoss or FullQuorumLoss.
    - id: quorumLossDuration
      type: System.TimeSpan
      description: Amount of time for which the partition will be kept in quorum loss.
    - id: operationTimeout
      type: System.TimeSpan
      description: Overall timeout for the entire operation.
    return:
      type: System.Threading.Tasks.Task
      description: A task.
  overload: System.Fabric.FabricClient.TestManagementClient.StartPartitionQuorumLossAsync*
  exceptions:
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: Action took more than its allocated time.
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: Async operation is canceled.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: Partition specified is not a part of a stateful Persisted Service.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.TestManagementClient.StartPartitionQuorumLossAsync(System.Guid,System.Fabric.PartitionSelector,System.Fabric.QuorumLossMode,System.TimeSpan,System.TimeSpan,System.Threading.CancellationToken)
  commentId: M:System.Fabric.FabricClient.TestManagementClient.StartPartitionQuorumLossAsync(System.Guid,System.Fabric.PartitionSelector,System.Fabric.QuorumLossMode,System.TimeSpan,System.TimeSpan,System.Threading.CancellationToken)
  id: StartPartitionQuorumLossAsync(System.Guid,System.Fabric.PartitionSelector,System.Fabric.QuorumLossMode,System.TimeSpan,System.TimeSpan,System.Threading.CancellationToken)
  parent: System.Fabric.FabricClient.TestManagementClient
  langs:
  - csharp
  - vb
  name: StartPartitionQuorumLossAsync(Guid, PartitionSelector, QuorumLossMode, TimeSpan, TimeSpan, CancellationToken)
  nameWithType: FabricClient.TestManagementClient.StartPartitionQuorumLossAsync(Guid, PartitionSelector, QuorumLossMode, TimeSpan, TimeSpan, CancellationToken)
  fullName: System.Fabric.FabricClient.TestManagementClient.StartPartitionQuorumLossAsync(System.Guid, System.Fabric.PartitionSelector, System.Fabric.QuorumLossMode, System.TimeSpan, System.TimeSpan, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.TestManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: StartPartitionQuorumLossAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.TestManagementClient.cs
    startLine: 683
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: 'Induces quorum loss for a given stateful service partition. '
  remarks: "\n<p>\nFullQuorumLoss - All replicas for the target partition will be downed.\nPartialQuorumLoss - A quorum of replicas for the target partition will be downed..\n</p>\n<p>\nquorumLossMode indicates the number of replicas that will be faulted in order to cause quorum loss. The partition will remain in quorum loss for quorumLossDuration.\n</p>\n<p>\nThis API should only be called with a stateful service as the target.\n</p>\n<p>\nCalling this API with a system service as the target is not advised.\n</p>\n<p>\nThe FaultAnalysisService must be enabled to use this API.\n</p>\n"
  example: []
  syntax:
    content: public Task StartPartitionQuorumLossAsync(Guid operationId, PartitionSelector partitionSelector, QuorumLossMode quorumlossMode, TimeSpan quorumlossDuration, TimeSpan operationTimeout, CancellationToken cancellationToken)
    content.vb: Public Function StartPartitionQuorumLossAsync(operationId As Guid, partitionSelector As PartitionSelector, quorumlossMode As QuorumLossMode, quorumlossDuration As TimeSpan, operationTimeout As TimeSpan, cancellationToken As CancellationToken) As Task
    parameters:
    - id: operationId
      type: System.Guid
      description: A user-provided identifier.  This identifier can also be passed into the corresponding GetProgress API
    - id: partitionSelector
      type: System.Fabric.PartitionSelector
      description: Partition which the quorum loss will be invoked. <xref href="System.Fabric.PartitionSelector" data-throw-if-not-resolved="false"></xref>
    - id: quorumlossMode
      type: System.Fabric.QuorumLossMode
      description: PartialQuorumLoss or FullQuorumLoss.
    - id: quorumlossDuration
      type: System.TimeSpan
      description: Amount of time for which the partition will be kept in quorum loss.
    - id: operationTimeout
      type: System.TimeSpan
      description: Overall timeout for the entire operation.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token for the operation.
    return:
      type: System.Threading.Tasks.Task
      description: A task.
  overload: System.Fabric.FabricClient.TestManagementClient.StartPartitionQuorumLossAsync*
  exceptions:
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: Action took more than its allocated time.
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: Async operation is canceled.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: Partition specified is not a part of a stateful Persisted Service.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.TestManagementClient.InvokeQuorumLossAsync(System.Fabric.PartitionSelector,System.Fabric.QuorumLossMode,System.TimeSpan)
  commentId: M:System.Fabric.FabricClient.TestManagementClient.InvokeQuorumLossAsync(System.Fabric.PartitionSelector,System.Fabric.QuorumLossMode,System.TimeSpan)
  id: InvokeQuorumLossAsync(System.Fabric.PartitionSelector,System.Fabric.QuorumLossMode,System.TimeSpan)
  parent: System.Fabric.FabricClient.TestManagementClient
  langs:
  - csharp
  - vb
  name: InvokeQuorumLossAsync(PartitionSelector, QuorumLossMode, TimeSpan)
  nameWithType: FabricClient.TestManagementClient.InvokeQuorumLossAsync(PartitionSelector, QuorumLossMode, TimeSpan)
  fullName: System.Fabric.FabricClient.TestManagementClient.InvokeQuorumLossAsync(System.Fabric.PartitionSelector, System.Fabric.QuorumLossMode, System.TimeSpan)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.TestManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: InvokeQuorumLossAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.TestManagementClient.cs
    startLine: 729
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: 'Induces quorum loss for a given stateful service partition. '
  remarks: "\n<p>\nFullQuorumLoss - All replicas for the target partition will be downed.\nPartialQuorumLoss - A quorum of replicas for the target partition will be downed..\n</p>\n<p>\nquorumLossMode indicates the number of replicas that will be faulted in order to cause quorum loss. The partition will remain in quorum loss for quorumLossDuration.\n</p>\n<p>\nThis API should only be called with a stateful service as the target.\n</p>\n<p>\nCalling this API with a system service as the target is not advised.                 \n</p>            \n<p>\nImportant note:  this API should not be aborted while running.  Aborting this API while it is running may leave state behind.  \nIf this API is aborted while running, CleanTestStateAsync() should be invoked to remove state that may have been left behind.\n</p>\n"
  example: []
  syntax:
    content: >-
      [Obsolete("This api is deprecated, use StartPartitionQuorumLossAsync instead.  StartPartitionQuorumLossAsync requires the FaultAnalysisService")]

      public Task<InvokeQuorumLossResult> InvokeQuorumLossAsync(PartitionSelector partitionSelector, QuorumLossMode quorumLossMode, TimeSpan quorumLossDuration)
    content.vb: >-
      <Obsolete("This api is deprecated, use StartPartitionQuorumLossAsync instead.  StartPartitionQuorumLossAsync requires the FaultAnalysisService")>

      Public Function InvokeQuorumLossAsync(partitionSelector As PartitionSelector, quorumLossMode As QuorumLossMode, quorumLossDuration As TimeSpan) As Task(Of InvokeQuorumLossResult)
    parameters:
    - id: partitionSelector
      type: System.Fabric.PartitionSelector
      description: Partition which the quorum loss will be invoked. <xref href="System.Fabric.PartitionSelector" data-throw-if-not-resolved="false"></xref>
    - id: quorumLossMode
      type: System.Fabric.QuorumLossMode
      description: PartialQuorumLoss or FullQuorumLoss.
    - id: quorumLossDuration
      type: System.TimeSpan
      description: Amount of time for which the partition will be kept in quorum loss.
    return:
      type: System.Threading.Tasks.Task{System.Fabric.Result.InvokeQuorumLossResult}
      description: InvokeQuorumLossResult <xref href="System.Fabric.Result.InvokeQuorumLossResult" data-throw-if-not-resolved="false"></xref>
  overload: System.Fabric.FabricClient.TestManagementClient.InvokeQuorumLossAsync*
  exceptions:
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: Action took more than its allocated time.
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: Async operation is canceled.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: Partition specified is not a part of a stateful Persisted Service.
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: This api is deprecated, use StartPartitionQuorumLossAsync instead.  StartPartitionQuorumLossAsync requires the FaultAnalysisService
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.TestManagementClient.InvokeQuorumLossAsync(System.Fabric.PartitionSelector,System.Fabric.QuorumLossMode,System.TimeSpan,System.Threading.CancellationToken)
  commentId: M:System.Fabric.FabricClient.TestManagementClient.InvokeQuorumLossAsync(System.Fabric.PartitionSelector,System.Fabric.QuorumLossMode,System.TimeSpan,System.Threading.CancellationToken)
  id: InvokeQuorumLossAsync(System.Fabric.PartitionSelector,System.Fabric.QuorumLossMode,System.TimeSpan,System.Threading.CancellationToken)
  parent: System.Fabric.FabricClient.TestManagementClient
  langs:
  - csharp
  - vb
  name: InvokeQuorumLossAsync(PartitionSelector, QuorumLossMode, TimeSpan, CancellationToken)
  nameWithType: FabricClient.TestManagementClient.InvokeQuorumLossAsync(PartitionSelector, QuorumLossMode, TimeSpan, CancellationToken)
  fullName: System.Fabric.FabricClient.TestManagementClient.InvokeQuorumLossAsync(System.Fabric.PartitionSelector, System.Fabric.QuorumLossMode, System.TimeSpan, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.TestManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: InvokeQuorumLossAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.TestManagementClient.cs
    startLine: 771
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: 'Induces quorum loss for a given stateful service partition. '
  remarks: "\n<p>\nFullQuorumLoss - All replicas for the target partition will be downed.\nPartialQuorumLoss - A quorum of replicas for the target partition will be downed..\n</p>\n<p>\nquorumLossMode indicates the number of replicas that will be faulted in order to cause quorum loss. The partition will remain in quorum loss for quorumLossDuration.\n</p>\n<p>\nThis API should only be called with a stateful service as the target.\n</p>\n<p>\nCalling this API with a system service as the target is not advised.\n</p>            \n<p>\nImportant note:  this API should not be aborted while running.  Aborting this API while it is running may leave state behind.  \nIf this API is aborted while running, CleanTestStateAsync() should be invoked to remove state that may have been left behind.\n</p>\n"
  example: []
  syntax:
    content: >-
      [Obsolete("This api is deprecated, use StartPartitionQuorumLossAsync instead.  StartPartitionQuorumLossAsync requires the FaultAnalysisService")]

      public Task<InvokeQuorumLossResult> InvokeQuorumLossAsync(PartitionSelector partitionSelector, QuorumLossMode quorumLossMode, TimeSpan quorumLossDuration, CancellationToken cancellationToken)
    content.vb: >-
      <Obsolete("This api is deprecated, use StartPartitionQuorumLossAsync instead.  StartPartitionQuorumLossAsync requires the FaultAnalysisService")>

      Public Function InvokeQuorumLossAsync(partitionSelector As PartitionSelector, quorumLossMode As QuorumLossMode, quorumLossDuration As TimeSpan, cancellationToken As CancellationToken) As Task(Of InvokeQuorumLossResult)
    parameters:
    - id: partitionSelector
      type: System.Fabric.PartitionSelector
      description: Partition which the quorum loss will be invoked. <xref href="System.Fabric.PartitionSelector" data-throw-if-not-resolved="false"></xref>
    - id: quorumLossMode
      type: System.Fabric.QuorumLossMode
      description: PartialQuorumLoss or FullQuorumLoss.
    - id: quorumLossDuration
      type: System.TimeSpan
      description: Amount of time for which the partition will be kept in quorum loss.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token for the operation.
    return:
      type: System.Threading.Tasks.Task{System.Fabric.Result.InvokeQuorumLossResult}
      description: InvokeQuorumLossResult <xref href="System.Fabric.Result.InvokeQuorumLossResult" data-throw-if-not-resolved="false"></xref>
  overload: System.Fabric.FabricClient.TestManagementClient.InvokeQuorumLossAsync*
  exceptions:
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: Action took more than its allocated time.
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: Async operation is canceled.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: Partition specified is not a part of a stateful Persisted Service.
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: This api is deprecated, use StartPartitionQuorumLossAsync instead.  StartPartitionQuorumLossAsync requires the FaultAnalysisService
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.TestManagementClient.InvokeQuorumLossAsync(System.Fabric.PartitionSelector,System.Fabric.QuorumLossMode,System.TimeSpan,System.TimeSpan)
  commentId: M:System.Fabric.FabricClient.TestManagementClient.InvokeQuorumLossAsync(System.Fabric.PartitionSelector,System.Fabric.QuorumLossMode,System.TimeSpan,System.TimeSpan)
  id: InvokeQuorumLossAsync(System.Fabric.PartitionSelector,System.Fabric.QuorumLossMode,System.TimeSpan,System.TimeSpan)
  parent: System.Fabric.FabricClient.TestManagementClient
  langs:
  - csharp
  - vb
  name: InvokeQuorumLossAsync(PartitionSelector, QuorumLossMode, TimeSpan, TimeSpan)
  nameWithType: FabricClient.TestManagementClient.InvokeQuorumLossAsync(PartitionSelector, QuorumLossMode, TimeSpan, TimeSpan)
  fullName: System.Fabric.FabricClient.TestManagementClient.InvokeQuorumLossAsync(System.Fabric.PartitionSelector, System.Fabric.QuorumLossMode, System.TimeSpan, System.TimeSpan)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.TestManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: InvokeQuorumLossAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.TestManagementClient.cs
    startLine: 814
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: 'Induces quorum loss for a given stateful service partition. '
  remarks: "\n<p>\nFullQuorumLoss - All replicas for the target partition will be downed.\nPartialQuorumLoss - A quorum of replicas for the target partition will be downed..\n</p>\n<p>\nquorumLossMode indicates the number of replicas that will be faulted in order to cause quorum loss. The partition will remain in quorum loss for quorumLossDuration.\n</p>\n<p>\nThis API should only be called with a stateful service as the target.\n</p>\n<p>\nCalling this API with a system service as the target is not advised.\n</p>            \n<p>\nImportant note:  this API should not be aborted while running.  Aborting this API while it is running may leave state behind.  \nIf this API is aborted while running, CleanTestStateAsync() should be invoked to remove state that may have been left behind.\n</p>\n"
  example: []
  syntax:
    content: >-
      [Obsolete("This api is deprecated, use StartPartitionQuorumLossAsync instead.  StartPartitionQuorumLossAsync requires the FaultAnalysisService")]

      public Task<InvokeQuorumLossResult> InvokeQuorumLossAsync(PartitionSelector partitionSelector, QuorumLossMode quorumLossMode, TimeSpan quorumLossDuration, TimeSpan operationTimeout)
    content.vb: >-
      <Obsolete("This api is deprecated, use StartPartitionQuorumLossAsync instead.  StartPartitionQuorumLossAsync requires the FaultAnalysisService")>

      Public Function InvokeQuorumLossAsync(partitionSelector As PartitionSelector, quorumLossMode As QuorumLossMode, quorumLossDuration As TimeSpan, operationTimeout As TimeSpan) As Task(Of InvokeQuorumLossResult)
    parameters:
    - id: partitionSelector
      type: System.Fabric.PartitionSelector
      description: Partition which the quorum loss will be invoked. <xref href="System.Fabric.PartitionSelector" data-throw-if-not-resolved="false"></xref>
    - id: quorumLossMode
      type: System.Fabric.QuorumLossMode
      description: PartialQuorumLoss or FullQuorumLoss.
    - id: quorumLossDuration
      type: System.TimeSpan
      description: Amount of time for which the partition will be kept in quorum loss.
    - id: operationTimeout
      type: System.TimeSpan
      description: Overall timeout for the entire operation.
    return:
      type: System.Threading.Tasks.Task{System.Fabric.Result.InvokeQuorumLossResult}
      description: InvokeQuorumLossResult <xref href="System.Fabric.Result.InvokeQuorumLossResult" data-throw-if-not-resolved="false"></xref>
  overload: System.Fabric.FabricClient.TestManagementClient.InvokeQuorumLossAsync*
  exceptions:
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: Action took more than its allocated time.
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: Async operation is canceled.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: Partition specified is not a part of a stateful Persisted Service.
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: This api is deprecated, use StartPartitionQuorumLossAsync instead.  StartPartitionQuorumLossAsync requires the FaultAnalysisService
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.TestManagementClient.InvokeQuorumLossAsync(System.Fabric.PartitionSelector,System.Fabric.QuorumLossMode,System.TimeSpan,System.TimeSpan,System.Threading.CancellationToken)
  commentId: M:System.Fabric.FabricClient.TestManagementClient.InvokeQuorumLossAsync(System.Fabric.PartitionSelector,System.Fabric.QuorumLossMode,System.TimeSpan,System.TimeSpan,System.Threading.CancellationToken)
  id: InvokeQuorumLossAsync(System.Fabric.PartitionSelector,System.Fabric.QuorumLossMode,System.TimeSpan,System.TimeSpan,System.Threading.CancellationToken)
  parent: System.Fabric.FabricClient.TestManagementClient
  langs:
  - csharp
  - vb
  name: InvokeQuorumLossAsync(PartitionSelector, QuorumLossMode, TimeSpan, TimeSpan, CancellationToken)
  nameWithType: FabricClient.TestManagementClient.InvokeQuorumLossAsync(PartitionSelector, QuorumLossMode, TimeSpan, TimeSpan, CancellationToken)
  fullName: System.Fabric.FabricClient.TestManagementClient.InvokeQuorumLossAsync(System.Fabric.PartitionSelector, System.Fabric.QuorumLossMode, System.TimeSpan, System.TimeSpan, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.TestManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: InvokeQuorumLossAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.TestManagementClient.cs
    startLine: 858
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: 'Induces quorum loss for a given stateful service partition. '
  remarks: "\n<p>\nFullQuorumLoss - All replicas for the target partition will be downed.\nPartialQuorumLoss - A quorum of replicas for the target partition will be downed..\n</p>\n<p>\nquorumLossMode indicates the number of replicas that will be faulted in order to cause quorum loss. The partition will remain in quorum loss for quorumLossDuration.\n</p>\n<p>\nThis API should only be called with a stateful service as the target.\n</p>\n<p>\nCalling this API with a system service as the target is not advised.\n</p>            \n<p>\nImportant note:  this API should not be aborted while running.  Aborting this API while it is running may leave state behind.  \nIf this API is aborted while running, CleanTestStateAsync() should be invoked to remove state that may have been left behind.\n</p>\n"
  example: []
  syntax:
    content: >-
      [Obsolete("This api is deprecated, use StartPartitionQuorumLossAsync instead.  StartPartitionQuorumLossAsync requires the FaultAnalysisService")]

      public Task<InvokeQuorumLossResult> InvokeQuorumLossAsync(PartitionSelector partitionSelector, QuorumLossMode quorumlossMode, TimeSpan quorumlossDuration, TimeSpan operationTimeout, CancellationToken cancellationToken)
    content.vb: >-
      <Obsolete("This api is deprecated, use StartPartitionQuorumLossAsync instead.  StartPartitionQuorumLossAsync requires the FaultAnalysisService")>

      Public Function InvokeQuorumLossAsync(partitionSelector As PartitionSelector, quorumlossMode As QuorumLossMode, quorumlossDuration As TimeSpan, operationTimeout As TimeSpan, cancellationToken As CancellationToken) As Task(Of InvokeQuorumLossResult)
    parameters:
    - id: partitionSelector
      type: System.Fabric.PartitionSelector
      description: Partition which the quorum loss will be invoked. <xref href="System.Fabric.PartitionSelector" data-throw-if-not-resolved="false"></xref>
    - id: quorumlossMode
      type: System.Fabric.QuorumLossMode
      description: PartialQuorumLoss or FullQuorumLoss.
    - id: quorumlossDuration
      type: System.TimeSpan
      description: Amount of time for which the partition will be kept in quorum loss.
    - id: operationTimeout
      type: System.TimeSpan
      description: Overall timeout for the entire operation.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token for the operation.
    return:
      type: System.Threading.Tasks.Task{System.Fabric.Result.InvokeQuorumLossResult}
      description: InvokeQuorumLossResult <xref href="System.Fabric.Result.InvokeQuorumLossResult" data-throw-if-not-resolved="false"></xref>
  overload: System.Fabric.FabricClient.TestManagementClient.InvokeQuorumLossAsync*
  exceptions:
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: Action took more than its allocated time.
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: Async operation is canceled.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: Partition specified is not a part of a stateful Persisted Service.
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: This api is deprecated, use StartPartitionQuorumLossAsync instead.  StartPartitionQuorumLossAsync requires the FaultAnalysisService
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.TestManagementClient.StartPartitionRestartAsync(System.Guid,System.Fabric.PartitionSelector,System.Fabric.RestartPartitionMode)
  commentId: M:System.Fabric.FabricClient.TestManagementClient.StartPartitionRestartAsync(System.Guid,System.Fabric.PartitionSelector,System.Fabric.RestartPartitionMode)
  id: StartPartitionRestartAsync(System.Guid,System.Fabric.PartitionSelector,System.Fabric.RestartPartitionMode)
  parent: System.Fabric.FabricClient.TestManagementClient
  langs:
  - csharp
  - vb
  name: StartPartitionRestartAsync(Guid, PartitionSelector, RestartPartitionMode)
  nameWithType: FabricClient.TestManagementClient.StartPartitionRestartAsync(Guid, PartitionSelector, RestartPartitionMode)
  fullName: System.Fabric.FabricClient.TestManagementClient.StartPartitionRestartAsync(System.Guid, System.Fabric.PartitionSelector, System.Fabric.RestartPartitionMode)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.TestManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: StartPartitionRestartAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.TestManagementClient.cs
    startLine: 920
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\nThis API will restart some or all the replicas of a partition at the same time (ensures all the replicas are down concurrently) depending on the <xref href=\"System.Fabric.RestartPartitionMode\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  remarks: "\n<p>\nThis API is useful to test the recovery time of a partition after a full or partial restart and also to test failover.\n</p>\n<p>\nThis API should only be called with a stateful service as the target.\n</p>\n<p>\nThe FaultAnalysisService must be enabled to use this API.\n</p>\n"
  example: []
  syntax:
    content: public Task StartPartitionRestartAsync(Guid operationId, PartitionSelector partitionSelector, RestartPartitionMode restartPartitionMode)
    content.vb: Public Function StartPartitionRestartAsync(operationId As Guid, partitionSelector As PartitionSelector, restartPartitionMode As RestartPartitionMode) As Task
    parameters:
    - id: operationId
      type: System.Guid
      description: A GUID that identifies a call of this API; this is passed into the corresponding GetProgress API
    - id: partitionSelector
      type: System.Fabric.PartitionSelector
      description: <xref href="System.Fabric.PartitionSelector" data-throw-if-not-resolved="false"></xref> that specifies the partition which needs to be restarted.
    - id: restartPartitionMode
      type: System.Fabric.RestartPartitionMode
      description: >-
        The <xref href="System.Fabric.RestartPartitionMode" data-throw-if-not-resolved="false"></xref> which can be AllReplicasOrInstances or OnlyActiveSecondaries based on which the replicas to be restarted

        are selected.
    return:
      type: System.Threading.Tasks.Task
      description: A task.
  overload: System.Fabric.FabricClient.TestManagementClient.StartPartitionRestartAsync*
  exceptions:
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: Action took more than its allocated time.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Any of the required arguments are null.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: If the API is called for a partition belonging to a stateless service with <xref href="System.Fabric.RestartPartitionMode" data-throw-if-not-resolved="false"></xref> set to OnlyActiveSecondaries.
  - type: System.Fabric.FabricException
    commentId: T:System.Fabric.FabricException
    description: >-
      These are the fabric failures

      FabricErrorCode.PartitionNotFound - if the specified partition selected does not exist.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.TestManagementClient.StartPartitionRestartAsync(System.Guid,System.Fabric.PartitionSelector,System.Fabric.RestartPartitionMode,System.Threading.CancellationToken)
  commentId: M:System.Fabric.FabricClient.TestManagementClient.StartPartitionRestartAsync(System.Guid,System.Fabric.PartitionSelector,System.Fabric.RestartPartitionMode,System.Threading.CancellationToken)
  id: StartPartitionRestartAsync(System.Guid,System.Fabric.PartitionSelector,System.Fabric.RestartPartitionMode,System.Threading.CancellationToken)
  parent: System.Fabric.FabricClient.TestManagementClient
  langs:
  - csharp
  - vb
  name: StartPartitionRestartAsync(Guid, PartitionSelector, RestartPartitionMode, CancellationToken)
  nameWithType: FabricClient.TestManagementClient.StartPartitionRestartAsync(Guid, PartitionSelector, RestartPartitionMode, CancellationToken)
  fullName: System.Fabric.FabricClient.TestManagementClient.StartPartitionRestartAsync(System.Guid, System.Fabric.PartitionSelector, System.Fabric.RestartPartitionMode, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.TestManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: StartPartitionRestartAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.TestManagementClient.cs
    startLine: 958
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\nThis API will restart some or all the replicas of a partition at the same time (ensures all the replicas are down concurrently) depending on the <xref href=\"System.Fabric.RestartPartitionMode\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  remarks: "\n<p>\nThis API is useful to test the recovery time of a partition after a full or partial restart and also to test failover.\n</p>\n<p>\nThis API should only be called with a stateful service as the target.\n</p>\n<p>\nThe FaultAnalysisService must be enabled to use this API.\n</p>\n"
  example: []
  syntax:
    content: public Task StartPartitionRestartAsync(Guid operationId, PartitionSelector partitionSelector, RestartPartitionMode restartPartitionMode, CancellationToken cancellationToken)
    content.vb: Public Function StartPartitionRestartAsync(operationId As Guid, partitionSelector As PartitionSelector, restartPartitionMode As RestartPartitionMode, cancellationToken As CancellationToken) As Task
    parameters:
    - id: operationId
      type: System.Guid
      description: A GUID that identifies a call of this API; this is passed into the corresponding GetProgress API
    - id: partitionSelector
      type: System.Fabric.PartitionSelector
      description: <xref href="System.Fabric.PartitionSelector" data-throw-if-not-resolved="false"></xref> that specifies the partition which needs to be restarted
    - id: restartPartitionMode
      type: System.Fabric.RestartPartitionMode
      description: >-
        The <xref href="System.Fabric.RestartPartitionMode" data-throw-if-not-resolved="false"></xref> which can be AllReplicasOrInstances or OnlyActiveSecondaries based on which the replicas to be restarted

        are selected.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: Cancellation token
    return:
      type: System.Threading.Tasks.Task
      description: A task.
  overload: System.Fabric.FabricClient.TestManagementClient.StartPartitionRestartAsync*
  exceptions:
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: Action took more than its allocated time.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Any of the required arguments are null.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: If the API is called for a partition belonging to a stateless service with <xref href="System.Fabric.RestartPartitionMode" data-throw-if-not-resolved="false"></xref> set to OnlyActiveSecondaries.
  - type: System.Fabric.FabricException
    commentId: T:System.Fabric.FabricException
    description: >-
      These are the fabric failures

      FabricErrorCode.PartitionNotFound - if the specified partition selected does not exist
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.TestManagementClient.StartPartitionRestartAsync(System.Guid,System.Fabric.PartitionSelector,System.Fabric.RestartPartitionMode,System.TimeSpan)
  commentId: M:System.Fabric.FabricClient.TestManagementClient.StartPartitionRestartAsync(System.Guid,System.Fabric.PartitionSelector,System.Fabric.RestartPartitionMode,System.TimeSpan)
  id: StartPartitionRestartAsync(System.Guid,System.Fabric.PartitionSelector,System.Fabric.RestartPartitionMode,System.TimeSpan)
  parent: System.Fabric.FabricClient.TestManagementClient
  langs:
  - csharp
  - vb
  name: StartPartitionRestartAsync(Guid, PartitionSelector, RestartPartitionMode, TimeSpan)
  nameWithType: FabricClient.TestManagementClient.StartPartitionRestartAsync(Guid, PartitionSelector, RestartPartitionMode, TimeSpan)
  fullName: System.Fabric.FabricClient.TestManagementClient.StartPartitionRestartAsync(System.Guid, System.Fabric.PartitionSelector, System.Fabric.RestartPartitionMode, System.TimeSpan)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.TestManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: StartPartitionRestartAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.TestManagementClient.cs
    startLine: 997
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\nThis API will restart some or all the replicas of a partition at the same time (ensures all the replicas are down concurrently) depending on the <xref href=\"System.Fabric.RestartPartitionMode\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  remarks: "\n<p>\nThis API is useful to test the recovery time of a partition after a full or partial restart and also to test failover.\n</p>\n<p>\nThis API should only be called with a stateful service as the target.\n</p>\n<p>\nThe FaultAnalysisService must be enabled to use this API.\n</p>\n"
  example: []
  syntax:
    content: public Task StartPartitionRestartAsync(Guid operationId, PartitionSelector partitionSelector, RestartPartitionMode restartPartitionMode, TimeSpan operationTimeout)
    content.vb: Public Function StartPartitionRestartAsync(operationId As Guid, partitionSelector As PartitionSelector, restartPartitionMode As RestartPartitionMode, operationTimeout As TimeSpan) As Task
    parameters:
    - id: operationId
      type: System.Guid
      description: A GUID that identifies a call of this API; this is passed into the corresponding GetProgress API
    - id: partitionSelector
      type: System.Fabric.PartitionSelector
      description: <xref href="System.Fabric.PartitionSelector" data-throw-if-not-resolved="false"></xref> that specifies the partition which needs to be restarted.
    - id: restartPartitionMode
      type: System.Fabric.RestartPartitionMode
      description: >-
        The <xref href="System.Fabric.RestartPartitionMode" data-throw-if-not-resolved="false"></xref> which can be AllReplicasOrInstances or OnlyActiveSecondaries based on which the replicas to be restarted

        are selected.
    - id: operationTimeout
      type: System.TimeSpan
      description: The overall timeout for the operation.
    return:
      type: System.Threading.Tasks.Task
      description: A task.
  overload: System.Fabric.FabricClient.TestManagementClient.StartPartitionRestartAsync*
  exceptions:
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: Action took more than its allocated time.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Any of the required arguments are null.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: If the API is called for a partition belonging to a stateless service with <xref href="System.Fabric.RestartPartitionMode" data-throw-if-not-resolved="false"></xref> set to OnlyActiveSecondaries.
  - type: System.Fabric.FabricException
    commentId: T:System.Fabric.FabricException
    description: >-
      These are the fabric failures

      FabricErrorCode.PartitionNotFound - if the specified partition selected does not exist
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.TestManagementClient.StartPartitionRestartAsync(System.Guid,System.Fabric.PartitionSelector,System.Fabric.RestartPartitionMode,System.TimeSpan,System.Threading.CancellationToken)
  commentId: M:System.Fabric.FabricClient.TestManagementClient.StartPartitionRestartAsync(System.Guid,System.Fabric.PartitionSelector,System.Fabric.RestartPartitionMode,System.TimeSpan,System.Threading.CancellationToken)
  id: StartPartitionRestartAsync(System.Guid,System.Fabric.PartitionSelector,System.Fabric.RestartPartitionMode,System.TimeSpan,System.Threading.CancellationToken)
  parent: System.Fabric.FabricClient.TestManagementClient
  langs:
  - csharp
  - vb
  name: StartPartitionRestartAsync(Guid, PartitionSelector, RestartPartitionMode, TimeSpan, CancellationToken)
  nameWithType: FabricClient.TestManagementClient.StartPartitionRestartAsync(Guid, PartitionSelector, RestartPartitionMode, TimeSpan, CancellationToken)
  fullName: System.Fabric.FabricClient.TestManagementClient.StartPartitionRestartAsync(System.Guid, System.Fabric.PartitionSelector, System.Fabric.RestartPartitionMode, System.TimeSpan, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.TestManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: StartPartitionRestartAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.TestManagementClient.cs
    startLine: 1037
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\nThis API will restart some or all the replicas of a partition at the same time (ensures all the replicas are down concurrently) depending on the <xref href=\"System.Fabric.RestartPartitionMode\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  remarks: "\n<p>\nThis API is useful to test the recovery time of a partition after a full or partial restart and also to test failover.\n</p>\n<p>\nThis API should only be called with a stateful service as the target.\n</p>\n<p>\nThe FaultAnalysisService must be enabled to use this API.             \n</p>\n"
  example: []
  syntax:
    content: public Task StartPartitionRestartAsync(Guid operationId, PartitionSelector partitionSelector, RestartPartitionMode restartPartitionMode, TimeSpan operationTimeout, CancellationToken cancellationToken)
    content.vb: Public Function StartPartitionRestartAsync(operationId As Guid, partitionSelector As PartitionSelector, restartPartitionMode As RestartPartitionMode, operationTimeout As TimeSpan, cancellationToken As CancellationToken) As Task
    parameters:
    - id: operationId
      type: System.Guid
      description: A GUID that identifies a call of this API; this is passed into the corresponding GetProgress API
    - id: partitionSelector
      type: System.Fabric.PartitionSelector
      description: <xref href="System.Fabric.PartitionSelector" data-throw-if-not-resolved="false"></xref> that specifies the partition which needs to be restarted.
    - id: restartPartitionMode
      type: System.Fabric.RestartPartitionMode
      description: >-
        The <xref href="System.Fabric.RestartPartitionMode" data-throw-if-not-resolved="false"></xref> which can be AllReplicasOrInstances or OnlyActiveSecondaries based on which the replicas to be restarted

        are selected.
    - id: operationTimeout
      type: System.TimeSpan
      description: The overall timeout for the operation.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: Cancellation token
    return:
      type: System.Threading.Tasks.Task
      description: A task.
  overload: System.Fabric.FabricClient.TestManagementClient.StartPartitionRestartAsync*
  exceptions:
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: Action took more than its allocated time.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Any of the required arguments are null.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: If the API is called for a partition belonging to a stateless service with <xref href="System.Fabric.RestartPartitionMode" data-throw-if-not-resolved="false"></xref> set to OnlyActiveSecondaries.
  - type: System.Fabric.FabricException
    commentId: T:System.Fabric.FabricException
    description: >-
      These are the fabric failures

      FabricErrorCode.PartitionNotFound - if the specified partition selected does not exist
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.TestManagementClient.RestartPartitionAsync(System.Fabric.PartitionSelector,System.Fabric.RestartPartitionMode)
  commentId: M:System.Fabric.FabricClient.TestManagementClient.RestartPartitionAsync(System.Fabric.PartitionSelector,System.Fabric.RestartPartitionMode)
  id: RestartPartitionAsync(System.Fabric.PartitionSelector,System.Fabric.RestartPartitionMode)
  parent: System.Fabric.FabricClient.TestManagementClient
  langs:
  - csharp
  - vb
  name: RestartPartitionAsync(PartitionSelector, RestartPartitionMode)
  nameWithType: FabricClient.TestManagementClient.RestartPartitionAsync(PartitionSelector, RestartPartitionMode)
  fullName: System.Fabric.FabricClient.TestManagementClient.RestartPartitionAsync(System.Fabric.PartitionSelector, System.Fabric.RestartPartitionMode)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.TestManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: RestartPartitionAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.TestManagementClient.cs
    startLine: 1078
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\nThis API will restart some or all the replicas of a partition at the same time (ensures all the replicas are down concurrently) depending on the <xref href=\"System.Fabric.RestartPartitionMode\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  remarks: "\n<p>\nThis API is useful to test the recovery time of a partition after a full or partial restart and also to test failover.\n</p>\n<p>\nThis API should only be called with a stateful service as the target.\n</p>            \n<p>\nImportant note:  this API should not be aborted while running.  Aborting this API while it is running may leave state behind.  \nIf this API is aborted while running, CleanTestStateAsync() should be invoked to remove state that may have been left behind.\n</p>\n"
  example: []
  syntax:
    content: >-
      [Obsolete("This api is deprecated, use StartPartitionRestartAsync instead.  StartPartitionRestartAsync requires the FaultAnalysisService")]

      public Task<RestartPartitionResult> RestartPartitionAsync(PartitionSelector partitionSelector, RestartPartitionMode restartPartitionMode)
    content.vb: >-
      <Obsolete("This api is deprecated, use StartPartitionRestartAsync instead.  StartPartitionRestartAsync requires the FaultAnalysisService")>

      Public Function RestartPartitionAsync(partitionSelector As PartitionSelector, restartPartitionMode As RestartPartitionMode) As Task(Of RestartPartitionResult)
    parameters:
    - id: partitionSelector
      type: System.Fabric.PartitionSelector
      description: <xref href="System.Fabric.PartitionSelector" data-throw-if-not-resolved="false"></xref> that specifies the partition which needs to be restarted.
    - id: restartPartitionMode
      type: System.Fabric.RestartPartitionMode
      description: >-
        The <xref href="System.Fabric.RestartPartitionMode" data-throw-if-not-resolved="false"></xref> which can be AllReplicasOrInstances or OnlyActiveSecondaries based on which the replicas to be restarted

        are selected.
    return:
      type: System.Threading.Tasks.Task{System.Fabric.Result.RestartPartitionResult}
      description: RestartPartitionResult which gives information about the actual selected partition.
  overload: System.Fabric.FabricClient.TestManagementClient.RestartPartitionAsync*
  exceptions:
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: Action took more than its allocated time.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Any of the required arguments are null.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: If the API is called for a partition belonging to a stateless service with <xref href="System.Fabric.RestartPartitionMode" data-throw-if-not-resolved="false"></xref> set to OnlyActiveSecondaries.
  - type: System.Fabric.FabricException
    commentId: T:System.Fabric.FabricException
    description: >-
      These are the fabric failures

      FabricErrorCode.PartitionNotFound - if the specified partition selected does not exist.
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: This api is deprecated, use StartPartitionRestartAsync instead.  StartPartitionRestartAsync requires the FaultAnalysisService
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.TestManagementClient.RestartPartitionAsync(System.Fabric.PartitionSelector,System.Fabric.RestartPartitionMode,System.Threading.CancellationToken)
  commentId: M:System.Fabric.FabricClient.TestManagementClient.RestartPartitionAsync(System.Fabric.PartitionSelector,System.Fabric.RestartPartitionMode,System.Threading.CancellationToken)
  id: RestartPartitionAsync(System.Fabric.PartitionSelector,System.Fabric.RestartPartitionMode,System.Threading.CancellationToken)
  parent: System.Fabric.FabricClient.TestManagementClient
  langs:
  - csharp
  - vb
  name: RestartPartitionAsync(PartitionSelector, RestartPartitionMode, CancellationToken)
  nameWithType: FabricClient.TestManagementClient.RestartPartitionAsync(PartitionSelector, RestartPartitionMode, CancellationToken)
  fullName: System.Fabric.FabricClient.TestManagementClient.RestartPartitionAsync(System.Fabric.PartitionSelector, System.Fabric.RestartPartitionMode, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.TestManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: RestartPartitionAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.TestManagementClient.cs
    startLine: 1115
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\nThis API will restart some or all the replicas of a partition at the same time (ensures all the replicas are down concurrently) depending on the <xref href=\"System.Fabric.RestartPartitionMode\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  remarks: "\n<p>\nThis API is useful to test the recovery time of a partition after a full or partial restart and also to test failover.\n</p>\n<p>\nThis API should only be called with a stateful service as the target.\n</p>            \n<p>\nImportant note:  this API should not be aborted while running.  Aborting this API while it is running may leave state behind.  \nIf this API is aborted while running, CleanTestStateAsync() should be invoked to remove state that may have been left behind.\n</p>\n"
  example: []
  syntax:
    content: >-
      [Obsolete("This api is deprecated, use StartPartitionRestartAsync instead.  StartPartitionRestartAsync requires the FaultAnalysisService")]

      public Task<RestartPartitionResult> RestartPartitionAsync(PartitionSelector partitionSelector, RestartPartitionMode restartPartitionMode, CancellationToken cancellationToken)
    content.vb: >-
      <Obsolete("This api is deprecated, use StartPartitionRestartAsync instead.  StartPartitionRestartAsync requires the FaultAnalysisService")>

      Public Function RestartPartitionAsync(partitionSelector As PartitionSelector, restartPartitionMode As RestartPartitionMode, cancellationToken As CancellationToken) As Task(Of RestartPartitionResult)
    parameters:
    - id: partitionSelector
      type: System.Fabric.PartitionSelector
      description: <xref href="System.Fabric.PartitionSelector" data-throw-if-not-resolved="false"></xref> that specifies the partition which needs to be restarted
    - id: restartPartitionMode
      type: System.Fabric.RestartPartitionMode
      description: >-
        The <xref href="System.Fabric.RestartPartitionMode" data-throw-if-not-resolved="false"></xref> which can be AllReplicasOrInstances or OnlyActiveSecondaries based on which the replicas to be restarted

        are selected.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: Cancellation token
    return:
      type: System.Threading.Tasks.Task{System.Fabric.Result.RestartPartitionResult}
      description: RestartPartitionResult which gives information about the actual selected partition
  overload: System.Fabric.FabricClient.TestManagementClient.RestartPartitionAsync*
  exceptions:
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: Action took more than its allocated time.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Any of the required arguments are null.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: If the API is called for a partition belonging to a stateless service with <xref href="System.Fabric.RestartPartitionMode" data-throw-if-not-resolved="false"></xref> set to OnlyActiveSecondaries.
  - type: System.Fabric.FabricException
    commentId: T:System.Fabric.FabricException
    description: >-
      These are the fabric failures

      FabricErrorCode.PartitionNotFound - if the specified partition selected does not exist
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: This api is deprecated, use StartPartitionRestartAsync instead.  StartPartitionRestartAsync requires the FaultAnalysisService
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.TestManagementClient.RestartPartitionAsync(System.Fabric.PartitionSelector,System.Fabric.RestartPartitionMode,System.TimeSpan)
  commentId: M:System.Fabric.FabricClient.TestManagementClient.RestartPartitionAsync(System.Fabric.PartitionSelector,System.Fabric.RestartPartitionMode,System.TimeSpan)
  id: RestartPartitionAsync(System.Fabric.PartitionSelector,System.Fabric.RestartPartitionMode,System.TimeSpan)
  parent: System.Fabric.FabricClient.TestManagementClient
  langs:
  - csharp
  - vb
  name: RestartPartitionAsync(PartitionSelector, RestartPartitionMode, TimeSpan)
  nameWithType: FabricClient.TestManagementClient.RestartPartitionAsync(PartitionSelector, RestartPartitionMode, TimeSpan)
  fullName: System.Fabric.FabricClient.TestManagementClient.RestartPartitionAsync(System.Fabric.PartitionSelector, System.Fabric.RestartPartitionMode, System.TimeSpan)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.TestManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: RestartPartitionAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.TestManagementClient.cs
    startLine: 1153
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\nThis API will restart some or all the replicas of a partition at the same time (ensures all the replicas are down concurrently) depending on the <xref href=\"System.Fabric.RestartPartitionMode\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  remarks: "\n<p>\nThis API is useful to test the recovery time of a partition after a full or partial restart and also to test failover.\n</p>\n<p>\nThis API should only be called with a stateful service as the target.\n</p>            \n<p>\nImportant note:  this API should not be aborted while running.  Aborting this API while it is running may leave state behind.  \nIf this API is aborted while running, CleanTestStateAsync() should be invoked to remove state that may have been left behind.\n</p>\n"
  example: []
  syntax:
    content: >-
      [Obsolete("This api is deprecated, use StartPartitionRestartAsync instead.  StartPartitionRestartAsync requires the FaultAnalysisService")]

      public Task<RestartPartitionResult> RestartPartitionAsync(PartitionSelector partitionSelector, RestartPartitionMode restartPartitionMode, TimeSpan operationTimeout)
    content.vb: >-
      <Obsolete("This api is deprecated, use StartPartitionRestartAsync instead.  StartPartitionRestartAsync requires the FaultAnalysisService")>

      Public Function RestartPartitionAsync(partitionSelector As PartitionSelector, restartPartitionMode As RestartPartitionMode, operationTimeout As TimeSpan) As Task(Of RestartPartitionResult)
    parameters:
    - id: partitionSelector
      type: System.Fabric.PartitionSelector
      description: <xref href="System.Fabric.PartitionSelector" data-throw-if-not-resolved="false"></xref> that specifies the partition which needs to be restarted.
    - id: restartPartitionMode
      type: System.Fabric.RestartPartitionMode
      description: >-
        The <xref href="System.Fabric.RestartPartitionMode" data-throw-if-not-resolved="false"></xref> which can be AllReplicasOrInstances or OnlyActiveSecondaries based on which the replicas to be restarted

        are selected.
    - id: operationTimeout
      type: System.TimeSpan
      description: The overall timeout for the operation.
    return:
      type: System.Threading.Tasks.Task{System.Fabric.Result.RestartPartitionResult}
      description: RestartPartitionResult which gives information about the actual selected partition.
  overload: System.Fabric.FabricClient.TestManagementClient.RestartPartitionAsync*
  exceptions:
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: Action took more than its allocated time.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Any of the required arguments are null.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: If the API is called for a partition belonging to a stateless service with <xref href="System.Fabric.RestartPartitionMode" data-throw-if-not-resolved="false"></xref> set to OnlyActiveSecondaries.
  - type: System.Fabric.FabricException
    commentId: T:System.Fabric.FabricException
    description: >-
      These are the fabric failures

      FabricErrorCode.PartitionNotFound - if the specified partition selected does not exist
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: This api is deprecated, use StartPartitionRestartAsync instead.  StartPartitionRestartAsync requires the FaultAnalysisService
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.TestManagementClient.RestartPartitionAsync(System.Fabric.PartitionSelector,System.Fabric.RestartPartitionMode,System.TimeSpan,System.Threading.CancellationToken)
  commentId: M:System.Fabric.FabricClient.TestManagementClient.RestartPartitionAsync(System.Fabric.PartitionSelector,System.Fabric.RestartPartitionMode,System.TimeSpan,System.Threading.CancellationToken)
  id: RestartPartitionAsync(System.Fabric.PartitionSelector,System.Fabric.RestartPartitionMode,System.TimeSpan,System.Threading.CancellationToken)
  parent: System.Fabric.FabricClient.TestManagementClient
  langs:
  - csharp
  - vb
  name: RestartPartitionAsync(PartitionSelector, RestartPartitionMode, TimeSpan, CancellationToken)
  nameWithType: FabricClient.TestManagementClient.RestartPartitionAsync(PartitionSelector, RestartPartitionMode, TimeSpan, CancellationToken)
  fullName: System.Fabric.FabricClient.TestManagementClient.RestartPartitionAsync(System.Fabric.PartitionSelector, System.Fabric.RestartPartitionMode, System.TimeSpan, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.TestManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: RestartPartitionAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.TestManagementClient.cs
    startLine: 1192
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\nThis API will restart some or all the replicas of a partition at the same time (ensures all the replicas are down concurrently) depending on the <xref href=\"System.Fabric.RestartPartitionMode\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  remarks: "\n<p>\nThis API is useful to test the recovery time of a partition after a full or partial restart and also to test failover.\n</p>\n<p>\nThis API should only be called with a stateful service as the target.\n</p>            \n<p>\nImportant note:  this API should not be aborted while running.  Aborting this API while it is running may leave state behind.  \nIf this API is aborted while running, CleanTestStateAsync() should be invoked to remove state that may have been left behind.\n</p>\n"
  example: []
  syntax:
    content: >-
      [Obsolete("This api is deprecated, use StartPartitionRestartAsync instead.  StartPartitionRestartAsync requires the FaultAnalysisService")]

      public Task<RestartPartitionResult> RestartPartitionAsync(PartitionSelector partitionSelector, RestartPartitionMode restartPartitionMode, TimeSpan operationTimeout, CancellationToken cancellationToken)
    content.vb: >-
      <Obsolete("This api is deprecated, use StartPartitionRestartAsync instead.  StartPartitionRestartAsync requires the FaultAnalysisService")>

      Public Function RestartPartitionAsync(partitionSelector As PartitionSelector, restartPartitionMode As RestartPartitionMode, operationTimeout As TimeSpan, cancellationToken As CancellationToken) As Task(Of RestartPartitionResult)
    parameters:
    - id: partitionSelector
      type: System.Fabric.PartitionSelector
      description: <xref href="System.Fabric.PartitionSelector" data-throw-if-not-resolved="false"></xref> that specifies the partition which needs to be restarted.
    - id: restartPartitionMode
      type: System.Fabric.RestartPartitionMode
      description: >-
        The <xref href="System.Fabric.RestartPartitionMode" data-throw-if-not-resolved="false"></xref> which can be AllReplicasOrInstances or OnlyActiveSecondaries based on which the replicas to be restarted

        are selected.
    - id: operationTimeout
      type: System.TimeSpan
      description: The overall timeout for the operation.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: Cancellation token
    return:
      type: System.Threading.Tasks.Task{System.Fabric.Result.RestartPartitionResult}
      description: RestartPartitionResult which gives information about the actual selected partition.
  overload: System.Fabric.FabricClient.TestManagementClient.RestartPartitionAsync*
  exceptions:
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: Action took more than its allocated time.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Any of the required arguments are null.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: If the API is called for a partition belonging to a stateless service with <xref href="System.Fabric.RestartPartitionMode" data-throw-if-not-resolved="false"></xref> set to OnlyActiveSecondaries.
  - type: System.Fabric.FabricException
    commentId: T:System.Fabric.FabricException
    description: >-
      These are the fabric failures

      FabricErrorCode.PartitionNotFound - if the specified partition selected does not exist
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: This api is deprecated, use StartPartitionRestartAsync instead.  StartPartitionRestartAsync requires the FaultAnalysisService
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.TestManagementClient.GetPartitionDataLossProgressAsync(System.Guid)
  commentId: M:System.Fabric.FabricClient.TestManagementClient.GetPartitionDataLossProgressAsync(System.Guid)
  id: GetPartitionDataLossProgressAsync(System.Guid)
  parent: System.Fabric.FabricClient.TestManagementClient
  langs:
  - csharp
  - vb
  name: GetPartitionDataLossProgressAsync(Guid)
  nameWithType: FabricClient.TestManagementClient.GetPartitionDataLossProgressAsync(Guid)
  fullName: System.Fabric.FabricClient.TestManagementClient.GetPartitionDataLossProgressAsync(System.Guid)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.TestManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: GetPartitionDataLossProgressAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.TestManagementClient.cs
    startLine: 1233
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\nGets the progress of a test command started using StartPartitionDataLossAsync().\n"
  remarks: The FaultAnalysisService must be enabled to use this API.
  example: []
  syntax:
    content: public Task<PartitionDataLossProgress> GetPartitionDataLossProgressAsync(Guid operationId)
    content.vb: Public Function GetPartitionDataLossProgressAsync(operationId As Guid) As Task(Of PartitionDataLossProgress)
    parameters:
    - id: operationId
      type: System.Guid
      description: The operationId passed in when the test command was starting using StartPartitionDataLossAsync().
    return:
      type: System.Threading.Tasks.Task{System.Fabric.PartitionDataLossProgress}
      description: A PartitionDataLossProgress object, containing TestCommandProgressState and PartitionDataLossResult.
  overload: System.Fabric.FabricClient.TestManagementClient.GetPartitionDataLossProgressAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.TestManagementClient.GetPartitionDataLossProgressAsync(System.Guid,System.TimeSpan)
  commentId: M:System.Fabric.FabricClient.TestManagementClient.GetPartitionDataLossProgressAsync(System.Guid,System.TimeSpan)
  id: GetPartitionDataLossProgressAsync(System.Guid,System.TimeSpan)
  parent: System.Fabric.FabricClient.TestManagementClient
  langs:
  - csharp
  - vb
  name: GetPartitionDataLossProgressAsync(Guid, TimeSpan)
  nameWithType: FabricClient.TestManagementClient.GetPartitionDataLossProgressAsync(Guid, TimeSpan)
  fullName: System.Fabric.FabricClient.TestManagementClient.GetPartitionDataLossProgressAsync(System.Guid, System.TimeSpan)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.TestManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: GetPartitionDataLossProgressAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.TestManagementClient.cs
    startLine: 1245
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\nGets the progress of a test command started using StartPartitionDataLossAsync().\n"
  remarks: The FaultAnalysisService must be enabled to use this API.
  example: []
  syntax:
    content: public Task<PartitionDataLossProgress> GetPartitionDataLossProgressAsync(Guid operationId, TimeSpan timeout)
    content.vb: Public Function GetPartitionDataLossProgressAsync(operationId As Guid, timeout As TimeSpan) As Task(Of PartitionDataLossProgress)
    parameters:
    - id: operationId
      type: System.Guid
      description: The operationId passed in when the test command was starting using StartPartitionDataLossAsync().
    - id: timeout
      type: System.TimeSpan
      description: Timeout.
    return:
      type: System.Threading.Tasks.Task{System.Fabric.PartitionDataLossProgress}
      description: A PartitionDataLossProgress object, containing TestCommandProgressState and PartitionDataLossResult.
  overload: System.Fabric.FabricClient.TestManagementClient.GetPartitionDataLossProgressAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.TestManagementClient.GetPartitionDataLossProgressAsync(System.Guid,System.Threading.CancellationToken)
  commentId: M:System.Fabric.FabricClient.TestManagementClient.GetPartitionDataLossProgressAsync(System.Guid,System.Threading.CancellationToken)
  id: GetPartitionDataLossProgressAsync(System.Guid,System.Threading.CancellationToken)
  parent: System.Fabric.FabricClient.TestManagementClient
  langs:
  - csharp
  - vb
  name: GetPartitionDataLossProgressAsync(Guid, CancellationToken)
  nameWithType: FabricClient.TestManagementClient.GetPartitionDataLossProgressAsync(Guid, CancellationToken)
  fullName: System.Fabric.FabricClient.TestManagementClient.GetPartitionDataLossProgressAsync(System.Guid, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.TestManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: GetPartitionDataLossProgressAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.TestManagementClient.cs
    startLine: 1257
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\nGets the progress of a test command started using StartPartitionDataLossAsync().\n"
  remarks: The FaultAnalysisService must be enabled to use this API.
  example: []
  syntax:
    content: public Task<PartitionDataLossProgress> GetPartitionDataLossProgressAsync(Guid operationId, CancellationToken cancellationToken)
    content.vb: Public Function GetPartitionDataLossProgressAsync(operationId As Guid, cancellationToken As CancellationToken) As Task(Of PartitionDataLossProgress)
    parameters:
    - id: operationId
      type: System.Guid
      description: The operationId passed in when the test command was starting using StartPartitionDataLossAsync().
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: Cancellation token
    return:
      type: System.Threading.Tasks.Task{System.Fabric.PartitionDataLossProgress}
      description: A PartitionDataLossProgress object, containing TestCommandProgressState and PartitionDataLossResult.
  overload: System.Fabric.FabricClient.TestManagementClient.GetPartitionDataLossProgressAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.TestManagementClient.GetPartitionDataLossProgressAsync(System.Guid,System.TimeSpan,System.Threading.CancellationToken)
  commentId: M:System.Fabric.FabricClient.TestManagementClient.GetPartitionDataLossProgressAsync(System.Guid,System.TimeSpan,System.Threading.CancellationToken)
  id: GetPartitionDataLossProgressAsync(System.Guid,System.TimeSpan,System.Threading.CancellationToken)
  parent: System.Fabric.FabricClient.TestManagementClient
  langs:
  - csharp
  - vb
  name: GetPartitionDataLossProgressAsync(Guid, TimeSpan, CancellationToken)
  nameWithType: FabricClient.TestManagementClient.GetPartitionDataLossProgressAsync(Guid, TimeSpan, CancellationToken)
  fullName: System.Fabric.FabricClient.TestManagementClient.GetPartitionDataLossProgressAsync(System.Guid, System.TimeSpan, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.TestManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: GetPartitionDataLossProgressAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.TestManagementClient.cs
    startLine: 1270
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\nGets the progress of a test command started using StartPartitionDataLossAsync().\n"
  remarks: The FaultAnalysisService must be enabled to use this API.
  example: []
  syntax:
    content: public Task<PartitionDataLossProgress> GetPartitionDataLossProgressAsync(Guid operationId, TimeSpan timeout, CancellationToken cancellationToken)
    content.vb: Public Function GetPartitionDataLossProgressAsync(operationId As Guid, timeout As TimeSpan, cancellationToken As CancellationToken) As Task(Of PartitionDataLossProgress)
    parameters:
    - id: operationId
      type: System.Guid
      description: The operationId passed in when the test command was starting using StartPartitionDataLossAsync().
    - id: timeout
      type: System.TimeSpan
      description: Timeout.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: Cancellation token
    return:
      type: System.Threading.Tasks.Task{System.Fabric.PartitionDataLossProgress}
      description: A PartitionDataLossProgress object, containing TestCommandProgressState and PartitionDataLossResult.
  overload: System.Fabric.FabricClient.TestManagementClient.GetPartitionDataLossProgressAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.TestManagementClient.GetPartitionQuorumLossProgressAsync(System.Guid)
  commentId: M:System.Fabric.FabricClient.TestManagementClient.GetPartitionQuorumLossProgressAsync(System.Guid)
  id: GetPartitionQuorumLossProgressAsync(System.Guid)
  parent: System.Fabric.FabricClient.TestManagementClient
  langs:
  - csharp
  - vb
  name: GetPartitionQuorumLossProgressAsync(Guid)
  nameWithType: FabricClient.TestManagementClient.GetPartitionQuorumLossProgressAsync(Guid)
  fullName: System.Fabric.FabricClient.TestManagementClient.GetPartitionQuorumLossProgressAsync(System.Guid)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.TestManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: GetPartitionQuorumLossProgressAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.TestManagementClient.cs
    startLine: 1286
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\nGets the progress of a test command started using StartPartitionQuorumLossAsync().\n"
  remarks: The FaultAnalysisService must be enabled to use this API.
  example: []
  syntax:
    content: public Task<PartitionQuorumLossProgress> GetPartitionQuorumLossProgressAsync(Guid operationId)
    content.vb: Public Function GetPartitionQuorumLossProgressAsync(operationId As Guid) As Task(Of PartitionQuorumLossProgress)
    parameters:
    - id: operationId
      type: System.Guid
      description: The operationId passed in when the test command was starting using StartPartitionQuorumLossAsync().
    return:
      type: System.Threading.Tasks.Task{System.Fabric.PartitionQuorumLossProgress}
      description: A PartitionQuorumLossProgress object, containing TestCommandProgressState and PartitionQuorumLossResult.
  overload: System.Fabric.FabricClient.TestManagementClient.GetPartitionQuorumLossProgressAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.TestManagementClient.GetPartitionQuorumLossProgressAsync(System.Guid,System.TimeSpan)
  commentId: M:System.Fabric.FabricClient.TestManagementClient.GetPartitionQuorumLossProgressAsync(System.Guid,System.TimeSpan)
  id: GetPartitionQuorumLossProgressAsync(System.Guid,System.TimeSpan)
  parent: System.Fabric.FabricClient.TestManagementClient
  langs:
  - csharp
  - vb
  name: GetPartitionQuorumLossProgressAsync(Guid, TimeSpan)
  nameWithType: FabricClient.TestManagementClient.GetPartitionQuorumLossProgressAsync(Guid, TimeSpan)
  fullName: System.Fabric.FabricClient.TestManagementClient.GetPartitionQuorumLossProgressAsync(System.Guid, System.TimeSpan)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.TestManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: GetPartitionQuorumLossProgressAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.TestManagementClient.cs
    startLine: 1298
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\nGets the progress of a test command started using StartPartitionQuorumLossAsync().\n"
  remarks: The FaultAnalysisService must be enabled to use this API.
  example: []
  syntax:
    content: public Task<PartitionQuorumLossProgress> GetPartitionQuorumLossProgressAsync(Guid operationId, TimeSpan timeout)
    content.vb: Public Function GetPartitionQuorumLossProgressAsync(operationId As Guid, timeout As TimeSpan) As Task(Of PartitionQuorumLossProgress)
    parameters:
    - id: operationId
      type: System.Guid
      description: The operationId passed in when the test command was starting using StartPartitionQuorumLossAsync().
    - id: timeout
      type: System.TimeSpan
      description: Timeout.
    return:
      type: System.Threading.Tasks.Task{System.Fabric.PartitionQuorumLossProgress}
      description: A PartitionQuorumLossProgress object, containing TestCommandProgressState and PartitionQuorumLossResult.
  overload: System.Fabric.FabricClient.TestManagementClient.GetPartitionQuorumLossProgressAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.TestManagementClient.GetPartitionQuorumLossProgressAsync(System.Guid,System.Threading.CancellationToken)
  commentId: M:System.Fabric.FabricClient.TestManagementClient.GetPartitionQuorumLossProgressAsync(System.Guid,System.Threading.CancellationToken)
  id: GetPartitionQuorumLossProgressAsync(System.Guid,System.Threading.CancellationToken)
  parent: System.Fabric.FabricClient.TestManagementClient
  langs:
  - csharp
  - vb
  name: GetPartitionQuorumLossProgressAsync(Guid, CancellationToken)
  nameWithType: FabricClient.TestManagementClient.GetPartitionQuorumLossProgressAsync(Guid, CancellationToken)
  fullName: System.Fabric.FabricClient.TestManagementClient.GetPartitionQuorumLossProgressAsync(System.Guid, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.TestManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: GetPartitionQuorumLossProgressAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.TestManagementClient.cs
    startLine: 1310
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\nGets the progress of a test command started using StartPartitionQuorumLossAsync().\n"
  remarks: The FaultAnalysisService must be enabled to use this API.
  example: []
  syntax:
    content: public Task<PartitionQuorumLossProgress> GetPartitionQuorumLossProgressAsync(Guid operationId, CancellationToken cancellationToken)
    content.vb: Public Function GetPartitionQuorumLossProgressAsync(operationId As Guid, cancellationToken As CancellationToken) As Task(Of PartitionQuorumLossProgress)
    parameters:
    - id: operationId
      type: System.Guid
      description: The operationId passed in when the test command was starting using StartPartitionQuorumLossAsync().
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: Cancellation token
    return:
      type: System.Threading.Tasks.Task{System.Fabric.PartitionQuorumLossProgress}
      description: A PartitionQuorumLossProgress object, containing TestCommandProgressState and PartitionQuorumLossResult.
  overload: System.Fabric.FabricClient.TestManagementClient.GetPartitionQuorumLossProgressAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.TestManagementClient.GetPartitionQuorumLossProgressAsync(System.Guid,System.TimeSpan,System.Threading.CancellationToken)
  commentId: M:System.Fabric.FabricClient.TestManagementClient.GetPartitionQuorumLossProgressAsync(System.Guid,System.TimeSpan,System.Threading.CancellationToken)
  id: GetPartitionQuorumLossProgressAsync(System.Guid,System.TimeSpan,System.Threading.CancellationToken)
  parent: System.Fabric.FabricClient.TestManagementClient
  langs:
  - csharp
  - vb
  name: GetPartitionQuorumLossProgressAsync(Guid, TimeSpan, CancellationToken)
  nameWithType: FabricClient.TestManagementClient.GetPartitionQuorumLossProgressAsync(Guid, TimeSpan, CancellationToken)
  fullName: System.Fabric.FabricClient.TestManagementClient.GetPartitionQuorumLossProgressAsync(System.Guid, System.TimeSpan, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.TestManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: GetPartitionQuorumLossProgressAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.TestManagementClient.cs
    startLine: 1323
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\nGets the progress of a test command started using StartPartitionQuorumLossAsync().\n"
  remarks: The FaultAnalysisService must be enabled to use this API.
  example: []
  syntax:
    content: public Task<PartitionQuorumLossProgress> GetPartitionQuorumLossProgressAsync(Guid operationId, TimeSpan timeout, CancellationToken cancellationToken)
    content.vb: Public Function GetPartitionQuorumLossProgressAsync(operationId As Guid, timeout As TimeSpan, cancellationToken As CancellationToken) As Task(Of PartitionQuorumLossProgress)
    parameters:
    - id: operationId
      type: System.Guid
      description: The operationId passed in when the test command was starting using StartPartitionQuorumLossAsync().
    - id: timeout
      type: System.TimeSpan
      description: Timeout.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: Cancellation token
    return:
      type: System.Threading.Tasks.Task{System.Fabric.PartitionQuorumLossProgress}
      description: A PartitionQuorumLossProgress object, containing TestCommandProgressState and PartitionQuorumLossResult.
  overload: System.Fabric.FabricClient.TestManagementClient.GetPartitionQuorumLossProgressAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.TestManagementClient.GetPartitionRestartProgressAsync(System.Guid)
  commentId: M:System.Fabric.FabricClient.TestManagementClient.GetPartitionRestartProgressAsync(System.Guid)
  id: GetPartitionRestartProgressAsync(System.Guid)
  parent: System.Fabric.FabricClient.TestManagementClient
  langs:
  - csharp
  - vb
  name: GetPartitionRestartProgressAsync(Guid)
  nameWithType: FabricClient.TestManagementClient.GetPartitionRestartProgressAsync(Guid)
  fullName: System.Fabric.FabricClient.TestManagementClient.GetPartitionRestartProgressAsync(System.Guid)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.TestManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: GetPartitionRestartProgressAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.TestManagementClient.cs
    startLine: 1339
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\nGets the progress of a test command started using StartPartitionRestartAsync().\n"
  remarks: The FaultAnalysisService must be enabled to use this API.
  example: []
  syntax:
    content: public Task<PartitionRestartProgress> GetPartitionRestartProgressAsync(Guid operationId)
    content.vb: Public Function GetPartitionRestartProgressAsync(operationId As Guid) As Task(Of PartitionRestartProgress)
    parameters:
    - id: operationId
      type: System.Guid
      description: The operationId passed in when the test command was starting using StartPartitionRestartAsync().
    return:
      type: System.Threading.Tasks.Task{System.Fabric.PartitionRestartProgress}
      description: A PartitionRestartProgress object, containing TestCommandProgressState and PartitionRestartResult.
  overload: System.Fabric.FabricClient.TestManagementClient.GetPartitionRestartProgressAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.TestManagementClient.GetPartitionRestartProgressAsync(System.Guid,System.TimeSpan)
  commentId: M:System.Fabric.FabricClient.TestManagementClient.GetPartitionRestartProgressAsync(System.Guid,System.TimeSpan)
  id: GetPartitionRestartProgressAsync(System.Guid,System.TimeSpan)
  parent: System.Fabric.FabricClient.TestManagementClient
  langs:
  - csharp
  - vb
  name: GetPartitionRestartProgressAsync(Guid, TimeSpan)
  nameWithType: FabricClient.TestManagementClient.GetPartitionRestartProgressAsync(Guid, TimeSpan)
  fullName: System.Fabric.FabricClient.TestManagementClient.GetPartitionRestartProgressAsync(System.Guid, System.TimeSpan)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.TestManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: GetPartitionRestartProgressAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.TestManagementClient.cs
    startLine: 1351
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\nGets the progress of a test command started using StartPartitionRestartAsync().\n"
  remarks: The FaultAnalysisService must be enabled to use this API.
  example: []
  syntax:
    content: public Task<PartitionRestartProgress> GetPartitionRestartProgressAsync(Guid operationId, TimeSpan timeout)
    content.vb: Public Function GetPartitionRestartProgressAsync(operationId As Guid, timeout As TimeSpan) As Task(Of PartitionRestartProgress)
    parameters:
    - id: operationId
      type: System.Guid
      description: The operationId passed in when the test command was starting using StartPartitionRestartAsync().
    - id: timeout
      type: System.TimeSpan
      description: Timeout.
    return:
      type: System.Threading.Tasks.Task{System.Fabric.PartitionRestartProgress}
      description: A PartitionRestartProgress object, containing TestCommandProgressState and PartitionRestartResult.
  overload: System.Fabric.FabricClient.TestManagementClient.GetPartitionRestartProgressAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.TestManagementClient.GetPartitionRestartProgressAsync(System.Guid,System.Threading.CancellationToken)
  commentId: M:System.Fabric.FabricClient.TestManagementClient.GetPartitionRestartProgressAsync(System.Guid,System.Threading.CancellationToken)
  id: GetPartitionRestartProgressAsync(System.Guid,System.Threading.CancellationToken)
  parent: System.Fabric.FabricClient.TestManagementClient
  langs:
  - csharp
  - vb
  name: GetPartitionRestartProgressAsync(Guid, CancellationToken)
  nameWithType: FabricClient.TestManagementClient.GetPartitionRestartProgressAsync(Guid, CancellationToken)
  fullName: System.Fabric.FabricClient.TestManagementClient.GetPartitionRestartProgressAsync(System.Guid, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.TestManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: GetPartitionRestartProgressAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.TestManagementClient.cs
    startLine: 1363
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\nGets the progress of a test command started using StartPartitionRestartAsync().\n"
  remarks: The FaultAnalysisService must be enabled to use this API.
  example: []
  syntax:
    content: public Task<PartitionRestartProgress> GetPartitionRestartProgressAsync(Guid operationId, CancellationToken cancellationToken)
    content.vb: Public Function GetPartitionRestartProgressAsync(operationId As Guid, cancellationToken As CancellationToken) As Task(Of PartitionRestartProgress)
    parameters:
    - id: operationId
      type: System.Guid
      description: The operationId passed in when the test command was starting using StartPartitionRestartAsync().
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: Cancellation token
    return:
      type: System.Threading.Tasks.Task{System.Fabric.PartitionRestartProgress}
      description: A PartitionRestartProgress object, containing TestCommandProgressState and PartitionRestartResult.
  overload: System.Fabric.FabricClient.TestManagementClient.GetPartitionRestartProgressAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.TestManagementClient.GetPartitionRestartProgressAsync(System.Guid,System.TimeSpan,System.Threading.CancellationToken)
  commentId: M:System.Fabric.FabricClient.TestManagementClient.GetPartitionRestartProgressAsync(System.Guid,System.TimeSpan,System.Threading.CancellationToken)
  id: GetPartitionRestartProgressAsync(System.Guid,System.TimeSpan,System.Threading.CancellationToken)
  parent: System.Fabric.FabricClient.TestManagementClient
  langs:
  - csharp
  - vb
  name: GetPartitionRestartProgressAsync(Guid, TimeSpan, CancellationToken)
  nameWithType: FabricClient.TestManagementClient.GetPartitionRestartProgressAsync(Guid, TimeSpan, CancellationToken)
  fullName: System.Fabric.FabricClient.TestManagementClient.GetPartitionRestartProgressAsync(System.Guid, System.TimeSpan, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.TestManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: GetPartitionRestartProgressAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.TestManagementClient.cs
    startLine: 1376
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\nGets the progress of a test command started using StartPartitionRestartAsync().\n"
  remarks: The FaultAnalysisService must be enabled to use this API.
  example: []
  syntax:
    content: public Task<PartitionRestartProgress> GetPartitionRestartProgressAsync(Guid operationId, TimeSpan timeout, CancellationToken cancellationToken)
    content.vb: Public Function GetPartitionRestartProgressAsync(operationId As Guid, timeout As TimeSpan, cancellationToken As CancellationToken) As Task(Of PartitionRestartProgress)
    parameters:
    - id: operationId
      type: System.Guid
      description: The operationId passed in when the test command was starting using StartPartitionRestartAsync().
    - id: timeout
      type: System.TimeSpan
      description: Timeout.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: Cancellation token
    return:
      type: System.Threading.Tasks.Task{System.Fabric.PartitionRestartProgress}
      description: A PartitionRestartProgress object, containing TestCommandProgressState and PartitionRestartResult.
  overload: System.Fabric.FabricClient.TestManagementClient.GetPartitionRestartProgressAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.TestManagementClient.GetTestCommandStatusListAsync(System.TimeSpan,System.Threading.CancellationToken)
  commentId: M:System.Fabric.FabricClient.TestManagementClient.GetTestCommandStatusListAsync(System.TimeSpan,System.Threading.CancellationToken)
  id: GetTestCommandStatusListAsync(System.TimeSpan,System.Threading.CancellationToken)
  parent: System.Fabric.FabricClient.TestManagementClient
  langs:
  - csharp
  - vb
  name: GetTestCommandStatusListAsync(TimeSpan, CancellationToken)
  nameWithType: FabricClient.TestManagementClient.GetTestCommandStatusListAsync(TimeSpan, CancellationToken)
  fullName: System.Fabric.FabricClient.TestManagementClient.GetTestCommandStatusListAsync(System.TimeSpan, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.TestManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: GetTestCommandStatusListAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.TestManagementClient.cs
    startLine: 1393
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\nGets the status of test commands.\n"
  remarks: The FaultAnalysisService must be enabled to use this API.
  example: []
  syntax:
    content: public Task<TestCommandStatusList> GetTestCommandStatusListAsync(TimeSpan operationTimeout, CancellationToken cancellationToken)
    content.vb: Public Function GetTestCommandStatusListAsync(operationTimeout As TimeSpan, cancellationToken As CancellationToken) As Task(Of TestCommandStatusList)
    parameters:
    - id: operationTimeout
      type: System.TimeSpan
      description: A timeout for the API call.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: Cancellation token
    return:
      type: System.Threading.Tasks.Task{System.Fabric.Query.TestCommandStatusList}
      description: A TestCommandStatusList, which is an IList of TestCommandStatus objects
  overload: System.Fabric.FabricClient.TestManagementClient.GetTestCommandStatusListAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.TestManagementClient.GetTestCommandStatusListAsync(System.Threading.CancellationToken)
  commentId: M:System.Fabric.FabricClient.TestManagementClient.GetTestCommandStatusListAsync(System.Threading.CancellationToken)
  id: GetTestCommandStatusListAsync(System.Threading.CancellationToken)
  parent: System.Fabric.FabricClient.TestManagementClient
  langs:
  - csharp
  - vb
  name: GetTestCommandStatusListAsync(CancellationToken)
  nameWithType: FabricClient.TestManagementClient.GetTestCommandStatusListAsync(CancellationToken)
  fullName: System.Fabric.FabricClient.TestManagementClient.GetTestCommandStatusListAsync(System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.TestManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: GetTestCommandStatusListAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.TestManagementClient.cs
    startLine: 1412
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\nGets the status of test commands.\n"
  remarks: The FaultAnalysisService must be enabled to use this API.
  example: []
  syntax:
    content: public Task<TestCommandStatusList> GetTestCommandStatusListAsync(CancellationToken cancellationToken)
    content.vb: Public Function GetTestCommandStatusListAsync(cancellationToken As CancellationToken) As Task(Of TestCommandStatusList)
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: Cancellation token
    return:
      type: System.Threading.Tasks.Task{System.Fabric.Query.TestCommandStatusList}
      description: A TestCommandStatusList, which is an IList of TestCommandStatus objects
  overload: System.Fabric.FabricClient.TestManagementClient.GetTestCommandStatusListAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.TestManagementClient.GetTestCommandStatusListAsync(System.TimeSpan)
  commentId: M:System.Fabric.FabricClient.TestManagementClient.GetTestCommandStatusListAsync(System.TimeSpan)
  id: GetTestCommandStatusListAsync(System.TimeSpan)
  parent: System.Fabric.FabricClient.TestManagementClient
  langs:
  - csharp
  - vb
  name: GetTestCommandStatusListAsync(TimeSpan)
  nameWithType: FabricClient.TestManagementClient.GetTestCommandStatusListAsync(TimeSpan)
  fullName: System.Fabric.FabricClient.TestManagementClient.GetTestCommandStatusListAsync(System.TimeSpan)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.TestManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: GetTestCommandStatusListAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.TestManagementClient.cs
    startLine: 1430
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\nGets the status of test commands.\n"
  remarks: The FaultAnalysisService must be enabled to use this API.
  example: []
  syntax:
    content: public Task<TestCommandStatusList> GetTestCommandStatusListAsync(TimeSpan operationTimeout)
    content.vb: Public Function GetTestCommandStatusListAsync(operationTimeout As TimeSpan) As Task(Of TestCommandStatusList)
    parameters:
    - id: operationTimeout
      type: System.TimeSpan
      description: A timeout for the API call.
    return:
      type: System.Threading.Tasks.Task{System.Fabric.Query.TestCommandStatusList}
      description: A TestCommandStatusList, which is an IList of TestCommandStatus objects
  overload: System.Fabric.FabricClient.TestManagementClient.GetTestCommandStatusListAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.TestManagementClient.GetTestCommandStatusListAsync(System.Fabric.Query.TestCommandStateFilter,System.TimeSpan,System.Threading.CancellationToken)
  commentId: M:System.Fabric.FabricClient.TestManagementClient.GetTestCommandStatusListAsync(System.Fabric.Query.TestCommandStateFilter,System.TimeSpan,System.Threading.CancellationToken)
  id: GetTestCommandStatusListAsync(System.Fabric.Query.TestCommandStateFilter,System.TimeSpan,System.Threading.CancellationToken)
  parent: System.Fabric.FabricClient.TestManagementClient
  langs:
  - csharp
  - vb
  name: GetTestCommandStatusListAsync(TestCommandStateFilter, TimeSpan, CancellationToken)
  nameWithType: FabricClient.TestManagementClient.GetTestCommandStatusListAsync(TestCommandStateFilter, TimeSpan, CancellationToken)
  fullName: System.Fabric.FabricClient.TestManagementClient.GetTestCommandStatusListAsync(System.Fabric.Query.TestCommandStateFilter, System.TimeSpan, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.TestManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: GetTestCommandStatusListAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.TestManagementClient.cs
    startLine: 1450
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\nGets the status of test commands.\n"
  remarks: The FaultAnalysisService must be enabled to use this API.
  example: []
  syntax:
    content: public Task<TestCommandStatusList> GetTestCommandStatusListAsync(TestCommandStateFilter stateFilter, TimeSpan operationTimeout, CancellationToken cancellationToken)
    content.vb: Public Function GetTestCommandStatusListAsync(stateFilter As TestCommandStateFilter, operationTimeout As TimeSpan, cancellationToken As CancellationToken) As Task(Of TestCommandStatusList)
    parameters:
    - id: stateFilter
      type: System.Fabric.Query.TestCommandStateFilter
      description: This parameter can be used to filter by TestCommandState
    - id: operationTimeout
      type: System.TimeSpan
      description: A timeout for the API call.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: Cancellation token
    return:
      type: System.Threading.Tasks.Task{System.Fabric.Query.TestCommandStatusList}
      description: A TestCommandStatusList, which is an IList of TestCommandStatus objects
  overload: System.Fabric.FabricClient.TestManagementClient.GetTestCommandStatusListAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.TestManagementClient.GetTestCommandStatusListAsync(System.Fabric.Query.TestCommandTypeFilter,System.TimeSpan,System.Threading.CancellationToken)
  commentId: M:System.Fabric.FabricClient.TestManagementClient.GetTestCommandStatusListAsync(System.Fabric.Query.TestCommandTypeFilter,System.TimeSpan,System.Threading.CancellationToken)
  id: GetTestCommandStatusListAsync(System.Fabric.Query.TestCommandTypeFilter,System.TimeSpan,System.Threading.CancellationToken)
  parent: System.Fabric.FabricClient.TestManagementClient
  langs:
  - csharp
  - vb
  name: GetTestCommandStatusListAsync(TestCommandTypeFilter, TimeSpan, CancellationToken)
  nameWithType: FabricClient.TestManagementClient.GetTestCommandStatusListAsync(TestCommandTypeFilter, TimeSpan, CancellationToken)
  fullName: System.Fabric.FabricClient.TestManagementClient.GetTestCommandStatusListAsync(System.Fabric.Query.TestCommandTypeFilter, System.TimeSpan, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.TestManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: GetTestCommandStatusListAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.TestManagementClient.cs
    startLine: 1472
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\nGets the status of test commands.\n"
  remarks: The FaultAnalysisService must be enabled to use this API.
  example: []
  syntax:
    content: public Task<TestCommandStatusList> GetTestCommandStatusListAsync(TestCommandTypeFilter typeFilter, TimeSpan operationTimeout, CancellationToken cancellationToken)
    content.vb: Public Function GetTestCommandStatusListAsync(typeFilter As TestCommandTypeFilter, operationTimeout As TimeSpan, cancellationToken As CancellationToken) As Task(Of TestCommandStatusList)
    parameters:
    - id: typeFilter
      type: System.Fabric.Query.TestCommandTypeFilter
      description: This parameter can be used to filter by TestCommandType
    - id: operationTimeout
      type: System.TimeSpan
      description: A timeout for the API call.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: Cancellation token
    return:
      type: System.Threading.Tasks.Task{System.Fabric.Query.TestCommandStatusList}
      description: A TestCommandStatusList, which is an IList of TestCommandStatus objects
  overload: System.Fabric.FabricClient.TestManagementClient.GetTestCommandStatusListAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.TestManagementClient.GetTestCommandStatusListAsync(System.Fabric.Query.TestCommandStateFilter,System.Fabric.Query.TestCommandTypeFilter,System.TimeSpan,System.Threading.CancellationToken)
  commentId: M:System.Fabric.FabricClient.TestManagementClient.GetTestCommandStatusListAsync(System.Fabric.Query.TestCommandStateFilter,System.Fabric.Query.TestCommandTypeFilter,System.TimeSpan,System.Threading.CancellationToken)
  id: GetTestCommandStatusListAsync(System.Fabric.Query.TestCommandStateFilter,System.Fabric.Query.TestCommandTypeFilter,System.TimeSpan,System.Threading.CancellationToken)
  parent: System.Fabric.FabricClient.TestManagementClient
  langs:
  - csharp
  - vb
  name: GetTestCommandStatusListAsync(TestCommandStateFilter, TestCommandTypeFilter, TimeSpan, CancellationToken)
  nameWithType: FabricClient.TestManagementClient.GetTestCommandStatusListAsync(TestCommandStateFilter, TestCommandTypeFilter, TimeSpan, CancellationToken)
  fullName: System.Fabric.FabricClient.TestManagementClient.GetTestCommandStatusListAsync(System.Fabric.Query.TestCommandStateFilter, System.Fabric.Query.TestCommandTypeFilter, System.TimeSpan, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.TestManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: GetTestCommandStatusListAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.TestManagementClient.cs
    startLine: 1495
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\nGets the status of test commands.\n"
  remarks: The FaultAnalysisService must be enabled to use this API.
  example: []
  syntax:
    content: public Task<TestCommandStatusList> GetTestCommandStatusListAsync(TestCommandStateFilter stateFilter, TestCommandTypeFilter typeFilter, TimeSpan operationTimeout, CancellationToken cancellationToken)
    content.vb: Public Function GetTestCommandStatusListAsync(stateFilter As TestCommandStateFilter, typeFilter As TestCommandTypeFilter, operationTimeout As TimeSpan, cancellationToken As CancellationToken) As Task(Of TestCommandStatusList)
    parameters:
    - id: stateFilter
      type: System.Fabric.Query.TestCommandStateFilter
      description: This parameter can be used to filter by TestCommandState
    - id: typeFilter
      type: System.Fabric.Query.TestCommandTypeFilter
      description: This parameter can be used to filter by TestCommandType
    - id: operationTimeout
      type: System.TimeSpan
      description: A timeout for the API call.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: Cancellation token
    return:
      type: System.Threading.Tasks.Task{System.Fabric.Query.TestCommandStatusList}
      description: A TestCommandStatusList, which is an IList of TestCommandStatus objects
  overload: System.Fabric.FabricClient.TestManagementClient.GetTestCommandStatusListAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.TestManagementClient.CancelTestCommandAsync(System.Guid,System.Boolean)
  commentId: M:System.Fabric.FabricClient.TestManagementClient.CancelTestCommandAsync(System.Guid,System.Boolean)
  id: CancelTestCommandAsync(System.Guid,System.Boolean)
  parent: System.Fabric.FabricClient.TestManagementClient
  langs:
  - csharp
  - vb
  name: CancelTestCommandAsync(Guid, Boolean)
  nameWithType: FabricClient.TestManagementClient.CancelTestCommandAsync(Guid, Boolean)
  fullName: System.Fabric.FabricClient.TestManagementClient.CancelTestCommandAsync(System.Guid, System.Boolean)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.TestManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: CancelTestCommandAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.TestManagementClient.cs
    startLine: 1539
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\nCancels a test command.\n"
  remarks: "\n<p>\nIf force is false, then the specified test command will be gracefully stopped and cleaned up.  If force is true, the command will be aborted, and some internal state\nmay be left behind.  Specifying force as true should be used with care.  Calling CancelTestCommandAsync() with force set to true is not allowed until CancelTestCommandAsync() has\nbeen called on the same test command with force set to false first, or unless the test command already has a TestCommandProgressState of TestCommandProgressState.RollingBack.\nClarification: TestCommandProgressState.RollingBack means that the system will/is cleaning up internal system state caused by executing the command.  It will not restore data if the\ntest command was to cause data loss.  For example, if you call StartPartitionDataLossAsync() then call CancelTestCommandAsync() the system will only clean up internal state from running the command.  \nIt will not restore the target partition's data, if the command progressed far enough to cause data loss.\n\n\n</p>\n\n<p>\nImportant note:  if this API is invoked with force==true, internal state may be left behind.  CleanTestStateAsync() should be invoked to remove state that may have been left behind.\n</p>\n<p>\nThe FaultAnalysisService must be enabled to use this API.\n</p>\n"
  example: []
  syntax:
    content: public Task CancelTestCommandAsync(Guid operationId, bool force)
    content.vb: Public Function CancelTestCommandAsync(operationId As Guid, force As Boolean) As Task
    parameters:
    - id: operationId
      type: System.Guid
      description: Indicates the operationId of the test command to cancel.
    - id: force
      type: System.Boolean
      description: Indicates whether to gracefully rollback and clean up internal system state modified by executing the test command.  See Remarks.
    return:
      type: System.Threading.Tasks.Task
      description: A Task.
  overload: System.Fabric.FabricClient.TestManagementClient.CancelTestCommandAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.TestManagementClient.CancelTestCommandAsync(System.Guid,System.Boolean,System.TimeSpan)
  commentId: M:System.Fabric.FabricClient.TestManagementClient.CancelTestCommandAsync(System.Guid,System.Boolean,System.TimeSpan)
  id: CancelTestCommandAsync(System.Guid,System.Boolean,System.TimeSpan)
  parent: System.Fabric.FabricClient.TestManagementClient
  langs:
  - csharp
  - vb
  name: CancelTestCommandAsync(Guid, Boolean, TimeSpan)
  nameWithType: FabricClient.TestManagementClient.CancelTestCommandAsync(Guid, Boolean, TimeSpan)
  fullName: System.Fabric.FabricClient.TestManagementClient.CancelTestCommandAsync(System.Guid, System.Boolean, System.TimeSpan)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.TestManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: CancelTestCommandAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.TestManagementClient.cs
    startLine: 1575
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\nCancels a test command.\n"
  remarks: "\n<p>\nIf force is false, then the specified test command will be gracefully stopped and cleaned up.  If force is true, the command will be aborted, and some internal state\nmay be left behind.  Specifying force as true should be used with care.  Calling CancelTestCommandAsync() with force set to true is not allowed until CancelTestCommandAsync() has\nbeen called on the same test command with force set to false first, or unless the test command already has a TestCommandProgressState of TestCommandProgressState.RollingBack.\nClarification: TestCommandProgressState.RollingBack means that the system will/is cleaning up internal system state caused by executing the command.  It will not restore data if the\ntest command was to cause data loss.  For example, if you call StartPartitionDataLossAsync() then call CancelTestCommandAsync() the system will only clean up internal state from running the command.  \nIt will not restore the target partition's data, if the command progressed far enough to cause data loss.\n\n\n\n</p>\n\n<p>\nImportant note:  if this API is invoked with force==true, internal state may be left behind.  CleanTestStateAsync() should be invoked to remove state that may have been left behind.\n</p>\n<p>\nThe FaultAnalysisService must be enabled to use this API.\n</p>\n"
  example: []
  syntax:
    content: public Task CancelTestCommandAsync(Guid operationId, bool force, TimeSpan timeout)
    content.vb: Public Function CancelTestCommandAsync(operationId As Guid, force As Boolean, timeout As TimeSpan) As Task
    parameters:
    - id: operationId
      type: System.Guid
      description: Indicates the operationId of the test command to cancel.
    - id: force
      type: System.Boolean
      description: Indicates whether to gracefully rollback and clean up internal system state modified by executing the test command.  See Remarks.
    - id: timeout
      type: System.TimeSpan
      description: The timeout to use for the API call.
    return:
      type: System.Threading.Tasks.Task
      description: A Task.
  overload: System.Fabric.FabricClient.TestManagementClient.CancelTestCommandAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.TestManagementClient.CancelTestCommandAsync(System.Guid,System.Boolean,System.Threading.CancellationToken)
  commentId: M:System.Fabric.FabricClient.TestManagementClient.CancelTestCommandAsync(System.Guid,System.Boolean,System.Threading.CancellationToken)
  id: CancelTestCommandAsync(System.Guid,System.Boolean,System.Threading.CancellationToken)
  parent: System.Fabric.FabricClient.TestManagementClient
  langs:
  - csharp
  - vb
  name: CancelTestCommandAsync(Guid, Boolean, CancellationToken)
  nameWithType: FabricClient.TestManagementClient.CancelTestCommandAsync(Guid, Boolean, CancellationToken)
  fullName: System.Fabric.FabricClient.TestManagementClient.CancelTestCommandAsync(System.Guid, System.Boolean, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.TestManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: CancelTestCommandAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.TestManagementClient.cs
    startLine: 1613
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\nCancels a test command.\n"
  remarks: "\n<p>\nIf force is false, then the specified test command will be gracefully stopped and cleaned up.  If force is true, the command will be aborted, and some internal state\nmay be left behind.  Specifying force as true should be used with care.  Calling CancelTestCommandAsync() with force set to true is not allowed until CancelTestCommandAsync() has\nbeen called on the same test command with force set to false first, or unless the test command already has a TestCommandProgressState of TestCommandProgressState.RollingBack.\nClarification: TestCommandProgressState.RollingBack means that the system will/is cleaning up internal system state caused by executing the command.  It will not restore data if the\ntest command was to cause data loss.  For example, if you call StartPartitionDataLossAsync() then call CancelTestCommandAsync() the system will only clean up internal state from running the command.  \nIt will not restore the target partition's data, if the command progressed far enough to cause data loss.\n\n\n\n</p>\n\n<p>\nImportant note:  if this API is invoked with force==true, internal state may be left behind.  CleanTestStateAsync() should be invoked to remove state that may have been left behind.\n</p>\n<p>\nThe FaultAnalysisService must be enabled to use this API.\n</p>\n"
  example: []
  syntax:
    content: public Task CancelTestCommandAsync(Guid operationId, bool force, CancellationToken cancellationToken)
    content.vb: Public Function CancelTestCommandAsync(operationId As Guid, force As Boolean, cancellationToken As CancellationToken) As Task
    parameters:
    - id: operationId
      type: System.Guid
      description: Indicates the operationId of the test command to cancel.
    - id: force
      type: System.Boolean
      description: Indicates whether to gracefully rollback and clean up internal system state modified by executing the test command.  See Remarks.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: Cancellation token
    return:
      type: System.Threading.Tasks.Task
      description: A Task.
  overload: System.Fabric.FabricClient.TestManagementClient.CancelTestCommandAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.TestManagementClient.CancelTestCommandAsync(System.Guid,System.Boolean,System.TimeSpan,System.Threading.CancellationToken)
  commentId: M:System.Fabric.FabricClient.TestManagementClient.CancelTestCommandAsync(System.Guid,System.Boolean,System.TimeSpan,System.Threading.CancellationToken)
  id: CancelTestCommandAsync(System.Guid,System.Boolean,System.TimeSpan,System.Threading.CancellationToken)
  parent: System.Fabric.FabricClient.TestManagementClient
  langs:
  - csharp
  - vb
  name: CancelTestCommandAsync(Guid, Boolean, TimeSpan, CancellationToken)
  nameWithType: FabricClient.TestManagementClient.CancelTestCommandAsync(Guid, Boolean, TimeSpan, CancellationToken)
  fullName: System.Fabric.FabricClient.TestManagementClient.CancelTestCommandAsync(System.Guid, System.Boolean, System.TimeSpan, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.TestManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: CancelTestCommandAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.TestManagementClient.cs
    startLine: 1651
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\nCancels a test command.\n"
  remarks: "\n<p>\nIf force is false, then the specified test command will be gracefully stopped and cleaned up.  If force is true, the command will be aborted, and some internal state\nmay be left behind.  Specifying force as true should be used with care.  Calling CancelTestCommandAsync() with force set to true is not allowed until CancelTestCommandAsync() has\nbeen called on the same test command with force set to false first, or unless the test command already has a TestCommandProgressState of TestCommandProgressState.RollingBack.\nClarification: TestCommandProgressState.RollingBack means that the system will/is cleaning up internal system state caused by executing the command.  It will not restore data if the\ntest command was to cause data loss.  For example, if you call StartPartitionDataLossAsync() then call CancelTestCommandAsync() the system will only clean up internal state from running the command.  \nIt will not restore the target partition's data, if the command progressed far enough to cause data loss.\n\n\n\n</p>\n\n<p>\nImportant note:  if this API is invoked with force==true, internal state may be left behind.  CleanTestStateAsync() should be invoked to remove state that may have been left behind.\n</p>\n<p>\nThe FaultAnalysisService must be enabled to use this API.\n</p>\n"
  example: []
  syntax:
    content: public Task CancelTestCommandAsync(Guid operationId, bool force, TimeSpan timeout, CancellationToken cancellationToken)
    content.vb: Public Function CancelTestCommandAsync(operationId As Guid, force As Boolean, timeout As TimeSpan, cancellationToken As CancellationToken) As Task
    parameters:
    - id: operationId
      type: System.Guid
      description: Indicates the operationId of the test command to cancel.
    - id: force
      type: System.Boolean
      description: Indicates whether to gracefully rollback and clean up internal system state modified by executing the test command.  See Remarks.
    - id: timeout
      type: System.TimeSpan
      description: The timeout to use for the API call.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: Cancellation token
    return:
      type: System.Threading.Tasks.Task
      description: A Task.
  overload: System.Fabric.FabricClient.TestManagementClient.CancelTestCommandAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.TestManagementClient.StartNodeTransitionAsync(System.Fabric.Description.NodeTransitionDescription,System.TimeSpan,System.Threading.CancellationToken)
  commentId: M:System.Fabric.FabricClient.TestManagementClient.StartNodeTransitionAsync(System.Fabric.Description.NodeTransitionDescription,System.TimeSpan,System.Threading.CancellationToken)
  id: StartNodeTransitionAsync(System.Fabric.Description.NodeTransitionDescription,System.TimeSpan,System.Threading.CancellationToken)
  parent: System.Fabric.FabricClient.TestManagementClient
  langs:
  - csharp
  - vb
  name: StartNodeTransitionAsync(NodeTransitionDescription, TimeSpan, CancellationToken)
  nameWithType: FabricClient.TestManagementClient.StartNodeTransitionAsync(NodeTransitionDescription, TimeSpan, CancellationToken)
  fullName: System.Fabric.FabricClient.TestManagementClient.StartNodeTransitionAsync(System.Fabric.Description.NodeTransitionDescription, System.TimeSpan, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.TestManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: StartNodeTransitionAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.TestManagementClient.cs
    startLine: 1683
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\nStarts or stops a cluster node.  A cluster node is a process, not the OS instance itself.  To start a node, pass in an object of type NodeStartDescription into \nthe description parameter.  To stop a node, pass in an object of type NodeStopDescription.  After this API returns, call GetNodeTransitionProgressAsync()\nto get progress on the operation.\n"
  remarks: The FaultAnalysisService must be enabled to use this API.
  example: []
  syntax:
    content: public Task StartNodeTransitionAsync(NodeTransitionDescription description, TimeSpan operationTimeout, CancellationToken token)
    content.vb: Public Function StartNodeTransitionAsync(description As NodeTransitionDescription, operationTimeout As TimeSpan, token As CancellationToken) As Task
    parameters:
    - id: description
      type: System.Fabric.Description.NodeTransitionDescription
      description: An object which describes what type of node transition to perform.  The transition can be to start or stop a node.
    - id: operationTimeout
      type: System.TimeSpan
      description: The timeout for this API call.
    - id: token
      type: System.Threading.CancellationToken
      description: The cancellationToken
    return:
      type: System.Threading.Tasks.Task
      description: A task
  overload: System.Fabric.FabricClient.TestManagementClient.StartNodeTransitionAsync*
  exceptions:
  - type: System.Fabric.FabricException
    commentId: T:System.Fabric.FabricException
    description: "The <xref href=\"System.Fabric.FabricException.ErrorCode\" data-throw-if-not-resolved=\"false\"></xref> property will indicate the reason.        \n  If the errorCode is InstanceIdMismatch, the nodeInstance provided does not match the instance of the node that was stopped.      \n"
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: The operation timed out.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: An argument with a value of null was passed in.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.TestManagementClient.GetNodeTransitionProgressAsync(System.Guid,System.TimeSpan,System.Threading.CancellationToken)
  commentId: M:System.Fabric.FabricClient.TestManagementClient.GetNodeTransitionProgressAsync(System.Guid,System.TimeSpan,System.Threading.CancellationToken)
  id: GetNodeTransitionProgressAsync(System.Guid,System.TimeSpan,System.Threading.CancellationToken)
  parent: System.Fabric.FabricClient.TestManagementClient
  langs:
  - csharp
  - vb
  name: GetNodeTransitionProgressAsync(Guid, TimeSpan, CancellationToken)
  nameWithType: FabricClient.TestManagementClient.GetNodeTransitionProgressAsync(Guid, TimeSpan, CancellationToken)
  fullName: System.Fabric.FabricClient.TestManagementClient.GetNodeTransitionProgressAsync(System.Guid, System.TimeSpan, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.TestManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: GetNodeTransitionProgressAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.TestManagementClient.cs
    startLine: 1704
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\nGets the progress of a command started using StartNodeTransitionAsync().\n"
  remarks: The FaultAnalysisService must be enabled to use this API.
  example: []
  syntax:
    content: public Task<NodeTransitionProgress> GetNodeTransitionProgressAsync(Guid operationId, TimeSpan timeout, CancellationToken cancellationToken)
    content.vb: Public Function GetNodeTransitionProgressAsync(operationId As Guid, timeout As TimeSpan, cancellationToken As CancellationToken) As Task(Of NodeTransitionProgress)
    parameters:
    - id: operationId
      type: System.Guid
      description: The operationId passed in when the test command was started using StartNodeTransitionAsync().
    - id: timeout
      type: System.TimeSpan
      description: Timeout.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: Cancellation token
    return:
      type: System.Threading.Tasks.Task{System.Fabric.NodeTransitionProgress}
      description: A PartitionRestartProgress object, containing TestCommandProgressState and PartitionRestartResult.
  overload: System.Fabric.FabricClient.TestManagementClient.GetNodeTransitionProgressAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.TestManagementClient.CleanTestStateAsync
  commentId: M:System.Fabric.FabricClient.TestManagementClient.CleanTestStateAsync
  id: CleanTestStateAsync
  parent: System.Fabric.FabricClient.TestManagementClient
  langs:
  - csharp
  - vb
  name: CleanTestStateAsync()
  nameWithType: FabricClient.TestManagementClient.CleanTestStateAsync()
  fullName: System.Fabric.FabricClient.TestManagementClient.CleanTestStateAsync()
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.TestManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: CleanTestStateAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.TestManagementClient.cs
    startLine: 1722
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\nCleans up all the test state in the cluster.\n"
  remarks: "\nCleans up all the test state in the cluster which has been set for fault operations; like StopNode, InvokeDataLoss, RestartPartition and InvokeQuorumLoss\nThis API should be called if any of these operations fail or if the test driver process dies or an operation is canceled while in flight to ensure that\nthe cluster is back into the normal state. Normally all the fault operations clean up their state at the end of the execution of the API so CleanTestState only\nneeds to be called if the API operation is interrupted.\n"
  example: []
  syntax:
    content: public Task CleanTestStateAsync()
    content.vb: Public Function CleanTestStateAsync As Task
    return:
      type: System.Threading.Tasks.Task
      description: Task
  overload: System.Fabric.FabricClient.TestManagementClient.CleanTestStateAsync*
  exceptions:
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: Action took more than its allocated time.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.TestManagementClient.CleanTestStateAsync(System.TimeSpan,System.Threading.CancellationToken)
  commentId: M:System.Fabric.FabricClient.TestManagementClient.CleanTestStateAsync(System.TimeSpan,System.Threading.CancellationToken)
  id: CleanTestStateAsync(System.TimeSpan,System.Threading.CancellationToken)
  parent: System.Fabric.FabricClient.TestManagementClient
  langs:
  - csharp
  - vb
  name: CleanTestStateAsync(TimeSpan, CancellationToken)
  nameWithType: FabricClient.TestManagementClient.CleanTestStateAsync(TimeSpan, CancellationToken)
  fullName: System.Fabric.FabricClient.TestManagementClient.CleanTestStateAsync(System.TimeSpan, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.TestManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: CleanTestStateAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.TestManagementClient.cs
    startLine: 1740
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\nCleans up all the test state in the cluster.\n"
  remarks: "\nCleans up all the test state in the cluster which has been set for fault operations, InvokeDataLoss, RestartPartition and InvokeQuorumLoss\nThis API should be called if any of these operations fail or if the test driver process dies or an operation is canceled while in flight to ensure that\nthe cluster is back into the normal state. Normally all the fault operations clean up their state at the end of the execution of the API so CleanTestState only\nneeds to be called if the API operation is interrupted .\n"
  example: []
  syntax:
    content: public Task CleanTestStateAsync(TimeSpan operationTimeout, CancellationToken token)
    content.vb: Public Function CleanTestStateAsync(operationTimeout As TimeSpan, token As CancellationToken) As Task
    parameters:
    - id: operationTimeout
      type: System.TimeSpan
      description: The overall timeout for the operation.
    - id: token
      type: System.Threading.CancellationToken
      description: Cancellation token
    return:
      type: System.Threading.Tasks.Task
      description: Task
  overload: System.Fabric.FabricClient.TestManagementClient.CleanTestStateAsync*
  exceptions:
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: Action took more than its allocated time.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.TestManagementClient.ValidateApplicationAsync(System.Uri,System.TimeSpan)
  commentId: M:System.Fabric.FabricClient.TestManagementClient.ValidateApplicationAsync(System.Uri,System.TimeSpan)
  id: ValidateApplicationAsync(System.Uri,System.TimeSpan)
  parent: System.Fabric.FabricClient.TestManagementClient
  langs:
  - csharp
  - vb
  name: ValidateApplicationAsync(Uri, TimeSpan)
  nameWithType: FabricClient.TestManagementClient.ValidateApplicationAsync(Uri, TimeSpan)
  fullName: System.Fabric.FabricClient.TestManagementClient.ValidateApplicationAsync(System.Uri, System.TimeSpan)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.TestManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: ValidateApplicationAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.TestManagementClient.cs
    startLine: 1765
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\nThis API will validate the availability and health of all services in the specified application.\n"
  example: []
  syntax:
    content: public Task ValidateApplicationAsync(Uri applicationName, TimeSpan maximumStabilizationTimeout)
    content.vb: Public Function ValidateApplicationAsync(applicationName As Uri, maximumStabilizationTimeout As TimeSpan) As Task
    parameters:
    - id: applicationName
      type: System.Uri
      description: Name of the application whose services need to be validated.
    - id: maximumStabilizationTimeout
      type: System.TimeSpan
      description: Max amount of time to wait for the services to stabilize else fail the operation.
    return:
      type: System.Threading.Tasks.Task
      description: Task
  overload: System.Fabric.FabricClient.TestManagementClient.ValidateApplicationAsync*
  exceptions:
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: Action took more than its allocated time.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Any of the required arguments are null.
  - type: System.Fabric.FabricValidationException
    commentId: T:System.Fabric.FabricValidationException
    description: If any service does not stabilize within the specified timeout.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.TestManagementClient.ValidateApplicationAsync(System.Uri,System.TimeSpan,System.Threading.CancellationToken)
  commentId: M:System.Fabric.FabricClient.TestManagementClient.ValidateApplicationAsync(System.Uri,System.TimeSpan,System.Threading.CancellationToken)
  id: ValidateApplicationAsync(System.Uri,System.TimeSpan,System.Threading.CancellationToken)
  parent: System.Fabric.FabricClient.TestManagementClient
  langs:
  - csharp
  - vb
  name: ValidateApplicationAsync(Uri, TimeSpan, CancellationToken)
  nameWithType: FabricClient.TestManagementClient.ValidateApplicationAsync(Uri, TimeSpan, CancellationToken)
  fullName: System.Fabric.FabricClient.TestManagementClient.ValidateApplicationAsync(System.Uri, System.TimeSpan, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.TestManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: ValidateApplicationAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.TestManagementClient.cs
    startLine: 1782
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\nThis API will validate the availability and health of all services in the specified application.\n"
  example: []
  syntax:
    content: public Task ValidateApplicationAsync(Uri applicationName, TimeSpan maximumStabilizationTimeout, CancellationToken token)
    content.vb: Public Function ValidateApplicationAsync(applicationName As Uri, maximumStabilizationTimeout As TimeSpan, token As CancellationToken) As Task
    parameters:
    - id: applicationName
      type: System.Uri
      description: Name of the application whose services need to be validated.
    - id: maximumStabilizationTimeout
      type: System.TimeSpan
      description: Max amount of time to wait for the services to stabilize else fail the operation.
    - id: token
      type: System.Threading.CancellationToken
      description: Cancellation token
    return:
      type: System.Threading.Tasks.Task
      description: Task
  overload: System.Fabric.FabricClient.TestManagementClient.ValidateApplicationAsync*
  exceptions:
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: Action took more than its allocated time.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Any of the required arguments are null.
  - type: System.Fabric.FabricValidationException
    commentId: T:System.Fabric.FabricValidationException
    description: If any service does not stabilize within the specified timeout.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.TestManagementClient.ValidateApplicationAsync(System.Uri,System.TimeSpan,System.TimeSpan,System.Threading.CancellationToken)
  commentId: M:System.Fabric.FabricClient.TestManagementClient.ValidateApplicationAsync(System.Uri,System.TimeSpan,System.TimeSpan,System.Threading.CancellationToken)
  id: ValidateApplicationAsync(System.Uri,System.TimeSpan,System.TimeSpan,System.Threading.CancellationToken)
  parent: System.Fabric.FabricClient.TestManagementClient
  langs:
  - csharp
  - vb
  name: ValidateApplicationAsync(Uri, TimeSpan, TimeSpan, CancellationToken)
  nameWithType: FabricClient.TestManagementClient.ValidateApplicationAsync(Uri, TimeSpan, TimeSpan, CancellationToken)
  fullName: System.Fabric.FabricClient.TestManagementClient.ValidateApplicationAsync(System.Uri, System.TimeSpan, System.TimeSpan, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.TestManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: ValidateApplicationAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.TestManagementClient.cs
    startLine: 1801
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\nThis API will validate the availability and health of all services in the specified application.\n"
  example: []
  syntax:
    content: public Task ValidateApplicationAsync(Uri applicationName, TimeSpan maximumStabilizationTimeout, TimeSpan operationTimeout, CancellationToken token)
    content.vb: Public Function ValidateApplicationAsync(applicationName As Uri, maximumStabilizationTimeout As TimeSpan, operationTimeout As TimeSpan, token As CancellationToken) As Task
    parameters:
    - id: applicationName
      type: System.Uri
      description: Name of the application whose services need to be validated.
    - id: maximumStabilizationTimeout
      type: System.TimeSpan
      description: Max amount of time to wait for the services to stabilize else fail the operation.
    - id: operationTimeout
      type: System.TimeSpan
      description: Amount of time to wait for an operation to complete else fail the operation.
    - id: token
      type: System.Threading.CancellationToken
      description: Cancellation token
    return:
      type: System.Threading.Tasks.Task
      description: Task
  overload: System.Fabric.FabricClient.TestManagementClient.ValidateApplicationAsync*
  exceptions:
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: Action took more than its allocated time.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Any of the required arguments are null.
  - type: System.Fabric.FabricValidationException
    commentId: T:System.Fabric.FabricValidationException
    description: If any service does not stabilize within the specified timeout.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.TestManagementClient.ValidateServiceAsync(System.Uri,System.TimeSpan)
  commentId: M:System.Fabric.FabricClient.TestManagementClient.ValidateServiceAsync(System.Uri,System.TimeSpan)
  id: ValidateServiceAsync(System.Uri,System.TimeSpan)
  parent: System.Fabric.FabricClient.TestManagementClient
  langs:
  - csharp
  - vb
  name: ValidateServiceAsync(Uri, TimeSpan)
  nameWithType: FabricClient.TestManagementClient.ValidateServiceAsync(Uri, TimeSpan)
  fullName: System.Fabric.FabricClient.TestManagementClient.ValidateServiceAsync(System.Uri, System.TimeSpan)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.TestManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: ValidateServiceAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.TestManagementClient.cs
    startLine: 1826
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\nThis API will validate the availability and health of the specified service.\n"
  example: []
  syntax:
    content: public Task ValidateServiceAsync(Uri serviceName, TimeSpan maximumStabilizationTimeout)
    content.vb: Public Function ValidateServiceAsync(serviceName As Uri, maximumStabilizationTimeout As TimeSpan) As Task
    parameters:
    - id: serviceName
      type: System.Uri
      description: Name of the service that needs to be validated.
    - id: maximumStabilizationTimeout
      type: System.TimeSpan
      description: Max amount of time to wait for the service to stabilize else fail the operation.
    return:
      type: System.Threading.Tasks.Task
      description: Task
  overload: System.Fabric.FabricClient.TestManagementClient.ValidateServiceAsync*
  exceptions:
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: Action took more than its allocated time.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Any of the required arguments are null.
  - type: System.Fabric.FabricValidationException
    commentId: T:System.Fabric.FabricValidationException
    description: If any service does not stabilize within the specified timeout.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.TestManagementClient.ValidateServiceAsync(System.Uri,System.TimeSpan,System.Threading.CancellationToken)
  commentId: M:System.Fabric.FabricClient.TestManagementClient.ValidateServiceAsync(System.Uri,System.TimeSpan,System.Threading.CancellationToken)
  id: ValidateServiceAsync(System.Uri,System.TimeSpan,System.Threading.CancellationToken)
  parent: System.Fabric.FabricClient.TestManagementClient
  langs:
  - csharp
  - vb
  name: ValidateServiceAsync(Uri, TimeSpan, CancellationToken)
  nameWithType: FabricClient.TestManagementClient.ValidateServiceAsync(Uri, TimeSpan, CancellationToken)
  fullName: System.Fabric.FabricClient.TestManagementClient.ValidateServiceAsync(System.Uri, System.TimeSpan, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.TestManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: ValidateServiceAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.TestManagementClient.cs
    startLine: 1843
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\nThis API will validate the availability and health of the specified service.\n"
  example: []
  syntax:
    content: public Task ValidateServiceAsync(Uri serviceName, TimeSpan maximumStabilizationTimeout, CancellationToken token)
    content.vb: Public Function ValidateServiceAsync(serviceName As Uri, maximumStabilizationTimeout As TimeSpan, token As CancellationToken) As Task
    parameters:
    - id: serviceName
      type: System.Uri
      description: Name of the service that needs to be validated.
    - id: maximumStabilizationTimeout
      type: System.TimeSpan
      description: Max amount of time to wait for the service to stabilize else fail the operation.
    - id: token
      type: System.Threading.CancellationToken
      description: Cancellation token
    return:
      type: System.Threading.Tasks.Task
      description: Task
  overload: System.Fabric.FabricClient.TestManagementClient.ValidateServiceAsync*
  exceptions:
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: Action took more than its allocated time.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Any of the required arguments are null.
  - type: System.Fabric.FabricValidationException
    commentId: T:System.Fabric.FabricValidationException
    description: If any service does not stabilize within the specified timeout.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.TestManagementClient.ValidateServiceAsync(System.Uri,System.TimeSpan,System.TimeSpan,System.Threading.CancellationToken)
  commentId: M:System.Fabric.FabricClient.TestManagementClient.ValidateServiceAsync(System.Uri,System.TimeSpan,System.TimeSpan,System.Threading.CancellationToken)
  id: ValidateServiceAsync(System.Uri,System.TimeSpan,System.TimeSpan,System.Threading.CancellationToken)
  parent: System.Fabric.FabricClient.TestManagementClient
  langs:
  - csharp
  - vb
  name: ValidateServiceAsync(Uri, TimeSpan, TimeSpan, CancellationToken)
  nameWithType: FabricClient.TestManagementClient.ValidateServiceAsync(Uri, TimeSpan, TimeSpan, CancellationToken)
  fullName: System.Fabric.FabricClient.TestManagementClient.ValidateServiceAsync(System.Uri, System.TimeSpan, System.TimeSpan, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.TestManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: ValidateServiceAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.TestManagementClient.cs
    startLine: 1862
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\nThis API will validate the availability and health of the specified service.\n"
  example: []
  syntax:
    content: public Task ValidateServiceAsync(Uri serviceName, TimeSpan maximumStabilizationTimeout, TimeSpan operationTimeout, CancellationToken token)
    content.vb: Public Function ValidateServiceAsync(serviceName As Uri, maximumStabilizationTimeout As TimeSpan, operationTimeout As TimeSpan, token As CancellationToken) As Task
    parameters:
    - id: serviceName
      type: System.Uri
      description: Name of the service that needs to be validated.
    - id: maximumStabilizationTimeout
      type: System.TimeSpan
      description: Max amount of time to wait for the service to stabilize else fail the operation.
    - id: operationTimeout
      type: System.TimeSpan
      description: Amount of time to wait for an operation to complete else fail the operation.
    - id: token
      type: System.Threading.CancellationToken
      description: Cancellation token
    return:
      type: System.Threading.Tasks.Task
      description: Task
  overload: System.Fabric.FabricClient.TestManagementClient.ValidateServiceAsync*
  exceptions:
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: Action took more than its allocated time.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Any of the required arguments are null.
  - type: System.Fabric.FabricValidationException
    commentId: T:System.Fabric.FabricValidationException
    description: If any service does not stabilize within the specified timeout.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.TestManagementClient.StartChaosAsync(System.Fabric.Chaos.DataStructures.ChaosParameters,System.TimeSpan,System.Threading.CancellationToken)
  commentId: M:System.Fabric.FabricClient.TestManagementClient.StartChaosAsync(System.Fabric.Chaos.DataStructures.ChaosParameters,System.TimeSpan,System.Threading.CancellationToken)
  id: StartChaosAsync(System.Fabric.Chaos.DataStructures.ChaosParameters,System.TimeSpan,System.Threading.CancellationToken)
  parent: System.Fabric.FabricClient.TestManagementClient
  langs:
  - csharp
  - vb
  name: StartChaosAsync(ChaosParameters, TimeSpan, CancellationToken)
  nameWithType: FabricClient.TestManagementClient.StartChaosAsync(ChaosParameters, TimeSpan, CancellationToken)
  fullName: System.Fabric.FabricClient.TestManagementClient.StartChaosAsync(System.Fabric.Chaos.DataStructures.ChaosParameters, System.TimeSpan, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.TestManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: StartChaosAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.TestManagementClient.cs
    startLine: 1974
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\nThis API will start Chaos with the supplied parameter values.\n"
  remarks: "\n<p>\nThe FaultAnalysisService must be enabled to use this API.\n</p>\n"
  example: []
  syntax:
    content: public Task StartChaosAsync(ChaosParameters chaosParameters, TimeSpan operationTimeout, CancellationToken cancellationToken)
    content.vb: Public Function StartChaosAsync(chaosParameters As ChaosParameters, operationTimeout As TimeSpan, cancellationToken As CancellationToken) As Task
    parameters:
    - id: chaosParameters
      type: System.Fabric.Chaos.DataStructures.ChaosParameters
      description: <xref href="System.Fabric.Chaos.DataStructures.ChaosParameters" data-throw-if-not-resolved="false"></xref> Contains various parameters for controlling Chaos; e.g., time to run, maximum number of concurrent fautls, etc.
    - id: operationTimeout
      type: System.TimeSpan
      description: The overall timeout for the operation.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: Cancellation token.
    return:
      type: System.Threading.Tasks.Task
      description: A task.
  overload: System.Fabric.FabricClient.TestManagementClient.StartChaosAsync*
  exceptions:
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: Action took more than its allocated time.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Any of the required arguments are null.
  - type: System.Fabric.FabricChaosAlreadyRunningException
    commentId: T:System.Fabric.FabricChaosAlreadyRunningException
    description: This exception is thrown when StartChaos API is invoked while Chaos is already running in the cluster.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.TestManagementClient.StartChaosAsync(System.Fabric.Chaos.DataStructures.ChaosParameters)
  commentId: M:System.Fabric.FabricClient.TestManagementClient.StartChaosAsync(System.Fabric.Chaos.DataStructures.ChaosParameters)
  id: StartChaosAsync(System.Fabric.Chaos.DataStructures.ChaosParameters)
  parent: System.Fabric.FabricClient.TestManagementClient
  langs:
  - csharp
  - vb
  name: StartChaosAsync(ChaosParameters)
  nameWithType: FabricClient.TestManagementClient.StartChaosAsync(ChaosParameters)
  fullName: System.Fabric.FabricClient.TestManagementClient.StartChaosAsync(System.Fabric.Chaos.DataStructures.ChaosParameters)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.TestManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: StartChaosAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.TestManagementClient.cs
    startLine: 1994
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\nThis API will start Chaos with the supplied parameter values.\n"
  example: []
  syntax:
    content: public Task StartChaosAsync(ChaosParameters chaosParameters)
    content.vb: Public Function StartChaosAsync(chaosParameters As ChaosParameters) As Task
    parameters:
    - id: chaosParameters
      type: System.Fabric.Chaos.DataStructures.ChaosParameters
      description: '<xref href="System.Fabric.Chaos.DataStructures.ChaosParameters" data-throw-if-not-resolved="false"></xref> contains various parameters for controlling Chaos; e.g., time to run, maximum number of concurrent fautls, etc. '
    return:
      type: System.Threading.Tasks.Task
      description: A task.
  overload: System.Fabric.FabricClient.TestManagementClient.StartChaosAsync*
  exceptions:
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: Action took more than its allocated time.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Any of the required arguments are null.
  - type: System.Fabric.FabricChaosAlreadyRunningException
    commentId: T:System.Fabric.FabricChaosAlreadyRunningException
    description: This exception is thrown when StartChaos API is invoked while Chaos is already running in the cluster.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.TestManagementClient.StopChaosAsync(System.TimeSpan,System.Threading.CancellationToken)
  commentId: M:System.Fabric.FabricClient.TestManagementClient.StopChaosAsync(System.TimeSpan,System.Threading.CancellationToken)
  id: StopChaosAsync(System.TimeSpan,System.Threading.CancellationToken)
  parent: System.Fabric.FabricClient.TestManagementClient
  langs:
  - csharp
  - vb
  name: StopChaosAsync(TimeSpan, CancellationToken)
  nameWithType: FabricClient.TestManagementClient.StopChaosAsync(TimeSpan, CancellationToken)
  fullName: System.Fabric.FabricClient.TestManagementClient.StopChaosAsync(System.TimeSpan, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.TestManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: StopChaosAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.TestManagementClient.cs
    startLine: 2019
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\nThis API will stop Chaos.\n"
  remarks: "\n<p>\nThe FaultAnalysisService must be enabled to use this API.\n</p>\n"
  example: []
  syntax:
    content: public Task StopChaosAsync(TimeSpan operationTimeout, CancellationToken cancellationToken)
    content.vb: Public Function StopChaosAsync(operationTimeout As TimeSpan, cancellationToken As CancellationToken) As Task
    parameters:
    - id: operationTimeout
      type: System.TimeSpan
      description: The overall timeout for the operation.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: Cancellation token
    return:
      type: System.Threading.Tasks.Task
      description: A task.
  overload: System.Fabric.FabricClient.TestManagementClient.StopChaosAsync*
  exceptions:
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: Action took more than its allocated time.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.TestManagementClient.StopChaosAsync
  commentId: M:System.Fabric.FabricClient.TestManagementClient.StopChaosAsync
  id: StopChaosAsync
  parent: System.Fabric.FabricClient.TestManagementClient
  langs:
  - csharp
  - vb
  name: StopChaosAsync()
  nameWithType: FabricClient.TestManagementClient.StopChaosAsync()
  fullName: System.Fabric.FabricClient.TestManagementClient.StopChaosAsync()
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.TestManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: StopChaosAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.TestManagementClient.cs
    startLine: 2038
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\nThis API will stop Chaos.\n"
  remarks: "\n<p>\nThe FaultAnalysisService must be enabled to use this API.\n</p>\n"
  example: []
  syntax:
    content: public Task StopChaosAsync()
    content.vb: Public Function StopChaosAsync As Task
    return:
      type: System.Threading.Tasks.Task
      description: A task.
  overload: System.Fabric.FabricClient.TestManagementClient.StopChaosAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.TestManagementClient.GetChaosReportAsync(System.Fabric.Chaos.DataStructures.ChaosReportFilter)
  commentId: M:System.Fabric.FabricClient.TestManagementClient.GetChaosReportAsync(System.Fabric.Chaos.DataStructures.ChaosReportFilter)
  id: GetChaosReportAsync(System.Fabric.Chaos.DataStructures.ChaosReportFilter)
  parent: System.Fabric.FabricClient.TestManagementClient
  langs:
  - csharp
  - vb
  name: GetChaosReportAsync(ChaosReportFilter)
  nameWithType: FabricClient.TestManagementClient.GetChaosReportAsync(ChaosReportFilter)
  fullName: System.Fabric.FabricClient.TestManagementClient.GetChaosReportAsync(System.Fabric.Chaos.DataStructures.ChaosReportFilter)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.TestManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: GetChaosReportAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.TestManagementClient.cs
    startLine: 2058
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\nRetrieves the report of Chaos runs.\n"
  example: []
  syntax:
    content: public Task<ChaosReport> GetChaosReportAsync(ChaosReportFilter filter)
    content.vb: Public Function GetChaosReportAsync(filter As ChaosReportFilter) As Task(Of ChaosReport)
    parameters:
    - id: filter
      type: System.Fabric.Chaos.DataStructures.ChaosReportFilter
      description: Filter for the <xref href="System.Fabric.Chaos.DataStructures.ChaosEvent" data-throw-if-not-resolved="false"></xref>s to be included in the report.
    return:
      type: System.Threading.Tasks.Task{System.Fabric.Chaos.DataStructures.ChaosReport}
      description: Report of Chaos runs.
  overload: System.Fabric.FabricClient.TestManagementClient.GetChaosReportAsync*
  exceptions:
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: Action took more than its allocated time.
  - type: System.Fabric.FabricException
    commentId: T:System.Fabric.FabricException
    description: >-
      These are Service Fabric exceptions and the following error codes should be inspected.

      FabricErrorCode.NotReady - if this API is called before starting Chaos.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.TestManagementClient.GetChaosReportAsync(System.Fabric.Chaos.DataStructures.ChaosReportFilter,System.TimeSpan,System.Threading.CancellationToken)
  commentId: M:System.Fabric.FabricClient.TestManagementClient.GetChaosReportAsync(System.Fabric.Chaos.DataStructures.ChaosReportFilter,System.TimeSpan,System.Threading.CancellationToken)
  id: GetChaosReportAsync(System.Fabric.Chaos.DataStructures.ChaosReportFilter,System.TimeSpan,System.Threading.CancellationToken)
  parent: System.Fabric.FabricClient.TestManagementClient
  langs:
  - csharp
  - vb
  name: GetChaosReportAsync(ChaosReportFilter, TimeSpan, CancellationToken)
  nameWithType: FabricClient.TestManagementClient.GetChaosReportAsync(ChaosReportFilter, TimeSpan, CancellationToken)
  fullName: System.Fabric.FabricClient.TestManagementClient.GetChaosReportAsync(System.Fabric.Chaos.DataStructures.ChaosReportFilter, System.TimeSpan, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.TestManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: GetChaosReportAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.TestManagementClient.cs
    startLine: 2082
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\nRetrieves the report of Chaos runs.\n"
  example: []
  syntax:
    content: public Task<ChaosReport> GetChaosReportAsync(ChaosReportFilter filter, TimeSpan operationTimeout, CancellationToken cancellationToken)
    content.vb: Public Function GetChaosReportAsync(filter As ChaosReportFilter, operationTimeout As TimeSpan, cancellationToken As CancellationToken) As Task(Of ChaosReport)
    parameters:
    - id: filter
      type: System.Fabric.Chaos.DataStructures.ChaosReportFilter
      description: Filter for the <xref href="System.Fabric.Chaos.DataStructures.ChaosEvent" data-throw-if-not-resolved="false"></xref>s to be included in the <xref href="System.Fabric.Chaos.DataStructures.ChaosReport" data-throw-if-not-resolved="false"></xref>.
    - id: operationTimeout
      type: System.TimeSpan
      description: The overall timeout for the operation.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: Cancellation token.
    return:
      type: System.Threading.Tasks.Task{System.Fabric.Chaos.DataStructures.ChaosReport}
      description: Report of Chaos runs.
  overload: System.Fabric.FabricClient.TestManagementClient.GetChaosReportAsync*
  exceptions:
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: Action took more than its allocated time.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Any of the required arguments are null.
  - type: System.Fabric.FabricException
    commentId: T:System.Fabric.FabricException
    description: >-
      These are Service Fabric exceptions and the following error codes should be inspected.

      FabricErrorCode.NotReady - if this API is called before starting Chaos.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.TestManagementClient.GetChaosReportAsync(System.String)
  commentId: M:System.Fabric.FabricClient.TestManagementClient.GetChaosReportAsync(System.String)
  id: GetChaosReportAsync(System.String)
  parent: System.Fabric.FabricClient.TestManagementClient
  langs:
  - csharp
  - vb
  name: GetChaosReportAsync(String)
  nameWithType: FabricClient.TestManagementClient.GetChaosReportAsync(String)
  fullName: System.Fabric.FabricClient.TestManagementClient.GetChaosReportAsync(System.String)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.TestManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: GetChaosReportAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.TestManagementClient.cs
    startLine: 2105
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\nRetrieves the report of Chaos runs.\n"
  example: []
  syntax:
    content: public Task<ChaosReport> GetChaosReportAsync(string continuationToken)
    content.vb: Public Function GetChaosReportAsync(continuationToken As String) As Task(Of ChaosReport)
    parameters:
    - id: continuationToken
      type: System.String
      description: Continuation token for the list of <xref href="System.Fabric.Chaos.DataStructures.ChaosEvent" data-throw-if-not-resolved="false"></xref>s in the <xref href="System.Fabric.Chaos.DataStructures.ChaosReport" data-throw-if-not-resolved="false"></xref>.
    return:
      type: System.Threading.Tasks.Task{System.Fabric.Chaos.DataStructures.ChaosReport}
      description: Report of Chaos runs.
  overload: System.Fabric.FabricClient.TestManagementClient.GetChaosReportAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Any of the required arguments are null.
  - type: System.Fabric.FabricException
    commentId: T:System.Fabric.FabricException
    description: >-
      These are Service Fabric exceptions and the following error codes should be inspected.

      FabricErrorCode.NotReady - if this API is called before starting Chaos.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.TestManagementClient.GetChaosReportAsync(System.String,System.TimeSpan,System.Threading.CancellationToken)
  commentId: M:System.Fabric.FabricClient.TestManagementClient.GetChaosReportAsync(System.String,System.TimeSpan,System.Threading.CancellationToken)
  id: GetChaosReportAsync(System.String,System.TimeSpan,System.Threading.CancellationToken)
  parent: System.Fabric.FabricClient.TestManagementClient
  langs:
  - csharp
  - vb
  name: GetChaosReportAsync(String, TimeSpan, CancellationToken)
  nameWithType: FabricClient.TestManagementClient.GetChaosReportAsync(String, TimeSpan, CancellationToken)
  fullName: System.Fabric.FabricClient.TestManagementClient.GetChaosReportAsync(System.String, System.TimeSpan, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.TestManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: GetChaosReportAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.TestManagementClient.cs
    startLine: 2127
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\nRetrieves the report of Chaos runs.\n"
  example: []
  syntax:
    content: public Task<ChaosReport> GetChaosReportAsync(string continuationToken, TimeSpan operationTimeout, CancellationToken cancellationToken)
    content.vb: Public Function GetChaosReportAsync(continuationToken As String, operationTimeout As TimeSpan, cancellationToken As CancellationToken) As Task(Of ChaosReport)
    parameters:
    - id: continuationToken
      type: System.String
      description: Continuation token for the list of <xref href="System.Fabric.Chaos.DataStructures.ChaosEvent" data-throw-if-not-resolved="false"></xref>s in the <xref href="System.Fabric.Chaos.DataStructures.ChaosReport" data-throw-if-not-resolved="false"></xref>.
    - id: operationTimeout
      type: System.TimeSpan
      description: The overall timeout for the operation.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: Cancellation token.
    return:
      type: System.Threading.Tasks.Task{System.Fabric.Chaos.DataStructures.ChaosReport}
      description: Report of Chaos runs.
  overload: System.Fabric.FabricClient.TestManagementClient.GetChaosReportAsync*
  exceptions:
  - type: System.Fabric.FabricException
    commentId: T:System.Fabric.FabricException
    description: >-
      These are Service Fabric exceptions and the following error codes should be inspected.

      FabricErrorCode.NotReady - if this API is called before starting Chaos.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: System.Fabric
  commentId: N:System.Fabric
  isExternal: false
  name: System.Fabric
  nameWithType: System.Fabric
  fullName: System.Fabric
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.FabricClient.TestManagementClient.System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
  commentId: M:System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  parent: System.Fabric.Messaging.Stream.ByteArraySerializer
  definition: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  name: Serialize<FabricClient.TestManagementClient>()
  nameWithType: ByteArraySerializer.Serialize<FabricClient.TestManagementClient>()
  fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<System.Fabric.FabricClient.TestManagementClient>()
  nameWithType.vb: ByteArraySerializer.Serialize(Of FabricClient.TestManagementClient)()
  fullname.vb: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of System.Fabric.FabricClient.TestManagementClient)()
  name.vb: Serialize(Of FabricClient.TestManagementClient)()
  spec.csharp:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
    name: Serialize<FabricClient.TestManagementClient>
    nameWithType: ByteArraySerializer.Serialize<FabricClient.TestManagementClient>
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<System.Fabric.FabricClient.TestManagementClient>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
    name: Serialize(Of FabricClient.TestManagementClient)
    nameWithType: ByteArraySerializer.Serialize(Of FabricClient.TestManagementClient)
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of System.Fabric.FabricClient.TestManagementClient)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  commentId: M:System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  isExternal: false
  name: Serialize<T>(T)
  nameWithType: ByteArraySerializer.Serialize<T>(T)
  fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<T>(T)
  nameWithType.vb: ByteArraySerializer.Serialize(Of T)(T)
  fullname.vb: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of T)(T)
  name.vb: Serialize(Of T)(T)
  spec.csharp:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
    name: Serialize<T>
    nameWithType: ByteArraySerializer.Serialize<T>
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
    name: Serialize(Of T)
    nameWithType: ByteArraySerializer.Serialize(Of T)
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.Messaging.Stream.ByteArraySerializer
  commentId: T:System.Fabric.Messaging.Stream.ByteArraySerializer
  parent: System.Fabric.Messaging.Stream
  isExternal: false
  name: ByteArraySerializer
  nameWithType: ByteArraySerializer
  fullName: System.Fabric.Messaging.Stream.ByteArraySerializer
- uid: System.Fabric.Messaging.Stream
  commentId: N:System.Fabric.Messaging.Stream
  isExternal: false
  name: System.Fabric.Messaging.Stream
  nameWithType: System.Fabric.Messaging.Stream
  fullName: System.Fabric.Messaging.Stream
- uid: System.Fabric.DataLossMode
  commentId: T:System.Fabric.DataLossMode
  parent: System.Fabric
  isExternal: false
  name: DataLossMode
  nameWithType: DataLossMode
  fullName: System.Fabric.DataLossMode
- uid: System.Fabric.PartitionSelector
  commentId: T:System.Fabric.PartitionSelector
  parent: System.Fabric
  isExternal: false
  name: PartitionSelector
  nameWithType: PartitionSelector
  fullName: System.Fabric.PartitionSelector
- uid: System.Fabric.FabricClient.TestManagementClient.StartPartitionDataLossAsync*
  commentId: Overload:System.Fabric.FabricClient.TestManagementClient.StartPartitionDataLossAsync
  isExternal: false
  name: StartPartitionDataLossAsync
  nameWithType: FabricClient.TestManagementClient.StartPartitionDataLossAsync
  fullName: System.Fabric.FabricClient.TestManagementClient.StartPartitionDataLossAsync
- uid: System.TimeoutException
  commentId: T:System.TimeoutException
- uid: System.ArgumentNullException
  commentId: T:System.ArgumentNullException
- uid: System.InvalidOperationException
  commentId: T:System.InvalidOperationException
  parent: System
  isExternal: true
  name: InvalidOperationException
  nameWithType: InvalidOperationException
  fullName: System.InvalidOperationException
- uid: System.Fabric.FabricException
  commentId: T:System.Fabric.FabricException
  parent: System.Fabric
  isExternal: false
  name: FabricException
  nameWithType: FabricException
  fullName: System.Fabric.FabricException
- uid: System.Guid
  commentId: T:System.Guid
  parent: System
  isExternal: true
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: false
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
- uid: System.TimeSpan
  commentId: T:System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: System.Fabric.FabricClient.TestManagementClient.InvokeDataLossAsync*
  commentId: Overload:System.Fabric.FabricClient.TestManagementClient.InvokeDataLossAsync
  isExternal: false
  name: InvokeDataLossAsync
  nameWithType: FabricClient.TestManagementClient.InvokeDataLossAsync
  fullName: System.Fabric.FabricClient.TestManagementClient.InvokeDataLossAsync
- uid: System.Threading.Tasks.Task{System.Fabric.Result.InvokeDataLossResult}
  commentId: T:System.Threading.Tasks.Task{System.Fabric.Result.InvokeDataLossResult}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<InvokeDataLossResult>
  nameWithType: Task<InvokeDataLossResult>
  fullName: System.Threading.Tasks.Task<System.Fabric.Result.InvokeDataLossResult>
  nameWithType.vb: Task(Of InvokeDataLossResult)
  fullname.vb: System.Threading.Tasks.Task(Of System.Fabric.Result.InvokeDataLossResult)
  name.vb: Task(Of InvokeDataLossResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Fabric.Result.InvokeDataLossResult
    name: InvokeDataLossResult
    nameWithType: InvokeDataLossResult
    fullName: System.Fabric.Result.InvokeDataLossResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Fabric.Result.InvokeDataLossResult
    name: InvokeDataLossResult
    nameWithType: InvokeDataLossResult
    fullName: System.Fabric.Result.InvokeDataLossResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullname.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.FabricClient.TestManagementClient.StartPartitionQuorumLossAsync*
  commentId: Overload:System.Fabric.FabricClient.TestManagementClient.StartPartitionQuorumLossAsync
  isExternal: false
  name: StartPartitionQuorumLossAsync
  nameWithType: FabricClient.TestManagementClient.StartPartitionQuorumLossAsync
  fullName: System.Fabric.FabricClient.TestManagementClient.StartPartitionQuorumLossAsync
- uid: System.OperationCanceledException
  commentId: T:System.OperationCanceledException
- uid: System.Fabric.QuorumLossMode
  commentId: T:System.Fabric.QuorumLossMode
  parent: System.Fabric
  isExternal: false
  name: QuorumLossMode
  nameWithType: QuorumLossMode
  fullName: System.Fabric.QuorumLossMode
- uid: System.Fabric.Result.InvokeQuorumLossResult
  commentId: T:System.Fabric.Result.InvokeQuorumLossResult
  isExternal: false
  name: InvokeQuorumLossResult
  nameWithType: InvokeQuorumLossResult
  fullName: System.Fabric.Result.InvokeQuorumLossResult
- uid: System.Fabric.FabricClient.TestManagementClient.InvokeQuorumLossAsync*
  commentId: Overload:System.Fabric.FabricClient.TestManagementClient.InvokeQuorumLossAsync
  isExternal: false
  name: InvokeQuorumLossAsync
  nameWithType: FabricClient.TestManagementClient.InvokeQuorumLossAsync
  fullName: System.Fabric.FabricClient.TestManagementClient.InvokeQuorumLossAsync
- uid: System.Threading.Tasks.Task{System.Fabric.Result.InvokeQuorumLossResult}
  commentId: T:System.Threading.Tasks.Task{System.Fabric.Result.InvokeQuorumLossResult}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<InvokeQuorumLossResult>
  nameWithType: Task<InvokeQuorumLossResult>
  fullName: System.Threading.Tasks.Task<System.Fabric.Result.InvokeQuorumLossResult>
  nameWithType.vb: Task(Of InvokeQuorumLossResult)
  fullname.vb: System.Threading.Tasks.Task(Of System.Fabric.Result.InvokeQuorumLossResult)
  name.vb: Task(Of InvokeQuorumLossResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Fabric.Result.InvokeQuorumLossResult
    name: InvokeQuorumLossResult
    nameWithType: InvokeQuorumLossResult
    fullName: System.Fabric.Result.InvokeQuorumLossResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Fabric.Result.InvokeQuorumLossResult
    name: InvokeQuorumLossResult
    nameWithType: InvokeQuorumLossResult
    fullName: System.Fabric.Result.InvokeQuorumLossResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.RestartPartitionMode
  commentId: T:System.Fabric.RestartPartitionMode
  parent: System.Fabric
  isExternal: false
  name: RestartPartitionMode
  nameWithType: RestartPartitionMode
  fullName: System.Fabric.RestartPartitionMode
- uid: System.Fabric.FabricClient.TestManagementClient.StartPartitionRestartAsync*
  commentId: Overload:System.Fabric.FabricClient.TestManagementClient.StartPartitionRestartAsync
  isExternal: false
  name: StartPartitionRestartAsync
  nameWithType: FabricClient.TestManagementClient.StartPartitionRestartAsync
  fullName: System.Fabric.FabricClient.TestManagementClient.StartPartitionRestartAsync
- uid: System.Fabric.FabricClient.TestManagementClient.RestartPartitionAsync*
  commentId: Overload:System.Fabric.FabricClient.TestManagementClient.RestartPartitionAsync
  isExternal: false
  name: RestartPartitionAsync
  nameWithType: FabricClient.TestManagementClient.RestartPartitionAsync
  fullName: System.Fabric.FabricClient.TestManagementClient.RestartPartitionAsync
- uid: System.Threading.Tasks.Task{System.Fabric.Result.RestartPartitionResult}
  commentId: T:System.Threading.Tasks.Task{System.Fabric.Result.RestartPartitionResult}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<RestartPartitionResult>
  nameWithType: Task<RestartPartitionResult>
  fullName: System.Threading.Tasks.Task<System.Fabric.Result.RestartPartitionResult>
  nameWithType.vb: Task(Of RestartPartitionResult)
  fullname.vb: System.Threading.Tasks.Task(Of System.Fabric.Result.RestartPartitionResult)
  name.vb: Task(Of RestartPartitionResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Fabric.Result.RestartPartitionResult
    name: RestartPartitionResult
    nameWithType: RestartPartitionResult
    fullName: System.Fabric.Result.RestartPartitionResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Fabric.Result.RestartPartitionResult
    name: RestartPartitionResult
    nameWithType: RestartPartitionResult
    fullName: System.Fabric.Result.RestartPartitionResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.FabricClient.TestManagementClient.GetPartitionDataLossProgressAsync*
  commentId: Overload:System.Fabric.FabricClient.TestManagementClient.GetPartitionDataLossProgressAsync
  isExternal: false
  name: GetPartitionDataLossProgressAsync
  nameWithType: FabricClient.TestManagementClient.GetPartitionDataLossProgressAsync
  fullName: System.Fabric.FabricClient.TestManagementClient.GetPartitionDataLossProgressAsync
- uid: System.Threading.Tasks.Task{System.Fabric.PartitionDataLossProgress}
  commentId: T:System.Threading.Tasks.Task{System.Fabric.PartitionDataLossProgress}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<PartitionDataLossProgress>
  nameWithType: Task<PartitionDataLossProgress>
  fullName: System.Threading.Tasks.Task<System.Fabric.PartitionDataLossProgress>
  nameWithType.vb: Task(Of PartitionDataLossProgress)
  fullname.vb: System.Threading.Tasks.Task(Of System.Fabric.PartitionDataLossProgress)
  name.vb: Task(Of PartitionDataLossProgress)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Fabric.PartitionDataLossProgress
    name: PartitionDataLossProgress
    nameWithType: PartitionDataLossProgress
    fullName: System.Fabric.PartitionDataLossProgress
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Fabric.PartitionDataLossProgress
    name: PartitionDataLossProgress
    nameWithType: PartitionDataLossProgress
    fullName: System.Fabric.PartitionDataLossProgress
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.FabricClient.TestManagementClient.GetPartitionQuorumLossProgressAsync*
  commentId: Overload:System.Fabric.FabricClient.TestManagementClient.GetPartitionQuorumLossProgressAsync
  isExternal: false
  name: GetPartitionQuorumLossProgressAsync
  nameWithType: FabricClient.TestManagementClient.GetPartitionQuorumLossProgressAsync
  fullName: System.Fabric.FabricClient.TestManagementClient.GetPartitionQuorumLossProgressAsync
- uid: System.Threading.Tasks.Task{System.Fabric.PartitionQuorumLossProgress}
  commentId: T:System.Threading.Tasks.Task{System.Fabric.PartitionQuorumLossProgress}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<PartitionQuorumLossProgress>
  nameWithType: Task<PartitionQuorumLossProgress>
  fullName: System.Threading.Tasks.Task<System.Fabric.PartitionQuorumLossProgress>
  nameWithType.vb: Task(Of PartitionQuorumLossProgress)
  fullname.vb: System.Threading.Tasks.Task(Of System.Fabric.PartitionQuorumLossProgress)
  name.vb: Task(Of PartitionQuorumLossProgress)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Fabric.PartitionQuorumLossProgress
    name: PartitionQuorumLossProgress
    nameWithType: PartitionQuorumLossProgress
    fullName: System.Fabric.PartitionQuorumLossProgress
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Fabric.PartitionQuorumLossProgress
    name: PartitionQuorumLossProgress
    nameWithType: PartitionQuorumLossProgress
    fullName: System.Fabric.PartitionQuorumLossProgress
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.FabricClient.TestManagementClient.GetPartitionRestartProgressAsync*
  commentId: Overload:System.Fabric.FabricClient.TestManagementClient.GetPartitionRestartProgressAsync
  isExternal: false
  name: GetPartitionRestartProgressAsync
  nameWithType: FabricClient.TestManagementClient.GetPartitionRestartProgressAsync
  fullName: System.Fabric.FabricClient.TestManagementClient.GetPartitionRestartProgressAsync
- uid: System.Threading.Tasks.Task{System.Fabric.PartitionRestartProgress}
  commentId: T:System.Threading.Tasks.Task{System.Fabric.PartitionRestartProgress}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<PartitionRestartProgress>
  nameWithType: Task<PartitionRestartProgress>
  fullName: System.Threading.Tasks.Task<System.Fabric.PartitionRestartProgress>
  nameWithType.vb: Task(Of PartitionRestartProgress)
  fullname.vb: System.Threading.Tasks.Task(Of System.Fabric.PartitionRestartProgress)
  name.vb: Task(Of PartitionRestartProgress)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Fabric.PartitionRestartProgress
    name: PartitionRestartProgress
    nameWithType: PartitionRestartProgress
    fullName: System.Fabric.PartitionRestartProgress
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Fabric.PartitionRestartProgress
    name: PartitionRestartProgress
    nameWithType: PartitionRestartProgress
    fullName: System.Fabric.PartitionRestartProgress
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.FabricClient.TestManagementClient.GetTestCommandStatusListAsync*
  commentId: Overload:System.Fabric.FabricClient.TestManagementClient.GetTestCommandStatusListAsync
  isExternal: false
  name: GetTestCommandStatusListAsync
  nameWithType: FabricClient.TestManagementClient.GetTestCommandStatusListAsync
  fullName: System.Fabric.FabricClient.TestManagementClient.GetTestCommandStatusListAsync
- uid: System.Threading.Tasks.Task{System.Fabric.Query.TestCommandStatusList}
  commentId: T:System.Threading.Tasks.Task{System.Fabric.Query.TestCommandStatusList}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<TestCommandStatusList>
  nameWithType: Task<TestCommandStatusList>
  fullName: System.Threading.Tasks.Task<System.Fabric.Query.TestCommandStatusList>
  nameWithType.vb: Task(Of TestCommandStatusList)
  fullname.vb: System.Threading.Tasks.Task(Of System.Fabric.Query.TestCommandStatusList)
  name.vb: Task(Of TestCommandStatusList)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Fabric.Query.TestCommandStatusList
    name: TestCommandStatusList
    nameWithType: TestCommandStatusList
    fullName: System.Fabric.Query.TestCommandStatusList
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Fabric.Query.TestCommandStatusList
    name: TestCommandStatusList
    nameWithType: TestCommandStatusList
    fullName: System.Fabric.Query.TestCommandStatusList
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.Query.TestCommandStateFilter
  commentId: T:System.Fabric.Query.TestCommandStateFilter
  parent: System.Fabric.Query
  isExternal: false
  name: TestCommandStateFilter
  nameWithType: TestCommandStateFilter
  fullName: System.Fabric.Query.TestCommandStateFilter
- uid: System.Fabric.Query
  commentId: N:System.Fabric.Query
  isExternal: false
  name: System.Fabric.Query
  nameWithType: System.Fabric.Query
  fullName: System.Fabric.Query
- uid: System.Fabric.Query.TestCommandTypeFilter
  commentId: T:System.Fabric.Query.TestCommandTypeFilter
  parent: System.Fabric.Query
  isExternal: false
  name: TestCommandTypeFilter
  nameWithType: TestCommandTypeFilter
  fullName: System.Fabric.Query.TestCommandTypeFilter
- uid: System.Fabric.FabricClient.TestManagementClient.CancelTestCommandAsync*
  commentId: Overload:System.Fabric.FabricClient.TestManagementClient.CancelTestCommandAsync
  isExternal: false
  name: CancelTestCommandAsync
  nameWithType: FabricClient.TestManagementClient.CancelTestCommandAsync
  fullName: System.Fabric.FabricClient.TestManagementClient.CancelTestCommandAsync
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Fabric.FabricException.ErrorCode
  commentId: P:System.Fabric.FabricException.ErrorCode
  parent: System.Fabric.FabricException
  isExternal: false
  name: ErrorCode
  nameWithType: FabricException.ErrorCode
  fullName: System.Fabric.FabricException.ErrorCode
- uid: System.Fabric.FabricClient.TestManagementClient.StartNodeTransitionAsync*
  commentId: Overload:System.Fabric.FabricClient.TestManagementClient.StartNodeTransitionAsync
  isExternal: false
  name: StartNodeTransitionAsync
  nameWithType: FabricClient.TestManagementClient.StartNodeTransitionAsync
  fullName: System.Fabric.FabricClient.TestManagementClient.StartNodeTransitionAsync
- uid: System.Fabric.Description.NodeTransitionDescription
  commentId: T:System.Fabric.Description.NodeTransitionDescription
  parent: System.Fabric.Description
  isExternal: false
  name: NodeTransitionDescription
  nameWithType: NodeTransitionDescription
  fullName: System.Fabric.Description.NodeTransitionDescription
- uid: System.Fabric.Description
  commentId: N:System.Fabric.Description
  isExternal: false
  name: System.Fabric.Description
  nameWithType: System.Fabric.Description
  fullName: System.Fabric.Description
- uid: System.Fabric.FabricClient.TestManagementClient.GetNodeTransitionProgressAsync*
  commentId: Overload:System.Fabric.FabricClient.TestManagementClient.GetNodeTransitionProgressAsync
  isExternal: false
  name: GetNodeTransitionProgressAsync
  nameWithType: FabricClient.TestManagementClient.GetNodeTransitionProgressAsync
  fullName: System.Fabric.FabricClient.TestManagementClient.GetNodeTransitionProgressAsync
- uid: System.Threading.Tasks.Task{System.Fabric.NodeTransitionProgress}
  commentId: T:System.Threading.Tasks.Task{System.Fabric.NodeTransitionProgress}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<NodeTransitionProgress>
  nameWithType: Task<NodeTransitionProgress>
  fullName: System.Threading.Tasks.Task<System.Fabric.NodeTransitionProgress>
  nameWithType.vb: Task(Of NodeTransitionProgress)
  fullname.vb: System.Threading.Tasks.Task(Of System.Fabric.NodeTransitionProgress)
  name.vb: Task(Of NodeTransitionProgress)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Fabric.NodeTransitionProgress
    name: NodeTransitionProgress
    nameWithType: NodeTransitionProgress
    fullName: System.Fabric.NodeTransitionProgress
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Fabric.NodeTransitionProgress
    name: NodeTransitionProgress
    nameWithType: NodeTransitionProgress
    fullName: System.Fabric.NodeTransitionProgress
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.FabricClient.TestManagementClient.CleanTestStateAsync*
  commentId: Overload:System.Fabric.FabricClient.TestManagementClient.CleanTestStateAsync
  isExternal: false
  name: CleanTestStateAsync
  nameWithType: FabricClient.TestManagementClient.CleanTestStateAsync
  fullName: System.Fabric.FabricClient.TestManagementClient.CleanTestStateAsync
- uid: System.Fabric.FabricClient.TestManagementClient.ValidateApplicationAsync*
  commentId: Overload:System.Fabric.FabricClient.TestManagementClient.ValidateApplicationAsync
  isExternal: false
  name: ValidateApplicationAsync
  nameWithType: FabricClient.TestManagementClient.ValidateApplicationAsync
  fullName: System.Fabric.FabricClient.TestManagementClient.ValidateApplicationAsync
- uid: System.Fabric.FabricValidationException
  commentId: T:System.Fabric.FabricValidationException
  isExternal: false
  name: FabricValidationException
  nameWithType: FabricValidationException
  fullName: System.Fabric.FabricValidationException
- uid: System.Uri
  commentId: T:System.Uri
  parent: System
  isExternal: true
  name: Uri
  nameWithType: Uri
  fullName: System.Uri
- uid: System.Fabric.FabricClient.TestManagementClient.ValidateServiceAsync*
  commentId: Overload:System.Fabric.FabricClient.TestManagementClient.ValidateServiceAsync
  isExternal: false
  name: ValidateServiceAsync
  nameWithType: FabricClient.TestManagementClient.ValidateServiceAsync
  fullName: System.Fabric.FabricClient.TestManagementClient.ValidateServiceAsync
- uid: System.Fabric.Chaos.DataStructures.ChaosParameters
  commentId: T:System.Fabric.Chaos.DataStructures.ChaosParameters
  parent: System.Fabric.Chaos.DataStructures
  isExternal: false
  name: ChaosParameters
  nameWithType: ChaosParameters
  fullName: System.Fabric.Chaos.DataStructures.ChaosParameters
- uid: System.Fabric.FabricClient.TestManagementClient.StartChaosAsync*
  commentId: Overload:System.Fabric.FabricClient.TestManagementClient.StartChaosAsync
  isExternal: false
  name: StartChaosAsync
  nameWithType: FabricClient.TestManagementClient.StartChaosAsync
  fullName: System.Fabric.FabricClient.TestManagementClient.StartChaosAsync
- uid: System.Fabric.FabricChaosAlreadyRunningException
  commentId: T:System.Fabric.FabricChaosAlreadyRunningException
  isExternal: false
  name: FabricChaosAlreadyRunningException
  nameWithType: FabricChaosAlreadyRunningException
  fullName: System.Fabric.FabricChaosAlreadyRunningException
- uid: System.Fabric.Chaos.DataStructures
  commentId: N:System.Fabric.Chaos.DataStructures
  isExternal: false
  name: System.Fabric.Chaos.DataStructures
  nameWithType: System.Fabric.Chaos.DataStructures
  fullName: System.Fabric.Chaos.DataStructures
- uid: System.Fabric.FabricClient.TestManagementClient.StopChaosAsync*
  commentId: Overload:System.Fabric.FabricClient.TestManagementClient.StopChaosAsync
  isExternal: false
  name: StopChaosAsync
  nameWithType: FabricClient.TestManagementClient.StopChaosAsync
  fullName: System.Fabric.FabricClient.TestManagementClient.StopChaosAsync
- uid: System.Fabric.Chaos.DataStructures.ChaosEvent
  commentId: T:System.Fabric.Chaos.DataStructures.ChaosEvent
  parent: System.Fabric.Chaos.DataStructures
  isExternal: false
  name: ChaosEvent
  nameWithType: ChaosEvent
  fullName: System.Fabric.Chaos.DataStructures.ChaosEvent
- uid: System.Fabric.FabricClient.TestManagementClient.GetChaosReportAsync*
  commentId: Overload:System.Fabric.FabricClient.TestManagementClient.GetChaosReportAsync
  isExternal: false
  name: GetChaosReportAsync
  nameWithType: FabricClient.TestManagementClient.GetChaosReportAsync
  fullName: System.Fabric.FabricClient.TestManagementClient.GetChaosReportAsync
- uid: System.Fabric.Chaos.DataStructures.ChaosReportFilter
  commentId: T:System.Fabric.Chaos.DataStructures.ChaosReportFilter
  parent: System.Fabric.Chaos.DataStructures
  isExternal: false
  name: ChaosReportFilter
  nameWithType: ChaosReportFilter
  fullName: System.Fabric.Chaos.DataStructures.ChaosReportFilter
- uid: System.Threading.Tasks.Task{System.Fabric.Chaos.DataStructures.ChaosReport}
  commentId: T:System.Threading.Tasks.Task{System.Fabric.Chaos.DataStructures.ChaosReport}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<ChaosReport>
  nameWithType: Task<ChaosReport>
  fullName: System.Threading.Tasks.Task<System.Fabric.Chaos.DataStructures.ChaosReport>
  nameWithType.vb: Task(Of ChaosReport)
  fullname.vb: System.Threading.Tasks.Task(Of System.Fabric.Chaos.DataStructures.ChaosReport)
  name.vb: Task(Of ChaosReport)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Fabric.Chaos.DataStructures.ChaosReport
    name: ChaosReport
    nameWithType: ChaosReport
    fullName: System.Fabric.Chaos.DataStructures.ChaosReport
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Fabric.Chaos.DataStructures.ChaosReport
    name: ChaosReport
    nameWithType: ChaosReport
    fullName: System.Fabric.Chaos.DataStructures.ChaosReport
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.Chaos.DataStructures.ChaosReport
  commentId: T:System.Fabric.Chaos.DataStructures.ChaosReport
  isExternal: false
  name: ChaosReport
  nameWithType: ChaosReport
  fullName: System.Fabric.Chaos.DataStructures.ChaosReport
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
