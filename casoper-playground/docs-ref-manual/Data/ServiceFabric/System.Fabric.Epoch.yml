### YamlMime:ManagedReference
items:
- uid: System.Fabric.Epoch
  commentId: T:System.Fabric.Epoch
  id: Epoch
  parent: System.Fabric
  children:
  - System.Fabric.Epoch.#ctor(System.Int64,System.Int64)
  - System.Fabric.Epoch.CompareTo(System.Fabric.Epoch)
  - System.Fabric.Epoch.ConfigurationNumber
  - System.Fabric.Epoch.DataLossNumber
  - System.Fabric.Epoch.Equals(System.Fabric.Epoch)
  - System.Fabric.Epoch.Equals(System.Object)
  - System.Fabric.Epoch.GetHashCode
  - System.Fabric.Epoch.op_Equality(System.Fabric.Epoch,System.Fabric.Epoch)
  - System.Fabric.Epoch.op_GreaterThan(System.Fabric.Epoch,System.Fabric.Epoch)
  - System.Fabric.Epoch.op_GreaterThanOrEqual(System.Fabric.Epoch,System.Fabric.Epoch)
  - System.Fabric.Epoch.op_Inequality(System.Fabric.Epoch,System.Fabric.Epoch)
  - System.Fabric.Epoch.op_LessThan(System.Fabric.Epoch,System.Fabric.Epoch)
  - System.Fabric.Epoch.op_LessThanOrEqual(System.Fabric.Epoch,System.Fabric.Epoch)
  langs:
  - csharp
  - vb
  name: Epoch
  nameWithType: Epoch
  fullName: System.Fabric.Epoch
  type: Struct
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/Epoch.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: Epoch
    path: src/prod/src/managed/Api/src/System/Fabric/Epoch.cs
    startLine: 27
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p> Represents the current version of the partition in Service Fabric. </p>\n"
  remarks: "\n<p>An Epoch is a configuration number for the partition as a whole. \nWhen the configuration of the replica set changes, for example when the Primary replica changes, \nthe operations that are replicated from the new Primary replica are said to be a new Epoch \nfrom the ones which were sent by the old Primary replica. \nThe fact that the Primary has changed is not directly visible to Secondary replicas, \nwhich are usually unaffected by the failure that affected the original Primary replica. \nTo track that the Primary replica has changed has to be communicated to the Secondary replica. \nThis communication occurs via the <xref href=\"System.Fabric.IStateProvider.UpdateEpochAsync(System.Fabric.Epoch%2cSystem.Int64%2cSystem.Threading.CancellationToken)\" data-throw-if-not-resolved=\"false\"></xref> method. \nMost services can ignore the details of the inner fields of the Epoch as it is usually sufficient to know that the Epoch has changed \nand to compare Epochs to determine relative ordering of operations and events in the system. \nComparison operations are provided for this purpose.</p>\n"
  example: []
  syntax:
    content: >-
      [Serializable]

      public struct Epoch : IEquatable<Epoch>, IComparable<Epoch>
    content.vb: >-
      <Serializable>

      Public Structure Epoch
          Implements IEquatable(Of Epoch), IComparable(Of Epoch)
  implements:
  - System.IEquatable{System.Fabric.Epoch}
  - System.IComparable{System.Fabric.Epoch}
  inheritedMembers:
  - System.ValueType.ToString
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetType
  extensionMethods:
  - System.Fabric.Epoch.System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
  attributes:
  - type: System.SerializableAttribute
    ctor: System.SerializableAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - struct
  modifiers.vb:
  - Public
  - Structure
- uid: System.Fabric.Epoch.#ctor(System.Int64,System.Int64)
  commentId: M:System.Fabric.Epoch.#ctor(System.Int64,System.Int64)
  id: '#ctor(System.Int64,System.Int64)'
  parent: System.Fabric.Epoch
  langs:
  - csharp
  - vb
  name: Epoch(Int64, Int64)
  nameWithType: Epoch.Epoch(Int64, Int64)
  fullName: System.Fabric.Epoch.Epoch(System.Int64, System.Int64)
  type: Constructor
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/Epoch.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: .ctor
    path: src/prod/src/managed/Api/src/System/Fabric/Epoch.cs
    startLine: 46
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Fabric.Epoch\" data-throw-if-not-resolved=\"false\"></xref> class with the specified \ndata loss number and configuration number.</p>\n"
  example: []
  syntax:
    content: public Epoch(long dataLossNumber, long configurationNumber)
    content.vb: Public Sub New(dataLossNumber As Long, configurationNumber As Long)
    parameters:
    - id: dataLossNumber
      type: System.Int64
      description: "\n<p>An <xref href=\"System.Int64\" data-throw-if-not-resolved=\"false\"></xref> representing an increasing value which is updated \nwhenever data loss is suspected.</p>\n"
    - id: configurationNumber
      type: System.Int64
      description: "\n<p>An <xref href=\"System.Int64\" data-throw-if-not-resolved=\"false\"></xref> representing an increasing value that is updated whenever \nthe configuration of this replica set changes.</p>\n"
  overload: System.Fabric.Epoch.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.Epoch.DataLossNumber
  commentId: P:System.Fabric.Epoch.DataLossNumber
  id: DataLossNumber
  parent: System.Fabric.Epoch
  langs:
  - csharp
  - vb
  name: DataLossNumber
  nameWithType: Epoch.DataLossNumber
  fullName: System.Fabric.Epoch.DataLossNumber
  type: Property
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/Epoch.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: DataLossNumber
    path: src/prod/src/managed/Api/src/System/Fabric/Epoch.cs
    startLine: 63
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Gets the current data loss number in this <xref href=\"System.Fabric.Epoch\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>The data loss number property is an increasing value which is updated \nwhenever data loss is suspected, as when loss of a quorum of replicas in the replica set \nthat includes the Primary replica.</p>\n"
  example: []
  syntax:
    content: public long DataLossNumber { get; set; }
    content.vb: Public Property DataLossNumber As Long
    parameters: []
    return:
      type: System.Int64
      description: "\n<p>Returns an <xref href=\"System.Int64\" data-throw-if-not-resolved=\"false\"></xref> representing the current data loss number.</p>\n"
  overload: System.Fabric.Epoch.DataLossNumber*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Fabric.Epoch.ConfigurationNumber
  commentId: P:System.Fabric.Epoch.ConfigurationNumber
  id: ConfigurationNumber
  parent: System.Fabric.Epoch
  langs:
  - csharp
  - vb
  name: ConfigurationNumber
  nameWithType: Epoch.ConfigurationNumber
  fullName: System.Fabric.Epoch.ConfigurationNumber
  type: Property
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/Epoch.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: ConfigurationNumber
    path: src/prod/src/managed/Api/src/System/Fabric/Epoch.cs
    startLine: 89
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Gets or sets the current configuration number property in this <xref href=\"System.Fabric.Epoch\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>The configuration number is an increasing value that is updated whenever the configuration \nof this replica set changes. The services are informed of the current configuration number \nonly when <xref href=\"System.Fabric.IReplicator.UpdateEpochAsync(System.Fabric.Epoch%2cSystem.Threading.CancellationToken)\" data-throw-if-not-resolved=\"false\"></xref>\nmethod is called as a result of an attempt to change the Primary replica of the replica set.</p>\n"
  example: []
  syntax:
    content: public long ConfigurationNumber { get; set; }
    content.vb: Public Property ConfigurationNumber As Long
    parameters: []
    return:
      type: System.Int64
      description: "\n<p>Returns an <xref href=\"System.Int64\" data-throw-if-not-resolved=\"false\"></xref> representing the configuration number.</p>\n"
  overload: System.Fabric.Epoch.ConfigurationNumber*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Fabric.Epoch.op_Equality(System.Fabric.Epoch,System.Fabric.Epoch)
  commentId: M:System.Fabric.Epoch.op_Equality(System.Fabric.Epoch,System.Fabric.Epoch)
  id: op_Equality(System.Fabric.Epoch,System.Fabric.Epoch)
  parent: System.Fabric.Epoch
  langs:
  - csharp
  - vb
  name: Equality(Epoch, Epoch)
  nameWithType: Epoch.Equality(Epoch, Epoch)
  fullName: System.Fabric.Epoch.Equality(System.Fabric.Epoch, System.Fabric.Epoch)
  type: Operator
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/Epoch.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: op_Equality
    path: src/prod/src/managed/Api/src/System/Fabric/Epoch.cs
    startLine: 117
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Determines whether two specified <xref href=\"System.Fabric.Epoch\" data-throw-if-not-resolved=\"false\"></xref> objects have the same value.</p>\n"
  example: []
  syntax:
    content: public static bool operator ==(Epoch left, Epoch right)
    content.vb: Public Shared Operator =(left As Epoch, right As Epoch) As Boolean
    parameters:
    - id: left
      type: System.Fabric.Epoch
      description: "\n<p>The left <xref href=\"System.Fabric.Epoch\" data-throw-if-not-resolved=\"false\"></xref> object to compare.</p>\n"
    - id: right
      type: System.Fabric.Epoch
      description: "\n<p>The right <xref href=\"System.Fabric.Epoch\" data-throw-if-not-resolved=\"false\"></xref> object to compare.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the value of <em>left</em> is the same as the value of <em>right</em>; \notherwise, <strong>false</strong>.</p>\n"
  overload: System.Fabric.Epoch.op_Equality*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Fabric.Epoch.op_Inequality(System.Fabric.Epoch,System.Fabric.Epoch)
  commentId: M:System.Fabric.Epoch.op_Inequality(System.Fabric.Epoch,System.Fabric.Epoch)
  id: op_Inequality(System.Fabric.Epoch,System.Fabric.Epoch)
  parent: System.Fabric.Epoch
  langs:
  - csharp
  - vb
  name: Inequality(Epoch, Epoch)
  nameWithType: Epoch.Inequality(Epoch, Epoch)
  fullName: System.Fabric.Epoch.Inequality(System.Fabric.Epoch, System.Fabric.Epoch)
  type: Operator
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/Epoch.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: op_Inequality
    path: src/prod/src/managed/Api/src/System/Fabric/Epoch.cs
    startLine: 136
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Determines whether two specified <xref href=\"System.Fabric.Epoch\" data-throw-if-not-resolved=\"false\"></xref> objects have different values.</p>\n"
  example: []
  syntax:
    content: public static bool operator !=(Epoch left, Epoch right)
    content.vb: Public Shared Operator <>(left As Epoch, right As Epoch) As Boolean
    parameters:
    - id: left
      type: System.Fabric.Epoch
      description: "\n<p>The left <xref href=\"System.Fabric.Epoch\" data-throw-if-not-resolved=\"false\"></xref> object to compare.</p>\n"
    - id: right
      type: System.Fabric.Epoch
      description: "\n<p>The right <xref href=\"System.Fabric.Epoch\" data-throw-if-not-resolved=\"false\"></xref> object to compare.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the value of <em>left</em> is different than the value of <em>right</em>; \notherwise, <strong>false</strong>.</p>\n"
  overload: System.Fabric.Epoch.op_Inequality*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Fabric.Epoch.op_LessThan(System.Fabric.Epoch,System.Fabric.Epoch)
  commentId: M:System.Fabric.Epoch.op_LessThan(System.Fabric.Epoch,System.Fabric.Epoch)
  id: op_LessThan(System.Fabric.Epoch,System.Fabric.Epoch)
  parent: System.Fabric.Epoch
  langs:
  - csharp
  - vb
  name: LessThan(Epoch, Epoch)
  nameWithType: Epoch.LessThan(Epoch, Epoch)
  fullName: System.Fabric.Epoch.LessThan(System.Fabric.Epoch, System.Fabric.Epoch)
  type: Operator
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/Epoch.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: op_LessThan
    path: src/prod/src/managed/Api/src/System/Fabric/Epoch.cs
    startLine: 155
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Determines whether one specified <xref href=\"System.Fabric.Epoch\" data-throw-if-not-resolved=\"false\"></xref> object is less than another specified <xref href=\"System.Fabric.Epoch\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  example: []
  syntax:
    content: public static bool operator <(Epoch left, Epoch right)
    content.vb: Public Shared Operator <(left As Epoch, right As Epoch) As Boolean
    parameters:
    - id: left
      type: System.Fabric.Epoch
      description: "\n<p>The left <xref href=\"System.Fabric.Epoch\" data-throw-if-not-resolved=\"false\"></xref> object to compare.</p>\n"
    - id: right
      type: System.Fabric.Epoch
      description: "\n<p>The right <xref href=\"System.Fabric.Epoch\" data-throw-if-not-resolved=\"false\"></xref> object to compare.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the value of <em>left</em> is less than the value of <em>right</em>; \notherwise, <strong>false</strong>.</p>\n"
  overload: System.Fabric.Epoch.op_LessThan*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Fabric.Epoch.op_LessThanOrEqual(System.Fabric.Epoch,System.Fabric.Epoch)
  commentId: M:System.Fabric.Epoch.op_LessThanOrEqual(System.Fabric.Epoch,System.Fabric.Epoch)
  id: op_LessThanOrEqual(System.Fabric.Epoch,System.Fabric.Epoch)
  parent: System.Fabric.Epoch
  langs:
  - csharp
  - vb
  name: LessThanOrEqual(Epoch, Epoch)
  nameWithType: Epoch.LessThanOrEqual(Epoch, Epoch)
  fullName: System.Fabric.Epoch.LessThanOrEqual(System.Fabric.Epoch, System.Fabric.Epoch)
  type: Operator
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/Epoch.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: op_LessThanOrEqual
    path: src/prod/src/managed/Api/src/System/Fabric/Epoch.cs
    startLine: 174
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Determines whether one specified <xref href=\"System.Fabric.Epoch\" data-throw-if-not-resolved=\"false\"></xref> object is less than or equal to another specified <xref href=\"System.Fabric.Epoch\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  example: []
  syntax:
    content: public static bool operator <=(Epoch left, Epoch right)
    content.vb: Public Shared Operator <=(left As Epoch, right As Epoch) As Boolean
    parameters:
    - id: left
      type: System.Fabric.Epoch
      description: "\n<p>The left <xref href=\"System.Fabric.Epoch\" data-throw-if-not-resolved=\"false\"></xref> object to compare.</p>\n"
    - id: right
      type: System.Fabric.Epoch
      description: "\n<p>The right <xref href=\"System.Fabric.Epoch\" data-throw-if-not-resolved=\"false\"></xref> object to compare.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the value of <em>left</em> is less than or equal to the value of <em>right</em>; \notherwise, <strong>false</strong>.</p>\n"
  overload: System.Fabric.Epoch.op_LessThanOrEqual*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Fabric.Epoch.op_GreaterThan(System.Fabric.Epoch,System.Fabric.Epoch)
  commentId: M:System.Fabric.Epoch.op_GreaterThan(System.Fabric.Epoch,System.Fabric.Epoch)
  id: op_GreaterThan(System.Fabric.Epoch,System.Fabric.Epoch)
  parent: System.Fabric.Epoch
  langs:
  - csharp
  - vb
  name: GreaterThan(Epoch, Epoch)
  nameWithType: Epoch.GreaterThan(Epoch, Epoch)
  fullName: System.Fabric.Epoch.GreaterThan(System.Fabric.Epoch, System.Fabric.Epoch)
  type: Operator
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/Epoch.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: op_GreaterThan
    path: src/prod/src/managed/Api/src/System/Fabric/Epoch.cs
    startLine: 193
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Determines whether one specified <xref href=\"System.Fabric.Epoch\" data-throw-if-not-resolved=\"false\"></xref> object is greater than another specified <xref href=\"System.Fabric.Epoch\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  example: []
  syntax:
    content: public static bool operator>(Epoch left, Epoch right)
    content.vb: Public Shared Operator>(left As Epoch, right As Epoch) As Boolean
    parameters:
    - id: left
      type: System.Fabric.Epoch
      description: "\n<p>The left <xref href=\"System.Fabric.Epoch\" data-throw-if-not-resolved=\"false\"></xref> object to compare.</p>\n"
    - id: right
      type: System.Fabric.Epoch
      description: "\n<p>The right <xref href=\"System.Fabric.Epoch\" data-throw-if-not-resolved=\"false\"></xref> object to compare.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the value of <em>left</em> is greater than the value of <em>right</em>; \notherwise, <strong>false</strong>.</p>\n"
  overload: System.Fabric.Epoch.op_GreaterThan*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Fabric.Epoch.op_GreaterThanOrEqual(System.Fabric.Epoch,System.Fabric.Epoch)
  commentId: M:System.Fabric.Epoch.op_GreaterThanOrEqual(System.Fabric.Epoch,System.Fabric.Epoch)
  id: op_GreaterThanOrEqual(System.Fabric.Epoch,System.Fabric.Epoch)
  parent: System.Fabric.Epoch
  langs:
  - csharp
  - vb
  name: GreaterThanOrEqual(Epoch, Epoch)
  nameWithType: Epoch.GreaterThanOrEqual(Epoch, Epoch)
  fullName: System.Fabric.Epoch.GreaterThanOrEqual(System.Fabric.Epoch, System.Fabric.Epoch)
  type: Operator
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/Epoch.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: op_GreaterThanOrEqual
    path: src/prod/src/managed/Api/src/System/Fabric/Epoch.cs
    startLine: 212
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Determines whether one specified <xref href=\"System.Fabric.Epoch\" data-throw-if-not-resolved=\"false\"></xref> object is greater than or equal to another specified <xref href=\"System.Fabric.Epoch\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  example: []
  syntax:
    content: public static bool operator >=(Epoch left, Epoch right)
    content.vb: Public Shared Operator >=(left As Epoch, right As Epoch) As Boolean
    parameters:
    - id: left
      type: System.Fabric.Epoch
      description: "\n<p>The left <xref href=\"System.Fabric.Epoch\" data-throw-if-not-resolved=\"false\"></xref> object to compare.</p>\n"
    - id: right
      type: System.Fabric.Epoch
      description: "\n<p>The right <xref href=\"System.Fabric.Epoch\" data-throw-if-not-resolved=\"false\"></xref> object to compare.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the value of <em>left</em> is greater than or equal to the value of <em>right</em>; \notherwise, <strong>false</strong>.</p>\n"
  overload: System.Fabric.Epoch.op_GreaterThanOrEqual*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Fabric.Epoch.Equals(System.Object)
  commentId: M:System.Fabric.Epoch.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Fabric.Epoch
  langs:
  - csharp
  - vb
  name: Equals(Object)
  nameWithType: Epoch.Equals(Object)
  fullName: System.Fabric.Epoch.Equals(System.Object)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/Epoch.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: Equals
    path: src/prod/src/managed/Api/src/System/Fabric/Epoch.cs
    startLine: 228
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Determines whether the specified object is equal to the current object.</p>\n"
  example: []
  syntax:
    content: public override bool Equals(object obj)
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
    parameters:
    - id: obj
      type: System.Object
      description: "\n<p>The object to compare with the current object.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the specified object is equal to the current object; \notherwise, <strong>false</strong>.</p>\n"
  overridden: System.ValueType.Equals(System.Object)
  overload: System.Fabric.Epoch.Equals*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Fabric.Epoch.GetHashCode
  commentId: M:System.Fabric.Epoch.GetHashCode
  id: GetHashCode
  parent: System.Fabric.Epoch
  langs:
  - csharp
  - vb
  name: GetHashCode()
  nameWithType: Epoch.GetHashCode()
  fullName: System.Fabric.Epoch.GetHashCode()
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/Epoch.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: GetHashCode
    path: src/prod/src/managed/Api/src/System/Fabric/Epoch.cs
    startLine: 245
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Serves as a hash function for the <xref href=\"System.Fabric.Epoch\" data-throw-if-not-resolved=\"false\"></xref> type.</p>\n"
  example: []
  syntax:
    content: public override int GetHashCode()
    content.vb: Public Overrides Function GetHashCode As Integer
    return:
      type: System.Int32
      description: "\n<p>A <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref> representing a hash code for the current <xref href=\"System.Fabric.Epoch\" data-throw-if-not-resolved=\"false\"></xref>..</p>\n"
  overridden: System.ValueType.GetHashCode
  overload: System.Fabric.Epoch.GetHashCode*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Fabric.Epoch.Equals(System.Fabric.Epoch)
  commentId: M:System.Fabric.Epoch.Equals(System.Fabric.Epoch)
  id: Equals(System.Fabric.Epoch)
  parent: System.Fabric.Epoch
  langs:
  - csharp
  - vb
  name: Equals(Epoch)
  nameWithType: Epoch.Equals(Epoch)
  fullName: System.Fabric.Epoch.Equals(System.Fabric.Epoch)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/Epoch.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: Equals
    path: src/prod/src/managed/Api/src/System/Fabric/Epoch.cs
    startLine: 260
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Determines whether the specified <xref href=\"System.Fabric.Epoch\" data-throw-if-not-resolved=\"false\"></xref> object is equal to the current <xref href=\"System.Fabric.Epoch\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  example: []
  syntax:
    content: public bool Equals(Epoch other)
    content.vb: Public Function Equals(other As Epoch) As Boolean
    parameters:
    - id: other
      type: System.Fabric.Epoch
      description: "\n<p>The object to compare with the current <xref href=\"System.Fabric.Epoch\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the specified <xref href=\"System.Fabric.Epoch\" data-throw-if-not-resolved=\"false\"></xref> object is equal to the current <xref href=\"System.Fabric.Epoch\" data-throw-if-not-resolved=\"false\"></xref> object; otherwise, <strong>false</strong>.</p>\n"
  overload: System.Fabric.Epoch.Equals*
  implements:
  - System.IEquatable{System.Fabric.Epoch}.Equals(System.Fabric.Epoch)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.Epoch.CompareTo(System.Fabric.Epoch)
  commentId: M:System.Fabric.Epoch.CompareTo(System.Fabric.Epoch)
  id: CompareTo(System.Fabric.Epoch)
  parent: System.Fabric.Epoch
  langs:
  - csharp
  - vb
  name: CompareTo(Epoch)
  nameWithType: Epoch.CompareTo(Epoch)
  fullName: System.Fabric.Epoch.CompareTo(System.Fabric.Epoch)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/Epoch.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: CompareTo
    path: src/prod/src/managed/Api/src/System/Fabric/Epoch.cs
    startLine: 274
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Compares this <xref href=\"System.Fabric.Epoch\" data-throw-if-not-resolved=\"false\"></xref> object to the specified <em>other</em><xref href=\"System.Fabric.Epoch\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  example: []
  syntax:
    content: public int CompareTo(Epoch other)
    content.vb: Public Function CompareTo(other As Epoch) As Integer
    parameters:
    - id: other
      type: System.Fabric.Epoch
      description: "\n<p>The <xref href=\"System.Fabric.Epoch\" data-throw-if-not-resolved=\"false\"></xref> object to compare.</p>\n"
    return:
      type: System.Int32
      description: "\n<p>Returns <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  overload: System.Fabric.Epoch.CompareTo*
  implements:
  - System.IComparable{System.Fabric.Epoch}.CompareTo(System.Fabric.Epoch)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: System.Fabric.IStateProvider.UpdateEpochAsync(System.Fabric.Epoch,System.Int64,System.Threading.CancellationToken)
  commentId: M:System.Fabric.IStateProvider.UpdateEpochAsync(System.Fabric.Epoch,System.Int64,System.Threading.CancellationToken)
  parent: System.Fabric.IStateProvider
  isExternal: true
  name: UpdateEpochAsync(Epoch, Int64, CancellationToken)
  nameWithType: IStateProvider.UpdateEpochAsync(Epoch, Int64, CancellationToken)
  fullName: System.Fabric.IStateProvider.UpdateEpochAsync(System.Fabric.Epoch, System.Int64, System.Threading.CancellationToken)
  spec.csharp:
  - uid: System.Fabric.IStateProvider.UpdateEpochAsync(System.Fabric.Epoch,System.Int64,System.Threading.CancellationToken)
    name: UpdateEpochAsync
    nameWithType: IStateProvider.UpdateEpochAsync
    fullName: System.Fabric.IStateProvider.UpdateEpochAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Fabric.Epoch
    name: Epoch
    nameWithType: Epoch
    fullName: System.Fabric.Epoch
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Fabric.IStateProvider.UpdateEpochAsync(System.Fabric.Epoch,System.Int64,System.Threading.CancellationToken)
    name: UpdateEpochAsync
    nameWithType: IStateProvider.UpdateEpochAsync
    fullName: System.Fabric.IStateProvider.UpdateEpochAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Fabric.Epoch
    name: Epoch
    nameWithType: Epoch
    fullName: System.Fabric.Epoch
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric
  commentId: N:System.Fabric
  isExternal: false
  name: System.Fabric
  nameWithType: System.Fabric
  fullName: System.Fabric
- uid: System.IEquatable{System.Fabric.Epoch}
  commentId: T:System.IEquatable{System.Fabric.Epoch}
  parent: System
  definition: System.IEquatable`1
  name: IEquatable<Epoch>
  nameWithType: IEquatable<Epoch>
  fullName: System.IEquatable<System.Fabric.Epoch>
  nameWithType.vb: IEquatable(Of Epoch)
  fullname.vb: System.IEquatable(Of System.Fabric.Epoch)
  name.vb: IEquatable(Of Epoch)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Fabric.Epoch
    name: Epoch
    nameWithType: Epoch
    fullName: System.Fabric.Epoch
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Fabric.Epoch
    name: Epoch
    nameWithType: Epoch
    fullName: System.Fabric.Epoch
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IComparable{System.Fabric.Epoch}
  commentId: T:System.IComparable{System.Fabric.Epoch}
  parent: System
  definition: System.IComparable`1
  name: IComparable<Epoch>
  nameWithType: IComparable<Epoch>
  fullName: System.IComparable<System.Fabric.Epoch>
  nameWithType.vb: IComparable(Of Epoch)
  fullname.vb: System.IComparable(Of System.Fabric.Epoch)
  name.vb: IComparable(Of Epoch)
  spec.csharp:
  - uid: System.IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: System.IComparable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Fabric.Epoch
    name: Epoch
    nameWithType: Epoch
    fullName: System.Fabric.Epoch
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: System.IComparable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Fabric.Epoch
    name: Epoch
    nameWithType: Epoch
    fullName: System.Fabric.Epoch
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueType.ToString
  commentId: M:System.ValueType.ToString
  parent: System.ValueType
  isExternal: true
  name: ToString()
  nameWithType: ValueType.ToString()
  fullName: System.ValueType.ToString()
  spec.csharp:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.Epoch.System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
  commentId: M:System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  parent: System.Fabric.Messaging.Stream.ByteArraySerializer
  definition: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  name: Serialize<Epoch>()
  nameWithType: ByteArraySerializer.Serialize<Epoch>()
  fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<System.Fabric.Epoch>()
  nameWithType.vb: ByteArraySerializer.Serialize(Of Epoch)()
  fullname.vb: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of System.Fabric.Epoch)()
  name.vb: Serialize(Of Epoch)()
  spec.csharp:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
    name: Serialize<Epoch>
    nameWithType: ByteArraySerializer.Serialize<Epoch>
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<System.Fabric.Epoch>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
    name: Serialize(Of Epoch)
    nameWithType: ByteArraySerializer.Serialize(Of Epoch)
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of System.Fabric.Epoch)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.IStateProvider
  commentId: T:System.Fabric.IStateProvider
  parent: System.Fabric
  isExternal: false
  name: IStateProvider
  nameWithType: IStateProvider
  fullName: System.Fabric.IStateProvider
- uid: System.IEquatable`1
  commentId: T:System.IEquatable`1
  isExternal: true
  name: IEquatable<T>
  nameWithType: IEquatable<T>
  fullName: System.IEquatable<T>
  nameWithType.vb: IEquatable(Of T)
  fullname.vb: System.IEquatable(Of T)
  name.vb: IEquatable(Of T)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.IComparable`1
  commentId: T:System.IComparable`1
  isExternal: true
  name: IComparable<T>
  nameWithType: IComparable<T>
  fullName: System.IComparable<T>
  nameWithType.vb: IComparable(Of T)
  fullname.vb: System.IComparable(Of T)
  name.vb: IComparable(Of T)
  spec.csharp:
  - uid: System.IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: System.IComparable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: System.IComparable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueType
  commentId: T:System.ValueType
  parent: System
  isExternal: true
  name: ValueType
  nameWithType: ValueType
  fullName: System.ValueType
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  commentId: M:System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  isExternal: false
  name: Serialize<T>(T)
  nameWithType: ByteArraySerializer.Serialize<T>(T)
  fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<T>(T)
  nameWithType.vb: ByteArraySerializer.Serialize(Of T)(T)
  fullname.vb: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of T)(T)
  name.vb: Serialize(Of T)(T)
  spec.csharp:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
    name: Serialize<T>
    nameWithType: ByteArraySerializer.Serialize<T>
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
    name: Serialize(Of T)
    nameWithType: ByteArraySerializer.Serialize(Of T)
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.Messaging.Stream.ByteArraySerializer
  commentId: T:System.Fabric.Messaging.Stream.ByteArraySerializer
  parent: System.Fabric.Messaging.Stream
  isExternal: false
  name: ByteArraySerializer
  nameWithType: ByteArraySerializer
  fullName: System.Fabric.Messaging.Stream.ByteArraySerializer
- uid: System.Fabric.Messaging.Stream
  commentId: N:System.Fabric.Messaging.Stream
  isExternal: false
  name: System.Fabric.Messaging.Stream
  nameWithType: System.Fabric.Messaging.Stream
  fullName: System.Fabric.Messaging.Stream
- uid: System.Fabric.Epoch
  commentId: T:System.Fabric.Epoch
  parent: System.Fabric
  isExternal: false
  name: Epoch
  nameWithType: Epoch
  fullName: System.Fabric.Epoch
- uid: System.Int64
  commentId: T:System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.Fabric.Epoch.#ctor*
  commentId: Overload:System.Fabric.Epoch.#ctor
  isExternal: false
  name: Epoch
  nameWithType: Epoch.Epoch
  fullName: System.Fabric.Epoch.Epoch
- uid: System.Fabric.Epoch.DataLossNumber*
  commentId: Overload:System.Fabric.Epoch.DataLossNumber
  isExternal: false
  name: DataLossNumber
  nameWithType: Epoch.DataLossNumber
  fullName: System.Fabric.Epoch.DataLossNumber
- uid: System.Fabric.IReplicator.UpdateEpochAsync(System.Fabric.Epoch,System.Threading.CancellationToken)
  commentId: M:System.Fabric.IReplicator.UpdateEpochAsync(System.Fabric.Epoch,System.Threading.CancellationToken)
  parent: System.Fabric.IReplicator
  isExternal: true
  name: UpdateEpochAsync(Epoch, CancellationToken)
  nameWithType: IReplicator.UpdateEpochAsync(Epoch, CancellationToken)
  fullName: System.Fabric.IReplicator.UpdateEpochAsync(System.Fabric.Epoch, System.Threading.CancellationToken)
  spec.csharp:
  - uid: System.Fabric.IReplicator.UpdateEpochAsync(System.Fabric.Epoch,System.Threading.CancellationToken)
    name: UpdateEpochAsync
    nameWithType: IReplicator.UpdateEpochAsync
    fullName: System.Fabric.IReplicator.UpdateEpochAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Fabric.Epoch
    name: Epoch
    nameWithType: Epoch
    fullName: System.Fabric.Epoch
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Fabric.IReplicator.UpdateEpochAsync(System.Fabric.Epoch,System.Threading.CancellationToken)
    name: UpdateEpochAsync
    nameWithType: IReplicator.UpdateEpochAsync
    fullName: System.Fabric.IReplicator.UpdateEpochAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Fabric.Epoch
    name: Epoch
    nameWithType: Epoch
    fullName: System.Fabric.Epoch
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.Epoch.ConfigurationNumber*
  commentId: Overload:System.Fabric.Epoch.ConfigurationNumber
  isExternal: false
  name: ConfigurationNumber
  nameWithType: Epoch.ConfigurationNumber
  fullName: System.Fabric.Epoch.ConfigurationNumber
- uid: System.Fabric.IReplicator
  commentId: T:System.Fabric.IReplicator
  parent: System.Fabric
  isExternal: false
  name: IReplicator
  nameWithType: IReplicator
  fullName: System.Fabric.IReplicator
- uid: System.Fabric.Epoch.op_Equality*
  commentId: Overload:System.Fabric.Epoch.op_Equality
  isExternal: false
  name: Equality
  nameWithType: Epoch.Equality
  fullName: System.Fabric.Epoch.Equality
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Fabric.Epoch.op_Inequality*
  commentId: Overload:System.Fabric.Epoch.op_Inequality
  isExternal: false
  name: Inequality
  nameWithType: Epoch.Inequality
  fullName: System.Fabric.Epoch.Inequality
- uid: System.Fabric.Epoch.op_LessThan*
  commentId: Overload:System.Fabric.Epoch.op_LessThan
  isExternal: false
  name: LessThan
  nameWithType: Epoch.LessThan
  fullName: System.Fabric.Epoch.LessThan
- uid: System.Fabric.Epoch.op_LessThanOrEqual*
  commentId: Overload:System.Fabric.Epoch.op_LessThanOrEqual
  isExternal: false
  name: LessThanOrEqual
  nameWithType: Epoch.LessThanOrEqual
  fullName: System.Fabric.Epoch.LessThanOrEqual
- uid: System.Fabric.Epoch.op_GreaterThan*
  commentId: Overload:System.Fabric.Epoch.op_GreaterThan
  isExternal: false
  name: GreaterThan
  nameWithType: Epoch.GreaterThan
  fullName: System.Fabric.Epoch.GreaterThan
- uid: System.Fabric.Epoch.op_GreaterThanOrEqual*
  commentId: Overload:System.Fabric.Epoch.op_GreaterThanOrEqual
  isExternal: false
  name: GreaterThanOrEqual
  nameWithType: Epoch.GreaterThanOrEqual
  fullName: System.Fabric.Epoch.GreaterThanOrEqual
- uid: System.ValueType.Equals(System.Object)
  commentId: M:System.ValueType.Equals(System.Object)
  parent: System.ValueType
  isExternal: true
  name: Equals(Object)
  nameWithType: ValueType.Equals(Object)
  fullName: System.ValueType.Equals(System.Object)
  spec.csharp:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.Epoch.Equals*
  commentId: Overload:System.Fabric.Epoch.Equals
  isExternal: false
  name: Equals
  nameWithType: Epoch.Equals
  fullName: System.Fabric.Epoch.Equals
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.ValueType.GetHashCode
  commentId: M:System.ValueType.GetHashCode
  parent: System.ValueType
  isExternal: true
  name: GetHashCode()
  nameWithType: ValueType.GetHashCode()
  fullName: System.ValueType.GetHashCode()
  spec.csharp:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.Epoch.GetHashCode*
  commentId: Overload:System.Fabric.Epoch.GetHashCode
  isExternal: false
  name: GetHashCode
  nameWithType: Epoch.GetHashCode
  fullName: System.Fabric.Epoch.GetHashCode
- uid: System.IEquatable{System.Fabric.Epoch}.Equals(System.Fabric.Epoch)
  commentId: M:System.IEquatable{System.Fabric.Epoch}.Equals(System.Fabric.Epoch)
  parent: System.IEquatable{System.Fabric.Epoch}
  definition: System.IEquatable`1.Equals(`0)
  name: Equals(Epoch)
  nameWithType: IEquatable<Epoch>.Equals(Epoch)
  fullName: System.IEquatable<System.Fabric.Epoch>.Equals(System.Fabric.Epoch)
  nameWithType.vb: IEquatable(Of Epoch).Equals(Epoch)
  fullname.vb: System.IEquatable(Of System.Fabric.Epoch).Equals(System.Fabric.Epoch)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable<Epoch>.Equals
    fullName: System.IEquatable<System.Fabric.Epoch>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Fabric.Epoch
    name: Epoch
    nameWithType: Epoch
    fullName: System.Fabric.Epoch
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable(Of Epoch).Equals
    fullName: System.IEquatable(Of System.Fabric.Epoch).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Fabric.Epoch
    name: Epoch
    nameWithType: Epoch
    fullName: System.Fabric.Epoch
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IEquatable`1.Equals(`0)
  commentId: M:System.IEquatable`1.Equals(`0)
  isExternal: true
  name: Equals(T)
  nameWithType: IEquatable<T>.Equals(T)
  fullName: System.IEquatable<T>.Equals(T)
  nameWithType.vb: IEquatable(Of T).Equals(T)
  fullname.vb: System.IEquatable(Of T).Equals(T)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable<T>.Equals
    fullName: System.IEquatable<T>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable(Of T).Equals
    fullName: System.IEquatable(Of T).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.Epoch.CompareTo*
  commentId: Overload:System.Fabric.Epoch.CompareTo
  isExternal: false
  name: CompareTo
  nameWithType: Epoch.CompareTo
  fullName: System.Fabric.Epoch.CompareTo
- uid: System.IComparable{System.Fabric.Epoch}.CompareTo(System.Fabric.Epoch)
  commentId: M:System.IComparable{System.Fabric.Epoch}.CompareTo(System.Fabric.Epoch)
  parent: System.IComparable{System.Fabric.Epoch}
  definition: System.IComparable`1.CompareTo(`0)
  name: CompareTo(Epoch)
  nameWithType: IComparable<Epoch>.CompareTo(Epoch)
  fullName: System.IComparable<System.Fabric.Epoch>.CompareTo(System.Fabric.Epoch)
  nameWithType.vb: IComparable(Of Epoch).CompareTo(Epoch)
  fullname.vb: System.IComparable(Of System.Fabric.Epoch).CompareTo(System.Fabric.Epoch)
  spec.csharp:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    nameWithType: IComparable<Epoch>.CompareTo
    fullName: System.IComparable<System.Fabric.Epoch>.CompareTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Fabric.Epoch
    name: Epoch
    nameWithType: Epoch
    fullName: System.Fabric.Epoch
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    nameWithType: IComparable(Of Epoch).CompareTo
    fullName: System.IComparable(Of System.Fabric.Epoch).CompareTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Fabric.Epoch
    name: Epoch
    nameWithType: Epoch
    fullName: System.Fabric.Epoch
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IComparable`1.CompareTo(`0)
  commentId: M:System.IComparable`1.CompareTo(`0)
  isExternal: true
  name: CompareTo(T)
  nameWithType: IComparable<T>.CompareTo(T)
  fullName: System.IComparable<T>.CompareTo(T)
  nameWithType.vb: IComparable(Of T).CompareTo(T)
  fullname.vb: System.IComparable(Of T).CompareTo(T)
  spec.csharp:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    nameWithType: IComparable<T>.CompareTo
    fullName: System.IComparable<T>.CompareTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    nameWithType: IComparable(Of T).CompareTo
    fullName: System.IComparable(Of T).CompareTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
