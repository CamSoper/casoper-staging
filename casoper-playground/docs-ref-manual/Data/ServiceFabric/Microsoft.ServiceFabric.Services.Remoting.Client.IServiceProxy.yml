### YamlMime:ManagedReference
items:
- uid: Microsoft.ServiceFabric.Services.Remoting.Client.IServiceProxy
  commentId: T:Microsoft.ServiceFabric.Services.Remoting.Client.IServiceProxy
  id: IServiceProxy
  parent: Microsoft.ServiceFabric.Services.Remoting.Client
  children:
  - Microsoft.ServiceFabric.Services.Remoting.Client.IServiceProxy.ServiceInterfaceType
  - Microsoft.ServiceFabric.Services.Remoting.Client.IServiceProxy.ServicePartitionClient
  langs:
  - csharp
  - vb
  name: IServiceProxy
  nameWithType: IServiceProxy
  fullName: Microsoft.ServiceFabric.Services.Remoting.Client.IServiceProxy
  type: Interface
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Services/Remoting/Client/IServiceProxy.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: IServiceProxy
    path: src/prod/src/managed/Microsoft.ServiceFabric.Services/Remoting/Client/IServiceProxy.cs
    startLine: 13
  assemblies:
  - Microsoft.ServiceFabric.Services
  namespace: Microsoft.ServiceFabric.Services.Remoting.Client
  summary: "\nThis is the base Client side interface for Remoting. The framework provides the\nRemoting infrastructure for all the service contracts inheriting from IService through\nServiceRemotingListener and ServiceProxy.\n"
  example: []
  syntax:
    content: public interface IServiceProxy
    content.vb: Public Interface IServiceProxy
  extensionMethods:
  - Microsoft.ServiceFabric.Services.Remoting.Client.IServiceProxy.System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: Microsoft.ServiceFabric.Services.Remoting.Client.IServiceProxy.ServiceInterfaceType
  commentId: P:Microsoft.ServiceFabric.Services.Remoting.Client.IServiceProxy.ServiceInterfaceType
  id: ServiceInterfaceType
  parent: Microsoft.ServiceFabric.Services.Remoting.Client.IServiceProxy
  langs:
  - csharp
  - vb
  name: ServiceInterfaceType
  nameWithType: IServiceProxy.ServiceInterfaceType
  fullName: Microsoft.ServiceFabric.Services.Remoting.Client.IServiceProxy.ServiceInterfaceType
  type: Property
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Services/Remoting/Client/IServiceProxy.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: ServiceInterfaceType
    path: src/prod/src/managed/Microsoft.ServiceFabric.Services/Remoting/Client/IServiceProxy.cs
    startLine: 19
  assemblies:
  - Microsoft.ServiceFabric.Services
  namespace: Microsoft.ServiceFabric.Services.Remoting.Client
  summary: "\nThe interface type that is being remoted.\n"
  example: []
  syntax:
    content: Type ServiceInterfaceType { get; }
    content.vb: ReadOnly Property ServiceInterfaceType As Type
    parameters: []
    return:
      type: System.Type
      description: Service interface type
  overload: Microsoft.ServiceFabric.Services.Remoting.Client.IServiceProxy.ServiceInterfaceType*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Microsoft.ServiceFabric.Services.Remoting.Client.IServiceProxy.ServicePartitionClient
  commentId: P:Microsoft.ServiceFabric.Services.Remoting.Client.IServiceProxy.ServicePartitionClient
  id: ServicePartitionClient
  parent: Microsoft.ServiceFabric.Services.Remoting.Client.IServiceProxy
  langs:
  - csharp
  - vb
  name: ServicePartitionClient
  nameWithType: IServiceProxy.ServicePartitionClient
  fullName: Microsoft.ServiceFabric.Services.Remoting.Client.IServiceProxy.ServicePartitionClient
  type: Property
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Services/Remoting/Client/IServiceProxy.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: ServicePartitionClient
    path: src/prod/src/managed/Microsoft.ServiceFabric.Services/Remoting/Client/IServiceProxy.cs
    startLine: 25
  assemblies:
  - Microsoft.ServiceFabric.Services
  namespace: Microsoft.ServiceFabric.Services.Remoting.Client
  summary: "\nThe service partition client used to send requests to the service.\n"
  example: []
  syntax:
    content: IServiceRemotingPartitionClient ServicePartitionClient { get; }
    content.vb: ReadOnly Property ServicePartitionClient As IServiceRemotingPartitionClient
    parameters: []
    return:
      type: Microsoft.ServiceFabric.Services.Remoting.Client.IServiceRemotingPartitionClient
      description: ServicePartitionClient used by the ServiceProxy
  overload: Microsoft.ServiceFabric.Services.Remoting.Client.IServiceProxy.ServicePartitionClient*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
references:
- uid: Microsoft.ServiceFabric.Services.Remoting.Client
  commentId: N:Microsoft.ServiceFabric.Services.Remoting.Client
  isExternal: false
  name: Microsoft.ServiceFabric.Services.Remoting.Client
  nameWithType: Microsoft.ServiceFabric.Services.Remoting.Client
  fullName: Microsoft.ServiceFabric.Services.Remoting.Client
- uid: Microsoft.ServiceFabric.Services.Remoting.Client.IServiceProxy.System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
  commentId: M:System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  parent: System.Fabric.Messaging.Stream.ByteArraySerializer
  definition: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  name: Serialize<IServiceProxy>()
  nameWithType: ByteArraySerializer.Serialize<IServiceProxy>()
  fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<Microsoft.ServiceFabric.Services.Remoting.Client.IServiceProxy>()
  nameWithType.vb: ByteArraySerializer.Serialize(Of IServiceProxy)()
  fullname.vb: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of Microsoft.ServiceFabric.Services.Remoting.Client.IServiceProxy)()
  name.vb: Serialize(Of IServiceProxy)()
  spec.csharp:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
    name: Serialize<IServiceProxy>
    nameWithType: ByteArraySerializer.Serialize<IServiceProxy>
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<Microsoft.ServiceFabric.Services.Remoting.Client.IServiceProxy>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
    name: Serialize(Of IServiceProxy)
    nameWithType: ByteArraySerializer.Serialize(Of IServiceProxy)
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of Microsoft.ServiceFabric.Services.Remoting.Client.IServiceProxy)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  commentId: M:System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  isExternal: false
  name: Serialize<T>(T)
  nameWithType: ByteArraySerializer.Serialize<T>(T)
  fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<T>(T)
  nameWithType.vb: ByteArraySerializer.Serialize(Of T)(T)
  fullname.vb: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of T)(T)
  name.vb: Serialize(Of T)(T)
  spec.csharp:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
    name: Serialize<T>
    nameWithType: ByteArraySerializer.Serialize<T>
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
    name: Serialize(Of T)
    nameWithType: ByteArraySerializer.Serialize(Of T)
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.Messaging.Stream.ByteArraySerializer
  commentId: T:System.Fabric.Messaging.Stream.ByteArraySerializer
  parent: System.Fabric.Messaging.Stream
  isExternal: false
  name: ByteArraySerializer
  nameWithType: ByteArraySerializer
  fullName: System.Fabric.Messaging.Stream.ByteArraySerializer
- uid: System.Fabric.Messaging.Stream
  commentId: N:System.Fabric.Messaging.Stream
  isExternal: false
  name: System.Fabric.Messaging.Stream
  nameWithType: System.Fabric.Messaging.Stream
  fullName: System.Fabric.Messaging.Stream
- uid: Microsoft.ServiceFabric.Services.Remoting.Client.IServiceProxy.ServiceInterfaceType*
  commentId: Overload:Microsoft.ServiceFabric.Services.Remoting.Client.IServiceProxy.ServiceInterfaceType
  isExternal: false
  name: ServiceInterfaceType
  nameWithType: IServiceProxy.ServiceInterfaceType
  fullName: Microsoft.ServiceFabric.Services.Remoting.Client.IServiceProxy.ServiceInterfaceType
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.ServiceFabric.Services.Remoting.Client.IServiceProxy.ServicePartitionClient*
  commentId: Overload:Microsoft.ServiceFabric.Services.Remoting.Client.IServiceProxy.ServicePartitionClient
  isExternal: false
  name: ServicePartitionClient
  nameWithType: IServiceProxy.ServicePartitionClient
  fullName: Microsoft.ServiceFabric.Services.Remoting.Client.IServiceProxy.ServicePartitionClient
- uid: Microsoft.ServiceFabric.Services.Remoting.Client.IServiceRemotingPartitionClient
  commentId: T:Microsoft.ServiceFabric.Services.Remoting.Client.IServiceRemotingPartitionClient
  parent: Microsoft.ServiceFabric.Services.Remoting.Client
  isExternal: false
  name: IServiceRemotingPartitionClient
  nameWithType: IServiceRemotingPartitionClient
  fullName: Microsoft.ServiceFabric.Services.Remoting.Client.IServiceRemotingPartitionClient
