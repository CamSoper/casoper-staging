### YamlMime:ManagedReference
items:
- uid: System.Fabric.IStateReplicator
  commentId: T:System.Fabric.IStateReplicator
  id: IStateReplicator
  parent: System.Fabric
  children:
  - System.Fabric.IStateReplicator.GetCopyStream
  - System.Fabric.IStateReplicator.GetReplicationStream
  - System.Fabric.IStateReplicator.ReplicateAsync(System.Fabric.OperationData,System.Threading.CancellationToken,System.Int64@)
  - System.Fabric.IStateReplicator.UpdateReplicatorSettings(System.Fabric.ReplicatorSettings)
  langs:
  - csharp
  - vb
  name: IStateReplicator
  nameWithType: IStateReplicator
  fullName: System.Fabric.IStateReplicator
  type: Interface
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/IStateReplicator.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: IStateReplicator
    path: src/prod/src/managed/Api/src/System/Fabric/IStateReplicator.cs
    startLine: 14
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Exposes replication-related functions of the <xref href=\"System.Fabric.FabricReplicator\" data-throw-if-not-resolved=\"false\"></xref> class that are used by <xref href=\"System.Fabric.IStateProvider\" data-throw-if-not-resolved=\"false\"></xref> to replicate state to ensure high availability. </p>\n"
  example: []
  syntax:
    content: public interface IStateReplicator
    content.vb: Public Interface IStateReplicator
  extensionMethods:
  - System.Fabric.IStateReplicator.System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: System.Fabric.IStateReplicator.ReplicateAsync(System.Fabric.OperationData,System.Threading.CancellationToken,System.Int64@)
  commentId: M:System.Fabric.IStateReplicator.ReplicateAsync(System.Fabric.OperationData,System.Threading.CancellationToken,System.Int64@)
  id: ReplicateAsync(System.Fabric.OperationData,System.Threading.CancellationToken,System.Int64@)
  parent: System.Fabric.IStateReplicator
  langs:
  - csharp
  - vb
  name: ReplicateAsync(OperationData, CancellationToken, out Int64)
  nameWithType: IStateReplicator.ReplicateAsync(OperationData, CancellationToken, out Int64)
  fullName: System.Fabric.IStateReplicator.ReplicateAsync(System.Fabric.OperationData, System.Threading.CancellationToken, out System.Int64)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/IStateReplicator.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: ReplicateAsync
    path: src/prod/src/managed/Api/src/System/Fabric/IStateReplicator.cs
    startLine: 76
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Replicates state changes from Primary replica to the Secondary replicas and receives a quorum acknowledgement that those state changes have been applied.</p>\n"
  remarks: "\n<p>Replication at the Primary replica produces the objects that implement <xref href=\"System.Fabric.IOperation\" data-throw-if-not-resolved=\"false\"></xref> that the Secondary replica obtains from the Replication Stream via <xref href=\"System.Fabric.IStateReplicator.GetReplicationStream\" data-throw-if-not-resolved=\"false\"></xref>, which is followed by <xref href=\"System.Fabric.IOperationStream.GetOperationAsync(System.Threading.CancellationToken)\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n<p>The Primary replica has many duties that are related to process state updates. The following steps show the general sequence of events that a Primary replica must handle to replicate and acknowledge a change. </p>\n<p>Part 1: Handling incoming requests: Receive request: Write(x) – Service receives a write request, x. CheckArguments – The service checks the arguments of the request. This check helps ensure the consistency of the service’s state.</p>\n<p>Check current state – The service examines its current state to ensure that the operation is valid and can or should be performed. This check also helps ensure data consistency. It is performed by the service code.</p>\n<p>Acquire Locks – The service should acquire the necessary locks to prevent additional operations from occurring at the same time. This operation helps ensure isolation and consistency.</p>\n<p>Attempt Operation (optional) – The service can attempt the operation locally. This step reserves and allocates space and performs all the necessary computations. This step includes everything but the actual commit of the result. This operation improves the durability of the operation and makes later failures very unlikely.</p>\n<p>Manufacture the OperationData – An <xref href=\"System.Fabric.OperationData\" data-throw-if-not-resolved=\"false\"></xref> object is the representation of the Write(x) that was presented to the service. The <xref href=\"System.Fabric.OperationData\" data-throw-if-not-resolved=\"false\"></xref> object contains the state change to be transferred with acknowledgement from the Primary replica to the Secondary replicas. The data that the service places in the OperationData defines the atomic update that the <xref href=\"System.Fabric.FabricReplicator\" data-throw-if-not-resolved=\"false\"></xref> transfers to the Secondary replicas. Note that creating of the <xref href=\"System.Fabric.OperationData\" data-throw-if-not-resolved=\"false\"></xref> object requires one or more byte arrays. The service must itself determine and serialize the change in state, and then provide this set of bytes to the FabricReplicator via <xref href=\"System.Fabric.IStateReplicator.ReplicateAsync(System.Fabric.OperationData%2cSystem.Threading.CancellationToken%2cSystem.Int64%40)\" data-throw-if-not-resolved=\"false\"></xref>. The service sends the operation to the FabricReplicator and receives a logical sequence number (LSN) in return. The LSN is the identity for the operation and helps both the service and Service Fabric ensure that operations are always applied in the same order everywhere.The service should record the OperationData along with its LSN in an ordered list of in-flight operations. This ensures that when the operations are completed, they can be consistently applied in the correct order.</p>\n<p>Release Locks - Continue processing or waiting for further requests.</p>\n<p>Part 2: Completing requests and responding: The Primary replica receives a callback that indicates that the operation has been applied. ReplicateAsync is completed. This callback indicates that the operation has been acknowledged by a quorum of the replicas in the replica set. When the Primary replica receives this callback, it should perform the following actions: </p>\n<p>Find the corresponding operation that is indicated by the long LSN that is returned from ReplicateAsync in the service’s in-flight list and mark it as \"QuorumAck’d\". </p>\n<p>Now, starting at the first operation in the in-flight list, go through the list and locally commit all of the QuorumAck’d operations, finish any changes to the local state and mark the state changes with their corresponding LSN, until the first incomplete operation is encountered. This ensures that ordering is preserved (consistency) and that the operations are actually applied. This takes advantage of the previous durability and isolation preparations. Note: Most services should cache the last committed LSN value so that responses to the <xref href=\"System.Fabric.IStateProvider.GetLastCommittedSequenceNumber\" data-throw-if-not-resolved=\"false\"></xref> do not require querying the actual store for the greatest LSN. </p>\n<p>When an operation is successfully committed at the Primary replica, the Primary replica can now reply to the client that initiated the call and remove the operation from the in-flight list. Continue to wait for the next quorum-acknowledgment callback.</p>\n"
  example: []
  syntax:
    content: Task<long> ReplicateAsync(OperationData operationData, CancellationToken cancellationToken, out long sequenceNumber)
    content.vb: Function ReplicateAsync(operationData As OperationData, cancellationToken As CancellationToken, ByRef sequenceNumber As Long) As Task(Of Long)
    parameters:
    - id: operationData
      type: System.Fabric.OperationData
      description: "\n<p>The <xref href=\"System.Fabric.OperationData\" data-throw-if-not-resolved=\"false\"></xref> that represents the state change that the Primary replica wants to replicate.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p> A write quorum of replicas that have been lost. It can be used to send a notification that the operation should be canceled. Note that cancellation is advisory and that the operation might still be completed even if it is canceled.</p>\n"
    - id: sequenceNumber
      type: System.Int64
      description: "\n<p>Long, the LSN of the operation. Note that this is the same value which is returned by the task. Providing it as an out parameter is useful for services which want to prepare the local write to commit when the task finishes.</p>\n"
    return:
      type: System.Threading.Tasks.Task{System.Int64}
      description: "\n<p>Returns <xref href=\"System.Threading.Tasks.Task%601\" data-throw-if-not-resolved=\"false\"></xref> of type long, the LSN of the operation.</p>\n"
  overload: System.Fabric.IStateReplicator.ReplicateAsync*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>Caused by one of the following:</p>\n<p>E_INVALIDARG is returned when one or more arguments are not valid.</p>\n"
  - type: System.Fabric.FabricTransientException
    commentId: T:System.Fabric.FabricTransientException
    description: "\n<p>\n<xref href=\"System.Fabric.FabricTransientException\" data-throw-if-not-resolved=\"false\"></xref> is a retriable exception. It is caused by one of the following;</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.NoWriteQuorum\" data-throw-if-not-resolved=\"false\"></xref> is returned when the replicator does not currently have write quorum..</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.ReconfigurationPending\" data-throw-if-not-resolved=\"false\"></xref> is returned when the replicator has a pending reconfiguration.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.ReplicationQueueFull\" data-throw-if-not-resolved=\"false\"></xref> is returned when the replicator queue is full.</p>\n"
  - type: System.Fabric.FabricNotPrimaryException
    commentId: T:System.Fabric.FabricNotPrimaryException
    description: "\n<p>\n<xref href=\"System.Fabric.FabricNotPrimaryException\" data-throw-if-not-resolved=\"false\"></xref> is caused by one of the following;</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.NotPrimary\" data-throw-if-not-resolved=\"false\"></xref> is returned when the replicator has a pending reconfiguration.</p>\n"
  - type: System.Fabric.FabricObjectClosedException
    commentId: T:System.Fabric.FabricObjectClosedException
    description: "\n<p>\n<xref href=\"System.Fabric.FabricObjectClosedException\" data-throw-if-not-resolved=\"false\"></xref> is caused by one of the following;</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.ObjectClosed\" data-throw-if-not-resolved=\"false\"></xref> is returned when the replicator has been closed.</p>\n"
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>\n<xref href=\"System.OperationCanceledException\" data-throw-if-not-resolved=\"false\"></xref> is caused by one of the following;</p>\n<p>E_ABORT when replicator cancels an inflight replication operation.</p>\n"
  nameWithType.vb: IStateReplicator.ReplicateAsync(OperationData, CancellationToken, ByRef Int64)
  fullName.vb: System.Fabric.IStateReplicator.ReplicateAsync(System.Fabric.OperationData, System.Threading.CancellationToken, ByRef System.Int64)
  name.vb: ReplicateAsync(OperationData, CancellationToken, ByRef Int64)
- uid: System.Fabric.IStateReplicator.GetCopyStream
  commentId: M:System.Fabric.IStateReplicator.GetCopyStream
  id: GetCopyStream
  parent: System.Fabric.IStateReplicator
  langs:
  - csharp
  - vb
  name: GetCopyStream()
  nameWithType: IStateReplicator.GetCopyStream()
  fullName: System.Fabric.IStateReplicator.GetCopyStream()
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/IStateReplicator.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: GetCopyStream
    path: src/prod/src/managed/Api/src/System/Fabric/IStateReplicator.cs
    startLine: 100
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Gets copy stream.</p>\n"
  remarks: "\n<p>The returned CopyStream is an <xref href=\"System.Fabric.IOperationStream\" data-throw-if-not-resolved=\"false\"></xref> that contains <xref href=\"System.Fabric.OperationData\" data-throw-if-not-resolved=\"false\"></xref> objects that implement <xref href=\"System.Fabric.IOperation\" data-throw-if-not-resolved=\"false\"></xref>. The <xref href=\"System.Fabric.OperationData\" data-throw-if-not-resolved=\"false\"></xref> objects are obtained from the CopyState <xref href=\"System.Fabric.IOperationDataStream\" data-throw-if-not-resolved=\"false\"></xref> that the Primary replica returns from <xref href=\"System.Fabric.IStateProvider.GetCopyState(System.Int64%2cSystem.Fabric.IOperationDataStream)\" data-throw-if-not-resolved=\"false\"></xref>. When a replica is created and has to catch up, it should obtain the CopyStream and begin to send, apply, and acknowledge the Copy objects that implement <xref href=\"System.Fabric.IOperation\" data-throw-if-not-resolved=\"false\"></xref>. In parallel, the replica responds to the corresponding <xref href=\"System.Fabric.IStateProvider.GetCopyContext\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Fabric.IOperationDataStream.GetNextAsync(System.Threading.CancellationToken)\" data-throw-if-not-resolved=\"false\"></xref> calls. The stream is empty when the returned <xref href=\"System.Fabric.IOperation\" data-throw-if-not-resolved=\"false\"></xref> method is null.</p>\n"
  example: []
  syntax:
    content: IOperationStream GetCopyStream()
    content.vb: Function GetCopyStream As IOperationStream
    return:
      type: System.Fabric.IOperationStream
      description: "\n<p>Returns the copy <xref href=\"System.Fabric.IOperationStream\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  overload: System.Fabric.IStateReplicator.GetCopyStream*
  exceptions:
  - type: System.Fabric.FabricTransientException
    commentId: T:System.Fabric.FabricTransientException
    description: "\n<p>\n<xref href=\"System.Fabric.FabricTransientException\" data-throw-if-not-resolved=\"false\"></xref> is a retriable exception. It is caused by one of the following;</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.ReconfigurationPending\" data-throw-if-not-resolved=\"false\"></xref> is returned when the replicator has a pending reconfiguration.</p>\n"
  - type: System.Fabric.FabricObjectClosedException
    commentId: T:System.Fabric.FabricObjectClosedException
    description: "\n<p>\n<xref href=\"System.Fabric.FabricObjectClosedException\" data-throw-if-not-resolved=\"false\"></xref> is caused by one of the following;</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.ObjectClosed\" data-throw-if-not-resolved=\"false\"></xref> is returned when the replicator has been closed.</p>\n"
- uid: System.Fabric.IStateReplicator.GetReplicationStream
  commentId: M:System.Fabric.IStateReplicator.GetReplicationStream
  id: GetReplicationStream
  parent: System.Fabric.IStateReplicator
  langs:
  - csharp
  - vb
  name: GetReplicationStream()
  nameWithType: IStateReplicator.GetReplicationStream()
  fullName: System.Fabric.IStateReplicator.GetReplicationStream()
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/IStateReplicator.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: GetReplicationStream
    path: src/prod/src/managed/Api/src/System/Fabric/IStateReplicator.cs
    startLine: 123
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Gets replication stream.</p>\n"
  remarks: "\n<p>The ReplicationStream implements <xref href=\"System.Fabric.IOperationStream\" data-throw-if-not-resolved=\"false\"></xref>. The ReplicationStream contains <xref href=\"System.Fabric.OperationData\" data-throw-if-not-resolved=\"false\"></xref> objects that implement <xref href=\"System.Fabric.IOperation\" data-throw-if-not-resolved=\"false\"></xref>. The objects are provided by the Primary replica via <xref href=\"System.Fabric.IStateReplicator.ReplicateAsync(System.Fabric.OperationData%2cSystem.Threading.CancellationToken%2cSystem.Int64%40)\" data-throw-if-not-resolved=\"false\"></xref>. Generally a Secondary replica should send <xref href=\"System.Fabric.IOperationStream.GetOperationAsync(System.Threading.CancellationToken)\" data-throw-if-not-resolved=\"false\"></xref>. Although Service Fabric does not require services to do so, generally services should transfer all <xref href=\"System.Fabric.OperationData\" data-throw-if-not-resolved=\"false\"></xref> objects out of the copy stream first, and then transfer operations out of the replication stream. The transfer from both copies in parallel is supported but increases the complexity of applying state updates correctly and is recommended only for advanced services. The stream is empty when the returned <xref href=\"System.Fabric.IOperation\" data-throw-if-not-resolved=\"false\"></xref> method is null.</p>\n"
  example: []
  syntax:
    content: IOperationStream GetReplicationStream()
    content.vb: Function GetReplicationStream As IOperationStream
    return:
      type: System.Fabric.IOperationStream
      description: "\n<p>Returns the replication <xref href=\"System.Fabric.IOperationStream\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  overload: System.Fabric.IStateReplicator.GetReplicationStream*
  exceptions:
  - type: System.Fabric.FabricTransientException
    commentId: T:System.Fabric.FabricTransientException
    description: "\n<p>\n<xref href=\"System.Fabric.FabricTransientException\" data-throw-if-not-resolved=\"false\"></xref> is a retriable exception. It is caused by one of the following;</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.ReconfigurationPending\" data-throw-if-not-resolved=\"false\"></xref> is returned when the replicator has a pending reconfiguration.</p>\n"
  - type: System.Fabric.FabricObjectClosedException
    commentId: T:System.Fabric.FabricObjectClosedException
    description: "\n<p>\n<xref href=\"System.Fabric.FabricObjectClosedException\" data-throw-if-not-resolved=\"false\"></xref> is caused by one of the following;</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.ObjectClosed\" data-throw-if-not-resolved=\"false\"></xref> is returned when the replicator has been closed.</p>\n"
- uid: System.Fabric.IStateReplicator.UpdateReplicatorSettings(System.Fabric.ReplicatorSettings)
  commentId: M:System.Fabric.IStateReplicator.UpdateReplicatorSettings(System.Fabric.ReplicatorSettings)
  id: UpdateReplicatorSettings(System.Fabric.ReplicatorSettings)
  parent: System.Fabric.IStateReplicator
  langs:
  - csharp
  - vb
  name: UpdateReplicatorSettings(ReplicatorSettings)
  nameWithType: IStateReplicator.UpdateReplicatorSettings(ReplicatorSettings)
  fullName: System.Fabric.IStateReplicator.UpdateReplicatorSettings(System.Fabric.ReplicatorSettings)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/IStateReplicator.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: UpdateReplicatorSettings
    path: src/prod/src/managed/Api/src/System/Fabric/IStateReplicator.cs
    startLine: 135
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Enables modification of replicator settings during runtime. The only setting which can be modified is the security credentials. </p>\n"
  example: []
  syntax:
    content: void UpdateReplicatorSettings(ReplicatorSettings settings)
    content.vb: Sub UpdateReplicatorSettings(settings As ReplicatorSettings)
    parameters:
    - id: settings
      type: System.Fabric.ReplicatorSettings
      description: "\n<p>The new <xref href=\"System.Fabric.ReplicatorSettings\" data-throw-if-not-resolved=\"false\"></xref> with the updated credentials.</p>\n"
  overload: System.Fabric.IStateReplicator.UpdateReplicatorSettings*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>Caused by one of the following:</p>\n<p>E_INVALIDARG is returned when one or more arguments are not valid.</p>\n"
references:
- uid: System.Fabric.FabricReplicator
  commentId: T:System.Fabric.FabricReplicator
  parent: System.Fabric
  isExternal: false
  name: FabricReplicator
  nameWithType: FabricReplicator
  fullName: System.Fabric.FabricReplicator
- uid: System.Fabric.IStateProvider
  commentId: T:System.Fabric.IStateProvider
  parent: System.Fabric
  isExternal: false
  name: IStateProvider
  nameWithType: IStateProvider
  fullName: System.Fabric.IStateProvider
- uid: System.Fabric
  commentId: N:System.Fabric
  isExternal: false
  name: System.Fabric
  nameWithType: System.Fabric
  fullName: System.Fabric
- uid: System.Fabric.IStateReplicator.System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
  commentId: M:System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  parent: System.Fabric.Messaging.Stream.ByteArraySerializer
  definition: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  name: Serialize<IStateReplicator>()
  nameWithType: ByteArraySerializer.Serialize<IStateReplicator>()
  fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<System.Fabric.IStateReplicator>()
  nameWithType.vb: ByteArraySerializer.Serialize(Of IStateReplicator)()
  fullname.vb: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of System.Fabric.IStateReplicator)()
  name.vb: Serialize(Of IStateReplicator)()
  spec.csharp:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
    name: Serialize<IStateReplicator>
    nameWithType: ByteArraySerializer.Serialize<IStateReplicator>
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<System.Fabric.IStateReplicator>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
    name: Serialize(Of IStateReplicator)
    nameWithType: ByteArraySerializer.Serialize(Of IStateReplicator)
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of System.Fabric.IStateReplicator)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  commentId: M:System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  isExternal: false
  name: Serialize<T>(T)
  nameWithType: ByteArraySerializer.Serialize<T>(T)
  fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<T>(T)
  nameWithType.vb: ByteArraySerializer.Serialize(Of T)(T)
  fullname.vb: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of T)(T)
  name.vb: Serialize(Of T)(T)
  spec.csharp:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
    name: Serialize<T>
    nameWithType: ByteArraySerializer.Serialize<T>
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
    name: Serialize(Of T)
    nameWithType: ByteArraySerializer.Serialize(Of T)
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.Messaging.Stream.ByteArraySerializer
  commentId: T:System.Fabric.Messaging.Stream.ByteArraySerializer
  parent: System.Fabric.Messaging.Stream
  isExternal: false
  name: ByteArraySerializer
  nameWithType: ByteArraySerializer
  fullName: System.Fabric.Messaging.Stream.ByteArraySerializer
- uid: System.Fabric.Messaging.Stream
  commentId: N:System.Fabric.Messaging.Stream
  isExternal: false
  name: System.Fabric.Messaging.Stream
  nameWithType: System.Fabric.Messaging.Stream
  fullName: System.Fabric.Messaging.Stream
- uid: System.Fabric.OperationData
  commentId: T:System.Fabric.OperationData
  parent: System.Fabric
  isExternal: false
  name: OperationData
  nameWithType: OperationData
  fullName: System.Fabric.OperationData
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullname.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.FabricTransientException
  commentId: T:System.Fabric.FabricTransientException
  parent: System.Fabric
  isExternal: false
  name: FabricTransientException
  nameWithType: FabricTransientException
  fullName: System.Fabric.FabricTransientException
- uid: System.Fabric.FabricErrorCode.NoWriteQuorum
  commentId: F:System.Fabric.FabricErrorCode.NoWriteQuorum
- uid: System.Fabric.FabricErrorCode.ReconfigurationPending
  commentId: F:System.Fabric.FabricErrorCode.ReconfigurationPending
- uid: System.Fabric.FabricErrorCode.ReplicationQueueFull
  commentId: F:System.Fabric.FabricErrorCode.ReplicationQueueFull
- uid: System.Fabric.FabricNotPrimaryException
  commentId: T:System.Fabric.FabricNotPrimaryException
  isExternal: false
  name: FabricNotPrimaryException
  nameWithType: FabricNotPrimaryException
  fullName: System.Fabric.FabricNotPrimaryException
- uid: System.Fabric.FabricErrorCode.NotPrimary
  commentId: F:System.Fabric.FabricErrorCode.NotPrimary
- uid: System.Fabric.FabricObjectClosedException
  commentId: T:System.Fabric.FabricObjectClosedException
  isExternal: false
  name: FabricObjectClosedException
  nameWithType: FabricObjectClosedException
  fullName: System.Fabric.FabricObjectClosedException
- uid: System.Fabric.FabricErrorCode.ObjectClosed
  commentId: F:System.Fabric.FabricErrorCode.ObjectClosed
- uid: System.OperationCanceledException
  commentId: T:System.OperationCanceledException
- uid: System.Fabric.IOperation
  commentId: T:System.Fabric.IOperation
  isExternal: false
  name: IOperation
  nameWithType: IOperation
  fullName: System.Fabric.IOperation
- uid: System.Fabric.IStateReplicator.GetReplicationStream
  commentId: M:System.Fabric.IStateReplicator.GetReplicationStream
  parent: System.Fabric.IStateReplicator
  isExternal: false
  name: GetReplicationStream()
  nameWithType: IStateReplicator.GetReplicationStream()
  fullName: System.Fabric.IStateReplicator.GetReplicationStream()
  spec.csharp:
  - uid: System.Fabric.IStateReplicator.GetReplicationStream
    name: GetReplicationStream
    nameWithType: IStateReplicator.GetReplicationStream
    fullName: System.Fabric.IStateReplicator.GetReplicationStream
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Fabric.IStateReplicator.GetReplicationStream
    name: GetReplicationStream
    nameWithType: IStateReplicator.GetReplicationStream
    fullName: System.Fabric.IStateReplicator.GetReplicationStream
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.IOperationStream.GetOperationAsync(System.Threading.CancellationToken)
  commentId: M:System.Fabric.IOperationStream.GetOperationAsync(System.Threading.CancellationToken)
  parent: System.Fabric.IOperationStream
  isExternal: true
  name: GetOperationAsync(CancellationToken)
  nameWithType: IOperationStream.GetOperationAsync(CancellationToken)
  fullName: System.Fabric.IOperationStream.GetOperationAsync(System.Threading.CancellationToken)
  spec.csharp:
  - uid: System.Fabric.IOperationStream.GetOperationAsync(System.Threading.CancellationToken)
    name: GetOperationAsync
    nameWithType: IOperationStream.GetOperationAsync
    fullName: System.Fabric.IOperationStream.GetOperationAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Fabric.IOperationStream.GetOperationAsync(System.Threading.CancellationToken)
    name: GetOperationAsync
    nameWithType: IOperationStream.GetOperationAsync
    fullName: System.Fabric.IOperationStream.GetOperationAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.IStateReplicator.ReplicateAsync(System.Fabric.OperationData,System.Threading.CancellationToken,System.Int64@)
  commentId: M:System.Fabric.IStateReplicator.ReplicateAsync(System.Fabric.OperationData,System.Threading.CancellationToken,System.Int64@)
  parent: System.Fabric.IStateReplicator
  isExternal: true
  name: ReplicateAsync(OperationData, CancellationToken, Int64)
  nameWithType: IStateReplicator.ReplicateAsync(OperationData, CancellationToken, Int64)
  fullName: System.Fabric.IStateReplicator.ReplicateAsync(System.Fabric.OperationData, System.Threading.CancellationToken, System.Int64)
  spec.csharp:
  - uid: System.Fabric.IStateReplicator.ReplicateAsync(System.Fabric.OperationData,System.Threading.CancellationToken,System.Int64@)
    name: ReplicateAsync
    nameWithType: IStateReplicator.ReplicateAsync
    fullName: System.Fabric.IStateReplicator.ReplicateAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Fabric.OperationData
    name: OperationData
    nameWithType: OperationData
    fullName: System.Fabric.OperationData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Fabric.IStateReplicator.ReplicateAsync(System.Fabric.OperationData,System.Threading.CancellationToken,System.Int64@)
    name: ReplicateAsync
    nameWithType: IStateReplicator.ReplicateAsync
    fullName: System.Fabric.IStateReplicator.ReplicateAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Fabric.OperationData
    name: OperationData
    nameWithType: OperationData
    fullName: System.Fabric.OperationData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.IStateProvider.GetLastCommittedSequenceNumber
  commentId: M:System.Fabric.IStateProvider.GetLastCommittedSequenceNumber
  parent: System.Fabric.IStateProvider
  isExternal: false
  name: GetLastCommittedSequenceNumber()
  nameWithType: IStateProvider.GetLastCommittedSequenceNumber()
  fullName: System.Fabric.IStateProvider.GetLastCommittedSequenceNumber()
  spec.csharp:
  - uid: System.Fabric.IStateProvider.GetLastCommittedSequenceNumber
    name: GetLastCommittedSequenceNumber
    nameWithType: IStateProvider.GetLastCommittedSequenceNumber
    fullName: System.Fabric.IStateProvider.GetLastCommittedSequenceNumber
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Fabric.IStateProvider.GetLastCommittedSequenceNumber
    name: GetLastCommittedSequenceNumber
    nameWithType: IStateProvider.GetLastCommittedSequenceNumber
    fullName: System.Fabric.IStateProvider.GetLastCommittedSequenceNumber
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.IStateReplicator.ReplicateAsync*
  commentId: Overload:System.Fabric.IStateReplicator.ReplicateAsync
  isExternal: false
  name: ReplicateAsync
  nameWithType: IStateReplicator.ReplicateAsync
  fullName: System.Fabric.IStateReplicator.ReplicateAsync
- uid: System.ArgumentException
  commentId: T:System.ArgumentException
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Int64
  commentId: T:System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.Threading.Tasks.Task{System.Int64}
  commentId: T:System.Threading.Tasks.Task{System.Int64}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Int64>
  nameWithType: Task<Int64>
  fullName: System.Threading.Tasks.Task<System.Int64>
  nameWithType.vb: Task(Of Int64)
  fullname.vb: System.Threading.Tasks.Task(Of System.Int64)
  name.vb: Task(Of Int64)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.IStateReplicator
  commentId: T:System.Fabric.IStateReplicator
  parent: System.Fabric
  isExternal: false
  name: IStateReplicator
  nameWithType: IStateReplicator
  fullName: System.Fabric.IStateReplicator
- uid: System.Fabric.IOperationStream
  commentId: T:System.Fabric.IOperationStream
  parent: System.Fabric
  isExternal: false
  name: IOperationStream
  nameWithType: IOperationStream
  fullName: System.Fabric.IOperationStream
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: false
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: System.Fabric.IOperationDataStream
  commentId: T:System.Fabric.IOperationDataStream
  parent: System.Fabric
  isExternal: false
  name: IOperationDataStream
  nameWithType: IOperationDataStream
  fullName: System.Fabric.IOperationDataStream
- uid: System.Fabric.IStateProvider.GetCopyState(System.Int64,System.Fabric.IOperationDataStream)
  commentId: M:System.Fabric.IStateProvider.GetCopyState(System.Int64,System.Fabric.IOperationDataStream)
  parent: System.Fabric.IStateProvider
  isExternal: true
  name: GetCopyState(Int64, IOperationDataStream)
  nameWithType: IStateProvider.GetCopyState(Int64, IOperationDataStream)
  fullName: System.Fabric.IStateProvider.GetCopyState(System.Int64, System.Fabric.IOperationDataStream)
  spec.csharp:
  - uid: System.Fabric.IStateProvider.GetCopyState(System.Int64,System.Fabric.IOperationDataStream)
    name: GetCopyState
    nameWithType: IStateProvider.GetCopyState
    fullName: System.Fabric.IStateProvider.GetCopyState
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Fabric.IOperationDataStream
    name: IOperationDataStream
    nameWithType: IOperationDataStream
    fullName: System.Fabric.IOperationDataStream
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Fabric.IStateProvider.GetCopyState(System.Int64,System.Fabric.IOperationDataStream)
    name: GetCopyState
    nameWithType: IStateProvider.GetCopyState
    fullName: System.Fabric.IStateProvider.GetCopyState
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Fabric.IOperationDataStream
    name: IOperationDataStream
    nameWithType: IOperationDataStream
    fullName: System.Fabric.IOperationDataStream
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.IStateProvider.GetCopyContext
  commentId: M:System.Fabric.IStateProvider.GetCopyContext
  parent: System.Fabric.IStateProvider
  isExternal: false
  name: GetCopyContext()
  nameWithType: IStateProvider.GetCopyContext()
  fullName: System.Fabric.IStateProvider.GetCopyContext()
  spec.csharp:
  - uid: System.Fabric.IStateProvider.GetCopyContext
    name: GetCopyContext
    nameWithType: IStateProvider.GetCopyContext
    fullName: System.Fabric.IStateProvider.GetCopyContext
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Fabric.IStateProvider.GetCopyContext
    name: GetCopyContext
    nameWithType: IStateProvider.GetCopyContext
    fullName: System.Fabric.IStateProvider.GetCopyContext
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.IOperationDataStream.GetNextAsync(System.Threading.CancellationToken)
  commentId: M:System.Fabric.IOperationDataStream.GetNextAsync(System.Threading.CancellationToken)
- uid: System.Fabric.IStateReplicator.GetCopyStream*
  commentId: Overload:System.Fabric.IStateReplicator.GetCopyStream
  isExternal: false
  name: GetCopyStream
  nameWithType: IStateReplicator.GetCopyStream
  fullName: System.Fabric.IStateReplicator.GetCopyStream
- uid: System.Fabric.IStateReplicator.GetReplicationStream*
  commentId: Overload:System.Fabric.IStateReplicator.GetReplicationStream
  isExternal: false
  name: GetReplicationStream
  nameWithType: IStateReplicator.GetReplicationStream
  fullName: System.Fabric.IStateReplicator.GetReplicationStream
- uid: System.Fabric.ReplicatorSettings
  commentId: T:System.Fabric.ReplicatorSettings
  parent: System.Fabric
  isExternal: false
  name: ReplicatorSettings
  nameWithType: ReplicatorSettings
  fullName: System.Fabric.ReplicatorSettings
- uid: System.Fabric.IStateReplicator.UpdateReplicatorSettings*
  commentId: Overload:System.Fabric.IStateReplicator.UpdateReplicatorSettings
  isExternal: false
  name: UpdateReplicatorSettings
  nameWithType: IStateReplicator.UpdateReplicatorSettings
  fullName: System.Fabric.IStateReplicator.UpdateReplicatorSettings
