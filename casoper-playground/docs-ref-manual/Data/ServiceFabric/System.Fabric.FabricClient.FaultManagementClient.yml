### YamlMime:ManagedReference
items:
- uid: System.Fabric.FabricClient.FaultManagementClient
  commentId: T:System.Fabric.FabricClient.FaultManagementClient
  id: FabricClient.FaultManagementClient
  parent: System.Fabric
  children:
  - System.Fabric.FabricClient.FaultManagementClient.MovePrimaryAsync(System.Fabric.PartitionSelector)
  - System.Fabric.FabricClient.FaultManagementClient.MovePrimaryAsync(System.Fabric.PartitionSelector,System.Boolean)
  - System.Fabric.FabricClient.FaultManagementClient.MovePrimaryAsync(System.Fabric.PartitionSelector,System.Boolean,System.Threading.CancellationToken)
  - System.Fabric.FabricClient.FaultManagementClient.MovePrimaryAsync(System.Fabric.PartitionSelector,System.Boolean,System.TimeSpan,System.Threading.CancellationToken)
  - System.Fabric.FabricClient.FaultManagementClient.MovePrimaryAsync(System.Fabric.PartitionSelector,System.Threading.CancellationToken)
  - System.Fabric.FabricClient.FaultManagementClient.MovePrimaryAsync(System.Fabric.PartitionSelector,System.TimeSpan,System.Threading.CancellationToken)
  - System.Fabric.FabricClient.FaultManagementClient.MovePrimaryAsync(System.String,System.Fabric.PartitionSelector)
  - System.Fabric.FabricClient.FaultManagementClient.MovePrimaryAsync(System.String,System.Fabric.PartitionSelector,System.Boolean)
  - System.Fabric.FabricClient.FaultManagementClient.MovePrimaryAsync(System.String,System.Fabric.PartitionSelector,System.Boolean,System.Threading.CancellationToken)
  - System.Fabric.FabricClient.FaultManagementClient.MovePrimaryAsync(System.String,System.Fabric.PartitionSelector,System.Boolean,System.TimeSpan,System.Threading.CancellationToken)
  - System.Fabric.FabricClient.FaultManagementClient.MovePrimaryAsync(System.String,System.Fabric.PartitionSelector,System.Threading.CancellationToken)
  - System.Fabric.FabricClient.FaultManagementClient.MovePrimaryAsync(System.String,System.Fabric.PartitionSelector,System.TimeSpan,System.Threading.CancellationToken)
  - System.Fabric.FabricClient.FaultManagementClient.MoveSecondaryAsync(System.Fabric.PartitionSelector)
  - System.Fabric.FabricClient.FaultManagementClient.MoveSecondaryAsync(System.Fabric.PartitionSelector,System.Boolean)
  - System.Fabric.FabricClient.FaultManagementClient.MoveSecondaryAsync(System.Fabric.PartitionSelector,System.Boolean,System.Threading.CancellationToken)
  - System.Fabric.FabricClient.FaultManagementClient.MoveSecondaryAsync(System.Fabric.PartitionSelector,System.Boolean,System.TimeSpan,System.Threading.CancellationToken)
  - System.Fabric.FabricClient.FaultManagementClient.MoveSecondaryAsync(System.Fabric.PartitionSelector,System.Threading.CancellationToken)
  - System.Fabric.FabricClient.FaultManagementClient.MoveSecondaryAsync(System.Fabric.PartitionSelector,System.TimeSpan,System.Threading.CancellationToken)
  - System.Fabric.FabricClient.FaultManagementClient.MoveSecondaryAsync(System.String,System.Fabric.PartitionSelector)
  - System.Fabric.FabricClient.FaultManagementClient.MoveSecondaryAsync(System.String,System.Fabric.PartitionSelector,System.Boolean)
  - System.Fabric.FabricClient.FaultManagementClient.MoveSecondaryAsync(System.String,System.Fabric.PartitionSelector,System.Boolean,System.Threading.CancellationToken)
  - System.Fabric.FabricClient.FaultManagementClient.MoveSecondaryAsync(System.String,System.Fabric.PartitionSelector,System.Boolean,System.TimeSpan,System.Threading.CancellationToken)
  - System.Fabric.FabricClient.FaultManagementClient.MoveSecondaryAsync(System.String,System.Fabric.PartitionSelector,System.Threading.CancellationToken)
  - System.Fabric.FabricClient.FaultManagementClient.MoveSecondaryAsync(System.String,System.Fabric.PartitionSelector,System.TimeSpan,System.Threading.CancellationToken)
  - System.Fabric.FabricClient.FaultManagementClient.MoveSecondaryAsync(System.String,System.String,System.Fabric.PartitionSelector)
  - System.Fabric.FabricClient.FaultManagementClient.MoveSecondaryAsync(System.String,System.String,System.Fabric.PartitionSelector,System.Boolean)
  - System.Fabric.FabricClient.FaultManagementClient.MoveSecondaryAsync(System.String,System.String,System.Fabric.PartitionSelector,System.Boolean,System.Threading.CancellationToken)
  - System.Fabric.FabricClient.FaultManagementClient.MoveSecondaryAsync(System.String,System.String,System.Fabric.PartitionSelector,System.Boolean,System.TimeSpan,System.Threading.CancellationToken)
  - System.Fabric.FabricClient.FaultManagementClient.MoveSecondaryAsync(System.String,System.String,System.Fabric.PartitionSelector,System.Threading.CancellationToken)
  - System.Fabric.FabricClient.FaultManagementClient.MoveSecondaryAsync(System.String,System.String,System.Fabric.PartitionSelector,System.TimeSpan,System.Threading.CancellationToken)
  - System.Fabric.FabricClient.FaultManagementClient.RemoveReplicaAsync(System.Fabric.ReplicaSelector,System.Fabric.CompletionMode,System.Boolean)
  - System.Fabric.FabricClient.FaultManagementClient.RemoveReplicaAsync(System.Fabric.ReplicaSelector,System.Fabric.CompletionMode,System.Boolean,System.Threading.CancellationToken)
  - System.Fabric.FabricClient.FaultManagementClient.RemoveReplicaAsync(System.Fabric.ReplicaSelector,System.Fabric.CompletionMode,System.Boolean,System.TimeSpan,System.Threading.CancellationToken)
  - System.Fabric.FabricClient.FaultManagementClient.RemoveReplicaAsync(System.String,System.Guid,System.Int64,System.Fabric.CompletionMode,System.Boolean)
  - System.Fabric.FabricClient.FaultManagementClient.RemoveReplicaAsync(System.String,System.Guid,System.Int64,System.Fabric.CompletionMode,System.Boolean,System.Double,System.Threading.CancellationToken)
  - System.Fabric.FabricClient.FaultManagementClient.RemoveReplicaAsync(System.String,System.Guid,System.Int64,System.Fabric.CompletionMode,System.Boolean,System.Threading.CancellationToken)
  - System.Fabric.FabricClient.FaultManagementClient.RestartDeployedCodePackageAsync(System.String,System.Uri,System.String,System.String,System.Int64,System.Fabric.CompletionMode)
  - System.Fabric.FabricClient.FaultManagementClient.RestartDeployedCodePackageAsync(System.String,System.Uri,System.String,System.String,System.Int64,System.Fabric.CompletionMode,System.Threading.CancellationToken)
  - System.Fabric.FabricClient.FaultManagementClient.RestartDeployedCodePackageAsync(System.String,System.Uri,System.String,System.String,System.Int64,System.Fabric.CompletionMode,System.TimeSpan,System.Threading.CancellationToken)
  - System.Fabric.FabricClient.FaultManagementClient.RestartDeployedCodePackageAsync(System.Uri,System.Fabric.ReplicaSelector,System.Fabric.CompletionMode)
  - System.Fabric.FabricClient.FaultManagementClient.RestartDeployedCodePackageAsync(System.Uri,System.Fabric.ReplicaSelector,System.Fabric.CompletionMode,System.Threading.CancellationToken)
  - System.Fabric.FabricClient.FaultManagementClient.RestartDeployedCodePackageAsync(System.Uri,System.Fabric.ReplicaSelector,System.Fabric.CompletionMode,System.TimeSpan,System.Threading.CancellationToken)
  - System.Fabric.FabricClient.FaultManagementClient.RestartNodeAsync(System.Fabric.ReplicaSelector,System.Boolean,System.Fabric.CompletionMode,System.TimeSpan,System.Threading.CancellationToken)
  - System.Fabric.FabricClient.FaultManagementClient.RestartNodeAsync(System.Fabric.ReplicaSelector,System.Fabric.CompletionMode)
  - System.Fabric.FabricClient.FaultManagementClient.RestartNodeAsync(System.Fabric.ReplicaSelector,System.Fabric.CompletionMode,System.Threading.CancellationToken)
  - System.Fabric.FabricClient.FaultManagementClient.RestartNodeAsync(System.Fabric.ReplicaSelector,System.Fabric.CompletionMode,System.TimeSpan,System.Threading.CancellationToken)
  - System.Fabric.FabricClient.FaultManagementClient.RestartNodeAsync(System.String,System.Numerics.BigInteger,System.Boolean,System.Fabric.CompletionMode,System.TimeSpan,System.Threading.CancellationToken)
  - System.Fabric.FabricClient.FaultManagementClient.RestartNodeAsync(System.String,System.Numerics.BigInteger,System.Fabric.CompletionMode)
  - System.Fabric.FabricClient.FaultManagementClient.RestartNodeAsync(System.String,System.Numerics.BigInteger,System.Fabric.CompletionMode,System.Threading.CancellationToken)
  - System.Fabric.FabricClient.FaultManagementClient.RestartNodeAsync(System.String,System.Numerics.BigInteger,System.TimeSpan,System.Threading.CancellationToken)
  - System.Fabric.FabricClient.FaultManagementClient.RestartReplicaAsync(System.Fabric.ReplicaSelector,System.Fabric.CompletionMode)
  - System.Fabric.FabricClient.FaultManagementClient.RestartReplicaAsync(System.Fabric.ReplicaSelector,System.Fabric.CompletionMode,System.Threading.CancellationToken)
  - System.Fabric.FabricClient.FaultManagementClient.RestartReplicaAsync(System.Fabric.ReplicaSelector,System.Fabric.CompletionMode,System.TimeSpan,System.Threading.CancellationToken)
  - System.Fabric.FabricClient.FaultManagementClient.RestartReplicaAsync(System.String,System.Guid,System.Int64,System.Fabric.CompletionMode)
  - System.Fabric.FabricClient.FaultManagementClient.RestartReplicaAsync(System.String,System.Guid,System.Int64,System.Fabric.CompletionMode,System.Double,System.Threading.CancellationToken)
  - System.Fabric.FabricClient.FaultManagementClient.RestartReplicaAsync(System.String,System.Guid,System.Int64,System.Fabric.CompletionMode,System.Threading.CancellationToken)
  - System.Fabric.FabricClient.FaultManagementClient.StartNodeAsync(System.String,System.Numerics.BigInteger,System.Fabric.CompletionMode)
  - System.Fabric.FabricClient.FaultManagementClient.StartNodeAsync(System.String,System.Numerics.BigInteger,System.Fabric.CompletionMode,System.Threading.CancellationToken)
  - System.Fabric.FabricClient.FaultManagementClient.StartNodeAsync(System.String,System.Numerics.BigInteger,System.String,System.Int32,System.Fabric.CompletionMode)
  - System.Fabric.FabricClient.FaultManagementClient.StartNodeAsync(System.String,System.Numerics.BigInteger,System.String,System.Int32,System.Fabric.CompletionMode,System.Threading.CancellationToken)
  - System.Fabric.FabricClient.FaultManagementClient.StartNodeAsync(System.String,System.Numerics.BigInteger,System.String,System.Int32,System.Fabric.CompletionMode,System.TimeSpan,System.Threading.CancellationToken)
  - System.Fabric.FabricClient.FaultManagementClient.StopNodeAsync(System.String,System.Numerics.BigInteger,System.Fabric.CompletionMode)
  - System.Fabric.FabricClient.FaultManagementClient.StopNodeAsync(System.String,System.Numerics.BigInteger,System.Fabric.CompletionMode,System.Threading.CancellationToken)
  - System.Fabric.FabricClient.FaultManagementClient.StopNodeAsync(System.String,System.Numerics.BigInteger,System.Fabric.CompletionMode,System.TimeSpan,System.Threading.CancellationToken)
  langs:
  - csharp
  - vb
  name: FabricClient.FaultManagementClient
  nameWithType: FabricClient.FaultManagementClient
  fullName: System.Fabric.FabricClient.FaultManagementClient
  type: Class
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.FaultManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: FaultManagementClient
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.FaultManagementClient.cs
    startLine: 19
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Represents the fabric client that can be used to issue faults.</p>\n"
  example: []
  syntax:
    content: public sealed class FaultManagementClient
    content.vb: Public NotInheritable Class FaultManagementClient
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  extensionMethods:
  - System.Fabric.FabricClient.FaultManagementClient.System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: System.Fabric.FabricClient.FaultManagementClient.RestartNodeAsync(System.String,System.Numerics.BigInteger,System.Fabric.CompletionMode,System.Threading.CancellationToken)
  commentId: M:System.Fabric.FabricClient.FaultManagementClient.RestartNodeAsync(System.String,System.Numerics.BigInteger,System.Fabric.CompletionMode,System.Threading.CancellationToken)
  id: RestartNodeAsync(System.String,System.Numerics.BigInteger,System.Fabric.CompletionMode,System.Threading.CancellationToken)
  parent: System.Fabric.FabricClient.FaultManagementClient
  langs:
  - csharp
  - vb
  name: RestartNodeAsync(String, BigInteger, CompletionMode, CancellationToken)
  nameWithType: FabricClient.FaultManagementClient.RestartNodeAsync(String, BigInteger, CompletionMode, CancellationToken)
  fullName: System.Fabric.FabricClient.FaultManagementClient.RestartNodeAsync(System.String, System.Numerics.BigInteger, System.Fabric.CompletionMode, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.FaultManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: RestartNodeAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.FaultManagementClient.cs
    startLine: 72
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\nRestarts a cluster node.\n"
  remarks: A cluster node is a process, not a virtual or physical machine.
  example: []
  syntax:
    content: public Task<RestartNodeResult> RestartNodeAsync(string nodeName, BigInteger nodeInstance, CompletionMode completionMode, CancellationToken token)
    content.vb: Public Function RestartNodeAsync(nodeName As String, nodeInstance As BigInteger, completionMode As CompletionMode, token As CancellationToken) As Task(Of RestartNodeResult)
    parameters:
    - id: nodeName
      type: System.String
      description: The node name of the node to restart.
    - id: nodeInstance
      type: System.Numerics.BigInteger
      description: The node instance ID of the node to restart. If this is not specified, or is set to 0, this is ignored; if this is set to -1, the system will internally determine this value.
    - id: completionMode
      type: System.Fabric.CompletionMode
      description: If set to Verify, the system will check that the node restarted, and the API will not return until it has and NodeStatus is Up. If set to DoNotVerify, the API returns once the node restart has been initiated.
    - id: token
      type: System.Threading.CancellationToken
      description: The cancellation token.
    return:
      type: System.Threading.Tasks.Task{System.Fabric.Result.RestartNodeResult}
      description: A task with information representing the target node.
  overload: System.Fabric.FabricClient.FaultManagementClient.RestartNodeAsync*
  exceptions:
  - type: System.Fabric.FabricException
    commentId: T:System.Fabric.FabricException
    description: The <xref href="System.Fabric.FabricException.ErrorCode" data-throw-if-not-resolved="false"></xref> property will indicate the reason.  If the ErrorCode is NodeNotFound, nodeName is invalid.  If the ErrorCode is InstanceIdMismatch, the nodeInstance provided does not match the currently running instance.
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: The operation timed out.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: An argument with a value of null was passed in.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.FaultManagementClient.RestartNodeAsync(System.String,System.Numerics.BigInteger,System.Fabric.CompletionMode)
  commentId: M:System.Fabric.FabricClient.FaultManagementClient.RestartNodeAsync(System.String,System.Numerics.BigInteger,System.Fabric.CompletionMode)
  id: RestartNodeAsync(System.String,System.Numerics.BigInteger,System.Fabric.CompletionMode)
  parent: System.Fabric.FabricClient.FaultManagementClient
  langs:
  - csharp
  - vb
  name: RestartNodeAsync(String, BigInteger, CompletionMode)
  nameWithType: FabricClient.FaultManagementClient.RestartNodeAsync(String, BigInteger, CompletionMode)
  fullName: System.Fabric.FabricClient.FaultManagementClient.RestartNodeAsync(System.String, System.Numerics.BigInteger, System.Fabric.CompletionMode)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.FaultManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: RestartNodeAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.FaultManagementClient.cs
    startLine: 95
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\nRestarts a cluster node.\n"
  remarks: A cluster node is a process, not a virtual or physical machine.
  example: []
  syntax:
    content: public Task<RestartNodeResult> RestartNodeAsync(string nodeName, BigInteger nodeInstance, CompletionMode completionMode)
    content.vb: Public Function RestartNodeAsync(nodeName As String, nodeInstance As BigInteger, completionMode As CompletionMode) As Task(Of RestartNodeResult)
    parameters:
    - id: nodeName
      type: System.String
      description: The node name of the node to restart.
    - id: nodeInstance
      type: System.Numerics.BigInteger
      description: The node instance ID of the node to restart. If this is not specified, or is set to 0, this is ignored. If this is set to -1, the system will internally determine this value.
    - id: completionMode
      type: System.Fabric.CompletionMode
      description: If set to Verify, the system will check that the node restarted, and the API will not return until it has and NodeStatus is Up.  If set to DoNotVerify, the API returns once the node restart has been initiated.
    return:
      type: System.Threading.Tasks.Task{System.Fabric.Result.RestartNodeResult}
      description: A task with information representing the target node.
  overload: System.Fabric.FabricClient.FaultManagementClient.RestartNodeAsync*
  exceptions:
  - type: System.Fabric.FabricException
    commentId: T:System.Fabric.FabricException
    description: >
      The <xref href="System.Fabric.FabricException.ErrorCode" data-throw-if-not-resolved="false"></xref> property will indicate the reason.
        If the ErrorCode is NodeNotFound, nodeName or nodeInstance is invalid.
        If the ErrorCode is InstanceIdMismatch, the nodeInstance provided does not match the currently running instance.
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: The operation timed out.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: An argument with a value of null was passed in.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.FaultManagementClient.RestartNodeAsync(System.String,System.Numerics.BigInteger,System.TimeSpan,System.Threading.CancellationToken)
  commentId: M:System.Fabric.FabricClient.FaultManagementClient.RestartNodeAsync(System.String,System.Numerics.BigInteger,System.TimeSpan,System.Threading.CancellationToken)
  id: RestartNodeAsync(System.String,System.Numerics.BigInteger,System.TimeSpan,System.Threading.CancellationToken)
  parent: System.Fabric.FabricClient.FaultManagementClient
  langs:
  - csharp
  - vb
  name: RestartNodeAsync(String, BigInteger, TimeSpan, CancellationToken)
  nameWithType: FabricClient.FaultManagementClient.RestartNodeAsync(String, BigInteger, TimeSpan, CancellationToken)
  fullName: System.Fabric.FabricClient.FaultManagementClient.RestartNodeAsync(System.String, System.Numerics.BigInteger, System.TimeSpan, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.FaultManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: RestartNodeAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.FaultManagementClient.cs
    startLine: 118
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\nRestarts a cluster node.\n"
  remarks: A cluster node is a process, not a virtual or physical machine.
  example: []
  syntax:
    content: public Task<RestartNodeResult> RestartNodeAsync(string nodeName, BigInteger nodeInstance, TimeSpan operationTimeout, CancellationToken token)
    content.vb: Public Function RestartNodeAsync(nodeName As String, nodeInstance As BigInteger, operationTimeout As TimeSpan, token As CancellationToken) As Task(Of RestartNodeResult)
    parameters:
    - id: nodeName
      type: System.String
      description: The node name of the node to restart.
    - id: nodeInstance
      type: System.Numerics.BigInteger
      description: The node instance ID of the node to restart. If this is not specified, or is set to 0, this is ignored. If this is set to -1, the system will internally determine this value.
    - id: operationTimeout
      type: System.TimeSpan
      description: The timeout for this API call.
    - id: token
      type: System.Threading.CancellationToken
      description: The cancellation token.
    return:
      type: System.Threading.Tasks.Task{System.Fabric.Result.RestartNodeResult}
      description: A task with information representing the target node.
  overload: System.Fabric.FabricClient.FaultManagementClient.RestartNodeAsync*
  exceptions:
  - type: System.Fabric.FabricException
    commentId: T:System.Fabric.FabricException
    description: "The <xref href=\"System.Fabric.FabricException.ErrorCode\" data-throw-if-not-resolved=\"false\"></xref> property will indicate the reason.  \n  If the ErrorCode is NodeNotFound, nodeName is invalid.  \n  If the ErrorCode is InstanceIdMismatch, the nodeInstance provided does not match the currently running instance.\n"
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: The operation timed out.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: An argument with a value of null was passed in.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.FaultManagementClient.RestartNodeAsync(System.String,System.Numerics.BigInteger,System.Boolean,System.Fabric.CompletionMode,System.TimeSpan,System.Threading.CancellationToken)
  commentId: M:System.Fabric.FabricClient.FaultManagementClient.RestartNodeAsync(System.String,System.Numerics.BigInteger,System.Boolean,System.Fabric.CompletionMode,System.TimeSpan,System.Threading.CancellationToken)
  id: RestartNodeAsync(System.String,System.Numerics.BigInteger,System.Boolean,System.Fabric.CompletionMode,System.TimeSpan,System.Threading.CancellationToken)
  parent: System.Fabric.FabricClient.FaultManagementClient
  langs:
  - csharp
  - vb
  name: RestartNodeAsync(String, BigInteger, Boolean, CompletionMode, TimeSpan, CancellationToken)
  nameWithType: FabricClient.FaultManagementClient.RestartNodeAsync(String, BigInteger, Boolean, CompletionMode, TimeSpan, CancellationToken)
  fullName: System.Fabric.FabricClient.FaultManagementClient.RestartNodeAsync(System.String, System.Numerics.BigInteger, System.Boolean, System.Fabric.CompletionMode, System.TimeSpan, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.FaultManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: RestartNodeAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.FaultManagementClient.cs
    startLine: 144
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\nRestarts a cluster node.\n"
  remarks: A cluster node is a process, not a virtual or physical machine.
  example: []
  syntax:
    content: public Task<RestartNodeResult> RestartNodeAsync(string nodeName, BigInteger nodeInstance, bool createFabricDump, CompletionMode completionMode, TimeSpan operationTimeout, CancellationToken token)
    content.vb: Public Function RestartNodeAsync(nodeName As String, nodeInstance As BigInteger, createFabricDump As Boolean, completionMode As CompletionMode, operationTimeout As TimeSpan, token As CancellationToken) As Task(Of RestartNodeResult)
    parameters:
    - id: nodeName
      type: System.String
      description: The node name of the node to restart.
    - id: nodeInstance
      type: System.Numerics.BigInteger
      description: The node instance ID of the node to restart. If this is not specified, or is set to 0, this is ignored. If this is set to -1, the system will internally determine this value.
    - id: createFabricDump
      type: System.Boolean
      description: If set to true, the system will create the process dump for Fabric.exe on this node.
    - id: completionMode
      type: System.Fabric.CompletionMode
      description: If set to Verify, the system will check that the node restarted, and the API will not return until it has and NodeStatus is Up.  If set to DoNotVerify, the API returns once the node restart has been initiated.
    - id: operationTimeout
      type: System.TimeSpan
      description: The timeout for this API call.
    - id: token
      type: System.Threading.CancellationToken
      description: The cancellation token.
    return:
      type: System.Threading.Tasks.Task{System.Fabric.Result.RestartNodeResult}
      description: A task with information representing the target node.
  overload: System.Fabric.FabricClient.FaultManagementClient.RestartNodeAsync*
  exceptions:
  - type: System.Fabric.FabricException
    commentId: T:System.Fabric.FabricException
    description: "The <xref href=\"System.Fabric.FabricException.ErrorCode\" data-throw-if-not-resolved=\"false\"></xref> property will indicate the reason.  \n  If the ErrorCode is NodeNotFound, nodeName is invalid.  \n  If the ErrorCode is InstanceIdMismatch, the nodeInstance provided does not match the currently running instance.\n"
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: The operation timed out.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: An argument with a value of null was passed in.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.FaultManagementClient.RestartNodeAsync(System.Fabric.ReplicaSelector,System.Fabric.CompletionMode,System.Threading.CancellationToken)
  commentId: M:System.Fabric.FabricClient.FaultManagementClient.RestartNodeAsync(System.Fabric.ReplicaSelector,System.Fabric.CompletionMode,System.Threading.CancellationToken)
  id: RestartNodeAsync(System.Fabric.ReplicaSelector,System.Fabric.CompletionMode,System.Threading.CancellationToken)
  parent: System.Fabric.FabricClient.FaultManagementClient
  langs:
  - csharp
  - vb
  name: RestartNodeAsync(ReplicaSelector, CompletionMode, CancellationToken)
  nameWithType: FabricClient.FaultManagementClient.RestartNodeAsync(ReplicaSelector, CompletionMode, CancellationToken)
  fullName: System.Fabric.FabricClient.FaultManagementClient.RestartNodeAsync(System.Fabric.ReplicaSelector, System.Fabric.CompletionMode, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.FaultManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: RestartNodeAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.FaultManagementClient.cs
    startLine: 178
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\nRestarts a cluster node.\n"
  remarks: A cluster node is a process, not an virtual or physical machine.
  example: []
  syntax:
    content: public Task<RestartNodeResult> RestartNodeAsync(ReplicaSelector replicaSelector, CompletionMode completionMode, CancellationToken token)
    content.vb: Public Function RestartNodeAsync(replicaSelector As ReplicaSelector, completionMode As CompletionMode, token As CancellationToken) As Task(Of RestartNodeResult)
    parameters:
    - id: replicaSelector
      type: System.Fabric.ReplicaSelector
      description: This parameter is used to choose a specific replica.  This replica's corresponding node will be restarted.
    - id: completionMode
      type: System.Fabric.CompletionMode
      description: If set to Verify, the system will check that the node restarted, and the API will not return until it has and NodeStatus is Up.  If set to DoNotVerify, the API returns once the node restart has been initiated.
    - id: token
      type: System.Threading.CancellationToken
      description: The cancellation token.
    return:
      type: System.Threading.Tasks.Task{System.Fabric.Result.RestartNodeResult}
      description: A task with information representing the target node, and the replica selected.
  overload: System.Fabric.FabricClient.FaultManagementClient.RestartNodeAsync*
  exceptions:
  - type: System.Fabric.FabricException
    commentId: T:System.Fabric.FabricException
    description: >
      The <xref href="System.Fabric.FabricException.ErrorCode" data-throw-if-not-resolved="false"></xref> property will indicate the reason.
        If the ErrorCode is InvalidArgument, nodeName is invalid.
        If the errorCode is InstanceIdMismatch, the nodeInstance provided does not match the currently running instance.
        If the ErrorCode is ReplicaDoesNotExist, the selected replica was not found.
        If the ErrorCode is PartitionNotFound, the specified partition does not exist.
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: The operation timed out.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: An argument with a value of null was passed in.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.FaultManagementClient.RestartNodeAsync(System.Fabric.ReplicaSelector,System.Fabric.CompletionMode)
  commentId: M:System.Fabric.FabricClient.FaultManagementClient.RestartNodeAsync(System.Fabric.ReplicaSelector,System.Fabric.CompletionMode)
  id: RestartNodeAsync(System.Fabric.ReplicaSelector,System.Fabric.CompletionMode)
  parent: System.Fabric.FabricClient.FaultManagementClient
  langs:
  - csharp
  - vb
  name: RestartNodeAsync(ReplicaSelector, CompletionMode)
  nameWithType: FabricClient.FaultManagementClient.RestartNodeAsync(ReplicaSelector, CompletionMode)
  fullName: System.Fabric.FabricClient.FaultManagementClient.RestartNodeAsync(System.Fabric.ReplicaSelector, System.Fabric.CompletionMode)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.FaultManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: RestartNodeAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.FaultManagementClient.cs
    startLine: 201
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\nRestarts a cluster node.\n"
  remarks: A cluster node is a process, not an virtual or physical machine.
  example: []
  syntax:
    content: public Task<RestartNodeResult> RestartNodeAsync(ReplicaSelector replicaSelector, CompletionMode completionMode)
    content.vb: Public Function RestartNodeAsync(replicaSelector As ReplicaSelector, completionMode As CompletionMode) As Task(Of RestartNodeResult)
    parameters:
    - id: replicaSelector
      type: System.Fabric.ReplicaSelector
      description: This parameter is used to choose a specific replica.  This replica's corresponding node will be restarted.
    - id: completionMode
      type: System.Fabric.CompletionMode
      description: If set to Verify, the system will check that the node restarted, and the API will not return until it has and NodeStatus is Up.  If set to DoNotVerify, the API returns once the node restart has been initiated.
    return:
      type: System.Threading.Tasks.Task{System.Fabric.Result.RestartNodeResult}
      description: A task with information representing the target node, and the replica selected.
  overload: System.Fabric.FabricClient.FaultManagementClient.RestartNodeAsync*
  exceptions:
  - type: System.Fabric.FabricException
    commentId: T:System.Fabric.FabricException
    description: >
      The <xref href="System.Fabric.FabricException.ErrorCode" data-throw-if-not-resolved="false"></xref> property will indicate the reason.
        If the ErrorCode is InvalidArgument, nodeName is invalid.
        If the ErrorCode is InstanceIdMismatch, the nodeInstance provided does not match the currently running instance.
        If the ErrorCode is ReplicaDoesNotExist, the selected replica was not found.
        If the ErrorCode is PartitionNotFound, the specified partition does not exist.
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: The operation timed out.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: An argument with a value of null was passed in.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.FaultManagementClient.RestartNodeAsync(System.Fabric.ReplicaSelector,System.Fabric.CompletionMode,System.TimeSpan,System.Threading.CancellationToken)
  commentId: M:System.Fabric.FabricClient.FaultManagementClient.RestartNodeAsync(System.Fabric.ReplicaSelector,System.Fabric.CompletionMode,System.TimeSpan,System.Threading.CancellationToken)
  id: RestartNodeAsync(System.Fabric.ReplicaSelector,System.Fabric.CompletionMode,System.TimeSpan,System.Threading.CancellationToken)
  parent: System.Fabric.FabricClient.FaultManagementClient
  langs:
  - csharp
  - vb
  name: RestartNodeAsync(ReplicaSelector, CompletionMode, TimeSpan, CancellationToken)
  nameWithType: FabricClient.FaultManagementClient.RestartNodeAsync(ReplicaSelector, CompletionMode, TimeSpan, CancellationToken)
  fullName: System.Fabric.FabricClient.FaultManagementClient.RestartNodeAsync(System.Fabric.ReplicaSelector, System.Fabric.CompletionMode, System.TimeSpan, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.FaultManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: RestartNodeAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.FaultManagementClient.cs
    startLine: 225
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\nRestarts a cluster node.\n"
  remarks: A cluster node is a process, not an virtual or physical machine.
  example: []
  syntax:
    content: public Task<RestartNodeResult> RestartNodeAsync(ReplicaSelector replicaSelector, CompletionMode completionMode, TimeSpan operationTimeout, CancellationToken token)
    content.vb: Public Function RestartNodeAsync(replicaSelector As ReplicaSelector, completionMode As CompletionMode, operationTimeout As TimeSpan, token As CancellationToken) As Task(Of RestartNodeResult)
    parameters:
    - id: replicaSelector
      type: System.Fabric.ReplicaSelector
      description: This parameter is used to choose a specific replica.  This replica's corresponding node will be restarted.
    - id: completionMode
      type: System.Fabric.CompletionMode
      description: If set to Verify, the system will check that the node restarted, and the API will not return until it has and NodeStatus is Up.  If set to DoNotVerify, the API returns once the node restart has been initiated.
    - id: operationTimeout
      type: System.TimeSpan
      description: The timeout for this API call.
    - id: token
      type: System.Threading.CancellationToken
      description: The cancellation token.
    return:
      type: System.Threading.Tasks.Task{System.Fabric.Result.RestartNodeResult}
      description: A task with information representing the target node, and the replica selected.
  overload: System.Fabric.FabricClient.FaultManagementClient.RestartNodeAsync*
  exceptions:
  - type: System.Fabric.FabricException
    commentId: T:System.Fabric.FabricException
    description: >
      The <xref href="System.Fabric.FabricException.ErrorCode" data-throw-if-not-resolved="false"></xref> property will indicate the reason.
        If the ErrorCode is InvalidArgument, nodeName is invalid.
        If the errorCode is InstanceIdMismatch, the nodeInstance provided does not match the currently running instance.
        If the ErrorCode is ReplicaDoesNotExist, the selected replica was not found.
        If the ErrorCode is PartitionNotFound, the specified partition does not exist.
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: The operation timed out.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: An argument with a value of null was passed in.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.FaultManagementClient.RestartNodeAsync(System.Fabric.ReplicaSelector,System.Boolean,System.Fabric.CompletionMode,System.TimeSpan,System.Threading.CancellationToken)
  commentId: M:System.Fabric.FabricClient.FaultManagementClient.RestartNodeAsync(System.Fabric.ReplicaSelector,System.Boolean,System.Fabric.CompletionMode,System.TimeSpan,System.Threading.CancellationToken)
  id: RestartNodeAsync(System.Fabric.ReplicaSelector,System.Boolean,System.Fabric.CompletionMode,System.TimeSpan,System.Threading.CancellationToken)
  parent: System.Fabric.FabricClient.FaultManagementClient
  langs:
  - csharp
  - vb
  name: RestartNodeAsync(ReplicaSelector, Boolean, CompletionMode, TimeSpan, CancellationToken)
  nameWithType: FabricClient.FaultManagementClient.RestartNodeAsync(ReplicaSelector, Boolean, CompletionMode, TimeSpan, CancellationToken)
  fullName: System.Fabric.FabricClient.FaultManagementClient.RestartNodeAsync(System.Fabric.ReplicaSelector, System.Boolean, System.Fabric.CompletionMode, System.TimeSpan, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.FaultManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: RestartNodeAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.FaultManagementClient.cs
    startLine: 252
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\nRestarts a cluster node.\n"
  remarks: A cluster node is a process, not an virtual or physical machine.If the createFabricDump parameter is set , on restart the process is crashed and the crash dump is placed in the Crash Dumps folder which the DCA can be configured to upload.
  example: []
  syntax:
    content: public Task<RestartNodeResult> RestartNodeAsync(ReplicaSelector replicaSelector, bool createFabricDump, CompletionMode completionMode, TimeSpan operationTimeout, CancellationToken token)
    content.vb: Public Function RestartNodeAsync(replicaSelector As ReplicaSelector, createFabricDump As Boolean, completionMode As CompletionMode, operationTimeout As TimeSpan, token As CancellationToken) As Task(Of RestartNodeResult)
    parameters:
    - id: replicaSelector
      type: System.Fabric.ReplicaSelector
      description: This parameter is used to choose a specific replica.  This replica's corresponding node will be restarted.
    - id: createFabricDump
      type: System.Boolean
      description: If set to true, the system will create the process dump for Fabric.exe on this node.
    - id: completionMode
      type: System.Fabric.CompletionMode
      description: If set to Verify, the system will check that the node restarted, and the API will not return until it has and NodeStatus is Up.  If set to DoNotVerify, the API returns once the node restart has been initiated.
    - id: operationTimeout
      type: System.TimeSpan
      description: The timeout for this API call.
    - id: token
      type: System.Threading.CancellationToken
      description: The cancellation token.
    return:
      type: System.Threading.Tasks.Task{System.Fabric.Result.RestartNodeResult}
      description: A task with information representing the target node, and the replica selected.
  overload: System.Fabric.FabricClient.FaultManagementClient.RestartNodeAsync*
  exceptions:
  - type: System.Fabric.FabricException
    commentId: T:System.Fabric.FabricException
    description: >
      The <xref href="System.Fabric.FabricException.ErrorCode" data-throw-if-not-resolved="false"></xref> property will indicate the reason.
        If the ErrorCode is InvalidArgument, nodeName is invalid.
        If the errorCode is InstanceIdMismatch, the nodeInstance provided does not match the currently running instance.
        If the ErrorCode is ReplicaDoesNotExist, the selected replica was not found.
        If the ErrorCode is PartitionNotFound, the specified partition does not exist.
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: The operation timed out.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: An argument with a value of null was passed in.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.FaultManagementClient.StartNodeAsync(System.String,System.Numerics.BigInteger,System.Fabric.CompletionMode)
  commentId: M:System.Fabric.FabricClient.FaultManagementClient.StartNodeAsync(System.String,System.Numerics.BigInteger,System.Fabric.CompletionMode)
  id: StartNodeAsync(System.String,System.Numerics.BigInteger,System.Fabric.CompletionMode)
  parent: System.Fabric.FabricClient.FaultManagementClient
  langs:
  - csharp
  - vb
  name: StartNodeAsync(String, BigInteger, CompletionMode)
  nameWithType: FabricClient.FaultManagementClient.StartNodeAsync(String, BigInteger, CompletionMode)
  fullName: System.Fabric.FabricClient.FaultManagementClient.StartNodeAsync(System.String, System.Numerics.BigInteger, System.Fabric.CompletionMode)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.FaultManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: StartNodeAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.FaultManagementClient.cs
    startLine: 299
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\nStarts a cluster node.\n"
  remarks: A cluster node is a process, not an virtual or physical machine.
  example: []
  syntax:
    content: public Task<StartNodeResult> StartNodeAsync(string nodeName, BigInteger nodeInstance, CompletionMode completionMode)
    content.vb: Public Function StartNodeAsync(nodeName As String, nodeInstance As BigInteger, completionMode As CompletionMode) As Task(Of StartNodeResult)
    parameters:
    - id: nodeName
      type: System.String
      description: The node name of the node to start.
    - id: nodeInstance
      type: System.Numerics.BigInteger
      description: The node instance ID of the node, before it was stopped. If this is not specified, or is set to 0, this is ignored. If this is set to -1, the system will internally determine this value.
    - id: completionMode
      type: System.Fabric.CompletionMode
      description: If set to Verify, the system will check that the node started, and the API will not return until it has.  If set to DoNotVerify, the API returns once the node start has been initiated.
    return:
      type: System.Threading.Tasks.Task{System.Fabric.Result.StartNodeResult}
      description: A task with information representing the target node.
  overload: System.Fabric.FabricClient.FaultManagementClient.StartNodeAsync*
  exceptions:
  - type: System.Fabric.FabricException
    commentId: T:System.Fabric.FabricException
    description: "The <xref href=\"System.Fabric.FabricException.ErrorCode\" data-throw-if-not-resolved=\"false\"></xref> property will indicate the reason.  \n  If the ErrorCode is InvalidArgument, nodeName or nodeInstance is invalid.  \n  If the ErrorCode is InstanceIdMismatch, the nodeInstance provided does not match the instance of the node that was stopped.  \n  If the ErrorCode is NodeHasNotStoppedYet, there is a currently pending stop operation on this node.\n"
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: The operation timed out.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: An argument with a value of null was passed in.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.FaultManagementClient.StartNodeAsync(System.String,System.Numerics.BigInteger,System.Fabric.CompletionMode,System.Threading.CancellationToken)
  commentId: M:System.Fabric.FabricClient.FaultManagementClient.StartNodeAsync(System.String,System.Numerics.BigInteger,System.Fabric.CompletionMode,System.Threading.CancellationToken)
  id: StartNodeAsync(System.String,System.Numerics.BigInteger,System.Fabric.CompletionMode,System.Threading.CancellationToken)
  parent: System.Fabric.FabricClient.FaultManagementClient
  langs:
  - csharp
  - vb
  name: StartNodeAsync(String, BigInteger, CompletionMode, CancellationToken)
  nameWithType: FabricClient.FaultManagementClient.StartNodeAsync(String, BigInteger, CompletionMode, CancellationToken)
  fullName: System.Fabric.FabricClient.FaultManagementClient.StartNodeAsync(System.String, System.Numerics.BigInteger, System.Fabric.CompletionMode, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.FaultManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: StartNodeAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.FaultManagementClient.cs
    startLine: 323
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\nStarts a cluster node.\n"
  remarks: A cluster node is a process, not an virtual or physical machine.
  example: []
  syntax:
    content: public Task<StartNodeResult> StartNodeAsync(string nodeName, BigInteger nodeInstance, CompletionMode completionMode, CancellationToken token)
    content.vb: Public Function StartNodeAsync(nodeName As String, nodeInstance As BigInteger, completionMode As CompletionMode, token As CancellationToken) As Task(Of StartNodeResult)
    parameters:
    - id: nodeName
      type: System.String
      description: The node name of the node to start.
    - id: nodeInstance
      type: System.Numerics.BigInteger
      description: The node instance ID of the node, before it was stopped.  If this is not specified, or is set to 0, this is ignored.  If this is set to -1, the system will internally determine this value.
    - id: completionMode
      type: System.Fabric.CompletionMode
      description: If set to Verify, the system will check that the node started, and the API will not return until it has.  If set to DoNotVerify, the API returns once the node start has been initiated.
    - id: token
      type: System.Threading.CancellationToken
      description: The cancellation token.
    return:
      type: System.Threading.Tasks.Task{System.Fabric.Result.StartNodeResult}
      description: A task with information representing the target node.
  overload: System.Fabric.FabricClient.FaultManagementClient.StartNodeAsync*
  exceptions:
  - type: System.Fabric.FabricException
    commentId: T:System.Fabric.FabricException
    description: "The <xref href=\"System.Fabric.FabricException.ErrorCode\" data-throw-if-not-resolved=\"false\"></xref> property will indicate the reason.  \n  If the ErrorCode is InvalidArgument, nodeName or nodeInstance is invalid.  \n  If the errorCode is InstanceIdMismatch, the nodeInstance provided does not match the instance of the node that was stopped.  \n  If the ErrorCode is NodeHasNotStoppedYet, there is a currently pending stop operation on this node.\n"
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: The operation timed out.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: An argument with a value of null was passed in.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.FaultManagementClient.StartNodeAsync(System.String,System.Numerics.BigInteger,System.String,System.Int32,System.Fabric.CompletionMode)
  commentId: M:System.Fabric.FabricClient.FaultManagementClient.StartNodeAsync(System.String,System.Numerics.BigInteger,System.String,System.Int32,System.Fabric.CompletionMode)
  id: StartNodeAsync(System.String,System.Numerics.BigInteger,System.String,System.Int32,System.Fabric.CompletionMode)
  parent: System.Fabric.FabricClient.FaultManagementClient
  langs:
  - csharp
  - vb
  name: StartNodeAsync(String, BigInteger, String, Int32, CompletionMode)
  nameWithType: FabricClient.FaultManagementClient.StartNodeAsync(String, BigInteger, String, Int32, CompletionMode)
  fullName: System.Fabric.FabricClient.FaultManagementClient.StartNodeAsync(System.String, System.Numerics.BigInteger, System.String, System.Int32, System.Fabric.CompletionMode)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.FaultManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: StartNodeAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.FaultManagementClient.cs
    startLine: 349
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\nStarts a cluster node.\n"
  remarks: A cluster node is a process, not an virtual or physical machine.
  example: []
  syntax:
    content: public Task<StartNodeResult> StartNodeAsync(string nodeName, BigInteger nodeInstance, string ipAddressOrFQDN, int clusterConnectionPort, CompletionMode completionMode)
    content.vb: Public Function StartNodeAsync(nodeName As String, nodeInstance As BigInteger, ipAddressOrFQDN As String, clusterConnectionPort As Integer, completionMode As CompletionMode) As Task(Of StartNodeResult)
    parameters:
    - id: nodeName
      type: System.String
      description: The node name of the node to start.
    - id: nodeInstance
      type: System.Numerics.BigInteger
      description: The node instance ID of the node, before it was stopped.  If this is not specified, or is set to 0, this is ignored.  If this is set to -1, the system will internally determine this value.
    - id: ipAddressOrFQDN
      type: System.String
      description: The IP address or fully-qualified domain name (FQDN) of the target node.  If this parameter is specified, 'ClusterConnectionPort" also must be specified.  If neither is specified, the system internally determines these.
    - id: clusterConnectionPort
      type: System.Int32
      description: The cluster connection port of the target node.  If this parameter is specified, 'ipAddressOrFQDN' also must be specified.  If neither is specified, the system internally determines these.
    - id: completionMode
      type: System.Fabric.CompletionMode
      description: If set to Verify, the system will check that the node started, and the API will not return until it has.  If set to DoNotVerify, the API returns once the node start has been initiated.
    return:
      type: System.Threading.Tasks.Task{System.Fabric.Result.StartNodeResult}
      description: A task with information representing the target node.
  overload: System.Fabric.FabricClient.FaultManagementClient.StartNodeAsync*
  exceptions:
  - type: System.Fabric.FabricException
    commentId: T:System.Fabric.FabricException
    description: "The <xref href=\"System.Fabric.FabricException.ErrorCode\" data-throw-if-not-resolved=\"false\"></xref> property will indicate the reason.  \n  If the ErrorCode is InvalidArgument, nodeName or nodeInstance is invalid.  \n  If the errorCode is InstanceIdMismatch, the nodeInstance provided does not match the instance of the node that was stopped.  \n  If the ErrorCode is NodeHasNotStoppedYet, there is a currently pending stop operation on this node.\n"
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: The operation timed out.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: An argument with a value of null was passed in.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.FaultManagementClient.StartNodeAsync(System.String,System.Numerics.BigInteger,System.String,System.Int32,System.Fabric.CompletionMode,System.Threading.CancellationToken)
  commentId: M:System.Fabric.FabricClient.FaultManagementClient.StartNodeAsync(System.String,System.Numerics.BigInteger,System.String,System.Int32,System.Fabric.CompletionMode,System.Threading.CancellationToken)
  id: StartNodeAsync(System.String,System.Numerics.BigInteger,System.String,System.Int32,System.Fabric.CompletionMode,System.Threading.CancellationToken)
  parent: System.Fabric.FabricClient.FaultManagementClient
  langs:
  - csharp
  - vb
  name: StartNodeAsync(String, BigInteger, String, Int32, CompletionMode, CancellationToken)
  nameWithType: FabricClient.FaultManagementClient.StartNodeAsync(String, BigInteger, String, Int32, CompletionMode, CancellationToken)
  fullName: System.Fabric.FabricClient.FaultManagementClient.StartNodeAsync(System.String, System.Numerics.BigInteger, System.String, System.Int32, System.Fabric.CompletionMode, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.FaultManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: StartNodeAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.FaultManagementClient.cs
    startLine: 377
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\nStarts a cluster node.\n"
  remarks: A cluster node is a process, not an virtual or physical machine.
  example: []
  syntax:
    content: public Task<StartNodeResult> StartNodeAsync(string nodeName, BigInteger nodeInstance, string ipAddressOrFQDN, int clusterConnectionPort, CompletionMode completionMode, CancellationToken token)
    content.vb: Public Function StartNodeAsync(nodeName As String, nodeInstance As BigInteger, ipAddressOrFQDN As String, clusterConnectionPort As Integer, completionMode As CompletionMode, token As CancellationToken) As Task(Of StartNodeResult)
    parameters:
    - id: nodeName
      type: System.String
      description: The node name of the node to start.
    - id: nodeInstance
      type: System.Numerics.BigInteger
      description: The node instance ID of the node, before it was stopped.  If this is not specified, or is set to 0, this is ignored.  If this is set to -1, the system will internally determine this value.
    - id: ipAddressOrFQDN
      type: System.String
      description: The IP address or fully-qualified domain name (FQDN) of the target node.  If this parameter is specified, <em>clusterConnectionPort</em> also must be specified.  If neither is specified, the system internally determines these.
    - id: clusterConnectionPort
      type: System.Int32
      description: The cluster connection port of the target node.  If this parameter is specified, <em>ipAddressOrFQDN</em> also must be specified.  If neither is specified, the system internally determines these.
    - id: completionMode
      type: System.Fabric.CompletionMode
      description: If set to Verify, the system will check that the node started, and the API will not return until it has.  If set to DoNotVerify, the API returns once the node start has been initiated.
    - id: token
      type: System.Threading.CancellationToken
      description: The cancellation token.
    return:
      type: System.Threading.Tasks.Task{System.Fabric.Result.StartNodeResult}
      description: A task with information representing the target node.
  overload: System.Fabric.FabricClient.FaultManagementClient.StartNodeAsync*
  exceptions:
  - type: System.Fabric.FabricException
    commentId: T:System.Fabric.FabricException
    description: "The <xref href=\"System.Fabric.FabricException.ErrorCode\" data-throw-if-not-resolved=\"false\"></xref> property will indicate the reason.  \n  If the ErrorCode is InvalidArgument, nodeName or nodeInstance is invalid.  \n  If the errorCode is InstanceIdMismatch, the nodeInstance provided does not match the instance of the node that was stopped.  \n  If the ErrorCode is NodeHasNotStoppedYet, there is a currently pending stop operation on this node.\n"
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: The operation timed out.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: An argument with a value of null was passed in.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.FaultManagementClient.StartNodeAsync(System.String,System.Numerics.BigInteger,System.String,System.Int32,System.Fabric.CompletionMode,System.TimeSpan,System.Threading.CancellationToken)
  commentId: M:System.Fabric.FabricClient.FaultManagementClient.StartNodeAsync(System.String,System.Numerics.BigInteger,System.String,System.Int32,System.Fabric.CompletionMode,System.TimeSpan,System.Threading.CancellationToken)
  id: StartNodeAsync(System.String,System.Numerics.BigInteger,System.String,System.Int32,System.Fabric.CompletionMode,System.TimeSpan,System.Threading.CancellationToken)
  parent: System.Fabric.FabricClient.FaultManagementClient
  langs:
  - csharp
  - vb
  name: StartNodeAsync(String, BigInteger, String, Int32, CompletionMode, TimeSpan, CancellationToken)
  nameWithType: FabricClient.FaultManagementClient.StartNodeAsync(String, BigInteger, String, Int32, CompletionMode, TimeSpan, CancellationToken)
  fullName: System.Fabric.FabricClient.FaultManagementClient.StartNodeAsync(System.String, System.Numerics.BigInteger, System.String, System.Int32, System.Fabric.CompletionMode, System.TimeSpan, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.FaultManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: StartNodeAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.FaultManagementClient.cs
    startLine: 407
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\nStarts a cluster node.\n"
  remarks: A cluster node is a process, not an virtual or physical machine.
  example: []
  syntax:
    content: public Task<StartNodeResult> StartNodeAsync(string nodeName, BigInteger nodeInstance, string ipAddressOrFQDN, int clusterConnectionPort, CompletionMode completionMode, TimeSpan operationTimeout, CancellationToken token)
    content.vb: Public Function StartNodeAsync(nodeName As String, nodeInstance As BigInteger, ipAddressOrFQDN As String, clusterConnectionPort As Integer, completionMode As CompletionMode, operationTimeout As TimeSpan, token As CancellationToken) As Task(Of StartNodeResult)
    parameters:
    - id: nodeName
      type: System.String
      description: The node name of the node to start.
    - id: nodeInstance
      type: System.Numerics.BigInteger
      description: The node instance ID of the node, before it was stopped.  If this is not specified, or is set to 0, this is ignored.  If this is set to -1, the system will internally determine this value.
    - id: ipAddressOrFQDN
      type: System.String
      description: The IP address or fully-qualified domain name (FQDN) of the target node.  If this parameter is specified, <em>clusterConnectionPort</em> also must be specified.  If neither is specified, the system internally determines these.
    - id: clusterConnectionPort
      type: System.Int32
      description: The cluster connection port of the target node.  If this parameter is specified, <em>ipAddressOrFQDN</em> also must be specified.  If neither is specified, the system internally determines these.
    - id: completionMode
      type: System.Fabric.CompletionMode
      description: If set to Verify, the system will check that the node started, and the API will not return until it has.  If set to DoNotVerify, the API returns once the node start has been initiated.
    - id: operationTimeout
      type: System.TimeSpan
      description: The timeout for this API call.
    - id: token
      type: System.Threading.CancellationToken
      description: The cancellationToken
    return:
      type: System.Threading.Tasks.Task{System.Fabric.Result.StartNodeResult}
      description: A task with information representing the target node.
  overload: System.Fabric.FabricClient.FaultManagementClient.StartNodeAsync*
  exceptions:
  - type: System.Fabric.FabricException
    commentId: T:System.Fabric.FabricException
    description: "The <xref href=\"System.Fabric.FabricException.ErrorCode\" data-throw-if-not-resolved=\"false\"></xref> property will indicate the reason.  \n  If the ErrorCode is InvalidArgument, nodeName or nodeInstance is invalid.  \n  If the errorCode is InstanceIdMismatch, the nodeInstance provided does not match the instance of the node that was stopped.  \n  If the ErrorCode is NodeHasNotStoppedYet, there is a currently pending stop operation on this node.\n"
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: The operation timed out.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: An argument with a value of null was passed in.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.FaultManagementClient.StopNodeAsync(System.String,System.Numerics.BigInteger,System.Fabric.CompletionMode)
  commentId: M:System.Fabric.FabricClient.FaultManagementClient.StopNodeAsync(System.String,System.Numerics.BigInteger,System.Fabric.CompletionMode)
  id: StopNodeAsync(System.String,System.Numerics.BigInteger,System.Fabric.CompletionMode)
  parent: System.Fabric.FabricClient.FaultManagementClient
  langs:
  - csharp
  - vb
  name: StopNodeAsync(String, BigInteger, CompletionMode)
  nameWithType: FabricClient.FaultManagementClient.StopNodeAsync(String, BigInteger, CompletionMode)
  fullName: System.Fabric.FabricClient.FaultManagementClient.StopNodeAsync(System.String, System.Numerics.BigInteger, System.Fabric.CompletionMode)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.FaultManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: StopNodeAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.FaultManagementClient.cs
    startLine: 457
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\nStops a cluster node.\n"
  remarks: A cluster node is a process, not an virtual or physical machine.
  example: []
  syntax:
    content: public Task<StopNodeResult> StopNodeAsync(string nodeName, BigInteger nodeInstance, CompletionMode completionMode)
    content.vb: Public Function StopNodeAsync(nodeName As String, nodeInstance As BigInteger, completionMode As CompletionMode) As Task(Of StopNodeResult)
    parameters:
    - id: nodeName
      type: System.String
      description: The node name of the node to stop.
    - id: nodeInstance
      type: System.Numerics.BigInteger
      description: The node instance ID of the node to stop.  If this is not specified, or is set to 0, this is ignored.  If this is set to -1, the system will internally determine this value.
    - id: completionMode
      type: System.Fabric.CompletionMode
      description: If set to Verify, the system will check that the node stopped, and the API will not return until it has.  If set to DoNotVerify, the API returns once the node stop has been initiated.
    return:
      type: System.Threading.Tasks.Task{System.Fabric.Result.StopNodeResult}
      description: A task with information representing the target node.
  overload: System.Fabric.FabricClient.FaultManagementClient.StopNodeAsync*
  exceptions:
  - type: System.Fabric.FabricException
    commentId: T:System.Fabric.FabricException
    description: "The <xref href=\"System.Fabric.FabricException.ErrorCode\" data-throw-if-not-resolved=\"false\"></xref> property will indicate the reason.  \n  If the ErrorCode is InvalidArgument, nodeName is invalid.  \n  If the ErrorCode is InstanceIdMismatch, the nodeInstance provided does not match the currently running instance.\n"
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: The operation timed out.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: An argument with a value of null was passed in.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.FaultManagementClient.StopNodeAsync(System.String,System.Numerics.BigInteger,System.Fabric.CompletionMode,System.Threading.CancellationToken)
  commentId: M:System.Fabric.FabricClient.FaultManagementClient.StopNodeAsync(System.String,System.Numerics.BigInteger,System.Fabric.CompletionMode,System.Threading.CancellationToken)
  id: StopNodeAsync(System.String,System.Numerics.BigInteger,System.Fabric.CompletionMode,System.Threading.CancellationToken)
  parent: System.Fabric.FabricClient.FaultManagementClient
  langs:
  - csharp
  - vb
  name: StopNodeAsync(String, BigInteger, CompletionMode, CancellationToken)
  nameWithType: FabricClient.FaultManagementClient.StopNodeAsync(String, BigInteger, CompletionMode, CancellationToken)
  fullName: System.Fabric.FabricClient.FaultManagementClient.StopNodeAsync(System.String, System.Numerics.BigInteger, System.Fabric.CompletionMode, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.FaultManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: StopNodeAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.FaultManagementClient.cs
    startLine: 480
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\nStops a cluster node.\n"
  remarks: A cluster node is a process, not an virtual or physical machine.
  example: []
  syntax:
    content: public Task<StopNodeResult> StopNodeAsync(string nodeName, BigInteger nodeInstance, CompletionMode completionMode, CancellationToken token)
    content.vb: Public Function StopNodeAsync(nodeName As String, nodeInstance As BigInteger, completionMode As CompletionMode, token As CancellationToken) As Task(Of StopNodeResult)
    parameters:
    - id: nodeName
      type: System.String
      description: The node name of the node to stop.
    - id: nodeInstance
      type: System.Numerics.BigInteger
      description: The node instance ID of the node to stop.  If this is not specified, or is set to 0, this is ignored.  If this is set to -1, the system will internally determine this value.
    - id: completionMode
      type: System.Fabric.CompletionMode
      description: If set to Verify, the system will check that the node stopped, and the API will not return until it has.  If set to DoNotVerify, the API returns once the node stop has been initiated.
    - id: token
      type: System.Threading.CancellationToken
      description: The cancellation token.
    return:
      type: System.Threading.Tasks.Task{System.Fabric.Result.StopNodeResult}
      description: A task with information representing the target node.
  overload: System.Fabric.FabricClient.FaultManagementClient.StopNodeAsync*
  exceptions:
  - type: System.Fabric.FabricException
    commentId: T:System.Fabric.FabricException
    description: "The <xref href=\"System.Fabric.FabricException.ErrorCode\" data-throw-if-not-resolved=\"false\"></xref> property will indicate the reason.  \n  If the ErrorCode is InvalidArgument, nodeName is invalid.  \n  If the ErrorCode is InstanceIdMismatch, the nodeInstance provided does not match the currently running instance.\n"
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: The operation timed out.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: An argument with a value of null was passed in.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.FaultManagementClient.StopNodeAsync(System.String,System.Numerics.BigInteger,System.Fabric.CompletionMode,System.TimeSpan,System.Threading.CancellationToken)
  commentId: M:System.Fabric.FabricClient.FaultManagementClient.StopNodeAsync(System.String,System.Numerics.BigInteger,System.Fabric.CompletionMode,System.TimeSpan,System.Threading.CancellationToken)
  id: StopNodeAsync(System.String,System.Numerics.BigInteger,System.Fabric.CompletionMode,System.TimeSpan,System.Threading.CancellationToken)
  parent: System.Fabric.FabricClient.FaultManagementClient
  langs:
  - csharp
  - vb
  name: StopNodeAsync(String, BigInteger, CompletionMode, TimeSpan, CancellationToken)
  nameWithType: FabricClient.FaultManagementClient.StopNodeAsync(String, BigInteger, CompletionMode, TimeSpan, CancellationToken)
  fullName: System.Fabric.FabricClient.FaultManagementClient.StopNodeAsync(System.String, System.Numerics.BigInteger, System.Fabric.CompletionMode, System.TimeSpan, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.FaultManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: StopNodeAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.FaultManagementClient.cs
    startLine: 505
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\nStops a cluster node.\n"
  remarks: A cluster node is a process, not an virtual or physical machine.
  example: []
  syntax:
    content: public Task<StopNodeResult> StopNodeAsync(string nodeName, BigInteger nodeInstance, CompletionMode completionMode, TimeSpan operationTimeout, CancellationToken token)
    content.vb: Public Function StopNodeAsync(nodeName As String, nodeInstance As BigInteger, completionMode As CompletionMode, operationTimeout As TimeSpan, token As CancellationToken) As Task(Of StopNodeResult)
    parameters:
    - id: nodeName
      type: System.String
      description: The node name of the node to stop.
    - id: nodeInstance
      type: System.Numerics.BigInteger
      description: The node instance ID of the node to stop.  If this is not specified, or is set to 0, this is ignored.  If this is set to -1, the system will internally determine this value.
    - id: completionMode
      type: System.Fabric.CompletionMode
      description: If set to Verify, the system will check that the node stopped, and the API will not return until it has.  If set to DoNotVerify, the API returns once the node stop has been initiated.
    - id: operationTimeout
      type: System.TimeSpan
      description: The timeout for this API call.
    - id: token
      type: System.Threading.CancellationToken
      description: The cancellation token.
    return:
      type: System.Threading.Tasks.Task{System.Fabric.Result.StopNodeResult}
      description: A task with information representing the target node
  overload: System.Fabric.FabricClient.FaultManagementClient.StopNodeAsync*
  exceptions:
  - type: System.Fabric.FabricException
    commentId: T:System.Fabric.FabricException
    description: "The <xref href=\"System.Fabric.FabricException.ErrorCode\" data-throw-if-not-resolved=\"false\"></xref> property will indicate the reason.  \n  If the ErrorCode is InvalidArgument, nodeName is invalid.  \n  If the ErrorCode is InstanceIdMismatch, the nodeInstance provided does not match the currently running instance.\n"
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: The operation timed out.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: An argument with a value of null was passed in.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.FaultManagementClient.RestartDeployedCodePackageAsync(System.Uri,System.Fabric.ReplicaSelector,System.Fabric.CompletionMode,System.Threading.CancellationToken)
  commentId: M:System.Fabric.FabricClient.FaultManagementClient.RestartDeployedCodePackageAsync(System.Uri,System.Fabric.ReplicaSelector,System.Fabric.CompletionMode,System.Threading.CancellationToken)
  id: RestartDeployedCodePackageAsync(System.Uri,System.Fabric.ReplicaSelector,System.Fabric.CompletionMode,System.Threading.CancellationToken)
  parent: System.Fabric.FabricClient.FaultManagementClient
  langs:
  - csharp
  - vb
  name: RestartDeployedCodePackageAsync(Uri, ReplicaSelector, CompletionMode, CancellationToken)
  nameWithType: FabricClient.FaultManagementClient.RestartDeployedCodePackageAsync(Uri, ReplicaSelector, CompletionMode, CancellationToken)
  fullName: System.Fabric.FabricClient.FaultManagementClient.RestartDeployedCodePackageAsync(System.Uri, System.Fabric.ReplicaSelector, System.Fabric.CompletionMode, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.FaultManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: RestartDeployedCodePackageAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.FaultManagementClient.cs
    startLine: 568
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\nThis API call restarts the code package which hosts the replica specified by the <xref href=\"System.Fabric.ReplicaSelector\" data-throw-if-not-resolved=\"false\"></xref> and \nbelongs to the specified application name.\n"
  remarks: "\nThe <xref href=\"System.Fabric.CompletionMode\" data-throw-if-not-resolved=\"false\"></xref> options are\nDoNotVerify - Return after triggering the restart of the code package\nVerify - Return after the restart completes i.e. the code package has come back up again.\n"
  example: []
  syntax:
    content: public Task<RestartDeployedCodePackageResult> RestartDeployedCodePackageAsync(Uri applicationName, ReplicaSelector replicaSelector, CompletionMode completionMode, CancellationToken token)
    content.vb: Public Function RestartDeployedCodePackageAsync(applicationName As Uri, replicaSelector As ReplicaSelector, completionMode As CompletionMode, token As CancellationToken) As Task(Of RestartDeployedCodePackageResult)
    parameters:
    - id: applicationName
      type: System.Uri
      description: The name of the application to which the code package belong.s
    - id: replicaSelector
      type: System.Fabric.ReplicaSelector
      description: The <xref href="System.Fabric.ReplicaSelector" data-throw-if-not-resolved="false"></xref> which identifies the replica whose host code package needs to be restarted.
    - id: completionMode
      type: System.Fabric.CompletionMode
      description: The <xref href="System.Fabric.CompletionMode" data-throw-if-not-resolved="false"></xref> that specifies whether to wait until the restart of the code package completes or not.
    - id: token
      type: System.Threading.CancellationToken
      description: Cancellation token
    return:
      type: System.Threading.Tasks.Task{System.Fabric.Result.RestartDeployedCodePackageResult}
      description: RestartDeployedCodePackageResult which gives information about the actual code package restarted and replica selected.
  overload: System.Fabric.FabricClient.FaultManagementClient.RestartDeployedCodePackageAsync*
  exceptions:
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: Action took more than its allocated time.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Any of the required arguments are null.
  - type: System.Fabric.FabricException
    commentId: T:System.Fabric.FabricException
    description: >-
      These are the fabric failures

      FabricErrorCode.ReplicaDoesNotExist - If the Selected replica was not found

      FabricErrorCode.PartitionNotFound - if the specified partition selected does not exist

      FabricErrorCode.CodePackageNotFound - If the selected code package was not found.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The code package was not in a valid running state.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.FaultManagementClient.RestartDeployedCodePackageAsync(System.Uri,System.Fabric.ReplicaSelector,System.Fabric.CompletionMode)
  commentId: M:System.Fabric.FabricClient.FaultManagementClient.RestartDeployedCodePackageAsync(System.Uri,System.Fabric.ReplicaSelector,System.Fabric.CompletionMode)
  id: RestartDeployedCodePackageAsync(System.Uri,System.Fabric.ReplicaSelector,System.Fabric.CompletionMode)
  parent: System.Fabric.FabricClient.FaultManagementClient
  langs:
  - csharp
  - vb
  name: RestartDeployedCodePackageAsync(Uri, ReplicaSelector, CompletionMode)
  nameWithType: FabricClient.FaultManagementClient.RestartDeployedCodePackageAsync(Uri, ReplicaSelector, CompletionMode)
  fullName: System.Fabric.FabricClient.FaultManagementClient.RestartDeployedCodePackageAsync(System.Uri, System.Fabric.ReplicaSelector, System.Fabric.CompletionMode)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.FaultManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: RestartDeployedCodePackageAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.FaultManagementClient.cs
    startLine: 597
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\nThis API call restarts the code package which hosts the replica specified by the <xref href=\"System.Fabric.ReplicaSelector\" data-throw-if-not-resolved=\"false\"></xref> and \nbelongs to the specified application name.\n"
  remarks: "\nThe <xref href=\"System.Fabric.CompletionMode\" data-throw-if-not-resolved=\"false\"></xref> options are\nDoNotVerify - Return after triggering the restart of the code package\nVerify - Return after the restart completes i.e. the code package has come back up again.\n"
  example: []
  syntax:
    content: public Task<RestartDeployedCodePackageResult> RestartDeployedCodePackageAsync(Uri applicationName, ReplicaSelector replicaSelector, CompletionMode completionMode)
    content.vb: Public Function RestartDeployedCodePackageAsync(applicationName As Uri, replicaSelector As ReplicaSelector, completionMode As CompletionMode) As Task(Of RestartDeployedCodePackageResult)
    parameters:
    - id: applicationName
      type: System.Uri
      description: The name of the application to which the code package belongs
    - id: replicaSelector
      type: System.Fabric.ReplicaSelector
      description: The <xref href="System.Fabric.ReplicaSelector" data-throw-if-not-resolved="false"></xref> which identifies the replica whose host code package needs to be restarted.
    - id: completionMode
      type: System.Fabric.CompletionMode
      description: The <xref href="System.Fabric.CompletionMode" data-throw-if-not-resolved="false"></xref> that specifies whether to wait until the restart of the code package completes or not.
    return:
      type: System.Threading.Tasks.Task{System.Fabric.Result.RestartDeployedCodePackageResult}
      description: RestartDeployedCodePackageResult which gives information about the actual code package restarted and replica selected.
  overload: System.Fabric.FabricClient.FaultManagementClient.RestartDeployedCodePackageAsync*
  exceptions:
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: Action took more than its allocated time.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Any of the required arguments are null.
  - type: System.Fabric.FabricException
    commentId: T:System.Fabric.FabricException
    description: >-
      These are the fabric failures

      FabricErrorCode.ReplicaDoesNotExist - If the Selected replica was not found

      FabricErrorCode.PartitionNotFound - if the specified partition selected does not exist

      FabricErrorCode.CodePackageNotFound - If the selected code package was not found
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The code package was not in a valid running state.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.FaultManagementClient.RestartDeployedCodePackageAsync(System.Uri,System.Fabric.ReplicaSelector,System.Fabric.CompletionMode,System.TimeSpan,System.Threading.CancellationToken)
  commentId: M:System.Fabric.FabricClient.FaultManagementClient.RestartDeployedCodePackageAsync(System.Uri,System.Fabric.ReplicaSelector,System.Fabric.CompletionMode,System.TimeSpan,System.Threading.CancellationToken)
  id: RestartDeployedCodePackageAsync(System.Uri,System.Fabric.ReplicaSelector,System.Fabric.CompletionMode,System.TimeSpan,System.Threading.CancellationToken)
  parent: System.Fabric.FabricClient.FaultManagementClient
  langs:
  - csharp
  - vb
  name: RestartDeployedCodePackageAsync(Uri, ReplicaSelector, CompletionMode, TimeSpan, CancellationToken)
  nameWithType: FabricClient.FaultManagementClient.RestartDeployedCodePackageAsync(Uri, ReplicaSelector, CompletionMode, TimeSpan, CancellationToken)
  fullName: System.Fabric.FabricClient.FaultManagementClient.RestartDeployedCodePackageAsync(System.Uri, System.Fabric.ReplicaSelector, System.Fabric.CompletionMode, System.TimeSpan, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.FaultManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: RestartDeployedCodePackageAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.FaultManagementClient.cs
    startLine: 627
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\nThis API call restarts the code package which hosts the replica specified by the <xref href=\"System.Fabric.ReplicaSelector\" data-throw-if-not-resolved=\"false\"></xref> and \nbelongs to the specified application name.\n"
  remarks: "\nThe <xref href=\"System.Fabric.CompletionMode\" data-throw-if-not-resolved=\"false\"></xref> options are\nDoNotVerify - Return after triggering the restart of the code package\nVerify - Return after the restart completes i.e. the code package has come back up again.\n"
  example: []
  syntax:
    content: public Task<RestartDeployedCodePackageResult> RestartDeployedCodePackageAsync(Uri applicationName, ReplicaSelector replicaSelector, CompletionMode completionMode, TimeSpan operationTimeout, CancellationToken token)
    content.vb: Public Function RestartDeployedCodePackageAsync(applicationName As Uri, replicaSelector As ReplicaSelector, completionMode As CompletionMode, operationTimeout As TimeSpan, token As CancellationToken) As Task(Of RestartDeployedCodePackageResult)
    parameters:
    - id: applicationName
      type: System.Uri
      description: The name of the application to which the code package belongs
    - id: replicaSelector
      type: System.Fabric.ReplicaSelector
      description: The <xref href="System.Fabric.ReplicaSelector" data-throw-if-not-resolved="false"></xref> which identifies the replica whose host code package needs to be restarted.
    - id: completionMode
      type: System.Fabric.CompletionMode
      description: The <xref href="System.Fabric.CompletionMode" data-throw-if-not-resolved="false"></xref> that specifies whether to wait until the restart of the code package completes or not.n
    - id: operationTimeout
      type: System.TimeSpan
      description: The overall timeout for the operation including the timeout to wait for code package to restart if <xref href="System.Fabric.CompletionMode" data-throw-if-not-resolved="false"></xref> is Verify
    - id: token
      type: System.Threading.CancellationToken
      description: Cancellation token.
    return:
      type: System.Threading.Tasks.Task{System.Fabric.Result.RestartDeployedCodePackageResult}
      description: RestartDeployedCodePackageResult which gives information about the actual code package restarted and replica selected.
  overload: System.Fabric.FabricClient.FaultManagementClient.RestartDeployedCodePackageAsync*
  exceptions:
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: Action took more than its allocated time.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Any of the required arguments are null.
  - type: System.Fabric.FabricException
    commentId: T:System.Fabric.FabricException
    description: >-
      These are the fabric failures

      FabricErrorCode.ReplicaDoesNotExist - If the Selected replica was not found

      FabricErrorCode.PartitionNotFound - if the specified partition selected does not exist

      FabricErrorCode.CodePackageNotFound - If the selected code package was not found
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The code package was not in a valid running state.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.FaultManagementClient.RestartDeployedCodePackageAsync(System.String,System.Uri,System.String,System.String,System.Int64,System.Fabric.CompletionMode,System.Threading.CancellationToken)
  commentId: M:System.Fabric.FabricClient.FaultManagementClient.RestartDeployedCodePackageAsync(System.String,System.Uri,System.String,System.String,System.Int64,System.Fabric.CompletionMode,System.Threading.CancellationToken)
  id: RestartDeployedCodePackageAsync(System.String,System.Uri,System.String,System.String,System.Int64,System.Fabric.CompletionMode,System.Threading.CancellationToken)
  parent: System.Fabric.FabricClient.FaultManagementClient
  langs:
  - csharp
  - vb
  name: RestartDeployedCodePackageAsync(String, Uri, String, String, Int64, CompletionMode, CancellationToken)
  nameWithType: FabricClient.FaultManagementClient.RestartDeployedCodePackageAsync(String, Uri, String, String, Int64, CompletionMode, CancellationToken)
  fullName: System.Fabric.FabricClient.FaultManagementClient.RestartDeployedCodePackageAsync(System.String, System.Uri, System.String, System.String, System.Int64, System.Fabric.CompletionMode, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.FaultManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: RestartDeployedCodePackageAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.FaultManagementClient.cs
    startLine: 668
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\nThis API call restarts the code package as specified by the input parameters.\n"
  remarks: "\nThe <xref href=\"System.Fabric.CompletionMode\" data-throw-if-not-resolved=\"false\"></xref> options are\nDoNotVerify - Return after triggering the restart of the code package\nVerify - Return after the restart completes i.e. the code package has come back up again.\n"
  example: []
  syntax:
    content: public Task<RestartDeployedCodePackageResult> RestartDeployedCodePackageAsync(string nodeName, Uri applicationName, string serviceManifestName, string codePackageName, long codePackageInstanceId, CompletionMode completionMode, CancellationToken token)
    content.vb: Public Function RestartDeployedCodePackageAsync(nodeName As String, applicationName As Uri, serviceManifestName As String, codePackageName As String, codePackageInstanceId As Long, completionMode As CompletionMode, token As CancellationToken) As Task(Of RestartDeployedCodePackageResult)
    parameters:
    - id: nodeName
      type: System.String
      description: The node on which the code package is hosted
    - id: applicationName
      type: System.Uri
      description: The name of the application to which the code package belongs
    - id: serviceManifestName
      type: System.String
      description: The name of the service manifest where the code package is defined
    - id: codePackageName
      type: System.String
      description: The name of the code package to be restarted
    - id: codePackageInstanceId
      type: System.Int64
      description: >-
        The code package instance id for the running code package which if specified and does not match then the restart is not processed

        If the value is 0 then the comparison is skipped
    - id: completionMode
      type: System.Fabric.CompletionMode
      description: The <xref href="System.Fabric.CompletionMode" data-throw-if-not-resolved="false"></xref> that specifies whether to wait until the restart of the code package completes or not.
    - id: token
      type: System.Threading.CancellationToken
      description: Cancellation token
    return:
      type: System.Threading.Tasks.Task{System.Fabric.Result.RestartDeployedCodePackageResult}
      description: RestartDeployedCodePackageResult which gives information about the actual code package restarted. SelectedReplica is None in this overload.
  overload: System.Fabric.FabricClient.FaultManagementClient.RestartDeployedCodePackageAsync*
  exceptions:
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: Action took more than its allocated time.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Any of the required arguments are null.
  - type: System.Fabric.FabricException
    commentId: T:System.Fabric.FabricException
    description: >-
      These are the fabric failures

      FabricErrorCode.CodePackageNotFound - If the selected code package was not found

      FabricErrorCode.InstanceIdMismatch - If the specified instance id did not match
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The code package was not in a valid running state.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.FaultManagementClient.RestartDeployedCodePackageAsync(System.String,System.Uri,System.String,System.String,System.Int64,System.Fabric.CompletionMode)
  commentId: M:System.Fabric.FabricClient.FaultManagementClient.RestartDeployedCodePackageAsync(System.String,System.Uri,System.String,System.String,System.Int64,System.Fabric.CompletionMode)
  id: RestartDeployedCodePackageAsync(System.String,System.Uri,System.String,System.String,System.Int64,System.Fabric.CompletionMode)
  parent: System.Fabric.FabricClient.FaultManagementClient
  langs:
  - csharp
  - vb
  name: RestartDeployedCodePackageAsync(String, Uri, String, String, Int64, CompletionMode)
  nameWithType: FabricClient.FaultManagementClient.RestartDeployedCodePackageAsync(String, Uri, String, String, Int64, CompletionMode)
  fullName: System.Fabric.FabricClient.FaultManagementClient.RestartDeployedCodePackageAsync(System.String, System.Uri, System.String, System.String, System.Int64, System.Fabric.CompletionMode)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.FaultManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: RestartDeployedCodePackageAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.FaultManagementClient.cs
    startLine: 702
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\nThis API call restarts the code package as specified by the input parameters.\n"
  remarks: "\nThe <xref href=\"System.Fabric.CompletionMode\" data-throw-if-not-resolved=\"false\"></xref> options are\nDoNotVerify - Return after triggering the restart of the code package\nVerify - Return after the restart completes i.e. the code package has come back up again.\n"
  example: []
  syntax:
    content: public Task<RestartDeployedCodePackageResult> RestartDeployedCodePackageAsync(string nodeName, Uri applicationName, string serviceManifestName, string codePackageName, long codePackageInstanceId, CompletionMode completionMode)
    content.vb: Public Function RestartDeployedCodePackageAsync(nodeName As String, applicationName As Uri, serviceManifestName As String, codePackageName As String, codePackageInstanceId As Long, completionMode As CompletionMode) As Task(Of RestartDeployedCodePackageResult)
    parameters:
    - id: nodeName
      type: System.String
      description: The node on which the code package is hosted.
    - id: applicationName
      type: System.Uri
      description: The name of the application to which the code package belongs.
    - id: serviceManifestName
      type: System.String
      description: The name of the service manifest where the code package is defined.
    - id: codePackageName
      type: System.String
      description: The name of the code package to be restarted
    - id: codePackageInstanceId
      type: System.Int64
      description: >-
        The code package instance id for the running code package which if specified and does not match then the restart is not processed

        If the value is 0 then the comparison is skipped.
    - id: completionMode
      type: System.Fabric.CompletionMode
      description: The <xref href="System.Fabric.CompletionMode" data-throw-if-not-resolved="false"></xref> that specifies whether to wait until the restart of the code package completes or not.
    return:
      type: System.Threading.Tasks.Task{System.Fabric.Result.RestartDeployedCodePackageResult}
      description: RestartDeployedCodePackageResult which gives information about the actual code package restarted. SelectedReplica is None in this overload.
  overload: System.Fabric.FabricClient.FaultManagementClient.RestartDeployedCodePackageAsync*
  exceptions:
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: Action took more than its allocated time.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Any of the required arguments are null.
  - type: System.Fabric.FabricException
    commentId: T:System.Fabric.FabricException
    description: >-
      These are the fabric failures

      FabricErrorCode.CodePackageNotFound - If the selected code package was not found

      FabricErrorCode.InstanceIdMismatch - If the specified instance id did not match
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The code package was not in a valid running state.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.FaultManagementClient.RestartDeployedCodePackageAsync(System.String,System.Uri,System.String,System.String,System.Int64,System.Fabric.CompletionMode,System.TimeSpan,System.Threading.CancellationToken)
  commentId: M:System.Fabric.FabricClient.FaultManagementClient.RestartDeployedCodePackageAsync(System.String,System.Uri,System.String,System.String,System.Int64,System.Fabric.CompletionMode,System.TimeSpan,System.Threading.CancellationToken)
  id: RestartDeployedCodePackageAsync(System.String,System.Uri,System.String,System.String,System.Int64,System.Fabric.CompletionMode,System.TimeSpan,System.Threading.CancellationToken)
  parent: System.Fabric.FabricClient.FaultManagementClient
  langs:
  - csharp
  - vb
  name: RestartDeployedCodePackageAsync(String, Uri, String, String, Int64, CompletionMode, TimeSpan, CancellationToken)
  nameWithType: FabricClient.FaultManagementClient.RestartDeployedCodePackageAsync(String, Uri, String, String, Int64, CompletionMode, TimeSpan, CancellationToken)
  fullName: System.Fabric.FabricClient.FaultManagementClient.RestartDeployedCodePackageAsync(System.String, System.Uri, System.String, System.String, System.Int64, System.Fabric.CompletionMode, System.TimeSpan, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.FaultManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: RestartDeployedCodePackageAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.FaultManagementClient.cs
    startLine: 737
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\nThis API call restarts the code package as specified by the input parameters.\n"
  remarks: "\nThe <xref href=\"System.Fabric.CompletionMode\" data-throw-if-not-resolved=\"false\"></xref> options are\nDoNotVerify - Return after triggering the restart of the code package\nVerify - Return after the restart completes i.e. the code package has come back up again.\n"
  example: []
  syntax:
    content: public Task<RestartDeployedCodePackageResult> RestartDeployedCodePackageAsync(string nodeName, Uri applicationName, string serviceManifestName, string codePackageName, long codePackageInstanceId, CompletionMode completionMode, TimeSpan operationTimeout, CancellationToken token)
    content.vb: Public Function RestartDeployedCodePackageAsync(nodeName As String, applicationName As Uri, serviceManifestName As String, codePackageName As String, codePackageInstanceId As Long, completionMode As CompletionMode, operationTimeout As TimeSpan, token As CancellationToken) As Task(Of RestartDeployedCodePackageResult)
    parameters:
    - id: nodeName
      type: System.String
      description: The node on which the code package is hosted.
    - id: applicationName
      type: System.Uri
      description: The name of the application to which the code package belongs.
    - id: serviceManifestName
      type: System.String
      description: The name of the service manifest where the code package is defined.
    - id: codePackageName
      type: System.String
      description: The name of the code package to be restarted
    - id: codePackageInstanceId
      type: System.Int64
      description: >-
        The code package instance id for the running code package which if specified and does not match then the restart is not processed

        If the value is 0 then the comparison is skipped.
    - id: completionMode
      type: System.Fabric.CompletionMode
      description: The <xref href="System.Fabric.CompletionMode" data-throw-if-not-resolved="false"></xref> that specifies whether to wait until the restart of the code package completes or not.
    - id: operationTimeout
      type: System.TimeSpan
      description: The overall timeout for the operation including the timeout to wait for code package to restart if <xref href="System.Fabric.CompletionMode" data-throw-if-not-resolved="false"></xref> is Verify
    - id: token
      type: System.Threading.CancellationToken
      description: Cancellation token
    return:
      type: System.Threading.Tasks.Task{System.Fabric.Result.RestartDeployedCodePackageResult}
      description: RestartDeployedCodePackageResult which gives information about the actual code package restarted. SelectedReplica is None in this overload.
  overload: System.Fabric.FabricClient.FaultManagementClient.RestartDeployedCodePackageAsync*
  exceptions:
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: Action took more than its allocated time.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Any of the required arguments are null.
  - type: System.Fabric.FabricException
    commentId: T:System.Fabric.FabricException
    description: >-
      These are the fabric failures

      FabricErrorCode.CodePackageNotFound - If the selected code package was not found

      FabricErrorCode.InstanceIdMismatch - If the specified instance id did not match
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The code package was not in a valid running state.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.FaultManagementClient.RemoveReplicaAsync(System.Fabric.ReplicaSelector,System.Fabric.CompletionMode,System.Boolean,System.Threading.CancellationToken)
  commentId: M:System.Fabric.FabricClient.FaultManagementClient.RemoveReplicaAsync(System.Fabric.ReplicaSelector,System.Fabric.CompletionMode,System.Boolean,System.Threading.CancellationToken)
  id: RemoveReplicaAsync(System.Fabric.ReplicaSelector,System.Fabric.CompletionMode,System.Boolean,System.Threading.CancellationToken)
  parent: System.Fabric.FabricClient.FaultManagementClient
  langs:
  - csharp
  - vb
  name: RemoveReplicaAsync(ReplicaSelector, CompletionMode, Boolean, CancellationToken)
  nameWithType: FabricClient.FaultManagementClient.RemoveReplicaAsync(ReplicaSelector, CompletionMode, Boolean, CancellationToken)
  fullName: System.Fabric.FabricClient.FaultManagementClient.RemoveReplicaAsync(System.Fabric.ReplicaSelector, System.Fabric.CompletionMode, System.Boolean, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.FaultManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: RemoveReplicaAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.FaultManagementClient.cs
    startLine: 792
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\nThis API will remove the replica (equivalent of ReportFault - Permanent) specified by the passed in <xref href=\"System.Fabric.ReplicaSelector\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public Task<RemoveReplicaResult> RemoveReplicaAsync(ReplicaSelector replicaSelector, CompletionMode completionMode, bool forceRemove, CancellationToken token)
    content.vb: Public Function RemoveReplicaAsync(replicaSelector As ReplicaSelector, completionMode As CompletionMode, forceRemove As Boolean, token As CancellationToken) As Task(Of RemoveReplicaResult)
    parameters:
    - id: replicaSelector
      type: System.Fabric.ReplicaSelector
      description: The <xref href="System.Fabric.ReplicaSelector" data-throw-if-not-resolved="false"></xref> which indicates the replica to be removed.
    - id: completionMode
      type: System.Fabric.CompletionMode
      description: "The <xref href=\"System.Fabric.CompletionMode\" data-throw-if-not-resolved=\"false\"></xref> that specifies whether to wait until the remove of the replica is complete or not \nDoNotVerify - Return after triggering the remove of the replica\nVerify - Return after the remove completes i.e. the replica is out of the FM view"
    - id: forceRemove
      type: System.Boolean
      description: Will forcefully remove the replica
    - id: token
      type: System.Threading.CancellationToken
      description: Cancellation token
    return:
      type: System.Threading.Tasks.Task{System.Fabric.Result.RemoveReplicaResult}
      description: RemoveReplicaResult which gives information about the actual selected replica.
  overload: System.Fabric.FabricClient.FaultManagementClient.RemoveReplicaAsync*
  exceptions:
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: Action took more than its allocated time.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Any of the required arguments are null.
  - type: System.Fabric.FabricException
    commentId: T:System.Fabric.FabricException
    description: >-
      These are the fabric failures

      FabricErrorCode.ReplicaDoesNotExist - If the Selected replica was not found

      FabricErrorCode.PartitionNotFound - if the specified partition selected does not exist.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.FaultManagementClient.RemoveReplicaAsync(System.Fabric.ReplicaSelector,System.Fabric.CompletionMode,System.Boolean)
  commentId: M:System.Fabric.FabricClient.FaultManagementClient.RemoveReplicaAsync(System.Fabric.ReplicaSelector,System.Fabric.CompletionMode,System.Boolean)
  id: RemoveReplicaAsync(System.Fabric.ReplicaSelector,System.Fabric.CompletionMode,System.Boolean)
  parent: System.Fabric.FabricClient.FaultManagementClient
  langs:
  - csharp
  - vb
  name: RemoveReplicaAsync(ReplicaSelector, CompletionMode, Boolean)
  nameWithType: FabricClient.FaultManagementClient.RemoveReplicaAsync(ReplicaSelector, CompletionMode, Boolean)
  fullName: System.Fabric.FabricClient.FaultManagementClient.RemoveReplicaAsync(System.Fabric.ReplicaSelector, System.Fabric.CompletionMode, System.Boolean)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.FaultManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: RemoveReplicaAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.FaultManagementClient.cs
    startLine: 815
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\nThis API will remove the replica (equivalent of ReportFault - Permanent) specified by the passed in <xref href=\"System.Fabric.ReplicaSelector\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public Task<RemoveReplicaResult> RemoveReplicaAsync(ReplicaSelector replicaSelector, CompletionMode completionMode, bool forceRemove)
    content.vb: Public Function RemoveReplicaAsync(replicaSelector As ReplicaSelector, completionMode As CompletionMode, forceRemove As Boolean) As Task(Of RemoveReplicaResult)
    parameters:
    - id: replicaSelector
      type: System.Fabric.ReplicaSelector
      description: The <xref href="System.Fabric.ReplicaSelector" data-throw-if-not-resolved="false"></xref> which indicates the replica to be removed.
    - id: completionMode
      type: System.Fabric.CompletionMode
      description: "The <xref href=\"System.Fabric.CompletionMode\" data-throw-if-not-resolved=\"false\"></xref> that specifies whether to wait until the remove of the replica is complete or not \nDoNotVerify - Return after triggering the remove of the replica\nVerify - Return after the remove completes i.e. the replica is out of the FM vie.w"
    - id: forceRemove
      type: System.Boolean
      description: Will forcefully remove the replica
    return:
      type: System.Threading.Tasks.Task{System.Fabric.Result.RemoveReplicaResult}
      description: RemoveReplicaResult which gives information about the actual selected replica.
  overload: System.Fabric.FabricClient.FaultManagementClient.RemoveReplicaAsync*
  exceptions:
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: Action took more than its allocated time.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Any of the required arguments are null.
  - type: System.Fabric.FabricException
    commentId: T:System.Fabric.FabricException
    description: >-
      These are the fabric failures

      FabricErrorCode.ReplicaDoesNotExist - If the Selected replica was not found

      FabricErrorCode.PartitionNotFound - if the specified partition selected does not exist.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.FaultManagementClient.RemoveReplicaAsync(System.Fabric.ReplicaSelector,System.Fabric.CompletionMode,System.Boolean,System.TimeSpan,System.Threading.CancellationToken)
  commentId: M:System.Fabric.FabricClient.FaultManagementClient.RemoveReplicaAsync(System.Fabric.ReplicaSelector,System.Fabric.CompletionMode,System.Boolean,System.TimeSpan,System.Threading.CancellationToken)
  id: RemoveReplicaAsync(System.Fabric.ReplicaSelector,System.Fabric.CompletionMode,System.Boolean,System.TimeSpan,System.Threading.CancellationToken)
  parent: System.Fabric.FabricClient.FaultManagementClient
  langs:
  - csharp
  - vb
  name: RemoveReplicaAsync(ReplicaSelector, CompletionMode, Boolean, TimeSpan, CancellationToken)
  nameWithType: FabricClient.FaultManagementClient.RemoveReplicaAsync(ReplicaSelector, CompletionMode, Boolean, TimeSpan, CancellationToken)
  fullName: System.Fabric.FabricClient.FaultManagementClient.RemoveReplicaAsync(System.Fabric.ReplicaSelector, System.Fabric.CompletionMode, System.Boolean, System.TimeSpan, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.FaultManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: RemoveReplicaAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.FaultManagementClient.cs
    startLine: 839
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\nThis API will remove the replica (equivalent of ReportFault - Permanent) specified by the passed in <xref href=\"System.Fabric.ReplicaSelector\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public Task<RemoveReplicaResult> RemoveReplicaAsync(ReplicaSelector replicaSelector, CompletionMode completionMode, bool forceRemove, TimeSpan operationTimeout, CancellationToken token)
    content.vb: Public Function RemoveReplicaAsync(replicaSelector As ReplicaSelector, completionMode As CompletionMode, forceRemove As Boolean, operationTimeout As TimeSpan, token As CancellationToken) As Task(Of RemoveReplicaResult)
    parameters:
    - id: replicaSelector
      type: System.Fabric.ReplicaSelector
      description: The <xref href="System.Fabric.ReplicaSelector" data-throw-if-not-resolved="false"></xref> which indicates the replica to be removed.
    - id: completionMode
      type: System.Fabric.CompletionMode
      description: "The <xref href=\"System.Fabric.CompletionMode\" data-throw-if-not-resolved=\"false\"></xref> that specifies whether to wait until the remove of the replica is complete or not \nDoNotVerify - Return after triggering the remove of the replica\nVerify - Return after the remove completes i.e. the replica is out of the FM view."
    - id: forceRemove
      type: System.Boolean
      description: Will forcefully remove the replica.
    - id: operationTimeout
      type: System.TimeSpan
      description: The overall timeout for the operation including the timeout to wait for replica to be removed if <xref href="System.Fabric.CompletionMode" data-throw-if-not-resolved="false"></xref> is Verify
    - id: token
      type: System.Threading.CancellationToken
      description: Cancellation token
    return:
      type: System.Threading.Tasks.Task{System.Fabric.Result.RemoveReplicaResult}
      description: RemoveReplicaResult which gives information about the actual selected replica.
  overload: System.Fabric.FabricClient.FaultManagementClient.RemoveReplicaAsync*
  exceptions:
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: Action took more than its allocated time.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Any of the required arguments are null.
  - type: System.Fabric.FabricException
    commentId: T:System.Fabric.FabricException
    description: >-
      These are the fabric failures

      FabricErrorCode.ReplicaDoesNotExist - If the Selected replica was not found

      FabricErrorCode.PartitionNotFound - if the specified partition selected does not exist.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.FaultManagementClient.RemoveReplicaAsync(System.String,System.Guid,System.Int64,System.Fabric.CompletionMode,System.Boolean,System.Threading.CancellationToken)
  commentId: M:System.Fabric.FabricClient.FaultManagementClient.RemoveReplicaAsync(System.String,System.Guid,System.Int64,System.Fabric.CompletionMode,System.Boolean,System.Threading.CancellationToken)
  id: RemoveReplicaAsync(System.String,System.Guid,System.Int64,System.Fabric.CompletionMode,System.Boolean,System.Threading.CancellationToken)
  parent: System.Fabric.FabricClient.FaultManagementClient
  langs:
  - csharp
  - vb
  name: RemoveReplicaAsync(String, Guid, Int64, CompletionMode, Boolean, CancellationToken)
  nameWithType: FabricClient.FaultManagementClient.RemoveReplicaAsync(String, Guid, Int64, CompletionMode, Boolean, CancellationToken)
  fullName: System.Fabric.FabricClient.FaultManagementClient.RemoveReplicaAsync(System.String, System.Guid, System.Int64, System.Fabric.CompletionMode, System.Boolean, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.FaultManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: RemoveReplicaAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.FaultManagementClient.cs
    startLine: 875
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\nThis API will remove the replica (equivalent of ReportFault - Permanent) specified by the passed in <xref href=\"System.Fabric.ReplicaSelector\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public Task<RemoveReplicaResult> RemoveReplicaAsync(string nodeName, Guid partitionId, long replicaId, CompletionMode completionMode, bool forceRemove, CancellationToken token)
    content.vb: Public Function RemoveReplicaAsync(nodeName As String, partitionId As Guid, replicaId As Long, completionMode As CompletionMode, forceRemove As Boolean, token As CancellationToken) As Task(Of RemoveReplicaResult)
    parameters:
    - id: nodeName
      type: System.String
      description: 'Node name where replica is to be moved <xref href="System.Fabric.ReplicaSelector" data-throw-if-not-resolved="false"></xref> '
    - id: partitionId
      type: System.Guid
      description: 'Partition Id where the replica needs to be removed '
    - id: replicaId
      type: System.Int64
      description: 'Replica Id that needs to be removed '
    - id: completionMode
      type: System.Fabric.CompletionMode
      description: "The <xref href=\"System.Fabric.CompletionMode\" data-throw-if-not-resolved=\"false\"></xref> that specifies whether to wait until the remove of the replica is complete or not \nDoNotVerify - Return after triggering the remove of the replica\nVerify - Return after the remove completes i.e. the replica is out of the FM view."
    - id: forceRemove
      type: System.Boolean
      description: Will forcefully remove the replica
    - id: token
      type: System.Threading.CancellationToken
      description: Cancellation token
    return:
      type: System.Threading.Tasks.Task{System.Fabric.Result.RemoveReplicaResult}
      description: RemoveReplicaResult which gives information about the actual selected replica.
  overload: System.Fabric.FabricClient.FaultManagementClient.RemoveReplicaAsync*
  exceptions:
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: Action took more than its allocated time.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Any of the required arguments are null.
  - type: System.Fabric.FabricException
    commentId: T:System.Fabric.FabricException
    description: >-
      These are the fabric failures

      FabricErrorCode.ReplicaDoesNotExist - If the Selected replica was not found

      FabricErrorCode.PartitionNotFound - if the specified partition selected does not exist.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.FaultManagementClient.RemoveReplicaAsync(System.String,System.Guid,System.Int64,System.Fabric.CompletionMode,System.Boolean)
  commentId: M:System.Fabric.FabricClient.FaultManagementClient.RemoveReplicaAsync(System.String,System.Guid,System.Int64,System.Fabric.CompletionMode,System.Boolean)
  id: RemoveReplicaAsync(System.String,System.Guid,System.Int64,System.Fabric.CompletionMode,System.Boolean)
  parent: System.Fabric.FabricClient.FaultManagementClient
  langs:
  - csharp
  - vb
  name: RemoveReplicaAsync(String, Guid, Int64, CompletionMode, Boolean)
  nameWithType: FabricClient.FaultManagementClient.RemoveReplicaAsync(String, Guid, Int64, CompletionMode, Boolean)
  fullName: System.Fabric.FabricClient.FaultManagementClient.RemoveReplicaAsync(System.String, System.Guid, System.Int64, System.Fabric.CompletionMode, System.Boolean)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.FaultManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: RemoveReplicaAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.FaultManagementClient.cs
    startLine: 902
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\nThis API will remove the replica (equivalent of ReportFault - Permanent) specified by the passed in <xref href=\"System.Fabric.ReplicaSelector\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public Task<RemoveReplicaResult> RemoveReplicaAsync(string nodeName, Guid partitionId, long replicaId, CompletionMode completionMode, bool forceRemove)
    content.vb: Public Function RemoveReplicaAsync(nodeName As String, partitionId As Guid, replicaId As Long, completionMode As CompletionMode, forceRemove As Boolean) As Task(Of RemoveReplicaResult)
    parameters:
    - id: nodeName
      type: System.String
      description: 'Node name where replica is to be moved <xref href="System.Fabric.ReplicaSelector" data-throw-if-not-resolved="false"></xref> '
    - id: partitionId
      type: System.Guid
      description: 'Partition Id where the replica needs to be removed '
    - id: replicaId
      type: System.Int64
      description: 'Replica Id that needs to be removed '
    - id: completionMode
      type: System.Fabric.CompletionMode
      description: "The <xref href=\"System.Fabric.CompletionMode\" data-throw-if-not-resolved=\"false\"></xref> that specifies whether to wait until the restart of the replica is complete or not \nDoNotVerify - Return after triggering the restart of the replica\nVerify - Return after the remove completes"
    - id: forceRemove
      type: System.Boolean
      description: Will forcefully remove the replica
    return:
      type: System.Threading.Tasks.Task{System.Fabric.Result.RemoveReplicaResult}
      description: RemoveReplicaResult which gives information about the actual selected replica.
  overload: System.Fabric.FabricClient.FaultManagementClient.RemoveReplicaAsync*
  exceptions:
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: Action took more than its allocated time.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Any of the required arguments are null.
  - type: System.Fabric.FabricException
    commentId: T:System.Fabric.FabricException
    description: >-
      These are the fabric failures

      FabricErrorCode.ReplicaDoesNotExist - If the Selected replica was not found

      FabricErrorCode.PartitionNotFound - if the specified partition selected does not exist.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.FaultManagementClient.RemoveReplicaAsync(System.String,System.Guid,System.Int64,System.Fabric.CompletionMode,System.Boolean,System.Double,System.Threading.CancellationToken)
  commentId: M:System.Fabric.FabricClient.FaultManagementClient.RemoveReplicaAsync(System.String,System.Guid,System.Int64,System.Fabric.CompletionMode,System.Boolean,System.Double,System.Threading.CancellationToken)
  id: RemoveReplicaAsync(System.String,System.Guid,System.Int64,System.Fabric.CompletionMode,System.Boolean,System.Double,System.Threading.CancellationToken)
  parent: System.Fabric.FabricClient.FaultManagementClient
  langs:
  - csharp
  - vb
  name: RemoveReplicaAsync(String, Guid, Int64, CompletionMode, Boolean, Double, CancellationToken)
  nameWithType: FabricClient.FaultManagementClient.RemoveReplicaAsync(String, Guid, Int64, CompletionMode, Boolean, Double, CancellationToken)
  fullName: System.Fabric.FabricClient.FaultManagementClient.RemoveReplicaAsync(System.String, System.Guid, System.Int64, System.Fabric.CompletionMode, System.Boolean, System.Double, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.FaultManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: RemoveReplicaAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.FaultManagementClient.cs
    startLine: 930
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\nThis API will remove the replica (equivalent of ReportFault - Permanent) specified by the passed in <xref href=\"System.Fabric.ReplicaSelector\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public Task<RemoveReplicaResult> RemoveReplicaAsync(string nodeName, Guid partitionId, long replicaId, CompletionMode completionMode, bool forceRemove, double operationTimeoutSec, CancellationToken token)
    content.vb: Public Function RemoveReplicaAsync(nodeName As String, partitionId As Guid, replicaId As Long, completionMode As CompletionMode, forceRemove As Boolean, operationTimeoutSec As Double, token As CancellationToken) As Task(Of RemoveReplicaResult)
    parameters:
    - id: nodeName
      type: System.String
      description: 'Node name where replica is to be moved <xref href="System.Fabric.ReplicaSelector" data-throw-if-not-resolved="false"></xref> '
    - id: partitionId
      type: System.Guid
      description: 'Partition Id where the replica needs to be removed '
    - id: replicaId
      type: System.Int64
      description: 'Replica Id that needs to be removed '
    - id: completionMode
      type: System.Fabric.CompletionMode
      description: "The <xref href=\"System.Fabric.CompletionMode\" data-throw-if-not-resolved=\"false\"></xref> that specifies whether to wait until the restart of the replica is complete or not \nDoNotVerify - Return after triggering the restart of the replica\nVerify - Return after the remove completes"
    - id: forceRemove
      type: System.Boolean
      description: Will forcefully remove the replica.
    - id: operationTimeoutSec
      type: System.Double
      description: The overall timeout in seconds for the operation, including the timeout to wait for replica to be removed if <xref href="System.Fabric.CompletionMode" data-throw-if-not-resolved="false"></xref> is Verify
    - id: token
      type: System.Threading.CancellationToken
      description: Cancellation token
    return:
      type: System.Threading.Tasks.Task{System.Fabric.Result.RemoveReplicaResult}
      description: RemoveReplicaResult which gives information about the actual selected replica.
  overload: System.Fabric.FabricClient.FaultManagementClient.RemoveReplicaAsync*
  exceptions:
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: Action took more than its allocated time.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Any of the required arguments are null.
  - type: System.Fabric.FabricException
    commentId: T:System.Fabric.FabricException
    description: >-
      These are the fabric failures

      FabricErrorCode.ReplicaDoesNotExist - If the Selected replica was not found

      FabricErrorCode.PartitionNotFound - if the specified partition selected does not exist.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.FaultManagementClient.RestartReplicaAsync(System.Fabric.ReplicaSelector,System.Fabric.CompletionMode,System.Threading.CancellationToken)
  commentId: M:System.Fabric.FabricClient.FaultManagementClient.RestartReplicaAsync(System.Fabric.ReplicaSelector,System.Fabric.CompletionMode,System.Threading.CancellationToken)
  id: RestartReplicaAsync(System.Fabric.ReplicaSelector,System.Fabric.CompletionMode,System.Threading.CancellationToken)
  parent: System.Fabric.FabricClient.FaultManagementClient
  langs:
  - csharp
  - vb
  name: RestartReplicaAsync(ReplicaSelector, CompletionMode, CancellationToken)
  nameWithType: FabricClient.FaultManagementClient.RestartReplicaAsync(ReplicaSelector, CompletionMode, CancellationToken)
  fullName: System.Fabric.FabricClient.FaultManagementClient.RestartReplicaAsync(System.Fabric.ReplicaSelector, System.Fabric.CompletionMode, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.FaultManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: RestartReplicaAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.FaultManagementClient.cs
    startLine: 974
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\nThis API will restart the replica (equivalent of ReportFault - Temporary) specified by the passed in ReplicaSelector.\n"
  example: []
  syntax:
    content: public Task<RestartReplicaResult> RestartReplicaAsync(ReplicaSelector replicaSelector, CompletionMode completionMode, CancellationToken token)
    content.vb: Public Function RestartReplicaAsync(replicaSelector As ReplicaSelector, completionMode As CompletionMode, token As CancellationToken) As Task(Of RestartReplicaResult)
    parameters:
    - id: replicaSelector
      type: System.Fabric.ReplicaSelector
      description: The <xref href="System.Fabric.ReplicaSelector" data-throw-if-not-resolved="false"></xref> which indicates the replica to be restarted. This API can only be called for persisted service replicas.
    - id: completionMode
      type: System.Fabric.CompletionMode
      description: "The <xref href=\"System.Fabric.CompletionMode\" data-throw-if-not-resolved=\"false\"></xref> that specifies whether to wait until the restart of the replica is complete or not \nDoNotVerify - Return after triggering the restart of the replica\nVerify - Return after the remove completes"
    - id: token
      type: System.Threading.CancellationToken
      description: Cancellation token
    return:
      type: System.Threading.Tasks.Task{System.Fabric.Result.RestartReplicaResult}
      description: RestartReplicaResult which gives information about the actual selected replica.
  overload: System.Fabric.FabricClient.FaultManagementClient.RestartReplicaAsync*
  exceptions:
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: Action took more than its allocated time.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Any of the required arguments are null.
  - type: System.Fabric.FabricException
    commentId: T:System.Fabric.FabricException
    description: >-
      These are the fabric failures

      FabricErrorCode.ReplicaDoesNotExist - If the Selected replica was not found

      FabricErrorCode.PartitionNotFound - if the specified partition selected does not exist.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.FaultManagementClient.RestartReplicaAsync(System.Fabric.ReplicaSelector,System.Fabric.CompletionMode)
  commentId: M:System.Fabric.FabricClient.FaultManagementClient.RestartReplicaAsync(System.Fabric.ReplicaSelector,System.Fabric.CompletionMode)
  id: RestartReplicaAsync(System.Fabric.ReplicaSelector,System.Fabric.CompletionMode)
  parent: System.Fabric.FabricClient.FaultManagementClient
  langs:
  - csharp
  - vb
  name: RestartReplicaAsync(ReplicaSelector, CompletionMode)
  nameWithType: FabricClient.FaultManagementClient.RestartReplicaAsync(ReplicaSelector, CompletionMode)
  fullName: System.Fabric.FabricClient.FaultManagementClient.RestartReplicaAsync(System.Fabric.ReplicaSelector, System.Fabric.CompletionMode)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.FaultManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: RestartReplicaAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.FaultManagementClient.cs
    startLine: 995
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\nThis API will restart the replica (equivalent of ReportFault - Temporary) specified by the passed in <xref href=\"System.Fabric.ReplicaSelector\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public Task<RestartReplicaResult> RestartReplicaAsync(ReplicaSelector replicaSelector, CompletionMode completionMode)
    content.vb: Public Function RestartReplicaAsync(replicaSelector As ReplicaSelector, completionMode As CompletionMode) As Task(Of RestartReplicaResult)
    parameters:
    - id: replicaSelector
      type: System.Fabric.ReplicaSelector
      description: The <xref href="System.Fabric.ReplicaSelector" data-throw-if-not-resolved="false"></xref> which indicates the replica to be restarted. This API can only be called for persisted service replicas.
    - id: completionMode
      type: System.Fabric.CompletionMode
      description: "The <xref href=\"System.Fabric.CompletionMode\" data-throw-if-not-resolved=\"false\"></xref> that specifies whether to wait until the restart of the replica is complete or not \nDoNotVerify - Return after triggering the restart of the replica\nVerify - Return after the remove completes"
    return:
      type: System.Threading.Tasks.Task{System.Fabric.Result.RestartReplicaResult}
      description: RestartReplicaResult which gives information about the actual selected replica.
  overload: System.Fabric.FabricClient.FaultManagementClient.RestartReplicaAsync*
  exceptions:
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: Action took more than its allocated time.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Any of the required arguments are null.
  - type: System.Fabric.FabricException
    commentId: T:System.Fabric.FabricException
    description: >-
      These are the fabric failures

      FabricErrorCode.ReplicaDoesNotExist - If the Selected replica was not found

      FabricErrorCode.PartitionNotFound - if the specified partition selected does not exist.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.FaultManagementClient.RestartReplicaAsync(System.Fabric.ReplicaSelector,System.Fabric.CompletionMode,System.TimeSpan,System.Threading.CancellationToken)
  commentId: M:System.Fabric.FabricClient.FaultManagementClient.RestartReplicaAsync(System.Fabric.ReplicaSelector,System.Fabric.CompletionMode,System.TimeSpan,System.Threading.CancellationToken)
  id: RestartReplicaAsync(System.Fabric.ReplicaSelector,System.Fabric.CompletionMode,System.TimeSpan,System.Threading.CancellationToken)
  parent: System.Fabric.FabricClient.FaultManagementClient
  langs:
  - csharp
  - vb
  name: RestartReplicaAsync(ReplicaSelector, CompletionMode, TimeSpan, CancellationToken)
  nameWithType: FabricClient.FaultManagementClient.RestartReplicaAsync(ReplicaSelector, CompletionMode, TimeSpan, CancellationToken)
  fullName: System.Fabric.FabricClient.FaultManagementClient.RestartReplicaAsync(System.Fabric.ReplicaSelector, System.Fabric.CompletionMode, System.TimeSpan, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.FaultManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: RestartReplicaAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.FaultManagementClient.cs
    startLine: 1017
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\nThis API will restart the replica (equivalent of ReportFault - Temporary) specified by the passed in <xref href=\"System.Fabric.ReplicaSelector\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public Task<RestartReplicaResult> RestartReplicaAsync(ReplicaSelector replicaSelector, CompletionMode completionMode, TimeSpan operationTimeout, CancellationToken token)
    content.vb: Public Function RestartReplicaAsync(replicaSelector As ReplicaSelector, completionMode As CompletionMode, operationTimeout As TimeSpan, token As CancellationToken) As Task(Of RestartReplicaResult)
    parameters:
    - id: replicaSelector
      type: System.Fabric.ReplicaSelector
      description: The <xref href="System.Fabric.ReplicaSelector" data-throw-if-not-resolved="false"></xref> which indicates the replica to be restarted. This API can only be called for persisted service replicas.
    - id: completionMode
      type: System.Fabric.CompletionMode
      description: "The <xref href=\"System.Fabric.CompletionMode\" data-throw-if-not-resolved=\"false\"></xref> that specifies whether to wait until the restart of the replica is complete or not \nDoNotVerify - Return after triggering the restart of the replica\nVerify - Return after the remove completes"
    - id: operationTimeout
      type: System.TimeSpan
      description: The overall timeout for the operation including the timeout to wait for replica to be restarted if <xref href="System.Fabric.CompletionMode" data-throw-if-not-resolved="false"></xref> is Verify.
    - id: token
      type: System.Threading.CancellationToken
      description: Cancellation token
    return:
      type: System.Threading.Tasks.Task{System.Fabric.Result.RestartReplicaResult}
      description: RestartReplicaResult which gives information about the actual selected replica.
  overload: System.Fabric.FabricClient.FaultManagementClient.RestartReplicaAsync*
  exceptions:
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: Action took more than its allocated time.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Any of the required arguments are null.
  - type: System.Fabric.FabricException
    commentId: T:System.Fabric.FabricException
    description: >-
      These are the fabric failures

      FabricErrorCode.ReplicaDoesNotExist - If the Selected replica was not found

      FabricErrorCode.PartitionNotFound - if the specified partition selected does not exist
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.FaultManagementClient.RestartReplicaAsync(System.String,System.Guid,System.Int64,System.Fabric.CompletionMode,System.Threading.CancellationToken)
  commentId: M:System.Fabric.FabricClient.FaultManagementClient.RestartReplicaAsync(System.String,System.Guid,System.Int64,System.Fabric.CompletionMode,System.Threading.CancellationToken)
  id: RestartReplicaAsync(System.String,System.Guid,System.Int64,System.Fabric.CompletionMode,System.Threading.CancellationToken)
  parent: System.Fabric.FabricClient.FaultManagementClient
  langs:
  - csharp
  - vb
  name: RestartReplicaAsync(String, Guid, Int64, CompletionMode, CancellationToken)
  nameWithType: FabricClient.FaultManagementClient.RestartReplicaAsync(String, Guid, Int64, CompletionMode, CancellationToken)
  fullName: System.Fabric.FabricClient.FaultManagementClient.RestartReplicaAsync(System.String, System.Guid, System.Int64, System.Fabric.CompletionMode, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.FaultManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: RestartReplicaAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.FaultManagementClient.cs
    startLine: 1050
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\nThis API will restart the replica (equivalent of ReportFault - Temporary) specified by the passed in ReplicaSelector.\n"
  example: []
  syntax:
    content: public Task<RestartReplicaResult> RestartReplicaAsync(string nodeName, Guid partitionId, long replicaId, CompletionMode completionMode, CancellationToken token)
    content.vb: Public Function RestartReplicaAsync(nodeName As String, partitionId As Guid, replicaId As Long, completionMode As CompletionMode, token As CancellationToken) As Task(Of RestartReplicaResult)
    parameters:
    - id: nodeName
      type: System.String
      description: 'Node name where replica needs to be restarted <xref href="System.Fabric.ReplicaSelector" data-throw-if-not-resolved="false"></xref> '
    - id: partitionId
      type: System.Guid
      description: 'Partition Id where the replica needs to be restarted '
    - id: replicaId
      type: System.Int64
      description: 'Replica Id that needs to be restarted '
    - id: completionMode
      type: System.Fabric.CompletionMode
      description: "The <xref href=\"System.Fabric.CompletionMode\" data-throw-if-not-resolved=\"false\"></xref> that specifies whether to wait until the restart of the replica is complete or not \nDoNotVerify - Return after triggering the restart of the replica\nVerify - Return after the remove completes"
    - id: token
      type: System.Threading.CancellationToken
      description: Cancellation token
    return:
      type: System.Threading.Tasks.Task{System.Fabric.Result.RestartReplicaResult}
      description: RestartReplicaResult which gives information about the actual selected replica.
  overload: System.Fabric.FabricClient.FaultManagementClient.RestartReplicaAsync*
  exceptions:
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: Action took more than its allocated time.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Any of the required arguments are null.
  - type: System.Fabric.FabricException
    commentId: T:System.Fabric.FabricException
    description: >-
      These are the fabric failures

      FabricErrorCode.ReplicaDoesNotExist - If the Selected replica was not found

      FabricErrorCode.PartitionNotFound - if the specified partition selected does not exist.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.FaultManagementClient.RestartReplicaAsync(System.String,System.Guid,System.Int64,System.Fabric.CompletionMode)
  commentId: M:System.Fabric.FabricClient.FaultManagementClient.RestartReplicaAsync(System.String,System.Guid,System.Int64,System.Fabric.CompletionMode)
  id: RestartReplicaAsync(System.String,System.Guid,System.Int64,System.Fabric.CompletionMode)
  parent: System.Fabric.FabricClient.FaultManagementClient
  langs:
  - csharp
  - vb
  name: RestartReplicaAsync(String, Guid, Int64, CompletionMode)
  nameWithType: FabricClient.FaultManagementClient.RestartReplicaAsync(String, Guid, Int64, CompletionMode)
  fullName: System.Fabric.FabricClient.FaultManagementClient.RestartReplicaAsync(System.String, System.Guid, System.Int64, System.Fabric.CompletionMode)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.FaultManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: RestartReplicaAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.FaultManagementClient.cs
    startLine: 1075
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\nThis API will restart the replica (equivalent of ReportFault - Temporary) specified by the passed in <xref href=\"System.Fabric.ReplicaSelector\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public Task<RestartReplicaResult> RestartReplicaAsync(string nodeName, Guid partitionId, long replicaId, CompletionMode completionMode)
    content.vb: Public Function RestartReplicaAsync(nodeName As String, partitionId As Guid, replicaId As Long, completionMode As CompletionMode) As Task(Of RestartReplicaResult)
    parameters:
    - id: nodeName
      type: System.String
      description: 'Node name where replica needs to be restarted <xref href="System.Fabric.ReplicaSelector" data-throw-if-not-resolved="false"></xref> '
    - id: partitionId
      type: System.Guid
      description: 'Partition Id where the replica needs to be restarted '
    - id: replicaId
      type: System.Int64
      description: 'Replica Id that needs to be restarted '
    - id: completionMode
      type: System.Fabric.CompletionMode
      description: "The <xref href=\"System.Fabric.CompletionMode\" data-throw-if-not-resolved=\"false\"></xref> that specifies whether to wait until the restart of the replica is complete or not \nDoNotVerify - Return after triggering the restart of the replica\nVerify - Return after the remove completes"
    return:
      type: System.Threading.Tasks.Task{System.Fabric.Result.RestartReplicaResult}
      description: RestartReplicaResult which gives information about the actual selected replica.
  overload: System.Fabric.FabricClient.FaultManagementClient.RestartReplicaAsync*
  exceptions:
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: Action took more than its allocated time.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Any of the required arguments are null.
  - type: System.Fabric.FabricException
    commentId: T:System.Fabric.FabricException
    description: >-
      These are the fabric failures

      FabricErrorCode.ReplicaDoesNotExist - If the Selected replica was not found

      FabricErrorCode.PartitionNotFound - if the specified partition selected does not exist.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.FaultManagementClient.RestartReplicaAsync(System.String,System.Guid,System.Int64,System.Fabric.CompletionMode,System.Double,System.Threading.CancellationToken)
  commentId: M:System.Fabric.FabricClient.FaultManagementClient.RestartReplicaAsync(System.String,System.Guid,System.Int64,System.Fabric.CompletionMode,System.Double,System.Threading.CancellationToken)
  id: RestartReplicaAsync(System.String,System.Guid,System.Int64,System.Fabric.CompletionMode,System.Double,System.Threading.CancellationToken)
  parent: System.Fabric.FabricClient.FaultManagementClient
  langs:
  - csharp
  - vb
  name: RestartReplicaAsync(String, Guid, Int64, CompletionMode, Double, CancellationToken)
  nameWithType: FabricClient.FaultManagementClient.RestartReplicaAsync(String, Guid, Int64, CompletionMode, Double, CancellationToken)
  fullName: System.Fabric.FabricClient.FaultManagementClient.RestartReplicaAsync(System.String, System.Guid, System.Int64, System.Fabric.CompletionMode, System.Double, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.FaultManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: RestartReplicaAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.FaultManagementClient.cs
    startLine: 1101
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\nThis API will restart the replica (equivalent of ReportFault - Temporary) specified by the passed in <xref href=\"System.Fabric.ReplicaSelector\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public Task<RestartReplicaResult> RestartReplicaAsync(string nodeName, Guid partitionId, long replicaId, CompletionMode completionMode, double operationTimeoutSec, CancellationToken token)
    content.vb: Public Function RestartReplicaAsync(nodeName As String, partitionId As Guid, replicaId As Long, completionMode As CompletionMode, operationTimeoutSec As Double, token As CancellationToken) As Task(Of RestartReplicaResult)
    parameters:
    - id: nodeName
      type: System.String
      description: 'Node name where replica needs to be restarted <xref href="System.Fabric.ReplicaSelector" data-throw-if-not-resolved="false"></xref> '
    - id: partitionId
      type: System.Guid
      description: 'Partition Id where the replica needs to be restarted '
    - id: replicaId
      type: System.Int64
      description: 'Replica Id that needs to be restarted '
    - id: completionMode
      type: System.Fabric.CompletionMode
      description: "The <xref href=\"System.Fabric.CompletionMode\" data-throw-if-not-resolved=\"false\"></xref> that specifies whether to wait until the restart of the replica is complete or not \nDoNotVerify - Return after triggering the restart of the replica\nVerify - Return after the remove completes"
    - id: operationTimeoutSec
      type: System.Double
      description: The overall timeout in seconds for the operation, including the timeout to wait for replica to be restarted if <xref href="System.Fabric.CompletionMode" data-throw-if-not-resolved="false"></xref> is Verify.
    - id: token
      type: System.Threading.CancellationToken
      description: Cancellation token
    return:
      type: System.Threading.Tasks.Task{System.Fabric.Result.RestartReplicaResult}
      description: RestartReplicaResult which gives information about the actual selected replica.
  overload: System.Fabric.FabricClient.FaultManagementClient.RestartReplicaAsync*
  exceptions:
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: Action took more than its allocated time.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: Any of the required arguments are null.
  - type: System.Fabric.FabricException
    commentId: T:System.Fabric.FabricException
    description: >-
      These are the fabric failures

      FabricErrorCode.ReplicaDoesNotExist - If the Selected replica was not found

      FabricErrorCode.PartitionNotFound - if the specified partition selected does not exist
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.FaultManagementClient.MovePrimaryAsync(System.Fabric.PartitionSelector,System.Boolean)
  commentId: M:System.Fabric.FabricClient.FaultManagementClient.MovePrimaryAsync(System.Fabric.PartitionSelector,System.Boolean)
  id: MovePrimaryAsync(System.Fabric.PartitionSelector,System.Boolean)
  parent: System.Fabric.FabricClient.FaultManagementClient
  langs:
  - csharp
  - vb
  name: MovePrimaryAsync(PartitionSelector, Boolean)
  nameWithType: FabricClient.FaultManagementClient.MovePrimaryAsync(PartitionSelector, Boolean)
  fullName: System.Fabric.FabricClient.FaultManagementClient.MovePrimaryAsync(System.Fabric.PartitionSelector, System.Boolean)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.FaultManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: MovePrimaryAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.FaultManagementClient.cs
    startLine: 1151
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\nMoves selected primary replica to new node in the cluster.\n"
  remarks: "\nAPI uses the primary replica of the selected partition to move to new node location.\nThis overload uses random node selected from current node list, where primary replica does\nnot exist at the time of API call for moving primary replica.\nThis API is safe i.e. it will not cause quorum or data loss by itself unless additional faults or failures happen at the same time.\n"
  example: []
  syntax:
    content: public Task<MovePrimaryResult> MovePrimaryAsync(PartitionSelector partitionSelector, bool ignoreConstraints)
    content.vb: Public Function MovePrimaryAsync(partitionSelector As PartitionSelector, ignoreConstraints As Boolean) As Task(Of MovePrimaryResult)
    parameters:
    - id: partitionSelector
      type: System.Fabric.PartitionSelector
      description: Move primary will be called on this Selected Partition.
    - id: ignoreConstraints
      type: System.Boolean
      description: Whether or not to ignore constraints when attempting to execute the move.
    return:
      type: System.Threading.Tasks.Task{System.Fabric.Result.MovePrimaryResult}
      description: A task with move primary result
  overload: System.Fabric.FabricClient.FaultManagementClient.MovePrimaryAsync*
  exceptions:
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: Retry is exhausted.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: >
      Invalid operation

      - If action called on stateless service.

      - If not enough nodes available for action
  - type: System.Fabric.FabricException
    commentId: T:System.Fabric.FabricException
    description: "\nFabricErrorCode.NotReady - If Primary replica is not ready for movement\nFabricErrorCode.AlreadyPrimaryReplica - If Primary replica for selected partition already exist on new node\nFabricErrorCode.ConstraintNotSatisfied - If the constraints for the new location of the replica would prohibit the move\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.FaultManagementClient.MovePrimaryAsync(System.Fabric.PartitionSelector)
  commentId: M:System.Fabric.FabricClient.FaultManagementClient.MovePrimaryAsync(System.Fabric.PartitionSelector)
  id: MovePrimaryAsync(System.Fabric.PartitionSelector)
  parent: System.Fabric.FabricClient.FaultManagementClient
  langs:
  - csharp
  - vb
  name: MovePrimaryAsync(PartitionSelector)
  nameWithType: FabricClient.FaultManagementClient.MovePrimaryAsync(PartitionSelector)
  fullName: System.Fabric.FabricClient.FaultManagementClient.MovePrimaryAsync(System.Fabric.PartitionSelector)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.FaultManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: MovePrimaryAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.FaultManagementClient.cs
    startLine: 1179
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\nMoves selected primary replica to new node in the cluster.\n"
  remarks: "\nAPI uses the primary replica of the selected partition to move to new node location.\nThis overload uses random node selected from current node list, where primary replica does\nnot exist at the time of API call for moving primary replica.\nThis API is safe i.e. it will not cause quorum or data loss by itself unless additional faults or failures happen at the same time.\n"
  example: []
  syntax:
    content: public Task<MovePrimaryResult> MovePrimaryAsync(PartitionSelector partitionSelector)
    content.vb: Public Function MovePrimaryAsync(partitionSelector As PartitionSelector) As Task(Of MovePrimaryResult)
    parameters:
    - id: partitionSelector
      type: System.Fabric.PartitionSelector
      description: Move primary will be called on this Selected Partition.
    return:
      type: System.Threading.Tasks.Task{System.Fabric.Result.MovePrimaryResult}
      description: A task with move primary result
  overload: System.Fabric.FabricClient.FaultManagementClient.MovePrimaryAsync*
  exceptions:
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: Retry is exhausted.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: >
      Invalid operation

      - If action called on stateless service.

      - If not enough nodes available for action
  - type: System.Fabric.FabricException
    commentId: T:System.Fabric.FabricException
    description: "\nFabricErrorCode.NotReady - If Primary replica is not ready for movement\nFabricErrorCode.AlreadyPrimaryReplica - If Primary replica for selected partition already exist on new node\nFabricErrorCode.ConstraintNotSatisfied - If the constraints for the new location of the replica would prohibit the move\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.FaultManagementClient.MovePrimaryAsync(System.Fabric.PartitionSelector,System.Boolean,System.Threading.CancellationToken)
  commentId: M:System.Fabric.FabricClient.FaultManagementClient.MovePrimaryAsync(System.Fabric.PartitionSelector,System.Boolean,System.Threading.CancellationToken)
  id: MovePrimaryAsync(System.Fabric.PartitionSelector,System.Boolean,System.Threading.CancellationToken)
  parent: System.Fabric.FabricClient.FaultManagementClient
  langs:
  - csharp
  - vb
  name: MovePrimaryAsync(PartitionSelector, Boolean, CancellationToken)
  nameWithType: FabricClient.FaultManagementClient.MovePrimaryAsync(PartitionSelector, Boolean, CancellationToken)
  fullName: System.Fabric.FabricClient.FaultManagementClient.MovePrimaryAsync(System.Fabric.PartitionSelector, System.Boolean, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.FaultManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: MovePrimaryAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.FaultManagementClient.cs
    startLine: 1207
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\nMoves selected primary replica to new node in the cluster.\n"
  remarks: >
    API uses the primary replica of the selected partition to move to new node location.

    This overload uses random node selected from current node list, where primary replica does

    not exist at the time of API call for moving primary replica.

    This API is safe i.e. it will not cause quorum or data loss by itself unless additional faults or failures happen at the same time.
  example: []
  syntax:
    content: public Task<MovePrimaryResult> MovePrimaryAsync(PartitionSelector partitionSelector, bool ignoreConstraints, CancellationToken token)
    content.vb: Public Function MovePrimaryAsync(partitionSelector As PartitionSelector, ignoreConstraints As Boolean, token As CancellationToken) As Task(Of MovePrimaryResult)
    parameters:
    - id: partitionSelector
      type: System.Fabric.PartitionSelector
      description: Move primary will be called on this Selected Partition.
    - id: ignoreConstraints
      type: System.Boolean
      description: Whether or not to ignore constraints when attempting to execute the move.
    - id: token
      type: System.Threading.CancellationToken
      description: The cancellation token
    return:
      type: System.Threading.Tasks.Task{System.Fabric.Result.MovePrimaryResult}
      description: A task with move primary result
  overload: System.Fabric.FabricClient.FaultManagementClient.MovePrimaryAsync*
  exceptions:
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: Retry is exhausted.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: >
      Invalid operation

      - If action called on stateless service.

      - If not enough nodes available for action
  - type: System.Fabric.FabricException
    commentId: T:System.Fabric.FabricException
    description: "\nFabricErrorCode.NotReady - If Primary replica is not ready for movement\nFabricErrorCode.AlreadyPrimaryReplica - If Primary replica for selected partition already exist on new node\nFabricErrorCode.ConstraintNotSatisfied - If the constraints for the new location of the replica would prohibit the move\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.FaultManagementClient.MovePrimaryAsync(System.Fabric.PartitionSelector,System.Threading.CancellationToken)
  commentId: M:System.Fabric.FabricClient.FaultManagementClient.MovePrimaryAsync(System.Fabric.PartitionSelector,System.Threading.CancellationToken)
  id: MovePrimaryAsync(System.Fabric.PartitionSelector,System.Threading.CancellationToken)
  parent: System.Fabric.FabricClient.FaultManagementClient
  langs:
  - csharp
  - vb
  name: MovePrimaryAsync(PartitionSelector, CancellationToken)
  nameWithType: FabricClient.FaultManagementClient.MovePrimaryAsync(PartitionSelector, CancellationToken)
  fullName: System.Fabric.FabricClient.FaultManagementClient.MovePrimaryAsync(System.Fabric.PartitionSelector, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.FaultManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: MovePrimaryAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.FaultManagementClient.cs
    startLine: 1236
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\nMoves selected primary replica to new node in the cluster.\n"
  remarks: >
    API uses the primary replica of the selected partition to move to new node location.

    This overload uses random node selected from current node list, where primary replica does

    not exist at the time of API call for moving primary replica.

    This API is safe i.e. it will not cause quorum or data loss by itself unless additional faults or failures happen at the same time.
  example: []
  syntax:
    content: public Task<MovePrimaryResult> MovePrimaryAsync(PartitionSelector partitionSelector, CancellationToken token)
    content.vb: Public Function MovePrimaryAsync(partitionSelector As PartitionSelector, token As CancellationToken) As Task(Of MovePrimaryResult)
    parameters:
    - id: partitionSelector
      type: System.Fabric.PartitionSelector
      description: Move primary will be called on this Selected Partition.
    - id: token
      type: System.Threading.CancellationToken
      description: The cancellation token
    return:
      type: System.Threading.Tasks.Task{System.Fabric.Result.MovePrimaryResult}
      description: A task with move primary result
  overload: System.Fabric.FabricClient.FaultManagementClient.MovePrimaryAsync*
  exceptions:
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: Retry is exhausted.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: >
      Invalid operation

      - If action called on stateless service.

      - If not enough nodes available for action
  - type: System.Fabric.FabricException
    commentId: T:System.Fabric.FabricException
    description: "\nFabricErrorCode.NotReady - If Primary replica is not ready for movement\nFabricErrorCode.AlreadyPrimaryReplica - If Primary replica for selected partition already exist on new node\nFabricErrorCode.ConstraintNotSatisfied - If the constraints for the new location of the replica would prohibit the move\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.FaultManagementClient.MovePrimaryAsync(System.Fabric.PartitionSelector,System.Boolean,System.TimeSpan,System.Threading.CancellationToken)
  commentId: M:System.Fabric.FabricClient.FaultManagementClient.MovePrimaryAsync(System.Fabric.PartitionSelector,System.Boolean,System.TimeSpan,System.Threading.CancellationToken)
  id: MovePrimaryAsync(System.Fabric.PartitionSelector,System.Boolean,System.TimeSpan,System.Threading.CancellationToken)
  parent: System.Fabric.FabricClient.FaultManagementClient
  langs:
  - csharp
  - vb
  name: MovePrimaryAsync(PartitionSelector, Boolean, TimeSpan, CancellationToken)
  nameWithType: FabricClient.FaultManagementClient.MovePrimaryAsync(PartitionSelector, Boolean, TimeSpan, CancellationToken)
  fullName: System.Fabric.FabricClient.FaultManagementClient.MovePrimaryAsync(System.Fabric.PartitionSelector, System.Boolean, System.TimeSpan, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.FaultManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: MovePrimaryAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.FaultManagementClient.cs
    startLine: 1266
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\nMoves selected primary replica to new node in the cluster.\n"
  remarks: "\nAPI uses the primary replica of the selected partition to move to new node location.\nThis overload uses random node selected from current node list, where primary replica does\nnot exist at the time of API call for moving primary replica.\nThis API is safe i.e. it will not cause quorum or data loss by itself unless additional faults or failures happen at the same time."
  example: []
  syntax:
    content: public Task<MovePrimaryResult> MovePrimaryAsync(PartitionSelector partitionSelector, bool ignoreConstraints, TimeSpan operationTimeout, CancellationToken token)
    content.vb: Public Function MovePrimaryAsync(partitionSelector As PartitionSelector, ignoreConstraints As Boolean, operationTimeout As TimeSpan, token As CancellationToken) As Task(Of MovePrimaryResult)
    parameters:
    - id: partitionSelector
      type: System.Fabric.PartitionSelector
      description: 'Move primary will be called on this Selected Partition. '
    - id: ignoreConstraints
      type: System.Boolean
      description: Whether or not to ignore constraints when attempting to execute the move.
    - id: operationTimeout
      type: System.TimeSpan
      description: The timeout for this API call.
    - id: token
      type: System.Threading.CancellationToken
      description: The cancellation token
    return:
      type: System.Threading.Tasks.Task{System.Fabric.Result.MovePrimaryResult}
      description: A task with move primary result
  overload: System.Fabric.FabricClient.FaultManagementClient.MovePrimaryAsync*
  exceptions:
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: Retry is exhausted.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: >
      Invalid operation

      - If action called on stateless service.

      - If not enough nodes available for action
  - type: System.Fabric.FabricException
    commentId: T:System.Fabric.FabricException
    description: "\nFabricErrorCode.NotReady - If Primary replica is not ready for movement\nFabricErrorCode.AlreadyPrimaryReplica - If Primary replica for selected partition already exist on new node\nFabricErrorCode.ConstraintNotSatisfied - If the constraints for the new location of the replica would prohibit the move\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.FaultManagementClient.MovePrimaryAsync(System.Fabric.PartitionSelector,System.TimeSpan,System.Threading.CancellationToken)
  commentId: M:System.Fabric.FabricClient.FaultManagementClient.MovePrimaryAsync(System.Fabric.PartitionSelector,System.TimeSpan,System.Threading.CancellationToken)
  id: MovePrimaryAsync(System.Fabric.PartitionSelector,System.TimeSpan,System.Threading.CancellationToken)
  parent: System.Fabric.FabricClient.FaultManagementClient
  langs:
  - csharp
  - vb
  name: MovePrimaryAsync(PartitionSelector, TimeSpan, CancellationToken)
  nameWithType: FabricClient.FaultManagementClient.MovePrimaryAsync(PartitionSelector, TimeSpan, CancellationToken)
  fullName: System.Fabric.FabricClient.FaultManagementClient.MovePrimaryAsync(System.Fabric.PartitionSelector, System.TimeSpan, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.FaultManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: MovePrimaryAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.FaultManagementClient.cs
    startLine: 1297
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\nMoves selected primary replica to new node in the cluster.\n"
  remarks: "\nAPI uses the primary replica of the selected partition to move to new node location.\nThis overload uses random node selected from current node list, where primary replica does\nnot exist at the time of API call for moving primary replica.\nThis API is safe i.e. it will not cause quorum or data loss by itself unless additional faults or failures happen at the same time."
  example: []
  syntax:
    content: public Task<MovePrimaryResult> MovePrimaryAsync(PartitionSelector partitionSelector, TimeSpan operationTimeout, CancellationToken token)
    content.vb: Public Function MovePrimaryAsync(partitionSelector As PartitionSelector, operationTimeout As TimeSpan, token As CancellationToken) As Task(Of MovePrimaryResult)
    parameters:
    - id: partitionSelector
      type: System.Fabric.PartitionSelector
      description: Move primary will be called on this Selected Partition.
    - id: operationTimeout
      type: System.TimeSpan
      description: The timeout for this API call.
    - id: token
      type: System.Threading.CancellationToken
      description: The cancellation token
    return:
      type: System.Threading.Tasks.Task{System.Fabric.Result.MovePrimaryResult}
      description: A task with move primary result
  overload: System.Fabric.FabricClient.FaultManagementClient.MovePrimaryAsync*
  exceptions:
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: Retry is exhausted.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: >
      Invalid operation

      - If action called on stateless service.

      - If not enough nodes available for action
  - type: System.Fabric.FabricException
    commentId: T:System.Fabric.FabricException
    description: "\nFabricErrorCode.NotReady - If Primary replica is not ready for movement\nFabricErrorCode.AlreadyPrimaryReplica - If Primary replica for selected partition already exist on new node\nFabricErrorCode.ConstraintNotSatisfied - If the constraints for the new location of the replica would prohibit the move\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.FaultManagementClient.MovePrimaryAsync(System.String,System.Fabric.PartitionSelector,System.Boolean)
  commentId: M:System.Fabric.FabricClient.FaultManagementClient.MovePrimaryAsync(System.String,System.Fabric.PartitionSelector,System.Boolean)
  id: MovePrimaryAsync(System.String,System.Fabric.PartitionSelector,System.Boolean)
  parent: System.Fabric.FabricClient.FaultManagementClient
  langs:
  - csharp
  - vb
  name: MovePrimaryAsync(String, PartitionSelector, Boolean)
  nameWithType: FabricClient.FaultManagementClient.MovePrimaryAsync(String, PartitionSelector, Boolean)
  fullName: System.Fabric.FabricClient.FaultManagementClient.MovePrimaryAsync(System.String, System.Fabric.PartitionSelector, System.Boolean)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.FaultManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: MovePrimaryAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.FaultManagementClient.cs
    startLine: 1328
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\nMoves selected primary replica to new node in the cluster.\n"
  remarks: "\nAPI uses the primary replica of the selected partition to move to new node location specified by nodeName.\nThis API is safe i.e. it will not cause quorum or data loss by itself unless additional faults or failures happen at the same time.\n"
  example: []
  syntax:
    content: public Task<MovePrimaryResult> MovePrimaryAsync(string nodeName, PartitionSelector partitionSelector, bool ignoreConstraints)
    content.vb: Public Function MovePrimaryAsync(nodeName As String, partitionSelector As PartitionSelector, ignoreConstraints As Boolean) As Task(Of MovePrimaryResult)
    parameters:
    - id: nodeName
      type: System.String
      description: Node name where primary replica to be moved
    - id: partitionSelector
      type: System.Fabric.PartitionSelector
      description: 'Move primary will be called on this Selected Partition. '
    - id: ignoreConstraints
      type: System.Boolean
      description: Whether or not to ignore constraints when attempting to execute the move.
    return:
      type: System.Threading.Tasks.Task{System.Fabric.Result.MovePrimaryResult}
      description: A task with move primary result
  overload: System.Fabric.FabricClient.FaultManagementClient.MovePrimaryAsync*
  exceptions:
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: Retry is exhausted.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: >
      Invalid operation

      - If action called on stateless service.

      - If not enough nodes available for action
  - type: System.Fabric.FabricException
    commentId: T:System.Fabric.FabricException
    description: "\nFabricErrorCode.NotReady - If Primary replica is not ready for movement\nFabricErrorCode.AlreadyPrimaryReplica - If Primary replica for selected partition already exist on new node\nFabricErrorCode.ConstraintNotSatisfied - If the constraints for the new location of the replica would prohibit the move\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.FaultManagementClient.MovePrimaryAsync(System.String,System.Fabric.PartitionSelector)
  commentId: M:System.Fabric.FabricClient.FaultManagementClient.MovePrimaryAsync(System.String,System.Fabric.PartitionSelector)
  id: MovePrimaryAsync(System.String,System.Fabric.PartitionSelector)
  parent: System.Fabric.FabricClient.FaultManagementClient
  langs:
  - csharp
  - vb
  name: MovePrimaryAsync(String, PartitionSelector)
  nameWithType: FabricClient.FaultManagementClient.MovePrimaryAsync(String, PartitionSelector)
  fullName: System.Fabric.FabricClient.FaultManagementClient.MovePrimaryAsync(System.String, System.Fabric.PartitionSelector)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.FaultManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: MovePrimaryAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.FaultManagementClient.cs
    startLine: 1357
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\nMoves selected primary replica to new node in the cluster.\n"
  remarks: "\nAPI uses the primary replica of the selected partition to move to new node location specified by nodeName.\nThis API is safe i.e. it will not cause quorum or data loss by itself unless additional faults or failures happen at the same time.\n"
  example: []
  syntax:
    content: public Task<MovePrimaryResult> MovePrimaryAsync(string nodeName, PartitionSelector partitionSelector)
    content.vb: Public Function MovePrimaryAsync(nodeName As String, partitionSelector As PartitionSelector) As Task(Of MovePrimaryResult)
    parameters:
    - id: nodeName
      type: System.String
      description: Node name where primary replica to be moved
    - id: partitionSelector
      type: System.Fabric.PartitionSelector
      description: 'Move primary will be called on this Selected Partition. '
    return:
      type: System.Threading.Tasks.Task{System.Fabric.Result.MovePrimaryResult}
      description: A task with move primary result
  overload: System.Fabric.FabricClient.FaultManagementClient.MovePrimaryAsync*
  exceptions:
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: Retry is exhausted.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: >
      Invalid operation

      - If action called on stateless service.

      - If not enough nodes available for action
  - type: System.Fabric.FabricException
    commentId: T:System.Fabric.FabricException
    description: "\nFabricErrorCode.NotReady - If Primary replica is not ready for movement\nFabricErrorCode.AlreadyPrimaryReplica - If Primary replica for selected partition already exist on new node\nFabricErrorCode.ConstraintNotSatisfied - If the constraints for the new location of the replica would prohibit the move\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.FaultManagementClient.MovePrimaryAsync(System.String,System.Fabric.PartitionSelector,System.Boolean,System.Threading.CancellationToken)
  commentId: M:System.Fabric.FabricClient.FaultManagementClient.MovePrimaryAsync(System.String,System.Fabric.PartitionSelector,System.Boolean,System.Threading.CancellationToken)
  id: MovePrimaryAsync(System.String,System.Fabric.PartitionSelector,System.Boolean,System.Threading.CancellationToken)
  parent: System.Fabric.FabricClient.FaultManagementClient
  langs:
  - csharp
  - vb
  name: MovePrimaryAsync(String, PartitionSelector, Boolean, CancellationToken)
  nameWithType: FabricClient.FaultManagementClient.MovePrimaryAsync(String, PartitionSelector, Boolean, CancellationToken)
  fullName: System.Fabric.FabricClient.FaultManagementClient.MovePrimaryAsync(System.String, System.Fabric.PartitionSelector, System.Boolean, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.FaultManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: MovePrimaryAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.FaultManagementClient.cs
    startLine: 1388
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\nMoves selected primary replica to new node in the cluster.\n"
  remarks: "\nAPI uses the primary replica of the selected partition to move to new node location specified by nodeName.\nThis API is safe i.e. it will not cause quorum or data loss by itself unless additional faults or failures happen at the same time.\n"
  example: []
  syntax:
    content: public Task<MovePrimaryResult> MovePrimaryAsync(string nodeName, PartitionSelector partitionSelector, bool ignoreConstraints, CancellationToken token)
    content.vb: Public Function MovePrimaryAsync(nodeName As String, partitionSelector As PartitionSelector, ignoreConstraints As Boolean, token As CancellationToken) As Task(Of MovePrimaryResult)
    parameters:
    - id: nodeName
      type: System.String
      description: Node name where primary replica to be moved
    - id: partitionSelector
      type: System.Fabric.PartitionSelector
      description: 'Move primary will be called on this Selected Partition. '
    - id: ignoreConstraints
      type: System.Boolean
      description: Whether or not to ignore constraints when attempting to execute the move.
    - id: token
      type: System.Threading.CancellationToken
      description: The cancellation token
    return:
      type: System.Threading.Tasks.Task{System.Fabric.Result.MovePrimaryResult}
      description: A task with move primary result
  overload: System.Fabric.FabricClient.FaultManagementClient.MovePrimaryAsync*
  exceptions:
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: Retry is exhausted.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: >
      Invalid operation

      - If action called on stateless service.

      - If not enough nodes available for action
  - type: System.Fabric.FabricException
    commentId: T:System.Fabric.FabricException
    description: "\nFabricErrorCode.NotReady - If Primary replica is not ready for movement\nFabricErrorCode.AlreadyPrimaryReplica - If Primary replica for selected partition already exist on new node\nFabricErrorCode.ConstraintNotSatisfied - If the constraints for the new location of the replica would prohibit the move\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.FaultManagementClient.MovePrimaryAsync(System.String,System.Fabric.PartitionSelector,System.Threading.CancellationToken)
  commentId: M:System.Fabric.FabricClient.FaultManagementClient.MovePrimaryAsync(System.String,System.Fabric.PartitionSelector,System.Threading.CancellationToken)
  id: MovePrimaryAsync(System.String,System.Fabric.PartitionSelector,System.Threading.CancellationToken)
  parent: System.Fabric.FabricClient.FaultManagementClient
  langs:
  - csharp
  - vb
  name: MovePrimaryAsync(String, PartitionSelector, CancellationToken)
  nameWithType: FabricClient.FaultManagementClient.MovePrimaryAsync(String, PartitionSelector, CancellationToken)
  fullName: System.Fabric.FabricClient.FaultManagementClient.MovePrimaryAsync(System.String, System.Fabric.PartitionSelector, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.FaultManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: MovePrimaryAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.FaultManagementClient.cs
    startLine: 1420
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\nMoves selected primary replica to new node in the cluster.\n"
  remarks: "\nAPI uses the primary replica of the selected partition to move to new node location specified by nodeName.\nThis API is safe i.e. it will not cause quorum or data loss by itself unless additional faults or failures happen at the same time.\n"
  example: []
  syntax:
    content: public Task<MovePrimaryResult> MovePrimaryAsync(string nodeName, PartitionSelector partitionSelector, CancellationToken token)
    content.vb: Public Function MovePrimaryAsync(nodeName As String, partitionSelector As PartitionSelector, token As CancellationToken) As Task(Of MovePrimaryResult)
    parameters:
    - id: nodeName
      type: System.String
      description: Node name where primary replica to be moved
    - id: partitionSelector
      type: System.Fabric.PartitionSelector
      description: 'Move primary will be called on this Selected Partition. '
    - id: token
      type: System.Threading.CancellationToken
      description: The cancellation token
    return:
      type: System.Threading.Tasks.Task{System.Fabric.Result.MovePrimaryResult}
      description: A task with move primary result
  overload: System.Fabric.FabricClient.FaultManagementClient.MovePrimaryAsync*
  exceptions:
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: Retry is exhausted.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: >
      Invalid operation

      - If action called on stateless service.

      - If not enough nodes available for action
  - type: System.Fabric.FabricException
    commentId: T:System.Fabric.FabricException
    description: "\nFabricErrorCode.NotReady - If Primary replica is not ready for movement\nFabricErrorCode.AlreadyPrimaryReplica - If Primary replica for selected partition already exist on new node\nFabricErrorCode.ConstraintNotSatisfied - If the constraints for the new location of the replica would prohibit the move\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.FaultManagementClient.MovePrimaryAsync(System.String,System.Fabric.PartitionSelector,System.Boolean,System.TimeSpan,System.Threading.CancellationToken)
  commentId: M:System.Fabric.FabricClient.FaultManagementClient.MovePrimaryAsync(System.String,System.Fabric.PartitionSelector,System.Boolean,System.TimeSpan,System.Threading.CancellationToken)
  id: MovePrimaryAsync(System.String,System.Fabric.PartitionSelector,System.Boolean,System.TimeSpan,System.Threading.CancellationToken)
  parent: System.Fabric.FabricClient.FaultManagementClient
  langs:
  - csharp
  - vb
  name: MovePrimaryAsync(String, PartitionSelector, Boolean, TimeSpan, CancellationToken)
  nameWithType: FabricClient.FaultManagementClient.MovePrimaryAsync(String, PartitionSelector, Boolean, TimeSpan, CancellationToken)
  fullName: System.Fabric.FabricClient.FaultManagementClient.MovePrimaryAsync(System.String, System.Fabric.PartitionSelector, System.Boolean, System.TimeSpan, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.FaultManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: MovePrimaryAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.FaultManagementClient.cs
    startLine: 1453
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\nMoves selected primary replica to new node in the cluster.\n"
  remarks: "\nAPI uses the primary replica of the selected partition to move to new node location specified by nodeName.\nThis API is safe i.e. it will not cause quorum or data loss by itself unless additional faults or failures happen at the same time.\n"
  example: []
  syntax:
    content: public Task<MovePrimaryResult> MovePrimaryAsync(string nodeName, PartitionSelector partitionSelector, bool ignoreConstraints, TimeSpan operationTimeout, CancellationToken token)
    content.vb: Public Function MovePrimaryAsync(nodeName As String, partitionSelector As PartitionSelector, ignoreConstraints As Boolean, operationTimeout As TimeSpan, token As CancellationToken) As Task(Of MovePrimaryResult)
    parameters:
    - id: nodeName
      type: System.String
      description: Node name where primary replica to be moved
    - id: partitionSelector
      type: System.Fabric.PartitionSelector
      description: >
        Move primary will be called on this Selected Partition.

        API uses the primary replica of the selected partition to move to new node location.
    - id: ignoreConstraints
      type: System.Boolean
      description: Whether or not to ignore constraints when attempting to execute the move.
    - id: operationTimeout
      type: System.TimeSpan
      description: The timeout for this API call.
    - id: token
      type: System.Threading.CancellationToken
      description: The cancellation token
    return:
      type: System.Threading.Tasks.Task{System.Fabric.Result.MovePrimaryResult}
      description: A task with move primary result
  overload: System.Fabric.FabricClient.FaultManagementClient.MovePrimaryAsync*
  exceptions:
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: Retry is exhausted.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: >
      Invalid operation

      - If action called on stateless service.

      - If not enough nodes available for action
  - type: System.Fabric.FabricException
    commentId: T:System.Fabric.FabricException
    description: "\nFabricErrorCode.NotReady - If Primary replica is not ready for movement\nFabricErrorCode.AlreadyPrimaryReplica - If Primary replica for selected partition already exist on new node\nFabricErrorCode.ConstraintNotSatisfied - If the constraints for the new location of the replica would prohibit the move\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.FaultManagementClient.MovePrimaryAsync(System.String,System.Fabric.PartitionSelector,System.TimeSpan,System.Threading.CancellationToken)
  commentId: M:System.Fabric.FabricClient.FaultManagementClient.MovePrimaryAsync(System.String,System.Fabric.PartitionSelector,System.TimeSpan,System.Threading.CancellationToken)
  id: MovePrimaryAsync(System.String,System.Fabric.PartitionSelector,System.TimeSpan,System.Threading.CancellationToken)
  parent: System.Fabric.FabricClient.FaultManagementClient
  langs:
  - csharp
  - vb
  name: MovePrimaryAsync(String, PartitionSelector, TimeSpan, CancellationToken)
  nameWithType: FabricClient.FaultManagementClient.MovePrimaryAsync(String, PartitionSelector, TimeSpan, CancellationToken)
  fullName: System.Fabric.FabricClient.FaultManagementClient.MovePrimaryAsync(System.String, System.Fabric.PartitionSelector, System.TimeSpan, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.FaultManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: MovePrimaryAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.FaultManagementClient.cs
    startLine: 1494
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\nMoves selected primary replica to new node in the cluster.\n"
  remarks: "\nAPI uses the primary replica of the selected partition to move to new node location specified by nodeName.\nThis API is safe i.e. it will not cause quorum or data loss by itself unless additional faults or failures happen at the same time.\n"
  example: []
  syntax:
    content: public Task<MovePrimaryResult> MovePrimaryAsync(string nodeName, PartitionSelector partitionSelector, TimeSpan operationTimeout, CancellationToken token)
    content.vb: Public Function MovePrimaryAsync(nodeName As String, partitionSelector As PartitionSelector, operationTimeout As TimeSpan, token As CancellationToken) As Task(Of MovePrimaryResult)
    parameters:
    - id: nodeName
      type: System.String
      description: Node name where primary replica to be moved
    - id: partitionSelector
      type: System.Fabric.PartitionSelector
      description: >
        Move primary will be called on this Selected Partition.

        API uses the primary replica of the selected partition to move to new node location.
    - id: operationTimeout
      type: System.TimeSpan
      description: The timeout for this API call.
    - id: token
      type: System.Threading.CancellationToken
      description: The cancellation token
    return:
      type: System.Threading.Tasks.Task{System.Fabric.Result.MovePrimaryResult}
      description: A task with move primary result
  overload: System.Fabric.FabricClient.FaultManagementClient.MovePrimaryAsync*
  exceptions:
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: Retry is exhausted.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: >
      Invalid operation

      - If action called on stateless service.

      - If not enough nodes available for action
  - type: System.Fabric.FabricException
    commentId: T:System.Fabric.FabricException
    description: "\nFabricErrorCode.NotReady - If Primary replica is not ready for movement\nFabricErrorCode.AlreadyPrimaryReplica - If Primary replica for selected partition already exist on new node\nFabricErrorCode.ConstraintNotSatisfied - If the constraints for the new location of the replica would prohibit the move\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.FaultManagementClient.MoveSecondaryAsync(System.Fabric.PartitionSelector,System.Boolean)
  commentId: M:System.Fabric.FabricClient.FaultManagementClient.MoveSecondaryAsync(System.Fabric.PartitionSelector,System.Boolean)
  id: MoveSecondaryAsync(System.Fabric.PartitionSelector,System.Boolean)
  parent: System.Fabric.FabricClient.FaultManagementClient
  langs:
  - csharp
  - vb
  name: MoveSecondaryAsync(PartitionSelector, Boolean)
  nameWithType: FabricClient.FaultManagementClient.MoveSecondaryAsync(PartitionSelector, Boolean)
  fullName: System.Fabric.FabricClient.FaultManagementClient.MoveSecondaryAsync(System.Fabric.PartitionSelector, System.Boolean)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.FaultManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: MoveSecondaryAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.FaultManagementClient.cs
    startLine: 1550
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\nMoves selected secondary replica from current node to new node in the cluster.\n"
  remarks: "\nAPI uses the selected secondary replica inside partition selector structure\nspecified by current secondary node. This API overload randomly selects current secondary\nnode for random secondary replica of the selected partition and new secondary node for replica movement\nThis selected replica will be moved to new node location from current node location.\nThis API is safe i.e. it will not cause quorum or data loss by itself unless additional faults or failures happen at the same time.\n"
  example: []
  syntax:
    content: public Task<MoveSecondaryResult> MoveSecondaryAsync(PartitionSelector partitionSelector, bool ignoreConstraints)
    content.vb: Public Function MoveSecondaryAsync(partitionSelector As PartitionSelector, ignoreConstraints As Boolean) As Task(Of MoveSecondaryResult)
    parameters:
    - id: partitionSelector
      type: System.Fabric.PartitionSelector
      description: 'Move Secondary will be called on this Selected Partition. '
    - id: ignoreConstraints
      type: System.Boolean
      description: Whether or not to ignore constraints when attempting to execute the move.
    return:
      type: System.Threading.Tasks.Task{System.Fabric.Result.MoveSecondaryResult}
      description: A task with move secondary result
  overload: System.Fabric.FabricClient.FaultManagementClient.MoveSecondaryAsync*
  exceptions:
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: Retry is exhausted.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: >
      Invalid operation

      - If action called on stateless service.

      - If no active secondary replica exists

      - If not enough nodes available for action
  - type: System.Fabric.FabricException
    commentId: T:System.Fabric.FabricException
    description: "\nFabricErrorCode.AlreadyPrimaryReplica - If Primary replica for selected partition already exist on new node\nFabricErrorCode.AlreadySecondaryReplica - If active Secondary replica for selected partition already exist on new node\nFabricErrorCode.InvalidReplicaStateForReplicaOperation - If the target replica is not a secondary\nFabricErrorCode.ConstraintNotSatisfied - If the constraints for the new location of the replica would prohibit the move\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.FaultManagementClient.MoveSecondaryAsync(System.Fabric.PartitionSelector)
  commentId: M:System.Fabric.FabricClient.FaultManagementClient.MoveSecondaryAsync(System.Fabric.PartitionSelector)
  id: MoveSecondaryAsync(System.Fabric.PartitionSelector)
  parent: System.Fabric.FabricClient.FaultManagementClient
  langs:
  - csharp
  - vb
  name: MoveSecondaryAsync(PartitionSelector)
  nameWithType: FabricClient.FaultManagementClient.MoveSecondaryAsync(PartitionSelector)
  fullName: System.Fabric.FabricClient.FaultManagementClient.MoveSecondaryAsync(System.Fabric.PartitionSelector)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.FaultManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: MoveSecondaryAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.FaultManagementClient.cs
    startLine: 1582
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\nMoves selected secondary replica from current node to new node in the cluster.\n"
  remarks: "\nAPI uses the selected secondary replica inside partition selector structure\nspecified by current secondary node. This API overload randomly selects current secondary\nnode for random secondary replica of the selected partition and new secondary node for replica movement\nThis selected replica will be moved to new node location from current node location.\nThis API is safe i.e. it will not cause quorum or data loss by itself unless additional faults or failures happen at the same time.\n"
  example: []
  syntax:
    content: public Task<MoveSecondaryResult> MoveSecondaryAsync(PartitionSelector partitionSelector)
    content.vb: Public Function MoveSecondaryAsync(partitionSelector As PartitionSelector) As Task(Of MoveSecondaryResult)
    parameters:
    - id: partitionSelector
      type: System.Fabric.PartitionSelector
      description: >
        Move Secondary will be called on this Selected Partition.
    return:
      type: System.Threading.Tasks.Task{System.Fabric.Result.MoveSecondaryResult}
      description: A task with move secondary result
  overload: System.Fabric.FabricClient.FaultManagementClient.MoveSecondaryAsync*
  exceptions:
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: Retry is exhausted.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: >
      Invalid operation

      - If action called on stateless service.

      - If no active secondary replica exists

      - If not enough nodes available for action
  - type: System.Fabric.FabricException
    commentId: T:System.Fabric.FabricException
    description: "\nFabricErrorCode.AlreadyPrimaryReplica - If Primary replica for selected partition already exist on new node\nFabricErrorCode.AlreadySecondaryReplica - If active Secondary replica for selected partition already exist on new node\nFabricErrorCode.InvalidReplicaStateForReplicaOperation - If the target replica is not a secondary\nFabricErrorCode.ConstraintNotSatisfied - If the constraints for the new location of the replica would prohibit the move\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.FaultManagementClient.MoveSecondaryAsync(System.Fabric.PartitionSelector,System.Boolean,System.Threading.CancellationToken)
  commentId: M:System.Fabric.FabricClient.FaultManagementClient.MoveSecondaryAsync(System.Fabric.PartitionSelector,System.Boolean,System.Threading.CancellationToken)
  id: MoveSecondaryAsync(System.Fabric.PartitionSelector,System.Boolean,System.Threading.CancellationToken)
  parent: System.Fabric.FabricClient.FaultManagementClient
  langs:
  - csharp
  - vb
  name: MoveSecondaryAsync(PartitionSelector, Boolean, CancellationToken)
  nameWithType: FabricClient.FaultManagementClient.MoveSecondaryAsync(PartitionSelector, Boolean, CancellationToken)
  fullName: System.Fabric.FabricClient.FaultManagementClient.MoveSecondaryAsync(System.Fabric.PartitionSelector, System.Boolean, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.FaultManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: MoveSecondaryAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.FaultManagementClient.cs
    startLine: 1613
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\nMoves selected secondary replica from current node to new node in the cluster.\n"
  remarks: "\nThis API overload randomly selects current secondary\nnode for random secondary replica of the selected partition and new secondary node for replica movement\nThis selected replica will be moved to new node location from current node location.\nThis API is safe i.e. it will not cause quorum or data loss by itself unless additional faults or failures happen at the same time.\n"
  example: []
  syntax:
    content: public Task<MoveSecondaryResult> MoveSecondaryAsync(PartitionSelector partitionSelector, bool ignoreConstraints, CancellationToken token)
    content.vb: Public Function MoveSecondaryAsync(partitionSelector As PartitionSelector, ignoreConstraints As Boolean, token As CancellationToken) As Task(Of MoveSecondaryResult)
    parameters:
    - id: partitionSelector
      type: System.Fabric.PartitionSelector
      description: Move Secondary will be called on this Selected Partition.
    - id: ignoreConstraints
      type: System.Boolean
      description: Whether or not to ignore constraints when attempting to execute the move.
    - id: token
      type: System.Threading.CancellationToken
      description: The cancellation token
    return:
      type: System.Threading.Tasks.Task{System.Fabric.Result.MoveSecondaryResult}
      description: A task with move secondary result
  overload: System.Fabric.FabricClient.FaultManagementClient.MoveSecondaryAsync*
  exceptions:
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: Retry is exhausted.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: >
      Invalid operation

      - If action called on stateless service.

      - If no active secondary replica exists

      - If not enough nodes available for action
  - type: System.Fabric.FabricException
    commentId: T:System.Fabric.FabricException
    description: "\nFabricErrorCode.AlreadyPrimaryReplica - If Primary replica for selected partition already exist on new node\nFabricErrorCode.AlreadySecondaryReplica - If active Secondary replica for selected partition already exist on new node\nFabricErrorCode.InvalidReplicaStateForReplicaOperation - If the replica being moved is not a secondary\nFabricErrorCode.ConstraintNotSatisfied - If the constraints for the new location of the replica would prohibit the move\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.FaultManagementClient.MoveSecondaryAsync(System.Fabric.PartitionSelector,System.Threading.CancellationToken)
  commentId: M:System.Fabric.FabricClient.FaultManagementClient.MoveSecondaryAsync(System.Fabric.PartitionSelector,System.Threading.CancellationToken)
  id: MoveSecondaryAsync(System.Fabric.PartitionSelector,System.Threading.CancellationToken)
  parent: System.Fabric.FabricClient.FaultManagementClient
  langs:
  - csharp
  - vb
  name: MoveSecondaryAsync(PartitionSelector, CancellationToken)
  nameWithType: FabricClient.FaultManagementClient.MoveSecondaryAsync(PartitionSelector, CancellationToken)
  fullName: System.Fabric.FabricClient.FaultManagementClient.MoveSecondaryAsync(System.Fabric.PartitionSelector, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.FaultManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: MoveSecondaryAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.FaultManagementClient.cs
    startLine: 1645
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\nMoves selected secondary replica from current node to new node in the cluster.\n"
  remarks: "\nThis API overload randomly selects current secondary\nnode for random secondary replica of the selected partition and new secondary node for replica movement\nThis selected replica will be moved to new node location from current node location.\nThis API is safe i.e. it will not cause quorum or data loss by itself unless additional faults or failures happen at the same time.\n"
  example: []
  syntax:
    content: public Task<MoveSecondaryResult> MoveSecondaryAsync(PartitionSelector partitionSelector, CancellationToken token)
    content.vb: Public Function MoveSecondaryAsync(partitionSelector As PartitionSelector, token As CancellationToken) As Task(Of MoveSecondaryResult)
    parameters:
    - id: partitionSelector
      type: System.Fabric.PartitionSelector
      description: Move Secondary will be called on this Selected Partition.
    - id: token
      type: System.Threading.CancellationToken
      description: The cancellation token
    return:
      type: System.Threading.Tasks.Task{System.Fabric.Result.MoveSecondaryResult}
      description: A task with move secondary result
  overload: System.Fabric.FabricClient.FaultManagementClient.MoveSecondaryAsync*
  exceptions:
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: Retry is exhausted.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: >
      Invalid operation

      - If action called on stateless service.

      - If no active secondary replica exists

      - If not enough nodes available for action
  - type: System.Fabric.FabricException
    commentId: T:System.Fabric.FabricException
    description: "\nFabricErrorCode.AlreadyPrimaryReplica - If Primary replica for selected partition already exist on new node\nFabricErrorCode.AlreadySecondaryReplica - If active Secondary replica for selected partition already exist on new node\nFabricErrorCode.InvalidReplicaStateForReplicaOperation - If the replica being moved is not a secondary\nFabricErrorCode.ConstraintNotSatisfied - If the constraints for the new location of the replica would prohibit the move\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.FaultManagementClient.MoveSecondaryAsync(System.String,System.Fabric.PartitionSelector,System.Boolean)
  commentId: M:System.Fabric.FabricClient.FaultManagementClient.MoveSecondaryAsync(System.String,System.Fabric.PartitionSelector,System.Boolean)
  id: MoveSecondaryAsync(System.String,System.Fabric.PartitionSelector,System.Boolean)
  parent: System.Fabric.FabricClient.FaultManagementClient
  langs:
  - csharp
  - vb
  name: MoveSecondaryAsync(String, PartitionSelector, Boolean)
  nameWithType: FabricClient.FaultManagementClient.MoveSecondaryAsync(String, PartitionSelector, Boolean)
  fullName: System.Fabric.FabricClient.FaultManagementClient.MoveSecondaryAsync(System.String, System.Fabric.PartitionSelector, System.Boolean)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.FaultManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: MoveSecondaryAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.FaultManagementClient.cs
    startLine: 1677
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\nMoves selected secondary replica from current node to new node in the cluster.\n"
  remarks: >
    API uses the selected secondary replica inside partition selector structure

    specified by currentNodeName. This API overload randomly selects new

    secondary node for replica movement

    This selected replica will be moved to new node location from current node location.

    This API is safe i.e. it will not cause quorum or data loss by itself unless additional faults or failures happen at the same time.
  example: []
  syntax:
    content: public Task<MoveSecondaryResult> MoveSecondaryAsync(string currentNodeName, PartitionSelector partitionSelector, bool ignoreConstraints)
    content.vb: Public Function MoveSecondaryAsync(currentNodeName As String, partitionSelector As PartitionSelector, ignoreConstraints As Boolean) As Task(Of MoveSecondaryResult)
    parameters:
    - id: currentNodeName
      type: System.String
      description: node name where selected replica for move is currently present
    - id: partitionSelector
      type: System.Fabric.PartitionSelector
      description: Move Secondary will be called on this Selected Partition.
    - id: ignoreConstraints
      type: System.Boolean
      description: Whether or not to ignore constraints when attempting to execute the move.
    return:
      type: System.Threading.Tasks.Task{System.Fabric.Result.MoveSecondaryResult}
      description: A task with move secondary result
  overload: System.Fabric.FabricClient.FaultManagementClient.MoveSecondaryAsync*
  exceptions:
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: Retry is exhausted.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: >
      Invalid operation

      - If action called on stateless service.

      - If no active secondary replica exists

      - If not enough nodes available for action
  - type: System.Fabric.FabricException
    commentId: T:System.Fabric.FabricException
    description: "\nFabricErrorCode.AlreadyPrimaryReplica - If Primary replica for selected partition already exist on new node\nFabricErrorCode.AlreadySecondaryReplica - If active Secondary replica for selected partition already exist on new node\nFabricErrorCode.InvalidReplicaStateForReplicaOperation - If the replica being moved is not a secondary\nFabricErrorCode.ConstraintNotSatisfied - If the constraints for the new location of the replica would prohibit the move\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.FaultManagementClient.MoveSecondaryAsync(System.String,System.Fabric.PartitionSelector)
  commentId: M:System.Fabric.FabricClient.FaultManagementClient.MoveSecondaryAsync(System.String,System.Fabric.PartitionSelector)
  id: MoveSecondaryAsync(System.String,System.Fabric.PartitionSelector)
  parent: System.Fabric.FabricClient.FaultManagementClient
  langs:
  - csharp
  - vb
  name: MoveSecondaryAsync(String, PartitionSelector)
  nameWithType: FabricClient.FaultManagementClient.MoveSecondaryAsync(String, PartitionSelector)
  fullName: System.Fabric.FabricClient.FaultManagementClient.MoveSecondaryAsync(System.String, System.Fabric.PartitionSelector)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.FaultManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: MoveSecondaryAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.FaultManagementClient.cs
    startLine: 1710
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\nMoves selected secondary replica from current node to new node in the cluster.\n"
  remarks: >
    API uses the selected secondary replica inside partition selector structure

    specified by currentNodeName. This API overload randomly selects new

    secondary node for replica movement

    This selected replica will be moved to new node location from current node location.

    This API is safe i.e. it will not cause quorum or data loss by itself unless additional faults or failures happen at the same time.
  example: []
  syntax:
    content: public Task<MoveSecondaryResult> MoveSecondaryAsync(string currentNodeName, PartitionSelector partitionSelector)
    content.vb: Public Function MoveSecondaryAsync(currentNodeName As String, partitionSelector As PartitionSelector) As Task(Of MoveSecondaryResult)
    parameters:
    - id: currentNodeName
      type: System.String
      description: node name where selected replica for move is currently present
    - id: partitionSelector
      type: System.Fabric.PartitionSelector
      description: Move Secondary will be called on this Selected Partition.
    return:
      type: System.Threading.Tasks.Task{System.Fabric.Result.MoveSecondaryResult}
      description: A task with move secondary result
  overload: System.Fabric.FabricClient.FaultManagementClient.MoveSecondaryAsync*
  exceptions:
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: Retry is exhausted.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: >
      Invalid operation

      - If action called on stateless service.

      - If no active secondary replica exists

      - If not enough nodes available for action
  - type: System.Fabric.FabricException
    commentId: T:System.Fabric.FabricException
    description: "\nFabricErrorCode.AlreadyPrimaryReplica - If Primary replica for selected partition already exist on new node\nFabricErrorCode.AlreadySecondaryReplica - If active Secondary replica for selected partition already exist on new node\nFabricErrorCode.InvalidReplicaStateForReplicaOperation - If the target replica is not a secondary\nFabricErrorCode.ConstraintNotSatisfied - If the constraints for the new location of the replica would prohibit the move\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.FaultManagementClient.MoveSecondaryAsync(System.String,System.Fabric.PartitionSelector,System.Boolean,System.Threading.CancellationToken)
  commentId: M:System.Fabric.FabricClient.FaultManagementClient.MoveSecondaryAsync(System.String,System.Fabric.PartitionSelector,System.Boolean,System.Threading.CancellationToken)
  id: MoveSecondaryAsync(System.String,System.Fabric.PartitionSelector,System.Boolean,System.Threading.CancellationToken)
  parent: System.Fabric.FabricClient.FaultManagementClient
  langs:
  - csharp
  - vb
  name: MoveSecondaryAsync(String, PartitionSelector, Boolean, CancellationToken)
  nameWithType: FabricClient.FaultManagementClient.MoveSecondaryAsync(String, PartitionSelector, Boolean, CancellationToken)
  fullName: System.Fabric.FabricClient.FaultManagementClient.MoveSecondaryAsync(System.String, System.Fabric.PartitionSelector, System.Boolean, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.FaultManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: MoveSecondaryAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.FaultManagementClient.cs
    startLine: 1744
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\nMoves selected secondary replica from current node to new node in the cluster.\n"
  remarks: "\nAPI uses the selected secondary replica inside partition selector structure\nspecified by currentNodeName. This API overload randomly selects new\nsecondary node for replica movement\nThis selected replica will be moved to new node location from current node location.\nThis API is safe i.e. it will not cause quorum or data loss by itself unless additional faults or failures happen at the same time.\n"
  example: []
  syntax:
    content: public Task<MoveSecondaryResult> MoveSecondaryAsync(string currentNodeName, PartitionSelector partitionSelector, bool ignoreConstraints, CancellationToken token)
    content.vb: Public Function MoveSecondaryAsync(currentNodeName As String, partitionSelector As PartitionSelector, ignoreConstraints As Boolean, token As CancellationToken) As Task(Of MoveSecondaryResult)
    parameters:
    - id: currentNodeName
      type: System.String
      description: node name where selected replica for move is currently present
    - id: partitionSelector
      type: System.Fabric.PartitionSelector
      description: Move Secondary will be called on this Selected Partition.
    - id: ignoreConstraints
      type: System.Boolean
      description: Whether or not to ignore constraints when attempting to execute the move.
    - id: token
      type: System.Threading.CancellationToken
      description: The cancellation token
    return:
      type: System.Threading.Tasks.Task{System.Fabric.Result.MoveSecondaryResult}
      description: A task with move secondary result
  overload: System.Fabric.FabricClient.FaultManagementClient.MoveSecondaryAsync*
  exceptions:
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: Retry is exhausted.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: >
      Invalid operation

      - If action called on stateless service.

      - If no active secondary replica exists

      - If not enough nodes available for action
  - type: System.Fabric.FabricException
    commentId: T:System.Fabric.FabricException
    description: "\nFabricErrorCode.AlreadyPrimaryReplica - If Primary replica for selected partition already exist on new node\nFabricErrorCode.AlreadySecondaryReplica - If active Secondary replica for selected partition already exist on new node\nFabricErrorCode.InvalidReplicaStateForReplicaOperation - If the target replica is not a secondary\nFabricErrorCode.ConstraintNotSatisfied - If the constraints for the new location of the replica would prohibit the move\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.FaultManagementClient.MoveSecondaryAsync(System.String,System.Fabric.PartitionSelector,System.Threading.CancellationToken)
  commentId: M:System.Fabric.FabricClient.FaultManagementClient.MoveSecondaryAsync(System.String,System.Fabric.PartitionSelector,System.Threading.CancellationToken)
  id: MoveSecondaryAsync(System.String,System.Fabric.PartitionSelector,System.Threading.CancellationToken)
  parent: System.Fabric.FabricClient.FaultManagementClient
  langs:
  - csharp
  - vb
  name: MoveSecondaryAsync(String, PartitionSelector, CancellationToken)
  nameWithType: FabricClient.FaultManagementClient.MoveSecondaryAsync(String, PartitionSelector, CancellationToken)
  fullName: System.Fabric.FabricClient.FaultManagementClient.MoveSecondaryAsync(System.String, System.Fabric.PartitionSelector, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.FaultManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: MoveSecondaryAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.FaultManagementClient.cs
    startLine: 1780
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\nMoves selected secondary replica from current node to new node in the cluster.\n"
  remarks: "\nAPI uses the selected secondary replica inside partition selector structure\nspecified by currentNodeName. This API overload randomly selects new\nsecondary node for replica movement\nThis selected replica will be moved to new node location from current node location.\nThis API is safe i.e. it will not cause quorum or data loss by itself unless additional faults or failures happen at the same time.\n"
  example: []
  syntax:
    content: public Task<MoveSecondaryResult> MoveSecondaryAsync(string currentNodeName, PartitionSelector partitionSelector, CancellationToken token)
    content.vb: Public Function MoveSecondaryAsync(currentNodeName As String, partitionSelector As PartitionSelector, token As CancellationToken) As Task(Of MoveSecondaryResult)
    parameters:
    - id: currentNodeName
      type: System.String
      description: node name where selected replica for move is currently present
    - id: partitionSelector
      type: System.Fabric.PartitionSelector
      description: >
        Move Secondary will be called on this Selected Partition.
    - id: token
      type: System.Threading.CancellationToken
      description: The cancellation token
    return:
      type: System.Threading.Tasks.Task{System.Fabric.Result.MoveSecondaryResult}
      description: A task with move secondary result
  overload: System.Fabric.FabricClient.FaultManagementClient.MoveSecondaryAsync*
  exceptions:
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: Retry is exhausted.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: >
      Invalid operation

      - If action called on stateless service.

      - If no active secondary replica exists

      - If not enough nodes available for action
  - type: System.Fabric.FabricException
    commentId: T:System.Fabric.FabricException
    description: "\nFabricErrorCode.AlreadyPrimaryReplica - If Primary replica for selected partition already exist on new node\nFabricErrorCode.AlreadySecondaryReplica - If active Secondary replica for selected partition already exist on new node\nFabricErrorCode.InvalidReplicaStateForReplicaOperation - If the target replica is not a secondary\nFabricErrorCode.ConstraintNotSatisfied - If the constraints for the new location of the replica would prohibit the move\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.FaultManagementClient.MoveSecondaryAsync(System.String,System.String,System.Fabric.PartitionSelector,System.Boolean)
  commentId: M:System.Fabric.FabricClient.FaultManagementClient.MoveSecondaryAsync(System.String,System.String,System.Fabric.PartitionSelector,System.Boolean)
  id: MoveSecondaryAsync(System.String,System.String,System.Fabric.PartitionSelector,System.Boolean)
  parent: System.Fabric.FabricClient.FaultManagementClient
  langs:
  - csharp
  - vb
  name: MoveSecondaryAsync(String, String, PartitionSelector, Boolean)
  nameWithType: FabricClient.FaultManagementClient.MoveSecondaryAsync(String, String, PartitionSelector, Boolean)
  fullName: System.Fabric.FabricClient.FaultManagementClient.MoveSecondaryAsync(System.String, System.String, System.Fabric.PartitionSelector, System.Boolean)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.FaultManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: MoveSecondaryAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.FaultManagementClient.cs
    startLine: 1813
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\nMoves selected secondary replica from current node to new node in the cluster.\n"
  remarks: "\nAPI uses the selected secondary replica specified by currentNodeName and\nmoves it to new node location specified by newNodeName.\nThis API is safe i.e. it will not cause quorum or data loss by itself unless additional faults or failures happen at the same time.\n"
  example: []
  syntax:
    content: public Task<MoveSecondaryResult> MoveSecondaryAsync(string currentNodeName, string newNodeName, PartitionSelector partitionSelector, bool ignoreConstraints)
    content.vb: Public Function MoveSecondaryAsync(currentNodeName As String, newNodeName As String, partitionSelector As PartitionSelector, ignoreConstraints As Boolean) As Task(Of MoveSecondaryResult)
    parameters:
    - id: currentNodeName
      type: System.String
      description: node name where selected replica for move is currently present
    - id: newNodeName
      type: System.String
      description: node name where selected replica to be moved
    - id: partitionSelector
      type: System.Fabric.PartitionSelector
      description: Move Secondary will be called on this Selected Partition.
    - id: ignoreConstraints
      type: System.Boolean
      description: Whether or not to ignore constraints when attempting to execute the move.
    return:
      type: System.Threading.Tasks.Task{System.Fabric.Result.MoveSecondaryResult}
      description: A task with move secondary result
  overload: System.Fabric.FabricClient.FaultManagementClient.MoveSecondaryAsync*
  exceptions:
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: Retry is exhausted.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: >
      Invalid operation

      - If action called on stateless service.

      - If no active secondary replica exists

      - If not enough nodes available for action
  - type: System.Fabric.FabricException
    commentId: T:System.Fabric.FabricException
    description: "\nFabricErrorCode.AlreadyPrimaryReplica - If Primary replica for selected partition already exist on new node\nFabricErrorCode.AlreadySecondaryReplica - If active Secondary replica for selected partition already exist on new node\nFabricErrorCode.InvalidReplicaStateForReplicaOperation - If the target replica is not a secondary\nFabricErrorCode.ConstraintNotSatisfied - If the constraints for the new location of the replica would prohibit the move\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.FaultManagementClient.MoveSecondaryAsync(System.String,System.String,System.Fabric.PartitionSelector)
  commentId: M:System.Fabric.FabricClient.FaultManagementClient.MoveSecondaryAsync(System.String,System.String,System.Fabric.PartitionSelector)
  id: MoveSecondaryAsync(System.String,System.String,System.Fabric.PartitionSelector)
  parent: System.Fabric.FabricClient.FaultManagementClient
  langs:
  - csharp
  - vb
  name: MoveSecondaryAsync(String, String, PartitionSelector)
  nameWithType: FabricClient.FaultManagementClient.MoveSecondaryAsync(String, String, PartitionSelector)
  fullName: System.Fabric.FabricClient.FaultManagementClient.MoveSecondaryAsync(System.String, System.String, System.Fabric.PartitionSelector)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.FaultManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: MoveSecondaryAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.FaultManagementClient.cs
    startLine: 1847
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\nMoves selected secondary replica from current node to new node in the cluster.\n"
  remarks: "\nAPI uses the selected secondary replica specified by currentNodeName and\nmoves it to new node location specified by newNodeName.\nThis API is safe i.e. it will not cause quorum or data loss by itself unless additional faults or failures happen at the same time.\n"
  example: []
  syntax:
    content: public Task<MoveSecondaryResult> MoveSecondaryAsync(string currentNodeName, string newNodeName, PartitionSelector partitionSelector)
    content.vb: Public Function MoveSecondaryAsync(currentNodeName As String, newNodeName As String, partitionSelector As PartitionSelector) As Task(Of MoveSecondaryResult)
    parameters:
    - id: currentNodeName
      type: System.String
      description: node name where selected replica for move is currently present
    - id: newNodeName
      type: System.String
      description: node name where selected replica to be moved
    - id: partitionSelector
      type: System.Fabric.PartitionSelector
      description: >
        Move Secondary will be called on this Selected Partition.
    return:
      type: System.Threading.Tasks.Task{System.Fabric.Result.MoveSecondaryResult}
      description: A task with move secondary result
  overload: System.Fabric.FabricClient.FaultManagementClient.MoveSecondaryAsync*
  exceptions:
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: Retry is exhausted.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: >
      Invalid operation

      - If action called on stateless service.

      - If no active secondary replica exists

      - If not enough nodes available for action
  - type: System.Fabric.FabricException
    commentId: T:System.Fabric.FabricException
    description: "\nFabricErrorCode.AlreadyPrimaryReplica - If Primary replica for selected partition already exist on new node\nFabricErrorCode.AlreadySecondaryReplica - If active Secondary replica for selected partition already exist on new node\nFabricErrorCode.InvalidReplicaStateForReplicaOperation - If the target replica is not a secondary\nFabricErrorCode.ConstraintNotSatisfied - If the constraints for the new location of the replica would prohibit the move\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.FaultManagementClient.MoveSecondaryAsync(System.String,System.String,System.Fabric.PartitionSelector,System.Boolean,System.Threading.CancellationToken)
  commentId: M:System.Fabric.FabricClient.FaultManagementClient.MoveSecondaryAsync(System.String,System.String,System.Fabric.PartitionSelector,System.Boolean,System.Threading.CancellationToken)
  id: MoveSecondaryAsync(System.String,System.String,System.Fabric.PartitionSelector,System.Boolean,System.Threading.CancellationToken)
  parent: System.Fabric.FabricClient.FaultManagementClient
  langs:
  - csharp
  - vb
  name: MoveSecondaryAsync(String, String, PartitionSelector, Boolean, CancellationToken)
  nameWithType: FabricClient.FaultManagementClient.MoveSecondaryAsync(String, String, PartitionSelector, Boolean, CancellationToken)
  fullName: System.Fabric.FabricClient.FaultManagementClient.MoveSecondaryAsync(System.String, System.String, System.Fabric.PartitionSelector, System.Boolean, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.FaultManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: MoveSecondaryAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.FaultManagementClient.cs
    startLine: 1881
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\nMoves selected secondary replica from current node to new node in the cluster.\n"
  remarks: "\nAPI uses the selected secondary replica specified by currentNodeName and\nmoves it to new node location specified by newNodeName.\nThis API is safe i.e. it will not cause quorum or data loss by itself unless additional faults or failures happen at the same time.\n"
  example: []
  syntax:
    content: public Task<MoveSecondaryResult> MoveSecondaryAsync(string currentNodeName, string newNodeName, PartitionSelector partitionSelector, bool ignoreConstraints, CancellationToken token)
    content.vb: Public Function MoveSecondaryAsync(currentNodeName As String, newNodeName As String, partitionSelector As PartitionSelector, ignoreConstraints As Boolean, token As CancellationToken) As Task(Of MoveSecondaryResult)
    parameters:
    - id: currentNodeName
      type: System.String
      description: node name where selected replica for move is currently present
    - id: newNodeName
      type: System.String
      description: node name where selected replica to be moved
    - id: partitionSelector
      type: System.Fabric.PartitionSelector
      description: Move Secondary will be called on this Selected Partition.
    - id: ignoreConstraints
      type: System.Boolean
      description: Whether or not to ignore constraints when attempting to execute the move.
    - id: token
      type: System.Threading.CancellationToken
      description: The cancellation token
    return:
      type: System.Threading.Tasks.Task{System.Fabric.Result.MoveSecondaryResult}
      description: A task with move secondary result
  overload: System.Fabric.FabricClient.FaultManagementClient.MoveSecondaryAsync*
  exceptions:
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: Retry is exhausted.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: >
      Invalid operation

      - If action called on stateless service.

      - If no active secondary replica exists

      - If not enough nodes available for action
  - type: System.Fabric.FabricException
    commentId: T:System.Fabric.FabricException
    description: "\nFabricErrorCode.AlreadyPrimaryReplica - If Primary replica for selected partition already exist on new node\nFabricErrorCode.AlreadySecondaryReplica - If active Secondary replica for selected partition already exist on new node\nFabricErrorCode.InvalidReplicaStateForReplicaOperation - If the target replica is not a secondary\nFabricErrorCode.ConstraintNotSatisfied - If the constraints for the new location of the replica would prohibit the move\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.FaultManagementClient.MoveSecondaryAsync(System.String,System.String,System.Fabric.PartitionSelector,System.Threading.CancellationToken)
  commentId: M:System.Fabric.FabricClient.FaultManagementClient.MoveSecondaryAsync(System.String,System.String,System.Fabric.PartitionSelector,System.Threading.CancellationToken)
  id: MoveSecondaryAsync(System.String,System.String,System.Fabric.PartitionSelector,System.Threading.CancellationToken)
  parent: System.Fabric.FabricClient.FaultManagementClient
  langs:
  - csharp
  - vb
  name: MoveSecondaryAsync(String, String, PartitionSelector, CancellationToken)
  nameWithType: FabricClient.FaultManagementClient.MoveSecondaryAsync(String, String, PartitionSelector, CancellationToken)
  fullName: System.Fabric.FabricClient.FaultManagementClient.MoveSecondaryAsync(System.String, System.String, System.Fabric.PartitionSelector, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.FaultManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: MoveSecondaryAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.FaultManagementClient.cs
    startLine: 1916
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\nMoves selected secondary replica from current node to new node in the cluster.\n"
  remarks: "\nAPI uses the selected secondary replica specified by currentNodeName and\nmoves it to new node location specified by newNodeName.\nThis API is safe i.e. it will not cause quorum or data loss by itself unless additional faults or failures happen at the same time.\n"
  example: []
  syntax:
    content: public Task<MoveSecondaryResult> MoveSecondaryAsync(string currentNodeName, string newNodeName, PartitionSelector partitionSelector, CancellationToken token)
    content.vb: Public Function MoveSecondaryAsync(currentNodeName As String, newNodeName As String, partitionSelector As PartitionSelector, token As CancellationToken) As Task(Of MoveSecondaryResult)
    parameters:
    - id: currentNodeName
      type: System.String
      description: node name where selected replica for move is currently present
    - id: newNodeName
      type: System.String
      description: node name where selected replica to be moved
    - id: partitionSelector
      type: System.Fabric.PartitionSelector
      description: Move Secondary will be called on this Selected Partition.
    - id: token
      type: System.Threading.CancellationToken
      description: The cancellation token
    return:
      type: System.Threading.Tasks.Task{System.Fabric.Result.MoveSecondaryResult}
      description: A task with move secondary result
  overload: System.Fabric.FabricClient.FaultManagementClient.MoveSecondaryAsync*
  exceptions:
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: Retry is exhausted.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: >
      Invalid operation

      - If action called on stateless service.

      - If no active secondary replica exists

      - If not enough nodes available for action
  - type: System.Fabric.FabricException
    commentId: T:System.Fabric.FabricException
    description: "\nFabricErrorCode.AlreadyPrimaryReplica - If Primary replica for selected partition already exist on new node\nFabricErrorCode.AlreadySecondaryReplica - If active Secondary replica for selected partition already exist on new node\nFabricErrorCode.InvalidReplicaStateForReplicaOperation - If the target replica is not a secondary\nFabricErrorCode.ConstraintNotSatisfied - If the constraints for the new location of the replica would prohibit the move\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.FaultManagementClient.MoveSecondaryAsync(System.String,System.Fabric.PartitionSelector,System.Boolean,System.TimeSpan,System.Threading.CancellationToken)
  commentId: M:System.Fabric.FabricClient.FaultManagementClient.MoveSecondaryAsync(System.String,System.Fabric.PartitionSelector,System.Boolean,System.TimeSpan,System.Threading.CancellationToken)
  id: MoveSecondaryAsync(System.String,System.Fabric.PartitionSelector,System.Boolean,System.TimeSpan,System.Threading.CancellationToken)
  parent: System.Fabric.FabricClient.FaultManagementClient
  langs:
  - csharp
  - vb
  name: MoveSecondaryAsync(String, PartitionSelector, Boolean, TimeSpan, CancellationToken)
  nameWithType: FabricClient.FaultManagementClient.MoveSecondaryAsync(String, PartitionSelector, Boolean, TimeSpan, CancellationToken)
  fullName: System.Fabric.FabricClient.FaultManagementClient.MoveSecondaryAsync(System.String, System.Fabric.PartitionSelector, System.Boolean, System.TimeSpan, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.FaultManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: MoveSecondaryAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.FaultManagementClient.cs
    startLine: 1950
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\nMoves selected secondary replica from current node to new node in the cluster.\n"
  remarks: >
    API uses the selected secondary replica specified by currentNodeName.

    This selected replica will be moved to the randomly selected new node location.

    This API is safe i.e. it will not cause quorum or data loss by itself unless additional faults or failures happen at the same time.
  example: []
  syntax:
    content: public Task<MoveSecondaryResult> MoveSecondaryAsync(string currentNodeName, PartitionSelector partitionSelector, bool ignoreConstraints, TimeSpan operationTimeout, CancellationToken token)
    content.vb: Public Function MoveSecondaryAsync(currentNodeName As String, partitionSelector As PartitionSelector, ignoreConstraints As Boolean, operationTimeout As TimeSpan, token As CancellationToken) As Task(Of MoveSecondaryResult)
    parameters:
    - id: currentNodeName
      type: System.String
      description: node name where selected replica for move is currently present
    - id: partitionSelector
      type: System.Fabric.PartitionSelector
      description: Move Secondary will be called on this Selected Partition.
    - id: ignoreConstraints
      type: System.Boolean
      description: Whether or not to ignore constraints when attempting to execute the move.
    - id: operationTimeout
      type: System.TimeSpan
      description: The timeout for this API call.
    - id: token
      type: System.Threading.CancellationToken
      description: The cancellation token
    return:
      type: System.Threading.Tasks.Task{System.Fabric.Result.MoveSecondaryResult}
      description: A task with move secondary result
  overload: System.Fabric.FabricClient.FaultManagementClient.MoveSecondaryAsync*
  exceptions:
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: Retry is exhausted.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: >
      Invalid operation

      - If action called on stateless service.

      - If no active secondary replica exists

      - If not enough nodes available for action
  - type: System.Fabric.FabricException
    commentId: T:System.Fabric.FabricException
    description: "\nFabricErrorCode.AlreadyPrimaryReplica - If Primary replica for selected partition already exist on new node\nFabricErrorCode.AlreadySecondaryReplica - If active Secondary replica for selected partition already exist on new node\nFabricErrorCode.InvalidReplicaStateForReplicaOperation - If the target replica is not a secondary\nFabricErrorCode.ConstraintNotSatisfied - If the constraints for the new location of the replica would prohibit the move\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.FaultManagementClient.MoveSecondaryAsync(System.String,System.Fabric.PartitionSelector,System.TimeSpan,System.Threading.CancellationToken)
  commentId: M:System.Fabric.FabricClient.FaultManagementClient.MoveSecondaryAsync(System.String,System.Fabric.PartitionSelector,System.TimeSpan,System.Threading.CancellationToken)
  id: MoveSecondaryAsync(System.String,System.Fabric.PartitionSelector,System.TimeSpan,System.Threading.CancellationToken)
  parent: System.Fabric.FabricClient.FaultManagementClient
  langs:
  - csharp
  - vb
  name: MoveSecondaryAsync(String, PartitionSelector, TimeSpan, CancellationToken)
  nameWithType: FabricClient.FaultManagementClient.MoveSecondaryAsync(String, PartitionSelector, TimeSpan, CancellationToken)
  fullName: System.Fabric.FabricClient.FaultManagementClient.MoveSecondaryAsync(System.String, System.Fabric.PartitionSelector, System.TimeSpan, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.FaultManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: MoveSecondaryAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.FaultManagementClient.cs
    startLine: 1984
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\nMoves selected secondary replica from current node to new node in the cluster.\n"
  remarks: >
    API uses the selected secondary replica specified by currentNodeName.

    This selected replica will be moved to the randomly selected new node location.

    This API is safe i.e. it will not cause quorum or data loss by itself unless additional faults or failures happen at the same time.
  example: []
  syntax:
    content: public Task<MoveSecondaryResult> MoveSecondaryAsync(string currentNodeName, PartitionSelector partitionSelector, TimeSpan operationTimeout, CancellationToken token)
    content.vb: Public Function MoveSecondaryAsync(currentNodeName As String, partitionSelector As PartitionSelector, operationTimeout As TimeSpan, token As CancellationToken) As Task(Of MoveSecondaryResult)
    parameters:
    - id: currentNodeName
      type: System.String
      description: node name where selected replica for move is currently present
    - id: partitionSelector
      type: System.Fabric.PartitionSelector
      description: Move Secondary will be called on this Selected Partition.
    - id: operationTimeout
      type: System.TimeSpan
      description: The timeout for this API call.
    - id: token
      type: System.Threading.CancellationToken
      description: The cancellation token
    return:
      type: System.Threading.Tasks.Task{System.Fabric.Result.MoveSecondaryResult}
      description: A task with move secondary result
  overload: System.Fabric.FabricClient.FaultManagementClient.MoveSecondaryAsync*
  exceptions:
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: Retry is exhausted.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: >
      Invalid operation

      - If action called on stateless service.

      - If no active secondary replica exists

      - If not enough nodes available for action
  - type: System.Fabric.FabricException
    commentId: T:System.Fabric.FabricException
    description: "\nFabricErrorCode.AlreadyPrimaryReplica - If Primary replica for selected partition already exist on new node\nFabricErrorCode.AlreadySecondaryReplica - If active Secondary replica for selected partition already exist on new node\nFabricErrorCode.InvalidReplicaStateForReplicaOperation - If the target replica is not a secondary\nFabricErrorCode.ConstraintNotSatisfied - If the constraints for the new location of the replica would prohibit the move\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.FaultManagementClient.MoveSecondaryAsync(System.Fabric.PartitionSelector,System.Boolean,System.TimeSpan,System.Threading.CancellationToken)
  commentId: M:System.Fabric.FabricClient.FaultManagementClient.MoveSecondaryAsync(System.Fabric.PartitionSelector,System.Boolean,System.TimeSpan,System.Threading.CancellationToken)
  id: MoveSecondaryAsync(System.Fabric.PartitionSelector,System.Boolean,System.TimeSpan,System.Threading.CancellationToken)
  parent: System.Fabric.FabricClient.FaultManagementClient
  langs:
  - csharp
  - vb
  name: MoveSecondaryAsync(PartitionSelector, Boolean, TimeSpan, CancellationToken)
  nameWithType: FabricClient.FaultManagementClient.MoveSecondaryAsync(PartitionSelector, Boolean, TimeSpan, CancellationToken)
  fullName: System.Fabric.FabricClient.FaultManagementClient.MoveSecondaryAsync(System.Fabric.PartitionSelector, System.Boolean, System.TimeSpan, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.FaultManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: MoveSecondaryAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.FaultManagementClient.cs
    startLine: 2018
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\nMoves selected secondary replica from current node to new node in the cluster.\n"
  remarks: "\nAPI uses the randomly selected secondary replica for specified partition selector.\nThis API overload randomly selects new secondary node location for replica movement\nThis selected replica will be moved to new node location from current node location.\nThis API is safe i.e. it will not cause quorum or data loss by itself unless additional faults or failures happen at the same time.\n"
  example: []
  syntax:
    content: public Task<MoveSecondaryResult> MoveSecondaryAsync(PartitionSelector partitionSelector, bool ignoreConstraints, TimeSpan operationTimeout, CancellationToken token)
    content.vb: Public Function MoveSecondaryAsync(partitionSelector As PartitionSelector, ignoreConstraints As Boolean, operationTimeout As TimeSpan, token As CancellationToken) As Task(Of MoveSecondaryResult)
    parameters:
    - id: partitionSelector
      type: System.Fabric.PartitionSelector
      description: Move Secondary will be called on this Selected Partition.
    - id: ignoreConstraints
      type: System.Boolean
      description: Whether or not to ignore constraints when attempting to execute the move.
    - id: operationTimeout
      type: System.TimeSpan
      description: The timeout for this API call.
    - id: token
      type: System.Threading.CancellationToken
      description: The cancellation token
    return:
      type: System.Threading.Tasks.Task{System.Fabric.Result.MoveSecondaryResult}
      description: A task with move secondary result
  overload: System.Fabric.FabricClient.FaultManagementClient.MoveSecondaryAsync*
  exceptions:
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: Retry is exhausted.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: >
      Invalid operation

      - If action called on stateless service.

      - If no active secondary replica exists

      - If not enough nodes available for action
  - type: System.Fabric.FabricException
    commentId: T:System.Fabric.FabricException
    description: "\nFabricErrorCode.AlreadyPrimaryReplica - If Primary replica for selected partition already exist on new node\nFabricErrorCode.AlreadySecondaryReplica - Active secondary replica for selected partition already exist on new node\nFabricErrorCode.InvalidReplicaStateForReplicaOperation - If the target replica is not a secondary\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.FaultManagementClient.MoveSecondaryAsync(System.Fabric.PartitionSelector,System.TimeSpan,System.Threading.CancellationToken)
  commentId: M:System.Fabric.FabricClient.FaultManagementClient.MoveSecondaryAsync(System.Fabric.PartitionSelector,System.TimeSpan,System.Threading.CancellationToken)
  id: MoveSecondaryAsync(System.Fabric.PartitionSelector,System.TimeSpan,System.Threading.CancellationToken)
  parent: System.Fabric.FabricClient.FaultManagementClient
  langs:
  - csharp
  - vb
  name: MoveSecondaryAsync(PartitionSelector, TimeSpan, CancellationToken)
  nameWithType: FabricClient.FaultManagementClient.MoveSecondaryAsync(PartitionSelector, TimeSpan, CancellationToken)
  fullName: System.Fabric.FabricClient.FaultManagementClient.MoveSecondaryAsync(System.Fabric.PartitionSelector, System.TimeSpan, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.FaultManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: MoveSecondaryAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.FaultManagementClient.cs
    startLine: 2051
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\nMoves selected secondary replica from current node to new node in the cluster.\n"
  remarks: "\nAPI uses the randomly selected secondary replica for specified partition selector.\nThis API overload randomly selects new secondary node location for replica movement\nThis selected replica will be moved to new node location from current node location.\nThis API is safe i.e. it will not cause quorum or data loss by itself unless additional faults or failures happen at the same time.\n"
  example: []
  syntax:
    content: public Task<MoveSecondaryResult> MoveSecondaryAsync(PartitionSelector partitionSelector, TimeSpan operationTimeout, CancellationToken token)
    content.vb: Public Function MoveSecondaryAsync(partitionSelector As PartitionSelector, operationTimeout As TimeSpan, token As CancellationToken) As Task(Of MoveSecondaryResult)
    parameters:
    - id: partitionSelector
      type: System.Fabric.PartitionSelector
      description: Move Secondary will be called on this Selected Partition.
    - id: operationTimeout
      type: System.TimeSpan
      description: The timeout for this API call.
    - id: token
      type: System.Threading.CancellationToken
      description: The cancellation token
    return:
      type: System.Threading.Tasks.Task{System.Fabric.Result.MoveSecondaryResult}
      description: A task with move secondary result
  overload: System.Fabric.FabricClient.FaultManagementClient.MoveSecondaryAsync*
  exceptions:
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: Retry is exhausted.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: >
      Invalid operation

      - If action called on stateless service.

      - If no active secondary replica exists

      - If not enough nodes available for action
  - type: System.Fabric.FabricException
    commentId: T:System.Fabric.FabricException
    description: "\nFabricErrorCode.AlreadyPrimaryReplica - If Primary replica for selected partition already exist on new node\nFabricErrorCode.AlreadySecondaryReplica - Active secondary replica for selected partition already exist on new node\nFabricErrorCode.InvalidReplicaStateForReplicaOperation - If the target replica is not a secondary\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.FaultManagementClient.MoveSecondaryAsync(System.String,System.String,System.Fabric.PartitionSelector,System.Boolean,System.TimeSpan,System.Threading.CancellationToken)
  commentId: M:System.Fabric.FabricClient.FaultManagementClient.MoveSecondaryAsync(System.String,System.String,System.Fabric.PartitionSelector,System.Boolean,System.TimeSpan,System.Threading.CancellationToken)
  id: MoveSecondaryAsync(System.String,System.String,System.Fabric.PartitionSelector,System.Boolean,System.TimeSpan,System.Threading.CancellationToken)
  parent: System.Fabric.FabricClient.FaultManagementClient
  langs:
  - csharp
  - vb
  name: MoveSecondaryAsync(String, String, PartitionSelector, Boolean, TimeSpan, CancellationToken)
  nameWithType: FabricClient.FaultManagementClient.MoveSecondaryAsync(String, String, PartitionSelector, Boolean, TimeSpan, CancellationToken)
  fullName: System.Fabric.FabricClient.FaultManagementClient.MoveSecondaryAsync(System.String, System.String, System.Fabric.PartitionSelector, System.Boolean, System.TimeSpan, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.FaultManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: MoveSecondaryAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.FaultManagementClient.cs
    startLine: 2085
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\nMoves selected secondary replica from current node to new node in the cluster.\n"
  remarks: "\nAPI uses the selected secondary replica inside partition selector structure\nspecified by currentNodeName location. This selected replica will be moved to newNodeName location from current node location.\nThis API is safe i.e. it will not cause quorum or data loss by itself unless additional faults or failures happen at the same time.\n"
  example: []
  syntax:
    content: public Task<MoveSecondaryResult> MoveSecondaryAsync(string currentNodeName, string newNodeName, PartitionSelector partitionSelector, bool ignoreConstraints, TimeSpan operationTimeout, CancellationToken token)
    content.vb: Public Function MoveSecondaryAsync(currentNodeName As String, newNodeName As String, partitionSelector As PartitionSelector, ignoreConstraints As Boolean, operationTimeout As TimeSpan, token As CancellationToken) As Task(Of MoveSecondaryResult)
    parameters:
    - id: currentNodeName
      type: System.String
      description: node name where selected replica for move is currently present
    - id: newNodeName
      type: System.String
      description: node name where selected replica to be moved
    - id: partitionSelector
      type: System.Fabric.PartitionSelector
      description: Move Secondary will be called on this Selected Partition.
    - id: ignoreConstraints
      type: System.Boolean
      description: Whether or not to ignore constraints when attempting to execute the move.
    - id: operationTimeout
      type: System.TimeSpan
      description: The timeout for this API call.
    - id: token
      type: System.Threading.CancellationToken
      description: The cancellation token
    return:
      type: System.Threading.Tasks.Task{System.Fabric.Result.MoveSecondaryResult}
      description: A task with move secondary result
  overload: System.Fabric.FabricClient.FaultManagementClient.MoveSecondaryAsync*
  exceptions:
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: Retry is exhausted.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: >
      Invalid operation

      - If action called on stateless service.

      - If no active secondary replica exists

      - If not enough nodes available for action
  - type: System.Fabric.FabricException
    commentId: T:System.Fabric.FabricException
    description: "\nFabricErrorCode.AlreadyPrimaryReplica - If Primary replica for selected partition already exist on new node\nFabricErrorCode.AlreadySecondaryReplica - Active secondary replica for selected partition already exist on new node\nFabricErrorCode.InvalidReplicaStateForReplicaOperation - If the target replica is not a secondary\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.FaultManagementClient.MoveSecondaryAsync(System.String,System.String,System.Fabric.PartitionSelector,System.TimeSpan,System.Threading.CancellationToken)
  commentId: M:System.Fabric.FabricClient.FaultManagementClient.MoveSecondaryAsync(System.String,System.String,System.Fabric.PartitionSelector,System.TimeSpan,System.Threading.CancellationToken)
  id: MoveSecondaryAsync(System.String,System.String,System.Fabric.PartitionSelector,System.TimeSpan,System.Threading.CancellationToken)
  parent: System.Fabric.FabricClient.FaultManagementClient
  langs:
  - csharp
  - vb
  name: MoveSecondaryAsync(String, String, PartitionSelector, TimeSpan, CancellationToken)
  nameWithType: FabricClient.FaultManagementClient.MoveSecondaryAsync(String, String, PartitionSelector, TimeSpan, CancellationToken)
  fullName: System.Fabric.FabricClient.FaultManagementClient.MoveSecondaryAsync(System.String, System.String, System.Fabric.PartitionSelector, System.TimeSpan, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.FaultManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: MoveSecondaryAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.FaultManagementClient.cs
    startLine: 2128
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\nMoves selected secondary replica from current node to new node in the cluster.\n"
  remarks: "\nAPI uses the selected secondary replica inside partition selector structure\nspecified by currentNodeName location. This selected replica will be moved to newNodeName location from current node location.\nThis API is safe i.e. it will not cause quorum or data loss by itself unless additional faults or failures happen at the same time.\n"
  example: []
  syntax:
    content: public Task<MoveSecondaryResult> MoveSecondaryAsync(string currentNodeName, string newNodeName, PartitionSelector partitionSelector, TimeSpan operationTimeout, CancellationToken token)
    content.vb: Public Function MoveSecondaryAsync(currentNodeName As String, newNodeName As String, partitionSelector As PartitionSelector, operationTimeout As TimeSpan, token As CancellationToken) As Task(Of MoveSecondaryResult)
    parameters:
    - id: currentNodeName
      type: System.String
      description: node name where selected replica for move is currently present
    - id: newNodeName
      type: System.String
      description: node name where selected replica to be moved
    - id: partitionSelector
      type: System.Fabric.PartitionSelector
      description: Move Secondary will be called on this Selected Partition.
    - id: operationTimeout
      type: System.TimeSpan
      description: The timeout for this API call.
    - id: token
      type: System.Threading.CancellationToken
      description: The cancellation token
    return:
      type: System.Threading.Tasks.Task{System.Fabric.Result.MoveSecondaryResult}
      description: A task with move secondary result
  overload: System.Fabric.FabricClient.FaultManagementClient.MoveSecondaryAsync*
  exceptions:
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: Retry is exhausted.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: >
      Invalid operation

      - If action called on stateless service.

      - If no active secondary replica exists

      - If not enough nodes available for action
  - type: System.Fabric.FabricException
    commentId: T:System.Fabric.FabricException
    description: "\nFabricErrorCode.AlreadyPrimaryReplica - If Primary replica for selected partition already exist on new node\nFabricErrorCode.AlreadySecondaryReplica - Active secondary replica for selected partition already exist on new node\nFabricErrorCode.InvalidReplicaStateForReplicaOperation - If the target replica is not a secondary\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: System.Fabric
  commentId: N:System.Fabric
  isExternal: false
  name: System.Fabric
  nameWithType: System.Fabric
  fullName: System.Fabric
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.FabricClient.FaultManagementClient.System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
  commentId: M:System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  parent: System.Fabric.Messaging.Stream.ByteArraySerializer
  definition: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  name: Serialize<FabricClient.FaultManagementClient>()
  nameWithType: ByteArraySerializer.Serialize<FabricClient.FaultManagementClient>()
  fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<System.Fabric.FabricClient.FaultManagementClient>()
  nameWithType.vb: ByteArraySerializer.Serialize(Of FabricClient.FaultManagementClient)()
  fullname.vb: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of System.Fabric.FabricClient.FaultManagementClient)()
  name.vb: Serialize(Of FabricClient.FaultManagementClient)()
  spec.csharp:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
    name: Serialize<FabricClient.FaultManagementClient>
    nameWithType: ByteArraySerializer.Serialize<FabricClient.FaultManagementClient>
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<System.Fabric.FabricClient.FaultManagementClient>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
    name: Serialize(Of FabricClient.FaultManagementClient)
    nameWithType: ByteArraySerializer.Serialize(Of FabricClient.FaultManagementClient)
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of System.Fabric.FabricClient.FaultManagementClient)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  commentId: M:System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  isExternal: false
  name: Serialize<T>(T)
  nameWithType: ByteArraySerializer.Serialize<T>(T)
  fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<T>(T)
  nameWithType.vb: ByteArraySerializer.Serialize(Of T)(T)
  fullname.vb: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of T)(T)
  name.vb: Serialize(Of T)(T)
  spec.csharp:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
    name: Serialize<T>
    nameWithType: ByteArraySerializer.Serialize<T>
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
    name: Serialize(Of T)
    nameWithType: ByteArraySerializer.Serialize(Of T)
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.Messaging.Stream.ByteArraySerializer
  commentId: T:System.Fabric.Messaging.Stream.ByteArraySerializer
  parent: System.Fabric.Messaging.Stream
  isExternal: false
  name: ByteArraySerializer
  nameWithType: ByteArraySerializer
  fullName: System.Fabric.Messaging.Stream.ByteArraySerializer
- uid: System.Fabric.Messaging.Stream
  commentId: N:System.Fabric.Messaging.Stream
  isExternal: false
  name: System.Fabric.Messaging.Stream
  nameWithType: System.Fabric.Messaging.Stream
  fullName: System.Fabric.Messaging.Stream
- uid: System.Fabric.FabricException.ErrorCode
  commentId: P:System.Fabric.FabricException.ErrorCode
  parent: System.Fabric.FabricException
  isExternal: false
  name: ErrorCode
  nameWithType: FabricException.ErrorCode
  fullName: System.Fabric.FabricException.ErrorCode
- uid: System.Fabric.FabricClient.FaultManagementClient.RestartNodeAsync*
  commentId: Overload:System.Fabric.FabricClient.FaultManagementClient.RestartNodeAsync
  isExternal: false
  name: RestartNodeAsync
  nameWithType: FabricClient.FaultManagementClient.RestartNodeAsync
  fullName: System.Fabric.FabricClient.FaultManagementClient.RestartNodeAsync
- uid: System.Fabric.FabricException
  commentId: T:System.Fabric.FabricException
  parent: System.Fabric
  isExternal: false
  name: FabricException
  nameWithType: FabricException
  fullName: System.Fabric.FabricException
- uid: System.TimeoutException
  commentId: T:System.TimeoutException
- uid: System.ArgumentNullException
  commentId: T:System.ArgumentNullException
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Numerics.BigInteger
  commentId: T:System.Numerics.BigInteger
  parent: System.Numerics
  isExternal: true
  name: BigInteger
  nameWithType: BigInteger
  fullName: System.Numerics.BigInteger
- uid: System.Fabric.CompletionMode
  commentId: T:System.Fabric.CompletionMode
  parent: System.Fabric
  isExternal: false
  name: CompletionMode
  nameWithType: CompletionMode
  fullName: System.Fabric.CompletionMode
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task{System.Fabric.Result.RestartNodeResult}
  commentId: T:System.Threading.Tasks.Task{System.Fabric.Result.RestartNodeResult}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<RestartNodeResult>
  nameWithType: Task<RestartNodeResult>
  fullName: System.Threading.Tasks.Task<System.Fabric.Result.RestartNodeResult>
  nameWithType.vb: Task(Of RestartNodeResult)
  fullname.vb: System.Threading.Tasks.Task(Of System.Fabric.Result.RestartNodeResult)
  name.vb: Task(Of RestartNodeResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Fabric.Result.RestartNodeResult
    name: RestartNodeResult
    nameWithType: RestartNodeResult
    fullName: System.Fabric.Result.RestartNodeResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Fabric.Result.RestartNodeResult
    name: RestartNodeResult
    nameWithType: RestartNodeResult
    fullName: System.Fabric.Result.RestartNodeResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Numerics
  commentId: N:System.Numerics
  isExternal: false
  name: System.Numerics
  nameWithType: System.Numerics
  fullName: System.Numerics
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: false
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullname.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: System.TimeSpan
  commentId: T:System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Fabric.ReplicaSelector
  commentId: T:System.Fabric.ReplicaSelector
  parent: System.Fabric
  isExternal: false
  name: ReplicaSelector
  nameWithType: ReplicaSelector
  fullName: System.Fabric.ReplicaSelector
- uid: System.Fabric.FabricClient.FaultManagementClient.StartNodeAsync*
  commentId: Overload:System.Fabric.FabricClient.FaultManagementClient.StartNodeAsync
  isExternal: false
  name: StartNodeAsync
  nameWithType: FabricClient.FaultManagementClient.StartNodeAsync
  fullName: System.Fabric.FabricClient.FaultManagementClient.StartNodeAsync
- uid: System.Threading.Tasks.Task{System.Fabric.Result.StartNodeResult}
  commentId: T:System.Threading.Tasks.Task{System.Fabric.Result.StartNodeResult}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<StartNodeResult>
  nameWithType: Task<StartNodeResult>
  fullName: System.Threading.Tasks.Task<System.Fabric.Result.StartNodeResult>
  nameWithType.vb: Task(Of StartNodeResult)
  fullname.vb: System.Threading.Tasks.Task(Of System.Fabric.Result.StartNodeResult)
  name.vb: Task(Of StartNodeResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Fabric.Result.StartNodeResult
    name: StartNodeResult
    nameWithType: StartNodeResult
    fullName: System.Fabric.Result.StartNodeResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Fabric.Result.StartNodeResult
    name: StartNodeResult
    nameWithType: StartNodeResult
    fullName: System.Fabric.Result.StartNodeResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Fabric.FabricClient.FaultManagementClient.StopNodeAsync*
  commentId: Overload:System.Fabric.FabricClient.FaultManagementClient.StopNodeAsync
  isExternal: false
  name: StopNodeAsync
  nameWithType: FabricClient.FaultManagementClient.StopNodeAsync
  fullName: System.Fabric.FabricClient.FaultManagementClient.StopNodeAsync
- uid: System.Threading.Tasks.Task{System.Fabric.Result.StopNodeResult}
  commentId: T:System.Threading.Tasks.Task{System.Fabric.Result.StopNodeResult}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<StopNodeResult>
  nameWithType: Task<StopNodeResult>
  fullName: System.Threading.Tasks.Task<System.Fabric.Result.StopNodeResult>
  nameWithType.vb: Task(Of StopNodeResult)
  fullname.vb: System.Threading.Tasks.Task(Of System.Fabric.Result.StopNodeResult)
  name.vb: Task(Of StopNodeResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Fabric.Result.StopNodeResult
    name: StopNodeResult
    nameWithType: StopNodeResult
    fullName: System.Fabric.Result.StopNodeResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Fabric.Result.StopNodeResult
    name: StopNodeResult
    nameWithType: StopNodeResult
    fullName: System.Fabric.Result.StopNodeResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.FabricClient.FaultManagementClient.RestartDeployedCodePackageAsync*
  commentId: Overload:System.Fabric.FabricClient.FaultManagementClient.RestartDeployedCodePackageAsync
  isExternal: false
  name: RestartDeployedCodePackageAsync
  nameWithType: FabricClient.FaultManagementClient.RestartDeployedCodePackageAsync
  fullName: System.Fabric.FabricClient.FaultManagementClient.RestartDeployedCodePackageAsync
- uid: System.InvalidOperationException
  commentId: T:System.InvalidOperationException
  parent: System
  isExternal: true
  name: InvalidOperationException
  nameWithType: InvalidOperationException
  fullName: System.InvalidOperationException
- uid: System.Uri
  commentId: T:System.Uri
  parent: System
  isExternal: true
  name: Uri
  nameWithType: Uri
  fullName: System.Uri
- uid: System.Threading.Tasks.Task{System.Fabric.Result.RestartDeployedCodePackageResult}
  commentId: T:System.Threading.Tasks.Task{System.Fabric.Result.RestartDeployedCodePackageResult}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<RestartDeployedCodePackageResult>
  nameWithType: Task<RestartDeployedCodePackageResult>
  fullName: System.Threading.Tasks.Task<System.Fabric.Result.RestartDeployedCodePackageResult>
  nameWithType.vb: Task(Of RestartDeployedCodePackageResult)
  fullname.vb: System.Threading.Tasks.Task(Of System.Fabric.Result.RestartDeployedCodePackageResult)
  name.vb: Task(Of RestartDeployedCodePackageResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Fabric.Result.RestartDeployedCodePackageResult
    name: RestartDeployedCodePackageResult
    nameWithType: RestartDeployedCodePackageResult
    fullName: System.Fabric.Result.RestartDeployedCodePackageResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Fabric.Result.RestartDeployedCodePackageResult
    name: RestartDeployedCodePackageResult
    nameWithType: RestartDeployedCodePackageResult
    fullName: System.Fabric.Result.RestartDeployedCodePackageResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Int64
  commentId: T:System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.Fabric.FabricClient.FaultManagementClient.RemoveReplicaAsync*
  commentId: Overload:System.Fabric.FabricClient.FaultManagementClient.RemoveReplicaAsync
  isExternal: false
  name: RemoveReplicaAsync
  nameWithType: FabricClient.FaultManagementClient.RemoveReplicaAsync
  fullName: System.Fabric.FabricClient.FaultManagementClient.RemoveReplicaAsync
- uid: System.Threading.Tasks.Task{System.Fabric.Result.RemoveReplicaResult}
  commentId: T:System.Threading.Tasks.Task{System.Fabric.Result.RemoveReplicaResult}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<RemoveReplicaResult>
  nameWithType: Task<RemoveReplicaResult>
  fullName: System.Threading.Tasks.Task<System.Fabric.Result.RemoveReplicaResult>
  nameWithType.vb: Task(Of RemoveReplicaResult)
  fullname.vb: System.Threading.Tasks.Task(Of System.Fabric.Result.RemoveReplicaResult)
  name.vb: Task(Of RemoveReplicaResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Fabric.Result.RemoveReplicaResult
    name: RemoveReplicaResult
    nameWithType: RemoveReplicaResult
    fullName: System.Fabric.Result.RemoveReplicaResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Fabric.Result.RemoveReplicaResult
    name: RemoveReplicaResult
    nameWithType: RemoveReplicaResult
    fullName: System.Fabric.Result.RemoveReplicaResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Guid
  commentId: T:System.Guid
  parent: System
  isExternal: true
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: System.Double
  commentId: T:System.Double
  parent: System
  isExternal: true
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: System.Fabric.FabricClient.FaultManagementClient.RestartReplicaAsync*
  commentId: Overload:System.Fabric.FabricClient.FaultManagementClient.RestartReplicaAsync
  isExternal: false
  name: RestartReplicaAsync
  nameWithType: FabricClient.FaultManagementClient.RestartReplicaAsync
  fullName: System.Fabric.FabricClient.FaultManagementClient.RestartReplicaAsync
- uid: System.Threading.Tasks.Task{System.Fabric.Result.RestartReplicaResult}
  commentId: T:System.Threading.Tasks.Task{System.Fabric.Result.RestartReplicaResult}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<RestartReplicaResult>
  nameWithType: Task<RestartReplicaResult>
  fullName: System.Threading.Tasks.Task<System.Fabric.Result.RestartReplicaResult>
  nameWithType.vb: Task(Of RestartReplicaResult)
  fullname.vb: System.Threading.Tasks.Task(Of System.Fabric.Result.RestartReplicaResult)
  name.vb: Task(Of RestartReplicaResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Fabric.Result.RestartReplicaResult
    name: RestartReplicaResult
    nameWithType: RestartReplicaResult
    fullName: System.Fabric.Result.RestartReplicaResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Fabric.Result.RestartReplicaResult
    name: RestartReplicaResult
    nameWithType: RestartReplicaResult
    fullName: System.Fabric.Result.RestartReplicaResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.FabricClient.FaultManagementClient.MovePrimaryAsync*
  commentId: Overload:System.Fabric.FabricClient.FaultManagementClient.MovePrimaryAsync
  isExternal: false
  name: MovePrimaryAsync
  nameWithType: FabricClient.FaultManagementClient.MovePrimaryAsync
  fullName: System.Fabric.FabricClient.FaultManagementClient.MovePrimaryAsync
- uid: System.Fabric.PartitionSelector
  commentId: T:System.Fabric.PartitionSelector
  parent: System.Fabric
  isExternal: false
  name: PartitionSelector
  nameWithType: PartitionSelector
  fullName: System.Fabric.PartitionSelector
- uid: System.Threading.Tasks.Task{System.Fabric.Result.MovePrimaryResult}
  commentId: T:System.Threading.Tasks.Task{System.Fabric.Result.MovePrimaryResult}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<MovePrimaryResult>
  nameWithType: Task<MovePrimaryResult>
  fullName: System.Threading.Tasks.Task<System.Fabric.Result.MovePrimaryResult>
  nameWithType.vb: Task(Of MovePrimaryResult)
  fullname.vb: System.Threading.Tasks.Task(Of System.Fabric.Result.MovePrimaryResult)
  name.vb: Task(Of MovePrimaryResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Fabric.Result.MovePrimaryResult
    name: MovePrimaryResult
    nameWithType: MovePrimaryResult
    fullName: System.Fabric.Result.MovePrimaryResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Fabric.Result.MovePrimaryResult
    name: MovePrimaryResult
    nameWithType: MovePrimaryResult
    fullName: System.Fabric.Result.MovePrimaryResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.FabricClient.FaultManagementClient.MoveSecondaryAsync*
  commentId: Overload:System.Fabric.FabricClient.FaultManagementClient.MoveSecondaryAsync
  isExternal: false
  name: MoveSecondaryAsync
  nameWithType: FabricClient.FaultManagementClient.MoveSecondaryAsync
  fullName: System.Fabric.FabricClient.FaultManagementClient.MoveSecondaryAsync
- uid: System.Threading.Tasks.Task{System.Fabric.Result.MoveSecondaryResult}
  commentId: T:System.Threading.Tasks.Task{System.Fabric.Result.MoveSecondaryResult}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<MoveSecondaryResult>
  nameWithType: Task<MoveSecondaryResult>
  fullName: System.Threading.Tasks.Task<System.Fabric.Result.MoveSecondaryResult>
  nameWithType.vb: Task(Of MoveSecondaryResult)
  fullname.vb: System.Threading.Tasks.Task(Of System.Fabric.Result.MoveSecondaryResult)
  name.vb: Task(Of MoveSecondaryResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Fabric.Result.MoveSecondaryResult
    name: MoveSecondaryResult
    nameWithType: MoveSecondaryResult
    fullName: System.Fabric.Result.MoveSecondaryResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Fabric.Result.MoveSecondaryResult
    name: MoveSecondaryResult
    nameWithType: MoveSecondaryResult
    fullName: System.Fabric.Result.MoveSecondaryResult
  - name: )
    nameWithType: )
    fullName: )
