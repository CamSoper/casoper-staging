### YamlMime:ManagedReference
items:
- uid: Microsoft.ServiceFabric.Services.Remoting.Client.ServiceProxy
  commentId: T:Microsoft.ServiceFabric.Services.Remoting.Client.ServiceProxy
  id: ServiceProxy
  parent: Microsoft.ServiceFabric.Services.Remoting.Client
  children:
  - Microsoft.ServiceFabric.Services.Remoting.Client.ServiceProxy.Create``1(System.Uri,Microsoft.ServiceFabric.Services.Client.ServicePartitionKey,Microsoft.ServiceFabric.Services.Communication.Client.TargetReplicaSelector,System.String)
  - Microsoft.ServiceFabric.Services.Remoting.Client.ServiceProxy.ServiceInterfaceType
  - Microsoft.ServiceFabric.Services.Remoting.Client.ServiceProxy.ServicePartitionClient
  langs:
  - csharp
  - vb
  name: ServiceProxy
  nameWithType: ServiceProxy
  fullName: Microsoft.ServiceFabric.Services.Remoting.Client.ServiceProxy
  type: Class
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Services/Remoting/Client/ServiceProxy.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: ServiceProxy
    path: src/prod/src/managed/Microsoft.ServiceFabric.Services/Remoting/Client/ServiceProxy.cs
    startLine: 19
  assemblies:
  - Microsoft.ServiceFabric.Services
  namespace: Microsoft.ServiceFabric.Services.Remoting.Client
  summary: "\nProvides the base implementation for the proxy to the remoted IService interfaces.\n"
  example: []
  syntax:
    content: 'public abstract class ServiceProxy : ProxyBase, IServiceProxy'
    content.vb: >-
      Public MustInherit Class ServiceProxy
          Inherits ProxyBase
          Implements IServiceProxy
  inheritance:
  - System.Object
  - Microsoft.ServiceFabric.Services.Remoting.Builder.ProxyBase
  implements:
  - Microsoft.ServiceFabric.Services.Remoting.Client.IServiceProxy
  inheritedMembers:
  - Microsoft.ServiceFabric.Services.Remoting.Builder.ProxyBase.Invoke(System.Int32,System.Int32,System.Object)
  - Microsoft.ServiceFabric.Services.Remoting.Builder.ProxyBase.InvokeAsync(System.Int32,System.Int32,System.Object,System.Threading.CancellationToken)
  - Microsoft.ServiceFabric.Services.Remoting.Builder.ProxyBase.ContinueWithResult``1(System.Int32,System.Int32,System.Threading.Tasks.Task{System.Object})
  - Microsoft.ServiceFabric.Services.Remoting.Builder.ProxyBase.ContinueWith(System.Threading.Tasks.Task{System.Object})
  - Microsoft.ServiceFabric.Services.Remoting.Builder.ProxyBase.GetReturnValue(System.Int32,System.Int32,System.Object)
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  extensionMethods:
  - Microsoft.ServiceFabric.Services.Remoting.Client.ServiceProxy.System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: Microsoft.ServiceFabric.Services.Remoting.Client.ServiceProxy.ServiceInterfaceType
  commentId: P:Microsoft.ServiceFabric.Services.Remoting.Client.ServiceProxy.ServiceInterfaceType
  id: ServiceInterfaceType
  parent: Microsoft.ServiceFabric.Services.Remoting.Client.ServiceProxy
  langs:
  - csharp
  - vb
  name: ServiceInterfaceType
  nameWithType: ServiceProxy.ServiceInterfaceType
  fullName: Microsoft.ServiceFabric.Services.Remoting.Client.ServiceProxy.ServiceInterfaceType
  type: Property
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Services/Remoting/Client/ServiceProxy.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: ServiceInterfaceType
    path: src/prod/src/managed/Microsoft.ServiceFabric.Services/Remoting/Client/ServiceProxy.cs
    startLine: 30
  assemblies:
  - Microsoft.ServiceFabric.Services
  namespace: Microsoft.ServiceFabric.Services.Remoting.Client
  summary: "\nThe interface type that is being remoted.\n"
  example: []
  syntax:
    content: public Type ServiceInterfaceType { get; }
    content.vb: Public ReadOnly Property ServiceInterfaceType As Type
    parameters: []
    return:
      type: System.Type
      description: Service interface type
  overload: Microsoft.ServiceFabric.Services.Remoting.Client.ServiceProxy.ServiceInterfaceType*
  implements:
  - Microsoft.ServiceFabric.Services.Remoting.Client.IServiceProxy.ServiceInterfaceType
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.ServiceFabric.Services.Remoting.Client.ServiceProxy.ServicePartitionClient
  commentId: P:Microsoft.ServiceFabric.Services.Remoting.Client.ServiceProxy.ServicePartitionClient
  id: ServicePartitionClient
  parent: Microsoft.ServiceFabric.Services.Remoting.Client.ServiceProxy
  langs:
  - csharp
  - vb
  name: ServicePartitionClient
  nameWithType: ServiceProxy.ServicePartitionClient
  fullName: Microsoft.ServiceFabric.Services.Remoting.Client.ServiceProxy.ServicePartitionClient
  type: Property
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Services/Remoting/Client/ServiceProxy.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: ServicePartitionClient
    path: src/prod/src/managed/Microsoft.ServiceFabric.Services/Remoting/Client/ServiceProxy.cs
    startLine: 39
  assemblies:
  - Microsoft.ServiceFabric.Services
  namespace: Microsoft.ServiceFabric.Services.Remoting.Client
  summary: "\nThe service partition client used to send requests to the service.\n"
  example: []
  syntax:
    content: public IServiceRemotingPartitionClient ServicePartitionClient { get; }
    content.vb: Public ReadOnly Property ServicePartitionClient As IServiceRemotingPartitionClient
    parameters: []
    return:
      type: Microsoft.ServiceFabric.Services.Remoting.Client.IServiceRemotingPartitionClient
      description: ServicePartitionClient used by the ServiceProxy
  overload: Microsoft.ServiceFabric.Services.Remoting.Client.ServiceProxy.ServicePartitionClient*
  implements:
  - Microsoft.ServiceFabric.Services.Remoting.Client.IServiceProxy.ServicePartitionClient
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.ServiceFabric.Services.Remoting.Client.ServiceProxy.Create``1(System.Uri,Microsoft.ServiceFabric.Services.Client.ServicePartitionKey,Microsoft.ServiceFabric.Services.Communication.Client.TargetReplicaSelector,System.String)
  commentId: M:Microsoft.ServiceFabric.Services.Remoting.Client.ServiceProxy.Create``1(System.Uri,Microsoft.ServiceFabric.Services.Client.ServicePartitionKey,Microsoft.ServiceFabric.Services.Communication.Client.TargetReplicaSelector,System.String)
  id: Create``1(System.Uri,Microsoft.ServiceFabric.Services.Client.ServicePartitionKey,Microsoft.ServiceFabric.Services.Communication.Client.TargetReplicaSelector,System.String)
  parent: Microsoft.ServiceFabric.Services.Remoting.Client.ServiceProxy
  langs:
  - csharp
  - vb
  name: Create<TServiceInterface>(Uri, ServicePartitionKey, TargetReplicaSelector, String)
  nameWithType: ServiceProxy.Create<TServiceInterface>(Uri, ServicePartitionKey, TargetReplicaSelector, String)
  fullName: Microsoft.ServiceFabric.Services.Remoting.Client.ServiceProxy.Create<TServiceInterface>(System.Uri, Microsoft.ServiceFabric.Services.Client.ServicePartitionKey, Microsoft.ServiceFabric.Services.Communication.Client.TargetReplicaSelector, System.String)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Services/Remoting/Client/ServiceProxy.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: Create
    path: src/prod/src/managed/Microsoft.ServiceFabric.Services/Remoting/Client/ServiceProxy.cs
    startLine: 57
  assemblies:
  - Microsoft.ServiceFabric.Services
  namespace: Microsoft.ServiceFabric.Services.Remoting.Client
  summary: "\nCreates a proxy to communicate to the specified service using the remoted interface TServiceInterface that \nthe service implements.\n<typeparam name=\"TServiceInterface\">Interface that is being remoted</typeparam>\n<param name=\"serviceUri\">Uri of the Service.</param>\n<param name=\"partitionKey\">The Partition key that determines which service partition is responsible for handling requests from this service proxy</param>\n<param name=\"targetReplicaSelector\">Determines which replica or instance of the service partition the client should connect to.</param>\n<param name=\"listenerName\">This parameter is Optional if the service has a single communication listener. The endpoints from the service\nare of the form {\"Endpoints\":{\"Listener1\":\"Endpoint1\",\"Listener2\":\"Endpoint2\" ...}}. When the service exposes multiple endpoints, this parameter\nidentifies which of those endpoints to use for the remoting communication.\n</param>\n<returns>The proxy that implement the interface that is being remoted. The returned object also implement <xref href=\"Microsoft.ServiceFabric.Services.Remoting.Client.IServiceProxy\" data-throw-if-not-resolved=\"false\"></xref> interface.</returns>\n"
  example: []
  syntax:
    content: 'public static TServiceInterface Create<TServiceInterface>(Uri serviceUri, ServicePartitionKey partitionKey = null, TargetReplicaSelector targetReplicaSelector = TargetReplicaSelector.Default, string listenerName = null)where TServiceInterface : IService'
    content.vb: Public Shared Function Create(Of TServiceInterface As IService)(serviceUri As Uri, partitionKey As ServicePartitionKey = Nothing, targetReplicaSelector As TargetReplicaSelector = TargetReplicaSelector.Default, listenerName As String = Nothing) As TServiceInterface
    parameters:
    - id: serviceUri
      type: System.Uri
    - id: partitionKey
      type: Microsoft.ServiceFabric.Services.Client.ServicePartitionKey
    - id: targetReplicaSelector
      type: Microsoft.ServiceFabric.Services.Communication.Client.TargetReplicaSelector
    - id: listenerName
      type: System.String
    typeParameters:
    - id: TServiceInterface
    return:
      type: '{TServiceInterface}'
  overload: Microsoft.ServiceFabric.Services.Remoting.Client.ServiceProxy.Create*
  nameWithType.vb: ServiceProxy.Create(Of TServiceInterface)(Uri, ServicePartitionKey, TargetReplicaSelector, String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.ServiceFabric.Services.Remoting.Client.ServiceProxy.Create(Of TServiceInterface)(System.Uri, Microsoft.ServiceFabric.Services.Client.ServicePartitionKey, Microsoft.ServiceFabric.Services.Communication.Client.TargetReplicaSelector, System.String)
  name.vb: Create(Of TServiceInterface)(Uri, ServicePartitionKey, TargetReplicaSelector, String)
references:
- uid: Microsoft.ServiceFabric.Services.Remoting.Client
  commentId: N:Microsoft.ServiceFabric.Services.Remoting.Client
  isExternal: false
  name: Microsoft.ServiceFabric.Services.Remoting.Client
  nameWithType: Microsoft.ServiceFabric.Services.Remoting.Client
  fullName: Microsoft.ServiceFabric.Services.Remoting.Client
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Microsoft.ServiceFabric.Services.Remoting.Builder.ProxyBase
  commentId: T:Microsoft.ServiceFabric.Services.Remoting.Builder.ProxyBase
  parent: Microsoft.ServiceFabric.Services.Remoting.Builder
  isExternal: false
  name: ProxyBase
  nameWithType: ProxyBase
  fullName: Microsoft.ServiceFabric.Services.Remoting.Builder.ProxyBase
- uid: Microsoft.ServiceFabric.Services.Remoting.Client.IServiceProxy
  commentId: T:Microsoft.ServiceFabric.Services.Remoting.Client.IServiceProxy
  parent: Microsoft.ServiceFabric.Services.Remoting.Client
  isExternal: false
  name: IServiceProxy
  nameWithType: IServiceProxy
  fullName: Microsoft.ServiceFabric.Services.Remoting.Client.IServiceProxy
- uid: Microsoft.ServiceFabric.Services.Remoting.Builder.ProxyBase.Invoke(System.Int32,System.Int32,System.Object)
  commentId: M:Microsoft.ServiceFabric.Services.Remoting.Builder.ProxyBase.Invoke(System.Int32,System.Int32,System.Object)
  parent: Microsoft.ServiceFabric.Services.Remoting.Builder.ProxyBase
  isExternal: true
  name: Invoke(Int32, Int32, Object)
  nameWithType: ProxyBase.Invoke(Int32, Int32, Object)
  fullName: Microsoft.ServiceFabric.Services.Remoting.Builder.ProxyBase.Invoke(System.Int32, System.Int32, System.Object)
  spec.csharp:
  - uid: Microsoft.ServiceFabric.Services.Remoting.Builder.ProxyBase.Invoke(System.Int32,System.Int32,System.Object)
    name: Invoke
    nameWithType: ProxyBase.Invoke
    fullName: Microsoft.ServiceFabric.Services.Remoting.Builder.ProxyBase.Invoke
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ServiceFabric.Services.Remoting.Builder.ProxyBase.Invoke(System.Int32,System.Int32,System.Object)
    name: Invoke
    nameWithType: ProxyBase.Invoke
    fullName: Microsoft.ServiceFabric.Services.Remoting.Builder.ProxyBase.Invoke
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceFabric.Services.Remoting.Builder.ProxyBase.InvokeAsync(System.Int32,System.Int32,System.Object,System.Threading.CancellationToken)
  commentId: M:Microsoft.ServiceFabric.Services.Remoting.Builder.ProxyBase.InvokeAsync(System.Int32,System.Int32,System.Object,System.Threading.CancellationToken)
  parent: Microsoft.ServiceFabric.Services.Remoting.Builder.ProxyBase
  isExternal: true
  name: InvokeAsync(Int32, Int32, Object, CancellationToken)
  nameWithType: ProxyBase.InvokeAsync(Int32, Int32, Object, CancellationToken)
  fullName: Microsoft.ServiceFabric.Services.Remoting.Builder.ProxyBase.InvokeAsync(System.Int32, System.Int32, System.Object, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.ServiceFabric.Services.Remoting.Builder.ProxyBase.InvokeAsync(System.Int32,System.Int32,System.Object,System.Threading.CancellationToken)
    name: InvokeAsync
    nameWithType: ProxyBase.InvokeAsync
    fullName: Microsoft.ServiceFabric.Services.Remoting.Builder.ProxyBase.InvokeAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ServiceFabric.Services.Remoting.Builder.ProxyBase.InvokeAsync(System.Int32,System.Int32,System.Object,System.Threading.CancellationToken)
    name: InvokeAsync
    nameWithType: ProxyBase.InvokeAsync
    fullName: Microsoft.ServiceFabric.Services.Remoting.Builder.ProxyBase.InvokeAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceFabric.Services.Remoting.Builder.ProxyBase.ContinueWithResult``1(System.Int32,System.Int32,System.Threading.Tasks.Task{System.Object})
  commentId: M:Microsoft.ServiceFabric.Services.Remoting.Builder.ProxyBase.ContinueWithResult``1(System.Int32,System.Int32,System.Threading.Tasks.Task{System.Object})
  parent: Microsoft.ServiceFabric.Services.Remoting.Builder.ProxyBase
  isExternal: true
  name: ContinueWithResult<TRetval>(Int32, Int32, Task<Object>)
  nameWithType: ProxyBase.ContinueWithResult<TRetval>(Int32, Int32, Task<Object>)
  fullName: Microsoft.ServiceFabric.Services.Remoting.Builder.ProxyBase.ContinueWithResult<TRetval>(System.Int32, System.Int32, System.Threading.Tasks.Task<System.Object>)
  nameWithType.vb: ProxyBase.ContinueWithResult(Of TRetval)(Int32, Int32, Task(Of Object))
  fullname.vb: Microsoft.ServiceFabric.Services.Remoting.Builder.ProxyBase.ContinueWithResult(Of TRetval)(System.Int32, System.Int32, System.Threading.Tasks.Task(Of System.Object))
  name.vb: ContinueWithResult(Of TRetval)(Int32, Int32, Task(Of Object))
  spec.csharp:
  - uid: Microsoft.ServiceFabric.Services.Remoting.Builder.ProxyBase.ContinueWithResult``1(System.Int32,System.Int32,System.Threading.Tasks.Task{System.Object})
    name: ContinueWithResult<TRetval>
    nameWithType: ProxyBase.ContinueWithResult<TRetval>
    fullName: Microsoft.ServiceFabric.Services.Remoting.Builder.ProxyBase.ContinueWithResult<TRetval>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ServiceFabric.Services.Remoting.Builder.ProxyBase.ContinueWithResult``1(System.Int32,System.Int32,System.Threading.Tasks.Task{System.Object})
    name: ContinueWithResult(Of TRetval)
    nameWithType: ProxyBase.ContinueWithResult(Of TRetval)
    fullName: Microsoft.ServiceFabric.Services.Remoting.Builder.ProxyBase.ContinueWithResult(Of TRetval)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceFabric.Services.Remoting.Builder.ProxyBase.ContinueWith(System.Threading.Tasks.Task{System.Object})
  commentId: M:Microsoft.ServiceFabric.Services.Remoting.Builder.ProxyBase.ContinueWith(System.Threading.Tasks.Task{System.Object})
  parent: Microsoft.ServiceFabric.Services.Remoting.Builder.ProxyBase
  isExternal: true
  name: ContinueWith(Task<Object>)
  nameWithType: ProxyBase.ContinueWith(Task<Object>)
  fullName: Microsoft.ServiceFabric.Services.Remoting.Builder.ProxyBase.ContinueWith(System.Threading.Tasks.Task<System.Object>)
  nameWithType.vb: ProxyBase.ContinueWith(Task(Of Object))
  fullname.vb: Microsoft.ServiceFabric.Services.Remoting.Builder.ProxyBase.ContinueWith(System.Threading.Tasks.Task(Of System.Object))
  name.vb: ContinueWith(Task(Of Object))
  spec.csharp:
  - uid: Microsoft.ServiceFabric.Services.Remoting.Builder.ProxyBase.ContinueWith(System.Threading.Tasks.Task{System.Object})
    name: ContinueWith
    nameWithType: ProxyBase.ContinueWith
    fullName: Microsoft.ServiceFabric.Services.Remoting.Builder.ProxyBase.ContinueWith
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ServiceFabric.Services.Remoting.Builder.ProxyBase.ContinueWith(System.Threading.Tasks.Task{System.Object})
    name: ContinueWith
    nameWithType: ProxyBase.ContinueWith
    fullName: Microsoft.ServiceFabric.Services.Remoting.Builder.ProxyBase.ContinueWith
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceFabric.Services.Remoting.Builder.ProxyBase.GetReturnValue(System.Int32,System.Int32,System.Object)
  commentId: M:Microsoft.ServiceFabric.Services.Remoting.Builder.ProxyBase.GetReturnValue(System.Int32,System.Int32,System.Object)
  parent: Microsoft.ServiceFabric.Services.Remoting.Builder.ProxyBase
  isExternal: true
  name: GetReturnValue(Int32, Int32, Object)
  nameWithType: ProxyBase.GetReturnValue(Int32, Int32, Object)
  fullName: Microsoft.ServiceFabric.Services.Remoting.Builder.ProxyBase.GetReturnValue(System.Int32, System.Int32, System.Object)
  spec.csharp:
  - uid: Microsoft.ServiceFabric.Services.Remoting.Builder.ProxyBase.GetReturnValue(System.Int32,System.Int32,System.Object)
    name: GetReturnValue
    nameWithType: ProxyBase.GetReturnValue
    fullName: Microsoft.ServiceFabric.Services.Remoting.Builder.ProxyBase.GetReturnValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ServiceFabric.Services.Remoting.Builder.ProxyBase.GetReturnValue(System.Int32,System.Int32,System.Object)
    name: GetReturnValue
    nameWithType: ProxyBase.GetReturnValue
    fullName: Microsoft.ServiceFabric.Services.Remoting.Builder.ProxyBase.GetReturnValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceFabric.Services.Remoting.Client.ServiceProxy.System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
  commentId: M:System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  parent: System.Fabric.Messaging.Stream.ByteArraySerializer
  definition: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  name: Serialize<ServiceProxy>()
  nameWithType: ByteArraySerializer.Serialize<ServiceProxy>()
  fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<Microsoft.ServiceFabric.Services.Remoting.Client.ServiceProxy>()
  nameWithType.vb: ByteArraySerializer.Serialize(Of ServiceProxy)()
  fullname.vb: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of Microsoft.ServiceFabric.Services.Remoting.Client.ServiceProxy)()
  name.vb: Serialize(Of ServiceProxy)()
  spec.csharp:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
    name: Serialize<ServiceProxy>
    nameWithType: ByteArraySerializer.Serialize<ServiceProxy>
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<Microsoft.ServiceFabric.Services.Remoting.Client.ServiceProxy>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
    name: Serialize(Of ServiceProxy)
    nameWithType: ByteArraySerializer.Serialize(Of ServiceProxy)
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of Microsoft.ServiceFabric.Services.Remoting.Client.ServiceProxy)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.ServiceFabric.Services.Remoting.Builder
  commentId: N:Microsoft.ServiceFabric.Services.Remoting.Builder
  isExternal: false
  name: Microsoft.ServiceFabric.Services.Remoting.Builder
  nameWithType: Microsoft.ServiceFabric.Services.Remoting.Builder
  fullName: Microsoft.ServiceFabric.Services.Remoting.Builder
- uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  commentId: M:System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  isExternal: false
  name: Serialize<T>(T)
  nameWithType: ByteArraySerializer.Serialize<T>(T)
  fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<T>(T)
  nameWithType.vb: ByteArraySerializer.Serialize(Of T)(T)
  fullname.vb: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of T)(T)
  name.vb: Serialize(Of T)(T)
  spec.csharp:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
    name: Serialize<T>
    nameWithType: ByteArraySerializer.Serialize<T>
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
    name: Serialize(Of T)
    nameWithType: ByteArraySerializer.Serialize(Of T)
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.Messaging.Stream.ByteArraySerializer
  commentId: T:System.Fabric.Messaging.Stream.ByteArraySerializer
  parent: System.Fabric.Messaging.Stream
  isExternal: false
  name: ByteArraySerializer
  nameWithType: ByteArraySerializer
  fullName: System.Fabric.Messaging.Stream.ByteArraySerializer
- uid: System.Fabric.Messaging.Stream
  commentId: N:System.Fabric.Messaging.Stream
  isExternal: false
  name: System.Fabric.Messaging.Stream
  nameWithType: System.Fabric.Messaging.Stream
  fullName: System.Fabric.Messaging.Stream
- uid: Microsoft.ServiceFabric.Services.Remoting.Client.ServiceProxy.ServiceInterfaceType*
  commentId: Overload:Microsoft.ServiceFabric.Services.Remoting.Client.ServiceProxy.ServiceInterfaceType
  isExternal: false
  name: ServiceInterfaceType
  nameWithType: ServiceProxy.ServiceInterfaceType
  fullName: Microsoft.ServiceFabric.Services.Remoting.Client.ServiceProxy.ServiceInterfaceType
- uid: Microsoft.ServiceFabric.Services.Remoting.Client.IServiceProxy.ServiceInterfaceType
  commentId: P:Microsoft.ServiceFabric.Services.Remoting.Client.IServiceProxy.ServiceInterfaceType
  parent: Microsoft.ServiceFabric.Services.Remoting.Client.IServiceProxy
  isExternal: false
  name: ServiceInterfaceType
  nameWithType: IServiceProxy.ServiceInterfaceType
  fullName: Microsoft.ServiceFabric.Services.Remoting.Client.IServiceProxy.ServiceInterfaceType
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: Microsoft.ServiceFabric.Services.Remoting.Client.ServiceProxy.ServicePartitionClient*
  commentId: Overload:Microsoft.ServiceFabric.Services.Remoting.Client.ServiceProxy.ServicePartitionClient
  isExternal: false
  name: ServicePartitionClient
  nameWithType: ServiceProxy.ServicePartitionClient
  fullName: Microsoft.ServiceFabric.Services.Remoting.Client.ServiceProxy.ServicePartitionClient
- uid: Microsoft.ServiceFabric.Services.Remoting.Client.IServiceProxy.ServicePartitionClient
  commentId: P:Microsoft.ServiceFabric.Services.Remoting.Client.IServiceProxy.ServicePartitionClient
  parent: Microsoft.ServiceFabric.Services.Remoting.Client.IServiceProxy
  isExternal: false
  name: ServicePartitionClient
  nameWithType: IServiceProxy.ServicePartitionClient
  fullName: Microsoft.ServiceFabric.Services.Remoting.Client.IServiceProxy.ServicePartitionClient
- uid: Microsoft.ServiceFabric.Services.Remoting.Client.IServiceRemotingPartitionClient
  commentId: T:Microsoft.ServiceFabric.Services.Remoting.Client.IServiceRemotingPartitionClient
  parent: Microsoft.ServiceFabric.Services.Remoting.Client
  isExternal: false
  name: IServiceRemotingPartitionClient
  nameWithType: IServiceRemotingPartitionClient
  fullName: Microsoft.ServiceFabric.Services.Remoting.Client.IServiceRemotingPartitionClient
- uid: Microsoft.ServiceFabric.Services.Remoting.Client.ServiceProxy.Create*
  commentId: Overload:Microsoft.ServiceFabric.Services.Remoting.Client.ServiceProxy.Create
  isExternal: false
  name: Create<TServiceInterface>
  nameWithType: ServiceProxy.Create<TServiceInterface>
  fullName: Microsoft.ServiceFabric.Services.Remoting.Client.ServiceProxy.Create<TServiceInterface>
  nameWithType.vb: ServiceProxy.Create(Of TServiceInterface)
  fullname.vb: Microsoft.ServiceFabric.Services.Remoting.Client.ServiceProxy.Create(Of TServiceInterface)
  name.vb: Create(Of TServiceInterface)
- uid: System.Uri
  commentId: T:System.Uri
  parent: System
  isExternal: true
  name: Uri
  nameWithType: Uri
  fullName: System.Uri
- uid: Microsoft.ServiceFabric.Services.Client.ServicePartitionKey
  commentId: T:Microsoft.ServiceFabric.Services.Client.ServicePartitionKey
  parent: Microsoft.ServiceFabric.Services.Client
  isExternal: false
  name: ServicePartitionKey
  nameWithType: ServicePartitionKey
  fullName: Microsoft.ServiceFabric.Services.Client.ServicePartitionKey
- uid: Microsoft.ServiceFabric.Services.Communication.Client.TargetReplicaSelector
  commentId: T:Microsoft.ServiceFabric.Services.Communication.Client.TargetReplicaSelector
  parent: Microsoft.ServiceFabric.Services.Communication.Client
  isExternal: false
  name: TargetReplicaSelector
  nameWithType: TargetReplicaSelector
  fullName: Microsoft.ServiceFabric.Services.Communication.Client.TargetReplicaSelector
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: '{TServiceInterface}'
  commentId: '!:TServiceInterface'
  definition: TServiceInterface
  name: TServiceInterface
  nameWithType: TServiceInterface
  fullName: TServiceInterface
- uid: Microsoft.ServiceFabric.Services.Client
  commentId: N:Microsoft.ServiceFabric.Services.Client
  isExternal: false
  name: Microsoft.ServiceFabric.Services.Client
  nameWithType: Microsoft.ServiceFabric.Services.Client
  fullName: Microsoft.ServiceFabric.Services.Client
- uid: Microsoft.ServiceFabric.Services.Communication.Client
  commentId: N:Microsoft.ServiceFabric.Services.Communication.Client
  isExternal: false
  name: Microsoft.ServiceFabric.Services.Communication.Client
  nameWithType: Microsoft.ServiceFabric.Services.Communication.Client
  fullName: Microsoft.ServiceFabric.Services.Communication.Client
- uid: TServiceInterface
  isExternal: false
  name: TServiceInterface
  nameWithType: TServiceInterface
  fullName: TServiceInterface
