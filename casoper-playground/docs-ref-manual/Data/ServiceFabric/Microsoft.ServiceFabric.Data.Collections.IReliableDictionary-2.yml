### YamlMime:ManagedReference
items:
- uid: Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2
  commentId: T:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2
  id: IReliableDictionary`2
  parent: Microsoft.ServiceFabric.Data.Collections
  children:
  - Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.AddAsync(Microsoft.ServiceFabric.Data.ITransaction,`0,`1)
  - Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.AddAsync(Microsoft.ServiceFabric.Data.ITransaction,`0,`1,System.TimeSpan,System.Threading.CancellationToken)
  - Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.AddOrUpdateAsync(Microsoft.ServiceFabric.Data.ITransaction,`0,`1,System.Func{`0,`1,`1})
  - Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.AddOrUpdateAsync(Microsoft.ServiceFabric.Data.ITransaction,`0,`1,System.Func{`0,`1,`1},System.TimeSpan,System.Threading.CancellationToken)
  - Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.AddOrUpdateAsync(Microsoft.ServiceFabric.Data.ITransaction,`0,System.Func{`0,`1},System.Func{`0,`1,`1})
  - Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.AddOrUpdateAsync(Microsoft.ServiceFabric.Data.ITransaction,`0,System.Func{`0,`1},System.Func{`0,`1,`1},System.TimeSpan,System.Threading.CancellationToken)
  - Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.ClearAsync(System.TimeSpan,System.Threading.CancellationToken)
  - Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.ContainsKeyAsync(Microsoft.ServiceFabric.Data.ITransaction,`0)
  - Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.ContainsKeyAsync(Microsoft.ServiceFabric.Data.ITransaction,`0,Microsoft.ServiceFabric.Data.Collections.LockMode)
  - Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.ContainsKeyAsync(Microsoft.ServiceFabric.Data.ITransaction,`0,Microsoft.ServiceFabric.Data.Collections.LockMode,System.TimeSpan,System.Threading.CancellationToken)
  - Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.ContainsKeyAsync(Microsoft.ServiceFabric.Data.ITransaction,`0,System.TimeSpan,System.Threading.CancellationToken)
  - Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.CreateEnumerableAsync(Microsoft.ServiceFabric.Data.ITransaction)
  - Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.CreateEnumerableAsync(Microsoft.ServiceFabric.Data.ITransaction,Microsoft.ServiceFabric.Data.Collections.EnumerationMode)
  - Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.CreateEnumerableAsync(Microsoft.ServiceFabric.Data.ITransaction,System.Func{`0,System.Boolean},Microsoft.ServiceFabric.Data.Collections.EnumerationMode)
  - Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.DictionaryChanged
  - Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.GetOrAddAsync(Microsoft.ServiceFabric.Data.ITransaction,`0,`1)
  - Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.GetOrAddAsync(Microsoft.ServiceFabric.Data.ITransaction,`0,`1,System.TimeSpan,System.Threading.CancellationToken)
  - Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.GetOrAddAsync(Microsoft.ServiceFabric.Data.ITransaction,`0,System.Func{`0,`1})
  - Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.GetOrAddAsync(Microsoft.ServiceFabric.Data.ITransaction,`0,System.Func{`0,`1},System.TimeSpan,System.Threading.CancellationToken)
  - Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.RebuildNotificationAsyncCallback
  - Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.SetAsync(Microsoft.ServiceFabric.Data.ITransaction,`0,`1)
  - Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.SetAsync(Microsoft.ServiceFabric.Data.ITransaction,`0,`1,System.TimeSpan,System.Threading.CancellationToken)
  - Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.TryAddAsync(Microsoft.ServiceFabric.Data.ITransaction,`0,`1)
  - Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.TryAddAsync(Microsoft.ServiceFabric.Data.ITransaction,`0,`1,System.TimeSpan,System.Threading.CancellationToken)
  - Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.TryGetValueAsync(Microsoft.ServiceFabric.Data.ITransaction,`0)
  - Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.TryGetValueAsync(Microsoft.ServiceFabric.Data.ITransaction,`0,Microsoft.ServiceFabric.Data.Collections.LockMode)
  - Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.TryGetValueAsync(Microsoft.ServiceFabric.Data.ITransaction,`0,Microsoft.ServiceFabric.Data.Collections.LockMode,System.TimeSpan,System.Threading.CancellationToken)
  - Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.TryGetValueAsync(Microsoft.ServiceFabric.Data.ITransaction,`0,System.TimeSpan,System.Threading.CancellationToken)
  - Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.TryRemoveAsync(Microsoft.ServiceFabric.Data.ITransaction,`0)
  - Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.TryRemoveAsync(Microsoft.ServiceFabric.Data.ITransaction,`0,System.TimeSpan,System.Threading.CancellationToken)
  - Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.TryUpdateAsync(Microsoft.ServiceFabric.Data.ITransaction,`0,`1,`1)
  - Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.TryUpdateAsync(Microsoft.ServiceFabric.Data.ITransaction,`0,`1,`1,System.TimeSpan,System.Threading.CancellationToken)
  langs:
  - csharp
  - vb
  name: IReliableDictionary<TKey, TValue>
  nameWithType: IReliableDictionary<TKey, TValue>
  fullName: Microsoft.ServiceFabric.Data.Collections.IReliableDictionary<TKey, TValue>
  type: Interface
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Interfaces/IReliableDictionary.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: IReliableDictionary
    path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Interfaces/IReliableDictionary.cs
    startLine: 32
  assemblies:
  - Microsoft.ServiceFabric.Data.Interfaces
  namespace: Microsoft.ServiceFabric.Data.Collections
  summary: "\nRepresents a reliable collection of key/value pairs that are persisted and replicated.\n"
  remarks: "Keys or values stored in this dictionary MUST NOT be mutated outside the context of an operation on the \ndictionary.  It is highly recommended to make both <em>TKey</em> and <em>TValue</em> \nimmutable in order to avoid accidental data corruption.\n\n<p>\nTransaction is the unit of concurrency: Users can have multiple transactions in-flight at any given point of time but for a given transaction each API must be called one at a time.\nSo all Reliable Collection APIs that take in a transaction and return a Task, must be awaited one at a time.\n<xref href=\"Microsoft.ServiceFabric.Data.ITransaction\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n"
  example: []
  syntax:
    content: 'public interface IReliableDictionary<TKey, TValue> : IReliableCollection<KeyValuePair<TKey, TValue>>, IReliableState where TKey : IComparable<TKey>, IEquatable<TKey>'
    content.vb: >-
      Public Interface IReliableDictionary(Of TKey As {IComparable(Of TKey), IEquatable(Of TKey)}, TValue)
          Inherits IReliableCollection(Of KeyValuePair(Of TKey, TValue))
    typeParameters:
    - id: TKey
      description: The type of the keys in the reliable dictionary.
    - id: TValue
      description: "\nThe type of the values in the reliable dictionary."
  inheritedMembers:
  - Microsoft.ServiceFabric.Data.Collections.IReliableCollection{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}.GetCountAsync(Microsoft.ServiceFabric.Data.ITransaction)
  - Microsoft.ServiceFabric.Data.Collections.IReliableCollection{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}.ClearAsync
  - Microsoft.ServiceFabric.Data.IReliableState.Name
  extensionMethods:
  - Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
  nameWithType.vb: IReliableDictionary(Of TKey, TValue)
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
  fullName.vb: Microsoft.ServiceFabric.Data.Collections.IReliableDictionary(Of TKey, TValue)
  name.vb: IReliableDictionary(Of TKey, TValue)
- uid: Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.RebuildNotificationAsyncCallback
  commentId: P:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.RebuildNotificationAsyncCallback
  id: RebuildNotificationAsyncCallback
  parent: Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2
  langs:
  - csharp
  - vb
  name: RebuildNotificationAsyncCallback
  nameWithType: IReliableDictionary<TKey, TValue>.RebuildNotificationAsyncCallback
  fullName: Microsoft.ServiceFabric.Data.Collections.IReliableDictionary<TKey, TValue>.RebuildNotificationAsyncCallback
  type: Property
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Interfaces/IReliableDictionary.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: RebuildNotificationAsyncCallback
    path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Interfaces/IReliableDictionary.cs
    startLine: 46
  assemblies:
  - Microsoft.ServiceFabric.Data.Interfaces
  namespace: Microsoft.ServiceFabric.Data.Collections
  summary: "\nOccurs when dictionary is being rebuild during copy, restore and recovery.\n"
  remarks: "\n<cref name=\"NotifyDictionaryRebuildEventArgs\"></cref> can only be used within this callback.\nOnce the asynchronous callback completes, the <cref name=\"NotifyDictionaryRebuildEventArgs.State\"></cref> becomes invalid. \n"
  example: []
  syntax:
    content: Func<IReliableDictionary<TKey, TValue>, NotifyDictionaryRebuildEventArgs<TKey, TValue>, Task> RebuildNotificationAsyncCallback { set; }
    content.vb: WriteOnly Property RebuildNotificationAsyncCallback As Func(Of IReliableDictionary(Of TKey, TValue), NotifyDictionaryRebuildEventArgs(Of TKey, TValue), Task)
    parameters: []
    return:
      type: System.Func{Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2,Microsoft.ServiceFabric.Data.Notifications.NotifyDictionaryRebuildEventArgs{{TKey},{TValue}},System.Threading.Tasks.Task}
      description: "\nThe asynchronous rebuild notification function. \nFunction takes in IReliableDictionary and NotifyDictionaryRebuildEventArgs token and returns a Task that represents the asynchronous processing of the rebuild notification.\n"
  overload: Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.RebuildNotificationAsyncCallback*
  nameWithType.vb: IReliableDictionary(Of TKey, TValue).RebuildNotificationAsyncCallback
  modifiers.csharp:
  - set
  modifiers.vb:
  - WriteOnly
  fullName.vb: Microsoft.ServiceFabric.Data.Collections.IReliableDictionary(Of TKey, TValue).RebuildNotificationAsyncCallback
- uid: Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.DictionaryChanged
  commentId: E:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.DictionaryChanged
  id: DictionaryChanged
  parent: Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2
  langs:
  - csharp
  - vb
  name: DictionaryChanged
  nameWithType: IReliableDictionary<TKey, TValue>.DictionaryChanged
  fullName: Microsoft.ServiceFabric.Data.Collections.IReliableDictionary<TKey, TValue>.DictionaryChanged
  type: Event
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Interfaces/IReliableDictionary.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: DictionaryChanged
    path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Interfaces/IReliableDictionary.cs
    startLine: 55
  assemblies:
  - Microsoft.ServiceFabric.Data.Interfaces
  namespace: Microsoft.ServiceFabric.Data.Collections
  summary: "\nOccurs when the dictionary changes.\nFor example, addition, update or removal of an item.\n"
  example: []
  syntax:
    content: event EventHandler<NotifyDictionaryChangedEventArgs<TKey, TValue>> DictionaryChanged
    content.vb: Event DictionaryChanged As EventHandler(Of NotifyDictionaryChangedEventArgs(Of TKey, TValue))
    return:
      type: System.EventHandler{Microsoft.ServiceFabric.Data.Notifications.NotifyDictionaryChangedEventArgs{{TKey},{TValue}}}
  nameWithType.vb: IReliableDictionary(Of TKey, TValue).DictionaryChanged
  fullName.vb: Microsoft.ServiceFabric.Data.Collections.IReliableDictionary(Of TKey, TValue).DictionaryChanged
- uid: Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.AddAsync(Microsoft.ServiceFabric.Data.ITransaction,`0,`1)
  commentId: M:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.AddAsync(Microsoft.ServiceFabric.Data.ITransaction,`0,`1)
  id: AddAsync(Microsoft.ServiceFabric.Data.ITransaction,`0,`1)
  parent: Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2
  langs:
  - csharp
  - vb
  name: AddAsync(ITransaction, TKey, TValue)
  nameWithType: IReliableDictionary<TKey, TValue>.AddAsync(ITransaction, TKey, TValue)
  fullName: Microsoft.ServiceFabric.Data.Collections.IReliableDictionary<TKey, TValue>.AddAsync(Microsoft.ServiceFabric.Data.ITransaction, TKey, TValue)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Interfaces/IReliableDictionary.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: AddAsync
    path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Interfaces/IReliableDictionary.cs
    startLine: 72
  assemblies:
  - Microsoft.ServiceFabric.Data.Interfaces
  namespace: Microsoft.ServiceFabric.Data.Collections
  summary: "\nAdd the specified key/value pair to the reliable dictionary.\n"
  example: []
  syntax:
    content: Task AddAsync(ITransaction tx, TKey key, TValue value)
    content.vb: Function AddAsync(tx As ITransaction, key As TKey, value As TValue) As Task
    parameters:
    - id: tx
      type: Microsoft.ServiceFabric.Data.ITransaction
      description: Transaction to associate this operation with.
    - id: key
      type: '{TKey}'
      description: The key to be added.
    - id: value
      type: '{TValue}'
      description: The value to be added. The value can be null for reference types.
    return:
      type: System.Threading.Tasks.Task
      description: A task that represents the asynchronous add operation.
  overload: Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.AddAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <em>tx</em> is null, or <em>key</em> is null or cannot be serialized.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: A value with the same key already exists in the dictionary.
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: The operation failed to complete within the default timeout.
  - type: System.Fabric.FabricNotPrimaryException
    commentId: T:System.Fabric.FabricNotPrimaryException
    description: The exception that is thrown when the <cref name="IReliableDictionary{TKey, TValue}"></cref> is not in <cref name="ReplicaRole.Primary"></cref>.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\nThe exception that is thrown when a method call is invalid for the object's current state.\nExample, transaction used is already terminated: committed or aborted.\n"
  nameWithType.vb: IReliableDictionary(Of TKey, TValue).AddAsync(ITransaction, TKey, TValue)
  fullName.vb: Microsoft.ServiceFabric.Data.Collections.IReliableDictionary(Of TKey, TValue).AddAsync(Microsoft.ServiceFabric.Data.ITransaction, TKey, TValue)
- uid: Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.AddAsync(Microsoft.ServiceFabric.Data.ITransaction,`0,`1,System.TimeSpan,System.Threading.CancellationToken)
  commentId: M:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.AddAsync(Microsoft.ServiceFabric.Data.ITransaction,`0,`1,System.TimeSpan,System.Threading.CancellationToken)
  id: AddAsync(Microsoft.ServiceFabric.Data.ITransaction,`0,`1,System.TimeSpan,System.Threading.CancellationToken)
  parent: Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2
  langs:
  - csharp
  - vb
  name: AddAsync(ITransaction, TKey, TValue, TimeSpan, CancellationToken)
  nameWithType: IReliableDictionary<TKey, TValue>.AddAsync(ITransaction, TKey, TValue, TimeSpan, CancellationToken)
  fullName: Microsoft.ServiceFabric.Data.Collections.IReliableDictionary<TKey, TValue>.AddAsync(Microsoft.ServiceFabric.Data.ITransaction, TKey, TValue, System.TimeSpan, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Interfaces/IReliableDictionary.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: AddAsync
    path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Interfaces/IReliableDictionary.cs
    startLine: 92
  assemblies:
  - Microsoft.ServiceFabric.Data.Interfaces
  namespace: Microsoft.ServiceFabric.Data.Collections
  summary: "\nAdd the specified key/value pair to the reliable dictionary.\n"
  example: []
  syntax:
    content: Task AddAsync(ITransaction tx, TKey key, TValue value, TimeSpan timeout, CancellationToken cancellationToken)
    content.vb: Function AddAsync(tx As ITransaction, key As TKey, value As TValue, timeout As TimeSpan, cancellationToken As CancellationToken) As Task
    parameters:
    - id: tx
      type: Microsoft.ServiceFabric.Data.ITransaction
      description: Transaction to associate this operation with.
    - id: key
      type: '{TKey}'
      description: The key to be added.
    - id: value
      type: '{TValue}'
      description: The value to be added. The value can be null for reference types.
    - id: timeout
      type: System.TimeSpan
      description: The amount of time to wait for the operation to complete before throwing a TimeoutException. Primarily used to prevent deadlocks. The default is 4 seconds.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The token to monitor for cancellation requests. The default is None.
    return:
      type: System.Threading.Tasks.Task
      description: A task that represents the asynchronous add operation.
  overload: Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.AddAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <em>tx</em> is null, or <em>key</em> is null or cannot be serialized.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: A value with the same key already exists in the dictionary, or <em>timeout</em> is negative.
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: The operation failed to complete within the given timeout.
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: The operation was canceled.
  - type: System.Fabric.FabricNotPrimaryException
    commentId: T:System.Fabric.FabricNotPrimaryException
    description: The exception that is thrown when the <cref name="IReliableDictionary{TKey, TValue}"></cref> is not in <cref name="ReplicaRole.Primary"></cref>.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\nThe exception that is thrown when a method call is invalid for the object's current state.\nExample, transaction used is already terminated: committed or aborted.\n"
  nameWithType.vb: IReliableDictionary(Of TKey, TValue).AddAsync(ITransaction, TKey, TValue, TimeSpan, CancellationToken)
  fullName.vb: Microsoft.ServiceFabric.Data.Collections.IReliableDictionary(Of TKey, TValue).AddAsync(Microsoft.ServiceFabric.Data.ITransaction, TKey, TValue, System.TimeSpan, System.Threading.CancellationToken)
- uid: Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.AddOrUpdateAsync(Microsoft.ServiceFabric.Data.ITransaction,`0,System.Func{`0,`1},System.Func{`0,`1,`1})
  commentId: M:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.AddOrUpdateAsync(Microsoft.ServiceFabric.Data.ITransaction,`0,System.Func{`0,`1},System.Func{`0,`1,`1})
  id: AddOrUpdateAsync(Microsoft.ServiceFabric.Data.ITransaction,`0,System.Func{`0,`1},System.Func{`0,`1,`1})
  parent: Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2
  langs:
  - csharp
  - vb
  name: AddOrUpdateAsync(ITransaction, TKey, Func<TKey, TValue>, Func<TKey, TValue, TValue>)
  nameWithType: IReliableDictionary<TKey, TValue>.AddOrUpdateAsync(ITransaction, TKey, Func<TKey, TValue>, Func<TKey, TValue, TValue>)
  fullName: Microsoft.ServiceFabric.Data.Collections.IReliableDictionary<TKey, TValue>.AddOrUpdateAsync(Microsoft.ServiceFabric.Data.ITransaction, TKey, System.Func<TKey, TValue>, System.Func<TKey, TValue, TValue>)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Interfaces/IReliableDictionary.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: AddOrUpdateAsync
    path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Interfaces/IReliableDictionary.cs
    startLine: 113
  assemblies:
  - Microsoft.ServiceFabric.Data.Interfaces
  namespace: Microsoft.ServiceFabric.Data.Collections
  summary: "\nUses the specified functions to add a key/value pair to the reliable dictionary if the key does not already exist,\nor to update a key/value pair in the reliable dictionary if the key already exists.\n"
  example: []
  syntax:
    content: Task<TValue> AddOrUpdateAsync(ITransaction tx, TKey key, Func<TKey, TValue> addValueFactory, Func<TKey, TValue, TValue> updateValueFactory)
    content.vb: Function AddOrUpdateAsync(tx As ITransaction, key As TKey, addValueFactory As Func(Of TKey, TValue), updateValueFactory As Func(Of TKey, TValue, TValue)) As Task(Of TValue)
    parameters:
    - id: tx
      type: Microsoft.ServiceFabric.Data.ITransaction
      description: Transaction to associate this operation with.
    - id: key
      type: '{TKey}'
      description: The key to be added or whose value should be updated.
    - id: addValueFactory
      type: System.Func{{TKey},{TValue}}
      description: The function used to generate a value for an absent key.
    - id: updateValueFactory
      type: System.Func{{TKey},{TValue},{TValue}}
      description: The function used to generate a new value for an existing key based on the key's existing value.
    return:
      type: System.Threading.Tasks.Task{{TValue}}
      description: "\nTask that represents the asynchronous add or update operation. The task result is the new value for the key. This will be\neither the result of addValueFactory (if the key was absent) or the result of updateValueFactory (if the key was present).\n"
  overload: Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.AddOrUpdateAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <em>tx</em> is null, or <em>key</em> is null or cannot be serialized, or <em>addValueFactory</em> is null, or <em>updateValueFactory</em> is null.
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: The operation failed to complete within the default timeout.
  - type: System.Fabric.FabricNotPrimaryException
    commentId: T:System.Fabric.FabricNotPrimaryException
    description: The exception that is thrown when the <cref name="IReliableDictionary{TKey, TValue}"></cref> is not in <cref name="ReplicaRole.Primary"></cref>.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\nThe exception that is thrown when a method call is invalid for the object's current state.\nExample, transaction used is already terminated: committed or aborted.\n"
  nameWithType.vb: IReliableDictionary(Of TKey, TValue).AddOrUpdateAsync(ITransaction, TKey, Func(Of TKey, TValue), Func(Of TKey, TValue, TValue))
  fullName.vb: Microsoft.ServiceFabric.Data.Collections.IReliableDictionary(Of TKey, TValue).AddOrUpdateAsync(Microsoft.ServiceFabric.Data.ITransaction, TKey, System.Func(Of TKey, TValue), System.Func(Of TKey, TValue, TValue))
  name.vb: AddOrUpdateAsync(ITransaction, TKey, Func(Of TKey, TValue), Func(Of TKey, TValue, TValue))
- uid: Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.AddOrUpdateAsync(Microsoft.ServiceFabric.Data.ITransaction,`0,`1,System.Func{`0,`1,`1})
  commentId: M:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.AddOrUpdateAsync(Microsoft.ServiceFabric.Data.ITransaction,`0,`1,System.Func{`0,`1,`1})
  id: AddOrUpdateAsync(Microsoft.ServiceFabric.Data.ITransaction,`0,`1,System.Func{`0,`1,`1})
  parent: Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2
  langs:
  - csharp
  - vb
  name: AddOrUpdateAsync(ITransaction, TKey, TValue, Func<TKey, TValue, TValue>)
  nameWithType: IReliableDictionary<TKey, TValue>.AddOrUpdateAsync(ITransaction, TKey, TValue, Func<TKey, TValue, TValue>)
  fullName: Microsoft.ServiceFabric.Data.Collections.IReliableDictionary<TKey, TValue>.AddOrUpdateAsync(Microsoft.ServiceFabric.Data.ITransaction, TKey, TValue, System.Func<TKey, TValue, TValue>)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Interfaces/IReliableDictionary.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: AddOrUpdateAsync
    path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Interfaces/IReliableDictionary.cs
    startLine: 138
  assemblies:
  - Microsoft.ServiceFabric.Data.Interfaces
  namespace: Microsoft.ServiceFabric.Data.Collections
  summary: "\nAdds a key/value pair to the reliable dictionary if the key does not already exist, or updates a key/value pair \nin the reliable dictionary by using the specified function if the key already exists.\n"
  example: []
  syntax:
    content: Task<TValue> AddOrUpdateAsync(ITransaction tx, TKey key, TValue addValue, Func<TKey, TValue, TValue> updateValueFactory)
    content.vb: Function AddOrUpdateAsync(tx As ITransaction, key As TKey, addValue As TValue, updateValueFactory As Func(Of TKey, TValue, TValue)) As Task(Of TValue)
    parameters:
    - id: tx
      type: Microsoft.ServiceFabric.Data.ITransaction
      description: Transaction to associate this operation with.
    - id: key
      type: '{TKey}'
      description: The key to be added or whose value should be updated.
    - id: addValue
      type: '{TValue}'
      description: The value to be added for an absent key. The value can be null for reference types.
    - id: updateValueFactory
      type: System.Func{{TKey},{TValue},{TValue}}
      description: The function used to generate a new value for an existing key based on the key's existing value.
    return:
      type: System.Threading.Tasks.Task{{TValue}}
      description: "\nTask that represents the asynchronous add or update operation. The task result is the new value for the key. This will be\neither addValue (if the key was absent) or the result of updateValueFactory (if the key was present).\n"
  overload: Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.AddOrUpdateAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <em>tx</em> is null, or <em>key</em> is null or cannot be serialized, or <em>updateValueFactory</em> is null.
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: The operation failed to complete within the default timeout.
  - type: System.Fabric.FabricNotPrimaryException
    commentId: T:System.Fabric.FabricNotPrimaryException
    description: The exception that is thrown when the <cref name="IReliableDictionary{TKey, TValue}"></cref> is not in <cref name="ReplicaRole.Primary"></cref>.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\nThe exception that is thrown when a method call is invalid for the object's current state.\nExample, transaction used is already terminated: committed or aborted.\n"
  nameWithType.vb: IReliableDictionary(Of TKey, TValue).AddOrUpdateAsync(ITransaction, TKey, TValue, Func(Of TKey, TValue, TValue))
  fullName.vb: Microsoft.ServiceFabric.Data.Collections.IReliableDictionary(Of TKey, TValue).AddOrUpdateAsync(Microsoft.ServiceFabric.Data.ITransaction, TKey, TValue, System.Func(Of TKey, TValue, TValue))
  name.vb: AddOrUpdateAsync(ITransaction, TKey, TValue, Func(Of TKey, TValue, TValue))
- uid: Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.AddOrUpdateAsync(Microsoft.ServiceFabric.Data.ITransaction,`0,System.Func{`0,`1},System.Func{`0,`1,`1},System.TimeSpan,System.Threading.CancellationToken)
  commentId: M:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.AddOrUpdateAsync(Microsoft.ServiceFabric.Data.ITransaction,`0,System.Func{`0,`1},System.Func{`0,`1,`1},System.TimeSpan,System.Threading.CancellationToken)
  id: AddOrUpdateAsync(Microsoft.ServiceFabric.Data.ITransaction,`0,System.Func{`0,`1},System.Func{`0,`1,`1},System.TimeSpan,System.Threading.CancellationToken)
  parent: Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2
  langs:
  - csharp
  - vb
  name: AddOrUpdateAsync(ITransaction, TKey, Func<TKey, TValue>, Func<TKey, TValue, TValue>, TimeSpan, CancellationToken)
  nameWithType: IReliableDictionary<TKey, TValue>.AddOrUpdateAsync(ITransaction, TKey, Func<TKey, TValue>, Func<TKey, TValue, TValue>, TimeSpan, CancellationToken)
  fullName: Microsoft.ServiceFabric.Data.Collections.IReliableDictionary<TKey, TValue>.AddOrUpdateAsync(Microsoft.ServiceFabric.Data.ITransaction, TKey, System.Func<TKey, TValue>, System.Func<TKey, TValue, TValue>, System.TimeSpan, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Interfaces/IReliableDictionary.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: AddOrUpdateAsync
    path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Interfaces/IReliableDictionary.cs
    startLine: 167
  assemblies:
  - Microsoft.ServiceFabric.Data.Interfaces
  namespace: Microsoft.ServiceFabric.Data.Collections
  summary: "\nUses the specified functions to add a key/value pair to the reliable dictionary if the key does not already exist,\nor to update a key/value pair in the reliable dictionary if the key already exists.\n"
  example: []
  syntax:
    content: Task<TValue> AddOrUpdateAsync(ITransaction tx, TKey key, Func<TKey, TValue> addValueFactory, Func<TKey, TValue, TValue> updateValueFactory, TimeSpan timeout, CancellationToken cancellationToken)
    content.vb: Function AddOrUpdateAsync(tx As ITransaction, key As TKey, addValueFactory As Func(Of TKey, TValue), updateValueFactory As Func(Of TKey, TValue, TValue), timeout As TimeSpan, cancellationToken As CancellationToken) As Task(Of TValue)
    parameters:
    - id: tx
      type: Microsoft.ServiceFabric.Data.ITransaction
      description: Transaction to associate this operation with.
    - id: key
      type: '{TKey}'
      description: The key to be added or whose value should be updated.
    - id: addValueFactory
      type: System.Func{{TKey},{TValue}}
      description: The function used to generate a value for an absent key.
    - id: updateValueFactory
      type: System.Func{{TKey},{TValue},{TValue}}
      description: The function used to generate a new value for an existing key based on the key's existing value.
    - id: timeout
      type: System.TimeSpan
      description: The amount of time to wait for the operation to complete before throwing a TimeoutException. Primarily used to prevent deadlocks. The default is 4 seconds.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The token to monitor for cancellation requests. The default is None.
    return:
      type: System.Threading.Tasks.Task{{TValue}}
      description: "\nTask that represents the asynchronous add or update operation. The task result is the new value for the key. This will be\neither the result of addValueFactory (if the key was absent) or the result of updateValueFactory (if the key was present).\n"
  overload: Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.AddOrUpdateAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <em>tx</em> is null, or <em>key</em> is null or cannot be serialized, or <em>addValueFactory</em> is null, or <em>updateValueFactory</em> is null.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <em>timeout</em> is negative.
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: The operation failed to complete within the given timeout.
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: The operation was canceled.
  - type: System.Fabric.FabricNotPrimaryException
    commentId: T:System.Fabric.FabricNotPrimaryException
    description: The exception that is thrown when the <cref name="IReliableDictionary{TKey, TValue}"></cref> is not in <cref name="ReplicaRole.Primary"></cref>.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\nThe exception that is thrown when a method call is invalid for the object's current state.\nExample, transaction used is already terminated: committed or aborted.\n"
  nameWithType.vb: IReliableDictionary(Of TKey, TValue).AddOrUpdateAsync(ITransaction, TKey, Func(Of TKey, TValue), Func(Of TKey, TValue, TValue), TimeSpan, CancellationToken)
  fullName.vb: Microsoft.ServiceFabric.Data.Collections.IReliableDictionary(Of TKey, TValue).AddOrUpdateAsync(Microsoft.ServiceFabric.Data.ITransaction, TKey, System.Func(Of TKey, TValue), System.Func(Of TKey, TValue, TValue), System.TimeSpan, System.Threading.CancellationToken)
  name.vb: AddOrUpdateAsync(ITransaction, TKey, Func(Of TKey, TValue), Func(Of TKey, TValue, TValue), TimeSpan, CancellationToken)
- uid: Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.AddOrUpdateAsync(Microsoft.ServiceFabric.Data.ITransaction,`0,`1,System.Func{`0,`1,`1},System.TimeSpan,System.Threading.CancellationToken)
  commentId: M:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.AddOrUpdateAsync(Microsoft.ServiceFabric.Data.ITransaction,`0,`1,System.Func{`0,`1,`1},System.TimeSpan,System.Threading.CancellationToken)
  id: AddOrUpdateAsync(Microsoft.ServiceFabric.Data.ITransaction,`0,`1,System.Func{`0,`1,`1},System.TimeSpan,System.Threading.CancellationToken)
  parent: Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2
  langs:
  - csharp
  - vb
  name: AddOrUpdateAsync(ITransaction, TKey, TValue, Func<TKey, TValue, TValue>, TimeSpan, CancellationToken)
  nameWithType: IReliableDictionary<TKey, TValue>.AddOrUpdateAsync(ITransaction, TKey, TValue, Func<TKey, TValue, TValue>, TimeSpan, CancellationToken)
  fullName: Microsoft.ServiceFabric.Data.Collections.IReliableDictionary<TKey, TValue>.AddOrUpdateAsync(Microsoft.ServiceFabric.Data.ITransaction, TKey, TValue, System.Func<TKey, TValue, TValue>, System.TimeSpan, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Interfaces/IReliableDictionary.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: AddOrUpdateAsync
    path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Interfaces/IReliableDictionary.cs
    startLine: 198
  assemblies:
  - Microsoft.ServiceFabric.Data.Interfaces
  namespace: Microsoft.ServiceFabric.Data.Collections
  summary: "\nAdds a key/value pair to the reliable dictionary if the key does not already exist, or updates a key/value pair \nin the reliable dictionary by using the specified function if the key already exists.\n"
  example: []
  syntax:
    content: Task<TValue> AddOrUpdateAsync(ITransaction tx, TKey key, TValue addValue, Func<TKey, TValue, TValue> updateValueFactory, TimeSpan timeout, CancellationToken cancellationToken)
    content.vb: Function AddOrUpdateAsync(tx As ITransaction, key As TKey, addValue As TValue, updateValueFactory As Func(Of TKey, TValue, TValue), timeout As TimeSpan, cancellationToken As CancellationToken) As Task(Of TValue)
    parameters:
    - id: tx
      type: Microsoft.ServiceFabric.Data.ITransaction
      description: Transaction to associate this operation with.
    - id: key
      type: '{TKey}'
      description: The key to be added or whose value should be updated.
    - id: addValue
      type: '{TValue}'
      description: The value to be added for an absent key. The value can be null for reference types.
    - id: updateValueFactory
      type: System.Func{{TKey},{TValue},{TValue}}
      description: The function used to generate a new value for an existing key based on the key's existing value.
    - id: timeout
      type: System.TimeSpan
      description: The amount of time to wait for the operation to complete before throwing a TimeoutException. Primarily used to prevent deadlocks. The default is 4 seconds.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The token to monitor for cancellation requests. The default is None.
    return:
      type: System.Threading.Tasks.Task{{TValue}}
      description: "\nTask that represents the asynchronous add or update operation. The task result is the new value for the key. This will be\neither addValue (if the key was absent) or the result of updateValueFactory (if the key was present).\n"
  overload: Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.AddOrUpdateAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <em>tx</em> is null, or <em>key</em> is null or cannot be serialized, or <em>updateValueFactory</em> is null.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <em>timeout</em> is negative.
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: The operation failed to complete within the given timeout.
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: The operation was canceled.
  - type: System.Fabric.FabricNotPrimaryException
    commentId: T:System.Fabric.FabricNotPrimaryException
    description: The exception that is thrown when the <cref name="IReliableDictionary{TKey, TValue}"></cref> is not in <cref name="ReplicaRole.Primary"></cref>.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\nThe exception that is thrown when a method call is invalid for the object's current state.\nExample, transaction used is already terminated: committed or aborted.\n"
  nameWithType.vb: IReliableDictionary(Of TKey, TValue).AddOrUpdateAsync(ITransaction, TKey, TValue, Func(Of TKey, TValue, TValue), TimeSpan, CancellationToken)
  fullName.vb: Microsoft.ServiceFabric.Data.Collections.IReliableDictionary(Of TKey, TValue).AddOrUpdateAsync(Microsoft.ServiceFabric.Data.ITransaction, TKey, TValue, System.Func(Of TKey, TValue, TValue), System.TimeSpan, System.Threading.CancellationToken)
  name.vb: AddOrUpdateAsync(ITransaction, TKey, TValue, Func(Of TKey, TValue, TValue), TimeSpan, CancellationToken)
- uid: Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.ClearAsync(System.TimeSpan,System.Threading.CancellationToken)
  commentId: M:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.ClearAsync(System.TimeSpan,System.Threading.CancellationToken)
  id: ClearAsync(System.TimeSpan,System.Threading.CancellationToken)
  parent: Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2
  langs:
  - csharp
  - vb
  name: ClearAsync(TimeSpan, CancellationToken)
  nameWithType: IReliableDictionary<TKey, TValue>.ClearAsync(TimeSpan, CancellationToken)
  fullName: Microsoft.ServiceFabric.Data.Collections.IReliableDictionary<TKey, TValue>.ClearAsync(System.TimeSpan, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Interfaces/IReliableDictionary.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: ClearAsync
    path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Interfaces/IReliableDictionary.cs
    startLine: 216
  assemblies:
  - Microsoft.ServiceFabric.Data.Interfaces
  namespace: Microsoft.ServiceFabric.Data.Collections
  summary: "\nRemoves all keys and values from the reliable dictionary.\n"
  example: []
  syntax:
    content: Task ClearAsync(TimeSpan timeout, CancellationToken cancellationToken)
    content.vb: Function ClearAsync(timeout As TimeSpan, cancellationToken As CancellationToken) As Task
    parameters:
    - id: timeout
      type: System.TimeSpan
      description: The amount of time to wait for the operation to complete before throwing a TimeoutException. Primarily used to prevent deadlocks. The default is 4 seconds.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The token to monitor for cancellation requests. The default is None.
    return:
      type: System.Threading.Tasks.Task
      description: Task that represents the asynchronous clear operation.
  overload: Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.ClearAsync*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <em>timeout</em> is negative.
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: The operation failed to complete within the given timeout.
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: The operation was canceled.
  - type: System.Fabric.FabricNotPrimaryException
    commentId: T:System.Fabric.FabricNotPrimaryException
    description: The exception that is thrown when the <cref name="IReliableDictionary{TKey, TValue}"></cref> is not in <cref name="ReplicaRole.Primary"></cref>.
  nameWithType.vb: IReliableDictionary(Of TKey, TValue).ClearAsync(TimeSpan, CancellationToken)
  fullName.vb: Microsoft.ServiceFabric.Data.Collections.IReliableDictionary(Of TKey, TValue).ClearAsync(System.TimeSpan, System.Threading.CancellationToken)
- uid: Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.ContainsKeyAsync(Microsoft.ServiceFabric.Data.ITransaction,`0)
  commentId: M:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.ContainsKeyAsync(Microsoft.ServiceFabric.Data.ITransaction,`0)
  id: ContainsKeyAsync(Microsoft.ServiceFabric.Data.ITransaction,`0)
  parent: Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2
  langs:
  - csharp
  - vb
  name: ContainsKeyAsync(ITransaction, TKey)
  nameWithType: IReliableDictionary<TKey, TValue>.ContainsKeyAsync(ITransaction, TKey)
  fullName: Microsoft.ServiceFabric.Data.Collections.IReliableDictionary<TKey, TValue>.ContainsKeyAsync(Microsoft.ServiceFabric.Data.ITransaction, TKey)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Interfaces/IReliableDictionary.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: ContainsKeyAsync
    path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Interfaces/IReliableDictionary.cs
    startLine: 236
  assemblies:
  - Microsoft.ServiceFabric.Data.Interfaces
  namespace: Microsoft.ServiceFabric.Data.Collections
  summary: "\nDetermines whether the reliable dictionary contains the specified key.\n"
  example: []
  syntax:
    content: Task<bool> ContainsKeyAsync(ITransaction tx, TKey key)
    content.vb: Function ContainsKeyAsync(tx As ITransaction, key As TKey) As Task(Of Boolean)
    parameters:
    - id: tx
      type: Microsoft.ServiceFabric.Data.ITransaction
      description: Transaction to associate this operation with.
    - id: key
      type: '{TKey}'
      description: The key to locate in the reliable dictionary.
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
      description: A task that represents the asynchronous operation. The task result indicates whether the key exists.
  overload: Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.ContainsKeyAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <em>tx</em> is null, or <em>key</em> is null or cannot be serialized.
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: The operation failed to complete within the default timeout.
  - type: System.Fabric.FabricNotReadableException
    commentId: T:System.Fabric.FabricNotReadableException
    description: "\nException indicates that the Reliable Dictionary cannot serve reads at the moment.\n<cref name=\"FabricNotReadableException\"></cref> can be thrown in all <cref name=\"ReplicaRole\"></cref>s.\nOne example for it being thrown in the <cref name=\"ReplicaRole.Primary\"></cref> is loss of <cref name=\"IStatefulServicePartition.ReadStatus\"></cref>.\nOne example for it being thrown in the <cref name=\"ReplicaRole.ActiveSecondary\"></cref> is that Reliable Collection's state is not yet consistent.\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\nThe exception that is thrown when a method call is invalid for the object's current state.\nExample, transaction used is already terminated: committed or aborted.\n"
  nameWithType.vb: IReliableDictionary(Of TKey, TValue).ContainsKeyAsync(ITransaction, TKey)
  fullName.vb: Microsoft.ServiceFabric.Data.Collections.IReliableDictionary(Of TKey, TValue).ContainsKeyAsync(Microsoft.ServiceFabric.Data.ITransaction, TKey)
- uid: Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.ContainsKeyAsync(Microsoft.ServiceFabric.Data.ITransaction,`0,Microsoft.ServiceFabric.Data.Collections.LockMode)
  commentId: M:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.ContainsKeyAsync(Microsoft.ServiceFabric.Data.ITransaction,`0,Microsoft.ServiceFabric.Data.Collections.LockMode)
  id: ContainsKeyAsync(Microsoft.ServiceFabric.Data.ITransaction,`0,Microsoft.ServiceFabric.Data.Collections.LockMode)
  parent: Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2
  langs:
  - csharp
  - vb
  name: ContainsKeyAsync(ITransaction, TKey, LockMode)
  nameWithType: IReliableDictionary<TKey, TValue>.ContainsKeyAsync(ITransaction, TKey, LockMode)
  fullName: Microsoft.ServiceFabric.Data.Collections.IReliableDictionary<TKey, TValue>.ContainsKeyAsync(Microsoft.ServiceFabric.Data.ITransaction, TKey, Microsoft.ServiceFabric.Data.Collections.LockMode)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Interfaces/IReliableDictionary.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: ContainsKeyAsync
    path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Interfaces/IReliableDictionary.cs
    startLine: 257
  assemblies:
  - Microsoft.ServiceFabric.Data.Interfaces
  namespace: Microsoft.ServiceFabric.Data.Collections
  summary: "\nDetermines whether the reliable dictionary contains the specified key.\n"
  example: []
  syntax:
    content: Task<bool> ContainsKeyAsync(ITransaction tx, TKey key, LockMode lockMode)
    content.vb: Function ContainsKeyAsync(tx As ITransaction, key As TKey, lockMode As LockMode) As Task(Of Boolean)
    parameters:
    - id: tx
      type: Microsoft.ServiceFabric.Data.ITransaction
      description: Transaction to associate this operation with.
    - id: key
      type: '{TKey}'
      description: The key to locate in the reliable dictionary.
    - id: lockMode
      type: Microsoft.ServiceFabric.Data.Collections.LockMode
      description: Type of locking to use for this read operation.
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
      description: A task that represents the asynchronous operation. The task result indicates whether the key exists.
  overload: Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.ContainsKeyAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <em>tx</em> is null, or <em>key</em> is null or cannot be serialized.
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: The operation failed to complete within the default timeout.
  - type: System.Fabric.FabricNotReadableException
    commentId: T:System.Fabric.FabricNotReadableException
    description: "\nException indicates that the Reliable Dictionary cannot serve reads at the moment.\n<cref name=\"FabricNotReadableException\"></cref> can be thrown in all <cref name=\"ReplicaRole\"></cref>s.\nOne example for it being thrown in the <cref name=\"ReplicaRole.Primary\"></cref> is loss of <cref name=\"IStatefulServicePartition.ReadStatus\"></cref>.\nOne example for it being thrown in the <cref name=\"ReplicaRole.ActiveSecondary\"></cref> is that Reliable Collection's state is not yet consistent.\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\nThe exception that is thrown when a method call is invalid for the object's current state.\nExample, transaction used is already terminated: committed or aborted.\n"
  nameWithType.vb: IReliableDictionary(Of TKey, TValue).ContainsKeyAsync(ITransaction, TKey, LockMode)
  fullName.vb: Microsoft.ServiceFabric.Data.Collections.IReliableDictionary(Of TKey, TValue).ContainsKeyAsync(Microsoft.ServiceFabric.Data.ITransaction, TKey, Microsoft.ServiceFabric.Data.Collections.LockMode)
- uid: Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.ContainsKeyAsync(Microsoft.ServiceFabric.Data.ITransaction,`0,System.TimeSpan,System.Threading.CancellationToken)
  commentId: M:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.ContainsKeyAsync(Microsoft.ServiceFabric.Data.ITransaction,`0,System.TimeSpan,System.Threading.CancellationToken)
  id: ContainsKeyAsync(Microsoft.ServiceFabric.Data.ITransaction,`0,System.TimeSpan,System.Threading.CancellationToken)
  parent: Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2
  langs:
  - csharp
  - vb
  name: ContainsKeyAsync(ITransaction, TKey, TimeSpan, CancellationToken)
  nameWithType: IReliableDictionary<TKey, TValue>.ContainsKeyAsync(ITransaction, TKey, TimeSpan, CancellationToken)
  fullName: Microsoft.ServiceFabric.Data.Collections.IReliableDictionary<TKey, TValue>.ContainsKeyAsync(Microsoft.ServiceFabric.Data.ITransaction, TKey, System.TimeSpan, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Interfaces/IReliableDictionary.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: ContainsKeyAsync
    path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Interfaces/IReliableDictionary.cs
    startLine: 281
  assemblies:
  - Microsoft.ServiceFabric.Data.Interfaces
  namespace: Microsoft.ServiceFabric.Data.Collections
  summary: "\nDetermines whether the reliable dictionary contains the specified key.\n"
  example: []
  syntax:
    content: Task<bool> ContainsKeyAsync(ITransaction tx, TKey key, TimeSpan timeout, CancellationToken cancellationToken)
    content.vb: Function ContainsKeyAsync(tx As ITransaction, key As TKey, timeout As TimeSpan, cancellationToken As CancellationToken) As Task(Of Boolean)
    parameters:
    - id: tx
      type: Microsoft.ServiceFabric.Data.ITransaction
      description: Transaction to associate this operation with.
    - id: key
      type: '{TKey}'
      description: The key to locate in the reliable dictionary.
    - id: timeout
      type: System.TimeSpan
      description: The amount of time to wait for the operation to complete before throwing a TimeoutException. Primarily used to prevent deadlocks. The default is 4 seconds.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The token to monitor for cancellation requests. The default is None.
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
      description: A task that represents the asynchronous operation. The task result indicates whether the key exists.
  overload: Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.ContainsKeyAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <em>tx</em> is null, or <em>key</em> is null or cannot be serialized.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <em>timeout</em> is negative.
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: The operation failed to complete within the given timeout.
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: The operation was canceled.
  - type: System.Fabric.FabricNotReadableException
    commentId: T:System.Fabric.FabricNotReadableException
    description: "\nException indicates that the Reliable Dictionary cannot serve reads at the moment.\n<cref name=\"FabricNotReadableException\"></cref> can be thrown in all <cref name=\"ReplicaRole\"></cref>s.\nOne example for it being thrown in the <cref name=\"ReplicaRole.Primary\"></cref> is loss of <cref name=\"IStatefulServicePartition.ReadStatus\"></cref>.\nOne example for it being thrown in the <cref name=\"ReplicaRole.ActiveSecondary\"></cref> is that Reliable Collection's state is not yet consistent.\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\nThe exception that is thrown when a method call is invalid for the object's current state.\nExample, transaction used is already terminated: committed or aborted.\n"
  nameWithType.vb: IReliableDictionary(Of TKey, TValue).ContainsKeyAsync(ITransaction, TKey, TimeSpan, CancellationToken)
  fullName.vb: Microsoft.ServiceFabric.Data.Collections.IReliableDictionary(Of TKey, TValue).ContainsKeyAsync(Microsoft.ServiceFabric.Data.ITransaction, TKey, System.TimeSpan, System.Threading.CancellationToken)
- uid: Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.ContainsKeyAsync(Microsoft.ServiceFabric.Data.ITransaction,`0,Microsoft.ServiceFabric.Data.Collections.LockMode,System.TimeSpan,System.Threading.CancellationToken)
  commentId: M:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.ContainsKeyAsync(Microsoft.ServiceFabric.Data.ITransaction,`0,Microsoft.ServiceFabric.Data.Collections.LockMode,System.TimeSpan,System.Threading.CancellationToken)
  id: ContainsKeyAsync(Microsoft.ServiceFabric.Data.ITransaction,`0,Microsoft.ServiceFabric.Data.Collections.LockMode,System.TimeSpan,System.Threading.CancellationToken)
  parent: Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2
  langs:
  - csharp
  - vb
  name: ContainsKeyAsync(ITransaction, TKey, LockMode, TimeSpan, CancellationToken)
  nameWithType: IReliableDictionary<TKey, TValue>.ContainsKeyAsync(ITransaction, TKey, LockMode, TimeSpan, CancellationToken)
  fullName: Microsoft.ServiceFabric.Data.Collections.IReliableDictionary<TKey, TValue>.ContainsKeyAsync(Microsoft.ServiceFabric.Data.ITransaction, TKey, Microsoft.ServiceFabric.Data.Collections.LockMode, System.TimeSpan, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Interfaces/IReliableDictionary.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: ContainsKeyAsync
    path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Interfaces/IReliableDictionary.cs
    startLine: 306
  assemblies:
  - Microsoft.ServiceFabric.Data.Interfaces
  namespace: Microsoft.ServiceFabric.Data.Collections
  summary: "\nDetermines whether the reliable dictionary contains the specified key.\n"
  example: []
  syntax:
    content: Task<bool> ContainsKeyAsync(ITransaction tx, TKey key, LockMode lockMode, TimeSpan timeout, CancellationToken cancellationToken)
    content.vb: Function ContainsKeyAsync(tx As ITransaction, key As TKey, lockMode As LockMode, timeout As TimeSpan, cancellationToken As CancellationToken) As Task(Of Boolean)
    parameters:
    - id: tx
      type: Microsoft.ServiceFabric.Data.ITransaction
      description: Transaction to associate this operation with.
    - id: key
      type: '{TKey}'
      description: The key to locate in the reliable dictionary.
    - id: lockMode
      type: Microsoft.ServiceFabric.Data.Collections.LockMode
      description: Type of locking to use for this read operation.
    - id: timeout
      type: System.TimeSpan
      description: The amount of time to wait for the operation to complete before throwing a TimeoutException. Primarily used to prevent deadlocks. The default is 4 seconds.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The token to monitor for cancellation requests. The default is None.
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
      description: A task that represents the asynchronous operation. The task result indicates whether the key exists.
  overload: Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.ContainsKeyAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <em>tx</em> is null, or <em>key</em> is null or cannot be serialized.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <em>timeout</em> is negative.
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: The operation failed to complete within the given timeout.
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: The operation was canceled.
  - type: System.Fabric.FabricNotReadableException
    commentId: T:System.Fabric.FabricNotReadableException
    description: "\nException indicates that the Reliable Dictionary cannot serve reads at the moment.\n<cref name=\"FabricNotReadableException\"></cref> can be thrown in all <cref name=\"ReplicaRole\"></cref>s.\nOne example for it being thrown in the <cref name=\"ReplicaRole.Primary\"></cref> is loss of <cref name=\"IStatefulServicePartition.ReadStatus\"></cref>.\nOne example for it being thrown in the <cref name=\"ReplicaRole.ActiveSecondary\"></cref> is that Reliable Collection's state is not yet consistent.\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\nThe exception that is thrown when a method call is invalid for the object's current state.\nExample, transaction used is already terminated: committed or aborted.\n"
  nameWithType.vb: IReliableDictionary(Of TKey, TValue).ContainsKeyAsync(ITransaction, TKey, LockMode, TimeSpan, CancellationToken)
  fullName.vb: Microsoft.ServiceFabric.Data.Collections.IReliableDictionary(Of TKey, TValue).ContainsKeyAsync(Microsoft.ServiceFabric.Data.ITransaction, TKey, Microsoft.ServiceFabric.Data.Collections.LockMode, System.TimeSpan, System.Threading.CancellationToken)
- uid: Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.CreateEnumerableAsync(Microsoft.ServiceFabric.Data.ITransaction)
  commentId: M:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.CreateEnumerableAsync(Microsoft.ServiceFabric.Data.ITransaction)
  id: CreateEnumerableAsync(Microsoft.ServiceFabric.Data.ITransaction)
  parent: Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2
  langs:
  - csharp
  - vb
  name: CreateEnumerableAsync(ITransaction)
  nameWithType: IReliableDictionary<TKey, TValue>.CreateEnumerableAsync(ITransaction)
  fullName: Microsoft.ServiceFabric.Data.Collections.IReliableDictionary<TKey, TValue>.CreateEnumerableAsync(Microsoft.ServiceFabric.Data.ITransaction)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Interfaces/IReliableDictionary.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: CreateEnumerableAsync
    path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Interfaces/IReliableDictionary.cs
    startLine: 332
  assemblies:
  - Microsoft.ServiceFabric.Data.Interfaces
  namespace: Microsoft.ServiceFabric.Data.Collections
  summary: "\nCreates an async enumerator over the <xref href=\"Microsoft.ServiceFabric.Data.Collections.IReliableDictionary%602\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  remarks: "\nThe enumerator returned from the reliable dictionary is safe to use concurrently with reads and writes\nto the dictionary. It represents a snapshot consistent view of the dictionary.\n"
  example: []
  syntax:
    content: Task<IAsyncEnumerable<KeyValuePair<TKey, TValue>>> CreateEnumerableAsync(ITransaction txn)
    content.vb: Function CreateEnumerableAsync(txn As ITransaction) As Task(Of IAsyncEnumerable(Of KeyValuePair(Of TKey, TValue)))
    parameters:
    - id: txn
      type: Microsoft.ServiceFabric.Data.ITransaction
      description: Transaction to associate this operation with.
    return:
      type: System.Threading.Tasks.Task{Microsoft.ServiceFabric.Data.IAsyncEnumerable{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}}
      description: An enumerator for the reliable dictionary.
  overload: Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.CreateEnumerableAsync*
  exceptions:
  - type: System.Fabric.FabricNotReadableException
    commentId: T:System.Fabric.FabricNotReadableException
    description: "\nException indicates that the Reliable Dictionary cannot serve reads at the moment.\n<cref name=\"FabricNotReadableException\"></cref> can be thrown in all <cref name=\"ReplicaRole\"></cref>s.\nOne example for it being thrown in the <cref name=\"ReplicaRole.Primary\"></cref> is loss of <cref name=\"IStatefulServicePartition.ReadStatus\"></cref>.\nOne example for it being thrown in the <cref name=\"ReplicaRole.ActiveSecondary\"></cref> is that Reliable Collection's state is not yet consistent.\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\nThe exception that is thrown when a method call is invalid for the object's current state.\nExample, transaction used is already terminated: committed or aborted.\n"
  nameWithType.vb: IReliableDictionary(Of TKey, TValue).CreateEnumerableAsync(ITransaction)
  fullName.vb: Microsoft.ServiceFabric.Data.Collections.IReliableDictionary(Of TKey, TValue).CreateEnumerableAsync(Microsoft.ServiceFabric.Data.ITransaction)
- uid: Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.CreateEnumerableAsync(Microsoft.ServiceFabric.Data.ITransaction,Microsoft.ServiceFabric.Data.Collections.EnumerationMode)
  commentId: M:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.CreateEnumerableAsync(Microsoft.ServiceFabric.Data.ITransaction,Microsoft.ServiceFabric.Data.Collections.EnumerationMode)
  id: CreateEnumerableAsync(Microsoft.ServiceFabric.Data.ITransaction,Microsoft.ServiceFabric.Data.Collections.EnumerationMode)
  parent: Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2
  langs:
  - csharp
  - vb
  name: CreateEnumerableAsync(ITransaction, EnumerationMode)
  nameWithType: IReliableDictionary<TKey, TValue>.CreateEnumerableAsync(ITransaction, EnumerationMode)
  fullName: Microsoft.ServiceFabric.Data.Collections.IReliableDictionary<TKey, TValue>.CreateEnumerableAsync(Microsoft.ServiceFabric.Data.ITransaction, Microsoft.ServiceFabric.Data.Collections.EnumerationMode)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Interfaces/IReliableDictionary.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: CreateEnumerableAsync
    path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Interfaces/IReliableDictionary.cs
    startLine: 348
  assemblies:
  - Microsoft.ServiceFabric.Data.Interfaces
  namespace: Microsoft.ServiceFabric.Data.Collections
  summary: "\nCreates an async enumerator over the reliable dictionary.\n"
  remarks: "\nThe enumerator returned from the reliable dictionary is safe to use concurrently with reads and writes\nto the dictionary. It represents a snapshot consistent view of the dictionary.\n"
  example: []
  syntax:
    content: Task<IAsyncEnumerable<KeyValuePair<TKey, TValue>>> CreateEnumerableAsync(ITransaction txn, EnumerationMode enumerationMode)
    content.vb: Function CreateEnumerableAsync(txn As ITransaction, enumerationMode As EnumerationMode) As Task(Of IAsyncEnumerable(Of KeyValuePair(Of TKey, TValue)))
    parameters:
    - id: txn
      type: Microsoft.ServiceFabric.Data.ITransaction
      description: Transaction to associate this operation with.
    - id: enumerationMode
      type: Microsoft.ServiceFabric.Data.Collections.EnumerationMode
      description: The enumeration mode to use. The default is Unordered.
    return:
      type: System.Threading.Tasks.Task{Microsoft.ServiceFabric.Data.IAsyncEnumerable{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}}
      description: An enumerator for the reliable dictionary.
  overload: Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.CreateEnumerableAsync*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\nThe exception that is thrown when a method call is invalid for the object's current state.\nExample, transaction used is already terminated: committed or aborted.\n"
  nameWithType.vb: IReliableDictionary(Of TKey, TValue).CreateEnumerableAsync(ITransaction, EnumerationMode)
  fullName.vb: Microsoft.ServiceFabric.Data.Collections.IReliableDictionary(Of TKey, TValue).CreateEnumerableAsync(Microsoft.ServiceFabric.Data.ITransaction, Microsoft.ServiceFabric.Data.Collections.EnumerationMode)
- uid: Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.CreateEnumerableAsync(Microsoft.ServiceFabric.Data.ITransaction,System.Func{`0,System.Boolean},Microsoft.ServiceFabric.Data.Collections.EnumerationMode)
  commentId: M:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.CreateEnumerableAsync(Microsoft.ServiceFabric.Data.ITransaction,System.Func{`0,System.Boolean},Microsoft.ServiceFabric.Data.Collections.EnumerationMode)
  id: CreateEnumerableAsync(Microsoft.ServiceFabric.Data.ITransaction,System.Func{`0,System.Boolean},Microsoft.ServiceFabric.Data.Collections.EnumerationMode)
  parent: Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2
  langs:
  - csharp
  - vb
  name: CreateEnumerableAsync(ITransaction, Func<TKey, Boolean>, EnumerationMode)
  nameWithType: IReliableDictionary<TKey, TValue>.CreateEnumerableAsync(ITransaction, Func<TKey, Boolean>, EnumerationMode)
  fullName: Microsoft.ServiceFabric.Data.Collections.IReliableDictionary<TKey, TValue>.CreateEnumerableAsync(Microsoft.ServiceFabric.Data.ITransaction, System.Func<TKey, System.Boolean>, Microsoft.ServiceFabric.Data.Collections.EnumerationMode)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Interfaces/IReliableDictionary.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: CreateEnumerableAsync
    path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Interfaces/IReliableDictionary.cs
    startLine: 365
  assemblies:
  - Microsoft.ServiceFabric.Data.Interfaces
  namespace: Microsoft.ServiceFabric.Data.Collections
  summary: "\nCreates an async enumerable over the reliable dictionary.\n"
  remarks: "\nThe enumerator returned from the reliable dictionary is safe to use concurrently with reads and writes\nto the dictionary. It represents a snapshot consistent view of the dictionary.\n"
  example: []
  syntax:
    content: Task<IAsyncEnumerable<KeyValuePair<TKey, TValue>>> CreateEnumerableAsync(ITransaction txn, Func<TKey, bool> filter, EnumerationMode enumerationMode)
    content.vb: Function CreateEnumerableAsync(txn As ITransaction, filter As Func(Of TKey, Boolean), enumerationMode As EnumerationMode) As Task(Of IAsyncEnumerable(Of KeyValuePair(Of TKey, TValue)))
    parameters:
    - id: txn
      type: Microsoft.ServiceFabric.Data.ITransaction
      description: Transaction to associate this operation with.
    - id: filter
      type: System.Func{{TKey},System.Boolean}
      description: Predicate that filters the keys to include in the enumeration.
    - id: enumerationMode
      type: Microsoft.ServiceFabric.Data.Collections.EnumerationMode
      description: The enumeration mode to use. The default is Unordered.
    return:
      type: System.Threading.Tasks.Task{Microsoft.ServiceFabric.Data.IAsyncEnumerable{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}}
      description: An enumerator for the reliable dictionary.
  overload: Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.CreateEnumerableAsync*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\nThe exception that is thrown when a method call is invalid for the object's current state.\nExample, transaction used is already terminated: committed or aborted.\n"
  nameWithType.vb: IReliableDictionary(Of TKey, TValue).CreateEnumerableAsync(ITransaction, Func(Of TKey, Boolean), EnumerationMode)
  fullName.vb: Microsoft.ServiceFabric.Data.Collections.IReliableDictionary(Of TKey, TValue).CreateEnumerableAsync(Microsoft.ServiceFabric.Data.ITransaction, System.Func(Of TKey, System.Boolean), Microsoft.ServiceFabric.Data.Collections.EnumerationMode)
  name.vb: CreateEnumerableAsync(ITransaction, Func(Of TKey, Boolean), EnumerationMode)
- uid: Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.GetOrAddAsync(Microsoft.ServiceFabric.Data.ITransaction,`0,System.Func{`0,`1})
  commentId: M:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.GetOrAddAsync(Microsoft.ServiceFabric.Data.ITransaction,`0,System.Func{`0,`1})
  id: GetOrAddAsync(Microsoft.ServiceFabric.Data.ITransaction,`0,System.Func{`0,`1})
  parent: Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2
  langs:
  - csharp
  - vb
  name: GetOrAddAsync(ITransaction, TKey, Func<TKey, TValue>)
  nameWithType: IReliableDictionary<TKey, TValue>.GetOrAddAsync(ITransaction, TKey, Func<TKey, TValue>)
  fullName: Microsoft.ServiceFabric.Data.Collections.IReliableDictionary<TKey, TValue>.GetOrAddAsync(Microsoft.ServiceFabric.Data.ITransaction, TKey, System.Func<TKey, TValue>)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Interfaces/IReliableDictionary.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: GetOrAddAsync
    path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Interfaces/IReliableDictionary.cs
    startLine: 388
  assemblies:
  - Microsoft.ServiceFabric.Data.Interfaces
  namespace: Microsoft.ServiceFabric.Data.Collections
  summary: "\nAdds a key/value pair to the reliable dictionary by using the specified function, if the key does not already exist.\n"
  example: []
  syntax:
    content: Task<TValue> GetOrAddAsync(ITransaction tx, TKey key, Func<TKey, TValue> valueFactory)
    content.vb: Function GetOrAddAsync(tx As ITransaction, key As TKey, valueFactory As Func(Of TKey, TValue)) As Task(Of TValue)
    parameters:
    - id: tx
      type: Microsoft.ServiceFabric.Data.ITransaction
      description: Transaction to associate this operation with.
    - id: key
      type: '{TKey}'
      description: The key of the element to add.
    - id: valueFactory
      type: System.Func{{TKey},{TValue}}
      description: The function used to generate a value for the key.
    return:
      type: System.Threading.Tasks.Task{{TValue}}
      description: "\nA task that represents the asynchronous add operation. The task result is the value for the key. This will be\neither the existing value for the key if the key is already in the dictionary, or the new value for the key\nas returned by valueFactory if the key was not in the dictionary.\n"
  overload: Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.GetOrAddAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <em>tx</em> is null, or <em>key</em> is null or cannot be serialized, or <em>valueFactory</em> is null.
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: The operation failed to complete within the default timeout.
  - type: System.Fabric.FabricNotPrimaryException
    commentId: T:System.Fabric.FabricNotPrimaryException
    description: The exception that is thrown when the <cref name="IReliableDictionary{TKey, TValue}"></cref> is not in <cref name="ReplicaRole.Primary"></cref>.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\nThe exception that is thrown when a method call is invalid for the object's current state.\nExample, transaction used is already terminated: committed or aborted.\n"
  nameWithType.vb: IReliableDictionary(Of TKey, TValue).GetOrAddAsync(ITransaction, TKey, Func(Of TKey, TValue))
  fullName.vb: Microsoft.ServiceFabric.Data.Collections.IReliableDictionary(Of TKey, TValue).GetOrAddAsync(Microsoft.ServiceFabric.Data.ITransaction, TKey, System.Func(Of TKey, TValue))
  name.vb: GetOrAddAsync(ITransaction, TKey, Func(Of TKey, TValue))
- uid: Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.GetOrAddAsync(Microsoft.ServiceFabric.Data.ITransaction,`0,`1)
  commentId: M:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.GetOrAddAsync(Microsoft.ServiceFabric.Data.ITransaction,`0,`1)
  id: GetOrAddAsync(Microsoft.ServiceFabric.Data.ITransaction,`0,`1)
  parent: Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2
  langs:
  - csharp
  - vb
  name: GetOrAddAsync(ITransaction, TKey, TValue)
  nameWithType: IReliableDictionary<TKey, TValue>.GetOrAddAsync(ITransaction, TKey, TValue)
  fullName: Microsoft.ServiceFabric.Data.Collections.IReliableDictionary<TKey, TValue>.GetOrAddAsync(Microsoft.ServiceFabric.Data.ITransaction, TKey, TValue)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Interfaces/IReliableDictionary.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: GetOrAddAsync
    path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Interfaces/IReliableDictionary.cs
    startLine: 407
  assemblies:
  - Microsoft.ServiceFabric.Data.Interfaces
  namespace: Microsoft.ServiceFabric.Data.Collections
  summary: "\nAdds a key/value pair to the reliable dictionary if the key does not already exist.\n"
  example: []
  syntax:
    content: Task<TValue> GetOrAddAsync(ITransaction tx, TKey key, TValue value)
    content.vb: Function GetOrAddAsync(tx As ITransaction, key As TKey, value As TValue) As Task(Of TValue)
    parameters:
    - id: tx
      type: Microsoft.ServiceFabric.Data.ITransaction
      description: Transaction to associate this operation with.
    - id: key
      type: '{TKey}'
      description: The key of the element to add.
    - id: value
      type: '{TValue}'
      description: The value to be added, if the key does not already exist.
    return:
      type: System.Threading.Tasks.Task{{TValue}}
      description: "\nA task that represents the asynchronous add operation. The task result is the value for the key. This will be either the\nexisting value for the key if the key is already in the dictionary, or the new value if the key was not in the dictionary.\n"
  overload: Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.GetOrAddAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <em>tx</em> is null, or <em>key</em> is null or cannot be serialized.
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: The operation failed to complete within the default timeout.
  - type: System.Fabric.FabricNotPrimaryException
    commentId: T:System.Fabric.FabricNotPrimaryException
    description: The exception that is thrown when the <cref name="IReliableDictionary{TKey, TValue}"></cref> is not in <cref name="ReplicaRole.Primary"></cref>.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\nThe exception that is thrown when a method call is invalid for the object's current state.\nExample, transaction used is already terminated: committed or aborted.\n"
  nameWithType.vb: IReliableDictionary(Of TKey, TValue).GetOrAddAsync(ITransaction, TKey, TValue)
  fullName.vb: Microsoft.ServiceFabric.Data.Collections.IReliableDictionary(Of TKey, TValue).GetOrAddAsync(Microsoft.ServiceFabric.Data.ITransaction, TKey, TValue)
- uid: Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.GetOrAddAsync(Microsoft.ServiceFabric.Data.ITransaction,`0,System.Func{`0,`1},System.TimeSpan,System.Threading.CancellationToken)
  commentId: M:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.GetOrAddAsync(Microsoft.ServiceFabric.Data.ITransaction,`0,System.Func{`0,`1},System.TimeSpan,System.Threading.CancellationToken)
  id: GetOrAddAsync(Microsoft.ServiceFabric.Data.ITransaction,`0,System.Func{`0,`1},System.TimeSpan,System.Threading.CancellationToken)
  parent: Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2
  langs:
  - csharp
  - vb
  name: GetOrAddAsync(ITransaction, TKey, Func<TKey, TValue>, TimeSpan, CancellationToken)
  nameWithType: IReliableDictionary<TKey, TValue>.GetOrAddAsync(ITransaction, TKey, Func<TKey, TValue>, TimeSpan, CancellationToken)
  fullName: Microsoft.ServiceFabric.Data.Collections.IReliableDictionary<TKey, TValue>.GetOrAddAsync(Microsoft.ServiceFabric.Data.ITransaction, TKey, System.Func<TKey, TValue>, System.TimeSpan, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Interfaces/IReliableDictionary.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: GetOrAddAsync
    path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Interfaces/IReliableDictionary.cs
    startLine: 431
  assemblies:
  - Microsoft.ServiceFabric.Data.Interfaces
  namespace: Microsoft.ServiceFabric.Data.Collections
  summary: "\nAdds a key/value pair to the reliable dictionary by using the specified function, if the key does not already exist.\n"
  example: []
  syntax:
    content: Task<TValue> GetOrAddAsync(ITransaction tx, TKey key, Func<TKey, TValue> valueFactory, TimeSpan timeout, CancellationToken cancellationToken)
    content.vb: Function GetOrAddAsync(tx As ITransaction, key As TKey, valueFactory As Func(Of TKey, TValue), timeout As TimeSpan, cancellationToken As CancellationToken) As Task(Of TValue)
    parameters:
    - id: tx
      type: Microsoft.ServiceFabric.Data.ITransaction
      description: Transaction to associate this operation with.
    - id: key
      type: '{TKey}'
      description: The key of the element to add.
    - id: valueFactory
      type: System.Func{{TKey},{TValue}}
      description: The function used to generate a value for the key.
    - id: timeout
      type: System.TimeSpan
      description: The amount of time to wait for the operation to complete before throwing a TimeoutException. Primarily used to prevent deadlocks. The default is 4 seconds.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The token to monitor for cancellation requests. The default is None.
    return:
      type: System.Threading.Tasks.Task{{TValue}}
      description: "\nA task that represents the asynchronous add operation. The task result is the value for the key. This will be\neither the existing value for the key if the key is already in the dictionary, or the new value for the key\nas returned by valueFactory if the key was not in the dictionary.\n"
  overload: Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.GetOrAddAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <em>tx</em> is null, or <em>key</em> is null or cannot be serialized, or <em>valueFactory</em> is null.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <em>timeout</em> is negative.
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: The operation failed to complete within the given timeout.
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: The operation was canceled.
  - type: System.Fabric.FabricNotPrimaryException
    commentId: T:System.Fabric.FabricNotPrimaryException
    description: The exception that is thrown when the <cref name="IReliableDictionary{TKey, TValue}"></cref> is not in <cref name="ReplicaRole.Primary"></cref>.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\nThe exception that is thrown when a method call is invalid for the object's current state.\nExample, transaction used is already terminated: committed or aborted.\n"
  nameWithType.vb: IReliableDictionary(Of TKey, TValue).GetOrAddAsync(ITransaction, TKey, Func(Of TKey, TValue), TimeSpan, CancellationToken)
  fullName.vb: Microsoft.ServiceFabric.Data.Collections.IReliableDictionary(Of TKey, TValue).GetOrAddAsync(Microsoft.ServiceFabric.Data.ITransaction, TKey, System.Func(Of TKey, TValue), System.TimeSpan, System.Threading.CancellationToken)
  name.vb: GetOrAddAsync(ITransaction, TKey, Func(Of TKey, TValue), TimeSpan, CancellationToken)
- uid: Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.GetOrAddAsync(Microsoft.ServiceFabric.Data.ITransaction,`0,`1,System.TimeSpan,System.Threading.CancellationToken)
  commentId: M:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.GetOrAddAsync(Microsoft.ServiceFabric.Data.ITransaction,`0,`1,System.TimeSpan,System.Threading.CancellationToken)
  id: GetOrAddAsync(Microsoft.ServiceFabric.Data.ITransaction,`0,`1,System.TimeSpan,System.Threading.CancellationToken)
  parent: Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2
  langs:
  - csharp
  - vb
  name: GetOrAddAsync(ITransaction, TKey, TValue, TimeSpan, CancellationToken)
  nameWithType: IReliableDictionary<TKey, TValue>.GetOrAddAsync(ITransaction, TKey, TValue, TimeSpan, CancellationToken)
  fullName: Microsoft.ServiceFabric.Data.Collections.IReliableDictionary<TKey, TValue>.GetOrAddAsync(Microsoft.ServiceFabric.Data.ITransaction, TKey, TValue, System.TimeSpan, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Interfaces/IReliableDictionary.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: GetOrAddAsync
    path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Interfaces/IReliableDictionary.cs
    startLine: 459
  assemblies:
  - Microsoft.ServiceFabric.Data.Interfaces
  namespace: Microsoft.ServiceFabric.Data.Collections
  summary: "\nAdds a key/value pair to the reliable dictionary if the key does not already exist.\n"
  example: []
  syntax:
    content: Task<TValue> GetOrAddAsync(ITransaction tx, TKey key, TValue value, TimeSpan timeout, CancellationToken cancellationToken)
    content.vb: Function GetOrAddAsync(tx As ITransaction, key As TKey, value As TValue, timeout As TimeSpan, cancellationToken As CancellationToken) As Task(Of TValue)
    parameters:
    - id: tx
      type: Microsoft.ServiceFabric.Data.ITransaction
      description: Transaction to associate this operation with.
    - id: key
      type: '{TKey}'
      description: The key of the element to add.
    - id: value
      type: '{TValue}'
      description: The value to be added, if the key does not already exist.
    - id: timeout
      type: System.TimeSpan
      description: The amount of time to wait for the operation to complete before throwing a TimeoutException. Primarily used to prevent deadlocks. The default is 4 seconds.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The token to monitor for cancellation requests. The default is None.
    return:
      type: System.Threading.Tasks.Task{{TValue}}
      description: "\nA task that represents the asynchronous add operation. The task result is the value for the key. This will be either the\nexisting value for the key if the key is already in the dictionary, or the new value if the key was not in the dictionary.\n"
  overload: Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.GetOrAddAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <em>tx</em> is null, or <em>key</em> is null or cannot be serialized.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <em>timeout</em> is negative.
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: The operation failed to complete within the given timeout.
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: The operation was canceled.
  - type: System.Fabric.FabricNotPrimaryException
    commentId: T:System.Fabric.FabricNotPrimaryException
    description: The exception that is thrown when the <cref name="IReliableDictionary{TKey, TValue}"></cref> is not in <cref name="ReplicaRole.Primary"></cref>.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\nThe exception that is thrown when a method call is invalid for the object's current state.\nExample, transaction used is already terminated: committed or aborted.\n"
  nameWithType.vb: IReliableDictionary(Of TKey, TValue).GetOrAddAsync(ITransaction, TKey, TValue, TimeSpan, CancellationToken)
  fullName.vb: Microsoft.ServiceFabric.Data.Collections.IReliableDictionary(Of TKey, TValue).GetOrAddAsync(Microsoft.ServiceFabric.Data.ITransaction, TKey, TValue, System.TimeSpan, System.Threading.CancellationToken)
- uid: Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.TryAddAsync(Microsoft.ServiceFabric.Data.ITransaction,`0,`1)
  commentId: M:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.TryAddAsync(Microsoft.ServiceFabric.Data.ITransaction,`0,`1)
  id: TryAddAsync(Microsoft.ServiceFabric.Data.ITransaction,`0,`1)
  parent: Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2
  langs:
  - csharp
  - vb
  name: TryAddAsync(ITransaction, TKey, TValue)
  nameWithType: IReliableDictionary<TKey, TValue>.TryAddAsync(ITransaction, TKey, TValue)
  fullName: Microsoft.ServiceFabric.Data.Collections.IReliableDictionary<TKey, TValue>.TryAddAsync(Microsoft.ServiceFabric.Data.ITransaction, TKey, TValue)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Interfaces/IReliableDictionary.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: TryAddAsync
    path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Interfaces/IReliableDictionary.cs
    startLine: 480
  assemblies:
  - Microsoft.ServiceFabric.Data.Interfaces
  namespace: Microsoft.ServiceFabric.Data.Collections
  summary: "\nAttempts to add the specified key and value to the reliable dictionary.\n"
  example: []
  syntax:
    content: Task<bool> TryAddAsync(ITransaction tx, TKey key, TValue value)
    content.vb: Function TryAddAsync(tx As ITransaction, key As TKey, value As TValue) As Task(Of Boolean)
    parameters:
    - id: tx
      type: Microsoft.ServiceFabric.Data.ITransaction
      description: Transaction to associate this operation with.
    - id: key
      type: '{TKey}'
      description: The key of the element to add.
    - id: value
      type: '{TValue}'
      description: The value of the element to add. The value can be null for reference types.
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
      description: A task that represents the asynchronous add operation. The task result indicates whether the key/value pair was added.
  overload: Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.TryAddAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <em>tx</em> is null, or <em>key</em> is null or cannot be serialized.
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: The operation failed to complete within the default timeout.
  - type: System.Fabric.FabricNotPrimaryException
    commentId: T:System.Fabric.FabricNotPrimaryException
    description: The exception that is thrown when the <cref name="IReliableDictionary{TKey, TValue}"></cref> is not in <cref name="ReplicaRole.Primary"></cref>.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\nThe exception that is thrown when a method call is invalid for the object's current state.\nExample, transaction used is already terminated: committed or aborted.\n"
  nameWithType.vb: IReliableDictionary(Of TKey, TValue).TryAddAsync(ITransaction, TKey, TValue)
  fullName.vb: Microsoft.ServiceFabric.Data.Collections.IReliableDictionary(Of TKey, TValue).TryAddAsync(Microsoft.ServiceFabric.Data.ITransaction, TKey, TValue)
- uid: Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.TryAddAsync(Microsoft.ServiceFabric.Data.ITransaction,`0,`1,System.TimeSpan,System.Threading.CancellationToken)
  commentId: M:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.TryAddAsync(Microsoft.ServiceFabric.Data.ITransaction,`0,`1,System.TimeSpan,System.Threading.CancellationToken)
  id: TryAddAsync(Microsoft.ServiceFabric.Data.ITransaction,`0,`1,System.TimeSpan,System.Threading.CancellationToken)
  parent: Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2
  langs:
  - csharp
  - vb
  name: TryAddAsync(ITransaction, TKey, TValue, TimeSpan, CancellationToken)
  nameWithType: IReliableDictionary<TKey, TValue>.TryAddAsync(ITransaction, TKey, TValue, TimeSpan, CancellationToken)
  fullName: Microsoft.ServiceFabric.Data.Collections.IReliableDictionary<TKey, TValue>.TryAddAsync(Microsoft.ServiceFabric.Data.ITransaction, TKey, TValue, System.TimeSpan, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Interfaces/IReliableDictionary.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: TryAddAsync
    path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Interfaces/IReliableDictionary.cs
    startLine: 500
  assemblies:
  - Microsoft.ServiceFabric.Data.Interfaces
  namespace: Microsoft.ServiceFabric.Data.Collections
  summary: "\nAttempts to add the specified key and value to the reliable dictionary.\n"
  example: []
  syntax:
    content: Task<bool> TryAddAsync(ITransaction tx, TKey key, TValue value, TimeSpan timeout, CancellationToken cancellationToken)
    content.vb: Function TryAddAsync(tx As ITransaction, key As TKey, value As TValue, timeout As TimeSpan, cancellationToken As CancellationToken) As Task(Of Boolean)
    parameters:
    - id: tx
      type: Microsoft.ServiceFabric.Data.ITransaction
      description: Transaction to associate this operation with.
    - id: key
      type: '{TKey}'
      description: The key of the element to add.
    - id: value
      type: '{TValue}'
      description: The value of the element to add. The value can be null for reference types.
    - id: timeout
      type: System.TimeSpan
      description: The amount of time to wait for the operation to complete before throwing a TimeoutException. Primarily used to prevent deadlocks. The default is 4 seconds.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The token to monitor for cancellation requests. The default is None.
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
      description: A task that represents the asynchronous add operation. The task result indicates whether the key/value pair was added.
  overload: Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.TryAddAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <em>tx</em> is null, or <em>key</em> is null or cannot be serialized.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <em>timeout</em> is negative.
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: The operation failed to complete within the given timeout.
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: The operation was canceled.
  - type: System.Fabric.FabricNotPrimaryException
    commentId: T:System.Fabric.FabricNotPrimaryException
    description: The exception that is thrown when the <cref name="IReliableDictionary{TKey, TValue}"></cref> is not in <cref name="ReplicaRole.Primary"></cref>.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\nThe exception that is thrown when a method call is invalid for the object's current state.\nExample, transaction used is already terminated: committed or aborted.\n"
  nameWithType.vb: IReliableDictionary(Of TKey, TValue).TryAddAsync(ITransaction, TKey, TValue, TimeSpan, CancellationToken)
  fullName.vb: Microsoft.ServiceFabric.Data.Collections.IReliableDictionary(Of TKey, TValue).TryAddAsync(Microsoft.ServiceFabric.Data.ITransaction, TKey, TValue, System.TimeSpan, System.Threading.CancellationToken)
- uid: Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.TryGetValueAsync(Microsoft.ServiceFabric.Data.ITransaction,`0)
  commentId: M:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.TryGetValueAsync(Microsoft.ServiceFabric.Data.ITransaction,`0)
  id: TryGetValueAsync(Microsoft.ServiceFabric.Data.ITransaction,`0)
  parent: Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2
  langs:
  - csharp
  - vb
  name: TryGetValueAsync(ITransaction, TKey)
  nameWithType: IReliableDictionary<TKey, TValue>.TryGetValueAsync(ITransaction, TKey)
  fullName: Microsoft.ServiceFabric.Data.Collections.IReliableDictionary<TKey, TValue>.TryGetValueAsync(Microsoft.ServiceFabric.Data.ITransaction, TKey)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Interfaces/IReliableDictionary.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: TryGetValueAsync
    path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Interfaces/IReliableDictionary.cs
    startLine: 528
  assemblies:
  - Microsoft.ServiceFabric.Data.Interfaces
  namespace: Microsoft.ServiceFabric.Data.Collections
  summary: "\nAttempts to get the value associated with the specified key from the reliable dictionary.\n"
  example: []
  syntax:
    content: Task<ConditionalValue<TValue>> TryGetValueAsync(ITransaction tx, TKey key)
    content.vb: Function TryGetValueAsync(tx As ITransaction, key As TKey) As Task(Of ConditionalValue(Of TValue))
    parameters:
    - id: tx
      type: Microsoft.ServiceFabric.Data.ITransaction
      description: Transaction to associate this operation with.
    - id: key
      type: '{TKey}'
      description: The key of the value to get.
    return:
      type: System.Threading.Tasks.Task{Microsoft.ServiceFabric.Data.ConditionalValue{{TValue}}}
      description: "\nA task that represents the asynchronous read operation. The task result is a tuple indicating\nwhether the key was found in the dictionary and if so, the value.\n"
  overload: Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.TryGetValueAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <em>tx</em> is null, or <em>key</em> is null or cannot be serialized.
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: The operation failed to complete within the default timeout.
  - type: System.Fabric.FabricNotReadableException
    commentId: T:System.Fabric.FabricNotReadableException
    description: "\nException indicates that the Reliable Dictionary cannot serve reads at the moment.\n<cref name=\"FabricNotReadableException\"></cref> can be thrown in all <cref name=\"ReplicaRole\"></cref>s.\nOne example for it being thrown in the <cref name=\"ReplicaRole.Primary\"></cref> is loss of <cref name=\"IStatefulServicePartition.ReadStatus\"></cref>.\nOne example for it being thrown in the <cref name=\"ReplicaRole.ActiveSecondary\"></cref> is that Reliable Dictionary's state is not yet consistent.\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\nThe exception that is thrown when a method call is invalid for the object's current state.\nExample, transaction used is already terminated: committed or aborted.\n"
  nameWithType.vb: IReliableDictionary(Of TKey, TValue).TryGetValueAsync(ITransaction, TKey)
  fullName.vb: Microsoft.ServiceFabric.Data.Collections.IReliableDictionary(Of TKey, TValue).TryGetValueAsync(Microsoft.ServiceFabric.Data.ITransaction, TKey)
- uid: Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.TryGetValueAsync(Microsoft.ServiceFabric.Data.ITransaction,`0,Microsoft.ServiceFabric.Data.Collections.LockMode)
  commentId: M:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.TryGetValueAsync(Microsoft.ServiceFabric.Data.ITransaction,`0,Microsoft.ServiceFabric.Data.Collections.LockMode)
  id: TryGetValueAsync(Microsoft.ServiceFabric.Data.ITransaction,`0,Microsoft.ServiceFabric.Data.Collections.LockMode)
  parent: Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2
  langs:
  - csharp
  - vb
  name: TryGetValueAsync(ITransaction, TKey, LockMode)
  nameWithType: IReliableDictionary<TKey, TValue>.TryGetValueAsync(ITransaction, TKey, LockMode)
  fullName: Microsoft.ServiceFabric.Data.Collections.IReliableDictionary<TKey, TValue>.TryGetValueAsync(Microsoft.ServiceFabric.Data.ITransaction, TKey, Microsoft.ServiceFabric.Data.Collections.LockMode)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Interfaces/IReliableDictionary.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: TryGetValueAsync
    path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Interfaces/IReliableDictionary.cs
    startLine: 552
  assemblies:
  - Microsoft.ServiceFabric.Data.Interfaces
  namespace: Microsoft.ServiceFabric.Data.Collections
  summary: "\nAttempts to get the value associated with the specified key from the reliable dictionary.\n"
  example: []
  syntax:
    content: Task<ConditionalValue<TValue>> TryGetValueAsync(ITransaction tx, TKey key, LockMode lockMode)
    content.vb: Function TryGetValueAsync(tx As ITransaction, key As TKey, lockMode As LockMode) As Task(Of ConditionalValue(Of TValue))
    parameters:
    - id: tx
      type: Microsoft.ServiceFabric.Data.ITransaction
      description: Transaction to associate this operation with.
    - id: key
      type: '{TKey}'
      description: The key of the value to get.
    - id: lockMode
      type: Microsoft.ServiceFabric.Data.Collections.LockMode
      description: Type of locking to use for this read operation.
    return:
      type: System.Threading.Tasks.Task{Microsoft.ServiceFabric.Data.ConditionalValue{{TValue}}}
      description: "\nA task that represents the asynchronous read operation. The task result is a tuple indicating\nwhether the key was found in the dictionary and if so, the value.\n"
  overload: Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.TryGetValueAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <em>tx</em> is null, or <em>key</em> is null or cannot be serialized.
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: The operation failed to complete within the default timeout.
  - type: System.Fabric.FabricNotReadableException
    commentId: T:System.Fabric.FabricNotReadableException
    description: "\nException indicates that the Reliable Dictionary cannot serve reads at the moment.\n<cref name=\"FabricNotReadableException\"></cref> can be thrown in all <cref name=\"ReplicaRole\"></cref>s.\nOne example for it being thrown in the <cref name=\"ReplicaRole.Primary\"></cref> is loss of <cref name=\"IStatefulServicePartition.ReadStatus\"></cref>.\nOne example for it being thrown in the <cref name=\"ReplicaRole.ActiveSecondary\"></cref> is that Reliable Dictionary's state is not yet consistent.\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\nThe exception that is thrown when a method call is invalid for the object's current state.\nExample, transaction used is already terminated: committed or aborted.\n"
  nameWithType.vb: IReliableDictionary(Of TKey, TValue).TryGetValueAsync(ITransaction, TKey, LockMode)
  fullName.vb: Microsoft.ServiceFabric.Data.Collections.IReliableDictionary(Of TKey, TValue).TryGetValueAsync(Microsoft.ServiceFabric.Data.ITransaction, TKey, Microsoft.ServiceFabric.Data.Collections.LockMode)
- uid: Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.TryGetValueAsync(Microsoft.ServiceFabric.Data.ITransaction,`0,System.TimeSpan,System.Threading.CancellationToken)
  commentId: M:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.TryGetValueAsync(Microsoft.ServiceFabric.Data.ITransaction,`0,System.TimeSpan,System.Threading.CancellationToken)
  id: TryGetValueAsync(Microsoft.ServiceFabric.Data.ITransaction,`0,System.TimeSpan,System.Threading.CancellationToken)
  parent: Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2
  langs:
  - csharp
  - vb
  name: TryGetValueAsync(ITransaction, TKey, TimeSpan, CancellationToken)
  nameWithType: IReliableDictionary<TKey, TValue>.TryGetValueAsync(ITransaction, TKey, TimeSpan, CancellationToken)
  fullName: Microsoft.ServiceFabric.Data.Collections.IReliableDictionary<TKey, TValue>.TryGetValueAsync(Microsoft.ServiceFabric.Data.ITransaction, TKey, System.TimeSpan, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Interfaces/IReliableDictionary.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: TryGetValueAsync
    path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Interfaces/IReliableDictionary.cs
    startLine: 579
  assemblies:
  - Microsoft.ServiceFabric.Data.Interfaces
  namespace: Microsoft.ServiceFabric.Data.Collections
  summary: "\nAttempts to get the value associated with the specified key from the reliable dictionary.\n"
  example: []
  syntax:
    content: Task<ConditionalValue<TValue>> TryGetValueAsync(ITransaction tx, TKey key, TimeSpan timeout, CancellationToken cancellationToken)
    content.vb: Function TryGetValueAsync(tx As ITransaction, key As TKey, timeout As TimeSpan, cancellationToken As CancellationToken) As Task(Of ConditionalValue(Of TValue))
    parameters:
    - id: tx
      type: Microsoft.ServiceFabric.Data.ITransaction
      description: Transaction to associate this operation with.
    - id: key
      type: '{TKey}'
      description: The key of the value to get.
    - id: timeout
      type: System.TimeSpan
      description: The amount of time to wait for the operation to complete before throwing a TimeoutException. Primarily used to prevent deadlocks. The default is 4 seconds.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The token to monitor for cancellation requests. The default is None.
    return:
      type: System.Threading.Tasks.Task{Microsoft.ServiceFabric.Data.ConditionalValue{{TValue}}}
      description: "\nA task that represents the asynchronous read operation. The task result is a tuple indicating\nwhether the key was found in the dictionary and if so, the value.\n"
  overload: Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.TryGetValueAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <em>tx</em> is null, or <em>key</em> is null or cannot be serialized.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <em>timeout</em> is negative.
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: The operation failed to complete within the given timeout.
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: The operation was canceled.
  - type: System.Fabric.FabricNotReadableException
    commentId: T:System.Fabric.FabricNotReadableException
    description: "\nException indicates that the Reliable Dictionary cannot serve reads at the moment.\n<cref name=\"FabricNotReadableException\"></cref> can be thrown in all <cref name=\"ReplicaRole\"></cref>s.\nOne example for it being thrown in the <cref name=\"ReplicaRole.Primary\"></cref> is loss of <cref name=\"IStatefulServicePartition.ReadStatus\"></cref>.\nOne example for it being thrown in the <cref name=\"ReplicaRole.ActiveSecondary\"></cref> is that Reliable Dictionary's state is not yet consistent.\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\nThe exception that is thrown when a method call is invalid for the object's current state.\nExample, transaction used is already terminated: committed or aborted.\n"
  nameWithType.vb: IReliableDictionary(Of TKey, TValue).TryGetValueAsync(ITransaction, TKey, TimeSpan, CancellationToken)
  fullName.vb: Microsoft.ServiceFabric.Data.Collections.IReliableDictionary(Of TKey, TValue).TryGetValueAsync(Microsoft.ServiceFabric.Data.ITransaction, TKey, System.TimeSpan, System.Threading.CancellationToken)
- uid: Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.TryGetValueAsync(Microsoft.ServiceFabric.Data.ITransaction,`0,Microsoft.ServiceFabric.Data.Collections.LockMode,System.TimeSpan,System.Threading.CancellationToken)
  commentId: M:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.TryGetValueAsync(Microsoft.ServiceFabric.Data.ITransaction,`0,Microsoft.ServiceFabric.Data.Collections.LockMode,System.TimeSpan,System.Threading.CancellationToken)
  id: TryGetValueAsync(Microsoft.ServiceFabric.Data.ITransaction,`0,Microsoft.ServiceFabric.Data.Collections.LockMode,System.TimeSpan,System.Threading.CancellationToken)
  parent: Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2
  langs:
  - csharp
  - vb
  name: TryGetValueAsync(ITransaction, TKey, LockMode, TimeSpan, CancellationToken)
  nameWithType: IReliableDictionary<TKey, TValue>.TryGetValueAsync(ITransaction, TKey, LockMode, TimeSpan, CancellationToken)
  fullName: Microsoft.ServiceFabric.Data.Collections.IReliableDictionary<TKey, TValue>.TryGetValueAsync(Microsoft.ServiceFabric.Data.ITransaction, TKey, Microsoft.ServiceFabric.Data.Collections.LockMode, System.TimeSpan, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Interfaces/IReliableDictionary.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: TryGetValueAsync
    path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Interfaces/IReliableDictionary.cs
    startLine: 611
  assemblies:
  - Microsoft.ServiceFabric.Data.Interfaces
  namespace: Microsoft.ServiceFabric.Data.Collections
  summary: "\nAttempts to get the value associated with the specified key from the reliable dictionary.\n"
  example: []
  syntax:
    content: Task<ConditionalValue<TValue>> TryGetValueAsync(ITransaction tx, TKey key, LockMode lockMode, TimeSpan timeout, CancellationToken cancellationToken)
    content.vb: Function TryGetValueAsync(tx As ITransaction, key As TKey, lockMode As LockMode, timeout As TimeSpan, cancellationToken As CancellationToken) As Task(Of ConditionalValue(Of TValue))
    parameters:
    - id: tx
      type: Microsoft.ServiceFabric.Data.ITransaction
      description: Transaction to associate this operation with.
    - id: key
      type: '{TKey}'
      description: The key of the value to get.
    - id: lockMode
      type: Microsoft.ServiceFabric.Data.Collections.LockMode
      description: Type of locking to use for this read operation.
    - id: timeout
      type: System.TimeSpan
      description: The amount of time to wait for the operation to complete before throwing a TimeoutException. Primarily used to prevent deadlocks. The default is 4 seconds.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The token to monitor for cancellation requests. The default is None.
    return:
      type: System.Threading.Tasks.Task{Microsoft.ServiceFabric.Data.ConditionalValue{{TValue}}}
      description: "\nA task that represents the asynchronous read operation. The task result is a tuple indicating\nwhether the key was found in the dictionary and if so, the value.\n"
  overload: Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.TryGetValueAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <em>tx</em> is null, or <em>key</em> is null or cannot be serialized.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <em>timeout</em> is negative.
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: The operation failed to complete within the given timeout.
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: The operation was canceled.
  - type: System.Fabric.FabricNotReadableException
    commentId: T:System.Fabric.FabricNotReadableException
    description: "\nException indicates that the Reliable Dictionary cannot serve reads at the moment.\n<cref name=\"FabricNotReadableException\"></cref> can be thrown in all <cref name=\"ReplicaRole\"></cref>s.\nOne example for it being thrown in the <cref name=\"ReplicaRole.Primary\"></cref> is loss of <cref name=\"IStatefulServicePartition.ReadStatus\"></cref>.\nOne example for it being thrown in the <cref name=\"ReplicaRole.ActiveSecondary\"></cref> is that Reliable Dictionary's state is not yet consistent.\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\nThe exception that is thrown when a method call is invalid for the object's current state.\nExample, transaction used is already terminated: committed or aborted.\n"
  nameWithType.vb: IReliableDictionary(Of TKey, TValue).TryGetValueAsync(ITransaction, TKey, LockMode, TimeSpan, CancellationToken)
  fullName.vb: Microsoft.ServiceFabric.Data.Collections.IReliableDictionary(Of TKey, TValue).TryGetValueAsync(Microsoft.ServiceFabric.Data.ITransaction, TKey, Microsoft.ServiceFabric.Data.Collections.LockMode, System.TimeSpan, System.Threading.CancellationToken)
- uid: Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.TryRemoveAsync(Microsoft.ServiceFabric.Data.ITransaction,`0)
  commentId: M:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.TryRemoveAsync(Microsoft.ServiceFabric.Data.ITransaction,`0)
  id: TryRemoveAsync(Microsoft.ServiceFabric.Data.ITransaction,`0)
  parent: Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2
  langs:
  - csharp
  - vb
  name: TryRemoveAsync(ITransaction, TKey)
  nameWithType: IReliableDictionary<TKey, TValue>.TryRemoveAsync(ITransaction, TKey)
  fullName: Microsoft.ServiceFabric.Data.Collections.IReliableDictionary<TKey, TValue>.TryRemoveAsync(Microsoft.ServiceFabric.Data.ITransaction, TKey)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Interfaces/IReliableDictionary.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: TryRemoveAsync
    path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Interfaces/IReliableDictionary.cs
    startLine: 634
  assemblies:
  - Microsoft.ServiceFabric.Data.Interfaces
  namespace: Microsoft.ServiceFabric.Data.Collections
  summary: "\nAttempts to remove the value with the specified key from the reliable dictionary.\n"
  example: []
  syntax:
    content: Task<ConditionalValue<TValue>> TryRemoveAsync(ITransaction tx, TKey key)
    content.vb: Function TryRemoveAsync(tx As ITransaction, key As TKey) As Task(Of ConditionalValue(Of TValue))
    parameters:
    - id: tx
      type: Microsoft.ServiceFabric.Data.ITransaction
      description: Transaction to associate this operation with.
    - id: key
      type: '{TKey}'
      description: The key of the element to remove.
    return:
      type: System.Threading.Tasks.Task{Microsoft.ServiceFabric.Data.ConditionalValue{{TValue}}}
      description: "\nTask that represents the asynchronous remove operation. The task result is a tuple indicating\nwhether the key was removed from the dictionary and if so, the value.\n"
  overload: Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.TryRemoveAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <em>tx</em> is null, or <em>key</em> is null or cannot be serialized.
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: The operation failed to complete within the default timeout.
  - type: System.Fabric.FabricNotPrimaryException
    commentId: T:System.Fabric.FabricNotPrimaryException
    description: The exception that is thrown when the <cref name="IReliableDictionary{TKey, TValue}"></cref> is not in <cref name="ReplicaRole.Primary"></cref>.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\nThe exception that is thrown when a method call is invalid for the object's current state.\nExample, transaction used is already terminated: committed or aborted.\n"
  nameWithType.vb: IReliableDictionary(Of TKey, TValue).TryRemoveAsync(ITransaction, TKey)
  fullName.vb: Microsoft.ServiceFabric.Data.Collections.IReliableDictionary(Of TKey, TValue).TryRemoveAsync(Microsoft.ServiceFabric.Data.ITransaction, TKey)
- uid: Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.TryRemoveAsync(Microsoft.ServiceFabric.Data.ITransaction,`0,System.TimeSpan,System.Threading.CancellationToken)
  commentId: M:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.TryRemoveAsync(Microsoft.ServiceFabric.Data.ITransaction,`0,System.TimeSpan,System.Threading.CancellationToken)
  id: TryRemoveAsync(Microsoft.ServiceFabric.Data.ITransaction,`0,System.TimeSpan,System.Threading.CancellationToken)
  parent: Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2
  langs:
  - csharp
  - vb
  name: TryRemoveAsync(ITransaction, TKey, TimeSpan, CancellationToken)
  nameWithType: IReliableDictionary<TKey, TValue>.TryRemoveAsync(ITransaction, TKey, TimeSpan, CancellationToken)
  fullName: Microsoft.ServiceFabric.Data.Collections.IReliableDictionary<TKey, TValue>.TryRemoveAsync(Microsoft.ServiceFabric.Data.ITransaction, TKey, System.TimeSpan, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Interfaces/IReliableDictionary.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: TryRemoveAsync
    path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Interfaces/IReliableDictionary.cs
    startLine: 656
  assemblies:
  - Microsoft.ServiceFabric.Data.Interfaces
  namespace: Microsoft.ServiceFabric.Data.Collections
  summary: "\nAttempts to remove the value with the specified key from the reliable dictionary.\n"
  example: []
  syntax:
    content: Task<ConditionalValue<TValue>> TryRemoveAsync(ITransaction tx, TKey key, TimeSpan timeout, CancellationToken cancellationToken)
    content.vb: Function TryRemoveAsync(tx As ITransaction, key As TKey, timeout As TimeSpan, cancellationToken As CancellationToken) As Task(Of ConditionalValue(Of TValue))
    parameters:
    - id: tx
      type: Microsoft.ServiceFabric.Data.ITransaction
      description: Transaction to associate this operation with.
    - id: key
      type: '{TKey}'
      description: The key of the element to remove.
    - id: timeout
      type: System.TimeSpan
      description: The amount of time to wait for the operation to complete before throwing a TimeoutException. Primarily used to prevent deadlocks. The default is 4 seconds.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The token to monitor for cancellation requests. The default is None.
    return:
      type: System.Threading.Tasks.Task{Microsoft.ServiceFabric.Data.ConditionalValue{{TValue}}}
      description: "\nTask that represents the asynchronous remove operation. The task result is a tuple indicating\nwhether the key was removed from the dictionary and if so, the value.\n"
  overload: Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.TryRemoveAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <em>tx</em> is null, or <em>key</em> is null or cannot be serialized.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <em>timeout</em> is negative.
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: The operation failed to complete within the given timeout.
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: The operation was canceled.
  - type: System.Fabric.FabricNotPrimaryException
    commentId: T:System.Fabric.FabricNotPrimaryException
    description: The exception that is thrown when the <cref name="IReliableDictionary{TKey, TValue}"></cref> is not in <cref name="ReplicaRole.Primary"></cref>.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\nThe exception that is thrown when a method call is invalid for the object's current state.\nExample, transaction used is already terminated: committed or aborted.\n"
  nameWithType.vb: IReliableDictionary(Of TKey, TValue).TryRemoveAsync(ITransaction, TKey, TimeSpan, CancellationToken)
  fullName.vb: Microsoft.ServiceFabric.Data.Collections.IReliableDictionary(Of TKey, TValue).TryRemoveAsync(Microsoft.ServiceFabric.Data.ITransaction, TKey, System.TimeSpan, System.Threading.CancellationToken)
- uid: Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.TryUpdateAsync(Microsoft.ServiceFabric.Data.ITransaction,`0,`1,`1)
  commentId: M:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.TryUpdateAsync(Microsoft.ServiceFabric.Data.ITransaction,`0,`1,`1)
  id: TryUpdateAsync(Microsoft.ServiceFabric.Data.ITransaction,`0,`1,`1)
  parent: Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2
  langs:
  - csharp
  - vb
  name: TryUpdateAsync(ITransaction, TKey, TValue, TValue)
  nameWithType: IReliableDictionary<TKey, TValue>.TryUpdateAsync(ITransaction, TKey, TValue, TValue)
  fullName: Microsoft.ServiceFabric.Data.Collections.IReliableDictionary<TKey, TValue>.TryUpdateAsync(Microsoft.ServiceFabric.Data.ITransaction, TKey, TValue, TValue)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Interfaces/IReliableDictionary.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: TryUpdateAsync
    path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Interfaces/IReliableDictionary.cs
    startLine: 673
  assemblies:
  - Microsoft.ServiceFabric.Data.Interfaces
  namespace: Microsoft.ServiceFabric.Data.Collections
  summary: "\nCompares the existing value for the specified key with a specified value, and if they are equal, updates the key with a third value.\n"
  example: []
  syntax:
    content: Task<bool> TryUpdateAsync(ITransaction tx, TKey key, TValue newValue, TValue comparisonValue)
    content.vb: Function TryUpdateAsync(tx As ITransaction, key As TKey, newValue As TValue, comparisonValue As TValue) As Task(Of Boolean)
    parameters:
    - id: tx
      type: Microsoft.ServiceFabric.Data.ITransaction
      description: Transaction to associate this operation with.
    - id: key
      type: '{TKey}'
      description: The key whose value is compared with <em>comparisonValue</em> and possibly replaced.
    - id: newValue
      type: '{TValue}'
      description: The value that replaces the value of the element that has the specified <em>key</em> if the comparison results in equality.
    - id: comparisonValue
      type: '{TValue}'
      description: The value that is compared to the value of the element that has the specified <em>key</em>.
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
      description: A task that represents the asynchronous update operation. The task result indicates whether the object was updated.
  overload: Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.TryUpdateAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <em>tx</em> is null, or <em>key</em> is null or cannot be serialized.
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: The operation failed to complete within the default timeout.
  - type: System.Fabric.FabricNotPrimaryException
    commentId: T:System.Fabric.FabricNotPrimaryException
    description: The exception that is thrown when the <cref name="IReliableDictionary{TKey, TValue}"></cref> is not in <cref name="ReplicaRole.Primary"></cref>.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\nThe exception that is thrown when a method call is invalid for the object's current state.\nExample, transaction used is already terminated: committed or aborted.\n"
  nameWithType.vb: IReliableDictionary(Of TKey, TValue).TryUpdateAsync(ITransaction, TKey, TValue, TValue)
  fullName.vb: Microsoft.ServiceFabric.Data.Collections.IReliableDictionary(Of TKey, TValue).TryUpdateAsync(Microsoft.ServiceFabric.Data.ITransaction, TKey, TValue, TValue)
- uid: Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.TryUpdateAsync(Microsoft.ServiceFabric.Data.ITransaction,`0,`1,`1,System.TimeSpan,System.Threading.CancellationToken)
  commentId: M:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.TryUpdateAsync(Microsoft.ServiceFabric.Data.ITransaction,`0,`1,`1,System.TimeSpan,System.Threading.CancellationToken)
  id: TryUpdateAsync(Microsoft.ServiceFabric.Data.ITransaction,`0,`1,`1,System.TimeSpan,System.Threading.CancellationToken)
  parent: Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2
  langs:
  - csharp
  - vb
  name: TryUpdateAsync(ITransaction, TKey, TValue, TValue, TimeSpan, CancellationToken)
  nameWithType: IReliableDictionary<TKey, TValue>.TryUpdateAsync(ITransaction, TKey, TValue, TValue, TimeSpan, CancellationToken)
  fullName: Microsoft.ServiceFabric.Data.Collections.IReliableDictionary<TKey, TValue>.TryUpdateAsync(Microsoft.ServiceFabric.Data.ITransaction, TKey, TValue, TValue, System.TimeSpan, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Interfaces/IReliableDictionary.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: TryUpdateAsync
    path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Interfaces/IReliableDictionary.cs
    startLine: 694
  assemblies:
  - Microsoft.ServiceFabric.Data.Interfaces
  namespace: Microsoft.ServiceFabric.Data.Collections
  summary: "\nCompares the existing value for the specified key with a specified value, and if they are equal, updates the key with a third value.\n"
  example: []
  syntax:
    content: Task<bool> TryUpdateAsync(ITransaction tx, TKey key, TValue newValue, TValue comparisonValue, TimeSpan timeout, CancellationToken cancellationToken)
    content.vb: Function TryUpdateAsync(tx As ITransaction, key As TKey, newValue As TValue, comparisonValue As TValue, timeout As TimeSpan, cancellationToken As CancellationToken) As Task(Of Boolean)
    parameters:
    - id: tx
      type: Microsoft.ServiceFabric.Data.ITransaction
      description: Transaction to associate this operation with.
    - id: key
      type: '{TKey}'
      description: The key whose value is compared with <em>comparisonValue</em> and possibly replaced.
    - id: newValue
      type: '{TValue}'
      description: The value that replaces the value of the element that has the specified <em>key</em> if the comparison results in equality.
    - id: comparisonValue
      type: '{TValue}'
      description: The value that is compared to the value of the element that has the specified <em>key</em>.
    - id: timeout
      type: System.TimeSpan
      description: The amount of time to wait for the operation to complete before throwing a TimeoutException. Primarily used to prevent deadlocks. The default is 4 seconds.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The token to monitor for cancellation requests. The default is None.
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
      description: A task that represents the asynchronous update operation. The task result indicates whether the object was updated.
  overload: Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.TryUpdateAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <em>tx</em> is null, or <em>key</em> is null or cannot be serialized.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <em>timeout</em> is negative.
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: The operation failed to complete within the given timeout.
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: The operation was canceled.
  - type: System.Fabric.FabricNotPrimaryException
    commentId: T:System.Fabric.FabricNotPrimaryException
    description: The exception that is thrown when the <cref name="IReliableDictionary{TKey, TValue}"></cref> is not in <cref name="ReplicaRole.Primary"></cref>.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\nThe exception that is thrown when a method call is invalid for the object's current state.\nExample, transaction used is already terminated: committed or aborted.\n"
  nameWithType.vb: IReliableDictionary(Of TKey, TValue).TryUpdateAsync(ITransaction, TKey, TValue, TValue, TimeSpan, CancellationToken)
  fullName.vb: Microsoft.ServiceFabric.Data.Collections.IReliableDictionary(Of TKey, TValue).TryUpdateAsync(Microsoft.ServiceFabric.Data.ITransaction, TKey, TValue, TValue, System.TimeSpan, System.Threading.CancellationToken)
- uid: Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.SetAsync(Microsoft.ServiceFabric.Data.ITransaction,`0,`1)
  commentId: M:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.SetAsync(Microsoft.ServiceFabric.Data.ITransaction,`0,`1)
  id: SetAsync(Microsoft.ServiceFabric.Data.ITransaction,`0,`1)
  parent: Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2
  langs:
  - csharp
  - vb
  name: SetAsync(ITransaction, TKey, TValue)
  nameWithType: IReliableDictionary<TKey, TValue>.SetAsync(ITransaction, TKey, TValue)
  fullName: Microsoft.ServiceFabric.Data.Collections.IReliableDictionary<TKey, TValue>.SetAsync(Microsoft.ServiceFabric.Data.ITransaction, TKey, TValue)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Interfaces/IReliableDictionary.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: SetAsync
    path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Interfaces/IReliableDictionary.cs
    startLine: 717
  assemblies:
  - Microsoft.ServiceFabric.Data.Interfaces
  namespace: Microsoft.ServiceFabric.Data.Collections
  summary: "\nUpdate the specified key/value pair in the reliable dictionary.\n"
  example: []
  syntax:
    content: Task SetAsync(ITransaction tx, TKey key, TValue value)
    content.vb: Function SetAsync(tx As ITransaction, key As TKey, value As TValue) As Task
    parameters:
    - id: tx
      type: Microsoft.ServiceFabric.Data.ITransaction
      description: Transaction to associate this operation with.
    - id: key
      type: '{TKey}'
      description: The key whose value should be updated.
    - id: value
      type: '{TValue}'
      description: The value that replaces the value of the element that has the specified <em>key</em>.
    return:
      type: System.Threading.Tasks.Task
      description: A task that represents the asynchronous update operation.
  overload: Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.SetAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <em>tx</em> is null, or <em>key</em> is null or cannot be serialized.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <em>key</em> does not exist in the dictionary.
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: The operation failed to complete within the default timeout.
  - type: System.Fabric.FabricNotPrimaryException
    commentId: T:System.Fabric.FabricNotPrimaryException
    description: The exception that is thrown when the <cref name="IReliableDictionary{TKey, TValue}"></cref> is not in <cref name="ReplicaRole.Primary"></cref>.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\nThe exception that is thrown when a method call is invalid for the object's current state.\nExample, transaction used is already terminated: committed or aborted.\n"
  nameWithType.vb: IReliableDictionary(Of TKey, TValue).SetAsync(ITransaction, TKey, TValue)
  fullName.vb: Microsoft.ServiceFabric.Data.Collections.IReliableDictionary(Of TKey, TValue).SetAsync(Microsoft.ServiceFabric.Data.ITransaction, TKey, TValue)
- uid: Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.SetAsync(Microsoft.ServiceFabric.Data.ITransaction,`0,`1,System.TimeSpan,System.Threading.CancellationToken)
  commentId: M:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.SetAsync(Microsoft.ServiceFabric.Data.ITransaction,`0,`1,System.TimeSpan,System.Threading.CancellationToken)
  id: SetAsync(Microsoft.ServiceFabric.Data.ITransaction,`0,`1,System.TimeSpan,System.Threading.CancellationToken)
  parent: Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2
  langs:
  - csharp
  - vb
  name: SetAsync(ITransaction, TKey, TValue, TimeSpan, CancellationToken)
  nameWithType: IReliableDictionary<TKey, TValue>.SetAsync(ITransaction, TKey, TValue, TimeSpan, CancellationToken)
  fullName: Microsoft.ServiceFabric.Data.Collections.IReliableDictionary<TKey, TValue>.SetAsync(Microsoft.ServiceFabric.Data.ITransaction, TKey, TValue, System.TimeSpan, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Interfaces/IReliableDictionary.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: SetAsync
    path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Interfaces/IReliableDictionary.cs
    startLine: 737
  assemblies:
  - Microsoft.ServiceFabric.Data.Interfaces
  namespace: Microsoft.ServiceFabric.Data.Collections
  summary: "\nUpdate the specified key/value pair in the reliable dictionary.\n"
  example: []
  syntax:
    content: Task SetAsync(ITransaction tx, TKey key, TValue value, TimeSpan timeout, CancellationToken cancellationToken)
    content.vb: Function SetAsync(tx As ITransaction, key As TKey, value As TValue, timeout As TimeSpan, cancellationToken As CancellationToken) As Task
    parameters:
    - id: tx
      type: Microsoft.ServiceFabric.Data.ITransaction
      description: Transaction to associate this operation with.
    - id: key
      type: '{TKey}'
      description: The key whose value should be updated.
    - id: value
      type: '{TValue}'
      description: The value that replaces the value of the element that has the specified <em>key</em>.
    - id: timeout
      type: System.TimeSpan
      description: The amount of time to wait for the operation to complete before throwing a TimeoutException. Primarily used to prevent deadlocks. The default is 4 seconds.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The token to monitor for cancellation requests. The default is None.
    return:
      type: System.Threading.Tasks.Task
      description: A task that represents the asynchronous update operation.
  overload: Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.SetAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <em>tx</em> is null, or <em>key</em> is null or cannot be serialized.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <em>key</em> does not exist in the dictionary, or <em>timeout</em> is negative.
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: The operation failed to complete within the given timeout.
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: The operation was canceled.
  - type: System.Fabric.FabricNotPrimaryException
    commentId: T:System.Fabric.FabricNotPrimaryException
    description: The exception that is thrown when the <cref name="IReliableDictionary{TKey, TValue}"></cref> is not in <cref name="ReplicaRole.Primary"></cref>.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\nThe exception that is thrown when a method call is invalid for the object's current state.\nExample, transaction used is already terminated: committed or aborted.\n"
  nameWithType.vb: IReliableDictionary(Of TKey, TValue).SetAsync(ITransaction, TKey, TValue, TimeSpan, CancellationToken)
  fullName.vb: Microsoft.ServiceFabric.Data.Collections.IReliableDictionary(Of TKey, TValue).SetAsync(Microsoft.ServiceFabric.Data.ITransaction, TKey, TValue, System.TimeSpan, System.Threading.CancellationToken)
references:
- uid: Microsoft.ServiceFabric.Data.ITransaction
  commentId: T:Microsoft.ServiceFabric.Data.ITransaction
  parent: Microsoft.ServiceFabric.Data
  isExternal: false
  name: ITransaction
  nameWithType: ITransaction
  fullName: Microsoft.ServiceFabric.Data.ITransaction
- uid: Microsoft.ServiceFabric.Data.Collections
  commentId: N:Microsoft.ServiceFabric.Data.Collections
  isExternal: false
  name: Microsoft.ServiceFabric.Data.Collections
  nameWithType: Microsoft.ServiceFabric.Data.Collections
  fullName: Microsoft.ServiceFabric.Data.Collections
- uid: Microsoft.ServiceFabric.Data.Collections.IReliableCollection{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}.GetCountAsync(Microsoft.ServiceFabric.Data.ITransaction)
  commentId: M:Microsoft.ServiceFabric.Data.Collections.IReliableCollection{System.Collections.Generic.KeyValuePair{`0,`1}}.GetCountAsync(Microsoft.ServiceFabric.Data.ITransaction)
  parent: Microsoft.ServiceFabric.Data.Collections.IReliableCollection{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}
  definition: Microsoft.ServiceFabric.Data.Collections.IReliableCollection`1.GetCountAsync(Microsoft.ServiceFabric.Data.ITransaction)
  name: GetCountAsync(ITransaction)
  nameWithType: IReliableCollection<KeyValuePair<TKey, TValue>>.GetCountAsync(ITransaction)
  fullName: Microsoft.ServiceFabric.Data.Collections.IReliableCollection<System.Collections.Generic.KeyValuePair<TKey, TValue>>.GetCountAsync(Microsoft.ServiceFabric.Data.ITransaction)
  nameWithType.vb: IReliableCollection(Of KeyValuePair(Of TKey, TValue)).GetCountAsync(ITransaction)
  fullname.vb: Microsoft.ServiceFabric.Data.Collections.IReliableCollection(Of System.Collections.Generic.KeyValuePair(Of TKey, TValue)).GetCountAsync(Microsoft.ServiceFabric.Data.ITransaction)
  spec.csharp:
  - uid: Microsoft.ServiceFabric.Data.Collections.IReliableCollection`1.GetCountAsync(Microsoft.ServiceFabric.Data.ITransaction)
    name: GetCountAsync
    nameWithType: IReliableCollection<KeyValuePair<TKey, TValue>>.GetCountAsync
    fullName: Microsoft.ServiceFabric.Data.Collections.IReliableCollection<System.Collections.Generic.KeyValuePair<TKey, TValue>>.GetCountAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.ServiceFabric.Data.ITransaction
    name: ITransaction
    nameWithType: ITransaction
    fullName: Microsoft.ServiceFabric.Data.ITransaction
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ServiceFabric.Data.Collections.IReliableCollection`1.GetCountAsync(Microsoft.ServiceFabric.Data.ITransaction)
    name: GetCountAsync
    nameWithType: IReliableCollection(Of KeyValuePair(Of TKey, TValue)).GetCountAsync
    fullName: Microsoft.ServiceFabric.Data.Collections.IReliableCollection(Of System.Collections.Generic.KeyValuePair(Of TKey, TValue)).GetCountAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.ServiceFabric.Data.ITransaction
    name: ITransaction
    nameWithType: ITransaction
    fullName: Microsoft.ServiceFabric.Data.ITransaction
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceFabric.Data.Collections.IReliableCollection{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}.ClearAsync
  commentId: M:Microsoft.ServiceFabric.Data.Collections.IReliableCollection{System.Collections.Generic.KeyValuePair{`0,`1}}.ClearAsync
  parent: Microsoft.ServiceFabric.Data.Collections.IReliableCollection{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}
  definition: Microsoft.ServiceFabric.Data.Collections.IReliableCollection`1.ClearAsync
  name: ClearAsync()
  nameWithType: IReliableCollection<KeyValuePair<TKey, TValue>>.ClearAsync()
  fullName: Microsoft.ServiceFabric.Data.Collections.IReliableCollection<System.Collections.Generic.KeyValuePair<TKey, TValue>>.ClearAsync()
  nameWithType.vb: IReliableCollection(Of KeyValuePair(Of TKey, TValue)).ClearAsync()
  fullname.vb: Microsoft.ServiceFabric.Data.Collections.IReliableCollection(Of System.Collections.Generic.KeyValuePair(Of TKey, TValue)).ClearAsync()
  spec.csharp:
  - uid: Microsoft.ServiceFabric.Data.Collections.IReliableCollection`1.ClearAsync
    name: ClearAsync
    nameWithType: IReliableCollection<KeyValuePair<TKey, TValue>>.ClearAsync
    fullName: Microsoft.ServiceFabric.Data.Collections.IReliableCollection<System.Collections.Generic.KeyValuePair<TKey, TValue>>.ClearAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ServiceFabric.Data.Collections.IReliableCollection`1.ClearAsync
    name: ClearAsync
    nameWithType: IReliableCollection(Of KeyValuePair(Of TKey, TValue)).ClearAsync
    fullName: Microsoft.ServiceFabric.Data.Collections.IReliableCollection(Of System.Collections.Generic.KeyValuePair(Of TKey, TValue)).ClearAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceFabric.Data.IReliableState.Name
  commentId: P:Microsoft.ServiceFabric.Data.IReliableState.Name
  parent: Microsoft.ServiceFabric.Data.IReliableState
  isExternal: false
  name: Name
  nameWithType: IReliableState.Name
  fullName: Microsoft.ServiceFabric.Data.IReliableState.Name
- uid: Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
  commentId: M:System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  parent: System.Fabric.Messaging.Stream.ByteArraySerializer
  definition: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  name: Serialize<IReliableDictionary<TKey, TValue>>()
  nameWithType: ByteArraySerializer.Serialize<IReliableDictionary<TKey, TValue>>()
  fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<Microsoft.ServiceFabric.Data.Collections.IReliableDictionary<TKey, TValue>>()
  nameWithType.vb: ByteArraySerializer.Serialize(Of IReliableDictionary(Of TKey, TValue))()
  fullname.vb: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of Microsoft.ServiceFabric.Data.Collections.IReliableDictionary(Of TKey, TValue))()
  name.vb: Serialize(Of IReliableDictionary(Of TKey, TValue))()
  spec.csharp:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
    name: Serialize<IReliableDictionary<TKey, TValue>>
    nameWithType: ByteArraySerializer.Serialize<IReliableDictionary<TKey, TValue>>
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<Microsoft.ServiceFabric.Data.Collections.IReliableDictionary<TKey, TValue>>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
    name: Serialize(Of IReliableDictionary(Of TKey, TValue))
    nameWithType: ByteArraySerializer.Serialize(Of IReliableDictionary(Of TKey, TValue))
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of Microsoft.ServiceFabric.Data.Collections.IReliableDictionary(Of TKey, TValue))
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceFabric.Data
  commentId: N:Microsoft.ServiceFabric.Data
  isExternal: false
  name: Microsoft.ServiceFabric.Data
  nameWithType: Microsoft.ServiceFabric.Data
  fullName: Microsoft.ServiceFabric.Data
- uid: Microsoft.ServiceFabric.Data.Collections.IReliableCollection`1.GetCountAsync(Microsoft.ServiceFabric.Data.ITransaction)
  commentId: M:Microsoft.ServiceFabric.Data.Collections.IReliableCollection`1.GetCountAsync(Microsoft.ServiceFabric.Data.ITransaction)
  isExternal: false
  name: GetCountAsync(ITransaction)
  nameWithType: IReliableCollection<T>.GetCountAsync(ITransaction)
  fullName: Microsoft.ServiceFabric.Data.Collections.IReliableCollection<T>.GetCountAsync(Microsoft.ServiceFabric.Data.ITransaction)
  nameWithType.vb: IReliableCollection(Of T).GetCountAsync(ITransaction)
  fullname.vb: Microsoft.ServiceFabric.Data.Collections.IReliableCollection(Of T).GetCountAsync(Microsoft.ServiceFabric.Data.ITransaction)
  spec.csharp:
  - uid: Microsoft.ServiceFabric.Data.Collections.IReliableCollection`1.GetCountAsync(Microsoft.ServiceFabric.Data.ITransaction)
    name: GetCountAsync
    nameWithType: IReliableCollection<T>.GetCountAsync
    fullName: Microsoft.ServiceFabric.Data.Collections.IReliableCollection<T>.GetCountAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.ServiceFabric.Data.ITransaction
    name: ITransaction
    nameWithType: ITransaction
    fullName: Microsoft.ServiceFabric.Data.ITransaction
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ServiceFabric.Data.Collections.IReliableCollection`1.GetCountAsync(Microsoft.ServiceFabric.Data.ITransaction)
    name: GetCountAsync
    nameWithType: IReliableCollection(Of T).GetCountAsync
    fullName: Microsoft.ServiceFabric.Data.Collections.IReliableCollection(Of T).GetCountAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.ServiceFabric.Data.ITransaction
    name: ITransaction
    nameWithType: ITransaction
    fullName: Microsoft.ServiceFabric.Data.ITransaction
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceFabric.Data.Collections.IReliableCollection{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}
  commentId: T:Microsoft.ServiceFabric.Data.Collections.IReliableCollection{System.Collections.Generic.KeyValuePair{`0,`1}}
  parent: Microsoft.ServiceFabric.Data.Collections
  definition: Microsoft.ServiceFabric.Data.Collections.IReliableCollection`1
  name: IReliableCollection<KeyValuePair<TKey, TValue>>
  nameWithType: IReliableCollection<KeyValuePair<TKey, TValue>>
  fullName: Microsoft.ServiceFabric.Data.Collections.IReliableCollection<System.Collections.Generic.KeyValuePair<TKey, TValue>>
  nameWithType.vb: IReliableCollection(Of KeyValuePair(Of TKey, TValue))
  fullname.vb: Microsoft.ServiceFabric.Data.Collections.IReliableCollection(Of System.Collections.Generic.KeyValuePair(Of TKey, TValue))
  name.vb: IReliableCollection(Of KeyValuePair(Of TKey, TValue))
  spec.csharp:
  - uid: Microsoft.ServiceFabric.Data.Collections.IReliableCollection`1
    name: IReliableCollection
    nameWithType: IReliableCollection
    fullName: Microsoft.ServiceFabric.Data.Collections.IReliableCollection
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.ServiceFabric.Data.Collections.IReliableCollection`1
    name: IReliableCollection
    nameWithType: IReliableCollection
    fullName: Microsoft.ServiceFabric.Data.Collections.IReliableCollection
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceFabric.Data.Collections.IReliableCollection`1.ClearAsync
  commentId: M:Microsoft.ServiceFabric.Data.Collections.IReliableCollection`1.ClearAsync
  isExternal: false
  name: ClearAsync()
  nameWithType: IReliableCollection<T>.ClearAsync()
  fullName: Microsoft.ServiceFabric.Data.Collections.IReliableCollection<T>.ClearAsync()
  nameWithType.vb: IReliableCollection(Of T).ClearAsync()
  fullname.vb: Microsoft.ServiceFabric.Data.Collections.IReliableCollection(Of T).ClearAsync()
  spec.csharp:
  - uid: Microsoft.ServiceFabric.Data.Collections.IReliableCollection`1.ClearAsync
    name: ClearAsync
    nameWithType: IReliableCollection<T>.ClearAsync
    fullName: Microsoft.ServiceFabric.Data.Collections.IReliableCollection<T>.ClearAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ServiceFabric.Data.Collections.IReliableCollection`1.ClearAsync
    name: ClearAsync
    nameWithType: IReliableCollection(Of T).ClearAsync
    fullName: Microsoft.ServiceFabric.Data.Collections.IReliableCollection(Of T).ClearAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceFabric.Data.IReliableState
  commentId: T:Microsoft.ServiceFabric.Data.IReliableState
  parent: Microsoft.ServiceFabric.Data
  isExternal: false
  name: IReliableState
  nameWithType: IReliableState
  fullName: Microsoft.ServiceFabric.Data.IReliableState
- uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  commentId: M:System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  isExternal: false
  name: Serialize<T>(T)
  nameWithType: ByteArraySerializer.Serialize<T>(T)
  fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<T>(T)
  nameWithType.vb: ByteArraySerializer.Serialize(Of T)(T)
  fullname.vb: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of T)(T)
  name.vb: Serialize(Of T)(T)
  spec.csharp:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
    name: Serialize<T>
    nameWithType: ByteArraySerializer.Serialize<T>
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
    name: Serialize(Of T)
    nameWithType: ByteArraySerializer.Serialize(Of T)
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.Messaging.Stream.ByteArraySerializer
  commentId: T:System.Fabric.Messaging.Stream.ByteArraySerializer
  parent: System.Fabric.Messaging.Stream
  isExternal: false
  name: ByteArraySerializer
  nameWithType: ByteArraySerializer
  fullName: System.Fabric.Messaging.Stream.ByteArraySerializer
- uid: Microsoft.ServiceFabric.Data.Collections.IReliableCollection`1
  commentId: T:Microsoft.ServiceFabric.Data.Collections.IReliableCollection`1
  isExternal: false
  name: IReliableCollection<T>
  nameWithType: IReliableCollection<T>
  fullName: Microsoft.ServiceFabric.Data.Collections.IReliableCollection<T>
  nameWithType.vb: IReliableCollection(Of T)
  fullname.vb: Microsoft.ServiceFabric.Data.Collections.IReliableCollection(Of T)
  name.vb: IReliableCollection(Of T)
  spec.csharp:
  - uid: Microsoft.ServiceFabric.Data.Collections.IReliableCollection`1
    name: IReliableCollection
    nameWithType: IReliableCollection
    fullName: Microsoft.ServiceFabric.Data.Collections.IReliableCollection
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.ServiceFabric.Data.Collections.IReliableCollection`1
    name: IReliableCollection
    nameWithType: IReliableCollection
    fullName: Microsoft.ServiceFabric.Data.Collections.IReliableCollection
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.Messaging.Stream
  commentId: N:System.Fabric.Messaging.Stream
  isExternal: false
  name: System.Fabric.Messaging.Stream
  nameWithType: System.Fabric.Messaging.Stream
  fullName: System.Fabric.Messaging.Stream
- uid: Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.RebuildNotificationAsyncCallback*
  commentId: Overload:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.RebuildNotificationAsyncCallback
  isExternal: false
  name: RebuildNotificationAsyncCallback
  nameWithType: IReliableDictionary<TKey, TValue>.RebuildNotificationAsyncCallback
  fullName: Microsoft.ServiceFabric.Data.Collections.IReliableDictionary<TKey, TValue>.RebuildNotificationAsyncCallback
  nameWithType.vb: IReliableDictionary(Of TKey, TValue).RebuildNotificationAsyncCallback
  fullname.vb: Microsoft.ServiceFabric.Data.Collections.IReliableDictionary(Of TKey, TValue).RebuildNotificationAsyncCallback
- uid: System.Func{Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2,Microsoft.ServiceFabric.Data.Notifications.NotifyDictionaryRebuildEventArgs{{TKey},{TValue}},System.Threading.Tasks.Task}
  commentId: T:System.Func{Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2,Microsoft.ServiceFabric.Data.Notifications.NotifyDictionaryRebuildEventArgs{`0,`1},System.Threading.Tasks.Task}
  parent: System
  definition: System.Func`3
  name: Func<IReliableDictionary<TKey, TValue>, NotifyDictionaryRebuildEventArgs<TKey, TValue>, Task>
  nameWithType: Func<IReliableDictionary<TKey, TValue>, NotifyDictionaryRebuildEventArgs<TKey, TValue>, Task>
  fullName: System.Func<Microsoft.ServiceFabric.Data.Collections.IReliableDictionary<TKey, TValue>, Microsoft.ServiceFabric.Data.Notifications.NotifyDictionaryRebuildEventArgs<TKey, TValue>, System.Threading.Tasks.Task>
  nameWithType.vb: Func(Of IReliableDictionary(Of TKey, TValue), NotifyDictionaryRebuildEventArgs(Of TKey, TValue), Task)
  fullname.vb: System.Func(Of Microsoft.ServiceFabric.Data.Collections.IReliableDictionary(Of TKey, TValue), Microsoft.ServiceFabric.Data.Notifications.NotifyDictionaryRebuildEventArgs(Of TKey, TValue), System.Threading.Tasks.Task)
  name.vb: Func(Of IReliableDictionary(Of TKey, TValue), NotifyDictionaryRebuildEventArgs(Of TKey, TValue), Task)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2
    name: IReliableDictionary
    nameWithType: IReliableDictionary
    fullName: Microsoft.ServiceFabric.Data.Collections.IReliableDictionary
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.ServiceFabric.Data.Notifications.NotifyDictionaryRebuildEventArgs`2
    name: NotifyDictionaryRebuildEventArgs
    nameWithType: NotifyDictionaryRebuildEventArgs
    fullName: Microsoft.ServiceFabric.Data.Notifications.NotifyDictionaryRebuildEventArgs
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2
    name: IReliableDictionary
    nameWithType: IReliableDictionary
    fullName: Microsoft.ServiceFabric.Data.Collections.IReliableDictionary
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.ServiceFabric.Data.Notifications.NotifyDictionaryRebuildEventArgs`2
    name: NotifyDictionaryRebuildEventArgs
    nameWithType: NotifyDictionaryRebuildEventArgs
    fullName: Microsoft.ServiceFabric.Data.Notifications.NotifyDictionaryRebuildEventArgs
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`3
  commentId: T:System.Func`3
  isExternal: true
  name: Func<T1, T2, TResult>
  nameWithType: Func<T1, T2, TResult>
  fullName: System.Func<T1, T2, TResult>
  nameWithType.vb: Func(Of T1, T2, TResult)
  fullname.vb: System.Func(Of T1, T2, TResult)
  name.vb: Func(Of T1, T2, TResult)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.EventHandler{Microsoft.ServiceFabric.Data.Notifications.NotifyDictionaryChangedEventArgs{{TKey},{TValue}}}
  commentId: T:System.EventHandler{Microsoft.ServiceFabric.Data.Notifications.NotifyDictionaryChangedEventArgs{`0,`1}}
  parent: System
  definition: System.EventHandler`1
  name: EventHandler<NotifyDictionaryChangedEventArgs<TKey, TValue>>
  nameWithType: EventHandler<NotifyDictionaryChangedEventArgs<TKey, TValue>>
  fullName: System.EventHandler<Microsoft.ServiceFabric.Data.Notifications.NotifyDictionaryChangedEventArgs<TKey, TValue>>
  nameWithType.vb: EventHandler(Of NotifyDictionaryChangedEventArgs(Of TKey, TValue))
  fullname.vb: System.EventHandler(Of Microsoft.ServiceFabric.Data.Notifications.NotifyDictionaryChangedEventArgs(Of TKey, TValue))
  name.vb: EventHandler(Of NotifyDictionaryChangedEventArgs(Of TKey, TValue))
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.ServiceFabric.Data.Notifications.NotifyDictionaryChangedEventArgs`2
    name: NotifyDictionaryChangedEventArgs
    nameWithType: NotifyDictionaryChangedEventArgs
    fullName: Microsoft.ServiceFabric.Data.Notifications.NotifyDictionaryChangedEventArgs
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.ServiceFabric.Data.Notifications.NotifyDictionaryChangedEventArgs`2
    name: NotifyDictionaryChangedEventArgs
    nameWithType: NotifyDictionaryChangedEventArgs
    fullName: Microsoft.ServiceFabric.Data.Notifications.NotifyDictionaryChangedEventArgs
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.EventHandler`1
  commentId: T:System.EventHandler`1
  isExternal: true
  name: EventHandler<TEventArgs>
  nameWithType: EventHandler<TEventArgs>
  fullName: System.EventHandler<TEventArgs>
  nameWithType.vb: EventHandler(Of TEventArgs)
  fullname.vb: System.EventHandler(Of TEventArgs)
  name.vb: EventHandler(Of TEventArgs)
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEventArgs
    nameWithType: TEventArgs
    fullName: TEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEventArgs
    nameWithType: TEventArgs
    fullName: TEventArgs
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.AddAsync*
  commentId: Overload:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.AddAsync
  isExternal: false
  name: AddAsync
  nameWithType: IReliableDictionary<TKey, TValue>.AddAsync
  fullName: Microsoft.ServiceFabric.Data.Collections.IReliableDictionary<TKey, TValue>.AddAsync
  nameWithType.vb: IReliableDictionary(Of TKey, TValue).AddAsync
  fullname.vb: Microsoft.ServiceFabric.Data.Collections.IReliableDictionary(Of TKey, TValue).AddAsync
- uid: System.ArgumentNullException
  commentId: T:System.ArgumentNullException
- uid: System.ArgumentException
  commentId: T:System.ArgumentException
- uid: System.TimeoutException
  commentId: T:System.TimeoutException
- uid: System.Fabric.FabricNotPrimaryException
  commentId: T:System.Fabric.FabricNotPrimaryException
  isExternal: false
  name: FabricNotPrimaryException
  nameWithType: FabricNotPrimaryException
  fullName: System.Fabric.FabricNotPrimaryException
- uid: System.InvalidOperationException
  commentId: T:System.InvalidOperationException
  parent: System
  isExternal: true
  name: InvalidOperationException
  nameWithType: InvalidOperationException
  fullName: System.InvalidOperationException
- uid: '{TKey}'
  commentId: '!:TKey'
  definition: TKey
  name: TKey
  nameWithType: TKey
  fullName: TKey
- uid: '{TValue}'
  commentId: '!:TValue'
  definition: TValue
  name: TValue
  nameWithType: TValue
  fullName: TValue
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: TKey
  isExternal: false
  name: TKey
  nameWithType: TKey
  fullName: TKey
- uid: TValue
  isExternal: false
  name: TValue
  nameWithType: TValue
  fullName: TValue
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: System.OperationCanceledException
  commentId: T:System.OperationCanceledException
- uid: System.TimeSpan
  commentId: T:System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: false
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
- uid: Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.AddOrUpdateAsync*
  commentId: Overload:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.AddOrUpdateAsync
  isExternal: false
  name: AddOrUpdateAsync
  nameWithType: IReliableDictionary<TKey, TValue>.AddOrUpdateAsync
  fullName: Microsoft.ServiceFabric.Data.Collections.IReliableDictionary<TKey, TValue>.AddOrUpdateAsync
  nameWithType.vb: IReliableDictionary(Of TKey, TValue).AddOrUpdateAsync
  fullname.vb: Microsoft.ServiceFabric.Data.Collections.IReliableDictionary(Of TKey, TValue).AddOrUpdateAsync
- uid: System.Func{{TKey},{TValue}}
  commentId: T:System.Func{`0,`1}
  parent: System
  definition: System.Func`2
  name: Func<TKey, TValue>
  nameWithType: Func<TKey, TValue>
  fullName: System.Func<TKey, TValue>
  nameWithType.vb: Func(Of TKey, TValue)
  fullname.vb: System.Func(Of TKey, TValue)
  name.vb: Func(Of TKey, TValue)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{{TKey},{TValue},{TValue}}
  commentId: T:System.Func{`0,`1,`1}
  parent: System
  definition: System.Func`3
  name: Func<TKey, TValue, TValue>
  nameWithType: Func<TKey, TValue, TValue>
  fullName: System.Func<TKey, TValue, TValue>
  nameWithType.vb: Func(Of TKey, TValue, TValue)
  fullname.vb: System.Func(Of TKey, TValue, TValue)
  name.vb: Func(Of TKey, TValue, TValue)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{{TValue}}
  commentId: T:System.Threading.Tasks.Task{`1}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<TValue>
  nameWithType: Task<TValue>
  fullName: System.Threading.Tasks.Task<TValue>
  nameWithType.vb: Task(Of TValue)
  fullname.vb: System.Threading.Tasks.Task(Of TValue)
  name.vb: Task(Of TValue)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullname.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullname.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.ClearAsync*
  commentId: Overload:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.ClearAsync
  isExternal: false
  name: ClearAsync
  nameWithType: IReliableDictionary<TKey, TValue>.ClearAsync
  fullName: Microsoft.ServiceFabric.Data.Collections.IReliableDictionary<TKey, TValue>.ClearAsync
  nameWithType.vb: IReliableDictionary(Of TKey, TValue).ClearAsync
  fullname.vb: Microsoft.ServiceFabric.Data.Collections.IReliableDictionary(Of TKey, TValue).ClearAsync
- uid: Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.ContainsKeyAsync*
  commentId: Overload:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.ContainsKeyAsync
  isExternal: false
  name: ContainsKeyAsync
  nameWithType: IReliableDictionary<TKey, TValue>.ContainsKeyAsync
  fullName: Microsoft.ServiceFabric.Data.Collections.IReliableDictionary<TKey, TValue>.ContainsKeyAsync
  nameWithType.vb: IReliableDictionary(Of TKey, TValue).ContainsKeyAsync
  fullname.vb: Microsoft.ServiceFabric.Data.Collections.IReliableDictionary(Of TKey, TValue).ContainsKeyAsync
- uid: System.Fabric.FabricNotReadableException
  commentId: T:System.Fabric.FabricNotReadableException
  isExternal: false
  name: FabricNotReadableException
  nameWithType: FabricNotReadableException
  fullName: System.Fabric.FabricNotReadableException
- uid: System.Threading.Tasks.Task{System.Boolean}
  commentId: T:System.Threading.Tasks.Task{System.Boolean}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Boolean>
  nameWithType: Task<Boolean>
  fullName: System.Threading.Tasks.Task<System.Boolean>
  nameWithType.vb: Task(Of Boolean)
  fullname.vb: System.Threading.Tasks.Task(Of System.Boolean)
  name.vb: Task(Of Boolean)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceFabric.Data.Collections.LockMode
  commentId: T:Microsoft.ServiceFabric.Data.Collections.LockMode
  parent: Microsoft.ServiceFabric.Data.Collections
  isExternal: false
  name: LockMode
  nameWithType: LockMode
  fullName: Microsoft.ServiceFabric.Data.Collections.LockMode
- uid: Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2
  commentId: T:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2
  isExternal: false
  name: IReliableDictionary<TKey, TValue>
  nameWithType: IReliableDictionary<TKey, TValue>
  fullName: Microsoft.ServiceFabric.Data.Collections.IReliableDictionary<TKey, TValue>
  nameWithType.vb: IReliableDictionary(Of TKey, TValue)
  fullname.vb: Microsoft.ServiceFabric.Data.Collections.IReliableDictionary(Of TKey, TValue)
  name.vb: IReliableDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2
    name: IReliableDictionary
    nameWithType: IReliableDictionary
    fullName: Microsoft.ServiceFabric.Data.Collections.IReliableDictionary
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2
    name: IReliableDictionary
    nameWithType: IReliableDictionary
    fullName: Microsoft.ServiceFabric.Data.Collections.IReliableDictionary
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.CreateEnumerableAsync*
  commentId: Overload:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.CreateEnumerableAsync
  isExternal: false
  name: CreateEnumerableAsync
  nameWithType: IReliableDictionary<TKey, TValue>.CreateEnumerableAsync
  fullName: Microsoft.ServiceFabric.Data.Collections.IReliableDictionary<TKey, TValue>.CreateEnumerableAsync
  nameWithType.vb: IReliableDictionary(Of TKey, TValue).CreateEnumerableAsync
  fullname.vb: Microsoft.ServiceFabric.Data.Collections.IReliableDictionary(Of TKey, TValue).CreateEnumerableAsync
- uid: System.Threading.Tasks.Task{Microsoft.ServiceFabric.Data.IAsyncEnumerable{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}}
  commentId: T:System.Threading.Tasks.Task{Microsoft.ServiceFabric.Data.IAsyncEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<IAsyncEnumerable<KeyValuePair<TKey, TValue>>>
  nameWithType: Task<IAsyncEnumerable<KeyValuePair<TKey, TValue>>>
  fullName: System.Threading.Tasks.Task<Microsoft.ServiceFabric.Data.IAsyncEnumerable<System.Collections.Generic.KeyValuePair<TKey, TValue>>>
  nameWithType.vb: Task(Of IAsyncEnumerable(Of KeyValuePair(Of TKey, TValue)))
  fullname.vb: System.Threading.Tasks.Task(Of Microsoft.ServiceFabric.Data.IAsyncEnumerable(Of System.Collections.Generic.KeyValuePair(Of TKey, TValue)))
  name.vb: Task(Of IAsyncEnumerable(Of KeyValuePair(Of TKey, TValue)))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.ServiceFabric.Data.IAsyncEnumerable`1
    name: IAsyncEnumerable
    nameWithType: IAsyncEnumerable
    fullName: Microsoft.ServiceFabric.Data.IAsyncEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.ServiceFabric.Data.IAsyncEnumerable`1
    name: IAsyncEnumerable
    nameWithType: IAsyncEnumerable
    fullName: Microsoft.ServiceFabric.Data.IAsyncEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceFabric.Data.Collections.EnumerationMode
  commentId: T:Microsoft.ServiceFabric.Data.Collections.EnumerationMode
  parent: Microsoft.ServiceFabric.Data.Collections
  isExternal: false
  name: EnumerationMode
  nameWithType: EnumerationMode
  fullName: Microsoft.ServiceFabric.Data.Collections.EnumerationMode
- uid: System.Func{{TKey},System.Boolean}
  commentId: T:System.Func{`0,System.Boolean}
  parent: System
  definition: System.Func`2
  name: Func<TKey, Boolean>
  nameWithType: Func<TKey, Boolean>
  fullName: System.Func<TKey, System.Boolean>
  nameWithType.vb: Func(Of TKey, Boolean)
  fullname.vb: System.Func(Of TKey, System.Boolean)
  name.vb: Func(Of TKey, Boolean)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.GetOrAddAsync*
  commentId: Overload:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.GetOrAddAsync
  isExternal: false
  name: GetOrAddAsync
  nameWithType: IReliableDictionary<TKey, TValue>.GetOrAddAsync
  fullName: Microsoft.ServiceFabric.Data.Collections.IReliableDictionary<TKey, TValue>.GetOrAddAsync
  nameWithType.vb: IReliableDictionary(Of TKey, TValue).GetOrAddAsync
  fullname.vb: Microsoft.ServiceFabric.Data.Collections.IReliableDictionary(Of TKey, TValue).GetOrAddAsync
- uid: Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.TryAddAsync*
  commentId: Overload:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.TryAddAsync
  isExternal: false
  name: TryAddAsync
  nameWithType: IReliableDictionary<TKey, TValue>.TryAddAsync
  fullName: Microsoft.ServiceFabric.Data.Collections.IReliableDictionary<TKey, TValue>.TryAddAsync
  nameWithType.vb: IReliableDictionary(Of TKey, TValue).TryAddAsync
  fullname.vb: Microsoft.ServiceFabric.Data.Collections.IReliableDictionary(Of TKey, TValue).TryAddAsync
- uid: Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.TryGetValueAsync*
  commentId: Overload:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.TryGetValueAsync
  isExternal: false
  name: TryGetValueAsync
  nameWithType: IReliableDictionary<TKey, TValue>.TryGetValueAsync
  fullName: Microsoft.ServiceFabric.Data.Collections.IReliableDictionary<TKey, TValue>.TryGetValueAsync
  nameWithType.vb: IReliableDictionary(Of TKey, TValue).TryGetValueAsync
  fullname.vb: Microsoft.ServiceFabric.Data.Collections.IReliableDictionary(Of TKey, TValue).TryGetValueAsync
- uid: System.Threading.Tasks.Task{Microsoft.ServiceFabric.Data.ConditionalValue{{TValue}}}
  commentId: T:System.Threading.Tasks.Task{Microsoft.ServiceFabric.Data.ConditionalValue{`1}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<ConditionalValue<TValue>>
  nameWithType: Task<ConditionalValue<TValue>>
  fullName: System.Threading.Tasks.Task<Microsoft.ServiceFabric.Data.ConditionalValue<TValue>>
  nameWithType.vb: Task(Of ConditionalValue(Of TValue))
  fullname.vb: System.Threading.Tasks.Task(Of Microsoft.ServiceFabric.Data.ConditionalValue(Of TValue))
  name.vb: Task(Of ConditionalValue(Of TValue))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.ServiceFabric.Data.ConditionalValue`1
    name: ConditionalValue
    nameWithType: ConditionalValue
    fullName: Microsoft.ServiceFabric.Data.ConditionalValue
  - name: <
    nameWithType: <
    fullName: <
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.ServiceFabric.Data.ConditionalValue`1
    name: ConditionalValue
    nameWithType: ConditionalValue
    fullName: Microsoft.ServiceFabric.Data.ConditionalValue
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.TryRemoveAsync*
  commentId: Overload:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.TryRemoveAsync
  isExternal: false
  name: TryRemoveAsync
  nameWithType: IReliableDictionary<TKey, TValue>.TryRemoveAsync
  fullName: Microsoft.ServiceFabric.Data.Collections.IReliableDictionary<TKey, TValue>.TryRemoveAsync
  nameWithType.vb: IReliableDictionary(Of TKey, TValue).TryRemoveAsync
  fullname.vb: Microsoft.ServiceFabric.Data.Collections.IReliableDictionary(Of TKey, TValue).TryRemoveAsync
- uid: Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.TryUpdateAsync*
  commentId: Overload:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.TryUpdateAsync
  isExternal: false
  name: TryUpdateAsync
  nameWithType: IReliableDictionary<TKey, TValue>.TryUpdateAsync
  fullName: Microsoft.ServiceFabric.Data.Collections.IReliableDictionary<TKey, TValue>.TryUpdateAsync
  nameWithType.vb: IReliableDictionary(Of TKey, TValue).TryUpdateAsync
  fullname.vb: Microsoft.ServiceFabric.Data.Collections.IReliableDictionary(Of TKey, TValue).TryUpdateAsync
- uid: Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.SetAsync*
  commentId: Overload:Microsoft.ServiceFabric.Data.Collections.IReliableDictionary`2.SetAsync
  isExternal: false
  name: SetAsync
  nameWithType: IReliableDictionary<TKey, TValue>.SetAsync
  fullName: Microsoft.ServiceFabric.Data.Collections.IReliableDictionary<TKey, TValue>.SetAsync
  nameWithType.vb: IReliableDictionary(Of TKey, TValue).SetAsync
  fullname.vb: Microsoft.ServiceFabric.Data.Collections.IReliableDictionary(Of TKey, TValue).SetAsync
