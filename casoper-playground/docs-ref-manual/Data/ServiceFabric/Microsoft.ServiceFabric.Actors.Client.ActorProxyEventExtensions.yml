### YamlMime:ManagedReference
items:
- uid: Microsoft.ServiceFabric.Actors.Client.ActorProxyEventExtensions
  commentId: T:Microsoft.ServiceFabric.Actors.Client.ActorProxyEventExtensions
  id: ActorProxyEventExtensions
  parent: Microsoft.ServiceFabric.Actors.Client
  children:
  - Microsoft.ServiceFabric.Actors.Client.ActorProxyEventExtensions.SubscribeAsync``1(Microsoft.ServiceFabric.Actors.IActorEventPublisher,``0)
  - Microsoft.ServiceFabric.Actors.Client.ActorProxyEventExtensions.SubscribeAsync``1(Microsoft.ServiceFabric.Actors.IActorEventPublisher,``0,System.TimeSpan)
  - Microsoft.ServiceFabric.Actors.Client.ActorProxyEventExtensions.UnsubscribeAsync``1(Microsoft.ServiceFabric.Actors.IActorEventPublisher,``0)
  langs:
  - csharp
  - vb
  name: ActorProxyEventExtensions
  nameWithType: ActorProxyEventExtensions
  fullName: Microsoft.ServiceFabric.Actors.Client.ActorProxyEventExtensions
  type: Class
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Actors/Client/ActorProxyEventExtensions.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: ActorProxyEventExtensions
    path: src/prod/src/managed/Microsoft.ServiceFabric.Actors/Client/ActorProxyEventExtensions.cs
    startLine: 14
  assemblies:
  - Microsoft.ServiceFabric.Actors
  namespace: Microsoft.ServiceFabric.Actors.Client
  summary: "\nContains extension methods related to actor events.\n"
  example: []
  syntax:
    content: public static class ActorProxyEventExtensions
    content.vb: Public Module ActorProxyEventExtensions
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Microsoft.ServiceFabric.Actors.Client.ActorProxyEventExtensions.SubscribeAsync``1(Microsoft.ServiceFabric.Actors.IActorEventPublisher,``0)
  commentId: M:Microsoft.ServiceFabric.Actors.Client.ActorProxyEventExtensions.SubscribeAsync``1(Microsoft.ServiceFabric.Actors.IActorEventPublisher,``0)
  id: SubscribeAsync``1(Microsoft.ServiceFabric.Actors.IActorEventPublisher,``0)
  isExtensionMethod: true
  parent: Microsoft.ServiceFabric.Actors.Client.ActorProxyEventExtensions
  langs:
  - csharp
  - vb
  name: SubscribeAsync<TEvent>(IActorEventPublisher, TEvent)
  nameWithType: ActorProxyEventExtensions.SubscribeAsync<TEvent>(IActorEventPublisher, TEvent)
  fullName: Microsoft.ServiceFabric.Actors.Client.ActorProxyEventExtensions.SubscribeAsync<TEvent>(Microsoft.ServiceFabric.Actors.IActorEventPublisher, TEvent)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Actors/Client/ActorProxyEventExtensions.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: SubscribeAsync
    path: src/prod/src/managed/Microsoft.ServiceFabric.Actors/Client/ActorProxyEventExtensions.cs
    startLine: 28
  assemblies:
  - Microsoft.ServiceFabric.Actors
  namespace: Microsoft.ServiceFabric.Actors.Client
  summary: "\nSubscribe to a published actor event.\n"
  example: []
  syntax:
    content: 'public static Task SubscribeAsync<TEvent>(this IActorEventPublisher actorProxy, TEvent subscriber)where TEvent : IActorEvents'
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function SubscribeAsync(Of TEvent As IActorEvents)(actorProxy As IActorEventPublisher, subscriber As TEvent) As Task
    parameters:
    - id: actorProxy
      type: Microsoft.ServiceFabric.Actors.IActorEventPublisher
      description: The actor that publishes the event.
    - id: subscriber
      type: '{TEvent}'
      description: The subscriber that receives the events.
    typeParameters:
    - id: TEvent
      description: The type of the event interface.
    return:
      type: System.Threading.Tasks.Task
      description: A task that represents the asynchronous operation of subscribing to a published actor event..
  overload: Microsoft.ServiceFabric.Actors.Client.ActorProxyEventExtensions.SubscribeAsync*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>When actorProxy is not of type <xref href=\"Microsoft.ServiceFabric.Actors.Client.ActorProxy\" data-throw-if-not-resolved=\"false\"></xref></p>.\n"
  nameWithType.vb: ActorProxyEventExtensions.SubscribeAsync(Of TEvent)(IActorEventPublisher, TEvent)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.ServiceFabric.Actors.Client.ActorProxyEventExtensions.SubscribeAsync(Of TEvent)(Microsoft.ServiceFabric.Actors.IActorEventPublisher, TEvent)
  name.vb: SubscribeAsync(Of TEvent)(IActorEventPublisher, TEvent)
- uid: Microsoft.ServiceFabric.Actors.Client.ActorProxyEventExtensions.SubscribeAsync``1(Microsoft.ServiceFabric.Actors.IActorEventPublisher,``0,System.TimeSpan)
  commentId: M:Microsoft.ServiceFabric.Actors.Client.ActorProxyEventExtensions.SubscribeAsync``1(Microsoft.ServiceFabric.Actors.IActorEventPublisher,``0,System.TimeSpan)
  id: SubscribeAsync``1(Microsoft.ServiceFabric.Actors.IActorEventPublisher,``0,System.TimeSpan)
  isExtensionMethod: true
  parent: Microsoft.ServiceFabric.Actors.Client.ActorProxyEventExtensions
  langs:
  - csharp
  - vb
  name: SubscribeAsync<TEvent>(IActorEventPublisher, TEvent, TimeSpan)
  nameWithType: ActorProxyEventExtensions.SubscribeAsync<TEvent>(IActorEventPublisher, TEvent, TimeSpan)
  fullName: Microsoft.ServiceFabric.Actors.Client.ActorProxyEventExtensions.SubscribeAsync<TEvent>(Microsoft.ServiceFabric.Actors.IActorEventPublisher, TEvent, System.TimeSpan)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Actors/Client/ActorProxyEventExtensions.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: SubscribeAsync
    path: src/prod/src/managed/Microsoft.ServiceFabric.Actors/Client/ActorProxyEventExtensions.cs
    startLine: 46
  assemblies:
  - Microsoft.ServiceFabric.Actors
  namespace: Microsoft.ServiceFabric.Actors.Client
  summary: "\nSubscribe to a published actor event.\n"
  example: []
  syntax:
    content: 'public static Task SubscribeAsync<TEvent>(this IActorEventPublisher actorProxy, TEvent subscriber, TimeSpan resubscriptionInterval)where TEvent : IActorEvents'
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function SubscribeAsync(Of TEvent As IActorEvents)(actorProxy As IActorEventPublisher, subscriber As TEvent, resubscriptionInterval As TimeSpan) As Task
    parameters:
    - id: actorProxy
      type: Microsoft.ServiceFabric.Actors.IActorEventPublisher
      description: The actor that publishes the event.
    - id: subscriber
      type: '{TEvent}'
      description: The subscriber that receives the events.
    - id: resubscriptionInterval
      type: System.TimeSpan
      description: The time between re-subscription attempts.
    typeParameters:
    - id: TEvent
      description: The type of the event interface.
    return:
      type: System.Threading.Tasks.Task
      description: A task that represents the asynchronous operation of subscribing to a published actor event.
  overload: Microsoft.ServiceFabric.Actors.Client.ActorProxyEventExtensions.SubscribeAsync*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>When actorProxy is not of type <xref href=\"Microsoft.ServiceFabric.Actors.Client.ActorProxy\" data-throw-if-not-resolved=\"false\"></xref></p>.\n"
  nameWithType.vb: ActorProxyEventExtensions.SubscribeAsync(Of TEvent)(IActorEventPublisher, TEvent, TimeSpan)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.ServiceFabric.Actors.Client.ActorProxyEventExtensions.SubscribeAsync(Of TEvent)(Microsoft.ServiceFabric.Actors.IActorEventPublisher, TEvent, System.TimeSpan)
  name.vb: SubscribeAsync(Of TEvent)(IActorEventPublisher, TEvent, TimeSpan)
- uid: Microsoft.ServiceFabric.Actors.Client.ActorProxyEventExtensions.UnsubscribeAsync``1(Microsoft.ServiceFabric.Actors.IActorEventPublisher,``0)
  commentId: M:Microsoft.ServiceFabric.Actors.Client.ActorProxyEventExtensions.UnsubscribeAsync``1(Microsoft.ServiceFabric.Actors.IActorEventPublisher,``0)
  id: UnsubscribeAsync``1(Microsoft.ServiceFabric.Actors.IActorEventPublisher,``0)
  isExtensionMethod: true
  parent: Microsoft.ServiceFabric.Actors.Client.ActorProxyEventExtensions
  langs:
  - csharp
  - vb
  name: UnsubscribeAsync<TEvent>(IActorEventPublisher, TEvent)
  nameWithType: ActorProxyEventExtensions.UnsubscribeAsync<TEvent>(IActorEventPublisher, TEvent)
  fullName: Microsoft.ServiceFabric.Actors.Client.ActorProxyEventExtensions.UnsubscribeAsync<TEvent>(Microsoft.ServiceFabric.Actors.IActorEventPublisher, TEvent)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Actors/Client/ActorProxyEventExtensions.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: UnsubscribeAsync
    path: src/prod/src/managed/Microsoft.ServiceFabric.Actors/Client/ActorProxyEventExtensions.cs
    startLine: 76
  assemblies:
  - Microsoft.ServiceFabric.Actors
  namespace: Microsoft.ServiceFabric.Actors.Client
  summary: "\nUnsubscribe from a published actor event.\n"
  example: []
  syntax:
    content: public static Task UnsubscribeAsync<TEvent>(this IActorEventPublisher actorProxy, TEvent subscriber)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function UnsubscribeAsync(Of TEvent)(actorProxy As IActorEventPublisher, subscriber As TEvent) As Task
    parameters:
    - id: actorProxy
      type: Microsoft.ServiceFabric.Actors.IActorEventPublisher
      description: The actor that publishes the event.
    - id: subscriber
      type: '{TEvent}'
      description: The subscriber that receives the event.
    typeParameters:
    - id: TEvent
      description: The type of the event interface.
    return:
      type: System.Threading.Tasks.Task
      description: A task that represents the asynchronous operation of un-subscribing from a published actor event..
  overload: Microsoft.ServiceFabric.Actors.Client.ActorProxyEventExtensions.UnsubscribeAsync*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>When actorProxy is not of type <xref href=\"Microsoft.ServiceFabric.Actors.Client.ActorProxy\" data-throw-if-not-resolved=\"false\"></xref></p>.\n<p>When TEvent doesn't implement <xref href=\"Microsoft.ServiceFabric.Actors.IActorEvents\" data-throw-if-not-resolved=\"false\"></xref></p>\n"
  nameWithType.vb: ActorProxyEventExtensions.UnsubscribeAsync(Of TEvent)(IActorEventPublisher, TEvent)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.ServiceFabric.Actors.Client.ActorProxyEventExtensions.UnsubscribeAsync(Of TEvent)(Microsoft.ServiceFabric.Actors.IActorEventPublisher, TEvent)
  name.vb: UnsubscribeAsync(Of TEvent)(IActorEventPublisher, TEvent)
references:
- uid: Microsoft.ServiceFabric.Actors.Client
  commentId: N:Microsoft.ServiceFabric.Actors.Client
  isExternal: false
  name: Microsoft.ServiceFabric.Actors.Client
  nameWithType: Microsoft.ServiceFabric.Actors.Client
  fullName: Microsoft.ServiceFabric.Actors.Client
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.ServiceFabric.Actors.Client.ActorProxy
  commentId: T:Microsoft.ServiceFabric.Actors.Client.ActorProxy
  isExternal: false
  name: ActorProxy
  nameWithType: ActorProxy
  fullName: Microsoft.ServiceFabric.Actors.Client.ActorProxy
- uid: Microsoft.ServiceFabric.Actors.Client.ActorProxyEventExtensions.SubscribeAsync*
  commentId: Overload:Microsoft.ServiceFabric.Actors.Client.ActorProxyEventExtensions.SubscribeAsync
  isExternal: false
  name: SubscribeAsync<TEvent>
  nameWithType: ActorProxyEventExtensions.SubscribeAsync<TEvent>
  fullName: Microsoft.ServiceFabric.Actors.Client.ActorProxyEventExtensions.SubscribeAsync<TEvent>
  nameWithType.vb: ActorProxyEventExtensions.SubscribeAsync(Of TEvent)
  fullname.vb: Microsoft.ServiceFabric.Actors.Client.ActorProxyEventExtensions.SubscribeAsync(Of TEvent)
  name.vb: SubscribeAsync(Of TEvent)
- uid: System.ArgumentException
  commentId: T:System.ArgumentException
- uid: Microsoft.ServiceFabric.Actors.IActorEventPublisher
  commentId: T:Microsoft.ServiceFabric.Actors.IActorEventPublisher
  parent: Microsoft.ServiceFabric.Actors
  isExternal: false
  name: IActorEventPublisher
  nameWithType: IActorEventPublisher
  fullName: Microsoft.ServiceFabric.Actors.IActorEventPublisher
- uid: '{TEvent}'
  commentId: '!:TEvent'
  definition: TEvent
  name: TEvent
  nameWithType: TEvent
  fullName: TEvent
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: Microsoft.ServiceFabric.Actors
  commentId: N:Microsoft.ServiceFabric.Actors
  isExternal: false
  name: Microsoft.ServiceFabric.Actors
  nameWithType: Microsoft.ServiceFabric.Actors
  fullName: Microsoft.ServiceFabric.Actors
- uid: TEvent
  isExternal: false
  name: TEvent
  nameWithType: TEvent
  fullName: TEvent
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: System.TimeSpan
  commentId: T:System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: Microsoft.ServiceFabric.Actors.IActorEvents
  commentId: T:Microsoft.ServiceFabric.Actors.IActorEvents
  isExternal: false
  name: IActorEvents
  nameWithType: IActorEvents
  fullName: Microsoft.ServiceFabric.Actors.IActorEvents
- uid: Microsoft.ServiceFabric.Actors.Client.ActorProxyEventExtensions.UnsubscribeAsync*
  commentId: Overload:Microsoft.ServiceFabric.Actors.Client.ActorProxyEventExtensions.UnsubscribeAsync
  isExternal: false
  name: UnsubscribeAsync<TEvent>
  nameWithType: ActorProxyEventExtensions.UnsubscribeAsync<TEvent>
  fullName: Microsoft.ServiceFabric.Actors.Client.ActorProxyEventExtensions.UnsubscribeAsync<TEvent>
  nameWithType.vb: ActorProxyEventExtensions.UnsubscribeAsync(Of TEvent)
  fullname.vb: Microsoft.ServiceFabric.Actors.Client.ActorProxyEventExtensions.UnsubscribeAsync(Of TEvent)
  name.vb: UnsubscribeAsync(Of TEvent)
