### YamlMime:ManagedReference
items:
- uid: System.Fabric.Query.ServiceTypeList
  commentId: T:System.Fabric.Query.ServiceTypeList
  id: ServiceTypeList
  parent: System.Fabric.Query
  children:
  - System.Fabric.Query.ServiceTypeList.Add(System.Fabric.Query.ServiceType)
  - System.Fabric.Query.ServiceTypeList.Clear
  - System.Fabric.Query.ServiceTypeList.Contains(System.Fabric.Query.ServiceType)
  - System.Fabric.Query.ServiceTypeList.CopyTo(System.Fabric.Query.ServiceType[],System.Int32)
  - System.Fabric.Query.ServiceTypeList.Count
  - System.Fabric.Query.ServiceTypeList.GetEnumerator
  - System.Fabric.Query.ServiceTypeList.IndexOf(System.Fabric.Query.ServiceType)
  - System.Fabric.Query.ServiceTypeList.Insert(System.Int32,System.Fabric.Query.ServiceType)
  - System.Fabric.Query.ServiceTypeList.IsReadOnly
  - System.Fabric.Query.ServiceTypeList.Item(System.Int32)
  - System.Fabric.Query.ServiceTypeList.Remove(System.Fabric.Query.ServiceType)
  - System.Fabric.Query.ServiceTypeList.RemoveAt(System.Int32)
  - System.Fabric.Query.ServiceTypeList.System#Collections#IEnumerable#GetEnumerator
  langs:
  - csharp
  - vb
  name: ServiceTypeList
  nameWithType: ServiceTypeList
  fullName: System.Fabric.Query.ServiceTypeList
  type: Class
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/Query/ServiceTypeList.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: ServiceTypeList
    path: src/prod/src/managed/Api/src/System/Fabric/Query/ServiceTypeList.cs
    startLine: 14
  assemblies:
  - System.Fabric
  namespace: System.Fabric.Query
  summary: "\n<p>Represents a list of service type.</p>\n"
  example: []
  syntax:
    content: 'public sealed class ServiceTypeList : IList<ServiceType>, ICollection<ServiceType>, IEnumerable<ServiceType>, IEnumerable'
    content.vb: >-
      Public NotInheritable Class ServiceTypeList
          Implements IList(Of ServiceType), ICollection(Of ServiceType), IEnumerable(Of ServiceType), IEnumerable
  inheritance:
  - System.Object
  implements:
  - System.Collections.Generic.IList{System.Fabric.Query.ServiceType}
  - System.Collections.Generic.ICollection{System.Fabric.Query.ServiceType}
  - System.Collections.Generic.IEnumerable{System.Fabric.Query.ServiceType}
  - System.Collections.IEnumerable
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  extensionMethods:
  - System.Fabric.Query.ServiceTypeList.System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: System.Fabric.Query.ServiceTypeList.IndexOf(System.Fabric.Query.ServiceType)
  commentId: M:System.Fabric.Query.ServiceTypeList.IndexOf(System.Fabric.Query.ServiceType)
  id: IndexOf(System.Fabric.Query.ServiceType)
  parent: System.Fabric.Query.ServiceTypeList
  langs:
  - csharp
  - vb
  name: IndexOf(ServiceType)
  nameWithType: ServiceTypeList.IndexOf(ServiceType)
  fullName: System.Fabric.Query.ServiceTypeList.IndexOf(System.Fabric.Query.ServiceType)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/Query/ServiceTypeList.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: IndexOf
    path: src/prod/src/managed/Api/src/System/Fabric/Query/ServiceTypeList.cs
    startLine: 38
  assemblies:
  - System.Fabric
  namespace: System.Fabric.Query
  summary: "\n<p>Searches for the specified <xref href=\"System.Fabric.Query.ServiceType\" data-throw-if-not-resolved=\"false\"></xref>  and returns the zero-based index of the first \noccurrence within the entire <xref href=\"System.Fabric.Query.ServiceTypeList\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example: []
  syntax:
    content: public int IndexOf(ServiceType item)
    content.vb: Public Function IndexOf(item As ServiceType) As Integer
    parameters:
    - id: item
      type: System.Fabric.Query.ServiceType
      description: "\n<p>The item to search.</p>\n"
    return:
      type: System.Int32
      description: "\n<p>The zero-based index of the first occurrence within the entire <xref href=\"System.Fabric.Query.ServiceTypeList\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  overload: System.Fabric.Query.ServiceTypeList.IndexOf*
  implements:
  - System.Collections.Generic.IList{System.Fabric.Query.ServiceType}.IndexOf(System.Fabric.Query.ServiceType)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.Query.ServiceTypeList.Insert(System.Int32,System.Fabric.Query.ServiceType)
  commentId: M:System.Fabric.Query.ServiceTypeList.Insert(System.Int32,System.Fabric.Query.ServiceType)
  id: Insert(System.Int32,System.Fabric.Query.ServiceType)
  parent: System.Fabric.Query.ServiceTypeList
  langs:
  - csharp
  - vb
  name: Insert(Int32, ServiceType)
  nameWithType: ServiceTypeList.Insert(Int32, ServiceType)
  fullName: System.Fabric.Query.ServiceTypeList.Insert(System.Int32, System.Fabric.Query.ServiceType)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/Query/ServiceTypeList.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: Insert
    path: src/prod/src/managed/Api/src/System/Fabric/Query/ServiceTypeList.cs
    startLine: 52
  assemblies:
  - System.Fabric
  namespace: System.Fabric.Query
  summary: "\n<p>Inserts an element into the <xref href=\"System.Fabric.Query.ServiceTypeList\" data-throw-if-not-resolved=\"false\"></xref>  at the specified index.</p>\n"
  example: []
  syntax:
    content: public void Insert(int index, ServiceType item)
    content.vb: Public Sub Insert(index As Integer, item As ServiceType)
    parameters:
    - id: index
      type: System.Int32
      description: "\n<p>The index.</p>\n"
    - id: item
      type: System.Fabric.Query.ServiceType
      description: "\n<p>The item to insert.</p>\n"
  overload: System.Fabric.Query.ServiceTypeList.Insert*
  implements:
  - System.Collections.Generic.IList{System.Fabric.Query.ServiceType}.Insert(System.Int32,System.Fabric.Query.ServiceType)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.Query.ServiceTypeList.RemoveAt(System.Int32)
  commentId: M:System.Fabric.Query.ServiceTypeList.RemoveAt(System.Int32)
  id: RemoveAt(System.Int32)
  parent: System.Fabric.Query.ServiceTypeList
  langs:
  - csharp
  - vb
  name: RemoveAt(Int32)
  nameWithType: ServiceTypeList.RemoveAt(Int32)
  fullName: System.Fabric.Query.ServiceTypeList.RemoveAt(System.Int32)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/Query/ServiceTypeList.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: RemoveAt
    path: src/prod/src/managed/Api/src/System/Fabric/Query/ServiceTypeList.cs
    startLine: 63
  assemblies:
  - System.Fabric
  namespace: System.Fabric.Query
  summary: "\n<p>Removes the element at the specified index of the <xref href=\"System.Fabric.Query.ServiceTypeList\" data-throw-if-not-resolved=\"false\"></xref>..</p>\n"
  example: []
  syntax:
    content: public void RemoveAt(int index)
    content.vb: Public Sub RemoveAt(index As Integer)
    parameters:
    - id: index
      type: System.Int32
      description: "\n<p>The index where to remove the item.</p>\n"
  overload: System.Fabric.Query.ServiceTypeList.RemoveAt*
  implements:
  - System.Collections.Generic.IList{System.Fabric.Query.ServiceType}.RemoveAt(System.Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.Query.ServiceTypeList.Item(System.Int32)
  commentId: P:System.Fabric.Query.ServiceTypeList.Item(System.Int32)
  id: Item(System.Int32)
  parent: System.Fabric.Query.ServiceTypeList
  langs:
  - csharp
  - vb
  name: Item[Int32]
  nameWithType: ServiceTypeList.Item[Int32]
  fullName: System.Fabric.Query.ServiceTypeList.Item[System.Int32]
  type: Property
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/Query/ServiceTypeList.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: this[]
    path: src/prod/src/managed/Api/src/System/Fabric/Query/ServiceTypeList.cs
    startLine: 77
  assemblies:
  - System.Fabric
  namespace: System.Fabric.Query
  summary: "\n<p>Gets or sets the element at the specified index.</p>\n"
  example: []
  syntax:
    content: public ServiceType this[int index] { get; set; }
    content.vb: Public Property Item(index As Integer) As ServiceType
    parameters:
    - id: index
      type: System.Int32
      description: "\n<p>The zero-based index of the element to get or set.</p>\n"
    return:
      type: System.Fabric.Query.ServiceType
      description: "\n<p>The element at the specified index.</p>\n"
  overload: System.Fabric.Query.ServiceTypeList.Item*
  implements:
  - System.Collections.Generic.IList{System.Fabric.Query.ServiceType}.Item(System.Int32)
  nameWithType.vb: ServiceTypeList.Item(Int32)
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: System.Fabric.Query.ServiceTypeList.Item(System.Int32)
  name.vb: Item(Int32)
- uid: System.Fabric.Query.ServiceTypeList.Add(System.Fabric.Query.ServiceType)
  commentId: M:System.Fabric.Query.ServiceTypeList.Add(System.Fabric.Query.ServiceType)
  id: Add(System.Fabric.Query.ServiceType)
  parent: System.Fabric.Query.ServiceTypeList
  langs:
  - csharp
  - vb
  name: Add(ServiceType)
  nameWithType: ServiceTypeList.Add(ServiceType)
  fullName: System.Fabric.Query.ServiceTypeList.Add(System.Fabric.Query.ServiceType)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/Query/ServiceTypeList.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: Add
    path: src/prod/src/managed/Api/src/System/Fabric/Query/ServiceTypeList.cs
    startLine: 95
  assemblies:
  - System.Fabric
  namespace: System.Fabric.Query
  summary: "\n<p>Adds an object to the end of the <xref href=\"System.Fabric.Query.ServiceTypeList\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example: []
  syntax:
    content: public void Add(ServiceType item)
    content.vb: Public Sub Add(item As ServiceType)
    parameters:
    - id: item
      type: System.Fabric.Query.ServiceType
      description: "\n<p>The item to add.</p>\n"
  overload: System.Fabric.Query.ServiceTypeList.Add*
  implements:
  - System.Collections.Generic.ICollection{System.Fabric.Query.ServiceType}.Add(System.Fabric.Query.ServiceType)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.Query.ServiceTypeList.Clear
  commentId: M:System.Fabric.Query.ServiceTypeList.Clear
  id: Clear
  parent: System.Fabric.Query.ServiceTypeList
  langs:
  - csharp
  - vb
  name: Clear()
  nameWithType: ServiceTypeList.Clear()
  fullName: System.Fabric.Query.ServiceTypeList.Clear()
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/Query/ServiceTypeList.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: Clear
    path: src/prod/src/managed/Api/src/System/Fabric/Query/ServiceTypeList.cs
    startLine: 103
  assemblies:
  - System.Fabric
  namespace: System.Fabric.Query
  summary: "\n<p>Removes all elements from the <xref href=\"System.Fabric.Query.ServiceTypeList\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example: []
  syntax:
    content: public void Clear()
    content.vb: Public Sub Clear
  overload: System.Fabric.Query.ServiceTypeList.Clear*
  implements:
  - System.Collections.Generic.ICollection{System.Fabric.Query.ServiceType}.Clear
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.Query.ServiceTypeList.Contains(System.Fabric.Query.ServiceType)
  commentId: M:System.Fabric.Query.ServiceTypeList.Contains(System.Fabric.Query.ServiceType)
  id: Contains(System.Fabric.Query.ServiceType)
  parent: System.Fabric.Query.ServiceTypeList
  langs:
  - csharp
  - vb
  name: Contains(ServiceType)
  nameWithType: ServiceTypeList.Contains(ServiceType)
  fullName: System.Fabric.Query.ServiceTypeList.Contains(System.Fabric.Query.ServiceType)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/Query/ServiceTypeList.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: Contains
    path: src/prod/src/managed/Api/src/System/Fabric/Query/ServiceTypeList.cs
    startLine: 119
  assemblies:
  - System.Fabric
  namespace: System.Fabric.Query
  summary: "\n<p>Determines whether an element is in the <xref href=\"System.Fabric.Query.ServiceTypeList\" data-throw-if-not-resolved=\"false\"></xref>..</p>\n"
  example: []
  syntax:
    content: public bool Contains(ServiceType item)
    content.vb: Public Function Contains(item As ServiceType) As Boolean
    parameters:
    - id: item
      type: System.Fabric.Query.ServiceType
      description: "\n<p>The item to search.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the item is in the <xref href=\"System.Fabric.Query.ServiceTypeList\" data-throw-if-not-resolved=\"false\"></xref>; \notherwise, <strong>false</strong>.</p>\n"
  overload: System.Fabric.Query.ServiceTypeList.Contains*
  implements:
  - System.Collections.Generic.ICollection{System.Fabric.Query.ServiceType}.Contains(System.Fabric.Query.ServiceType)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.Query.ServiceTypeList.CopyTo(System.Fabric.Query.ServiceType[],System.Int32)
  commentId: M:System.Fabric.Query.ServiceTypeList.CopyTo(System.Fabric.Query.ServiceType[],System.Int32)
  id: CopyTo(System.Fabric.Query.ServiceType[],System.Int32)
  parent: System.Fabric.Query.ServiceTypeList
  langs:
  - csharp
  - vb
  name: CopyTo(ServiceType[], Int32)
  nameWithType: ServiceTypeList.CopyTo(ServiceType[], Int32)
  fullName: System.Fabric.Query.ServiceTypeList.CopyTo(System.Fabric.Query.ServiceType[], System.Int32)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/Query/ServiceTypeList.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: CopyTo
    path: src/prod/src/managed/Api/src/System/Fabric/Query/ServiceTypeList.cs
    startLine: 134
  assemblies:
  - System.Fabric
  namespace: System.Fabric.Query
  summary: "\n<p>Copies the entire <xref href=\"System.Fabric.Query.ServiceTypeList\" data-throw-if-not-resolved=\"false\"></xref> to a compatible one-dimensional \n<xref href=\"System.Fabric.Query.ServiceTypeList\" data-throw-if-not-resolved=\"false\"></xref>, starting at the specified index of the target array.</p>\n"
  example: []
  syntax:
    content: public void CopyTo(ServiceType[] array, int arrayIndex)
    content.vb: Public Sub CopyTo(array As ServiceType(), arrayIndex As Integer)
    parameters:
    - id: array
      type: System.Fabric.Query.ServiceType[]
      description: "\n<p>An array of service type.</p>\n"
    - id: arrayIndex
      type: System.Int32
      description: "\n<p>The array index.</p>\n"
  overload: System.Fabric.Query.ServiceTypeList.CopyTo*
  implements:
  - System.Collections.Generic.ICollection{System.Fabric.Query.ServiceType}.CopyTo(System.Fabric.Query.ServiceType[],System.Int32)
  nameWithType.vb: ServiceTypeList.CopyTo(ServiceType(), Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Fabric.Query.ServiceTypeList.CopyTo(System.Fabric.Query.ServiceType(), System.Int32)
  name.vb: CopyTo(ServiceType(), Int32)
- uid: System.Fabric.Query.ServiceTypeList.Count
  commentId: P:System.Fabric.Query.ServiceTypeList.Count
  id: Count
  parent: System.Fabric.Query.ServiceTypeList
  langs:
  - csharp
  - vb
  name: Count
  nameWithType: ServiceTypeList.Count
  fullName: System.Fabric.Query.ServiceTypeList.Count
  type: Property
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/Query/ServiceTypeList.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: Count
    path: src/prod/src/managed/Api/src/System/Fabric/Query/ServiceTypeList.cs
    startLine: 145
  assemblies:
  - System.Fabric
  namespace: System.Fabric.Query
  summary: "\n<p>Gets or sets the number of elements in the <xref href=\"System.Fabric.Query.ServiceTypeList\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example: []
  syntax:
    content: public int Count { get; }
    content.vb: Public ReadOnly Property Count As Integer
    parameters: []
    return:
      type: System.Int32
      description: "\n<p>The number of elements in the <xref href=\"System.Fabric.Query.ServiceTypeList\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  overload: System.Fabric.Query.ServiceTypeList.Count*
  implements:
  - System.Collections.Generic.ICollection{System.Fabric.Query.ServiceType}.Count
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Fabric.Query.ServiceTypeList.IsReadOnly
  commentId: P:System.Fabric.Query.ServiceTypeList.IsReadOnly
  id: IsReadOnly
  parent: System.Fabric.Query.ServiceTypeList
  langs:
  - csharp
  - vb
  name: IsReadOnly
  nameWithType: ServiceTypeList.IsReadOnly
  fullName: System.Fabric.Query.ServiceTypeList.IsReadOnly
  type: Property
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/Query/ServiceTypeList.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: IsReadOnly
    path: src/prod/src/managed/Api/src/System/Fabric/Query/ServiceTypeList.cs
    startLine: 158
  assemblies:
  - System.Fabric
  namespace: System.Fabric.Query
  summary: "\n<p>Gets or sets whether <xref href=\"System.Fabric.Query.ServiceTypeList\" data-throw-if-not-resolved=\"false\"></xref> is read-only.</p>\n"
  example: []
  syntax:
    content: public bool IsReadOnly { get; }
    content.vb: Public ReadOnly Property IsReadOnly As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the <xref href=\"System.Fabric.Query.ServiceTypeList\" data-throw-if-not-resolved=\"false\"></xref> is read-only; \notherwise, <strong>false</strong>.</p>\n"
  overload: System.Fabric.Query.ServiceTypeList.IsReadOnly*
  implements:
  - System.Collections.Generic.ICollection{System.Fabric.Query.ServiceType}.IsReadOnly
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Fabric.Query.ServiceTypeList.Remove(System.Fabric.Query.ServiceType)
  commentId: M:System.Fabric.Query.ServiceTypeList.Remove(System.Fabric.Query.ServiceType)
  id: Remove(System.Fabric.Query.ServiceType)
  parent: System.Fabric.Query.ServiceTypeList
  langs:
  - csharp
  - vb
  name: Remove(ServiceType)
  nameWithType: ServiceTypeList.Remove(ServiceType)
  fullName: System.Fabric.Query.ServiceTypeList.Remove(System.Fabric.Query.ServiceType)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/Query/ServiceTypeList.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: Remove
    path: src/prod/src/managed/Api/src/System/Fabric/Query/ServiceTypeList.cs
    startLine: 173
  assemblies:
  - System.Fabric
  namespace: System.Fabric.Query
  summary: "\n<p>Removes the first occurrence of a specific object from the <xref href=\"System.Fabric.Query.ServiceTypeList\" data-throw-if-not-resolved=\"false\"></xref>..</p>\n"
  example: []
  syntax:
    content: public bool Remove(ServiceType item)
    content.vb: Public Function Remove(item As ServiceType) As Boolean
    parameters:
    - id: item
      type: System.Fabric.Query.ServiceType
      description: "\n<p>The item to remove.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the item exist; otherwise, <strong>false</strong>.</p>\n"
  overload: System.Fabric.Query.ServiceTypeList.Remove*
  implements:
  - System.Collections.Generic.ICollection{System.Fabric.Query.ServiceType}.Remove(System.Fabric.Query.ServiceType)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.Query.ServiceTypeList.GetEnumerator
  commentId: M:System.Fabric.Query.ServiceTypeList.GetEnumerator
  id: GetEnumerator
  parent: System.Fabric.Query.ServiceTypeList
  langs:
  - csharp
  - vb
  name: GetEnumerator()
  nameWithType: ServiceTypeList.GetEnumerator()
  fullName: System.Fabric.Query.ServiceTypeList.GetEnumerator()
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/Query/ServiceTypeList.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: GetEnumerator
    path: src/prod/src/managed/Api/src/System/Fabric/Query/ServiceTypeList.cs
    startLine: 184
  assemblies:
  - System.Fabric
  namespace: System.Fabric.Query
  summary: "\n<p>Returns an enumerator for the entire <xref href=\"System.Fabric.Query.ServiceTypeList\" data-throw-if-not-resolved=\"false\"></xref>..</p>\n"
  example: []
  syntax:
    content: public IEnumerator<ServiceType> GetEnumerator()
    content.vb: Public Function GetEnumerator As IEnumerator(Of ServiceType)
    return:
      type: System.Collections.Generic.IEnumerator{System.Fabric.Query.ServiceType}
      description: "\n<p>An enumerator for the entire <xref href=\"System.Fabric.Query.ServiceTypeList\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  overload: System.Fabric.Query.ServiceTypeList.GetEnumerator*
  implements:
  - System.Collections.Generic.IEnumerable{System.Fabric.Query.ServiceType}.GetEnumerator
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.Query.ServiceTypeList.System#Collections#IEnumerable#GetEnumerator
  commentId: M:System.Fabric.Query.ServiceTypeList.System#Collections#IEnumerable#GetEnumerator
  id: System#Collections#IEnumerable#GetEnumerator
  isEii: true
  parent: System.Fabric.Query.ServiceTypeList
  langs:
  - csharp
  - vb
  name: IEnumerable.GetEnumerator()
  nameWithType: ServiceTypeList.IEnumerable.GetEnumerator()
  fullName: System.Fabric.Query.ServiceTypeList.System.Collections.IEnumerable.GetEnumerator()
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/Query/ServiceTypeList.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: System.Collections.IEnumerable.GetEnumerator
    path: src/prod/src/managed/Api/src/System/Fabric/Query/ServiceTypeList.cs
    startLine: 195
  assemblies:
  - System.Fabric
  namespace: System.Fabric.Query
  summary: "\n<p>Returns the enumerator for the <xref href=\"System.Fabric.Query.ServiceTypeList\" data-throw-if-not-resolved=\"false\"></xref>..</p>\n"
  example: []
  syntax:
    content: IEnumerator IEnumerable.GetEnumerator()
    content.vb: Function System.Collections.IEnumerable.GetEnumerator As IEnumerator Implements IEnumerable.GetEnumerator
    return:
      type: System.Collections.IEnumerator
      description: "\n<p>The numerator for the <xref href=\"System.Fabric.Query.ServiceTypeList\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  overload: System.Fabric.Query.ServiceTypeList.System#Collections#IEnumerable#GetEnumerator*
  implements:
  - System.Collections.IEnumerable.GetEnumerator
  nameWithType.vb: ServiceTypeList.System.Collections.IEnumerable.GetEnumerator()
  name.vb: System.Collections.IEnumerable.GetEnumerator()
references:
- uid: System.Fabric.Query
  commentId: N:System.Fabric.Query
  isExternal: false
  name: System.Fabric.Query
  nameWithType: System.Fabric.Query
  fullName: System.Fabric.Query
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Collections.Generic.IList{System.Fabric.Query.ServiceType}
  commentId: T:System.Collections.Generic.IList{System.Fabric.Query.ServiceType}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<ServiceType>
  nameWithType: IList<ServiceType>
  fullName: System.Collections.Generic.IList<System.Fabric.Query.ServiceType>
  nameWithType.vb: IList(Of ServiceType)
  fullname.vb: System.Collections.Generic.IList(Of System.Fabric.Query.ServiceType)
  name.vb: IList(Of ServiceType)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Fabric.Query.ServiceType
    name: ServiceType
    nameWithType: ServiceType
    fullName: System.Fabric.Query.ServiceType
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Fabric.Query.ServiceType
    name: ServiceType
    nameWithType: ServiceType
    fullName: System.Fabric.Query.ServiceType
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection{System.Fabric.Query.ServiceType}
  commentId: T:System.Collections.Generic.ICollection{System.Fabric.Query.ServiceType}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ICollection`1
  name: ICollection<ServiceType>
  nameWithType: ICollection<ServiceType>
  fullName: System.Collections.Generic.ICollection<System.Fabric.Query.ServiceType>
  nameWithType.vb: ICollection(Of ServiceType)
  fullname.vb: System.Collections.Generic.ICollection(Of System.Fabric.Query.ServiceType)
  name.vb: ICollection(Of ServiceType)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Fabric.Query.ServiceType
    name: ServiceType
    nameWithType: ServiceType
    fullName: System.Fabric.Query.ServiceType
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Fabric.Query.ServiceType
    name: ServiceType
    nameWithType: ServiceType
    fullName: System.Fabric.Query.ServiceType
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{System.Fabric.Query.ServiceType}
  commentId: T:System.Collections.Generic.IEnumerable{System.Fabric.Query.ServiceType}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<ServiceType>
  nameWithType: IEnumerable<ServiceType>
  fullName: System.Collections.Generic.IEnumerable<System.Fabric.Query.ServiceType>
  nameWithType.vb: IEnumerable(Of ServiceType)
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Fabric.Query.ServiceType)
  name.vb: IEnumerable(Of ServiceType)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Fabric.Query.ServiceType
    name: ServiceType
    nameWithType: ServiceType
    fullName: System.Fabric.Query.ServiceType
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Fabric.Query.ServiceType
    name: ServiceType
    nameWithType: ServiceType
    fullName: System.Fabric.Query.ServiceType
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IEnumerable
  commentId: T:System.Collections.IEnumerable
  parent: System.Collections
  isExternal: true
  name: IEnumerable
  nameWithType: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.Query.ServiceTypeList.System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
  commentId: M:System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  parent: System.Fabric.Messaging.Stream.ByteArraySerializer
  definition: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  name: Serialize<ServiceTypeList>()
  nameWithType: ByteArraySerializer.Serialize<ServiceTypeList>()
  fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<System.Fabric.Query.ServiceTypeList>()
  nameWithType.vb: ByteArraySerializer.Serialize(Of ServiceTypeList)()
  fullname.vb: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of System.Fabric.Query.ServiceTypeList)()
  name.vb: Serialize(Of ServiceTypeList)()
  spec.csharp:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
    name: Serialize<ServiceTypeList>
    nameWithType: ByteArraySerializer.Serialize<ServiceTypeList>
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<System.Fabric.Query.ServiceTypeList>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
    name: Serialize(Of ServiceTypeList)
    nameWithType: ByteArraySerializer.Serialize(Of ServiceTypeList)
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of System.Fabric.Query.ServiceTypeList)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Collections.Generic.IList`1
  commentId: T:System.Collections.Generic.IList`1
  isExternal: true
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullname.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Collections.Generic.ICollection`1
  commentId: T:System.Collections.Generic.ICollection`1
  isExternal: true
  name: ICollection<T>
  nameWithType: ICollection<T>
  fullName: System.Collections.Generic.ICollection<T>
  nameWithType.vb: ICollection(Of T)
  fullname.vb: System.Collections.Generic.ICollection(Of T)
  name.vb: ICollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullname.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections
  commentId: N:System.Collections
  isExternal: false
  name: System.Collections
  nameWithType: System.Collections
  fullName: System.Collections
- uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  commentId: M:System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  isExternal: false
  name: Serialize<T>(T)
  nameWithType: ByteArraySerializer.Serialize<T>(T)
  fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<T>(T)
  nameWithType.vb: ByteArraySerializer.Serialize(Of T)(T)
  fullname.vb: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of T)(T)
  name.vb: Serialize(Of T)(T)
  spec.csharp:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
    name: Serialize<T>
    nameWithType: ByteArraySerializer.Serialize<T>
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
    name: Serialize(Of T)
    nameWithType: ByteArraySerializer.Serialize(Of T)
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.Messaging.Stream.ByteArraySerializer
  commentId: T:System.Fabric.Messaging.Stream.ByteArraySerializer
  parent: System.Fabric.Messaging.Stream
  isExternal: false
  name: ByteArraySerializer
  nameWithType: ByteArraySerializer
  fullName: System.Fabric.Messaging.Stream.ByteArraySerializer
- uid: System.Fabric.Messaging.Stream
  commentId: N:System.Fabric.Messaging.Stream
  isExternal: false
  name: System.Fabric.Messaging.Stream
  nameWithType: System.Fabric.Messaging.Stream
  fullName: System.Fabric.Messaging.Stream
- uid: System.Fabric.Query.ServiceType
  commentId: T:System.Fabric.Query.ServiceType
  parent: System.Fabric.Query
  isExternal: false
  name: ServiceType
  nameWithType: ServiceType
  fullName: System.Fabric.Query.ServiceType
- uid: System.Fabric.Query.ServiceTypeList
  commentId: T:System.Fabric.Query.ServiceTypeList
  isExternal: false
  name: ServiceTypeList
  nameWithType: ServiceTypeList
  fullName: System.Fabric.Query.ServiceTypeList
- uid: System.Fabric.Query.ServiceTypeList.IndexOf*
  commentId: Overload:System.Fabric.Query.ServiceTypeList.IndexOf
  isExternal: false
  name: IndexOf
  nameWithType: ServiceTypeList.IndexOf
  fullName: System.Fabric.Query.ServiceTypeList.IndexOf
- uid: System.Collections.Generic.IList{System.Fabric.Query.ServiceType}.IndexOf(System.Fabric.Query.ServiceType)
  commentId: M:System.Collections.Generic.IList{System.Fabric.Query.ServiceType}.IndexOf(System.Fabric.Query.ServiceType)
  parent: System.Collections.Generic.IList{System.Fabric.Query.ServiceType}
  definition: System.Collections.Generic.IList`1.IndexOf(`0)
  name: IndexOf(ServiceType)
  nameWithType: IList<ServiceType>.IndexOf(ServiceType)
  fullName: System.Collections.Generic.IList<System.Fabric.Query.ServiceType>.IndexOf(System.Fabric.Query.ServiceType)
  nameWithType.vb: IList(Of ServiceType).IndexOf(ServiceType)
  fullname.vb: System.Collections.Generic.IList(Of System.Fabric.Query.ServiceType).IndexOf(System.Fabric.Query.ServiceType)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1.IndexOf(`0)
    name: IndexOf
    nameWithType: IList<ServiceType>.IndexOf
    fullName: System.Collections.Generic.IList<System.Fabric.Query.ServiceType>.IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Fabric.Query.ServiceType
    name: ServiceType
    nameWithType: ServiceType
    fullName: System.Fabric.Query.ServiceType
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IList`1.IndexOf(`0)
    name: IndexOf
    nameWithType: IList(Of ServiceType).IndexOf
    fullName: System.Collections.Generic.IList(Of System.Fabric.Query.ServiceType).IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Fabric.Query.ServiceType
    name: ServiceType
    nameWithType: ServiceType
    fullName: System.Fabric.Query.ServiceType
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Collections.Generic.IList`1.IndexOf(`0)
  commentId: M:System.Collections.Generic.IList`1.IndexOf(`0)
  isExternal: true
  name: IndexOf(T)
  nameWithType: IList<T>.IndexOf(T)
  fullName: System.Collections.Generic.IList<T>.IndexOf(T)
  nameWithType.vb: IList(Of T).IndexOf(T)
  fullname.vb: System.Collections.Generic.IList(Of T).IndexOf(T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1.IndexOf(`0)
    name: IndexOf
    nameWithType: IList<T>.IndexOf
    fullName: System.Collections.Generic.IList<T>.IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IList`1.IndexOf(`0)
    name: IndexOf
    nameWithType: IList(Of T).IndexOf
    fullName: System.Collections.Generic.IList(Of T).IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.Query.ServiceTypeList.Insert*
  commentId: Overload:System.Fabric.Query.ServiceTypeList.Insert
  isExternal: false
  name: Insert
  nameWithType: ServiceTypeList.Insert
  fullName: System.Fabric.Query.ServiceTypeList.Insert
- uid: System.Collections.Generic.IList{System.Fabric.Query.ServiceType}.Insert(System.Int32,System.Fabric.Query.ServiceType)
  commentId: M:System.Collections.Generic.IList{System.Fabric.Query.ServiceType}.Insert(System.Int32,System.Fabric.Query.ServiceType)
  parent: System.Collections.Generic.IList{System.Fabric.Query.ServiceType}
  definition: System.Collections.Generic.IList`1.Insert(System.Int32,`0)
  name: Insert(Int32, ServiceType)
  nameWithType: IList<ServiceType>.Insert(Int32, ServiceType)
  fullName: System.Collections.Generic.IList<System.Fabric.Query.ServiceType>.Insert(System.Int32, System.Fabric.Query.ServiceType)
  nameWithType.vb: IList(Of ServiceType).Insert(Int32, ServiceType)
  fullname.vb: System.Collections.Generic.IList(Of System.Fabric.Query.ServiceType).Insert(System.Int32, System.Fabric.Query.ServiceType)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1.Insert(System.Int32,`0)
    name: Insert
    nameWithType: IList<ServiceType>.Insert
    fullName: System.Collections.Generic.IList<System.Fabric.Query.ServiceType>.Insert
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Fabric.Query.ServiceType
    name: ServiceType
    nameWithType: ServiceType
    fullName: System.Fabric.Query.ServiceType
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IList`1.Insert(System.Int32,`0)
    name: Insert
    nameWithType: IList(Of ServiceType).Insert
    fullName: System.Collections.Generic.IList(Of System.Fabric.Query.ServiceType).Insert
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Fabric.Query.ServiceType
    name: ServiceType
    nameWithType: ServiceType
    fullName: System.Fabric.Query.ServiceType
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList`1.Insert(System.Int32,`0)
  commentId: M:System.Collections.Generic.IList`1.Insert(System.Int32,`0)
  isExternal: true
  name: Insert(Int32, T)
  nameWithType: IList<T>.Insert(Int32, T)
  fullName: System.Collections.Generic.IList<T>.Insert(System.Int32, T)
  nameWithType.vb: IList(Of T).Insert(Int32, T)
  fullname.vb: System.Collections.Generic.IList(Of T).Insert(System.Int32, T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1.Insert(System.Int32,`0)
    name: Insert
    nameWithType: IList<T>.Insert
    fullName: System.Collections.Generic.IList<T>.Insert
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IList`1.Insert(System.Int32,`0)
    name: Insert
    nameWithType: IList(Of T).Insert
    fullName: System.Collections.Generic.IList(Of T).Insert
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.Query.ServiceTypeList.RemoveAt*
  commentId: Overload:System.Fabric.Query.ServiceTypeList.RemoveAt
  isExternal: false
  name: RemoveAt
  nameWithType: ServiceTypeList.RemoveAt
  fullName: System.Fabric.Query.ServiceTypeList.RemoveAt
- uid: System.Collections.Generic.IList{System.Fabric.Query.ServiceType}.RemoveAt(System.Int32)
  commentId: M:System.Collections.Generic.IList{System.Fabric.Query.ServiceType}.RemoveAt(System.Int32)
  parent: System.Collections.Generic.IList{System.Fabric.Query.ServiceType}
  definition: System.Collections.Generic.IList`1.RemoveAt(System.Int32)
  name: RemoveAt(Int32)
  nameWithType: IList<ServiceType>.RemoveAt(Int32)
  fullName: System.Collections.Generic.IList<System.Fabric.Query.ServiceType>.RemoveAt(System.Int32)
  nameWithType.vb: IList(Of ServiceType).RemoveAt(Int32)
  fullname.vb: System.Collections.Generic.IList(Of System.Fabric.Query.ServiceType).RemoveAt(System.Int32)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1.RemoveAt(System.Int32)
    name: RemoveAt
    nameWithType: IList<ServiceType>.RemoveAt
    fullName: System.Collections.Generic.IList<System.Fabric.Query.ServiceType>.RemoveAt
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IList`1.RemoveAt(System.Int32)
    name: RemoveAt
    nameWithType: IList(Of ServiceType).RemoveAt
    fullName: System.Collections.Generic.IList(Of System.Fabric.Query.ServiceType).RemoveAt
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList`1.RemoveAt(System.Int32)
  commentId: M:System.Collections.Generic.IList`1.RemoveAt(System.Int32)
  isExternal: true
  name: RemoveAt(Int32)
  nameWithType: IList<T>.RemoveAt(Int32)
  fullName: System.Collections.Generic.IList<T>.RemoveAt(System.Int32)
  nameWithType.vb: IList(Of T).RemoveAt(Int32)
  fullname.vb: System.Collections.Generic.IList(Of T).RemoveAt(System.Int32)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1.RemoveAt(System.Int32)
    name: RemoveAt
    nameWithType: IList<T>.RemoveAt
    fullName: System.Collections.Generic.IList<T>.RemoveAt
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IList`1.RemoveAt(System.Int32)
    name: RemoveAt
    nameWithType: IList(Of T).RemoveAt
    fullName: System.Collections.Generic.IList(Of T).RemoveAt
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.Query.ServiceTypeList.Item*
  commentId: Overload:System.Fabric.Query.ServiceTypeList.Item
  isExternal: false
  name: Item
  nameWithType: ServiceTypeList.Item
  fullName: System.Fabric.Query.ServiceTypeList.Item
- uid: System.Collections.Generic.IList{System.Fabric.Query.ServiceType}.Item(System.Int32)
  commentId: P:System.Collections.Generic.IList{System.Fabric.Query.ServiceType}.Item(System.Int32)
  parent: System.Collections.Generic.IList{System.Fabric.Query.ServiceType}
  definition: System.Collections.Generic.IList`1.Item(System.Int32)
  name: Item[Int32]
  nameWithType: IList<ServiceType>.Item[Int32]
  fullName: System.Collections.Generic.IList<System.Fabric.Query.ServiceType>.Item[System.Int32]
  nameWithType.vb: IList(Of ServiceType).Item(Int32)
  fullname.vb: System.Collections.Generic.IList(Of System.Fabric.Query.ServiceType).Item(System.Int32)
  name.vb: Item(Int32)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1.Item(System.Int32)
    name: Item
    nameWithType: IList<ServiceType>.Item
    fullName: System.Collections.Generic.IList<System.Fabric.Query.ServiceType>.Item
    isExternal: true
  - name: '['
    nameWithType: '['
    fullName: '['
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ']'
    nameWithType: ']'
    fullName: ']'
  spec.vb:
  - uid: System.Collections.Generic.IList`1.Item(System.Int32)
    name: Item
    nameWithType: IList(Of ServiceType).Item
    fullName: System.Collections.Generic.IList(Of System.Fabric.Query.ServiceType).Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList`1.Item(System.Int32)
  commentId: P:System.Collections.Generic.IList`1.Item(System.Int32)
  isExternal: true
  name: Item[Int32]
  nameWithType: IList<T>.Item[Int32]
  fullName: System.Collections.Generic.IList<T>.Item[System.Int32]
  nameWithType.vb: IList(Of T).Item(Int32)
  fullname.vb: System.Collections.Generic.IList(Of T).Item(System.Int32)
  name.vb: Item(Int32)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1.Item(System.Int32)
    name: Item
    nameWithType: IList<T>.Item
    fullName: System.Collections.Generic.IList<T>.Item
    isExternal: true
  - name: '['
    nameWithType: '['
    fullName: '['
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ']'
    nameWithType: ']'
    fullName: ']'
  spec.vb:
  - uid: System.Collections.Generic.IList`1.Item(System.Int32)
    name: Item
    nameWithType: IList(Of T).Item
    fullName: System.Collections.Generic.IList(Of T).Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.Query.ServiceTypeList.Add*
  commentId: Overload:System.Fabric.Query.ServiceTypeList.Add
  isExternal: false
  name: Add
  nameWithType: ServiceTypeList.Add
  fullName: System.Fabric.Query.ServiceTypeList.Add
- uid: System.Collections.Generic.ICollection{System.Fabric.Query.ServiceType}.Add(System.Fabric.Query.ServiceType)
  commentId: M:System.Collections.Generic.ICollection{System.Fabric.Query.ServiceType}.Add(System.Fabric.Query.ServiceType)
  parent: System.Collections.Generic.ICollection{System.Fabric.Query.ServiceType}
  definition: System.Collections.Generic.ICollection`1.Add(`0)
  name: Add(ServiceType)
  nameWithType: ICollection<ServiceType>.Add(ServiceType)
  fullName: System.Collections.Generic.ICollection<System.Fabric.Query.ServiceType>.Add(System.Fabric.Query.ServiceType)
  nameWithType.vb: ICollection(Of ServiceType).Add(ServiceType)
  fullname.vb: System.Collections.Generic.ICollection(Of System.Fabric.Query.ServiceType).Add(System.Fabric.Query.ServiceType)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Add(`0)
    name: Add
    nameWithType: ICollection<ServiceType>.Add
    fullName: System.Collections.Generic.ICollection<System.Fabric.Query.ServiceType>.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Fabric.Query.ServiceType
    name: ServiceType
    nameWithType: ServiceType
    fullName: System.Fabric.Query.ServiceType
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Add(`0)
    name: Add
    nameWithType: ICollection(Of ServiceType).Add
    fullName: System.Collections.Generic.ICollection(Of System.Fabric.Query.ServiceType).Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Fabric.Query.ServiceType
    name: ServiceType
    nameWithType: ServiceType
    fullName: System.Fabric.Query.ServiceType
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1.Add(`0)
  commentId: M:System.Collections.Generic.ICollection`1.Add(`0)
  isExternal: true
  name: Add(T)
  nameWithType: ICollection<T>.Add(T)
  fullName: System.Collections.Generic.ICollection<T>.Add(T)
  nameWithType.vb: ICollection(Of T).Add(T)
  fullname.vb: System.Collections.Generic.ICollection(Of T).Add(T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Add(`0)
    name: Add
    nameWithType: ICollection<T>.Add
    fullName: System.Collections.Generic.ICollection<T>.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Add(`0)
    name: Add
    nameWithType: ICollection(Of T).Add
    fullName: System.Collections.Generic.ICollection(Of T).Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.Query.ServiceTypeList.Clear*
  commentId: Overload:System.Fabric.Query.ServiceTypeList.Clear
  isExternal: false
  name: Clear
  nameWithType: ServiceTypeList.Clear
  fullName: System.Fabric.Query.ServiceTypeList.Clear
- uid: System.Collections.Generic.ICollection{System.Fabric.Query.ServiceType}.Clear
  commentId: M:System.Collections.Generic.ICollection{System.Fabric.Query.ServiceType}.Clear
  parent: System.Collections.Generic.ICollection{System.Fabric.Query.ServiceType}
  definition: System.Collections.Generic.ICollection`1.Clear
  name: Clear()
  nameWithType: ICollection<ServiceType>.Clear()
  fullName: System.Collections.Generic.ICollection<System.Fabric.Query.ServiceType>.Clear()
  nameWithType.vb: ICollection(Of ServiceType).Clear()
  fullname.vb: System.Collections.Generic.ICollection(Of System.Fabric.Query.ServiceType).Clear()
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Clear
    name: Clear
    nameWithType: ICollection<ServiceType>.Clear
    fullName: System.Collections.Generic.ICollection<System.Fabric.Query.ServiceType>.Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Clear
    name: Clear
    nameWithType: ICollection(Of ServiceType).Clear
    fullName: System.Collections.Generic.ICollection(Of System.Fabric.Query.ServiceType).Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1.Clear
  commentId: M:System.Collections.Generic.ICollection`1.Clear
  isExternal: true
  name: Clear()
  nameWithType: ICollection<T>.Clear()
  fullName: System.Collections.Generic.ICollection<T>.Clear()
  nameWithType.vb: ICollection(Of T).Clear()
  fullname.vb: System.Collections.Generic.ICollection(Of T).Clear()
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Clear
    name: Clear
    nameWithType: ICollection<T>.Clear
    fullName: System.Collections.Generic.ICollection<T>.Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Clear
    name: Clear
    nameWithType: ICollection(Of T).Clear
    fullName: System.Collections.Generic.ICollection(Of T).Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.Query.ServiceTypeList.Contains*
  commentId: Overload:System.Fabric.Query.ServiceTypeList.Contains
  isExternal: false
  name: Contains
  nameWithType: ServiceTypeList.Contains
  fullName: System.Fabric.Query.ServiceTypeList.Contains
- uid: System.Collections.Generic.ICollection{System.Fabric.Query.ServiceType}.Contains(System.Fabric.Query.ServiceType)
  commentId: M:System.Collections.Generic.ICollection{System.Fabric.Query.ServiceType}.Contains(System.Fabric.Query.ServiceType)
  parent: System.Collections.Generic.ICollection{System.Fabric.Query.ServiceType}
  definition: System.Collections.Generic.ICollection`1.Contains(`0)
  name: Contains(ServiceType)
  nameWithType: ICollection<ServiceType>.Contains(ServiceType)
  fullName: System.Collections.Generic.ICollection<System.Fabric.Query.ServiceType>.Contains(System.Fabric.Query.ServiceType)
  nameWithType.vb: ICollection(Of ServiceType).Contains(ServiceType)
  fullname.vb: System.Collections.Generic.ICollection(Of System.Fabric.Query.ServiceType).Contains(System.Fabric.Query.ServiceType)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Contains(`0)
    name: Contains
    nameWithType: ICollection<ServiceType>.Contains
    fullName: System.Collections.Generic.ICollection<System.Fabric.Query.ServiceType>.Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Fabric.Query.ServiceType
    name: ServiceType
    nameWithType: ServiceType
    fullName: System.Fabric.Query.ServiceType
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Contains(`0)
    name: Contains
    nameWithType: ICollection(Of ServiceType).Contains
    fullName: System.Collections.Generic.ICollection(Of System.Fabric.Query.ServiceType).Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Fabric.Query.ServiceType
    name: ServiceType
    nameWithType: ServiceType
    fullName: System.Fabric.Query.ServiceType
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Collections.Generic.ICollection`1.Contains(`0)
  commentId: M:System.Collections.Generic.ICollection`1.Contains(`0)
  isExternal: true
  name: Contains(T)
  nameWithType: ICollection<T>.Contains(T)
  fullName: System.Collections.Generic.ICollection<T>.Contains(T)
  nameWithType.vb: ICollection(Of T).Contains(T)
  fullname.vb: System.Collections.Generic.ICollection(Of T).Contains(T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Contains(`0)
    name: Contains
    nameWithType: ICollection<T>.Contains
    fullName: System.Collections.Generic.ICollection<T>.Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Contains(`0)
    name: Contains
    nameWithType: ICollection(Of T).Contains
    fullName: System.Collections.Generic.ICollection(Of T).Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.Query.ServiceTypeList.CopyTo*
  commentId: Overload:System.Fabric.Query.ServiceTypeList.CopyTo
  isExternal: false
  name: CopyTo
  nameWithType: ServiceTypeList.CopyTo
  fullName: System.Fabric.Query.ServiceTypeList.CopyTo
- uid: System.Collections.Generic.ICollection{System.Fabric.Query.ServiceType}.CopyTo(System.Fabric.Query.ServiceType[],System.Int32)
  commentId: M:System.Collections.Generic.ICollection{System.Fabric.Query.ServiceType}.CopyTo(System.Fabric.Query.ServiceType[],System.Int32)
  parent: System.Collections.Generic.ICollection{System.Fabric.Query.ServiceType}
  definition: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
  name: CopyTo(ServiceType[], Int32)
  nameWithType: ICollection<ServiceType>.CopyTo(ServiceType[], Int32)
  fullName: System.Collections.Generic.ICollection<System.Fabric.Query.ServiceType>.CopyTo(System.Fabric.Query.ServiceType[], System.Int32)
  nameWithType.vb: ICollection(Of ServiceType).CopyTo(ServiceType(), Int32)
  fullname.vb: System.Collections.Generic.ICollection(Of System.Fabric.Query.ServiceType).CopyTo(System.Fabric.Query.ServiceType(), System.Int32)
  name.vb: CopyTo(ServiceType(), Int32)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    nameWithType: ICollection<ServiceType>.CopyTo
    fullName: System.Collections.Generic.ICollection<System.Fabric.Query.ServiceType>.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Fabric.Query.ServiceType
    name: ServiceType
    nameWithType: ServiceType
    fullName: System.Fabric.Query.ServiceType
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    nameWithType: ICollection(Of ServiceType).CopyTo
    fullName: System.Collections.Generic.ICollection(Of System.Fabric.Query.ServiceType).CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Fabric.Query.ServiceType
    name: ServiceType
    nameWithType: ServiceType
    fullName: System.Fabric.Query.ServiceType
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.Query.ServiceType[]
  name: ServiceType[]
  nameWithType: ServiceType[]
  fullName: System.Fabric.Query.ServiceType[]
  nameWithType.vb: ServiceType()
  fullname.vb: System.Fabric.Query.ServiceType()
  name.vb: ServiceType()
  spec.csharp:
  - uid: System.Fabric.Query.ServiceType
    name: ServiceType
    nameWithType: ServiceType
    fullName: System.Fabric.Query.ServiceType
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Fabric.Query.ServiceType
    name: ServiceType
    nameWithType: ServiceType
    fullName: System.Fabric.Query.ServiceType
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
  commentId: M:System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
  isExternal: true
  name: CopyTo(T[], Int32)
  nameWithType: ICollection<T>.CopyTo(T[], Int32)
  fullName: System.Collections.Generic.ICollection<T>.CopyTo(T[], System.Int32)
  nameWithType.vb: ICollection(Of T).CopyTo(T(), Int32)
  fullname.vb: System.Collections.Generic.ICollection(Of T).CopyTo(T(), System.Int32)
  name.vb: CopyTo(T(), Int32)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    nameWithType: ICollection<T>.CopyTo
    fullName: System.Collections.Generic.ICollection<T>.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    nameWithType: ICollection(Of T).CopyTo
    fullName: System.Collections.Generic.ICollection(Of T).CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.Query.ServiceTypeList.Count*
  commentId: Overload:System.Fabric.Query.ServiceTypeList.Count
  isExternal: false
  name: Count
  nameWithType: ServiceTypeList.Count
  fullName: System.Fabric.Query.ServiceTypeList.Count
- uid: System.Collections.Generic.ICollection{System.Fabric.Query.ServiceType}.Count
  commentId: P:System.Collections.Generic.ICollection{System.Fabric.Query.ServiceType}.Count
  parent: System.Collections.Generic.ICollection{System.Fabric.Query.ServiceType}
  definition: System.Collections.Generic.ICollection`1.Count
  name: Count
  nameWithType: ICollection<ServiceType>.Count
  fullName: System.Collections.Generic.ICollection<System.Fabric.Query.ServiceType>.Count
  nameWithType.vb: ICollection(Of ServiceType).Count
  fullname.vb: System.Collections.Generic.ICollection(Of System.Fabric.Query.ServiceType).Count
- uid: System.Collections.Generic.ICollection`1.Count
  commentId: P:System.Collections.Generic.ICollection`1.Count
  isExternal: true
  name: Count
  nameWithType: ICollection<T>.Count
  fullName: System.Collections.Generic.ICollection<T>.Count
  nameWithType.vb: ICollection(Of T).Count
  fullname.vb: System.Collections.Generic.ICollection(Of T).Count
- uid: System.Fabric.Query.ServiceTypeList.IsReadOnly*
  commentId: Overload:System.Fabric.Query.ServiceTypeList.IsReadOnly
  isExternal: false
  name: IsReadOnly
  nameWithType: ServiceTypeList.IsReadOnly
  fullName: System.Fabric.Query.ServiceTypeList.IsReadOnly
- uid: System.Collections.Generic.ICollection{System.Fabric.Query.ServiceType}.IsReadOnly
  commentId: P:System.Collections.Generic.ICollection{System.Fabric.Query.ServiceType}.IsReadOnly
  parent: System.Collections.Generic.ICollection{System.Fabric.Query.ServiceType}
  definition: System.Collections.Generic.ICollection`1.IsReadOnly
  name: IsReadOnly
  nameWithType: ICollection<ServiceType>.IsReadOnly
  fullName: System.Collections.Generic.ICollection<System.Fabric.Query.ServiceType>.IsReadOnly
  nameWithType.vb: ICollection(Of ServiceType).IsReadOnly
  fullname.vb: System.Collections.Generic.ICollection(Of System.Fabric.Query.ServiceType).IsReadOnly
- uid: System.Collections.Generic.ICollection`1.IsReadOnly
  commentId: P:System.Collections.Generic.ICollection`1.IsReadOnly
  isExternal: true
  name: IsReadOnly
  nameWithType: ICollection<T>.IsReadOnly
  fullName: System.Collections.Generic.ICollection<T>.IsReadOnly
  nameWithType.vb: ICollection(Of T).IsReadOnly
  fullname.vb: System.Collections.Generic.ICollection(Of T).IsReadOnly
- uid: System.Fabric.Query.ServiceTypeList.Remove*
  commentId: Overload:System.Fabric.Query.ServiceTypeList.Remove
  isExternal: false
  name: Remove
  nameWithType: ServiceTypeList.Remove
  fullName: System.Fabric.Query.ServiceTypeList.Remove
- uid: System.Collections.Generic.ICollection{System.Fabric.Query.ServiceType}.Remove(System.Fabric.Query.ServiceType)
  commentId: M:System.Collections.Generic.ICollection{System.Fabric.Query.ServiceType}.Remove(System.Fabric.Query.ServiceType)
  parent: System.Collections.Generic.ICollection{System.Fabric.Query.ServiceType}
  definition: System.Collections.Generic.ICollection`1.Remove(`0)
  name: Remove(ServiceType)
  nameWithType: ICollection<ServiceType>.Remove(ServiceType)
  fullName: System.Collections.Generic.ICollection<System.Fabric.Query.ServiceType>.Remove(System.Fabric.Query.ServiceType)
  nameWithType.vb: ICollection(Of ServiceType).Remove(ServiceType)
  fullname.vb: System.Collections.Generic.ICollection(Of System.Fabric.Query.ServiceType).Remove(System.Fabric.Query.ServiceType)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Remove(`0)
    name: Remove
    nameWithType: ICollection<ServiceType>.Remove
    fullName: System.Collections.Generic.ICollection<System.Fabric.Query.ServiceType>.Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Fabric.Query.ServiceType
    name: ServiceType
    nameWithType: ServiceType
    fullName: System.Fabric.Query.ServiceType
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Remove(`0)
    name: Remove
    nameWithType: ICollection(Of ServiceType).Remove
    fullName: System.Collections.Generic.ICollection(Of System.Fabric.Query.ServiceType).Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Fabric.Query.ServiceType
    name: ServiceType
    nameWithType: ServiceType
    fullName: System.Fabric.Query.ServiceType
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1.Remove(`0)
  commentId: M:System.Collections.Generic.ICollection`1.Remove(`0)
  isExternal: true
  name: Remove(T)
  nameWithType: ICollection<T>.Remove(T)
  fullName: System.Collections.Generic.ICollection<T>.Remove(T)
  nameWithType.vb: ICollection(Of T).Remove(T)
  fullname.vb: System.Collections.Generic.ICollection(Of T).Remove(T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Remove(`0)
    name: Remove
    nameWithType: ICollection<T>.Remove
    fullName: System.Collections.Generic.ICollection<T>.Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Remove(`0)
    name: Remove
    nameWithType: ICollection(Of T).Remove
    fullName: System.Collections.Generic.ICollection(Of T).Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.Query.ServiceTypeList.GetEnumerator*
  commentId: Overload:System.Fabric.Query.ServiceTypeList.GetEnumerator
  isExternal: false
  name: GetEnumerator
  nameWithType: ServiceTypeList.GetEnumerator
  fullName: System.Fabric.Query.ServiceTypeList.GetEnumerator
- uid: System.Collections.Generic.IEnumerable{System.Fabric.Query.ServiceType}.GetEnumerator
  commentId: M:System.Collections.Generic.IEnumerable{System.Fabric.Query.ServiceType}.GetEnumerator
  parent: System.Collections.Generic.IEnumerable{System.Fabric.Query.ServiceType}
  definition: System.Collections.Generic.IEnumerable`1.GetEnumerator
  name: GetEnumerator()
  nameWithType: IEnumerable<ServiceType>.GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<System.Fabric.Query.ServiceType>.GetEnumerator()
  nameWithType.vb: IEnumerable(Of ServiceType).GetEnumerator()
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Fabric.Query.ServiceType).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable<ServiceType>.GetEnumerator
    fullName: System.Collections.Generic.IEnumerable<System.Fabric.Query.ServiceType>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable(Of ServiceType).GetEnumerator
    fullName: System.Collections.Generic.IEnumerable(Of System.Fabric.Query.ServiceType).GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerator{System.Fabric.Query.ServiceType}
  commentId: T:System.Collections.Generic.IEnumerator{System.Fabric.Query.ServiceType}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerator`1
  name: IEnumerator<ServiceType>
  nameWithType: IEnumerator<ServiceType>
  fullName: System.Collections.Generic.IEnumerator<System.Fabric.Query.ServiceType>
  nameWithType.vb: IEnumerator(Of ServiceType)
  fullname.vb: System.Collections.Generic.IEnumerator(Of System.Fabric.Query.ServiceType)
  name.vb: IEnumerator(Of ServiceType)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Fabric.Query.ServiceType
    name: ServiceType
    nameWithType: ServiceType
    fullName: System.Fabric.Query.ServiceType
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Fabric.Query.ServiceType
    name: ServiceType
    nameWithType: ServiceType
    fullName: System.Fabric.Query.ServiceType
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
  commentId: M:System.Collections.Generic.IEnumerable`1.GetEnumerator
  isExternal: true
  name: GetEnumerator()
  nameWithType: IEnumerable<T>.GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  nameWithType.vb: IEnumerable(Of T).GetEnumerator()
  fullname.vb: System.Collections.Generic.IEnumerable(Of T).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable<T>.GetEnumerator
    fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable(Of T).GetEnumerator
    fullName: System.Collections.Generic.IEnumerable(Of T).GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerator`1
  commentId: T:System.Collections.Generic.IEnumerator`1
  isExternal: true
  name: IEnumerator<T>
  nameWithType: IEnumerator<T>
  fullName: System.Collections.Generic.IEnumerator<T>
  nameWithType.vb: IEnumerator(Of T)
  fullname.vb: System.Collections.Generic.IEnumerator(Of T)
  name.vb: IEnumerator(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.Query.ServiceTypeList.System#Collections#IEnumerable#GetEnumerator*
  commentId: Overload:System.Fabric.Query.ServiceTypeList.System#Collections#IEnumerable#GetEnumerator
  isExternal: false
  name: IEnumerable.GetEnumerator
  nameWithType: ServiceTypeList.IEnumerable.GetEnumerator
  fullName: System.Fabric.Query.ServiceTypeList.System.Collections.IEnumerable.GetEnumerator
  nameWithType.vb: ServiceTypeList.System.Collections.IEnumerable.GetEnumerator
  name.vb: System.Collections.IEnumerable.GetEnumerator
- uid: System.Collections.IEnumerable.GetEnumerator
  commentId: M:System.Collections.IEnumerable.GetEnumerator
  parent: System.Collections.IEnumerable
  isExternal: true
  name: GetEnumerator()
  nameWithType: IEnumerable.GetEnumerator()
  fullName: System.Collections.IEnumerable.GetEnumerator()
  spec.csharp:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable.GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable.GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IEnumerator
  commentId: T:System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
