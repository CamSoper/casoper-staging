### YamlMime:ManagedReference
items:
- uid: System.Fabric.IAtomicGroupStateReplicator
  commentId: T:System.Fabric.IAtomicGroupStateReplicator
  id: IAtomicGroupStateReplicator
  parent: System.Fabric
  children:
  - System.Fabric.IAtomicGroupStateReplicator.CreateAtomicGroup
  - System.Fabric.IAtomicGroupStateReplicator.ReplicateAtomicGroupCommitAsync(System.Int64,System.Threading.CancellationToken,System.Int64@)
  - System.Fabric.IAtomicGroupStateReplicator.ReplicateAtomicGroupOperationAsync(System.Int64,System.Fabric.OperationData,System.Threading.CancellationToken,System.Int64@)
  - System.Fabric.IAtomicGroupStateReplicator.ReplicateAtomicGroupRollbackAsync(System.Int64,System.Threading.CancellationToken,System.Int64@)
  langs:
  - csharp
  - vb
  name: IAtomicGroupStateReplicator
  nameWithType: IAtomicGroupStateReplicator
  fullName: System.Fabric.IAtomicGroupStateReplicator
  type: Interface
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/IAtomicGroupStateReplicator.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: IAtomicGroupStateReplicator
    path: src/prod/src/managed/Api/src/System/Fabric/IAtomicGroupStateReplicator.cs
    startLine: 15
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Exposes replication-related functions for atomic groups. </p>\n"
  remarks: "\n<p>The <xref href=\"System.Fabric.IAtomicGroupStateReplicator\" data-throw-if-not-resolved=\"false\"></xref> is available if the service is a member of a service group. The service must implement <xref href=\"System.Fabric.IAtomicGroupStateProvider\" data-throw-if-not-resolved=\"false\"></xref> and be stateful. When creating a <xref href=\"System.Fabric.FabricReplicator\" data-throw-if-not-resolved=\"false\"></xref> via <xref href=\"System.Fabric.IStatefulServicePartition.CreateReplicator(System.Fabric.IStateProvider%2cSystem.Fabric.ReplicatorSettings)\" data-throw-if-not-resolved=\"false\"></xref>, instead of passing in a regular <xref href=\"System.Fabric.IStateProvider\" data-throw-if-not-resolved=\"false\"></xref>, the service can pass in the <xref href=\"System.Fabric.IAtomicGroupStateProvider\" data-throw-if-not-resolved=\"false\"></xref> that it implements instead. As a result, it receives a <xref href=\"System.Fabric.IAtomicGroupStateReplicator\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example: []
  syntax:
    content: public interface IAtomicGroupStateReplicator
    content.vb: Public Interface IAtomicGroupStateReplicator
  extensionMethods:
  - System.Fabric.IAtomicGroupStateReplicator.System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: System.Fabric.IAtomicGroupStateReplicator.CreateAtomicGroup
  commentId: M:System.Fabric.IAtomicGroupStateReplicator.CreateAtomicGroup
  id: CreateAtomicGroup
  parent: System.Fabric.IAtomicGroupStateReplicator
  langs:
  - csharp
  - vb
  name: CreateAtomicGroup()
  nameWithType: IAtomicGroupStateReplicator.CreateAtomicGroup()
  fullName: System.Fabric.IAtomicGroupStateReplicator.CreateAtomicGroup()
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/IAtomicGroupStateReplicator.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: CreateAtomicGroup
    path: src/prod/src/managed/Api/src/System/Fabric/IAtomicGroupStateReplicator.cs
    startLine: 26
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Creates a new atomic group and obtains the ID of the atomic group.</p>\n"
  remarks: "\n<p>Atomic groups are used to coordinate a set of changes across the members of a service group.</p>\n"
  example: []
  syntax:
    content: long CreateAtomicGroup()
    content.vb: Function CreateAtomicGroup As Long
    return:
      type: System.Int64
      description: "\n<p>Returns <xref href=\"System.Int64\" data-throw-if-not-resolved=\"false\"></xref> the ID of the created atomic group.</p>\n"
  overload: System.Fabric.IAtomicGroupStateReplicator.CreateAtomicGroup*
- uid: System.Fabric.IAtomicGroupStateReplicator.ReplicateAtomicGroupOperationAsync(System.Int64,System.Fabric.OperationData,System.Threading.CancellationToken,System.Int64@)
  commentId: M:System.Fabric.IAtomicGroupStateReplicator.ReplicateAtomicGroupOperationAsync(System.Int64,System.Fabric.OperationData,System.Threading.CancellationToken,System.Int64@)
  id: ReplicateAtomicGroupOperationAsync(System.Int64,System.Fabric.OperationData,System.Threading.CancellationToken,System.Int64@)
  parent: System.Fabric.IAtomicGroupStateReplicator
  langs:
  - csharp
  - vb
  name: ReplicateAtomicGroupOperationAsync(Int64, OperationData, CancellationToken, out Int64)
  nameWithType: IAtomicGroupStateReplicator.ReplicateAtomicGroupOperationAsync(Int64, OperationData, CancellationToken, out Int64)
  fullName: System.Fabric.IAtomicGroupStateReplicator.ReplicateAtomicGroupOperationAsync(System.Int64, System.Fabric.OperationData, System.Threading.CancellationToken, out System.Int64)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/IAtomicGroupStateReplicator.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: ReplicateAtomicGroupOperationAsync
    path: src/prod/src/managed/Api/src/System/Fabric/IAtomicGroupStateReplicator.cs
    startLine: 46
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Replicates some <xref href=\"System.Fabric.OperationData\" data-throw-if-not-resolved=\"false\"></xref> as a part of an atomic group.</p>\n"
  example: []
  syntax:
    content: Task<long> ReplicateAtomicGroupOperationAsync(long atomicGroupId, OperationData operationData, CancellationToken cancellationToken, out long sequenceNumber)
    content.vb: Function ReplicateAtomicGroupOperationAsync(atomicGroupId As Long, operationData As OperationData, cancellationToken As CancellationToken, ByRef sequenceNumber As Long) As Task(Of Long)
    parameters:
    - id: atomicGroupId
      type: System.Int64
      description: "\n<p>The ID of the atomic group that is obtained from <xref href=\"System.Fabric.IAtomicGroupStateReplicator.CreateAtomicGroup\" data-throw-if-not-resolved=\"false\"></xref> and includes the <xref href=\"System.Fabric.OperationData\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    - id: operationData
      type: System.Fabric.OperationData
      description: "\n<p>An <xref href=\"System.Fabric.OperationData\" data-throw-if-not-resolved=\"false\"></xref> to be replicated.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The CancellationToken object that the operation is observing. It can be used to send a notification that the operation should be canceled. Note that cancellation is advisory and that the operation might still be completed even if it is canceled.</p>\n"
    - id: sequenceNumber
      type: System.Int64
      description: "\n<p>The LSN of the operation, as an out parameter.</p>\n"
    return:
      type: System.Threading.Tasks.Task{System.Int64}
      description: "\n<p>Returns <xref href=\"System.Threading.Tasks.Task%601\" data-throw-if-not-resolved=\"false\"></xref> of type long, the LSN of the replicated atomic group operation.</p>\n"
  overload: System.Fabric.IAtomicGroupStateReplicator.ReplicateAtomicGroupOperationAsync*
  nameWithType.vb: IAtomicGroupStateReplicator.ReplicateAtomicGroupOperationAsync(Int64, OperationData, CancellationToken, ByRef Int64)
  fullName.vb: System.Fabric.IAtomicGroupStateReplicator.ReplicateAtomicGroupOperationAsync(System.Int64, System.Fabric.OperationData, System.Threading.CancellationToken, ByRef System.Int64)
  name.vb: ReplicateAtomicGroupOperationAsync(Int64, OperationData, CancellationToken, ByRef Int64)
- uid: System.Fabric.IAtomicGroupStateReplicator.ReplicateAtomicGroupCommitAsync(System.Int64,System.Threading.CancellationToken,System.Int64@)
  commentId: M:System.Fabric.IAtomicGroupStateReplicator.ReplicateAtomicGroupCommitAsync(System.Int64,System.Threading.CancellationToken,System.Int64@)
  id: ReplicateAtomicGroupCommitAsync(System.Int64,System.Threading.CancellationToken,System.Int64@)
  parent: System.Fabric.IAtomicGroupStateReplicator
  langs:
  - csharp
  - vb
  name: ReplicateAtomicGroupCommitAsync(Int64, CancellationToken, out Int64)
  nameWithType: IAtomicGroupStateReplicator.ReplicateAtomicGroupCommitAsync(Int64, CancellationToken, out Int64)
  fullName: System.Fabric.IAtomicGroupStateReplicator.ReplicateAtomicGroupCommitAsync(System.Int64, System.Threading.CancellationToken, out System.Int64)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/IAtomicGroupStateReplicator.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: ReplicateAtomicGroupCommitAsync
    path: src/prod/src/managed/Api/src/System/Fabric/IAtomicGroupStateReplicator.cs
    startLine: 63
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Asynchronously commits state replication for the atomic group.</p>\n"
  example: []
  syntax:
    content: Task<long> ReplicateAtomicGroupCommitAsync(long atomicGroupId, CancellationToken cancellationToken, out long commitSequenceNumber)
    content.vb: Function ReplicateAtomicGroupCommitAsync(atomicGroupId As Long, cancellationToken As CancellationToken, ByRef commitSequenceNumber As Long) As Task(Of Long)
    parameters:
    - id: atomicGroupId
      type: System.Int64
      description: "\n<p>The ID of the group to be committed.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> object that the operation is observing. It can be used to send a notification that the operation should be canceled. Note that cancellation is advisory and that the operation might still be completed even if it is canceled.</p>\n"
    - id: commitSequenceNumber
      type: System.Int64
      description: "\n<p>The LSN of the commit operation, as an out parameter.</p>\n"
    return:
      type: System.Threading.Tasks.Task{System.Int64}
      description: "\n<p>Returns <xref href=\"System.Threading.Tasks.Task%601\" data-throw-if-not-resolved=\"false\"></xref> of type long, the LSN of the commit operation.</p>\n"
  overload: System.Fabric.IAtomicGroupStateReplicator.ReplicateAtomicGroupCommitAsync*
  nameWithType.vb: IAtomicGroupStateReplicator.ReplicateAtomicGroupCommitAsync(Int64, CancellationToken, ByRef Int64)
  fullName.vb: System.Fabric.IAtomicGroupStateReplicator.ReplicateAtomicGroupCommitAsync(System.Int64, System.Threading.CancellationToken, ByRef System.Int64)
  name.vb: ReplicateAtomicGroupCommitAsync(Int64, CancellationToken, ByRef Int64)
- uid: System.Fabric.IAtomicGroupStateReplicator.ReplicateAtomicGroupRollbackAsync(System.Int64,System.Threading.CancellationToken,System.Int64@)
  commentId: M:System.Fabric.IAtomicGroupStateReplicator.ReplicateAtomicGroupRollbackAsync(System.Int64,System.Threading.CancellationToken,System.Int64@)
  id: ReplicateAtomicGroupRollbackAsync(System.Int64,System.Threading.CancellationToken,System.Int64@)
  parent: System.Fabric.IAtomicGroupStateReplicator
  langs:
  - csharp
  - vb
  name: ReplicateAtomicGroupRollbackAsync(Int64, CancellationToken, out Int64)
  nameWithType: IAtomicGroupStateReplicator.ReplicateAtomicGroupRollbackAsync(Int64, CancellationToken, out Int64)
  fullName: System.Fabric.IAtomicGroupStateReplicator.ReplicateAtomicGroupRollbackAsync(System.Int64, System.Threading.CancellationToken, out System.Int64)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/IAtomicGroupStateReplicator.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: ReplicateAtomicGroupRollbackAsync
    path: src/prod/src/managed/Api/src/System/Fabric/IAtomicGroupStateReplicator.cs
    startLine: 80
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Asynchronously rolls-back state replication for the atomic group.</p>\n"
  example: []
  syntax:
    content: Task<long> ReplicateAtomicGroupRollbackAsync(long atomicGroupId, CancellationToken cancellationToken, out long rollbackSequenceNumber)
    content.vb: Function ReplicateAtomicGroupRollbackAsync(atomicGroupId As Long, cancellationToken As CancellationToken, ByRef rollbackSequenceNumber As Long) As Task(Of Long)
    parameters:
    - id: atomicGroupId
      type: System.Int64
      description: "\n<p>The ID of the atomic group to roll back.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> object that the operation is observing. It can be used to send a notification that the operation should be canceled. Note that cancellation is advisory and that the operation might still be completed even if it is canceled.</p>\n"
    - id: rollbackSequenceNumber
      type: System.Int64
      description: "\n<p>The LSN of the rollback operation, as an out parameter.</p>\n"
    return:
      type: System.Threading.Tasks.Task{System.Int64}
      description: "\n<p>Returns <xref href=\"System.Threading.Tasks.Task%601\" data-throw-if-not-resolved=\"false\"></xref> of type long, the LSN of the rollback operation.</p>\n"
  overload: System.Fabric.IAtomicGroupStateReplicator.ReplicateAtomicGroupRollbackAsync*
  nameWithType.vb: IAtomicGroupStateReplicator.ReplicateAtomicGroupRollbackAsync(Int64, CancellationToken, ByRef Int64)
  fullName.vb: System.Fabric.IAtomicGroupStateReplicator.ReplicateAtomicGroupRollbackAsync(System.Int64, System.Threading.CancellationToken, ByRef System.Int64)
  name.vb: ReplicateAtomicGroupRollbackAsync(Int64, CancellationToken, ByRef Int64)
references:
- uid: System.Fabric.IAtomicGroupStateReplicator
  commentId: T:System.Fabric.IAtomicGroupStateReplicator
  isExternal: false
  name: IAtomicGroupStateReplicator
  nameWithType: IAtomicGroupStateReplicator
  fullName: System.Fabric.IAtomicGroupStateReplicator
- uid: System.Fabric.IAtomicGroupStateProvider
  commentId: T:System.Fabric.IAtomicGroupStateProvider
  isExternal: false
  name: IAtomicGroupStateProvider
  nameWithType: IAtomicGroupStateProvider
  fullName: System.Fabric.IAtomicGroupStateProvider
- uid: System.Fabric.FabricReplicator
  commentId: T:System.Fabric.FabricReplicator
  parent: System.Fabric
  isExternal: false
  name: FabricReplicator
  nameWithType: FabricReplicator
  fullName: System.Fabric.FabricReplicator
- uid: System.Fabric.IStatefulServicePartition.CreateReplicator(System.Fabric.IStateProvider,System.Fabric.ReplicatorSettings)
  commentId: M:System.Fabric.IStatefulServicePartition.CreateReplicator(System.Fabric.IStateProvider,System.Fabric.ReplicatorSettings)
- uid: System.Fabric.IStateProvider
  commentId: T:System.Fabric.IStateProvider
  parent: System.Fabric
  isExternal: false
  name: IStateProvider
  nameWithType: IStateProvider
  fullName: System.Fabric.IStateProvider
- uid: System.Fabric
  commentId: N:System.Fabric
  isExternal: false
  name: System.Fabric
  nameWithType: System.Fabric
  fullName: System.Fabric
- uid: System.Fabric.IAtomicGroupStateReplicator.System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
  commentId: M:System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  parent: System.Fabric.Messaging.Stream.ByteArraySerializer
  definition: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  name: Serialize<IAtomicGroupStateReplicator>()
  nameWithType: ByteArraySerializer.Serialize<IAtomicGroupStateReplicator>()
  fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<System.Fabric.IAtomicGroupStateReplicator>()
  nameWithType.vb: ByteArraySerializer.Serialize(Of IAtomicGroupStateReplicator)()
  fullname.vb: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of System.Fabric.IAtomicGroupStateReplicator)()
  name.vb: Serialize(Of IAtomicGroupStateReplicator)()
  spec.csharp:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
    name: Serialize<IAtomicGroupStateReplicator>
    nameWithType: ByteArraySerializer.Serialize<IAtomicGroupStateReplicator>
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<System.Fabric.IAtomicGroupStateReplicator>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
    name: Serialize(Of IAtomicGroupStateReplicator)
    nameWithType: ByteArraySerializer.Serialize(Of IAtomicGroupStateReplicator)
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of System.Fabric.IAtomicGroupStateReplicator)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  commentId: M:System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  isExternal: false
  name: Serialize<T>(T)
  nameWithType: ByteArraySerializer.Serialize<T>(T)
  fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<T>(T)
  nameWithType.vb: ByteArraySerializer.Serialize(Of T)(T)
  fullname.vb: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of T)(T)
  name.vb: Serialize(Of T)(T)
  spec.csharp:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
    name: Serialize<T>
    nameWithType: ByteArraySerializer.Serialize<T>
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
    name: Serialize(Of T)
    nameWithType: ByteArraySerializer.Serialize(Of T)
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.Messaging.Stream.ByteArraySerializer
  commentId: T:System.Fabric.Messaging.Stream.ByteArraySerializer
  parent: System.Fabric.Messaging.Stream
  isExternal: false
  name: ByteArraySerializer
  nameWithType: ByteArraySerializer
  fullName: System.Fabric.Messaging.Stream.ByteArraySerializer
- uid: System.Fabric.Messaging.Stream
  commentId: N:System.Fabric.Messaging.Stream
  isExternal: false
  name: System.Fabric.Messaging.Stream
  nameWithType: System.Fabric.Messaging.Stream
  fullName: System.Fabric.Messaging.Stream
- uid: System.Int64
  commentId: T:System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.Fabric.IAtomicGroupStateReplicator.CreateAtomicGroup*
  commentId: Overload:System.Fabric.IAtomicGroupStateReplicator.CreateAtomicGroup
  isExternal: false
  name: CreateAtomicGroup
  nameWithType: IAtomicGroupStateReplicator.CreateAtomicGroup
  fullName: System.Fabric.IAtomicGroupStateReplicator.CreateAtomicGroup
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Fabric.OperationData
  commentId: T:System.Fabric.OperationData
  parent: System.Fabric
  isExternal: false
  name: OperationData
  nameWithType: OperationData
  fullName: System.Fabric.OperationData
- uid: System.Fabric.IAtomicGroupStateReplicator.CreateAtomicGroup
  commentId: M:System.Fabric.IAtomicGroupStateReplicator.CreateAtomicGroup
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullname.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.IAtomicGroupStateReplicator.ReplicateAtomicGroupOperationAsync*
  commentId: Overload:System.Fabric.IAtomicGroupStateReplicator.ReplicateAtomicGroupOperationAsync
  isExternal: false
  name: ReplicateAtomicGroupOperationAsync
  nameWithType: IAtomicGroupStateReplicator.ReplicateAtomicGroupOperationAsync
  fullName: System.Fabric.IAtomicGroupStateReplicator.ReplicateAtomicGroupOperationAsync
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task{System.Int64}
  commentId: T:System.Threading.Tasks.Task{System.Int64}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Int64>
  nameWithType: Task<Int64>
  fullName: System.Threading.Tasks.Task<System.Int64>
  nameWithType.vb: Task(Of Int64)
  fullname.vb: System.Threading.Tasks.Task(Of System.Int64)
  name.vb: Task(Of Int64)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: false
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: System.Fabric.IAtomicGroupStateReplicator.ReplicateAtomicGroupCommitAsync*
  commentId: Overload:System.Fabric.IAtomicGroupStateReplicator.ReplicateAtomicGroupCommitAsync
  isExternal: false
  name: ReplicateAtomicGroupCommitAsync
  nameWithType: IAtomicGroupStateReplicator.ReplicateAtomicGroupCommitAsync
  fullName: System.Fabric.IAtomicGroupStateReplicator.ReplicateAtomicGroupCommitAsync
- uid: System.Fabric.IAtomicGroupStateReplicator.ReplicateAtomicGroupRollbackAsync*
  commentId: Overload:System.Fabric.IAtomicGroupStateReplicator.ReplicateAtomicGroupRollbackAsync
  isExternal: false
  name: ReplicateAtomicGroupRollbackAsync
  nameWithType: IAtomicGroupStateReplicator.ReplicateAtomicGroupRollbackAsync
  fullName: System.Fabric.IAtomicGroupStateReplicator.ReplicateAtomicGroupRollbackAsync
