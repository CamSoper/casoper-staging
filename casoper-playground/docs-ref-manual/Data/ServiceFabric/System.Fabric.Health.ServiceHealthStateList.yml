### YamlMime:ManagedReference
items:
- uid: System.Fabric.Health.ServiceHealthStateList
  commentId: T:System.Fabric.Health.ServiceHealthStateList
  id: ServiceHealthStateList
  parent: System.Fabric.Health
  children:
  - System.Fabric.Health.ServiceHealthStateList.Add(System.Fabric.Health.ServiceHealthState)
  - System.Fabric.Health.ServiceHealthStateList.Clear
  - System.Fabric.Health.ServiceHealthStateList.Contains(System.Fabric.Health.ServiceHealthState)
  - System.Fabric.Health.ServiceHealthStateList.CopyTo(System.Fabric.Health.ServiceHealthState[],System.Int32)
  - System.Fabric.Health.ServiceHealthStateList.Count
  - System.Fabric.Health.ServiceHealthStateList.GetEnumerator
  - System.Fabric.Health.ServiceHealthStateList.IndexOf(System.Fabric.Health.ServiceHealthState)
  - System.Fabric.Health.ServiceHealthStateList.Insert(System.Int32,System.Fabric.Health.ServiceHealthState)
  - System.Fabric.Health.ServiceHealthStateList.IsReadOnly
  - System.Fabric.Health.ServiceHealthStateList.Item(System.Int32)
  - System.Fabric.Health.ServiceHealthStateList.Remove(System.Fabric.Health.ServiceHealthState)
  - System.Fabric.Health.ServiceHealthStateList.RemoveAt(System.Int32)
  - System.Fabric.Health.ServiceHealthStateList.System#Collections#IEnumerable#GetEnumerator
  langs:
  - csharp
  - vb
  name: ServiceHealthStateList
  nameWithType: ServiceHealthStateList
  fullName: System.Fabric.Health.ServiceHealthStateList
  type: Class
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/Health/ServiceHealthStateList.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: ServiceHealthStateList
    path: src/prod/src/managed/Api/src/System/Fabric/Health/ServiceHealthStateList.cs
    startLine: 12
  assemblies:
  - System.Fabric
  namespace: System.Fabric.Health
  summary: "\n<p>Represents a collection of <xref href=\"System.Fabric.Health.ServiceHealthState\" data-throw-if-not-resolved=\"false\"></xref> that can be individually accessed by index.</p>\n"
  example: []
  syntax:
    content: 'public sealed class ServiceHealthStateList : IList<ServiceHealthState>, ICollection<ServiceHealthState>, IEnumerable<ServiceHealthState>, IEnumerable'
    content.vb: >-
      Public NotInheritable Class ServiceHealthStateList
          Implements IList(Of ServiceHealthState), ICollection(Of ServiceHealthState), IEnumerable(Of ServiceHealthState), IEnumerable
  inheritance:
  - System.Object
  implements:
  - System.Collections.Generic.IList{System.Fabric.Health.ServiceHealthState}
  - System.Collections.Generic.ICollection{System.Fabric.Health.ServiceHealthState}
  - System.Collections.Generic.IEnumerable{System.Fabric.Health.ServiceHealthState}
  - System.Collections.IEnumerable
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  extensionMethods:
  - System.Fabric.Health.ServiceHealthStateList.System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: System.Fabric.Health.ServiceHealthStateList.IndexOf(System.Fabric.Health.ServiceHealthState)
  commentId: M:System.Fabric.Health.ServiceHealthStateList.IndexOf(System.Fabric.Health.ServiceHealthState)
  id: IndexOf(System.Fabric.Health.ServiceHealthState)
  parent: System.Fabric.Health.ServiceHealthStateList
  langs:
  - csharp
  - vb
  name: IndexOf(ServiceHealthState)
  nameWithType: ServiceHealthStateList.IndexOf(ServiceHealthState)
  fullName: System.Fabric.Health.ServiceHealthStateList.IndexOf(System.Fabric.Health.ServiceHealthState)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/Health/ServiceHealthStateList.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: IndexOf
    path: src/prod/src/managed/Api/src/System/Fabric/Health/ServiceHealthStateList.cs
    startLine: 35
  assemblies:
  - System.Fabric
  namespace: System.Fabric.Health
  summary: "\n<p>Determines the index of a specific item in the collection.</p>\n"
  example: []
  syntax:
    content: public int IndexOf(ServiceHealthState item)
    content.vb: Public Function IndexOf(item As ServiceHealthState) As Integer
    parameters:
    - id: item
      type: System.Fabric.Health.ServiceHealthState
      description: "\n<p>The item to locate in the collection.</p>\n"
    return:
      type: System.Int32
      description: "\n<p>The index of the item if found in the collection; -1 otherwise.</p>\n"
  overload: System.Fabric.Health.ServiceHealthStateList.IndexOf*
  implements:
  - System.Collections.Generic.IList{System.Fabric.Health.ServiceHealthState}.IndexOf(System.Fabric.Health.ServiceHealthState)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.Health.ServiceHealthStateList.Insert(System.Int32,System.Fabric.Health.ServiceHealthState)
  commentId: M:System.Fabric.Health.ServiceHealthStateList.Insert(System.Int32,System.Fabric.Health.ServiceHealthState)
  id: Insert(System.Int32,System.Fabric.Health.ServiceHealthState)
  parent: System.Fabric.Health.ServiceHealthStateList
  langs:
  - csharp
  - vb
  name: Insert(Int32, ServiceHealthState)
  nameWithType: ServiceHealthStateList.Insert(Int32, ServiceHealthState)
  fullName: System.Fabric.Health.ServiceHealthStateList.Insert(System.Int32, System.Fabric.Health.ServiceHealthState)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/Health/ServiceHealthStateList.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: Insert
    path: src/prod/src/managed/Api/src/System/Fabric/Health/ServiceHealthStateList.cs
    startLine: 49
  assemblies:
  - System.Fabric
  namespace: System.Fabric.Health
  summary: "\n<p>Inserts an item at the specified index.</p>\n"
  example: []
  syntax:
    content: public void Insert(int index, ServiceHealthState item)
    content.vb: Public Sub Insert(index As Integer, item As ServiceHealthState)
    parameters:
    - id: index
      type: System.Int32
      description: "\n<p>The zero-based index at which value should be inserted.</p>\n"
    - id: item
      type: System.Fabric.Health.ServiceHealthState
      description: "\n<p>The item to be inserted.</p>\n"
  overload: System.Fabric.Health.ServiceHealthStateList.Insert*
  implements:
  - System.Collections.Generic.IList{System.Fabric.Health.ServiceHealthState}.Insert(System.Int32,System.Fabric.Health.ServiceHealthState)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.Health.ServiceHealthStateList.RemoveAt(System.Int32)
  commentId: M:System.Fabric.Health.ServiceHealthStateList.RemoveAt(System.Int32)
  id: RemoveAt(System.Int32)
  parent: System.Fabric.Health.ServiceHealthStateList
  langs:
  - csharp
  - vb
  name: RemoveAt(Int32)
  nameWithType: ServiceHealthStateList.RemoveAt(Int32)
  fullName: System.Fabric.Health.ServiceHealthStateList.RemoveAt(System.Int32)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/Health/ServiceHealthStateList.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: RemoveAt
    path: src/prod/src/managed/Api/src/System/Fabric/Health/ServiceHealthStateList.cs
    startLine: 60
  assemblies:
  - System.Fabric
  namespace: System.Fabric.Health
  summary: "\n<p>Removes the item at the specified index.</p>\n"
  example: []
  syntax:
    content: public void RemoveAt(int index)
    content.vb: Public Sub RemoveAt(index As Integer)
    parameters:
    - id: index
      type: System.Int32
      description: "\n<p>The zero-based index of the item to remove.</p>\n"
  overload: System.Fabric.Health.ServiceHealthStateList.RemoveAt*
  implements:
  - System.Collections.Generic.IList{System.Fabric.Health.ServiceHealthState}.RemoveAt(System.Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.Health.ServiceHealthStateList.Item(System.Int32)
  commentId: P:System.Fabric.Health.ServiceHealthStateList.Item(System.Int32)
  id: Item(System.Int32)
  parent: System.Fabric.Health.ServiceHealthStateList
  langs:
  - csharp
  - vb
  name: Item[Int32]
  nameWithType: ServiceHealthStateList.Item[Int32]
  fullName: System.Fabric.Health.ServiceHealthStateList.Item[System.Int32]
  type: Property
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/Health/ServiceHealthStateList.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: this[]
    path: src/prod/src/managed/Api/src/System/Fabric/Health/ServiceHealthStateList.cs
    startLine: 74
  assemblies:
  - System.Fabric
  namespace: System.Fabric.Health
  summary: "\n<p>Gets or sets the element at the specified index.</p>\n"
  example: []
  syntax:
    content: public ServiceHealthState this[int index] { get; set; }
    content.vb: Public Property Item(index As Integer) As ServiceHealthState
    parameters:
    - id: index
      type: System.Int32
      description: "\n<p>The zero-based index of the element to get or set.</p>\n"
    return:
      type: System.Fabric.Health.ServiceHealthState
      description: "\n<p>Returns <xref href=\"System.Fabric.Health.ServiceHealthState\" data-throw-if-not-resolved=\"false\"></xref> at the specified index.</p>\n"
  overload: System.Fabric.Health.ServiceHealthStateList.Item*
  implements:
  - System.Collections.Generic.IList{System.Fabric.Health.ServiceHealthState}.Item(System.Int32)
  nameWithType.vb: ServiceHealthStateList.Item(Int32)
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: System.Fabric.Health.ServiceHealthStateList.Item(System.Int32)
  name.vb: Item(Int32)
- uid: System.Fabric.Health.ServiceHealthStateList.Add(System.Fabric.Health.ServiceHealthState)
  commentId: M:System.Fabric.Health.ServiceHealthStateList.Add(System.Fabric.Health.ServiceHealthState)
  id: Add(System.Fabric.Health.ServiceHealthState)
  parent: System.Fabric.Health.ServiceHealthStateList
  langs:
  - csharp
  - vb
  name: Add(ServiceHealthState)
  nameWithType: ServiceHealthStateList.Add(ServiceHealthState)
  fullName: System.Fabric.Health.ServiceHealthStateList.Add(System.Fabric.Health.ServiceHealthState)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/Health/ServiceHealthStateList.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: Add
    path: src/prod/src/managed/Api/src/System/Fabric/Health/ServiceHealthStateList.cs
    startLine: 92
  assemblies:
  - System.Fabric
  namespace: System.Fabric.Health
  summary: "\n<p>Adds an item to the collection.</p>\n"
  example: []
  syntax:
    content: public void Add(ServiceHealthState item)
    content.vb: Public Sub Add(item As ServiceHealthState)
    parameters:
    - id: item
      type: System.Fabric.Health.ServiceHealthState
      description: "\n<p>The item to add.</p>\n"
  overload: System.Fabric.Health.ServiceHealthStateList.Add*
  implements:
  - System.Collections.Generic.ICollection{System.Fabric.Health.ServiceHealthState}.Add(System.Fabric.Health.ServiceHealthState)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.Health.ServiceHealthStateList.Clear
  commentId: M:System.Fabric.Health.ServiceHealthStateList.Clear
  id: Clear
  parent: System.Fabric.Health.ServiceHealthStateList
  langs:
  - csharp
  - vb
  name: Clear()
  nameWithType: ServiceHealthStateList.Clear()
  fullName: System.Fabric.Health.ServiceHealthStateList.Clear()
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/Health/ServiceHealthStateList.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: Clear
    path: src/prod/src/managed/Api/src/System/Fabric/Health/ServiceHealthStateList.cs
    startLine: 100
  assemblies:
  - System.Fabric
  namespace: System.Fabric.Health
  summary: "\n<p>Removes all items from the collection.</p>\n"
  example: []
  syntax:
    content: public void Clear()
    content.vb: Public Sub Clear
  overload: System.Fabric.Health.ServiceHealthStateList.Clear*
  implements:
  - System.Collections.Generic.ICollection{System.Fabric.Health.ServiceHealthState}.Clear
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.Health.ServiceHealthStateList.Contains(System.Fabric.Health.ServiceHealthState)
  commentId: M:System.Fabric.Health.ServiceHealthStateList.Contains(System.Fabric.Health.ServiceHealthState)
  id: Contains(System.Fabric.Health.ServiceHealthState)
  parent: System.Fabric.Health.ServiceHealthStateList
  langs:
  - csharp
  - vb
  name: Contains(ServiceHealthState)
  nameWithType: ServiceHealthStateList.Contains(ServiceHealthState)
  fullName: System.Fabric.Health.ServiceHealthStateList.Contains(System.Fabric.Health.ServiceHealthState)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/Health/ServiceHealthStateList.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: Contains
    path: src/prod/src/managed/Api/src/System/Fabric/Health/ServiceHealthStateList.cs
    startLine: 114
  assemblies:
  - System.Fabric
  namespace: System.Fabric.Health
  summary: "\n<p>Determines whether the collection contains a specific value.</p>\n"
  example: []
  syntax:
    content: public bool Contains(ServiceHealthState item)
    content.vb: Public Function Contains(item As ServiceHealthState) As Boolean
    parameters:
    - id: item
      type: System.Fabric.Health.ServiceHealthState
      description: "\n<p>The item to locate in the collection.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>Returns <strong>true</strong> if the item is found; <strong>false</strong> otherwise.</p>\n"
  overload: System.Fabric.Health.ServiceHealthStateList.Contains*
  implements:
  - System.Collections.Generic.ICollection{System.Fabric.Health.ServiceHealthState}.Contains(System.Fabric.Health.ServiceHealthState)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.Health.ServiceHealthStateList.CopyTo(System.Fabric.Health.ServiceHealthState[],System.Int32)
  commentId: M:System.Fabric.Health.ServiceHealthStateList.CopyTo(System.Fabric.Health.ServiceHealthState[],System.Int32)
  id: CopyTo(System.Fabric.Health.ServiceHealthState[],System.Int32)
  parent: System.Fabric.Health.ServiceHealthStateList
  langs:
  - csharp
  - vb
  name: CopyTo(ServiceHealthState[], Int32)
  nameWithType: ServiceHealthStateList.CopyTo(ServiceHealthState[], Int32)
  fullName: System.Fabric.Health.ServiceHealthStateList.CopyTo(System.Fabric.Health.ServiceHealthState[], System.Int32)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/Health/ServiceHealthStateList.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: CopyTo
    path: src/prod/src/managed/Api/src/System/Fabric/Health/ServiceHealthStateList.cs
    startLine: 128
  assemblies:
  - System.Fabric
  namespace: System.Fabric.Health
  summary: "\n<p>Copies the elements of the ICollection to an Array, starting at a particular Array index.</p>\n"
  example: []
  syntax:
    content: public void CopyTo(ServiceHealthState[] array, int arrayIndex)
    content.vb: Public Sub CopyTo(array As ServiceHealthState(), arrayIndex As Integer)
    parameters:
    - id: array
      type: System.Fabric.Health.ServiceHealthState[]
      description: "\n<p>The one-dimensional Array that is the destination of the elements copied from ICollection. The Array must have zero-based indexing.</p>\n"
    - id: arrayIndex
      type: System.Int32
      description: "\n<p>The zero-based index in array at which copying begins.</p>\n"
  overload: System.Fabric.Health.ServiceHealthStateList.CopyTo*
  implements:
  - System.Collections.Generic.ICollection{System.Fabric.Health.ServiceHealthState}.CopyTo(System.Fabric.Health.ServiceHealthState[],System.Int32)
  nameWithType.vb: ServiceHealthStateList.CopyTo(ServiceHealthState(), Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Fabric.Health.ServiceHealthStateList.CopyTo(System.Fabric.Health.ServiceHealthState(), System.Int32)
  name.vb: CopyTo(ServiceHealthState(), Int32)
- uid: System.Fabric.Health.ServiceHealthStateList.Count
  commentId: P:System.Fabric.Health.ServiceHealthStateList.Count
  id: Count
  parent: System.Fabric.Health.ServiceHealthStateList
  langs:
  - csharp
  - vb
  name: Count
  nameWithType: ServiceHealthStateList.Count
  fullName: System.Fabric.Health.ServiceHealthStateList.Count
  type: Property
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/Health/ServiceHealthStateList.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: Count
    path: src/prod/src/managed/Api/src/System/Fabric/Health/ServiceHealthStateList.cs
    startLine: 139
  assemblies:
  - System.Fabric
  namespace: System.Fabric.Health
  summary: "\n<p>Gets the number of elements.</p>\n"
  example: []
  syntax:
    content: public int Count { get; }
    content.vb: Public ReadOnly Property Count As Integer
    parameters: []
    return:
      type: System.Int32
      description: "\n<p>The number of elements.</p>\n"
  overload: System.Fabric.Health.ServiceHealthStateList.Count*
  implements:
  - System.Collections.Generic.ICollection{System.Fabric.Health.ServiceHealthState}.Count
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Fabric.Health.ServiceHealthStateList.IsReadOnly
  commentId: P:System.Fabric.Health.ServiceHealthStateList.IsReadOnly
  id: IsReadOnly
  parent: System.Fabric.Health.ServiceHealthStateList
  langs:
  - csharp
  - vb
  name: IsReadOnly
  nameWithType: ServiceHealthStateList.IsReadOnly
  fullName: System.Fabric.Health.ServiceHealthStateList.IsReadOnly
  type: Property
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/Health/ServiceHealthStateList.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: IsReadOnly
    path: src/prod/src/managed/Api/src/System/Fabric/Health/ServiceHealthStateList.cs
    startLine: 151
  assemblies:
  - System.Fabric
  namespace: System.Fabric.Health
  summary: "\n<p>Gets a value indicating whether the list is read-only.</p>\n"
  example: []
  syntax:
    content: public bool IsReadOnly { get; }
    content.vb: Public ReadOnly Property IsReadOnly As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the list is read-only; otherwise, <strong>false</strong>.</p>\n"
  overload: System.Fabric.Health.ServiceHealthStateList.IsReadOnly*
  implements:
  - System.Collections.Generic.ICollection{System.Fabric.Health.ServiceHealthState}.IsReadOnly
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Fabric.Health.ServiceHealthStateList.Remove(System.Fabric.Health.ServiceHealthState)
  commentId: M:System.Fabric.Health.ServiceHealthStateList.Remove(System.Fabric.Health.ServiceHealthState)
  id: Remove(System.Fabric.Health.ServiceHealthState)
  parent: System.Fabric.Health.ServiceHealthStateList
  langs:
  - csharp
  - vb
  name: Remove(ServiceHealthState)
  nameWithType: ServiceHealthStateList.Remove(ServiceHealthState)
  fullName: System.Fabric.Health.ServiceHealthStateList.Remove(System.Fabric.Health.ServiceHealthState)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/Health/ServiceHealthStateList.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: Remove
    path: src/prod/src/managed/Api/src/System/Fabric/Health/ServiceHealthStateList.cs
    startLine: 165
  assemblies:
  - System.Fabric
  namespace: System.Fabric.Health
  summary: "\n<p>Removes the first occurrence of a specific item from the collection.</p>\n"
  example: []
  syntax:
    content: public bool Remove(ServiceHealthState item)
    content.vb: Public Function Remove(item As ServiceHealthState) As Boolean
    parameters:
    - id: item
      type: System.Fabric.Health.ServiceHealthState
      description: "\n<p>The item to be removed.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>Returns <strong>true</strong> if the item was removed; <strong>false</strong> otherwise.</p>\n"
  overload: System.Fabric.Health.ServiceHealthStateList.Remove*
  implements:
  - System.Collections.Generic.ICollection{System.Fabric.Health.ServiceHealthState}.Remove(System.Fabric.Health.ServiceHealthState)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.Health.ServiceHealthStateList.GetEnumerator
  commentId: M:System.Fabric.Health.ServiceHealthStateList.GetEnumerator
  id: GetEnumerator
  parent: System.Fabric.Health.ServiceHealthStateList
  langs:
  - csharp
  - vb
  name: GetEnumerator()
  nameWithType: ServiceHealthStateList.GetEnumerator()
  fullName: System.Fabric.Health.ServiceHealthStateList.GetEnumerator()
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/Health/ServiceHealthStateList.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: GetEnumerator
    path: src/prod/src/managed/Api/src/System/Fabric/Health/ServiceHealthStateList.cs
    startLine: 176
  assemblies:
  - System.Fabric
  namespace: System.Fabric.Health
  summary: "\n<p>Returns an enumerator that iterates through a collection.</p>\n"
  example: []
  syntax:
    content: public IEnumerator<ServiceHealthState> GetEnumerator()
    content.vb: Public Function GetEnumerator As IEnumerator(Of ServiceHealthState)
    return:
      type: System.Collections.Generic.IEnumerator{System.Fabric.Health.ServiceHealthState}
      description: "\n<p>Returns <xref href=\"System.Collections.Generic.IEnumerator%601\" data-throw-if-not-resolved=\"false\"></xref> object that can be used to iterate through the collection.</p>\n"
  overload: System.Fabric.Health.ServiceHealthStateList.GetEnumerator*
  implements:
  - System.Collections.Generic.IEnumerable{System.Fabric.Health.ServiceHealthState}.GetEnumerator
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.Health.ServiceHealthStateList.System#Collections#IEnumerable#GetEnumerator
  commentId: M:System.Fabric.Health.ServiceHealthStateList.System#Collections#IEnumerable#GetEnumerator
  id: System#Collections#IEnumerable#GetEnumerator
  isEii: true
  parent: System.Fabric.Health.ServiceHealthStateList
  langs:
  - csharp
  - vb
  name: IEnumerable.GetEnumerator()
  nameWithType: ServiceHealthStateList.IEnumerable.GetEnumerator()
  fullName: System.Fabric.Health.ServiceHealthStateList.System.Collections.IEnumerable.GetEnumerator()
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/Health/ServiceHealthStateList.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: System.Collections.IEnumerable.GetEnumerator
    path: src/prod/src/managed/Api/src/System/Fabric/Health/ServiceHealthStateList.cs
    startLine: 187
  assemblies:
  - System.Fabric
  namespace: System.Fabric.Health
  summary: "\n<p>Returns an enumerator that iterates through a collection.</p>\n"
  example: []
  syntax:
    content: IEnumerator IEnumerable.GetEnumerator()
    content.vb: Function System.Collections.IEnumerable.GetEnumerator As IEnumerator Implements IEnumerable.GetEnumerator
    return:
      type: System.Collections.IEnumerator
      description: "\n<p>Returns <xref href=\"System.Collections.IEnumerator\" data-throw-if-not-resolved=\"false\"></xref> object that can be used to iterate through the collection.</p>\n"
  overload: System.Fabric.Health.ServiceHealthStateList.System#Collections#IEnumerable#GetEnumerator*
  implements:
  - System.Collections.IEnumerable.GetEnumerator
  nameWithType.vb: ServiceHealthStateList.System.Collections.IEnumerable.GetEnumerator()
  name.vb: System.Collections.IEnumerable.GetEnumerator()
references:
- uid: System.Fabric.Health.ServiceHealthState
  commentId: T:System.Fabric.Health.ServiceHealthState
  parent: System.Fabric.Health
  isExternal: false
  name: ServiceHealthState
  nameWithType: ServiceHealthState
  fullName: System.Fabric.Health.ServiceHealthState
- uid: System.Fabric.Health
  commentId: N:System.Fabric.Health
  isExternal: false
  name: System.Fabric.Health
  nameWithType: System.Fabric.Health
  fullName: System.Fabric.Health
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Collections.Generic.IList{System.Fabric.Health.ServiceHealthState}
  commentId: T:System.Collections.Generic.IList{System.Fabric.Health.ServiceHealthState}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<ServiceHealthState>
  nameWithType: IList<ServiceHealthState>
  fullName: System.Collections.Generic.IList<System.Fabric.Health.ServiceHealthState>
  nameWithType.vb: IList(Of ServiceHealthState)
  fullname.vb: System.Collections.Generic.IList(Of System.Fabric.Health.ServiceHealthState)
  name.vb: IList(Of ServiceHealthState)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Fabric.Health.ServiceHealthState
    name: ServiceHealthState
    nameWithType: ServiceHealthState
    fullName: System.Fabric.Health.ServiceHealthState
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Fabric.Health.ServiceHealthState
    name: ServiceHealthState
    nameWithType: ServiceHealthState
    fullName: System.Fabric.Health.ServiceHealthState
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection{System.Fabric.Health.ServiceHealthState}
  commentId: T:System.Collections.Generic.ICollection{System.Fabric.Health.ServiceHealthState}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ICollection`1
  name: ICollection<ServiceHealthState>
  nameWithType: ICollection<ServiceHealthState>
  fullName: System.Collections.Generic.ICollection<System.Fabric.Health.ServiceHealthState>
  nameWithType.vb: ICollection(Of ServiceHealthState)
  fullname.vb: System.Collections.Generic.ICollection(Of System.Fabric.Health.ServiceHealthState)
  name.vb: ICollection(Of ServiceHealthState)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Fabric.Health.ServiceHealthState
    name: ServiceHealthState
    nameWithType: ServiceHealthState
    fullName: System.Fabric.Health.ServiceHealthState
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Fabric.Health.ServiceHealthState
    name: ServiceHealthState
    nameWithType: ServiceHealthState
    fullName: System.Fabric.Health.ServiceHealthState
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{System.Fabric.Health.ServiceHealthState}
  commentId: T:System.Collections.Generic.IEnumerable{System.Fabric.Health.ServiceHealthState}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<ServiceHealthState>
  nameWithType: IEnumerable<ServiceHealthState>
  fullName: System.Collections.Generic.IEnumerable<System.Fabric.Health.ServiceHealthState>
  nameWithType.vb: IEnumerable(Of ServiceHealthState)
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Fabric.Health.ServiceHealthState)
  name.vb: IEnumerable(Of ServiceHealthState)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Fabric.Health.ServiceHealthState
    name: ServiceHealthState
    nameWithType: ServiceHealthState
    fullName: System.Fabric.Health.ServiceHealthState
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Fabric.Health.ServiceHealthState
    name: ServiceHealthState
    nameWithType: ServiceHealthState
    fullName: System.Fabric.Health.ServiceHealthState
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IEnumerable
  commentId: T:System.Collections.IEnumerable
  parent: System.Collections
  isExternal: true
  name: IEnumerable
  nameWithType: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.Health.ServiceHealthStateList.System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
  commentId: M:System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  parent: System.Fabric.Messaging.Stream.ByteArraySerializer
  definition: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  name: Serialize<ServiceHealthStateList>()
  nameWithType: ByteArraySerializer.Serialize<ServiceHealthStateList>()
  fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<System.Fabric.Health.ServiceHealthStateList>()
  nameWithType.vb: ByteArraySerializer.Serialize(Of ServiceHealthStateList)()
  fullname.vb: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of System.Fabric.Health.ServiceHealthStateList)()
  name.vb: Serialize(Of ServiceHealthStateList)()
  spec.csharp:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
    name: Serialize<ServiceHealthStateList>
    nameWithType: ByteArraySerializer.Serialize<ServiceHealthStateList>
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<System.Fabric.Health.ServiceHealthStateList>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
    name: Serialize(Of ServiceHealthStateList)
    nameWithType: ByteArraySerializer.Serialize(Of ServiceHealthStateList)
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of System.Fabric.Health.ServiceHealthStateList)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Collections.Generic.IList`1
  commentId: T:System.Collections.Generic.IList`1
  isExternal: true
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullname.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Collections.Generic.ICollection`1
  commentId: T:System.Collections.Generic.ICollection`1
  isExternal: true
  name: ICollection<T>
  nameWithType: ICollection<T>
  fullName: System.Collections.Generic.ICollection<T>
  nameWithType.vb: ICollection(Of T)
  fullname.vb: System.Collections.Generic.ICollection(Of T)
  name.vb: ICollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullname.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections
  commentId: N:System.Collections
  isExternal: false
  name: System.Collections
  nameWithType: System.Collections
  fullName: System.Collections
- uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  commentId: M:System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  isExternal: false
  name: Serialize<T>(T)
  nameWithType: ByteArraySerializer.Serialize<T>(T)
  fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<T>(T)
  nameWithType.vb: ByteArraySerializer.Serialize(Of T)(T)
  fullname.vb: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of T)(T)
  name.vb: Serialize(Of T)(T)
  spec.csharp:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
    name: Serialize<T>
    nameWithType: ByteArraySerializer.Serialize<T>
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
    name: Serialize(Of T)
    nameWithType: ByteArraySerializer.Serialize(Of T)
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.Messaging.Stream.ByteArraySerializer
  commentId: T:System.Fabric.Messaging.Stream.ByteArraySerializer
  parent: System.Fabric.Messaging.Stream
  isExternal: false
  name: ByteArraySerializer
  nameWithType: ByteArraySerializer
  fullName: System.Fabric.Messaging.Stream.ByteArraySerializer
- uid: System.Fabric.Messaging.Stream
  commentId: N:System.Fabric.Messaging.Stream
  isExternal: false
  name: System.Fabric.Messaging.Stream
  nameWithType: System.Fabric.Messaging.Stream
  fullName: System.Fabric.Messaging.Stream
- uid: System.Fabric.Health.ServiceHealthStateList.IndexOf*
  commentId: Overload:System.Fabric.Health.ServiceHealthStateList.IndexOf
  isExternal: false
  name: IndexOf
  nameWithType: ServiceHealthStateList.IndexOf
  fullName: System.Fabric.Health.ServiceHealthStateList.IndexOf
- uid: System.Collections.Generic.IList{System.Fabric.Health.ServiceHealthState}.IndexOf(System.Fabric.Health.ServiceHealthState)
  commentId: M:System.Collections.Generic.IList{System.Fabric.Health.ServiceHealthState}.IndexOf(System.Fabric.Health.ServiceHealthState)
  parent: System.Collections.Generic.IList{System.Fabric.Health.ServiceHealthState}
  definition: System.Collections.Generic.IList`1.IndexOf(`0)
  name: IndexOf(ServiceHealthState)
  nameWithType: IList<ServiceHealthState>.IndexOf(ServiceHealthState)
  fullName: System.Collections.Generic.IList<System.Fabric.Health.ServiceHealthState>.IndexOf(System.Fabric.Health.ServiceHealthState)
  nameWithType.vb: IList(Of ServiceHealthState).IndexOf(ServiceHealthState)
  fullname.vb: System.Collections.Generic.IList(Of System.Fabric.Health.ServiceHealthState).IndexOf(System.Fabric.Health.ServiceHealthState)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1.IndexOf(`0)
    name: IndexOf
    nameWithType: IList<ServiceHealthState>.IndexOf
    fullName: System.Collections.Generic.IList<System.Fabric.Health.ServiceHealthState>.IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Fabric.Health.ServiceHealthState
    name: ServiceHealthState
    nameWithType: ServiceHealthState
    fullName: System.Fabric.Health.ServiceHealthState
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IList`1.IndexOf(`0)
    name: IndexOf
    nameWithType: IList(Of ServiceHealthState).IndexOf
    fullName: System.Collections.Generic.IList(Of System.Fabric.Health.ServiceHealthState).IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Fabric.Health.ServiceHealthState
    name: ServiceHealthState
    nameWithType: ServiceHealthState
    fullName: System.Fabric.Health.ServiceHealthState
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Collections.Generic.IList`1.IndexOf(`0)
  commentId: M:System.Collections.Generic.IList`1.IndexOf(`0)
  isExternal: true
  name: IndexOf(T)
  nameWithType: IList<T>.IndexOf(T)
  fullName: System.Collections.Generic.IList<T>.IndexOf(T)
  nameWithType.vb: IList(Of T).IndexOf(T)
  fullname.vb: System.Collections.Generic.IList(Of T).IndexOf(T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1.IndexOf(`0)
    name: IndexOf
    nameWithType: IList<T>.IndexOf
    fullName: System.Collections.Generic.IList<T>.IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IList`1.IndexOf(`0)
    name: IndexOf
    nameWithType: IList(Of T).IndexOf
    fullName: System.Collections.Generic.IList(Of T).IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.Health.ServiceHealthStateList.Insert*
  commentId: Overload:System.Fabric.Health.ServiceHealthStateList.Insert
  isExternal: false
  name: Insert
  nameWithType: ServiceHealthStateList.Insert
  fullName: System.Fabric.Health.ServiceHealthStateList.Insert
- uid: System.Collections.Generic.IList{System.Fabric.Health.ServiceHealthState}.Insert(System.Int32,System.Fabric.Health.ServiceHealthState)
  commentId: M:System.Collections.Generic.IList{System.Fabric.Health.ServiceHealthState}.Insert(System.Int32,System.Fabric.Health.ServiceHealthState)
  parent: System.Collections.Generic.IList{System.Fabric.Health.ServiceHealthState}
  definition: System.Collections.Generic.IList`1.Insert(System.Int32,`0)
  name: Insert(Int32, ServiceHealthState)
  nameWithType: IList<ServiceHealthState>.Insert(Int32, ServiceHealthState)
  fullName: System.Collections.Generic.IList<System.Fabric.Health.ServiceHealthState>.Insert(System.Int32, System.Fabric.Health.ServiceHealthState)
  nameWithType.vb: IList(Of ServiceHealthState).Insert(Int32, ServiceHealthState)
  fullname.vb: System.Collections.Generic.IList(Of System.Fabric.Health.ServiceHealthState).Insert(System.Int32, System.Fabric.Health.ServiceHealthState)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1.Insert(System.Int32,`0)
    name: Insert
    nameWithType: IList<ServiceHealthState>.Insert
    fullName: System.Collections.Generic.IList<System.Fabric.Health.ServiceHealthState>.Insert
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Fabric.Health.ServiceHealthState
    name: ServiceHealthState
    nameWithType: ServiceHealthState
    fullName: System.Fabric.Health.ServiceHealthState
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IList`1.Insert(System.Int32,`0)
    name: Insert
    nameWithType: IList(Of ServiceHealthState).Insert
    fullName: System.Collections.Generic.IList(Of System.Fabric.Health.ServiceHealthState).Insert
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Fabric.Health.ServiceHealthState
    name: ServiceHealthState
    nameWithType: ServiceHealthState
    fullName: System.Fabric.Health.ServiceHealthState
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList`1.Insert(System.Int32,`0)
  commentId: M:System.Collections.Generic.IList`1.Insert(System.Int32,`0)
  isExternal: true
  name: Insert(Int32, T)
  nameWithType: IList<T>.Insert(Int32, T)
  fullName: System.Collections.Generic.IList<T>.Insert(System.Int32, T)
  nameWithType.vb: IList(Of T).Insert(Int32, T)
  fullname.vb: System.Collections.Generic.IList(Of T).Insert(System.Int32, T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1.Insert(System.Int32,`0)
    name: Insert
    nameWithType: IList<T>.Insert
    fullName: System.Collections.Generic.IList<T>.Insert
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IList`1.Insert(System.Int32,`0)
    name: Insert
    nameWithType: IList(Of T).Insert
    fullName: System.Collections.Generic.IList(Of T).Insert
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.Health.ServiceHealthStateList.RemoveAt*
  commentId: Overload:System.Fabric.Health.ServiceHealthStateList.RemoveAt
  isExternal: false
  name: RemoveAt
  nameWithType: ServiceHealthStateList.RemoveAt
  fullName: System.Fabric.Health.ServiceHealthStateList.RemoveAt
- uid: System.Collections.Generic.IList{System.Fabric.Health.ServiceHealthState}.RemoveAt(System.Int32)
  commentId: M:System.Collections.Generic.IList{System.Fabric.Health.ServiceHealthState}.RemoveAt(System.Int32)
  parent: System.Collections.Generic.IList{System.Fabric.Health.ServiceHealthState}
  definition: System.Collections.Generic.IList`1.RemoveAt(System.Int32)
  name: RemoveAt(Int32)
  nameWithType: IList<ServiceHealthState>.RemoveAt(Int32)
  fullName: System.Collections.Generic.IList<System.Fabric.Health.ServiceHealthState>.RemoveAt(System.Int32)
  nameWithType.vb: IList(Of ServiceHealthState).RemoveAt(Int32)
  fullname.vb: System.Collections.Generic.IList(Of System.Fabric.Health.ServiceHealthState).RemoveAt(System.Int32)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1.RemoveAt(System.Int32)
    name: RemoveAt
    nameWithType: IList<ServiceHealthState>.RemoveAt
    fullName: System.Collections.Generic.IList<System.Fabric.Health.ServiceHealthState>.RemoveAt
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IList`1.RemoveAt(System.Int32)
    name: RemoveAt
    nameWithType: IList(Of ServiceHealthState).RemoveAt
    fullName: System.Collections.Generic.IList(Of System.Fabric.Health.ServiceHealthState).RemoveAt
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList`1.RemoveAt(System.Int32)
  commentId: M:System.Collections.Generic.IList`1.RemoveAt(System.Int32)
  isExternal: true
  name: RemoveAt(Int32)
  nameWithType: IList<T>.RemoveAt(Int32)
  fullName: System.Collections.Generic.IList<T>.RemoveAt(System.Int32)
  nameWithType.vb: IList(Of T).RemoveAt(Int32)
  fullname.vb: System.Collections.Generic.IList(Of T).RemoveAt(System.Int32)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1.RemoveAt(System.Int32)
    name: RemoveAt
    nameWithType: IList<T>.RemoveAt
    fullName: System.Collections.Generic.IList<T>.RemoveAt
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IList`1.RemoveAt(System.Int32)
    name: RemoveAt
    nameWithType: IList(Of T).RemoveAt
    fullName: System.Collections.Generic.IList(Of T).RemoveAt
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.Health.ServiceHealthStateList.Item*
  commentId: Overload:System.Fabric.Health.ServiceHealthStateList.Item
  isExternal: false
  name: Item
  nameWithType: ServiceHealthStateList.Item
  fullName: System.Fabric.Health.ServiceHealthStateList.Item
- uid: System.Collections.Generic.IList{System.Fabric.Health.ServiceHealthState}.Item(System.Int32)
  commentId: P:System.Collections.Generic.IList{System.Fabric.Health.ServiceHealthState}.Item(System.Int32)
  parent: System.Collections.Generic.IList{System.Fabric.Health.ServiceHealthState}
  definition: System.Collections.Generic.IList`1.Item(System.Int32)
  name: Item[Int32]
  nameWithType: IList<ServiceHealthState>.Item[Int32]
  fullName: System.Collections.Generic.IList<System.Fabric.Health.ServiceHealthState>.Item[System.Int32]
  nameWithType.vb: IList(Of ServiceHealthState).Item(Int32)
  fullname.vb: System.Collections.Generic.IList(Of System.Fabric.Health.ServiceHealthState).Item(System.Int32)
  name.vb: Item(Int32)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1.Item(System.Int32)
    name: Item
    nameWithType: IList<ServiceHealthState>.Item
    fullName: System.Collections.Generic.IList<System.Fabric.Health.ServiceHealthState>.Item
    isExternal: true
  - name: '['
    nameWithType: '['
    fullName: '['
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ']'
    nameWithType: ']'
    fullName: ']'
  spec.vb:
  - uid: System.Collections.Generic.IList`1.Item(System.Int32)
    name: Item
    nameWithType: IList(Of ServiceHealthState).Item
    fullName: System.Collections.Generic.IList(Of System.Fabric.Health.ServiceHealthState).Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList`1.Item(System.Int32)
  commentId: P:System.Collections.Generic.IList`1.Item(System.Int32)
  isExternal: true
  name: Item[Int32]
  nameWithType: IList<T>.Item[Int32]
  fullName: System.Collections.Generic.IList<T>.Item[System.Int32]
  nameWithType.vb: IList(Of T).Item(Int32)
  fullname.vb: System.Collections.Generic.IList(Of T).Item(System.Int32)
  name.vb: Item(Int32)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1.Item(System.Int32)
    name: Item
    nameWithType: IList<T>.Item
    fullName: System.Collections.Generic.IList<T>.Item
    isExternal: true
  - name: '['
    nameWithType: '['
    fullName: '['
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ']'
    nameWithType: ']'
    fullName: ']'
  spec.vb:
  - uid: System.Collections.Generic.IList`1.Item(System.Int32)
    name: Item
    nameWithType: IList(Of T).Item
    fullName: System.Collections.Generic.IList(Of T).Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.Health.ServiceHealthStateList.Add*
  commentId: Overload:System.Fabric.Health.ServiceHealthStateList.Add
  isExternal: false
  name: Add
  nameWithType: ServiceHealthStateList.Add
  fullName: System.Fabric.Health.ServiceHealthStateList.Add
- uid: System.Collections.Generic.ICollection{System.Fabric.Health.ServiceHealthState}.Add(System.Fabric.Health.ServiceHealthState)
  commentId: M:System.Collections.Generic.ICollection{System.Fabric.Health.ServiceHealthState}.Add(System.Fabric.Health.ServiceHealthState)
  parent: System.Collections.Generic.ICollection{System.Fabric.Health.ServiceHealthState}
  definition: System.Collections.Generic.ICollection`1.Add(`0)
  name: Add(ServiceHealthState)
  nameWithType: ICollection<ServiceHealthState>.Add(ServiceHealthState)
  fullName: System.Collections.Generic.ICollection<System.Fabric.Health.ServiceHealthState>.Add(System.Fabric.Health.ServiceHealthState)
  nameWithType.vb: ICollection(Of ServiceHealthState).Add(ServiceHealthState)
  fullname.vb: System.Collections.Generic.ICollection(Of System.Fabric.Health.ServiceHealthState).Add(System.Fabric.Health.ServiceHealthState)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Add(`0)
    name: Add
    nameWithType: ICollection<ServiceHealthState>.Add
    fullName: System.Collections.Generic.ICollection<System.Fabric.Health.ServiceHealthState>.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Fabric.Health.ServiceHealthState
    name: ServiceHealthState
    nameWithType: ServiceHealthState
    fullName: System.Fabric.Health.ServiceHealthState
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Add(`0)
    name: Add
    nameWithType: ICollection(Of ServiceHealthState).Add
    fullName: System.Collections.Generic.ICollection(Of System.Fabric.Health.ServiceHealthState).Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Fabric.Health.ServiceHealthState
    name: ServiceHealthState
    nameWithType: ServiceHealthState
    fullName: System.Fabric.Health.ServiceHealthState
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1.Add(`0)
  commentId: M:System.Collections.Generic.ICollection`1.Add(`0)
  isExternal: true
  name: Add(T)
  nameWithType: ICollection<T>.Add(T)
  fullName: System.Collections.Generic.ICollection<T>.Add(T)
  nameWithType.vb: ICollection(Of T).Add(T)
  fullname.vb: System.Collections.Generic.ICollection(Of T).Add(T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Add(`0)
    name: Add
    nameWithType: ICollection<T>.Add
    fullName: System.Collections.Generic.ICollection<T>.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Add(`0)
    name: Add
    nameWithType: ICollection(Of T).Add
    fullName: System.Collections.Generic.ICollection(Of T).Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.Health.ServiceHealthStateList.Clear*
  commentId: Overload:System.Fabric.Health.ServiceHealthStateList.Clear
  isExternal: false
  name: Clear
  nameWithType: ServiceHealthStateList.Clear
  fullName: System.Fabric.Health.ServiceHealthStateList.Clear
- uid: System.Collections.Generic.ICollection{System.Fabric.Health.ServiceHealthState}.Clear
  commentId: M:System.Collections.Generic.ICollection{System.Fabric.Health.ServiceHealthState}.Clear
  parent: System.Collections.Generic.ICollection{System.Fabric.Health.ServiceHealthState}
  definition: System.Collections.Generic.ICollection`1.Clear
  name: Clear()
  nameWithType: ICollection<ServiceHealthState>.Clear()
  fullName: System.Collections.Generic.ICollection<System.Fabric.Health.ServiceHealthState>.Clear()
  nameWithType.vb: ICollection(Of ServiceHealthState).Clear()
  fullname.vb: System.Collections.Generic.ICollection(Of System.Fabric.Health.ServiceHealthState).Clear()
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Clear
    name: Clear
    nameWithType: ICollection<ServiceHealthState>.Clear
    fullName: System.Collections.Generic.ICollection<System.Fabric.Health.ServiceHealthState>.Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Clear
    name: Clear
    nameWithType: ICollection(Of ServiceHealthState).Clear
    fullName: System.Collections.Generic.ICollection(Of System.Fabric.Health.ServiceHealthState).Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1.Clear
  commentId: M:System.Collections.Generic.ICollection`1.Clear
  isExternal: true
  name: Clear()
  nameWithType: ICollection<T>.Clear()
  fullName: System.Collections.Generic.ICollection<T>.Clear()
  nameWithType.vb: ICollection(Of T).Clear()
  fullname.vb: System.Collections.Generic.ICollection(Of T).Clear()
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Clear
    name: Clear
    nameWithType: ICollection<T>.Clear
    fullName: System.Collections.Generic.ICollection<T>.Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Clear
    name: Clear
    nameWithType: ICollection(Of T).Clear
    fullName: System.Collections.Generic.ICollection(Of T).Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.Health.ServiceHealthStateList.Contains*
  commentId: Overload:System.Fabric.Health.ServiceHealthStateList.Contains
  isExternal: false
  name: Contains
  nameWithType: ServiceHealthStateList.Contains
  fullName: System.Fabric.Health.ServiceHealthStateList.Contains
- uid: System.Collections.Generic.ICollection{System.Fabric.Health.ServiceHealthState}.Contains(System.Fabric.Health.ServiceHealthState)
  commentId: M:System.Collections.Generic.ICollection{System.Fabric.Health.ServiceHealthState}.Contains(System.Fabric.Health.ServiceHealthState)
  parent: System.Collections.Generic.ICollection{System.Fabric.Health.ServiceHealthState}
  definition: System.Collections.Generic.ICollection`1.Contains(`0)
  name: Contains(ServiceHealthState)
  nameWithType: ICollection<ServiceHealthState>.Contains(ServiceHealthState)
  fullName: System.Collections.Generic.ICollection<System.Fabric.Health.ServiceHealthState>.Contains(System.Fabric.Health.ServiceHealthState)
  nameWithType.vb: ICollection(Of ServiceHealthState).Contains(ServiceHealthState)
  fullname.vb: System.Collections.Generic.ICollection(Of System.Fabric.Health.ServiceHealthState).Contains(System.Fabric.Health.ServiceHealthState)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Contains(`0)
    name: Contains
    nameWithType: ICollection<ServiceHealthState>.Contains
    fullName: System.Collections.Generic.ICollection<System.Fabric.Health.ServiceHealthState>.Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Fabric.Health.ServiceHealthState
    name: ServiceHealthState
    nameWithType: ServiceHealthState
    fullName: System.Fabric.Health.ServiceHealthState
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Contains(`0)
    name: Contains
    nameWithType: ICollection(Of ServiceHealthState).Contains
    fullName: System.Collections.Generic.ICollection(Of System.Fabric.Health.ServiceHealthState).Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Fabric.Health.ServiceHealthState
    name: ServiceHealthState
    nameWithType: ServiceHealthState
    fullName: System.Fabric.Health.ServiceHealthState
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Collections.Generic.ICollection`1.Contains(`0)
  commentId: M:System.Collections.Generic.ICollection`1.Contains(`0)
  isExternal: true
  name: Contains(T)
  nameWithType: ICollection<T>.Contains(T)
  fullName: System.Collections.Generic.ICollection<T>.Contains(T)
  nameWithType.vb: ICollection(Of T).Contains(T)
  fullname.vb: System.Collections.Generic.ICollection(Of T).Contains(T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Contains(`0)
    name: Contains
    nameWithType: ICollection<T>.Contains
    fullName: System.Collections.Generic.ICollection<T>.Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Contains(`0)
    name: Contains
    nameWithType: ICollection(Of T).Contains
    fullName: System.Collections.Generic.ICollection(Of T).Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.Health.ServiceHealthStateList.CopyTo*
  commentId: Overload:System.Fabric.Health.ServiceHealthStateList.CopyTo
  isExternal: false
  name: CopyTo
  nameWithType: ServiceHealthStateList.CopyTo
  fullName: System.Fabric.Health.ServiceHealthStateList.CopyTo
- uid: System.Collections.Generic.ICollection{System.Fabric.Health.ServiceHealthState}.CopyTo(System.Fabric.Health.ServiceHealthState[],System.Int32)
  commentId: M:System.Collections.Generic.ICollection{System.Fabric.Health.ServiceHealthState}.CopyTo(System.Fabric.Health.ServiceHealthState[],System.Int32)
  parent: System.Collections.Generic.ICollection{System.Fabric.Health.ServiceHealthState}
  definition: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
  name: CopyTo(ServiceHealthState[], Int32)
  nameWithType: ICollection<ServiceHealthState>.CopyTo(ServiceHealthState[], Int32)
  fullName: System.Collections.Generic.ICollection<System.Fabric.Health.ServiceHealthState>.CopyTo(System.Fabric.Health.ServiceHealthState[], System.Int32)
  nameWithType.vb: ICollection(Of ServiceHealthState).CopyTo(ServiceHealthState(), Int32)
  fullname.vb: System.Collections.Generic.ICollection(Of System.Fabric.Health.ServiceHealthState).CopyTo(System.Fabric.Health.ServiceHealthState(), System.Int32)
  name.vb: CopyTo(ServiceHealthState(), Int32)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    nameWithType: ICollection<ServiceHealthState>.CopyTo
    fullName: System.Collections.Generic.ICollection<System.Fabric.Health.ServiceHealthState>.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Fabric.Health.ServiceHealthState
    name: ServiceHealthState
    nameWithType: ServiceHealthState
    fullName: System.Fabric.Health.ServiceHealthState
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    nameWithType: ICollection(Of ServiceHealthState).CopyTo
    fullName: System.Collections.Generic.ICollection(Of System.Fabric.Health.ServiceHealthState).CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Fabric.Health.ServiceHealthState
    name: ServiceHealthState
    nameWithType: ServiceHealthState
    fullName: System.Fabric.Health.ServiceHealthState
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.Health.ServiceHealthState[]
  name: ServiceHealthState[]
  nameWithType: ServiceHealthState[]
  fullName: System.Fabric.Health.ServiceHealthState[]
  nameWithType.vb: ServiceHealthState()
  fullname.vb: System.Fabric.Health.ServiceHealthState()
  name.vb: ServiceHealthState()
  spec.csharp:
  - uid: System.Fabric.Health.ServiceHealthState
    name: ServiceHealthState
    nameWithType: ServiceHealthState
    fullName: System.Fabric.Health.ServiceHealthState
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Fabric.Health.ServiceHealthState
    name: ServiceHealthState
    nameWithType: ServiceHealthState
    fullName: System.Fabric.Health.ServiceHealthState
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
  commentId: M:System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
  isExternal: true
  name: CopyTo(T[], Int32)
  nameWithType: ICollection<T>.CopyTo(T[], Int32)
  fullName: System.Collections.Generic.ICollection<T>.CopyTo(T[], System.Int32)
  nameWithType.vb: ICollection(Of T).CopyTo(T(), Int32)
  fullname.vb: System.Collections.Generic.ICollection(Of T).CopyTo(T(), System.Int32)
  name.vb: CopyTo(T(), Int32)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    nameWithType: ICollection<T>.CopyTo
    fullName: System.Collections.Generic.ICollection<T>.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    nameWithType: ICollection(Of T).CopyTo
    fullName: System.Collections.Generic.ICollection(Of T).CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.Health.ServiceHealthStateList.Count*
  commentId: Overload:System.Fabric.Health.ServiceHealthStateList.Count
  isExternal: false
  name: Count
  nameWithType: ServiceHealthStateList.Count
  fullName: System.Fabric.Health.ServiceHealthStateList.Count
- uid: System.Collections.Generic.ICollection{System.Fabric.Health.ServiceHealthState}.Count
  commentId: P:System.Collections.Generic.ICollection{System.Fabric.Health.ServiceHealthState}.Count
  parent: System.Collections.Generic.ICollection{System.Fabric.Health.ServiceHealthState}
  definition: System.Collections.Generic.ICollection`1.Count
  name: Count
  nameWithType: ICollection<ServiceHealthState>.Count
  fullName: System.Collections.Generic.ICollection<System.Fabric.Health.ServiceHealthState>.Count
  nameWithType.vb: ICollection(Of ServiceHealthState).Count
  fullname.vb: System.Collections.Generic.ICollection(Of System.Fabric.Health.ServiceHealthState).Count
- uid: System.Collections.Generic.ICollection`1.Count
  commentId: P:System.Collections.Generic.ICollection`1.Count
  isExternal: true
  name: Count
  nameWithType: ICollection<T>.Count
  fullName: System.Collections.Generic.ICollection<T>.Count
  nameWithType.vb: ICollection(Of T).Count
  fullname.vb: System.Collections.Generic.ICollection(Of T).Count
- uid: System.Fabric.Health.ServiceHealthStateList.IsReadOnly*
  commentId: Overload:System.Fabric.Health.ServiceHealthStateList.IsReadOnly
  isExternal: false
  name: IsReadOnly
  nameWithType: ServiceHealthStateList.IsReadOnly
  fullName: System.Fabric.Health.ServiceHealthStateList.IsReadOnly
- uid: System.Collections.Generic.ICollection{System.Fabric.Health.ServiceHealthState}.IsReadOnly
  commentId: P:System.Collections.Generic.ICollection{System.Fabric.Health.ServiceHealthState}.IsReadOnly
  parent: System.Collections.Generic.ICollection{System.Fabric.Health.ServiceHealthState}
  definition: System.Collections.Generic.ICollection`1.IsReadOnly
  name: IsReadOnly
  nameWithType: ICollection<ServiceHealthState>.IsReadOnly
  fullName: System.Collections.Generic.ICollection<System.Fabric.Health.ServiceHealthState>.IsReadOnly
  nameWithType.vb: ICollection(Of ServiceHealthState).IsReadOnly
  fullname.vb: System.Collections.Generic.ICollection(Of System.Fabric.Health.ServiceHealthState).IsReadOnly
- uid: System.Collections.Generic.ICollection`1.IsReadOnly
  commentId: P:System.Collections.Generic.ICollection`1.IsReadOnly
  isExternal: true
  name: IsReadOnly
  nameWithType: ICollection<T>.IsReadOnly
  fullName: System.Collections.Generic.ICollection<T>.IsReadOnly
  nameWithType.vb: ICollection(Of T).IsReadOnly
  fullname.vb: System.Collections.Generic.ICollection(Of T).IsReadOnly
- uid: System.Fabric.Health.ServiceHealthStateList.Remove*
  commentId: Overload:System.Fabric.Health.ServiceHealthStateList.Remove
  isExternal: false
  name: Remove
  nameWithType: ServiceHealthStateList.Remove
  fullName: System.Fabric.Health.ServiceHealthStateList.Remove
- uid: System.Collections.Generic.ICollection{System.Fabric.Health.ServiceHealthState}.Remove(System.Fabric.Health.ServiceHealthState)
  commentId: M:System.Collections.Generic.ICollection{System.Fabric.Health.ServiceHealthState}.Remove(System.Fabric.Health.ServiceHealthState)
  parent: System.Collections.Generic.ICollection{System.Fabric.Health.ServiceHealthState}
  definition: System.Collections.Generic.ICollection`1.Remove(`0)
  name: Remove(ServiceHealthState)
  nameWithType: ICollection<ServiceHealthState>.Remove(ServiceHealthState)
  fullName: System.Collections.Generic.ICollection<System.Fabric.Health.ServiceHealthState>.Remove(System.Fabric.Health.ServiceHealthState)
  nameWithType.vb: ICollection(Of ServiceHealthState).Remove(ServiceHealthState)
  fullname.vb: System.Collections.Generic.ICollection(Of System.Fabric.Health.ServiceHealthState).Remove(System.Fabric.Health.ServiceHealthState)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Remove(`0)
    name: Remove
    nameWithType: ICollection<ServiceHealthState>.Remove
    fullName: System.Collections.Generic.ICollection<System.Fabric.Health.ServiceHealthState>.Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Fabric.Health.ServiceHealthState
    name: ServiceHealthState
    nameWithType: ServiceHealthState
    fullName: System.Fabric.Health.ServiceHealthState
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Remove(`0)
    name: Remove
    nameWithType: ICollection(Of ServiceHealthState).Remove
    fullName: System.Collections.Generic.ICollection(Of System.Fabric.Health.ServiceHealthState).Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Fabric.Health.ServiceHealthState
    name: ServiceHealthState
    nameWithType: ServiceHealthState
    fullName: System.Fabric.Health.ServiceHealthState
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1.Remove(`0)
  commentId: M:System.Collections.Generic.ICollection`1.Remove(`0)
  isExternal: true
  name: Remove(T)
  nameWithType: ICollection<T>.Remove(T)
  fullName: System.Collections.Generic.ICollection<T>.Remove(T)
  nameWithType.vb: ICollection(Of T).Remove(T)
  fullname.vb: System.Collections.Generic.ICollection(Of T).Remove(T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Remove(`0)
    name: Remove
    nameWithType: ICollection<T>.Remove
    fullName: System.Collections.Generic.ICollection<T>.Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Remove(`0)
    name: Remove
    nameWithType: ICollection(Of T).Remove
    fullName: System.Collections.Generic.ICollection(Of T).Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerator`1
  commentId: T:System.Collections.Generic.IEnumerator`1
  isExternal: true
  name: IEnumerator<T>
  nameWithType: IEnumerator<T>
  fullName: System.Collections.Generic.IEnumerator<T>
  nameWithType.vb: IEnumerator(Of T)
  fullname.vb: System.Collections.Generic.IEnumerator(Of T)
  name.vb: IEnumerator(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.Health.ServiceHealthStateList.GetEnumerator*
  commentId: Overload:System.Fabric.Health.ServiceHealthStateList.GetEnumerator
  isExternal: false
  name: GetEnumerator
  nameWithType: ServiceHealthStateList.GetEnumerator
  fullName: System.Fabric.Health.ServiceHealthStateList.GetEnumerator
- uid: System.Collections.Generic.IEnumerable{System.Fabric.Health.ServiceHealthState}.GetEnumerator
  commentId: M:System.Collections.Generic.IEnumerable{System.Fabric.Health.ServiceHealthState}.GetEnumerator
  parent: System.Collections.Generic.IEnumerable{System.Fabric.Health.ServiceHealthState}
  definition: System.Collections.Generic.IEnumerable`1.GetEnumerator
  name: GetEnumerator()
  nameWithType: IEnumerable<ServiceHealthState>.GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<System.Fabric.Health.ServiceHealthState>.GetEnumerator()
  nameWithType.vb: IEnumerable(Of ServiceHealthState).GetEnumerator()
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Fabric.Health.ServiceHealthState).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable<ServiceHealthState>.GetEnumerator
    fullName: System.Collections.Generic.IEnumerable<System.Fabric.Health.ServiceHealthState>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable(Of ServiceHealthState).GetEnumerator
    fullName: System.Collections.Generic.IEnumerable(Of System.Fabric.Health.ServiceHealthState).GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerator{System.Fabric.Health.ServiceHealthState}
  commentId: T:System.Collections.Generic.IEnumerator{System.Fabric.Health.ServiceHealthState}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerator`1
  name: IEnumerator<ServiceHealthState>
  nameWithType: IEnumerator<ServiceHealthState>
  fullName: System.Collections.Generic.IEnumerator<System.Fabric.Health.ServiceHealthState>
  nameWithType.vb: IEnumerator(Of ServiceHealthState)
  fullname.vb: System.Collections.Generic.IEnumerator(Of System.Fabric.Health.ServiceHealthState)
  name.vb: IEnumerator(Of ServiceHealthState)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Fabric.Health.ServiceHealthState
    name: ServiceHealthState
    nameWithType: ServiceHealthState
    fullName: System.Fabric.Health.ServiceHealthState
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Fabric.Health.ServiceHealthState
    name: ServiceHealthState
    nameWithType: ServiceHealthState
    fullName: System.Fabric.Health.ServiceHealthState
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
  commentId: M:System.Collections.Generic.IEnumerable`1.GetEnumerator
  isExternal: true
  name: GetEnumerator()
  nameWithType: IEnumerable<T>.GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  nameWithType.vb: IEnumerable(Of T).GetEnumerator()
  fullname.vb: System.Collections.Generic.IEnumerable(Of T).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable<T>.GetEnumerator
    fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable(Of T).GetEnumerator
    fullName: System.Collections.Generic.IEnumerable(Of T).GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IEnumerator
  commentId: T:System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.Fabric.Health.ServiceHealthStateList.System#Collections#IEnumerable#GetEnumerator*
  commentId: Overload:System.Fabric.Health.ServiceHealthStateList.System#Collections#IEnumerable#GetEnumerator
  isExternal: false
  name: IEnumerable.GetEnumerator
  nameWithType: ServiceHealthStateList.IEnumerable.GetEnumerator
  fullName: System.Fabric.Health.ServiceHealthStateList.System.Collections.IEnumerable.GetEnumerator
  nameWithType.vb: ServiceHealthStateList.System.Collections.IEnumerable.GetEnumerator
  name.vb: System.Collections.IEnumerable.GetEnumerator
- uid: System.Collections.IEnumerable.GetEnumerator
  commentId: M:System.Collections.IEnumerable.GetEnumerator
  parent: System.Collections.IEnumerable
  isExternal: true
  name: GetEnumerator()
  nameWithType: IEnumerable.GetEnumerator()
  fullName: System.Collections.IEnumerable.GetEnumerator()
  spec.csharp:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable.GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable.GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
