### YamlMime:ManagedReference
items:
- uid: System.Fabric.PropertyBatchOperation
  commentId: T:System.Fabric.PropertyBatchOperation
  id: PropertyBatchOperation
  parent: System.Fabric
  children:
  - System.Fabric.PropertyBatchOperation.#ctor
  - System.Fabric.PropertyBatchOperation.#ctor(System.String,System.Fabric.PropertyBatchOperationKind)
  - System.Fabric.PropertyBatchOperation.Kind
  - System.Fabric.PropertyBatchOperation.PropertyName
  langs:
  - csharp
  - vb
  name: PropertyBatchOperation
  nameWithType: PropertyBatchOperation
  fullName: System.Fabric.PropertyBatchOperation
  type: Class
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/PropertyBatchOperation.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: PropertyBatchOperation
    path: src/prod/src/managed/Api/src/System/Fabric/PropertyBatchOperation.cs
    startLine: 19
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Represents the base class for property operations that can be put into a batch and be submitted through the \n<xref href=\"System.Fabric.FabricClient.PropertyManagementClient.SubmitPropertyBatchAsync(System.Uri%2cSystem.Collections.Generic.ICollection%7bSystem.Fabric.PropertyBatchOperation%7d%2cSystem.TimeSpan%2cSystem.Threading.CancellationToken)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n"
  remarks: "\n<p>Note that if one <xref href=\"System.Fabric.PropertyBatchOperation\" data-throw-if-not-resolved=\"false\"></xref> object fails, the entire batch fails and cannot be committed.</p>\n"
  example: []
  syntax:
    content: >-
      [KnownType(typeof (CheckExistsPropertyOperation))]

      [KnownType(typeof (CheckSequencePropertyOperation))]

      [KnownType(typeof (CheckValuePropertyOperation))]

      [KnownType(typeof (DeletePropertyOperation))]

      [KnownType(typeof (GetPropertyOperation))]

      [KnownType(typeof (PutCustomPropertyOperation))]

      [KnownType(typeof (PutPropertyOperation))]

      public abstract class PropertyBatchOperation
    content.vb: >-
      <KnownType(GetType(CheckExistsPropertyOperation))>

      <KnownType(GetType(CheckSequencePropertyOperation))>

      <KnownType(GetType(CheckValuePropertyOperation))>

      <KnownType(GetType(DeletePropertyOperation))>

      <KnownType(GetType(GetPropertyOperation))>

      <KnownType(GetType(PutCustomPropertyOperation))>

      <KnownType(GetType(PutPropertyOperation))>

      Public MustInherit Class PropertyBatchOperation
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  extensionMethods:
  - System.Fabric.PropertyBatchOperation.System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
  attributes:
  - type: System.Runtime.Serialization.KnownTypeAttribute
    ctor: System.Runtime.Serialization.KnownTypeAttribute.#ctor(System.Type)
    arguments:
    - type: System.Type
      value: System.Fabric.CheckExistsPropertyOperation
  - type: System.Runtime.Serialization.KnownTypeAttribute
    ctor: System.Runtime.Serialization.KnownTypeAttribute.#ctor(System.Type)
    arguments:
    - type: System.Type
      value: System.Fabric.CheckSequencePropertyOperation
  - type: System.Runtime.Serialization.KnownTypeAttribute
    ctor: System.Runtime.Serialization.KnownTypeAttribute.#ctor(System.Type)
    arguments:
    - type: System.Type
      value: System.Fabric.CheckValuePropertyOperation
  - type: System.Runtime.Serialization.KnownTypeAttribute
    ctor: System.Runtime.Serialization.KnownTypeAttribute.#ctor(System.Type)
    arguments:
    - type: System.Type
      value: System.Fabric.DeletePropertyOperation
  - type: System.Runtime.Serialization.KnownTypeAttribute
    ctor: System.Runtime.Serialization.KnownTypeAttribute.#ctor(System.Type)
    arguments:
    - type: System.Type
      value: System.Fabric.GetPropertyOperation
  - type: System.Runtime.Serialization.KnownTypeAttribute
    ctor: System.Runtime.Serialization.KnownTypeAttribute.#ctor(System.Type)
    arguments:
    - type: System.Type
      value: System.Fabric.PutCustomPropertyOperation
  - type: System.Runtime.Serialization.KnownTypeAttribute
    ctor: System.Runtime.Serialization.KnownTypeAttribute.#ctor(System.Type)
    arguments:
    - type: System.Type
      value: System.Fabric.PutPropertyOperation
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: System.Fabric.PropertyBatchOperation.#ctor
  commentId: M:System.Fabric.PropertyBatchOperation.#ctor
  id: '#ctor'
  parent: System.Fabric.PropertyBatchOperation
  langs:
  - csharp
  - vb
  name: PropertyBatchOperation()
  nameWithType: PropertyBatchOperation.PropertyBatchOperation()
  fullName: System.Fabric.PropertyBatchOperation.PropertyBatchOperation()
  type: Constructor
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/PropertyBatchOperation.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: .ctor
    path: src/prod/src/managed/Api/src/System/Fabric/PropertyBatchOperation.cs
    startLine: 31
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Fabric.PropertyBatchOperation\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  example: []
  syntax:
    content: protected PropertyBatchOperation()
    content.vb: Protected Sub New
  overload: System.Fabric.PropertyBatchOperation.#ctor*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: System.Fabric.PropertyBatchOperation.#ctor(System.String,System.Fabric.PropertyBatchOperationKind)
  commentId: M:System.Fabric.PropertyBatchOperation.#ctor(System.String,System.Fabric.PropertyBatchOperationKind)
  id: '#ctor(System.String,System.Fabric.PropertyBatchOperationKind)'
  parent: System.Fabric.PropertyBatchOperation
  langs:
  - csharp
  - vb
  name: PropertyBatchOperation(String, PropertyBatchOperationKind)
  nameWithType: PropertyBatchOperation.PropertyBatchOperation(String, PropertyBatchOperationKind)
  fullName: System.Fabric.PropertyBatchOperation.PropertyBatchOperation(System.String, System.Fabric.PropertyBatchOperationKind)
  type: Constructor
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/PropertyBatchOperation.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: .ctor
    path: src/prod/src/managed/Api/src/System/Fabric/PropertyBatchOperation.cs
    startLine: 45
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Fabric.PropertyBatchOperation\" data-throw-if-not-resolved=\"false\"></xref> object with the specified property name and kind.</p>\n"
  example: []
  syntax:
    content: protected PropertyBatchOperation(string propertyName, PropertyBatchOperationKind kind)
    content.vb: Protected Sub New(propertyName As String, kind As PropertyBatchOperationKind)
    parameters:
    - id: propertyName
      type: System.String
      description: "\n<p>String name of the Property.</p>\n"
    - id: kind
      type: System.Fabric.PropertyBatchOperationKind
      description: "\n<p>\n<xref href=\"System.Fabric.PropertyBatchOperationKind\" data-throw-if-not-resolved=\"false\"></xref> defines the kind of the <xref href=\"System.Fabric.PropertyBatchOperation\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  overload: System.Fabric.PropertyBatchOperation.#ctor*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: System.Fabric.PropertyBatchOperation.PropertyName
  commentId: P:System.Fabric.PropertyBatchOperation.PropertyName
  id: PropertyName
  parent: System.Fabric.PropertyBatchOperation
  langs:
  - csharp
  - vb
  name: PropertyName
  nameWithType: PropertyBatchOperation.PropertyName
  fullName: System.Fabric.PropertyBatchOperation.PropertyName
  type: Property
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/PropertyBatchOperation.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: PropertyName
    path: src/prod/src/managed/Api/src/System/Fabric/PropertyBatchOperation.cs
    startLine: 59
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Indicates the name of the property that this <xref href=\"System.Fabric.PropertyBatchOperation\" data-throw-if-not-resolved=\"false\"></xref> accesses.</p>\n"
  example: []
  syntax:
    content: public string PropertyName { get; }
    content.vb: Public ReadOnly Property PropertyName As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>Returns <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  overload: System.Fabric.PropertyBatchOperation.PropertyName*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Fabric.PropertyBatchOperation.Kind
  commentId: P:System.Fabric.PropertyBatchOperation.Kind
  id: Kind
  parent: System.Fabric.PropertyBatchOperation
  langs:
  - csharp
  - vb
  name: Kind
  nameWithType: PropertyBatchOperation.Kind
  fullName: System.Fabric.PropertyBatchOperation.Kind
  type: Property
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/PropertyBatchOperation.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: Kind
    path: src/prod/src/managed/Api/src/System/Fabric/PropertyBatchOperation.cs
    startLine: 70
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Gets the <xref href=\"System.Fabric.PropertyBatchOperationKind\" data-throw-if-not-resolved=\"false\"></xref> that indicates the kind of the <xref href=\"System.Fabric.PropertyBatchOperation\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>All Service Fabric enumerations have a reserved \"Invalid\" field.</p>\n"
  example: []
  syntax:
    content: public PropertyBatchOperationKind Kind { get; }
    content.vb: Public ReadOnly Property Kind As PropertyBatchOperationKind
    parameters: []
    return:
      type: System.Fabric.PropertyBatchOperationKind
      description: "\n<p>Returns <xref href=\"System.Fabric.PropertyBatchOperationKind\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  overload: System.Fabric.PropertyBatchOperation.Kind*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
references:
- uid: System.Fabric.FabricClient.PropertyManagementClient.SubmitPropertyBatchAsync(System.Uri,System.Collections.Generic.ICollection{System.Fabric.PropertyBatchOperation},System.TimeSpan,System.Threading.CancellationToken)
  commentId: M:System.Fabric.FabricClient.PropertyManagementClient.SubmitPropertyBatchAsync(System.Uri,System.Collections.Generic.ICollection{System.Fabric.PropertyBatchOperation},System.TimeSpan,System.Threading.CancellationToken)
- uid: System.Fabric.PropertyBatchOperation
  commentId: T:System.Fabric.PropertyBatchOperation
  parent: System.Fabric
  isExternal: false
  name: PropertyBatchOperation
  nameWithType: PropertyBatchOperation
  fullName: System.Fabric.PropertyBatchOperation
- uid: System.Fabric
  commentId: N:System.Fabric
  isExternal: false
  name: System.Fabric
  nameWithType: System.Fabric
  fullName: System.Fabric
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.PropertyBatchOperation.System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
  commentId: M:System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  parent: System.Fabric.Messaging.Stream.ByteArraySerializer
  definition: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  name: Serialize<PropertyBatchOperation>()
  nameWithType: ByteArraySerializer.Serialize<PropertyBatchOperation>()
  fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<System.Fabric.PropertyBatchOperation>()
  nameWithType.vb: ByteArraySerializer.Serialize(Of PropertyBatchOperation)()
  fullname.vb: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of System.Fabric.PropertyBatchOperation)()
  name.vb: Serialize(Of PropertyBatchOperation)()
  spec.csharp:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
    name: Serialize<PropertyBatchOperation>
    nameWithType: ByteArraySerializer.Serialize<PropertyBatchOperation>
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<System.Fabric.PropertyBatchOperation>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
    name: Serialize(Of PropertyBatchOperation)
    nameWithType: ByteArraySerializer.Serialize(Of PropertyBatchOperation)
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of System.Fabric.PropertyBatchOperation)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  commentId: M:System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  isExternal: false
  name: Serialize<T>(T)
  nameWithType: ByteArraySerializer.Serialize<T>(T)
  fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<T>(T)
  nameWithType.vb: ByteArraySerializer.Serialize(Of T)(T)
  fullname.vb: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of T)(T)
  name.vb: Serialize(Of T)(T)
  spec.csharp:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
    name: Serialize<T>
    nameWithType: ByteArraySerializer.Serialize<T>
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
    name: Serialize(Of T)
    nameWithType: ByteArraySerializer.Serialize(Of T)
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.Messaging.Stream.ByteArraySerializer
  commentId: T:System.Fabric.Messaging.Stream.ByteArraySerializer
  parent: System.Fabric.Messaging.Stream
  isExternal: false
  name: ByteArraySerializer
  nameWithType: ByteArraySerializer
  fullName: System.Fabric.Messaging.Stream.ByteArraySerializer
- uid: System.Fabric.Messaging.Stream
  commentId: N:System.Fabric.Messaging.Stream
  isExternal: false
  name: System.Fabric.Messaging.Stream
  nameWithType: System.Fabric.Messaging.Stream
  fullName: System.Fabric.Messaging.Stream
- uid: System.Fabric.PropertyBatchOperation.#ctor*
  commentId: Overload:System.Fabric.PropertyBatchOperation.#ctor
  isExternal: false
  name: PropertyBatchOperation
  nameWithType: PropertyBatchOperation.PropertyBatchOperation
  fullName: System.Fabric.PropertyBatchOperation.PropertyBatchOperation
- uid: System.Fabric.PropertyBatchOperationKind
  commentId: T:System.Fabric.PropertyBatchOperationKind
  parent: System.Fabric
  isExternal: false
  name: PropertyBatchOperationKind
  nameWithType: PropertyBatchOperationKind
  fullName: System.Fabric.PropertyBatchOperationKind
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Fabric.PropertyBatchOperation.PropertyName*
  commentId: Overload:System.Fabric.PropertyBatchOperation.PropertyName
  isExternal: false
  name: PropertyName
  nameWithType: PropertyBatchOperation.PropertyName
  fullName: System.Fabric.PropertyBatchOperation.PropertyName
- uid: System.Fabric.PropertyBatchOperation.Kind*
  commentId: Overload:System.Fabric.PropertyBatchOperation.Kind
  isExternal: false
  name: Kind
  nameWithType: PropertyBatchOperation.Kind
  fullName: System.Fabric.PropertyBatchOperation.Kind
