### YamlMime:ManagedReference
items:
- uid: System.Fabric.IAtomicGroupStateProvider
  commentId: T:System.Fabric.IAtomicGroupStateProvider
  id: IAtomicGroupStateProvider
  parent: System.Fabric
  children:
  - System.Fabric.IAtomicGroupStateProvider.AtomicGroupCommitAsync(System.Int64,System.Int64,System.Threading.CancellationToken)
  - System.Fabric.IAtomicGroupStateProvider.AtomicGroupRollbackAsync(System.Int64,System.Int64,System.Threading.CancellationToken)
  - System.Fabric.IAtomicGroupStateProvider.AtomicGroupUndoProgressAsync(System.Int64,System.Threading.CancellationToken)
  langs:
  - csharp
  - vb
  name: IAtomicGroupStateProvider
  nameWithType: IAtomicGroupStateProvider
  fullName: System.Fabric.IAtomicGroupStateProvider
  type: Interface
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/IAtomicGroupStateProvider.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: IAtomicGroupStateProvider
    path: src/prod/src/managed/Api/src/System/Fabric/IAtomicGroupStateProvider.cs
    startLine: 12
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Describes additional methods of the <xref href=\"System.Fabric.IAtomicGroupStateProvider\" data-throw-if-not-resolved=\"false\"></xref> interface that a user service must implement to take advantage of the atomic group functionality of a service group. </p>\n"
  example: []
  syntax:
    content: 'public interface IAtomicGroupStateProvider : IStateProvider'
    content.vb: >-
      Public Interface IAtomicGroupStateProvider
          Inherits IStateProvider
  inheritedMembers:
  - System.Fabric.IStateProvider.GetLastCommittedSequenceNumber
  - System.Fabric.IStateProvider.UpdateEpochAsync(System.Fabric.Epoch,System.Int64,System.Threading.CancellationToken)
  - System.Fabric.IStateProvider.OnDataLossAsync(System.Threading.CancellationToken)
  - System.Fabric.IStateProvider.GetCopyContext
  - System.Fabric.IStateProvider.GetCopyState(System.Int64,System.Fabric.IOperationDataStream)
  extensionMethods:
  - System.Fabric.IAtomicGroupStateProvider.System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: System.Fabric.IAtomicGroupStateProvider.AtomicGroupCommitAsync(System.Int64,System.Int64,System.Threading.CancellationToken)
  commentId: M:System.Fabric.IAtomicGroupStateProvider.AtomicGroupCommitAsync(System.Int64,System.Int64,System.Threading.CancellationToken)
  id: AtomicGroupCommitAsync(System.Int64,System.Int64,System.Threading.CancellationToken)
  parent: System.Fabric.IAtomicGroupStateProvider
  langs:
  - csharp
  - vb
  name: AtomicGroupCommitAsync(Int64, Int64, CancellationToken)
  nameWithType: IAtomicGroupStateProvider.AtomicGroupCommitAsync(Int64, Int64, CancellationToken)
  fullName: System.Fabric.IAtomicGroupStateProvider.AtomicGroupCommitAsync(System.Int64, System.Int64, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/IAtomicGroupStateProvider.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: AtomicGroupCommitAsync
    path: src/prod/src/managed/Api/src/System/Fabric/IAtomicGroupStateProvider.cs
    startLine: 30
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Commits a particular atomic group.</p>\n"
  example: []
  syntax:
    content: Task AtomicGroupCommitAsync(long atomicGroupId, long commitSequenceNumber, CancellationToken cancellationToken)
    content.vb: Function AtomicGroupCommitAsync(atomicGroupId As Long, commitSequenceNumber As Long, cancellationToken As CancellationToken) As Task
    parameters:
    - id: atomicGroupId
      type: System.Int64
      description: "\n<p>The ID of the group to be committed.</p>\n"
    - id: commitSequenceNumber
      type: System.Int64
      description: "\n<p>The sequence number for the commit operation.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> object that the operation is observing. \nIt can be used to send a notification that the operation should be canceled. Note that cancellation is advisory and that the operation might still be completed even if it is canceled.</p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>Returns <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  overload: System.Fabric.IAtomicGroupStateProvider.AtomicGroupCommitAsync*
- uid: System.Fabric.IAtomicGroupStateProvider.AtomicGroupRollbackAsync(System.Int64,System.Int64,System.Threading.CancellationToken)
  commentId: M:System.Fabric.IAtomicGroupStateProvider.AtomicGroupRollbackAsync(System.Int64,System.Int64,System.Threading.CancellationToken)
  id: AtomicGroupRollbackAsync(System.Int64,System.Int64,System.Threading.CancellationToken)
  parent: System.Fabric.IAtomicGroupStateProvider
  langs:
  - csharp
  - vb
  name: AtomicGroupRollbackAsync(Int64, Int64, CancellationToken)
  nameWithType: IAtomicGroupStateProvider.AtomicGroupRollbackAsync(Int64, Int64, CancellationToken)
  fullName: System.Fabric.IAtomicGroupStateProvider.AtomicGroupRollbackAsync(System.Int64, System.Int64, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/IAtomicGroupStateProvider.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: AtomicGroupRollbackAsync
    path: src/prod/src/managed/Api/src/System/Fabric/IAtomicGroupStateProvider.cs
    startLine: 47
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Rolls back a particular atomic group.</p>\n"
  example: []
  syntax:
    content: Task AtomicGroupRollbackAsync(long atomicGroupId, long rollbackSequenceNumber, CancellationToken cancellationToken)
    content.vb: Function AtomicGroupRollbackAsync(atomicGroupId As Long, rollbackSequenceNumber As Long, cancellationToken As CancellationToken) As Task
    parameters:
    - id: atomicGroupId
      type: System.Int64
      description: "\n<p>The ID of the group to roll back.</p>\n"
    - id: rollbackSequenceNumber
      type: System.Int64
      description: "\n<p>The sequence number for the rollback operation.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> object that the operation is observing. It can be used to send a notification that the operation should be canceled. Note that cancellation is advisory and that the operation might still be completed even if it is canceled.</p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>Returns <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  overload: System.Fabric.IAtomicGroupStateProvider.AtomicGroupRollbackAsync*
- uid: System.Fabric.IAtomicGroupStateProvider.AtomicGroupUndoProgressAsync(System.Int64,System.Threading.CancellationToken)
  commentId: M:System.Fabric.IAtomicGroupStateProvider.AtomicGroupUndoProgressAsync(System.Int64,System.Threading.CancellationToken)
  id: AtomicGroupUndoProgressAsync(System.Int64,System.Threading.CancellationToken)
  parent: System.Fabric.IAtomicGroupStateProvider
  langs:
  - csharp
  - vb
  name: AtomicGroupUndoProgressAsync(Int64, CancellationToken)
  nameWithType: IAtomicGroupStateProvider.AtomicGroupUndoProgressAsync(Int64, CancellationToken)
  fullName: System.Fabric.IAtomicGroupStateProvider.AtomicGroupUndoProgressAsync(System.Int64, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/IAtomicGroupStateProvider.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: AtomicGroupUndoProgressAsync
    path: src/prod/src/managed/Api/src/System/Fabric/IAtomicGroupStateProvider.cs
    startLine: 61
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Indicates that progress beyond a particular commit sequence number that is provided via <xref href=\"System.Fabric.IAtomicGroupStateProvider.AtomicGroupCommitAsync(System.Int64%2cSystem.Int64%2cSystem.Threading.CancellationToken)\" data-throw-if-not-resolved=\"false\"></xref> should be undone. </p>\n"
  example: []
  syntax:
    content: Task AtomicGroupUndoProgressAsync(long fromCommitSequenceNumber, CancellationToken cancellationToken)
    content.vb: Function AtomicGroupUndoProgressAsync(fromCommitSequenceNumber As Long, cancellationToken As CancellationToken) As Task
    parameters:
    - id: fromCommitSequenceNumber
      type: System.Int64
      description: "\n<p>The LSN of a commit operation. All progress past this point should be undone.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> object that the operation is observing. It can be used to send a notification that the operation should be canceled. Note that cancellation is advisory and that the operation might still be completed even if it is canceled.</p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>Returns <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  overload: System.Fabric.IAtomicGroupStateProvider.AtomicGroupUndoProgressAsync*
references:
- uid: System.Fabric.IAtomicGroupStateProvider
  commentId: T:System.Fabric.IAtomicGroupStateProvider
  isExternal: false
  name: IAtomicGroupStateProvider
  nameWithType: IAtomicGroupStateProvider
  fullName: System.Fabric.IAtomicGroupStateProvider
- uid: System.Fabric
  commentId: N:System.Fabric
  isExternal: false
  name: System.Fabric
  nameWithType: System.Fabric
  fullName: System.Fabric
- uid: System.Fabric.IStateProvider.GetLastCommittedSequenceNumber
  commentId: M:System.Fabric.IStateProvider.GetLastCommittedSequenceNumber
  parent: System.Fabric.IStateProvider
  isExternal: false
  name: GetLastCommittedSequenceNumber()
  nameWithType: IStateProvider.GetLastCommittedSequenceNumber()
  fullName: System.Fabric.IStateProvider.GetLastCommittedSequenceNumber()
  spec.csharp:
  - uid: System.Fabric.IStateProvider.GetLastCommittedSequenceNumber
    name: GetLastCommittedSequenceNumber
    nameWithType: IStateProvider.GetLastCommittedSequenceNumber
    fullName: System.Fabric.IStateProvider.GetLastCommittedSequenceNumber
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Fabric.IStateProvider.GetLastCommittedSequenceNumber
    name: GetLastCommittedSequenceNumber
    nameWithType: IStateProvider.GetLastCommittedSequenceNumber
    fullName: System.Fabric.IStateProvider.GetLastCommittedSequenceNumber
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.IStateProvider.UpdateEpochAsync(System.Fabric.Epoch,System.Int64,System.Threading.CancellationToken)
  commentId: M:System.Fabric.IStateProvider.UpdateEpochAsync(System.Fabric.Epoch,System.Int64,System.Threading.CancellationToken)
  parent: System.Fabric.IStateProvider
  isExternal: true
  name: UpdateEpochAsync(Epoch, Int64, CancellationToken)
  nameWithType: IStateProvider.UpdateEpochAsync(Epoch, Int64, CancellationToken)
  fullName: System.Fabric.IStateProvider.UpdateEpochAsync(System.Fabric.Epoch, System.Int64, System.Threading.CancellationToken)
  spec.csharp:
  - uid: System.Fabric.IStateProvider.UpdateEpochAsync(System.Fabric.Epoch,System.Int64,System.Threading.CancellationToken)
    name: UpdateEpochAsync
    nameWithType: IStateProvider.UpdateEpochAsync
    fullName: System.Fabric.IStateProvider.UpdateEpochAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Fabric.Epoch
    name: Epoch
    nameWithType: Epoch
    fullName: System.Fabric.Epoch
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Fabric.IStateProvider.UpdateEpochAsync(System.Fabric.Epoch,System.Int64,System.Threading.CancellationToken)
    name: UpdateEpochAsync
    nameWithType: IStateProvider.UpdateEpochAsync
    fullName: System.Fabric.IStateProvider.UpdateEpochAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Fabric.Epoch
    name: Epoch
    nameWithType: Epoch
    fullName: System.Fabric.Epoch
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.IStateProvider.OnDataLossAsync(System.Threading.CancellationToken)
  commentId: M:System.Fabric.IStateProvider.OnDataLossAsync(System.Threading.CancellationToken)
  parent: System.Fabric.IStateProvider
  isExternal: true
  name: OnDataLossAsync(CancellationToken)
  nameWithType: IStateProvider.OnDataLossAsync(CancellationToken)
  fullName: System.Fabric.IStateProvider.OnDataLossAsync(System.Threading.CancellationToken)
  spec.csharp:
  - uid: System.Fabric.IStateProvider.OnDataLossAsync(System.Threading.CancellationToken)
    name: OnDataLossAsync
    nameWithType: IStateProvider.OnDataLossAsync
    fullName: System.Fabric.IStateProvider.OnDataLossAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Fabric.IStateProvider.OnDataLossAsync(System.Threading.CancellationToken)
    name: OnDataLossAsync
    nameWithType: IStateProvider.OnDataLossAsync
    fullName: System.Fabric.IStateProvider.OnDataLossAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.IStateProvider.GetCopyContext
  commentId: M:System.Fabric.IStateProvider.GetCopyContext
  parent: System.Fabric.IStateProvider
  isExternal: false
  name: GetCopyContext()
  nameWithType: IStateProvider.GetCopyContext()
  fullName: System.Fabric.IStateProvider.GetCopyContext()
  spec.csharp:
  - uid: System.Fabric.IStateProvider.GetCopyContext
    name: GetCopyContext
    nameWithType: IStateProvider.GetCopyContext
    fullName: System.Fabric.IStateProvider.GetCopyContext
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Fabric.IStateProvider.GetCopyContext
    name: GetCopyContext
    nameWithType: IStateProvider.GetCopyContext
    fullName: System.Fabric.IStateProvider.GetCopyContext
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.IStateProvider.GetCopyState(System.Int64,System.Fabric.IOperationDataStream)
  commentId: M:System.Fabric.IStateProvider.GetCopyState(System.Int64,System.Fabric.IOperationDataStream)
  parent: System.Fabric.IStateProvider
  isExternal: true
  name: GetCopyState(Int64, IOperationDataStream)
  nameWithType: IStateProvider.GetCopyState(Int64, IOperationDataStream)
  fullName: System.Fabric.IStateProvider.GetCopyState(System.Int64, System.Fabric.IOperationDataStream)
  spec.csharp:
  - uid: System.Fabric.IStateProvider.GetCopyState(System.Int64,System.Fabric.IOperationDataStream)
    name: GetCopyState
    nameWithType: IStateProvider.GetCopyState
    fullName: System.Fabric.IStateProvider.GetCopyState
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Fabric.IOperationDataStream
    name: IOperationDataStream
    nameWithType: IOperationDataStream
    fullName: System.Fabric.IOperationDataStream
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Fabric.IStateProvider.GetCopyState(System.Int64,System.Fabric.IOperationDataStream)
    name: GetCopyState
    nameWithType: IStateProvider.GetCopyState
    fullName: System.Fabric.IStateProvider.GetCopyState
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Fabric.IOperationDataStream
    name: IOperationDataStream
    nameWithType: IOperationDataStream
    fullName: System.Fabric.IOperationDataStream
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.IAtomicGroupStateProvider.System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
  commentId: M:System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  parent: System.Fabric.Messaging.Stream.ByteArraySerializer
  definition: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  name: Serialize<IAtomicGroupStateProvider>()
  nameWithType: ByteArraySerializer.Serialize<IAtomicGroupStateProvider>()
  fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<System.Fabric.IAtomicGroupStateProvider>()
  nameWithType.vb: ByteArraySerializer.Serialize(Of IAtomicGroupStateProvider)()
  fullname.vb: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of System.Fabric.IAtomicGroupStateProvider)()
  name.vb: Serialize(Of IAtomicGroupStateProvider)()
  spec.csharp:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
    name: Serialize<IAtomicGroupStateProvider>
    nameWithType: ByteArraySerializer.Serialize<IAtomicGroupStateProvider>
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<System.Fabric.IAtomicGroupStateProvider>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
    name: Serialize(Of IAtomicGroupStateProvider)
    nameWithType: ByteArraySerializer.Serialize(Of IAtomicGroupStateProvider)
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of System.Fabric.IAtomicGroupStateProvider)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.IStateProvider
  commentId: T:System.Fabric.IStateProvider
  parent: System.Fabric
  isExternal: false
  name: IStateProvider
  nameWithType: IStateProvider
  fullName: System.Fabric.IStateProvider
- uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  commentId: M:System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  isExternal: false
  name: Serialize<T>(T)
  nameWithType: ByteArraySerializer.Serialize<T>(T)
  fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<T>(T)
  nameWithType.vb: ByteArraySerializer.Serialize(Of T)(T)
  fullname.vb: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of T)(T)
  name.vb: Serialize(Of T)(T)
  spec.csharp:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
    name: Serialize<T>
    nameWithType: ByteArraySerializer.Serialize<T>
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
    name: Serialize(Of T)
    nameWithType: ByteArraySerializer.Serialize(Of T)
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.Messaging.Stream.ByteArraySerializer
  commentId: T:System.Fabric.Messaging.Stream.ByteArraySerializer
  parent: System.Fabric.Messaging.Stream
  isExternal: false
  name: ByteArraySerializer
  nameWithType: ByteArraySerializer
  fullName: System.Fabric.Messaging.Stream.ByteArraySerializer
- uid: System.Fabric.Messaging.Stream
  commentId: N:System.Fabric.Messaging.Stream
  isExternal: false
  name: System.Fabric.Messaging.Stream
  nameWithType: System.Fabric.Messaging.Stream
  fullName: System.Fabric.Messaging.Stream
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Fabric.IAtomicGroupStateProvider.AtomicGroupCommitAsync*
  commentId: Overload:System.Fabric.IAtomicGroupStateProvider.AtomicGroupCommitAsync
  isExternal: false
  name: AtomicGroupCommitAsync
  nameWithType: IAtomicGroupStateProvider.AtomicGroupCommitAsync
  fullName: System.Fabric.IAtomicGroupStateProvider.AtomicGroupCommitAsync
- uid: System.Int64
  commentId: T:System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: false
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Fabric.IAtomicGroupStateProvider.AtomicGroupRollbackAsync*
  commentId: Overload:System.Fabric.IAtomicGroupStateProvider.AtomicGroupRollbackAsync
  isExternal: false
  name: AtomicGroupRollbackAsync
  nameWithType: IAtomicGroupStateProvider.AtomicGroupRollbackAsync
  fullName: System.Fabric.IAtomicGroupStateProvider.AtomicGroupRollbackAsync
- uid: System.Fabric.IAtomicGroupStateProvider.AtomicGroupCommitAsync(System.Int64,System.Int64,System.Threading.CancellationToken)
  commentId: M:System.Fabric.IAtomicGroupStateProvider.AtomicGroupCommitAsync(System.Int64,System.Int64,System.Threading.CancellationToken)
- uid: System.Fabric.IAtomicGroupStateProvider.AtomicGroupUndoProgressAsync*
  commentId: Overload:System.Fabric.IAtomicGroupStateProvider.AtomicGroupUndoProgressAsync
  isExternal: false
  name: AtomicGroupUndoProgressAsync
  nameWithType: IAtomicGroupStateProvider.AtomicGroupUndoProgressAsync
  fullName: System.Fabric.IAtomicGroupStateProvider.AtomicGroupUndoProgressAsync
