### YamlMime:ManagedReference
items:
- uid: System.Fabric.FabricRuntime
  commentId: T:System.Fabric.FabricRuntime
  id: FabricRuntime
  parent: System.Fabric
  children:
  - System.Fabric.FabricRuntime.Create
  - System.Fabric.FabricRuntime.Create(System.Action)
  - System.Fabric.FabricRuntime.CreateAsync(System.Action,System.TimeSpan,System.Threading.CancellationToken)
  - System.Fabric.FabricRuntime.CreateAsync(System.TimeSpan,System.Threading.CancellationToken)
  - System.Fabric.FabricRuntime.Dispose
  - System.Fabric.FabricRuntime.GetActivationContext
  - System.Fabric.FabricRuntime.GetActivationContextAsync(System.TimeSpan,System.Threading.CancellationToken)
  - System.Fabric.FabricRuntime.GetNodeContext
  - System.Fabric.FabricRuntime.GetNodeContextAsync(System.TimeSpan,System.Threading.CancellationToken)
  - System.Fabric.FabricRuntime.RegisterServiceGroupFactory(System.String,System.Fabric.ServiceGroupFactory)
  - System.Fabric.FabricRuntime.RegisterServiceGroupFactoryAsync(System.String,System.Fabric.ServiceGroupFactory,System.TimeSpan,System.Threading.CancellationToken)
  - System.Fabric.FabricRuntime.RegisterServiceType(System.String,System.Type)
  - System.Fabric.FabricRuntime.RegisterServiceTypeAsync(System.String,System.Type,System.TimeSpan,System.Threading.CancellationToken)
  - System.Fabric.FabricRuntime.RegisterStatefulServiceFactory(System.String,System.Fabric.IStatefulServiceFactory)
  - System.Fabric.FabricRuntime.RegisterStatefulServiceFactoryAsync(System.String,System.Fabric.IStatefulServiceFactory,System.TimeSpan,System.Threading.CancellationToken)
  - System.Fabric.FabricRuntime.RegisterStatelessServiceFactory(System.String,System.Fabric.IStatelessServiceFactory)
  - System.Fabric.FabricRuntime.RegisterStatelessServiceFactoryAsync(System.String,System.Fabric.IStatelessServiceFactory,System.TimeSpan,System.Threading.CancellationToken)
  langs:
  - csharp
  - vb
  name: FabricRuntime
  nameWithType: FabricRuntime
  fullName: System.Fabric.FabricRuntime
  type: Class
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/Hosting/FabricRuntime.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: FabricRuntime
    path: src/prod/src/managed/Api/src/System/Fabric/Hosting/FabricRuntime.cs
    startLine: 20
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Allows user created hosts to obtain their <xref href=\"System.Fabric.CodePackageActivationContext\" data-throw-if-not-resolved=\"false\"></xref>, well as to register the \nnecessary service factories [ <xref href=\"System.Fabric.IStatelessServiceFactory\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Fabric.IStatefulServiceFactory\" data-throw-if-not-resolved=\"false\"></xref>, or \n<xref href=\"System.Fabric.ServiceGroupFactory\" data-throw-if-not-resolved=\"false\"></xref>] or service types directly.</p>\n"
  example: []
  syntax:
    content: 'public sealed class FabricRuntime : IDisposable'
    content.vb: >-
      Public NotInheritable Class FabricRuntime
          Implements IDisposable
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  extensionMethods:
  - System.Fabric.FabricRuntime.System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: System.Fabric.FabricRuntime.GetActivationContext
  commentId: M:System.Fabric.FabricRuntime.GetActivationContext
  id: GetActivationContext
  parent: System.Fabric.FabricRuntime
  langs:
  - csharp
  - vb
  name: GetActivationContext()
  nameWithType: FabricRuntime.GetActivationContext()
  fullName: System.Fabric.FabricRuntime.GetActivationContext()
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/Hosting/FabricRuntime.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: GetActivationContext
    path: src/prod/src/managed/Api/src/System/Fabric/Hosting/FabricRuntime.cs
    startLine: 87
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Retrieves the current <xref href=\"System.Fabric.FabricRuntime\" data-throw-if-not-resolved=\"false\"></xref>’s <xref href=\"System.Fabric.CodePackageActivationContext\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example: []
  syntax:
    content: public static CodePackageActivationContext GetActivationContext()
    content.vb: Public Shared Function GetActivationContext As CodePackageActivationContext
    return:
      type: System.Fabric.CodePackageActivationContext
      description: "\n<p>The activation context.</p>\n"
  overload: System.Fabric.FabricRuntime.GetActivationContext*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Fabric.FabricRuntime.GetActivationContextAsync(System.TimeSpan,System.Threading.CancellationToken)
  commentId: M:System.Fabric.FabricRuntime.GetActivationContextAsync(System.TimeSpan,System.Threading.CancellationToken)
  id: GetActivationContextAsync(System.TimeSpan,System.Threading.CancellationToken)
  parent: System.Fabric.FabricRuntime
  langs:
  - csharp
  - vb
  name: GetActivationContextAsync(TimeSpan, CancellationToken)
  nameWithType: FabricRuntime.GetActivationContextAsync(TimeSpan, CancellationToken)
  fullName: System.Fabric.FabricRuntime.GetActivationContextAsync(System.TimeSpan, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/Hosting/FabricRuntime.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: GetActivationContextAsync
    path: src/prod/src/managed/Api/src/System/Fabric/Hosting/FabricRuntime.cs
    startLine: 108
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Retrieves the current <xref href=\"System.Fabric.FabricRuntime\" data-throw-if-not-resolved=\"false\"></xref>’s <xref href=\"System.Fabric.CodePackageActivationContext\" data-throw-if-not-resolved=\"false\"></xref> asynchronously \nwith the specified <em>timeout</em> and <em>cancellationToken</em>.</p>\n"
  example: []
  syntax:
    content: public static Task<CodePackageActivationContext> GetActivationContextAsync(TimeSpan timeout, CancellationToken cancellationToken)
    content.vb: Public Shared Function GetActivationContextAsync(timeout As TimeSpan, cancellationToken As CancellationToken) As Task(Of CodePackageActivationContext)
    parameters:
    - id: timeout
      type: System.TimeSpan
      description: "\n<p>The maximum amount of time Service Fabric will allow this operation to continue before returning a TimeoutException</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> that the operation is observing.  It can be used to send a notification that \nthe operation should be canceled.  Note that cancellation is advisory and that the operation may still be completed even if it is canceled.</p>\n"
    return:
      type: System.Threading.Tasks.Task{System.Fabric.CodePackageActivationContext}
      description: "\n<p>The task representing the asynchronous operation.</p>\n"
  overload: System.Fabric.FabricRuntime.GetActivationContextAsync*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Fabric.FabricRuntime.GetNodeContext
  commentId: M:System.Fabric.FabricRuntime.GetNodeContext
  id: GetNodeContext
  parent: System.Fabric.FabricRuntime
  langs:
  - csharp
  - vb
  name: GetNodeContext()
  nameWithType: FabricRuntime.GetNodeContext()
  fullName: System.Fabric.FabricRuntime.GetNodeContext()
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/Hosting/FabricRuntime.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: GetNodeContext
    path: src/prod/src/managed/Api/src/System/Fabric/Hosting/FabricRuntime.cs
    startLine: 121
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Gets the Node Context object that contains information about Fabric Node. </p>\n"
  example: []
  syntax:
    content: public static NodeContext GetNodeContext()
    content.vb: Public Shared Function GetNodeContext As NodeContext
    return:
      type: System.Fabric.NodeContext
      description: "\n<p>The node context.</p>\n"
  overload: System.Fabric.FabricRuntime.GetNodeContext*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Fabric.FabricRuntime.GetNodeContextAsync(System.TimeSpan,System.Threading.CancellationToken)
  commentId: M:System.Fabric.FabricRuntime.GetNodeContextAsync(System.TimeSpan,System.Threading.CancellationToken)
  id: GetNodeContextAsync(System.TimeSpan,System.Threading.CancellationToken)
  parent: System.Fabric.FabricRuntime
  langs:
  - csharp
  - vb
  name: GetNodeContextAsync(TimeSpan, CancellationToken)
  nameWithType: FabricRuntime.GetNodeContextAsync(TimeSpan, CancellationToken)
  fullName: System.Fabric.FabricRuntime.GetNodeContextAsync(System.TimeSpan, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/Hosting/FabricRuntime.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: GetNodeContextAsync
    path: src/prod/src/managed/Api/src/System/Fabric/Hosting/FabricRuntime.cs
    startLine: 141
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Gets Node Context from Fabric Node asynchronously with timeout and cancellation token.</p>\n"
  example: []
  syntax:
    content: public static Task<NodeContext> GetNodeContextAsync(TimeSpan timeout, CancellationToken cancellationToken)
    content.vb: Public Shared Function GetNodeContextAsync(timeout As TimeSpan, cancellationToken As CancellationToken) As Task(Of NodeContext)
    parameters:
    - id: timeout
      type: System.TimeSpan
      description: "\n<p>The maximum amount of time Service Fabric will allow this operation to continue before returning a TimeoutException</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> that the operation is observing. It can be used to send a notification that \nthe operation should be canceled. Note that cancellation is advisory and that the operation may still be completed even if it is canceled.</p>\n"
    return:
      type: System.Threading.Tasks.Task{System.Fabric.NodeContext}
      description: "\n<p>The task representing the asynchronous operation.</p>\n"
  overload: System.Fabric.FabricRuntime.GetNodeContextAsync*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Fabric.FabricRuntime.Create
  commentId: M:System.Fabric.FabricRuntime.Create
  id: Create
  parent: System.Fabric.FabricRuntime
  langs:
  - csharp
  - vb
  name: Create()
  nameWithType: FabricRuntime.Create()
  fullName: System.Fabric.FabricRuntime.Create()
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/Hosting/FabricRuntime.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: Create
    path: src/prod/src/managed/Api/src/System/Fabric/Hosting/FabricRuntime.cs
    startLine: 154
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Creates the <xref href=\"System.Fabric.FabricRuntime\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  example: []
  syntax:
    content: public static FabricRuntime Create()
    content.vb: Public Shared Function Create As FabricRuntime
    return:
      type: System.Fabric.FabricRuntime
      description: "\n<p>A newly created <xref href=\"System.Fabric.FabricRuntime\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  overload: System.Fabric.FabricRuntime.Create*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Fabric.FabricRuntime.Create(System.Action)
  commentId: M:System.Fabric.FabricRuntime.Create(System.Action)
  id: Create(System.Action)
  parent: System.Fabric.FabricRuntime
  langs:
  - csharp
  - vb
  name: Create(Action)
  nameWithType: FabricRuntime.Create(Action)
  fullName: System.Fabric.FabricRuntime.Create(System.Action)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/Hosting/FabricRuntime.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: Create
    path: src/prod/src/managed/Api/src/System/Fabric/Hosting/FabricRuntime.cs
    startLine: 169
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Creates the <xref href=\"System.Fabric.FabricRuntime\" data-throw-if-not-resolved=\"false\"></xref> object with a specified callback function which will be executed if the \nunderlying runtime terminates or exits for any reason.</p>\n"
  example: []
  syntax:
    content: public static FabricRuntime Create(Action fabricExitCallback)
    content.vb: Public Shared Function Create(fabricExitCallback As Action) As FabricRuntime
    parameters:
    - id: fabricExitCallback
      type: System.Action
      description: "\n<p>The Action to be executed when the runtime exits or terminates.</p>\n"
    return:
      type: System.Fabric.FabricRuntime
      description: "\n<p>A newly created <xref href=\"System.Fabric.FabricRuntime\" data-throw-if-not-resolved=\"false\"></xref>object.</p>\n"
  overload: System.Fabric.FabricRuntime.Create*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Fabric.FabricRuntime.CreateAsync(System.TimeSpan,System.Threading.CancellationToken)
  commentId: M:System.Fabric.FabricRuntime.CreateAsync(System.TimeSpan,System.Threading.CancellationToken)
  id: CreateAsync(System.TimeSpan,System.Threading.CancellationToken)
  parent: System.Fabric.FabricRuntime
  langs:
  - csharp
  - vb
  name: CreateAsync(TimeSpan, CancellationToken)
  nameWithType: FabricRuntime.CreateAsync(TimeSpan, CancellationToken)
  fullName: System.Fabric.FabricRuntime.CreateAsync(System.TimeSpan, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/Hosting/FabricRuntime.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: CreateAsync
    path: src/prod/src/managed/Api/src/System/Fabric/Hosting/FabricRuntime.cs
    startLine: 204
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Creates the <xref href=\"System.Fabric.FabricRuntime\" data-throw-if-not-resolved=\"false\"></xref> object asynchronously with the specified <em>timeout</em> and \n<em>cancellationToken</em>.</p>\n"
  example: []
  syntax:
    content: public static Task<FabricRuntime> CreateAsync(TimeSpan timeout, CancellationToken cancellationToken)
    content.vb: Public Shared Function CreateAsync(timeout As TimeSpan, cancellationToken As CancellationToken) As Task(Of FabricRuntime)
    parameters:
    - id: timeout
      type: System.TimeSpan
      description: "\n<p>The maximum amount of time Service Fabric will allow this operation to continue before returning a TimeoutException.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> that the operation is observing.  It can be used to send a notification that \nthe operation should be canceled.  Note that cancellation is advisory and that the operation may still be completed even if it is canceled.</p>\n"
    return:
      type: System.Threading.Tasks.Task{System.Fabric.FabricRuntime}
      description: "\n<p>The task representing the asynchronous operation.</p>\n"
  overload: System.Fabric.FabricRuntime.CreateAsync*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Fabric.FabricRuntime.CreateAsync(System.Action,System.TimeSpan,System.Threading.CancellationToken)
  commentId: M:System.Fabric.FabricRuntime.CreateAsync(System.Action,System.TimeSpan,System.Threading.CancellationToken)
  id: CreateAsync(System.Action,System.TimeSpan,System.Threading.CancellationToken)
  parent: System.Fabric.FabricRuntime
  langs:
  - csharp
  - vb
  name: CreateAsync(Action, TimeSpan, CancellationToken)
  nameWithType: FabricRuntime.CreateAsync(Action, TimeSpan, CancellationToken)
  fullName: System.Fabric.FabricRuntime.CreateAsync(System.Action, System.TimeSpan, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/Hosting/FabricRuntime.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: CreateAsync
    path: src/prod/src/managed/Api/src/System/Fabric/Hosting/FabricRuntime.cs
    startLine: 226
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Creates the <xref href=\"System.Fabric.FabricRuntime\" data-throw-if-not-resolved=\"false\"></xref> object asynchronously with the specified callback function which will be executed \nif the underlying runtime terminates or exits for any reason, <em>timeout</em>, and <em>cancellationToken</em>. </p>\n"
  example: []
  syntax:
    content: public static Task<FabricRuntime> CreateAsync(Action fabricExitCallback, TimeSpan timeout, CancellationToken cancellationToken)
    content.vb: Public Shared Function CreateAsync(fabricExitCallback As Action, timeout As TimeSpan, cancellationToken As CancellationToken) As Task(Of FabricRuntime)
    parameters:
    - id: fabricExitCallback
      type: System.Action
      description: "\n<p>The Action to be executed when the runtime exits or terminates.</p>\n"
    - id: timeout
      type: System.TimeSpan
      description: "\n<p>The maximum amount of time Service Fabric will allow this operation to continue before returning a TimeoutException.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> that the operation is observing.  It can be used to send a notification that the \noperation should be canceled.  Note that cancellation is advisory and that the operation may still be completed even if it is canceled.</p>\n"
    return:
      type: System.Threading.Tasks.Task{System.Fabric.FabricRuntime}
      description: "\n<p>The task representing the asynchronous operation.</p>\n"
  overload: System.Fabric.FabricRuntime.CreateAsync*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Fabric.FabricRuntime.RegisterServiceType(System.String,System.Type)
  commentId: M:System.Fabric.FabricRuntime.RegisterServiceType(System.String,System.Type)
  id: RegisterServiceType(System.String,System.Type)
  parent: System.Fabric.FabricRuntime
  langs:
  - csharp
  - vb
  name: RegisterServiceType(String, Type)
  nameWithType: FabricRuntime.RegisterServiceType(String, Type)
  fullName: System.Fabric.FabricRuntime.RegisterServiceType(System.String, System.Type)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/Hosting/FabricRuntime.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: RegisterServiceType
    path: src/prod/src/managed/Api/src/System/Fabric/Hosting/FabricRuntime.cs
    startLine: 249
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Associates the specified <em>serviceTypeName</em> with the actual managed Type that implements it. </p>\n"
  remarks: "\n<p>Note that this mechanism for service type registration does not require a custom <xref href=\"System.Fabric.IStatelessServiceFactory\" data-throw-if-not-resolved=\"false\"></xref> or \n<xref href=\"System.Fabric.IStatefulServiceFactory\" data-throw-if-not-resolved=\"false\"></xref> to be provided at registration time.  Service Fabric will generate one at runtime and utilize \nit automatically.  If there is a need for a custom implementation of the factory, you can implement <xref href=\"System.Fabric.IStatelessServiceFactory\" data-throw-if-not-resolved=\"false\"></xref> \nor <xref href=\"System.Fabric.IStatefulServiceFactory\" data-throw-if-not-resolved=\"false\"></xref> and then provide those via the corresponding factory registration methods \n(<xref href=\"System.Fabric.FabricRuntime.RegisterStatelessServiceFactoryAsync(System.String%2cSystem.Fabric.IStatelessServiceFactory%2cSystem.TimeSpan%2cSystem.Threading.CancellationToken)\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Fabric.FabricRuntime.RegisterStatefulServiceFactoryAsync(System.String%2cSystem.Fabric.IStatefulServiceFactory%2cSystem.TimeSpan%2cSystem.Threading.CancellationToken)\" data-throw-if-not-resolved=\"false\"></xref>)</p>\n"
  example: []
  syntax:
    content: public void RegisterServiceType(string serviceTypeName, Type serviceTypeImplementation)
    content.vb: Public Sub RegisterServiceType(serviceTypeName As String, serviceTypeImplementation As Type)
    parameters:
    - id: serviceTypeName
      type: System.String
      description: "\n<p>The type name of the service type (as a string).  This should match the type of the service group type as specified in the manifests and/or \nthe CreateService command.</p>\n"
    - id: serviceTypeImplementation
      type: System.Type
      description: "\n<p>The qualified service Type that implements the specified <em>serviceTypeName</em>.</p>\n"
  overload: System.Fabric.FabricRuntime.RegisterServiceType*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricRuntime.RegisterStatelessServiceFactory(System.String,System.Fabric.IStatelessServiceFactory)
  commentId: M:System.Fabric.FabricRuntime.RegisterStatelessServiceFactory(System.String,System.Fabric.IStatelessServiceFactory)
  id: RegisterStatelessServiceFactory(System.String,System.Fabric.IStatelessServiceFactory)
  parent: System.Fabric.FabricRuntime
  langs:
  - csharp
  - vb
  name: RegisterStatelessServiceFactory(String, IStatelessServiceFactory)
  nameWithType: FabricRuntime.RegisterStatelessServiceFactory(String, IStatelessServiceFactory)
  fullName: System.Fabric.FabricRuntime.RegisterStatelessServiceFactory(System.String, System.Fabric.IStatelessServiceFactory)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/Hosting/FabricRuntime.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: RegisterStatelessServiceFactory
    path: src/prod/src/managed/Api/src/System/Fabric/Hosting/FabricRuntime.cs
    startLine: 268
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Registers the specified <xref href=\"System.Fabric.IStatelessServiceFactory\" data-throw-if-not-resolved=\"false\"></xref> for the specified service type.</p>\n"
  example: []
  syntax:
    content: public void RegisterStatelessServiceFactory(string serviceTypeName, IStatelessServiceFactory factory)
    content.vb: Public Sub RegisterStatelessServiceFactory(serviceTypeName As String, factory As IStatelessServiceFactory)
    parameters:
    - id: serviceTypeName
      type: System.String
      description: "\n<p>The type name of the service type (as a string).  This should match the type of the service group type as specified in the manifests and/or the \nCreateService command.</p>\n"
    - id: factory
      type: System.Fabric.IStatelessServiceFactory
      description: "\n<p>The <xref href=\"System.Fabric.IStatelessServiceFactory\" data-throw-if-not-resolved=\"false\"></xref> which can create the specified service type.</p>\n"
  overload: System.Fabric.FabricRuntime.RegisterStatelessServiceFactory*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricRuntime.RegisterStatefulServiceFactory(System.String,System.Fabric.IStatefulServiceFactory)
  commentId: M:System.Fabric.FabricRuntime.RegisterStatefulServiceFactory(System.String,System.Fabric.IStatefulServiceFactory)
  id: RegisterStatefulServiceFactory(System.String,System.Fabric.IStatefulServiceFactory)
  parent: System.Fabric.FabricRuntime
  langs:
  - csharp
  - vb
  name: RegisterStatefulServiceFactory(String, IStatefulServiceFactory)
  nameWithType: FabricRuntime.RegisterStatefulServiceFactory(String, IStatefulServiceFactory)
  fullName: System.Fabric.FabricRuntime.RegisterStatefulServiceFactory(System.String, System.Fabric.IStatefulServiceFactory)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/Hosting/FabricRuntime.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: RegisterStatefulServiceFactory
    path: src/prod/src/managed/Api/src/System/Fabric/Hosting/FabricRuntime.cs
    startLine: 287
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Registers the specified <xref href=\"System.Fabric.IStatefulServiceFactory\" data-throw-if-not-resolved=\"false\"></xref> for the specified service type.</p>\n"
  example: []
  syntax:
    content: public void RegisterStatefulServiceFactory(string serviceTypeName, IStatefulServiceFactory factory)
    content.vb: Public Sub RegisterStatefulServiceFactory(serviceTypeName As String, factory As IStatefulServiceFactory)
    parameters:
    - id: serviceTypeName
      type: System.String
      description: "\n<p>The type name of the service type (as a string).  This should match the type of the service group type as specified in the manifests \nand/or the CreateService command.</p>\n"
    - id: factory
      type: System.Fabric.IStatefulServiceFactory
      description: "\n<p>The <xref href=\"System.Fabric.IStatefulServiceFactory\" data-throw-if-not-resolved=\"false\"></xref> which can create the specified service type.</p>\n"
  overload: System.Fabric.FabricRuntime.RegisterStatefulServiceFactory*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricRuntime.RegisterServiceGroupFactory(System.String,System.Fabric.ServiceGroupFactory)
  commentId: M:System.Fabric.FabricRuntime.RegisterServiceGroupFactory(System.String,System.Fabric.ServiceGroupFactory)
  id: RegisterServiceGroupFactory(System.String,System.Fabric.ServiceGroupFactory)
  parent: System.Fabric.FabricRuntime
  langs:
  - csharp
  - vb
  name: RegisterServiceGroupFactory(String, ServiceGroupFactory)
  nameWithType: FabricRuntime.RegisterServiceGroupFactory(String, ServiceGroupFactory)
  fullName: System.Fabric.FabricRuntime.RegisterServiceGroupFactory(System.String, System.Fabric.ServiceGroupFactory)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/Hosting/FabricRuntime.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: RegisterServiceGroupFactory
    path: src/prod/src/managed/Api/src/System/Fabric/Hosting/FabricRuntime.cs
    startLine: 306
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Registers the specified <xref href=\"System.Fabric.ServiceGroupFactory\" data-throw-if-not-resolved=\"false\"></xref> for the specified type.</p>\n"
  example: []
  syntax:
    content: public void RegisterServiceGroupFactory(string serviceGroupTypeName, ServiceGroupFactory factory)
    content.vb: Public Sub RegisterServiceGroupFactory(serviceGroupTypeName As String, factory As ServiceGroupFactory)
    parameters:
    - id: serviceGroupTypeName
      type: System.String
      description: "\n<p>The type name of the ServiceGroup service type (as a string).  This should match the type of the service group type as specified in the \nmanifests and/or the CreateServiceGroup command.</p>\n"
    - id: factory
      type: System.Fabric.ServiceGroupFactory
      description: "\n<p>The <xref href=\"System.Fabric.ServiceGroupFactory\" data-throw-if-not-resolved=\"false\"></xref> which can create the specified service group type.</p>\n"
  overload: System.Fabric.FabricRuntime.RegisterServiceGroupFactory*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricRuntime.RegisterServiceTypeAsync(System.String,System.Type,System.TimeSpan,System.Threading.CancellationToken)
  commentId: M:System.Fabric.FabricRuntime.RegisterServiceTypeAsync(System.String,System.Type,System.TimeSpan,System.Threading.CancellationToken)
  id: RegisterServiceTypeAsync(System.String,System.Type,System.TimeSpan,System.Threading.CancellationToken)
  parent: System.Fabric.FabricRuntime
  langs:
  - csharp
  - vb
  name: RegisterServiceTypeAsync(String, Type, TimeSpan, CancellationToken)
  nameWithType: FabricRuntime.RegisterServiceTypeAsync(String, Type, TimeSpan, CancellationToken)
  fullName: System.Fabric.FabricRuntime.RegisterServiceTypeAsync(System.String, System.Type, System.TimeSpan, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/Hosting/FabricRuntime.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: RegisterServiceTypeAsync
    path: src/prod/src/managed/Api/src/System/Fabric/Hosting/FabricRuntime.cs
    startLine: 336
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Asynchronously associates the specified serviceTypeName with the actual managed Type that implements it, with the specified <em>timeout</em> \nand <em>cancellationToken</em></p>\n"
  example: []
  syntax:
    content: public Task RegisterServiceTypeAsync(string serviceTypeName, Type serviceTypeImplementation, TimeSpan timeout, CancellationToken cancellationToken)
    content.vb: Public Function RegisterServiceTypeAsync(serviceTypeName As String, serviceTypeImplementation As Type, timeout As TimeSpan, cancellationToken As CancellationToken) As Task
    parameters:
    - id: serviceTypeName
      type: System.String
      description: "\n<p>The type name of the service type (as a string).  This should match the type of the service group type as specified in the manifests \nand/or the CreateService command.</p>\n"
    - id: serviceTypeImplementation
      type: System.Type
      description: "\n<p>The qualified service Type that implements the specified <em>serviceTypeName</em>.</p>\n"
    - id: timeout
      type: System.TimeSpan
      description: "\n<p>The maximum amount of time Service Fabric will allow this operation to continue before returning a TimeoutException.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> that the operation is observing.  It can be used to send a notification that the \noperation should be canceled.  Note that cancellation is advisory and that the operation may still be completed even if it is canceled.</p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>The task representing the asynchronous operation.</p>\n"
  overload: System.Fabric.FabricRuntime.RegisterServiceTypeAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricRuntime.RegisterStatelessServiceFactoryAsync(System.String,System.Fabric.IStatelessServiceFactory,System.TimeSpan,System.Threading.CancellationToken)
  commentId: M:System.Fabric.FabricRuntime.RegisterStatelessServiceFactoryAsync(System.String,System.Fabric.IStatelessServiceFactory,System.TimeSpan,System.Threading.CancellationToken)
  id: RegisterStatelessServiceFactoryAsync(System.String,System.Fabric.IStatelessServiceFactory,System.TimeSpan,System.Threading.CancellationToken)
  parent: System.Fabric.FabricRuntime
  langs:
  - csharp
  - vb
  name: RegisterStatelessServiceFactoryAsync(String, IStatelessServiceFactory, TimeSpan, CancellationToken)
  nameWithType: FabricRuntime.RegisterStatelessServiceFactoryAsync(String, IStatelessServiceFactory, TimeSpan, CancellationToken)
  fullName: System.Fabric.FabricRuntime.RegisterStatelessServiceFactoryAsync(System.String, System.Fabric.IStatelessServiceFactory, System.TimeSpan, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/Hosting/FabricRuntime.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: RegisterStatelessServiceFactoryAsync
    path: src/prod/src/managed/Api/src/System/Fabric/Hosting/FabricRuntime.cs
    startLine: 367
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Asynchronously registers the specified <xref href=\"System.Fabric.IStatelessServiceFactory\" data-throw-if-not-resolved=\"false\"></xref> for the specified service type, with the \nspecified <em>timeout</em> and <em>cancellationToken</em></p>\n"
  example: []
  syntax:
    content: public Task RegisterStatelessServiceFactoryAsync(string serviceTypeName, IStatelessServiceFactory factory, TimeSpan timeout, CancellationToken cancellationToken)
    content.vb: Public Function RegisterStatelessServiceFactoryAsync(serviceTypeName As String, factory As IStatelessServiceFactory, timeout As TimeSpan, cancellationToken As CancellationToken) As Task
    parameters:
    - id: serviceTypeName
      type: System.String
      description: "\n<p>The type name of the service type (as a string).  This should match the type of the service group type as specified in the manifests \nand/or the CreateService command.</p>\n"
    - id: factory
      type: System.Fabric.IStatelessServiceFactory
      description: "\n<p>The <xref href=\"System.Fabric.IStatelessServiceFactory\" data-throw-if-not-resolved=\"false\"></xref> which can create the specified service type.</p>\n"
    - id: timeout
      type: System.TimeSpan
      description: "\n<p>The maximum amount of time Service Fabric will allow this operation to continue before returning a TimeoutException.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> that the operation is observing.  It can be used to send a notification that \nthe operation should be canceled.  Note that cancellation is advisory and that the operation may still be completed even if it is canceled.</p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>The task representing the asynchronous operation.</p>\n"
  overload: System.Fabric.FabricRuntime.RegisterStatelessServiceFactoryAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricRuntime.RegisterStatefulServiceFactoryAsync(System.String,System.Fabric.IStatefulServiceFactory,System.TimeSpan,System.Threading.CancellationToken)
  commentId: M:System.Fabric.FabricRuntime.RegisterStatefulServiceFactoryAsync(System.String,System.Fabric.IStatefulServiceFactory,System.TimeSpan,System.Threading.CancellationToken)
  id: RegisterStatefulServiceFactoryAsync(System.String,System.Fabric.IStatefulServiceFactory,System.TimeSpan,System.Threading.CancellationToken)
  parent: System.Fabric.FabricRuntime
  langs:
  - csharp
  - vb
  name: RegisterStatefulServiceFactoryAsync(String, IStatefulServiceFactory, TimeSpan, CancellationToken)
  nameWithType: FabricRuntime.RegisterStatefulServiceFactoryAsync(String, IStatefulServiceFactory, TimeSpan, CancellationToken)
  fullName: System.Fabric.FabricRuntime.RegisterStatefulServiceFactoryAsync(System.String, System.Fabric.IStatefulServiceFactory, System.TimeSpan, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/Hosting/FabricRuntime.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: RegisterStatefulServiceFactoryAsync
    path: src/prod/src/managed/Api/src/System/Fabric/Hosting/FabricRuntime.cs
    startLine: 398
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Registers the specified <xref href=\"System.Fabric.IStatefulServiceFactory\" data-throw-if-not-resolved=\"false\"></xref> for the specified service type with the specified \n<em>timeout</em> and <em>cancellationToken</em>.</p>\n"
  example: []
  syntax:
    content: public Task RegisterStatefulServiceFactoryAsync(string serviceTypeName, IStatefulServiceFactory factory, TimeSpan timeout, CancellationToken cancellationToken)
    content.vb: Public Function RegisterStatefulServiceFactoryAsync(serviceTypeName As String, factory As IStatefulServiceFactory, timeout As TimeSpan, cancellationToken As CancellationToken) As Task
    parameters:
    - id: serviceTypeName
      type: System.String
      description: "\n<p>The type name of the service type (as a string).  This should match the type of the service group type as specified in the manifests \nand/or the CreateService command.</p>\n"
    - id: factory
      type: System.Fabric.IStatefulServiceFactory
      description: "\n<p>The <xref href=\"System.Fabric.IStatefulServiceFactory\" data-throw-if-not-resolved=\"false\"></xref> which can create the specified service type.</p>\n"
    - id: timeout
      type: System.TimeSpan
      description: "\n<p>The maximum amount of time Service Fabric will allow this operation to continue before returning a TimeoutException.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> that the operation is observing.  It can be used to send a notification that \nthe operation should be canceled.  Note that cancellation is advisory and that the operation may still be completed even if it is canceled.</p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>The representing the asynchronous operation.</p>\n"
  overload: System.Fabric.FabricRuntime.RegisterStatefulServiceFactoryAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricRuntime.RegisterServiceGroupFactoryAsync(System.String,System.Fabric.ServiceGroupFactory,System.TimeSpan,System.Threading.CancellationToken)
  commentId: M:System.Fabric.FabricRuntime.RegisterServiceGroupFactoryAsync(System.String,System.Fabric.ServiceGroupFactory,System.TimeSpan,System.Threading.CancellationToken)
  id: RegisterServiceGroupFactoryAsync(System.String,System.Fabric.ServiceGroupFactory,System.TimeSpan,System.Threading.CancellationToken)
  parent: System.Fabric.FabricRuntime
  langs:
  - csharp
  - vb
  name: RegisterServiceGroupFactoryAsync(String, ServiceGroupFactory, TimeSpan, CancellationToken)
  nameWithType: FabricRuntime.RegisterServiceGroupFactoryAsync(String, ServiceGroupFactory, TimeSpan, CancellationToken)
  fullName: System.Fabric.FabricRuntime.RegisterServiceGroupFactoryAsync(System.String, System.Fabric.ServiceGroupFactory, System.TimeSpan, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/Hosting/FabricRuntime.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: RegisterServiceGroupFactoryAsync
    path: src/prod/src/managed/Api/src/System/Fabric/Hosting/FabricRuntime.cs
    startLine: 429
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Asynchronously registers the specified <xref href=\"System.Fabric.ServiceGroupFactory\" data-throw-if-not-resolved=\"false\"></xref> for the specified service group type with the \nspecified <em>timeout</em> and <em>cancellationToken</em>.</p>\n"
  example: []
  syntax:
    content: public Task RegisterServiceGroupFactoryAsync(string serviceGroupTypeName, ServiceGroupFactory factory, TimeSpan timeout, CancellationToken cancellationToken)
    content.vb: Public Function RegisterServiceGroupFactoryAsync(serviceGroupTypeName As String, factory As ServiceGroupFactory, timeout As TimeSpan, cancellationToken As CancellationToken) As Task
    parameters:
    - id: serviceGroupTypeName
      type: System.String
      description: "\n<p>The type name of the ServiceGroup service type (as a string).  This should match the type of the service group type as specified in \nthe manifests and/or the CreateServiceGroup command.</p>\n"
    - id: factory
      type: System.Fabric.ServiceGroupFactory
      description: "\n<p>The <xref href=\"System.Fabric.ServiceGroupFactory\" data-throw-if-not-resolved=\"false\"></xref> which can create the specified service group type.</p>\n"
    - id: timeout
      type: System.TimeSpan
      description: "\n<p>The maximum amount of time Service Fabric will allow this operation to continue before returning a TimeoutException.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> that the operation is observing. It can be used to send a notification that the \noperation should be canceled. Note that cancellation is advisory and that the operation may still be completed even if it is canceled.</p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>The task representing the asynchronous operation.</p>\n"
  overload: System.Fabric.FabricRuntime.RegisterServiceGroupFactoryAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricRuntime.Dispose
  commentId: M:System.Fabric.FabricRuntime.Dispose
  id: Dispose
  parent: System.Fabric.FabricRuntime
  langs:
  - csharp
  - vb
  name: Dispose()
  nameWithType: FabricRuntime.Dispose()
  fullName: System.Fabric.FabricRuntime.Dispose()
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/Hosting/FabricRuntime.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: Dispose
    path: src/prod/src/managed/Api/src/System/Fabric/Hosting/FabricRuntime.cs
    startLine: 441
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Disposes of the <xref href=\"System.Fabric.FabricRuntime\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example: []
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose
  overload: System.Fabric.FabricRuntime.Dispose*
  implements:
  - System.IDisposable.Dispose
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: System.Fabric.CodePackageActivationContext
  commentId: T:System.Fabric.CodePackageActivationContext
  parent: System.Fabric
  isExternal: false
  name: CodePackageActivationContext
  nameWithType: CodePackageActivationContext
  fullName: System.Fabric.CodePackageActivationContext
- uid: System.Fabric.IStatelessServiceFactory
  commentId: T:System.Fabric.IStatelessServiceFactory
  parent: System.Fabric
  isExternal: false
  name: IStatelessServiceFactory
  nameWithType: IStatelessServiceFactory
  fullName: System.Fabric.IStatelessServiceFactory
- uid: System.Fabric.IStatefulServiceFactory
  commentId: T:System.Fabric.IStatefulServiceFactory
  parent: System.Fabric
  isExternal: false
  name: IStatefulServiceFactory
  nameWithType: IStatefulServiceFactory
  fullName: System.Fabric.IStatefulServiceFactory
- uid: System.Fabric.ServiceGroupFactory
  commentId: T:System.Fabric.ServiceGroupFactory
  parent: System.Fabric
  isExternal: false
  name: ServiceGroupFactory
  nameWithType: ServiceGroupFactory
  fullName: System.Fabric.ServiceGroupFactory
- uid: System.Fabric
  commentId: N:System.Fabric
  isExternal: false
  name: System.Fabric
  nameWithType: System.Fabric
  fullName: System.Fabric
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.FabricRuntime.System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
  commentId: M:System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  parent: System.Fabric.Messaging.Stream.ByteArraySerializer
  definition: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  name: Serialize<FabricRuntime>()
  nameWithType: ByteArraySerializer.Serialize<FabricRuntime>()
  fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<System.Fabric.FabricRuntime>()
  nameWithType.vb: ByteArraySerializer.Serialize(Of FabricRuntime)()
  fullname.vb: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of System.Fabric.FabricRuntime)()
  name.vb: Serialize(Of FabricRuntime)()
  spec.csharp:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
    name: Serialize<FabricRuntime>
    nameWithType: ByteArraySerializer.Serialize<FabricRuntime>
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<System.Fabric.FabricRuntime>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
    name: Serialize(Of FabricRuntime)
    nameWithType: ByteArraySerializer.Serialize(Of FabricRuntime)
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of System.Fabric.FabricRuntime)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  commentId: M:System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  isExternal: false
  name: Serialize<T>(T)
  nameWithType: ByteArraySerializer.Serialize<T>(T)
  fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<T>(T)
  nameWithType.vb: ByteArraySerializer.Serialize(Of T)(T)
  fullname.vb: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of T)(T)
  name.vb: Serialize(Of T)(T)
  spec.csharp:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
    name: Serialize<T>
    nameWithType: ByteArraySerializer.Serialize<T>
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
    name: Serialize(Of T)
    nameWithType: ByteArraySerializer.Serialize(Of T)
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.Messaging.Stream.ByteArraySerializer
  commentId: T:System.Fabric.Messaging.Stream.ByteArraySerializer
  parent: System.Fabric.Messaging.Stream
  isExternal: false
  name: ByteArraySerializer
  nameWithType: ByteArraySerializer
  fullName: System.Fabric.Messaging.Stream.ByteArraySerializer
- uid: System.Fabric.Messaging.Stream
  commentId: N:System.Fabric.Messaging.Stream
  isExternal: false
  name: System.Fabric.Messaging.Stream
  nameWithType: System.Fabric.Messaging.Stream
  fullName: System.Fabric.Messaging.Stream
- uid: System.Fabric.FabricRuntime
  commentId: T:System.Fabric.FabricRuntime
  parent: System.Fabric
  isExternal: false
  name: FabricRuntime
  nameWithType: FabricRuntime
  fullName: System.Fabric.FabricRuntime
- uid: System.Fabric.FabricRuntime.GetActivationContext*
  commentId: Overload:System.Fabric.FabricRuntime.GetActivationContext
  isExternal: false
  name: GetActivationContext
  nameWithType: FabricRuntime.GetActivationContext
  fullName: System.Fabric.FabricRuntime.GetActivationContext
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Fabric.FabricRuntime.GetActivationContextAsync*
  commentId: Overload:System.Fabric.FabricRuntime.GetActivationContextAsync
  isExternal: false
  name: GetActivationContextAsync
  nameWithType: FabricRuntime.GetActivationContextAsync
  fullName: System.Fabric.FabricRuntime.GetActivationContextAsync
- uid: System.TimeSpan
  commentId: T:System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: System.Threading.Tasks.Task{System.Fabric.CodePackageActivationContext}
  commentId: T:System.Threading.Tasks.Task{System.Fabric.CodePackageActivationContext}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<CodePackageActivationContext>
  nameWithType: Task<CodePackageActivationContext>
  fullName: System.Threading.Tasks.Task<System.Fabric.CodePackageActivationContext>
  nameWithType.vb: Task(Of CodePackageActivationContext)
  fullname.vb: System.Threading.Tasks.Task(Of System.Fabric.CodePackageActivationContext)
  name.vb: Task(Of CodePackageActivationContext)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Fabric.CodePackageActivationContext
    name: CodePackageActivationContext
    nameWithType: CodePackageActivationContext
    fullName: System.Fabric.CodePackageActivationContext
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Fabric.CodePackageActivationContext
    name: CodePackageActivationContext
    nameWithType: CodePackageActivationContext
    fullName: System.Fabric.CodePackageActivationContext
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: false
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullname.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: System.Fabric.FabricRuntime.GetNodeContext*
  commentId: Overload:System.Fabric.FabricRuntime.GetNodeContext
  isExternal: false
  name: GetNodeContext
  nameWithType: FabricRuntime.GetNodeContext
  fullName: System.Fabric.FabricRuntime.GetNodeContext
- uid: System.Fabric.NodeContext
  commentId: T:System.Fabric.NodeContext
  parent: System.Fabric
  isExternal: false
  name: NodeContext
  nameWithType: NodeContext
  fullName: System.Fabric.NodeContext
- uid: System.Fabric.FabricRuntime.GetNodeContextAsync*
  commentId: Overload:System.Fabric.FabricRuntime.GetNodeContextAsync
  isExternal: false
  name: GetNodeContextAsync
  nameWithType: FabricRuntime.GetNodeContextAsync
  fullName: System.Fabric.FabricRuntime.GetNodeContextAsync
- uid: System.Threading.Tasks.Task{System.Fabric.NodeContext}
  commentId: T:System.Threading.Tasks.Task{System.Fabric.NodeContext}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<NodeContext>
  nameWithType: Task<NodeContext>
  fullName: System.Threading.Tasks.Task<System.Fabric.NodeContext>
  nameWithType.vb: Task(Of NodeContext)
  fullname.vb: System.Threading.Tasks.Task(Of System.Fabric.NodeContext)
  name.vb: Task(Of NodeContext)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Fabric.NodeContext
    name: NodeContext
    nameWithType: NodeContext
    fullName: System.Fabric.NodeContext
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Fabric.NodeContext
    name: NodeContext
    nameWithType: NodeContext
    fullName: System.Fabric.NodeContext
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.FabricRuntime.Create*
  commentId: Overload:System.Fabric.FabricRuntime.Create
  isExternal: false
  name: Create
  nameWithType: FabricRuntime.Create
  fullName: System.Fabric.FabricRuntime.Create
- uid: System.Action
  commentId: T:System.Action
  parent: System
  isExternal: true
  name: Action
  nameWithType: Action
  fullName: System.Action
- uid: System.Fabric.FabricRuntime.CreateAsync*
  commentId: Overload:System.Fabric.FabricRuntime.CreateAsync
  isExternal: false
  name: CreateAsync
  nameWithType: FabricRuntime.CreateAsync
  fullName: System.Fabric.FabricRuntime.CreateAsync
- uid: System.Threading.Tasks.Task{System.Fabric.FabricRuntime}
  commentId: T:System.Threading.Tasks.Task{System.Fabric.FabricRuntime}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<FabricRuntime>
  nameWithType: Task<FabricRuntime>
  fullName: System.Threading.Tasks.Task<System.Fabric.FabricRuntime>
  nameWithType.vb: Task(Of FabricRuntime)
  fullname.vb: System.Threading.Tasks.Task(Of System.Fabric.FabricRuntime)
  name.vb: Task(Of FabricRuntime)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Fabric.FabricRuntime
    name: FabricRuntime
    nameWithType: FabricRuntime
    fullName: System.Fabric.FabricRuntime
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Fabric.FabricRuntime
    name: FabricRuntime
    nameWithType: FabricRuntime
    fullName: System.Fabric.FabricRuntime
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.FabricRuntime.RegisterStatelessServiceFactoryAsync(System.String,System.Fabric.IStatelessServiceFactory,System.TimeSpan,System.Threading.CancellationToken)
  commentId: M:System.Fabric.FabricRuntime.RegisterStatelessServiceFactoryAsync(System.String,System.Fabric.IStatelessServiceFactory,System.TimeSpan,System.Threading.CancellationToken)
- uid: System.Fabric.FabricRuntime.RegisterStatefulServiceFactoryAsync(System.String,System.Fabric.IStatefulServiceFactory,System.TimeSpan,System.Threading.CancellationToken)
  commentId: M:System.Fabric.FabricRuntime.RegisterStatefulServiceFactoryAsync(System.String,System.Fabric.IStatefulServiceFactory,System.TimeSpan,System.Threading.CancellationToken)
- uid: System.Fabric.FabricRuntime.RegisterServiceType*
  commentId: Overload:System.Fabric.FabricRuntime.RegisterServiceType
  isExternal: false
  name: RegisterServiceType
  nameWithType: FabricRuntime.RegisterServiceType
  fullName: System.Fabric.FabricRuntime.RegisterServiceType
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Fabric.FabricRuntime.RegisterStatelessServiceFactory*
  commentId: Overload:System.Fabric.FabricRuntime.RegisterStatelessServiceFactory
  isExternal: false
  name: RegisterStatelessServiceFactory
  nameWithType: FabricRuntime.RegisterStatelessServiceFactory
  fullName: System.Fabric.FabricRuntime.RegisterStatelessServiceFactory
- uid: System.Fabric.FabricRuntime.RegisterStatefulServiceFactory*
  commentId: Overload:System.Fabric.FabricRuntime.RegisterStatefulServiceFactory
  isExternal: false
  name: RegisterStatefulServiceFactory
  nameWithType: FabricRuntime.RegisterStatefulServiceFactory
  fullName: System.Fabric.FabricRuntime.RegisterStatefulServiceFactory
- uid: System.Fabric.FabricRuntime.RegisterServiceGroupFactory*
  commentId: Overload:System.Fabric.FabricRuntime.RegisterServiceGroupFactory
  isExternal: false
  name: RegisterServiceGroupFactory
  nameWithType: FabricRuntime.RegisterServiceGroupFactory
  fullName: System.Fabric.FabricRuntime.RegisterServiceGroupFactory
- uid: System.Fabric.FabricRuntime.RegisterServiceTypeAsync*
  commentId: Overload:System.Fabric.FabricRuntime.RegisterServiceTypeAsync
  isExternal: false
  name: RegisterServiceTypeAsync
  nameWithType: FabricRuntime.RegisterServiceTypeAsync
  fullName: System.Fabric.FabricRuntime.RegisterServiceTypeAsync
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Fabric.FabricRuntime.RegisterStatelessServiceFactoryAsync*
  commentId: Overload:System.Fabric.FabricRuntime.RegisterStatelessServiceFactoryAsync
  isExternal: false
  name: RegisterStatelessServiceFactoryAsync
  nameWithType: FabricRuntime.RegisterStatelessServiceFactoryAsync
  fullName: System.Fabric.FabricRuntime.RegisterStatelessServiceFactoryAsync
- uid: System.Fabric.FabricRuntime.RegisterStatefulServiceFactoryAsync*
  commentId: Overload:System.Fabric.FabricRuntime.RegisterStatefulServiceFactoryAsync
  isExternal: false
  name: RegisterStatefulServiceFactoryAsync
  nameWithType: FabricRuntime.RegisterStatefulServiceFactoryAsync
  fullName: System.Fabric.FabricRuntime.RegisterStatefulServiceFactoryAsync
- uid: System.Fabric.FabricRuntime.RegisterServiceGroupFactoryAsync*
  commentId: Overload:System.Fabric.FabricRuntime.RegisterServiceGroupFactoryAsync
  isExternal: false
  name: RegisterServiceGroupFactoryAsync
  nameWithType: FabricRuntime.RegisterServiceGroupFactoryAsync
  fullName: System.Fabric.FabricRuntime.RegisterServiceGroupFactoryAsync
- uid: System.Fabric.FabricRuntime.Dispose*
  commentId: Overload:System.Fabric.FabricRuntime.Dispose
  isExternal: false
  name: Dispose
  nameWithType: FabricRuntime.Dispose
  fullName: System.Fabric.FabricRuntime.Dispose
- uid: System.IDisposable.Dispose
  commentId: M:System.IDisposable.Dispose
  parent: System.IDisposable
  isExternal: true
  name: Dispose()
  nameWithType: IDisposable.Dispose()
  fullName: System.IDisposable.Dispose()
  spec.csharp:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
