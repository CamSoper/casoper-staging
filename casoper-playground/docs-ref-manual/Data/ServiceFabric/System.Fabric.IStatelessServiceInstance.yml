### YamlMime:ManagedReference
items:
- uid: System.Fabric.IStatelessServiceInstance
  commentId: T:System.Fabric.IStatelessServiceInstance
  id: IStatelessServiceInstance
  parent: System.Fabric
  children:
  - System.Fabric.IStatelessServiceInstance.Abort
  - System.Fabric.IStatelessServiceInstance.CloseAsync(System.Threading.CancellationToken)
  - System.Fabric.IStatelessServiceInstance.Initialize(System.Fabric.StatelessServiceInitializationParameters)
  - System.Fabric.IStatelessServiceInstance.OpenAsync(System.Fabric.IStatelessServicePartition,System.Threading.CancellationToken)
  langs:
  - csharp
  - vb
  name: IStatelessServiceInstance
  nameWithType: IStatelessServiceInstance
  fullName: System.Fabric.IStatelessServiceInstance
  type: Interface
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/IStatelessServiceInstance.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: IStatelessServiceInstance
    path: src/prod/src/managed/Api/src/System/Fabric/IStatelessServiceInstance.cs
    startLine: 14
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Stateless services are those which have no state that requires management by Service Fabric. Stateless service types must implement this interface.</p>\n"
  example: []
  syntax:
    content: public interface IStatelessServiceInstance
    content.vb: Public Interface IStatelessServiceInstance
  extensionMethods:
  - System.Fabric.IStatelessServiceInstance.System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: System.Fabric.IStatelessServiceInstance.Initialize(System.Fabric.StatelessServiceInitializationParameters)
  commentId: M:System.Fabric.IStatelessServiceInstance.Initialize(System.Fabric.StatelessServiceInitializationParameters)
  id: Initialize(System.Fabric.StatelessServiceInitializationParameters)
  parent: System.Fabric.IStatelessServiceInstance
  langs:
  - csharp
  - vb
  name: Initialize(StatelessServiceInitializationParameters)
  nameWithType: IStatelessServiceInstance.Initialize(StatelessServiceInitializationParameters)
  fullName: System.Fabric.IStatelessServiceInstance.Initialize(System.Fabric.StatelessServiceInitializationParameters)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/IStatelessServiceInstance.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: Initialize
    path: src/prod/src/managed/Api/src/System/Fabric/IStatelessServiceInstance.cs
    startLine: 22
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p> Initializes a newly created service instance.</p>\n"
  example: []
  syntax:
    content: void Initialize(StatelessServiceInitializationParameters initializationParameters)
    content.vb: Sub Initialize(initializationParameters As StatelessServiceInitializationParameters)
    parameters:
    - id: initializationParameters
      type: System.Fabric.StatelessServiceInitializationParameters
      description: "\n<p>The <xref href=\"System.Fabric.StatelessServiceInitializationParameters\" data-throw-if-not-resolved=\"false\"></xref> for this service.</p>\n"
  overload: System.Fabric.IStatelessServiceInstance.Initialize*
- uid: System.Fabric.IStatelessServiceInstance.OpenAsync(System.Fabric.IStatelessServicePartition,System.Threading.CancellationToken)
  commentId: M:System.Fabric.IStatelessServiceInstance.OpenAsync(System.Fabric.IStatelessServicePartition,System.Threading.CancellationToken)
  id: OpenAsync(System.Fabric.IStatelessServicePartition,System.Threading.CancellationToken)
  parent: System.Fabric.IStatelessServiceInstance
  langs:
  - csharp
  - vb
  name: OpenAsync(IStatelessServicePartition, CancellationToken)
  nameWithType: IStatelessServiceInstance.OpenAsync(IStatelessServicePartition, CancellationToken)
  fullName: System.Fabric.IStatelessServiceInstance.OpenAsync(System.Fabric.IStatelessServicePartition, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/IStatelessServiceInstance.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: OpenAsync
    path: src/prod/src/managed/Api/src/System/Fabric/IStatelessServiceInstance.cs
    startLine: 43
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Opens an initialized service instance so that it can be contacted by clients.</p>\n"
  remarks: "\n<p>Opening an instance stateless service indicates that the service is now resolvable and discoverable by service clients. The string that is returned\nis the address of this service instance. The address is associated with the service name via Service Fabric naming and returned to clients \nthat resolve the service via <xref href=\"System.Fabric.FabricClient.ServiceManagementClient.ResolveServicePartitionAsync(System.Uri)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example: []
  syntax:
    content: Task<string> OpenAsync(IStatelessServicePartition partition, CancellationToken cancellationToken)
    content.vb: Function OpenAsync(partition As IStatelessServicePartition, cancellationToken As CancellationToken) As Task(Of String)
    parameters:
    - id: partition
      type: System.Fabric.IStatelessServicePartition
      description: "\n<p>\n    The <xref href=\"System.Fabric.IStatelessServicePartition\" data-throw-if-not-resolved=\"false\"></xref> that this instance is associated with</p>        \n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> object that the operation is observing. It can be used to send a notification that the operation\nshould be canceled. Note that cancellation is advisory and that the operation may still be completed even if it is canceled.</p>\n"
    return:
      type: System.Threading.Tasks.Task{System.String}
      description: "\n<p>Returns <xref href=\"System.Threading.Tasks.Task%601\" data-throw-if-not-resolved=\"false\"></xref> of type <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  overload: System.Fabric.IStatelessServiceInstance.OpenAsync*
- uid: System.Fabric.IStatelessServiceInstance.CloseAsync(System.Threading.CancellationToken)
  commentId: M:System.Fabric.IStatelessServiceInstance.CloseAsync(System.Threading.CancellationToken)
  id: CloseAsync(System.Threading.CancellationToken)
  parent: System.Fabric.IStatelessServiceInstance
  langs:
  - csharp
  - vb
  name: CloseAsync(CancellationToken)
  nameWithType: IStatelessServiceInstance.CloseAsync(CancellationToken)
  fullName: System.Fabric.IStatelessServiceInstance.CloseAsync(System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/IStatelessServiceInstance.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: CloseAsync
    path: src/prod/src/managed/Api/src/System/Fabric/IStatelessServiceInstance.cs
    startLine: 56
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Closes this service instance gracefully when the service instance is being shut down.</p>\n"
  example: []
  syntax:
    content: Task CloseAsync(CancellationToken cancellationToken)
    content.vb: Function CloseAsync(cancellationToken As CancellationToken) As Task
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> object that the operation is observing. It can be used to send a notification\nthat the operation should be canceled. Note that cancellation is advisory and that the operation might still be completed even if it is canceled.</p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>Returns <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  overload: System.Fabric.IStatelessServiceInstance.CloseAsync*
- uid: System.Fabric.IStatelessServiceInstance.Abort
  commentId: M:System.Fabric.IStatelessServiceInstance.Abort
  id: Abort
  parent: System.Fabric.IStatelessServiceInstance
  langs:
  - csharp
  - vb
  name: Abort()
  nameWithType: IStatelessServiceInstance.Abort()
  fullName: System.Fabric.IStatelessServiceInstance.Abort()
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/IStatelessServiceInstance.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: Abort
    path: src/prod/src/managed/Api/src/System/Fabric/IStatelessServiceInstance.cs
    startLine: 66
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p> Terminates this instance ungracefully with this synchronous method call. </p>\n"
  remarks: "\n<p>Examples of ungraceful termination are lease loss and, in response to the service, the use of \n<xref href=\"System.Fabric.IServicePartition.ReportFault(System.Fabric.FaultType)\" data-throw-if-not-resolved=\"false\"></xref> to report a <xref href=\"System.Fabric.FaultType.Permanent\" data-throw-if-not-resolved=\"false\"></xref> fault. \nWhen the service instance receives this method, it should immediately release and clean up all references and return.</p>\n"
  example: []
  syntax:
    content: void Abort()
    content.vb: Sub Abort
  overload: System.Fabric.IStatelessServiceInstance.Abort*
references:
- uid: System.Fabric
  commentId: N:System.Fabric
  isExternal: false
  name: System.Fabric
  nameWithType: System.Fabric
  fullName: System.Fabric
- uid: System.Fabric.IStatelessServiceInstance.System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
  commentId: M:System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  parent: System.Fabric.Messaging.Stream.ByteArraySerializer
  definition: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  name: Serialize<IStatelessServiceInstance>()
  nameWithType: ByteArraySerializer.Serialize<IStatelessServiceInstance>()
  fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<System.Fabric.IStatelessServiceInstance>()
  nameWithType.vb: ByteArraySerializer.Serialize(Of IStatelessServiceInstance)()
  fullname.vb: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of System.Fabric.IStatelessServiceInstance)()
  name.vb: Serialize(Of IStatelessServiceInstance)()
  spec.csharp:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
    name: Serialize<IStatelessServiceInstance>
    nameWithType: ByteArraySerializer.Serialize<IStatelessServiceInstance>
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<System.Fabric.IStatelessServiceInstance>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
    name: Serialize(Of IStatelessServiceInstance)
    nameWithType: ByteArraySerializer.Serialize(Of IStatelessServiceInstance)
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of System.Fabric.IStatelessServiceInstance)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  commentId: M:System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  isExternal: false
  name: Serialize<T>(T)
  nameWithType: ByteArraySerializer.Serialize<T>(T)
  fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<T>(T)
  nameWithType.vb: ByteArraySerializer.Serialize(Of T)(T)
  fullname.vb: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of T)(T)
  name.vb: Serialize(Of T)(T)
  spec.csharp:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
    name: Serialize<T>
    nameWithType: ByteArraySerializer.Serialize<T>
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
    name: Serialize(Of T)
    nameWithType: ByteArraySerializer.Serialize(Of T)
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.Messaging.Stream.ByteArraySerializer
  commentId: T:System.Fabric.Messaging.Stream.ByteArraySerializer
  parent: System.Fabric.Messaging.Stream
  isExternal: false
  name: ByteArraySerializer
  nameWithType: ByteArraySerializer
  fullName: System.Fabric.Messaging.Stream.ByteArraySerializer
- uid: System.Fabric.Messaging.Stream
  commentId: N:System.Fabric.Messaging.Stream
  isExternal: false
  name: System.Fabric.Messaging.Stream
  nameWithType: System.Fabric.Messaging.Stream
  fullName: System.Fabric.Messaging.Stream
- uid: System.Fabric.StatelessServiceInitializationParameters
  commentId: T:System.Fabric.StatelessServiceInitializationParameters
  parent: System.Fabric
  isExternal: false
  name: StatelessServiceInitializationParameters
  nameWithType: StatelessServiceInitializationParameters
  fullName: System.Fabric.StatelessServiceInitializationParameters
- uid: System.Fabric.IStatelessServiceInstance.Initialize*
  commentId: Overload:System.Fabric.IStatelessServiceInstance.Initialize
  isExternal: false
  name: Initialize
  nameWithType: IStatelessServiceInstance.Initialize
  fullName: System.Fabric.IStatelessServiceInstance.Initialize
- uid: System.Fabric.IStatelessServicePartition
  commentId: T:System.Fabric.IStatelessServicePartition
  parent: System.Fabric
  isExternal: false
  name: IStatelessServicePartition
  nameWithType: IStatelessServicePartition
  fullName: System.Fabric.IStatelessServicePartition
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullname.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Fabric.FabricClient.ServiceManagementClient.ResolveServicePartitionAsync(System.Uri)
  commentId: M:System.Fabric.FabricClient.ServiceManagementClient.ResolveServicePartitionAsync(System.Uri)
- uid: System.Fabric.IStatelessServiceInstance.OpenAsync*
  commentId: Overload:System.Fabric.IStatelessServiceInstance.OpenAsync
  isExternal: false
  name: OpenAsync
  nameWithType: IStatelessServiceInstance.OpenAsync
  fullName: System.Fabric.IStatelessServiceInstance.OpenAsync
- uid: System.Threading.Tasks.Task{System.String}
  commentId: T:System.Threading.Tasks.Task{System.String}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<String>
  nameWithType: Task<String>
  fullName: System.Threading.Tasks.Task<System.String>
  nameWithType.vb: Task(Of String)
  fullname.vb: System.Threading.Tasks.Task(Of System.String)
  name.vb: Task(Of String)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: false
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Fabric.IStatelessServiceInstance.CloseAsync*
  commentId: Overload:System.Fabric.IStatelessServiceInstance.CloseAsync
  isExternal: false
  name: CloseAsync
  nameWithType: IStatelessServiceInstance.CloseAsync
  fullName: System.Fabric.IStatelessServiceInstance.CloseAsync
- uid: System.Fabric.IServicePartition.ReportFault(System.Fabric.FaultType)
  commentId: M:System.Fabric.IServicePartition.ReportFault(System.Fabric.FaultType)
  parent: System.Fabric.IServicePartition
  isExternal: false
  name: ReportFault(FaultType)
  nameWithType: IServicePartition.ReportFault(FaultType)
  fullName: System.Fabric.IServicePartition.ReportFault(System.Fabric.FaultType)
  spec.csharp:
  - uid: System.Fabric.IServicePartition.ReportFault(System.Fabric.FaultType)
    name: ReportFault
    nameWithType: IServicePartition.ReportFault
    fullName: System.Fabric.IServicePartition.ReportFault
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Fabric.FaultType
    name: FaultType
    nameWithType: FaultType
    fullName: System.Fabric.FaultType
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Fabric.IServicePartition.ReportFault(System.Fabric.FaultType)
    name: ReportFault
    nameWithType: IServicePartition.ReportFault
    fullName: System.Fabric.IServicePartition.ReportFault
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Fabric.FaultType
    name: FaultType
    nameWithType: FaultType
    fullName: System.Fabric.FaultType
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.FaultType.Permanent
  commentId: F:System.Fabric.FaultType.Permanent
- uid: System.Fabric.IStatelessServiceInstance.Abort*
  commentId: Overload:System.Fabric.IStatelessServiceInstance.Abort
  isExternal: false
  name: Abort
  nameWithType: IStatelessServiceInstance.Abort
  fullName: System.Fabric.IStatelessServiceInstance.Abort
- uid: System.Fabric.IServicePartition
  commentId: T:System.Fabric.IServicePartition
  parent: System.Fabric
  isExternal: false
  name: IServicePartition
  nameWithType: IServicePartition
  fullName: System.Fabric.IServicePartition
