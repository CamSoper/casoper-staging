### YamlMime:ManagedReference
items:
- uid: System.Fabric.Query.ApplicationTypeList
  commentId: T:System.Fabric.Query.ApplicationTypeList
  id: ApplicationTypeList
  parent: System.Fabric.Query
  children:
  - System.Fabric.Query.ApplicationTypeList.Add(System.Fabric.Query.ApplicationType)
  - System.Fabric.Query.ApplicationTypeList.Clear
  - System.Fabric.Query.ApplicationTypeList.Contains(System.Fabric.Query.ApplicationType)
  - System.Fabric.Query.ApplicationTypeList.CopyTo(System.Fabric.Query.ApplicationType[],System.Int32)
  - System.Fabric.Query.ApplicationTypeList.Count
  - System.Fabric.Query.ApplicationTypeList.GetEnumerator
  - System.Fabric.Query.ApplicationTypeList.IndexOf(System.Fabric.Query.ApplicationType)
  - System.Fabric.Query.ApplicationTypeList.Insert(System.Int32,System.Fabric.Query.ApplicationType)
  - System.Fabric.Query.ApplicationTypeList.IsReadOnly
  - System.Fabric.Query.ApplicationTypeList.Item(System.Int32)
  - System.Fabric.Query.ApplicationTypeList.Remove(System.Fabric.Query.ApplicationType)
  - System.Fabric.Query.ApplicationTypeList.RemoveAt(System.Int32)
  - System.Fabric.Query.ApplicationTypeList.System#Collections#IEnumerable#GetEnumerator
  langs:
  - csharp
  - vb
  name: ApplicationTypeList
  nameWithType: ApplicationTypeList
  fullName: System.Fabric.Query.ApplicationTypeList
  type: Class
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/Query/ApplicationTypeList.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: ApplicationTypeList
    path: src/prod/src/managed/Api/src/System/Fabric/Query/ApplicationTypeList.cs
    startLine: 15
  assemblies:
  - System.Fabric
  namespace: System.Fabric.Query
  summary: "\n<p>Represents the list of the <xref href=\"System.Fabric.Query.ApplicationType\" data-throw-if-not-resolved=\"false\"></xref> retrieved by calling \n<xref href=\"System.Fabric.FabricClient.QueryClient.GetApplicationTypeListAsync(System.String)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example: []
  syntax:
    content: 'public sealed class ApplicationTypeList : IList<ApplicationType>, ICollection<ApplicationType>, IEnumerable<ApplicationType>, IEnumerable'
    content.vb: >-
      Public NotInheritable Class ApplicationTypeList
          Implements IList(Of ApplicationType), ICollection(Of ApplicationType), IEnumerable(Of ApplicationType), IEnumerable
  inheritance:
  - System.Object
  implements:
  - System.Collections.Generic.IList{System.Fabric.Query.ApplicationType}
  - System.Collections.Generic.ICollection{System.Fabric.Query.ApplicationType}
  - System.Collections.Generic.IEnumerable{System.Fabric.Query.ApplicationType}
  - System.Collections.IEnumerable
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  extensionMethods:
  - System.Fabric.Query.ApplicationTypeList.System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: System.Fabric.Query.ApplicationTypeList.IndexOf(System.Fabric.Query.ApplicationType)
  commentId: M:System.Fabric.Query.ApplicationTypeList.IndexOf(System.Fabric.Query.ApplicationType)
  id: IndexOf(System.Fabric.Query.ApplicationType)
  parent: System.Fabric.Query.ApplicationTypeList
  langs:
  - csharp
  - vb
  name: IndexOf(ApplicationType)
  nameWithType: ApplicationTypeList.IndexOf(ApplicationType)
  fullName: System.Fabric.Query.ApplicationTypeList.IndexOf(System.Fabric.Query.ApplicationType)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/Query/ApplicationTypeList.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: IndexOf
    path: src/prod/src/managed/Api/src/System/Fabric/Query/ApplicationTypeList.cs
    startLine: 38
  assemblies:
  - System.Fabric
  namespace: System.Fabric.Query
  summary: "\n<p>Returns the index of the specified item in this list.</p>\n"
  example: []
  syntax:
    content: public int IndexOf(ApplicationType item)
    content.vb: Public Function IndexOf(item As ApplicationType) As Integer
    parameters:
    - id: item
      type: System.Fabric.Query.ApplicationType
      description: "\n<p>The specified item in the list.</p>\n"
    return:
      type: System.Int32
      description: "\n<p>The index of the specified item in this list.</p>\n"
  overload: System.Fabric.Query.ApplicationTypeList.IndexOf*
  implements:
  - System.Collections.Generic.IList{System.Fabric.Query.ApplicationType}.IndexOf(System.Fabric.Query.ApplicationType)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.Query.ApplicationTypeList.Insert(System.Int32,System.Fabric.Query.ApplicationType)
  commentId: M:System.Fabric.Query.ApplicationTypeList.Insert(System.Int32,System.Fabric.Query.ApplicationType)
  id: Insert(System.Int32,System.Fabric.Query.ApplicationType)
  parent: System.Fabric.Query.ApplicationTypeList
  langs:
  - csharp
  - vb
  name: Insert(Int32, ApplicationType)
  nameWithType: ApplicationTypeList.Insert(Int32, ApplicationType)
  fullName: System.Fabric.Query.ApplicationTypeList.Insert(System.Int32, System.Fabric.Query.ApplicationType)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/Query/ApplicationTypeList.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: Insert
    path: src/prod/src/managed/Api/src/System/Fabric/Query/ApplicationTypeList.cs
    startLine: 52
  assemblies:
  - System.Fabric
  namespace: System.Fabric.Query
  summary: "\n<p>Inserts an item into this list at the specified index.</p>\n"
  example: []
  syntax:
    content: public void Insert(int index, ApplicationType item)
    content.vb: Public Sub Insert(index As Integer, item As ApplicationType)
    parameters:
    - id: index
      type: System.Int32
      description: "\n<p>The zero-based index at which item should be inserted.</p>\n"
    - id: item
      type: System.Fabric.Query.ApplicationType
      description: "\n<p>The object to insert into the list.</p>\n"
  overload: System.Fabric.Query.ApplicationTypeList.Insert*
  implements:
  - System.Collections.Generic.IList{System.Fabric.Query.ApplicationType}.Insert(System.Int32,System.Fabric.Query.ApplicationType)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.Query.ApplicationTypeList.RemoveAt(System.Int32)
  commentId: M:System.Fabric.Query.ApplicationTypeList.RemoveAt(System.Int32)
  id: RemoveAt(System.Int32)
  parent: System.Fabric.Query.ApplicationTypeList
  langs:
  - csharp
  - vb
  name: RemoveAt(Int32)
  nameWithType: ApplicationTypeList.RemoveAt(Int32)
  fullName: System.Fabric.Query.ApplicationTypeList.RemoveAt(System.Int32)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/Query/ApplicationTypeList.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: RemoveAt
    path: src/prod/src/managed/Api/src/System/Fabric/Query/ApplicationTypeList.cs
    startLine: 63
  assemblies:
  - System.Fabric
  namespace: System.Fabric.Query
  summary: "\n<p>Removes the item at the specified index from the list.</p>\n"
  example: []
  syntax:
    content: public void RemoveAt(int index)
    content.vb: Public Sub RemoveAt(index As Integer)
    parameters:
    - id: index
      type: System.Int32
      description: "\n<p>The zero-based index of the item to remove.</p>\n"
  overload: System.Fabric.Query.ApplicationTypeList.RemoveAt*
  implements:
  - System.Collections.Generic.IList{System.Fabric.Query.ApplicationType}.RemoveAt(System.Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.Query.ApplicationTypeList.Item(System.Int32)
  commentId: P:System.Fabric.Query.ApplicationTypeList.Item(System.Int32)
  id: Item(System.Int32)
  parent: System.Fabric.Query.ApplicationTypeList
  langs:
  - csharp
  - vb
  name: Item[Int32]
  nameWithType: ApplicationTypeList.Item[Int32]
  fullName: System.Fabric.Query.ApplicationTypeList.Item[System.Int32]
  type: Property
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/Query/ApplicationTypeList.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: this[]
    path: src/prod/src/managed/Api/src/System/Fabric/Query/ApplicationTypeList.cs
    startLine: 77
  assemblies:
  - System.Fabric
  namespace: System.Fabric.Query
  summary: "\n<p>Gets the item at the specified index.</p>\n"
  example: []
  syntax:
    content: public ApplicationType this[int index] { get; set; }
    content.vb: Public Property Item(index As Integer) As ApplicationType
    parameters:
    - id: index
      type: System.Int32
      description: "\n<p>The specified index.</p>\n"
    return:
      type: System.Fabric.Query.ApplicationType
      description: "\n<p>The item at the specified index.</p>\n"
  overload: System.Fabric.Query.ApplicationTypeList.Item*
  implements:
  - System.Collections.Generic.IList{System.Fabric.Query.ApplicationType}.Item(System.Int32)
  nameWithType.vb: ApplicationTypeList.Item(Int32)
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: System.Fabric.Query.ApplicationTypeList.Item(System.Int32)
  name.vb: Item(Int32)
- uid: System.Fabric.Query.ApplicationTypeList.Add(System.Fabric.Query.ApplicationType)
  commentId: M:System.Fabric.Query.ApplicationTypeList.Add(System.Fabric.Query.ApplicationType)
  id: Add(System.Fabric.Query.ApplicationType)
  parent: System.Fabric.Query.ApplicationTypeList
  langs:
  - csharp
  - vb
  name: Add(ApplicationType)
  nameWithType: ApplicationTypeList.Add(ApplicationType)
  fullName: System.Fabric.Query.ApplicationTypeList.Add(System.Fabric.Query.ApplicationType)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/Query/ApplicationTypeList.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: Add
    path: src/prod/src/managed/Api/src/System/Fabric/Query/ApplicationTypeList.cs
    startLine: 95
  assemblies:
  - System.Fabric
  namespace: System.Fabric.Query
  summary: "\n<p>Adds an item to this list.</p>\n"
  example: []
  syntax:
    content: public void Add(ApplicationType item)
    content.vb: Public Sub Add(item As ApplicationType)
    parameters:
    - id: item
      type: System.Fabric.Query.ApplicationType
      description: "\n<p>The item to add in the list.</p>\n"
  overload: System.Fabric.Query.ApplicationTypeList.Add*
  implements:
  - System.Collections.Generic.ICollection{System.Fabric.Query.ApplicationType}.Add(System.Fabric.Query.ApplicationType)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.Query.ApplicationTypeList.Clear
  commentId: M:System.Fabric.Query.ApplicationTypeList.Clear
  id: Clear
  parent: System.Fabric.Query.ApplicationTypeList
  langs:
  - csharp
  - vb
  name: Clear()
  nameWithType: ApplicationTypeList.Clear()
  fullName: System.Fabric.Query.ApplicationTypeList.Clear()
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/Query/ApplicationTypeList.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: Clear
    path: src/prod/src/managed/Api/src/System/Fabric/Query/ApplicationTypeList.cs
    startLine: 103
  assemblies:
  - System.Fabric
  namespace: System.Fabric.Query
  summary: "\n<p>Removes all items from this list.</p>\n"
  example: []
  syntax:
    content: public void Clear()
    content.vb: Public Sub Clear
  overload: System.Fabric.Query.ApplicationTypeList.Clear*
  implements:
  - System.Collections.Generic.ICollection{System.Fabric.Query.ApplicationType}.Clear
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.Query.ApplicationTypeList.Contains(System.Fabric.Query.ApplicationType)
  commentId: M:System.Fabric.Query.ApplicationTypeList.Contains(System.Fabric.Query.ApplicationType)
  id: Contains(System.Fabric.Query.ApplicationType)
  parent: System.Fabric.Query.ApplicationTypeList
  langs:
  - csharp
  - vb
  name: Contains(ApplicationType)
  nameWithType: ApplicationTypeList.Contains(ApplicationType)
  fullName: System.Fabric.Query.ApplicationTypeList.Contains(System.Fabric.Query.ApplicationType)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/Query/ApplicationTypeList.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: Contains
    path: src/prod/src/managed/Api/src/System/Fabric/Query/ApplicationTypeList.cs
    startLine: 118
  assemblies:
  - System.Fabric
  namespace: System.Fabric.Query
  summary: "\n<p>Returns true if the specified item is in the list.</p>\n"
  example: []
  syntax:
    content: public bool Contains(ApplicationType item)
    content.vb: Public Function Contains(item As ApplicationType) As Boolean
    parameters:
    - id: item
      type: System.Fabric.Query.ApplicationType
      description: "\n<p>The specified item in the list.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the specified item is in the list; otherwise, <strong>false</strong>.</p>\n"
  overload: System.Fabric.Query.ApplicationTypeList.Contains*
  implements:
  - System.Collections.Generic.ICollection{System.Fabric.Query.ApplicationType}.Contains(System.Fabric.Query.ApplicationType)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.Query.ApplicationTypeList.CopyTo(System.Fabric.Query.ApplicationType[],System.Int32)
  commentId: M:System.Fabric.Query.ApplicationTypeList.CopyTo(System.Fabric.Query.ApplicationType[],System.Int32)
  id: CopyTo(System.Fabric.Query.ApplicationType[],System.Int32)
  parent: System.Fabric.Query.ApplicationTypeList
  langs:
  - csharp
  - vb
  name: CopyTo(ApplicationType[], Int32)
  nameWithType: ApplicationTypeList.CopyTo(ApplicationType[], Int32)
  fullName: System.Fabric.Query.ApplicationTypeList.CopyTo(System.Fabric.Query.ApplicationType[], System.Int32)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/Query/ApplicationTypeList.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: CopyTo
    path: src/prod/src/managed/Api/src/System/Fabric/Query/ApplicationTypeList.cs
    startLine: 133
  assemblies:
  - System.Fabric
  namespace: System.Fabric.Query
  summary: "\n<p>Copies items from this list to the specified array starting at the specified index.</p>\n"
  example: []
  syntax:
    content: public void CopyTo(ApplicationType[] array, int arrayIndex)
    content.vb: Public Sub CopyTo(array As ApplicationType(), arrayIndex As Integer)
    parameters:
    - id: array
      type: System.Fabric.Query.ApplicationType[]
      description: "\n<p>The one-dimensional array that is the destination of elements copied from <xref href=\"System.Fabric.Query.ApplicationTypeList\" data-throw-if-not-resolved=\"false\"></xref>. The \narray must have zero-based indexing.</p>\n"
    - id: arrayIndex
      type: System.Int32
      description: "\n<p>The zero-based index in array at which copying begins.</p>\n"
  overload: System.Fabric.Query.ApplicationTypeList.CopyTo*
  implements:
  - System.Collections.Generic.ICollection{System.Fabric.Query.ApplicationType}.CopyTo(System.Fabric.Query.ApplicationType[],System.Int32)
  nameWithType.vb: ApplicationTypeList.CopyTo(ApplicationType(), Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Fabric.Query.ApplicationTypeList.CopyTo(System.Fabric.Query.ApplicationType(), System.Int32)
  name.vb: CopyTo(ApplicationType(), Int32)
- uid: System.Fabric.Query.ApplicationTypeList.Count
  commentId: P:System.Fabric.Query.ApplicationTypeList.Count
  id: Count
  parent: System.Fabric.Query.ApplicationTypeList
  langs:
  - csharp
  - vb
  name: Count
  nameWithType: ApplicationTypeList.Count
  fullName: System.Fabric.Query.ApplicationTypeList.Count
  type: Property
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/Query/ApplicationTypeList.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: Count
    path: src/prod/src/managed/Api/src/System/Fabric/Query/ApplicationTypeList.cs
    startLine: 144
  assemblies:
  - System.Fabric
  namespace: System.Fabric.Query
  summary: "\n<p>Gets the number of items in this list.</p>\n"
  example: []
  syntax:
    content: public int Count { get; }
    content.vb: Public ReadOnly Property Count As Integer
    parameters: []
    return:
      type: System.Int32
      description: "\n<p>The number of items in this list.</p>\n"
  overload: System.Fabric.Query.ApplicationTypeList.Count*
  implements:
  - System.Collections.Generic.ICollection{System.Fabric.Query.ApplicationType}.Count
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Fabric.Query.ApplicationTypeList.IsReadOnly
  commentId: P:System.Fabric.Query.ApplicationTypeList.IsReadOnly
  id: IsReadOnly
  parent: System.Fabric.Query.ApplicationTypeList
  langs:
  - csharp
  - vb
  name: IsReadOnly
  nameWithType: ApplicationTypeList.IsReadOnly
  fullName: System.Fabric.Query.ApplicationTypeList.IsReadOnly
  type: Property
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/Query/ApplicationTypeList.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: IsReadOnly
    path: src/prod/src/managed/Api/src/System/Fabric/Query/ApplicationTypeList.cs
    startLine: 156
  assemblies:
  - System.Fabric
  namespace: System.Fabric.Query
  summary: "\n<p>Gets or sets a value whether the list can only be modified if this property is false.</p>\n"
  example: []
  syntax:
    content: public bool IsReadOnly { get; }
    content.vb: Public ReadOnly Property IsReadOnly As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the list can only be modified; otherwise <strong>false</strong>.</p>\n"
  overload: System.Fabric.Query.ApplicationTypeList.IsReadOnly*
  implements:
  - System.Collections.Generic.ICollection{System.Fabric.Query.ApplicationType}.IsReadOnly
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Fabric.Query.ApplicationTypeList.Remove(System.Fabric.Query.ApplicationType)
  commentId: M:System.Fabric.Query.ApplicationTypeList.Remove(System.Fabric.Query.ApplicationType)
  id: Remove(System.Fabric.Query.ApplicationType)
  parent: System.Fabric.Query.ApplicationTypeList
  langs:
  - csharp
  - vb
  name: Remove(ApplicationType)
  nameWithType: ApplicationTypeList.Remove(ApplicationType)
  fullName: System.Fabric.Query.ApplicationTypeList.Remove(System.Fabric.Query.ApplicationType)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/Query/ApplicationTypeList.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: Remove
    path: src/prod/src/managed/Api/src/System/Fabric/Query/ApplicationTypeList.cs
    startLine: 171
  assemblies:
  - System.Fabric
  namespace: System.Fabric.Query
  summary: "\n<p>Removes the specified item from the list.</p>\n"
  example: []
  syntax:
    content: public bool Remove(ApplicationType item)
    content.vb: Public Function Remove(item As ApplicationType) As Boolean
    parameters:
    - id: item
      type: System.Fabric.Query.ApplicationType
      description: "\n<p>The object to remove from the list.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the item was successfully removed from the list; otherwise, <strong>false</strong>.</p>\n"
  overload: System.Fabric.Query.ApplicationTypeList.Remove*
  implements:
  - System.Collections.Generic.ICollection{System.Fabric.Query.ApplicationType}.Remove(System.Fabric.Query.ApplicationType)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.Query.ApplicationTypeList.GetEnumerator
  commentId: M:System.Fabric.Query.ApplicationTypeList.GetEnumerator
  id: GetEnumerator
  parent: System.Fabric.Query.ApplicationTypeList
  langs:
  - csharp
  - vb
  name: GetEnumerator()
  nameWithType: ApplicationTypeList.GetEnumerator()
  fullName: System.Fabric.Query.ApplicationTypeList.GetEnumerator()
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/Query/ApplicationTypeList.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: GetEnumerator
    path: src/prod/src/managed/Api/src/System/Fabric/Query/ApplicationTypeList.cs
    startLine: 182
  assemblies:
  - System.Fabric
  namespace: System.Fabric.Query
  summary: "\n<p>Returns an enumerator to items in this list.</p>\n"
  example: []
  syntax:
    content: public IEnumerator<ApplicationType> GetEnumerator()
    content.vb: Public Function GetEnumerator As IEnumerator(Of ApplicationType)
    return:
      type: System.Collections.Generic.IEnumerator{System.Fabric.Query.ApplicationType}
      description: "\n<p>An enumerator to items in this list.</p>\n"
  overload: System.Fabric.Query.ApplicationTypeList.GetEnumerator*
  implements:
  - System.Collections.Generic.IEnumerable{System.Fabric.Query.ApplicationType}.GetEnumerator
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.Query.ApplicationTypeList.System#Collections#IEnumerable#GetEnumerator
  commentId: M:System.Fabric.Query.ApplicationTypeList.System#Collections#IEnumerable#GetEnumerator
  id: System#Collections#IEnumerable#GetEnumerator
  isEii: true
  parent: System.Fabric.Query.ApplicationTypeList
  langs:
  - csharp
  - vb
  name: IEnumerable.GetEnumerator()
  nameWithType: ApplicationTypeList.IEnumerable.GetEnumerator()
  fullName: System.Fabric.Query.ApplicationTypeList.System.Collections.IEnumerable.GetEnumerator()
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/Query/ApplicationTypeList.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: System.Collections.IEnumerable.GetEnumerator
    path: src/prod/src/managed/Api/src/System/Fabric/Query/ApplicationTypeList.cs
    startLine: 193
  assemblies:
  - System.Fabric
  namespace: System.Fabric.Query
  summary: "\n<p>Gets an enumerator to items in this list.</p>\n"
  example: []
  syntax:
    content: IEnumerator IEnumerable.GetEnumerator()
    content.vb: Function System.Collections.IEnumerable.GetEnumerator As IEnumerator Implements IEnumerable.GetEnumerator
    return:
      type: System.Collections.IEnumerator
      description: "\n<p>An enumerator to items in this list.</p>\n"
  overload: System.Fabric.Query.ApplicationTypeList.System#Collections#IEnumerable#GetEnumerator*
  implements:
  - System.Collections.IEnumerable.GetEnumerator
  nameWithType.vb: ApplicationTypeList.System.Collections.IEnumerable.GetEnumerator()
  name.vb: System.Collections.IEnumerable.GetEnumerator()
references:
- uid: System.Fabric.Query.ApplicationType
  commentId: T:System.Fabric.Query.ApplicationType
  parent: System.Fabric.Query
  isExternal: false
  name: ApplicationType
  nameWithType: ApplicationType
  fullName: System.Fabric.Query.ApplicationType
- uid: System.Fabric.FabricClient.QueryClient.GetApplicationTypeListAsync(System.String)
  commentId: M:System.Fabric.FabricClient.QueryClient.GetApplicationTypeListAsync(System.String)
- uid: System.Fabric.Query
  commentId: N:System.Fabric.Query
  isExternal: false
  name: System.Fabric.Query
  nameWithType: System.Fabric.Query
  fullName: System.Fabric.Query
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Collections.Generic.IList{System.Fabric.Query.ApplicationType}
  commentId: T:System.Collections.Generic.IList{System.Fabric.Query.ApplicationType}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<ApplicationType>
  nameWithType: IList<ApplicationType>
  fullName: System.Collections.Generic.IList<System.Fabric.Query.ApplicationType>
  nameWithType.vb: IList(Of ApplicationType)
  fullname.vb: System.Collections.Generic.IList(Of System.Fabric.Query.ApplicationType)
  name.vb: IList(Of ApplicationType)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Fabric.Query.ApplicationType
    name: ApplicationType
    nameWithType: ApplicationType
    fullName: System.Fabric.Query.ApplicationType
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Fabric.Query.ApplicationType
    name: ApplicationType
    nameWithType: ApplicationType
    fullName: System.Fabric.Query.ApplicationType
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection{System.Fabric.Query.ApplicationType}
  commentId: T:System.Collections.Generic.ICollection{System.Fabric.Query.ApplicationType}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ICollection`1
  name: ICollection<ApplicationType>
  nameWithType: ICollection<ApplicationType>
  fullName: System.Collections.Generic.ICollection<System.Fabric.Query.ApplicationType>
  nameWithType.vb: ICollection(Of ApplicationType)
  fullname.vb: System.Collections.Generic.ICollection(Of System.Fabric.Query.ApplicationType)
  name.vb: ICollection(Of ApplicationType)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Fabric.Query.ApplicationType
    name: ApplicationType
    nameWithType: ApplicationType
    fullName: System.Fabric.Query.ApplicationType
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Fabric.Query.ApplicationType
    name: ApplicationType
    nameWithType: ApplicationType
    fullName: System.Fabric.Query.ApplicationType
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{System.Fabric.Query.ApplicationType}
  commentId: T:System.Collections.Generic.IEnumerable{System.Fabric.Query.ApplicationType}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<ApplicationType>
  nameWithType: IEnumerable<ApplicationType>
  fullName: System.Collections.Generic.IEnumerable<System.Fabric.Query.ApplicationType>
  nameWithType.vb: IEnumerable(Of ApplicationType)
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Fabric.Query.ApplicationType)
  name.vb: IEnumerable(Of ApplicationType)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Fabric.Query.ApplicationType
    name: ApplicationType
    nameWithType: ApplicationType
    fullName: System.Fabric.Query.ApplicationType
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Fabric.Query.ApplicationType
    name: ApplicationType
    nameWithType: ApplicationType
    fullName: System.Fabric.Query.ApplicationType
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IEnumerable
  commentId: T:System.Collections.IEnumerable
  parent: System.Collections
  isExternal: true
  name: IEnumerable
  nameWithType: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.Query.ApplicationTypeList.System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
  commentId: M:System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  parent: System.Fabric.Messaging.Stream.ByteArraySerializer
  definition: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  name: Serialize<ApplicationTypeList>()
  nameWithType: ByteArraySerializer.Serialize<ApplicationTypeList>()
  fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<System.Fabric.Query.ApplicationTypeList>()
  nameWithType.vb: ByteArraySerializer.Serialize(Of ApplicationTypeList)()
  fullname.vb: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of System.Fabric.Query.ApplicationTypeList)()
  name.vb: Serialize(Of ApplicationTypeList)()
  spec.csharp:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
    name: Serialize<ApplicationTypeList>
    nameWithType: ByteArraySerializer.Serialize<ApplicationTypeList>
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<System.Fabric.Query.ApplicationTypeList>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
    name: Serialize(Of ApplicationTypeList)
    nameWithType: ByteArraySerializer.Serialize(Of ApplicationTypeList)
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of System.Fabric.Query.ApplicationTypeList)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Collections.Generic.IList`1
  commentId: T:System.Collections.Generic.IList`1
  isExternal: true
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullname.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Collections.Generic.ICollection`1
  commentId: T:System.Collections.Generic.ICollection`1
  isExternal: true
  name: ICollection<T>
  nameWithType: ICollection<T>
  fullName: System.Collections.Generic.ICollection<T>
  nameWithType.vb: ICollection(Of T)
  fullname.vb: System.Collections.Generic.ICollection(Of T)
  name.vb: ICollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullname.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections
  commentId: N:System.Collections
  isExternal: false
  name: System.Collections
  nameWithType: System.Collections
  fullName: System.Collections
- uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  commentId: M:System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  isExternal: false
  name: Serialize<T>(T)
  nameWithType: ByteArraySerializer.Serialize<T>(T)
  fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<T>(T)
  nameWithType.vb: ByteArraySerializer.Serialize(Of T)(T)
  fullname.vb: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of T)(T)
  name.vb: Serialize(Of T)(T)
  spec.csharp:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
    name: Serialize<T>
    nameWithType: ByteArraySerializer.Serialize<T>
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
    name: Serialize(Of T)
    nameWithType: ByteArraySerializer.Serialize(Of T)
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.Messaging.Stream.ByteArraySerializer
  commentId: T:System.Fabric.Messaging.Stream.ByteArraySerializer
  parent: System.Fabric.Messaging.Stream
  isExternal: false
  name: ByteArraySerializer
  nameWithType: ByteArraySerializer
  fullName: System.Fabric.Messaging.Stream.ByteArraySerializer
- uid: System.Fabric.Messaging.Stream
  commentId: N:System.Fabric.Messaging.Stream
  isExternal: false
  name: System.Fabric.Messaging.Stream
  nameWithType: System.Fabric.Messaging.Stream
  fullName: System.Fabric.Messaging.Stream
- uid: System.Fabric.Query.ApplicationTypeList.IndexOf*
  commentId: Overload:System.Fabric.Query.ApplicationTypeList.IndexOf
  isExternal: false
  name: IndexOf
  nameWithType: ApplicationTypeList.IndexOf
  fullName: System.Fabric.Query.ApplicationTypeList.IndexOf
- uid: System.Collections.Generic.IList{System.Fabric.Query.ApplicationType}.IndexOf(System.Fabric.Query.ApplicationType)
  commentId: M:System.Collections.Generic.IList{System.Fabric.Query.ApplicationType}.IndexOf(System.Fabric.Query.ApplicationType)
  parent: System.Collections.Generic.IList{System.Fabric.Query.ApplicationType}
  definition: System.Collections.Generic.IList`1.IndexOf(`0)
  name: IndexOf(ApplicationType)
  nameWithType: IList<ApplicationType>.IndexOf(ApplicationType)
  fullName: System.Collections.Generic.IList<System.Fabric.Query.ApplicationType>.IndexOf(System.Fabric.Query.ApplicationType)
  nameWithType.vb: IList(Of ApplicationType).IndexOf(ApplicationType)
  fullname.vb: System.Collections.Generic.IList(Of System.Fabric.Query.ApplicationType).IndexOf(System.Fabric.Query.ApplicationType)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1.IndexOf(`0)
    name: IndexOf
    nameWithType: IList<ApplicationType>.IndexOf
    fullName: System.Collections.Generic.IList<System.Fabric.Query.ApplicationType>.IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Fabric.Query.ApplicationType
    name: ApplicationType
    nameWithType: ApplicationType
    fullName: System.Fabric.Query.ApplicationType
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IList`1.IndexOf(`0)
    name: IndexOf
    nameWithType: IList(Of ApplicationType).IndexOf
    fullName: System.Collections.Generic.IList(Of System.Fabric.Query.ApplicationType).IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Fabric.Query.ApplicationType
    name: ApplicationType
    nameWithType: ApplicationType
    fullName: System.Fabric.Query.ApplicationType
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Collections.Generic.IList`1.IndexOf(`0)
  commentId: M:System.Collections.Generic.IList`1.IndexOf(`0)
  isExternal: true
  name: IndexOf(T)
  nameWithType: IList<T>.IndexOf(T)
  fullName: System.Collections.Generic.IList<T>.IndexOf(T)
  nameWithType.vb: IList(Of T).IndexOf(T)
  fullname.vb: System.Collections.Generic.IList(Of T).IndexOf(T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1.IndexOf(`0)
    name: IndexOf
    nameWithType: IList<T>.IndexOf
    fullName: System.Collections.Generic.IList<T>.IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IList`1.IndexOf(`0)
    name: IndexOf
    nameWithType: IList(Of T).IndexOf
    fullName: System.Collections.Generic.IList(Of T).IndexOf
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.Query.ApplicationTypeList.Insert*
  commentId: Overload:System.Fabric.Query.ApplicationTypeList.Insert
  isExternal: false
  name: Insert
  nameWithType: ApplicationTypeList.Insert
  fullName: System.Fabric.Query.ApplicationTypeList.Insert
- uid: System.Collections.Generic.IList{System.Fabric.Query.ApplicationType}.Insert(System.Int32,System.Fabric.Query.ApplicationType)
  commentId: M:System.Collections.Generic.IList{System.Fabric.Query.ApplicationType}.Insert(System.Int32,System.Fabric.Query.ApplicationType)
  parent: System.Collections.Generic.IList{System.Fabric.Query.ApplicationType}
  definition: System.Collections.Generic.IList`1.Insert(System.Int32,`0)
  name: Insert(Int32, ApplicationType)
  nameWithType: IList<ApplicationType>.Insert(Int32, ApplicationType)
  fullName: System.Collections.Generic.IList<System.Fabric.Query.ApplicationType>.Insert(System.Int32, System.Fabric.Query.ApplicationType)
  nameWithType.vb: IList(Of ApplicationType).Insert(Int32, ApplicationType)
  fullname.vb: System.Collections.Generic.IList(Of System.Fabric.Query.ApplicationType).Insert(System.Int32, System.Fabric.Query.ApplicationType)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1.Insert(System.Int32,`0)
    name: Insert
    nameWithType: IList<ApplicationType>.Insert
    fullName: System.Collections.Generic.IList<System.Fabric.Query.ApplicationType>.Insert
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Fabric.Query.ApplicationType
    name: ApplicationType
    nameWithType: ApplicationType
    fullName: System.Fabric.Query.ApplicationType
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IList`1.Insert(System.Int32,`0)
    name: Insert
    nameWithType: IList(Of ApplicationType).Insert
    fullName: System.Collections.Generic.IList(Of System.Fabric.Query.ApplicationType).Insert
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Fabric.Query.ApplicationType
    name: ApplicationType
    nameWithType: ApplicationType
    fullName: System.Fabric.Query.ApplicationType
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList`1.Insert(System.Int32,`0)
  commentId: M:System.Collections.Generic.IList`1.Insert(System.Int32,`0)
  isExternal: true
  name: Insert(Int32, T)
  nameWithType: IList<T>.Insert(Int32, T)
  fullName: System.Collections.Generic.IList<T>.Insert(System.Int32, T)
  nameWithType.vb: IList(Of T).Insert(Int32, T)
  fullname.vb: System.Collections.Generic.IList(Of T).Insert(System.Int32, T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1.Insert(System.Int32,`0)
    name: Insert
    nameWithType: IList<T>.Insert
    fullName: System.Collections.Generic.IList<T>.Insert
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IList`1.Insert(System.Int32,`0)
    name: Insert
    nameWithType: IList(Of T).Insert
    fullName: System.Collections.Generic.IList(Of T).Insert
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.Query.ApplicationTypeList.RemoveAt*
  commentId: Overload:System.Fabric.Query.ApplicationTypeList.RemoveAt
  isExternal: false
  name: RemoveAt
  nameWithType: ApplicationTypeList.RemoveAt
  fullName: System.Fabric.Query.ApplicationTypeList.RemoveAt
- uid: System.Collections.Generic.IList{System.Fabric.Query.ApplicationType}.RemoveAt(System.Int32)
  commentId: M:System.Collections.Generic.IList{System.Fabric.Query.ApplicationType}.RemoveAt(System.Int32)
  parent: System.Collections.Generic.IList{System.Fabric.Query.ApplicationType}
  definition: System.Collections.Generic.IList`1.RemoveAt(System.Int32)
  name: RemoveAt(Int32)
  nameWithType: IList<ApplicationType>.RemoveAt(Int32)
  fullName: System.Collections.Generic.IList<System.Fabric.Query.ApplicationType>.RemoveAt(System.Int32)
  nameWithType.vb: IList(Of ApplicationType).RemoveAt(Int32)
  fullname.vb: System.Collections.Generic.IList(Of System.Fabric.Query.ApplicationType).RemoveAt(System.Int32)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1.RemoveAt(System.Int32)
    name: RemoveAt
    nameWithType: IList<ApplicationType>.RemoveAt
    fullName: System.Collections.Generic.IList<System.Fabric.Query.ApplicationType>.RemoveAt
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IList`1.RemoveAt(System.Int32)
    name: RemoveAt
    nameWithType: IList(Of ApplicationType).RemoveAt
    fullName: System.Collections.Generic.IList(Of System.Fabric.Query.ApplicationType).RemoveAt
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList`1.RemoveAt(System.Int32)
  commentId: M:System.Collections.Generic.IList`1.RemoveAt(System.Int32)
  isExternal: true
  name: RemoveAt(Int32)
  nameWithType: IList<T>.RemoveAt(Int32)
  fullName: System.Collections.Generic.IList<T>.RemoveAt(System.Int32)
  nameWithType.vb: IList(Of T).RemoveAt(Int32)
  fullname.vb: System.Collections.Generic.IList(Of T).RemoveAt(System.Int32)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1.RemoveAt(System.Int32)
    name: RemoveAt
    nameWithType: IList<T>.RemoveAt
    fullName: System.Collections.Generic.IList<T>.RemoveAt
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IList`1.RemoveAt(System.Int32)
    name: RemoveAt
    nameWithType: IList(Of T).RemoveAt
    fullName: System.Collections.Generic.IList(Of T).RemoveAt
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.Query.ApplicationTypeList.Item*
  commentId: Overload:System.Fabric.Query.ApplicationTypeList.Item
  isExternal: false
  name: Item
  nameWithType: ApplicationTypeList.Item
  fullName: System.Fabric.Query.ApplicationTypeList.Item
- uid: System.Collections.Generic.IList{System.Fabric.Query.ApplicationType}.Item(System.Int32)
  commentId: P:System.Collections.Generic.IList{System.Fabric.Query.ApplicationType}.Item(System.Int32)
  parent: System.Collections.Generic.IList{System.Fabric.Query.ApplicationType}
  definition: System.Collections.Generic.IList`1.Item(System.Int32)
  name: Item[Int32]
  nameWithType: IList<ApplicationType>.Item[Int32]
  fullName: System.Collections.Generic.IList<System.Fabric.Query.ApplicationType>.Item[System.Int32]
  nameWithType.vb: IList(Of ApplicationType).Item(Int32)
  fullname.vb: System.Collections.Generic.IList(Of System.Fabric.Query.ApplicationType).Item(System.Int32)
  name.vb: Item(Int32)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1.Item(System.Int32)
    name: Item
    nameWithType: IList<ApplicationType>.Item
    fullName: System.Collections.Generic.IList<System.Fabric.Query.ApplicationType>.Item
    isExternal: true
  - name: '['
    nameWithType: '['
    fullName: '['
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ']'
    nameWithType: ']'
    fullName: ']'
  spec.vb:
  - uid: System.Collections.Generic.IList`1.Item(System.Int32)
    name: Item
    nameWithType: IList(Of ApplicationType).Item
    fullName: System.Collections.Generic.IList(Of System.Fabric.Query.ApplicationType).Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList`1.Item(System.Int32)
  commentId: P:System.Collections.Generic.IList`1.Item(System.Int32)
  isExternal: true
  name: Item[Int32]
  nameWithType: IList<T>.Item[Int32]
  fullName: System.Collections.Generic.IList<T>.Item[System.Int32]
  nameWithType.vb: IList(Of T).Item(Int32)
  fullname.vb: System.Collections.Generic.IList(Of T).Item(System.Int32)
  name.vb: Item(Int32)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1.Item(System.Int32)
    name: Item
    nameWithType: IList<T>.Item
    fullName: System.Collections.Generic.IList<T>.Item
    isExternal: true
  - name: '['
    nameWithType: '['
    fullName: '['
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ']'
    nameWithType: ']'
    fullName: ']'
  spec.vb:
  - uid: System.Collections.Generic.IList`1.Item(System.Int32)
    name: Item
    nameWithType: IList(Of T).Item
    fullName: System.Collections.Generic.IList(Of T).Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.Query.ApplicationTypeList.Add*
  commentId: Overload:System.Fabric.Query.ApplicationTypeList.Add
  isExternal: false
  name: Add
  nameWithType: ApplicationTypeList.Add
  fullName: System.Fabric.Query.ApplicationTypeList.Add
- uid: System.Collections.Generic.ICollection{System.Fabric.Query.ApplicationType}.Add(System.Fabric.Query.ApplicationType)
  commentId: M:System.Collections.Generic.ICollection{System.Fabric.Query.ApplicationType}.Add(System.Fabric.Query.ApplicationType)
  parent: System.Collections.Generic.ICollection{System.Fabric.Query.ApplicationType}
  definition: System.Collections.Generic.ICollection`1.Add(`0)
  name: Add(ApplicationType)
  nameWithType: ICollection<ApplicationType>.Add(ApplicationType)
  fullName: System.Collections.Generic.ICollection<System.Fabric.Query.ApplicationType>.Add(System.Fabric.Query.ApplicationType)
  nameWithType.vb: ICollection(Of ApplicationType).Add(ApplicationType)
  fullname.vb: System.Collections.Generic.ICollection(Of System.Fabric.Query.ApplicationType).Add(System.Fabric.Query.ApplicationType)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Add(`0)
    name: Add
    nameWithType: ICollection<ApplicationType>.Add
    fullName: System.Collections.Generic.ICollection<System.Fabric.Query.ApplicationType>.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Fabric.Query.ApplicationType
    name: ApplicationType
    nameWithType: ApplicationType
    fullName: System.Fabric.Query.ApplicationType
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Add(`0)
    name: Add
    nameWithType: ICollection(Of ApplicationType).Add
    fullName: System.Collections.Generic.ICollection(Of System.Fabric.Query.ApplicationType).Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Fabric.Query.ApplicationType
    name: ApplicationType
    nameWithType: ApplicationType
    fullName: System.Fabric.Query.ApplicationType
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1.Add(`0)
  commentId: M:System.Collections.Generic.ICollection`1.Add(`0)
  isExternal: true
  name: Add(T)
  nameWithType: ICollection<T>.Add(T)
  fullName: System.Collections.Generic.ICollection<T>.Add(T)
  nameWithType.vb: ICollection(Of T).Add(T)
  fullname.vb: System.Collections.Generic.ICollection(Of T).Add(T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Add(`0)
    name: Add
    nameWithType: ICollection<T>.Add
    fullName: System.Collections.Generic.ICollection<T>.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Add(`0)
    name: Add
    nameWithType: ICollection(Of T).Add
    fullName: System.Collections.Generic.ICollection(Of T).Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.Query.ApplicationTypeList.Clear*
  commentId: Overload:System.Fabric.Query.ApplicationTypeList.Clear
  isExternal: false
  name: Clear
  nameWithType: ApplicationTypeList.Clear
  fullName: System.Fabric.Query.ApplicationTypeList.Clear
- uid: System.Collections.Generic.ICollection{System.Fabric.Query.ApplicationType}.Clear
  commentId: M:System.Collections.Generic.ICollection{System.Fabric.Query.ApplicationType}.Clear
  parent: System.Collections.Generic.ICollection{System.Fabric.Query.ApplicationType}
  definition: System.Collections.Generic.ICollection`1.Clear
  name: Clear()
  nameWithType: ICollection<ApplicationType>.Clear()
  fullName: System.Collections.Generic.ICollection<System.Fabric.Query.ApplicationType>.Clear()
  nameWithType.vb: ICollection(Of ApplicationType).Clear()
  fullname.vb: System.Collections.Generic.ICollection(Of System.Fabric.Query.ApplicationType).Clear()
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Clear
    name: Clear
    nameWithType: ICollection<ApplicationType>.Clear
    fullName: System.Collections.Generic.ICollection<System.Fabric.Query.ApplicationType>.Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Clear
    name: Clear
    nameWithType: ICollection(Of ApplicationType).Clear
    fullName: System.Collections.Generic.ICollection(Of System.Fabric.Query.ApplicationType).Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1.Clear
  commentId: M:System.Collections.Generic.ICollection`1.Clear
  isExternal: true
  name: Clear()
  nameWithType: ICollection<T>.Clear()
  fullName: System.Collections.Generic.ICollection<T>.Clear()
  nameWithType.vb: ICollection(Of T).Clear()
  fullname.vb: System.Collections.Generic.ICollection(Of T).Clear()
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Clear
    name: Clear
    nameWithType: ICollection<T>.Clear
    fullName: System.Collections.Generic.ICollection<T>.Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Clear
    name: Clear
    nameWithType: ICollection(Of T).Clear
    fullName: System.Collections.Generic.ICollection(Of T).Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.Query.ApplicationTypeList.Contains*
  commentId: Overload:System.Fabric.Query.ApplicationTypeList.Contains
  isExternal: false
  name: Contains
  nameWithType: ApplicationTypeList.Contains
  fullName: System.Fabric.Query.ApplicationTypeList.Contains
- uid: System.Collections.Generic.ICollection{System.Fabric.Query.ApplicationType}.Contains(System.Fabric.Query.ApplicationType)
  commentId: M:System.Collections.Generic.ICollection{System.Fabric.Query.ApplicationType}.Contains(System.Fabric.Query.ApplicationType)
  parent: System.Collections.Generic.ICollection{System.Fabric.Query.ApplicationType}
  definition: System.Collections.Generic.ICollection`1.Contains(`0)
  name: Contains(ApplicationType)
  nameWithType: ICollection<ApplicationType>.Contains(ApplicationType)
  fullName: System.Collections.Generic.ICollection<System.Fabric.Query.ApplicationType>.Contains(System.Fabric.Query.ApplicationType)
  nameWithType.vb: ICollection(Of ApplicationType).Contains(ApplicationType)
  fullname.vb: System.Collections.Generic.ICollection(Of System.Fabric.Query.ApplicationType).Contains(System.Fabric.Query.ApplicationType)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Contains(`0)
    name: Contains
    nameWithType: ICollection<ApplicationType>.Contains
    fullName: System.Collections.Generic.ICollection<System.Fabric.Query.ApplicationType>.Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Fabric.Query.ApplicationType
    name: ApplicationType
    nameWithType: ApplicationType
    fullName: System.Fabric.Query.ApplicationType
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Contains(`0)
    name: Contains
    nameWithType: ICollection(Of ApplicationType).Contains
    fullName: System.Collections.Generic.ICollection(Of System.Fabric.Query.ApplicationType).Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Fabric.Query.ApplicationType
    name: ApplicationType
    nameWithType: ApplicationType
    fullName: System.Fabric.Query.ApplicationType
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Collections.Generic.ICollection`1.Contains(`0)
  commentId: M:System.Collections.Generic.ICollection`1.Contains(`0)
  isExternal: true
  name: Contains(T)
  nameWithType: ICollection<T>.Contains(T)
  fullName: System.Collections.Generic.ICollection<T>.Contains(T)
  nameWithType.vb: ICollection(Of T).Contains(T)
  fullname.vb: System.Collections.Generic.ICollection(Of T).Contains(T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Contains(`0)
    name: Contains
    nameWithType: ICollection<T>.Contains
    fullName: System.Collections.Generic.ICollection<T>.Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Contains(`0)
    name: Contains
    nameWithType: ICollection(Of T).Contains
    fullName: System.Collections.Generic.ICollection(Of T).Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.Query.ApplicationTypeList
  commentId: T:System.Fabric.Query.ApplicationTypeList
  isExternal: false
  name: ApplicationTypeList
  nameWithType: ApplicationTypeList
  fullName: System.Fabric.Query.ApplicationTypeList
- uid: System.Fabric.Query.ApplicationTypeList.CopyTo*
  commentId: Overload:System.Fabric.Query.ApplicationTypeList.CopyTo
  isExternal: false
  name: CopyTo
  nameWithType: ApplicationTypeList.CopyTo
  fullName: System.Fabric.Query.ApplicationTypeList.CopyTo
- uid: System.Collections.Generic.ICollection{System.Fabric.Query.ApplicationType}.CopyTo(System.Fabric.Query.ApplicationType[],System.Int32)
  commentId: M:System.Collections.Generic.ICollection{System.Fabric.Query.ApplicationType}.CopyTo(System.Fabric.Query.ApplicationType[],System.Int32)
  parent: System.Collections.Generic.ICollection{System.Fabric.Query.ApplicationType}
  definition: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
  name: CopyTo(ApplicationType[], Int32)
  nameWithType: ICollection<ApplicationType>.CopyTo(ApplicationType[], Int32)
  fullName: System.Collections.Generic.ICollection<System.Fabric.Query.ApplicationType>.CopyTo(System.Fabric.Query.ApplicationType[], System.Int32)
  nameWithType.vb: ICollection(Of ApplicationType).CopyTo(ApplicationType(), Int32)
  fullname.vb: System.Collections.Generic.ICollection(Of System.Fabric.Query.ApplicationType).CopyTo(System.Fabric.Query.ApplicationType(), System.Int32)
  name.vb: CopyTo(ApplicationType(), Int32)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    nameWithType: ICollection<ApplicationType>.CopyTo
    fullName: System.Collections.Generic.ICollection<System.Fabric.Query.ApplicationType>.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Fabric.Query.ApplicationType
    name: ApplicationType
    nameWithType: ApplicationType
    fullName: System.Fabric.Query.ApplicationType
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    nameWithType: ICollection(Of ApplicationType).CopyTo
    fullName: System.Collections.Generic.ICollection(Of System.Fabric.Query.ApplicationType).CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Fabric.Query.ApplicationType
    name: ApplicationType
    nameWithType: ApplicationType
    fullName: System.Fabric.Query.ApplicationType
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.Query.ApplicationType[]
  name: ApplicationType[]
  nameWithType: ApplicationType[]
  fullName: System.Fabric.Query.ApplicationType[]
  nameWithType.vb: ApplicationType()
  fullname.vb: System.Fabric.Query.ApplicationType()
  name.vb: ApplicationType()
  spec.csharp:
  - uid: System.Fabric.Query.ApplicationType
    name: ApplicationType
    nameWithType: ApplicationType
    fullName: System.Fabric.Query.ApplicationType
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Fabric.Query.ApplicationType
    name: ApplicationType
    nameWithType: ApplicationType
    fullName: System.Fabric.Query.ApplicationType
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
  commentId: M:System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
  isExternal: true
  name: CopyTo(T[], Int32)
  nameWithType: ICollection<T>.CopyTo(T[], Int32)
  fullName: System.Collections.Generic.ICollection<T>.CopyTo(T[], System.Int32)
  nameWithType.vb: ICollection(Of T).CopyTo(T(), Int32)
  fullname.vb: System.Collections.Generic.ICollection(Of T).CopyTo(T(), System.Int32)
  name.vb: CopyTo(T(), Int32)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    nameWithType: ICollection<T>.CopyTo
    fullName: System.Collections.Generic.ICollection<T>.CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    nameWithType: ICollection(Of T).CopyTo
    fullName: System.Collections.Generic.ICollection(Of T).CopyTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.Query.ApplicationTypeList.Count*
  commentId: Overload:System.Fabric.Query.ApplicationTypeList.Count
  isExternal: false
  name: Count
  nameWithType: ApplicationTypeList.Count
  fullName: System.Fabric.Query.ApplicationTypeList.Count
- uid: System.Collections.Generic.ICollection{System.Fabric.Query.ApplicationType}.Count
  commentId: P:System.Collections.Generic.ICollection{System.Fabric.Query.ApplicationType}.Count
  parent: System.Collections.Generic.ICollection{System.Fabric.Query.ApplicationType}
  definition: System.Collections.Generic.ICollection`1.Count
  name: Count
  nameWithType: ICollection<ApplicationType>.Count
  fullName: System.Collections.Generic.ICollection<System.Fabric.Query.ApplicationType>.Count
  nameWithType.vb: ICollection(Of ApplicationType).Count
  fullname.vb: System.Collections.Generic.ICollection(Of System.Fabric.Query.ApplicationType).Count
- uid: System.Collections.Generic.ICollection`1.Count
  commentId: P:System.Collections.Generic.ICollection`1.Count
  isExternal: true
  name: Count
  nameWithType: ICollection<T>.Count
  fullName: System.Collections.Generic.ICollection<T>.Count
  nameWithType.vb: ICollection(Of T).Count
  fullname.vb: System.Collections.Generic.ICollection(Of T).Count
- uid: System.Fabric.Query.ApplicationTypeList.IsReadOnly*
  commentId: Overload:System.Fabric.Query.ApplicationTypeList.IsReadOnly
  isExternal: false
  name: IsReadOnly
  nameWithType: ApplicationTypeList.IsReadOnly
  fullName: System.Fabric.Query.ApplicationTypeList.IsReadOnly
- uid: System.Collections.Generic.ICollection{System.Fabric.Query.ApplicationType}.IsReadOnly
  commentId: P:System.Collections.Generic.ICollection{System.Fabric.Query.ApplicationType}.IsReadOnly
  parent: System.Collections.Generic.ICollection{System.Fabric.Query.ApplicationType}
  definition: System.Collections.Generic.ICollection`1.IsReadOnly
  name: IsReadOnly
  nameWithType: ICollection<ApplicationType>.IsReadOnly
  fullName: System.Collections.Generic.ICollection<System.Fabric.Query.ApplicationType>.IsReadOnly
  nameWithType.vb: ICollection(Of ApplicationType).IsReadOnly
  fullname.vb: System.Collections.Generic.ICollection(Of System.Fabric.Query.ApplicationType).IsReadOnly
- uid: System.Collections.Generic.ICollection`1.IsReadOnly
  commentId: P:System.Collections.Generic.ICollection`1.IsReadOnly
  isExternal: true
  name: IsReadOnly
  nameWithType: ICollection<T>.IsReadOnly
  fullName: System.Collections.Generic.ICollection<T>.IsReadOnly
  nameWithType.vb: ICollection(Of T).IsReadOnly
  fullname.vb: System.Collections.Generic.ICollection(Of T).IsReadOnly
- uid: System.Fabric.Query.ApplicationTypeList.Remove*
  commentId: Overload:System.Fabric.Query.ApplicationTypeList.Remove
  isExternal: false
  name: Remove
  nameWithType: ApplicationTypeList.Remove
  fullName: System.Fabric.Query.ApplicationTypeList.Remove
- uid: System.Collections.Generic.ICollection{System.Fabric.Query.ApplicationType}.Remove(System.Fabric.Query.ApplicationType)
  commentId: M:System.Collections.Generic.ICollection{System.Fabric.Query.ApplicationType}.Remove(System.Fabric.Query.ApplicationType)
  parent: System.Collections.Generic.ICollection{System.Fabric.Query.ApplicationType}
  definition: System.Collections.Generic.ICollection`1.Remove(`0)
  name: Remove(ApplicationType)
  nameWithType: ICollection<ApplicationType>.Remove(ApplicationType)
  fullName: System.Collections.Generic.ICollection<System.Fabric.Query.ApplicationType>.Remove(System.Fabric.Query.ApplicationType)
  nameWithType.vb: ICollection(Of ApplicationType).Remove(ApplicationType)
  fullname.vb: System.Collections.Generic.ICollection(Of System.Fabric.Query.ApplicationType).Remove(System.Fabric.Query.ApplicationType)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Remove(`0)
    name: Remove
    nameWithType: ICollection<ApplicationType>.Remove
    fullName: System.Collections.Generic.ICollection<System.Fabric.Query.ApplicationType>.Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Fabric.Query.ApplicationType
    name: ApplicationType
    nameWithType: ApplicationType
    fullName: System.Fabric.Query.ApplicationType
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Remove(`0)
    name: Remove
    nameWithType: ICollection(Of ApplicationType).Remove
    fullName: System.Collections.Generic.ICollection(Of System.Fabric.Query.ApplicationType).Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Fabric.Query.ApplicationType
    name: ApplicationType
    nameWithType: ApplicationType
    fullName: System.Fabric.Query.ApplicationType
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1.Remove(`0)
  commentId: M:System.Collections.Generic.ICollection`1.Remove(`0)
  isExternal: true
  name: Remove(T)
  nameWithType: ICollection<T>.Remove(T)
  fullName: System.Collections.Generic.ICollection<T>.Remove(T)
  nameWithType.vb: ICollection(Of T).Remove(T)
  fullname.vb: System.Collections.Generic.ICollection(Of T).Remove(T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Remove(`0)
    name: Remove
    nameWithType: ICollection<T>.Remove
    fullName: System.Collections.Generic.ICollection<T>.Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Remove(`0)
    name: Remove
    nameWithType: ICollection(Of T).Remove
    fullName: System.Collections.Generic.ICollection(Of T).Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.Query.ApplicationTypeList.GetEnumerator*
  commentId: Overload:System.Fabric.Query.ApplicationTypeList.GetEnumerator
  isExternal: false
  name: GetEnumerator
  nameWithType: ApplicationTypeList.GetEnumerator
  fullName: System.Fabric.Query.ApplicationTypeList.GetEnumerator
- uid: System.Collections.Generic.IEnumerable{System.Fabric.Query.ApplicationType}.GetEnumerator
  commentId: M:System.Collections.Generic.IEnumerable{System.Fabric.Query.ApplicationType}.GetEnumerator
  parent: System.Collections.Generic.IEnumerable{System.Fabric.Query.ApplicationType}
  definition: System.Collections.Generic.IEnumerable`1.GetEnumerator
  name: GetEnumerator()
  nameWithType: IEnumerable<ApplicationType>.GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<System.Fabric.Query.ApplicationType>.GetEnumerator()
  nameWithType.vb: IEnumerable(Of ApplicationType).GetEnumerator()
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Fabric.Query.ApplicationType).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable<ApplicationType>.GetEnumerator
    fullName: System.Collections.Generic.IEnumerable<System.Fabric.Query.ApplicationType>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable(Of ApplicationType).GetEnumerator
    fullName: System.Collections.Generic.IEnumerable(Of System.Fabric.Query.ApplicationType).GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerator{System.Fabric.Query.ApplicationType}
  commentId: T:System.Collections.Generic.IEnumerator{System.Fabric.Query.ApplicationType}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerator`1
  name: IEnumerator<ApplicationType>
  nameWithType: IEnumerator<ApplicationType>
  fullName: System.Collections.Generic.IEnumerator<System.Fabric.Query.ApplicationType>
  nameWithType.vb: IEnumerator(Of ApplicationType)
  fullname.vb: System.Collections.Generic.IEnumerator(Of System.Fabric.Query.ApplicationType)
  name.vb: IEnumerator(Of ApplicationType)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Fabric.Query.ApplicationType
    name: ApplicationType
    nameWithType: ApplicationType
    fullName: System.Fabric.Query.ApplicationType
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Fabric.Query.ApplicationType
    name: ApplicationType
    nameWithType: ApplicationType
    fullName: System.Fabric.Query.ApplicationType
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
  commentId: M:System.Collections.Generic.IEnumerable`1.GetEnumerator
  isExternal: true
  name: GetEnumerator()
  nameWithType: IEnumerable<T>.GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  nameWithType.vb: IEnumerable(Of T).GetEnumerator()
  fullname.vb: System.Collections.Generic.IEnumerable(Of T).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable<T>.GetEnumerator
    fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable(Of T).GetEnumerator
    fullName: System.Collections.Generic.IEnumerable(Of T).GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerator`1
  commentId: T:System.Collections.Generic.IEnumerator`1
  isExternal: true
  name: IEnumerator<T>
  nameWithType: IEnumerator<T>
  fullName: System.Collections.Generic.IEnumerator<T>
  nameWithType.vb: IEnumerator(Of T)
  fullname.vb: System.Collections.Generic.IEnumerator(Of T)
  name.vb: IEnumerator(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.Query.ApplicationTypeList.System#Collections#IEnumerable#GetEnumerator*
  commentId: Overload:System.Fabric.Query.ApplicationTypeList.System#Collections#IEnumerable#GetEnumerator
  isExternal: false
  name: IEnumerable.GetEnumerator
  nameWithType: ApplicationTypeList.IEnumerable.GetEnumerator
  fullName: System.Fabric.Query.ApplicationTypeList.System.Collections.IEnumerable.GetEnumerator
  nameWithType.vb: ApplicationTypeList.System.Collections.IEnumerable.GetEnumerator
  name.vb: System.Collections.IEnumerable.GetEnumerator
- uid: System.Collections.IEnumerable.GetEnumerator
  commentId: M:System.Collections.IEnumerable.GetEnumerator
  parent: System.Collections.IEnumerable
  isExternal: true
  name: GetEnumerator()
  nameWithType: IEnumerable.GetEnumerator()
  fullName: System.Collections.IEnumerable.GetEnumerator()
  spec.csharp:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable.GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable.GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IEnumerator
  commentId: T:System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
