### YamlMime:ManagedReference
items:
- uid: System.Fabric.FabricClient.ServiceManagementClient
  commentId: T:System.Fabric.FabricClient.ServiceManagementClient
  id: FabricClient.ServiceManagementClient
  parent: System.Fabric
  children:
  - System.Fabric.FabricClient.ServiceManagementClient.CreateServiceAsync(System.Fabric.Description.ServiceDescription)
  - System.Fabric.FabricClient.ServiceManagementClient.CreateServiceAsync(System.Fabric.Description.ServiceDescription,System.TimeSpan,System.Threading.CancellationToken)
  - System.Fabric.FabricClient.ServiceManagementClient.CreateServiceFromTemplateAsync(System.Uri,System.Uri,System.String,System.Byte[])
  - System.Fabric.FabricClient.ServiceManagementClient.CreateServiceFromTemplateAsync(System.Uri,System.Uri,System.String,System.Byte[],System.TimeSpan,System.Threading.CancellationToken)
  - System.Fabric.FabricClient.ServiceManagementClient.DeleteServiceAsync(System.Fabric.Description.DeleteServiceDescription)
  - System.Fabric.FabricClient.ServiceManagementClient.DeleteServiceAsync(System.Fabric.Description.DeleteServiceDescription,System.TimeSpan,System.Threading.CancellationToken)
  - System.Fabric.FabricClient.ServiceManagementClient.DeleteServiceAsync(System.Uri)
  - System.Fabric.FabricClient.ServiceManagementClient.DeleteServiceAsync(System.Uri,System.TimeSpan,System.Threading.CancellationToken)
  - System.Fabric.FabricClient.ServiceManagementClient.GetServiceDescriptionAsync(System.Uri)
  - System.Fabric.FabricClient.ServiceManagementClient.GetServiceDescriptionAsync(System.Uri,System.TimeSpan,System.Threading.CancellationToken)
  - System.Fabric.FabricClient.ServiceManagementClient.GetServiceManifestAsync(System.String,System.String,System.String)
  - System.Fabric.FabricClient.ServiceManagementClient.GetServiceManifestAsync(System.String,System.String,System.String,System.TimeSpan,System.Threading.CancellationToken)
  - System.Fabric.FabricClient.ServiceManagementClient.RegisterServiceNotificationFilterAsync(System.Fabric.Description.ServiceNotificationFilterDescription)
  - System.Fabric.FabricClient.ServiceManagementClient.RegisterServiceNotificationFilterAsync(System.Fabric.Description.ServiceNotificationFilterDescription,System.TimeSpan,System.Threading.CancellationToken)
  - System.Fabric.FabricClient.ServiceManagementClient.RegisterServicePartitionResolutionChangeHandler(System.Uri,System.Fabric.ServicePartitionResolutionChangeHandler)
  - System.Fabric.FabricClient.ServiceManagementClient.RegisterServicePartitionResolutionChangeHandler(System.Uri,System.Int64,System.Fabric.ServicePartitionResolutionChangeHandler)
  - System.Fabric.FabricClient.ServiceManagementClient.RegisterServicePartitionResolutionChangeHandler(System.Uri,System.String,System.Fabric.ServicePartitionResolutionChangeHandler)
  - System.Fabric.FabricClient.ServiceManagementClient.RemoveReplicaAsync(System.String,System.Guid,System.Int64)
  - System.Fabric.FabricClient.ServiceManagementClient.RemoveReplicaAsync(System.String,System.Guid,System.Int64,System.Boolean)
  - System.Fabric.FabricClient.ServiceManagementClient.RemoveReplicaAsync(System.String,System.Guid,System.Int64,System.Boolean,System.TimeSpan,System.Threading.CancellationToken)
  - System.Fabric.FabricClient.ServiceManagementClient.RemoveReplicaAsync(System.String,System.Guid,System.Int64,System.TimeSpan,System.Threading.CancellationToken)
  - System.Fabric.FabricClient.ServiceManagementClient.ResolveServicePartitionAsync(System.Uri)
  - System.Fabric.FabricClient.ServiceManagementClient.ResolveServicePartitionAsync(System.Uri,System.Fabric.ResolvedServicePartition)
  - System.Fabric.FabricClient.ServiceManagementClient.ResolveServicePartitionAsync(System.Uri,System.Fabric.ResolvedServicePartition,System.TimeSpan)
  - System.Fabric.FabricClient.ServiceManagementClient.ResolveServicePartitionAsync(System.Uri,System.Fabric.ResolvedServicePartition,System.TimeSpan,System.Threading.CancellationToken)
  - System.Fabric.FabricClient.ServiceManagementClient.ResolveServicePartitionAsync(System.Uri,System.Int64)
  - System.Fabric.FabricClient.ServiceManagementClient.ResolveServicePartitionAsync(System.Uri,System.Int64,System.Fabric.ResolvedServicePartition)
  - System.Fabric.FabricClient.ServiceManagementClient.ResolveServicePartitionAsync(System.Uri,System.Int64,System.Fabric.ResolvedServicePartition,System.TimeSpan)
  - System.Fabric.FabricClient.ServiceManagementClient.ResolveServicePartitionAsync(System.Uri,System.Int64,System.Fabric.ResolvedServicePartition,System.TimeSpan,System.Threading.CancellationToken)
  - System.Fabric.FabricClient.ServiceManagementClient.ResolveServicePartitionAsync(System.Uri,System.Int64,System.TimeSpan)
  - System.Fabric.FabricClient.ServiceManagementClient.ResolveServicePartitionAsync(System.Uri,System.Int64,System.TimeSpan,System.Threading.CancellationToken)
  - System.Fabric.FabricClient.ServiceManagementClient.ResolveServicePartitionAsync(System.Uri,System.String)
  - System.Fabric.FabricClient.ServiceManagementClient.ResolveServicePartitionAsync(System.Uri,System.String,System.Fabric.ResolvedServicePartition)
  - System.Fabric.FabricClient.ServiceManagementClient.ResolveServicePartitionAsync(System.Uri,System.String,System.Fabric.ResolvedServicePartition,System.TimeSpan)
  - System.Fabric.FabricClient.ServiceManagementClient.ResolveServicePartitionAsync(System.Uri,System.String,System.Fabric.ResolvedServicePartition,System.TimeSpan,System.Threading.CancellationToken)
  - System.Fabric.FabricClient.ServiceManagementClient.ResolveServicePartitionAsync(System.Uri,System.String,System.TimeSpan)
  - System.Fabric.FabricClient.ServiceManagementClient.ResolveServicePartitionAsync(System.Uri,System.String,System.TimeSpan,System.Threading.CancellationToken)
  - System.Fabric.FabricClient.ServiceManagementClient.ResolveServicePartitionAsync(System.Uri,System.TimeSpan)
  - System.Fabric.FabricClient.ServiceManagementClient.ResolveServicePartitionAsync(System.Uri,System.TimeSpan,System.Threading.CancellationToken)
  - System.Fabric.FabricClient.ServiceManagementClient.RestartReplicaAsync(System.String,System.Guid,System.Int64)
  - System.Fabric.FabricClient.ServiceManagementClient.RestartReplicaAsync(System.String,System.Guid,System.Int64,System.TimeSpan,System.Threading.CancellationToken)
  - System.Fabric.FabricClient.ServiceManagementClient.ServiceNotificationFilterMatched
  - System.Fabric.FabricClient.ServiceManagementClient.UnregisterServiceNotificationFilterAsync(System.Int64)
  - System.Fabric.FabricClient.ServiceManagementClient.UnregisterServiceNotificationFilterAsync(System.Int64,System.TimeSpan,System.Threading.CancellationToken)
  - System.Fabric.FabricClient.ServiceManagementClient.UnregisterServicePartitionResolutionChangeHandler(System.Int64)
  - System.Fabric.FabricClient.ServiceManagementClient.UpdateServiceAsync(System.Uri,System.Fabric.Description.ServiceUpdateDescription)
  - System.Fabric.FabricClient.ServiceManagementClient.UpdateServiceAsync(System.Uri,System.Fabric.Description.ServiceUpdateDescription,System.TimeSpan,System.Threading.CancellationToken)
  langs:
  - csharp
  - vb
  name: FabricClient.ServiceManagementClient
  nameWithType: FabricClient.ServiceManagementClient
  fullName: System.Fabric.FabricClient.ServiceManagementClient
  type: Class
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ServiceManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: ServiceManagementClient
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ServiceManagementClient.cs
    startLine: 18
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Represents the enabling of the services to be managed.</p>\n"
  example: []
  syntax:
    content: public sealed class ServiceManagementClient
    content.vb: Public NotInheritable Class ServiceManagementClient
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  extensionMethods:
  - System.Fabric.FabricClient.ServiceManagementClient.System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: System.Fabric.FabricClient.ServiceManagementClient.ServiceNotificationFilterMatched
  commentId: E:System.Fabric.FabricClient.ServiceManagementClient.ServiceNotificationFilterMatched
  id: ServiceNotificationFilterMatched
  parent: System.Fabric.FabricClient.ServiceManagementClient
  langs:
  - csharp
  - vb
  name: ServiceNotificationFilterMatched
  nameWithType: FabricClient.ServiceManagementClient.ServiceNotificationFilterMatched
  fullName: System.Fabric.FabricClient.ServiceManagementClient.ServiceNotificationFilterMatched
  type: Event
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ServiceManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: ServiceNotificationFilterMatched
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ServiceManagementClient.cs
    startLine: 127
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Raised when a <xref href=\"System.Fabric.Description.ServiceNotificationFilterDescription\" data-throw-if-not-resolved=\"false\"></xref> previously registered through <xref href=\"System.Fabric.FabricClient.ServiceManagementClient.RegisterServiceNotificationFilterAsync(System.Fabric.Description.ServiceNotificationFilterDescription)\" data-throw-if-not-resolved=\"false\"></xref> is matched by a service's endpoint changes in system.</p>\n"
  remarks: "\nThe event argument is of type <xref href=\"System.Fabric.FabricClient.ServiceManagementClient.ServiceNotificationEventArgs\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example:
  - "\nThe following example shows how to register for and process service notifications:\n<pre><code class=\"cs\">namespace ServiceNotificationsExample\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            var client = new FabricClient(new string[] { \"[cluster_endpoint]:[client_port]\" });\n\n            var filter = new ServiceNotificationFilterDescription()\n            {\n                Name = new Uri(\"fabric:/my_application\"),\n                MatchNamePrefix = true,\n            };\n\n            client.ServiceManager.ServiceNotificationFilterMatched += (s, e) =&gt; OnNotification(e);\n\n            var filterId = client.ServiceManager.RegisterServiceNotificationFilterAsync(filter).Result;\n\n            Console.WriteLine(\n                \"Registered filter: name={0} id={1}\",\n                filter.Name,\n                filterId);\n\n            Console.ReadLine();\n\n            client.ServiceManager.UnregisterServiceNotificationFilterAsync(filterId).Wait();\n\n            Console.WriteLine(\n                \"Unregistered filter: name={0} id={1}\",\n                filter.Name,\n                filterId);\n        }\n\n        private static void OnNotification(EventArgs e)\n        {\n            var castedEventArgs = (FabricClient.ServiceManagementClient.ServiceNotificationEventArgs)e;\n\n            var notification = castedEventArgs.Notification;\n\n            Console.WriteLine(\n                \"[{0}] received notification for service '{1}'\",\n                DateTime.UtcNow,\n                notification.ServiceName);\n        }\n    }\n}</code></pre>\n"
  syntax:
    content: public event EventHandler ServiceNotificationFilterMatched
    content.vb: Public Event ServiceNotificationFilterMatched As EventHandler
    return:
      type: System.EventHandler
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.ServiceManagementClient.CreateServiceAsync(System.Fabric.Description.ServiceDescription)
  commentId: M:System.Fabric.FabricClient.ServiceManagementClient.CreateServiceAsync(System.Fabric.Description.ServiceDescription)
  id: CreateServiceAsync(System.Fabric.Description.ServiceDescription)
  parent: System.Fabric.FabricClient.ServiceManagementClient
  langs:
  - csharp
  - vb
  name: CreateServiceAsync(ServiceDescription)
  nameWithType: FabricClient.ServiceManagementClient.CreateServiceAsync(ServiceDescription)
  fullName: System.Fabric.FabricClient.ServiceManagementClient.CreateServiceAsync(System.Fabric.Description.ServiceDescription)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ServiceManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: CreateServiceAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ServiceManagementClient.cs
    startLine: 155
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Instantiates a service with specified description.</p>\n"
  remarks: "\n<p>Service Fabric name will be implicitly created if it does not already exist.</p>\n"
  example: []
  syntax:
    content: public Task CreateServiceAsync(ServiceDescription description)
    content.vb: Public Function CreateServiceAsync(description As ServiceDescription) As Task
    parameters:
    - id: description
      type: System.Fabric.Description.ServiceDescription
      description: "\n<p>The configuration for the service.</p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>The instantiated service.</p>\n"
  overload: System.Fabric.FabricClient.ServiceManagementClient.CreateServiceAsync*
  exceptions:
  - type: System.Fabric.FabricObjectClosedException
    commentId: T:System.Fabric.FabricObjectClosedException
    description: "\n<p>The <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object is in a closed state. Dispose of the <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object you are using and instantiate a new <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.ServiceManagementClient.CreateServiceAsync(System.Fabric.Description.ServiceDescription,System.TimeSpan,System.Threading.CancellationToken)
  commentId: M:System.Fabric.FabricClient.ServiceManagementClient.CreateServiceAsync(System.Fabric.Description.ServiceDescription,System.TimeSpan,System.Threading.CancellationToken)
  id: CreateServiceAsync(System.Fabric.Description.ServiceDescription,System.TimeSpan,System.Threading.CancellationToken)
  parent: System.Fabric.FabricClient.ServiceManagementClient
  langs:
  - csharp
  - vb
  name: CreateServiceAsync(ServiceDescription, TimeSpan, CancellationToken)
  nameWithType: FabricClient.ServiceManagementClient.CreateServiceAsync(ServiceDescription, TimeSpan, CancellationToken)
  fullName: System.Fabric.FabricClient.ServiceManagementClient.CreateServiceAsync(System.Fabric.Description.ServiceDescription, System.TimeSpan, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ServiceManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: CreateServiceAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ServiceManagementClient.cs
    startLine: 182
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Instantiates a service with specified description.</p>\n"
  remarks: "\n<p>Service Fabric name will be implicitly created if it does not already exist.</p>\n"
  example: []
  syntax:
    content: public Task CreateServiceAsync(ServiceDescription serviceDescription, TimeSpan timeout, CancellationToken cancellationToken)
    content.vb: Public Function CreateServiceAsync(serviceDescription As ServiceDescription, timeout As TimeSpan, cancellationToken As CancellationToken) As Task
    parameters:
    - id: serviceDescription
      type: System.Fabric.Description.ServiceDescription
      description: "\n<p>The configuration for the service.</p>\n"
    - id: timeout
      type: System.TimeSpan
      description: "\n<p>The maximum amount of time the system will allow this operation to continue before returning <xref href=\"System.TimeoutException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref>that the operation is observing. It can be used to propagate notification that the operation should be canceled.</p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>The instantiated service.</p>\n"
  overload: System.Fabric.FabricClient.ServiceManagementClient.CreateServiceAsync*
  exceptions:
  - type: System.Fabric.FabricObjectClosedException
    commentId: T:System.Fabric.FabricObjectClosedException
    description: "\n<p>The <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object is in a closed state. Dispose of the <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object you are using and instantiate a new <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.ServiceManagementClient.CreateServiceFromTemplateAsync(System.Uri,System.Uri,System.String,System.Byte[])
  commentId: M:System.Fabric.FabricClient.ServiceManagementClient.CreateServiceFromTemplateAsync(System.Uri,System.Uri,System.String,System.Byte[])
  id: CreateServiceFromTemplateAsync(System.Uri,System.Uri,System.String,System.Byte[])
  parent: System.Fabric.FabricClient.ServiceManagementClient
  langs:
  - csharp
  - vb
  name: CreateServiceFromTemplateAsync(Uri, Uri, String, Byte[])
  nameWithType: FabricClient.ServiceManagementClient.CreateServiceFromTemplateAsync(Uri, Uri, String, Byte[])
  fullName: System.Fabric.FabricClient.ServiceManagementClient.CreateServiceFromTemplateAsync(System.Uri, System.Uri, System.String, System.Byte[])
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ServiceManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: CreateServiceFromTemplateAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ServiceManagementClient.cs
    startLine: 225
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Instantiates a service from the template specified in the Application Manifest.</p>\n"
  remarks: "\n<p>Service Fabric name will be implicitly created if it does not already exist.</p>\n"
  example: []
  syntax:
    content: public Task CreateServiceFromTemplateAsync(Uri applicationName, Uri serviceName, string serviceTypeName, byte[] initializationData)
    content.vb: Public Function CreateServiceFromTemplateAsync(applicationName As Uri, serviceName As Uri, serviceTypeName As String, initializationData As Byte()) As Task
    parameters:
    - id: applicationName
      type: System.Uri
      description: "\n<p>The Service Fabric Name of the application under which the service will be created.</p>\n"
    - id: serviceName
      type: System.Uri
      description: "\n<p>The Service Fabric Name of the service.</p>\n"
    - id: serviceTypeName
      type: System.String
      description: "\n<p>The name of the service type. This has to be same as the ServiceTypeName specified in the Service Manifest.</p>\n"
    - id: initializationData
      type: System.Byte[]
      description: "\n<p>The initialization data to be passed in to the new service.</p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>The instantiated service.</p>\n"
  overload: System.Fabric.FabricClient.ServiceManagementClient.CreateServiceFromTemplateAsync*
  exceptions:
  - type: System.Fabric.FabricObjectClosedException
    commentId: T:System.Fabric.FabricObjectClosedException
    description: "\n<p>The <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object is in a closed state. Dispose of the <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object you are using and instantiate a new <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  - type: System.Fabric.FabricElementNotFoundException
    commentId: T:System.Fabric.FabricElementNotFoundException
    description: "\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.ServiceTemplateNotFound\" data-throw-if-not-resolved=\"false\"></xref>: The service template does not exist</p>\n"
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: "\n<p>The request timed out but may have already been accepted for processing by the system.</p>\n"
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>The request was canceled before the timeout expired but may have already been accepted for processing by the system.</p>\n"
  nameWithType.vb: FabricClient.ServiceManagementClient.CreateServiceFromTemplateAsync(Uri, Uri, String, Byte())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Fabric.FabricClient.ServiceManagementClient.CreateServiceFromTemplateAsync(System.Uri, System.Uri, System.String, System.Byte())
  name.vb: CreateServiceFromTemplateAsync(Uri, Uri, String, Byte())
- uid: System.Fabric.FabricClient.ServiceManagementClient.CreateServiceFromTemplateAsync(System.Uri,System.Uri,System.String,System.Byte[],System.TimeSpan,System.Threading.CancellationToken)
  commentId: M:System.Fabric.FabricClient.ServiceManagementClient.CreateServiceFromTemplateAsync(System.Uri,System.Uri,System.String,System.Byte[],System.TimeSpan,System.Threading.CancellationToken)
  id: CreateServiceFromTemplateAsync(System.Uri,System.Uri,System.String,System.Byte[],System.TimeSpan,System.Threading.CancellationToken)
  parent: System.Fabric.FabricClient.ServiceManagementClient
  langs:
  - csharp
  - vb
  name: CreateServiceFromTemplateAsync(Uri, Uri, String, Byte[], TimeSpan, CancellationToken)
  nameWithType: FabricClient.ServiceManagementClient.CreateServiceFromTemplateAsync(Uri, Uri, String, Byte[], TimeSpan, CancellationToken)
  fullName: System.Fabric.FabricClient.ServiceManagementClient.CreateServiceFromTemplateAsync(System.Uri, System.Uri, System.String, System.Byte[], System.TimeSpan, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ServiceManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: CreateServiceFromTemplateAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ServiceManagementClient.cs
    startLine: 270
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Instantiates a service from the template specified in the Application Manifest.</p>\n"
  remarks: "\n<p>Service Fabric name will be implicitly created if it does not already exist.</p>\n"
  example: []
  syntax:
    content: public Task CreateServiceFromTemplateAsync(Uri applicationName, Uri serviceName, string serviceTypeName, byte[] initializationData, TimeSpan timeout, CancellationToken cancellationToken)
    content.vb: Public Function CreateServiceFromTemplateAsync(applicationName As Uri, serviceName As Uri, serviceTypeName As String, initializationData As Byte(), timeout As TimeSpan, cancellationToken As CancellationToken) As Task
    parameters:
    - id: applicationName
      type: System.Uri
      description: "\n<p>The Service Fabric Name of the application under which the service will be created.</p>\n"
    - id: serviceName
      type: System.Uri
      description: "\n<p>The Service Fabric Name of the service.</p>\n"
    - id: serviceTypeName
      type: System.String
      description: "\n<p>The name of the service type. This has to be same as the ServiceTypeName specified in the Service Manifest.</p>\n"
    - id: initializationData
      type: System.Byte[]
      description: "\n<p>The initialization data to be passed in to the new service.</p>\n"
    - id: timeout
      type: System.TimeSpan
      description: "\n<p>The maximum amount of time the system will allow this operation to continue before returning <xref href=\"System.TimeoutException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> that the operation is observing. It can be used to propagate notification that the operation should be canceled.</p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>The instantiated service.</p>\n"
  overload: System.Fabric.FabricClient.ServiceManagementClient.CreateServiceFromTemplateAsync*
  exceptions:
  - type: System.Fabric.FabricObjectClosedException
    commentId: T:System.Fabric.FabricObjectClosedException
    description: "\n<p>The <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object is in a closed state. Dispose of the <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object you are using and instantiate a new <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  - type: System.Fabric.FabricElementNotFoundException
    commentId: T:System.Fabric.FabricElementNotFoundException
    description: "\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.ServiceTemplateNotFound\" data-throw-if-not-resolved=\"false\"></xref>: The service template does not exist.</p>\n"
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: "\n<p>The request timed out but may have already been accepted for processing by the system.</p>\n"
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>The request was canceled before the timeout expired but may have already been accepted for processing by the system.</p>\n"
  nameWithType.vb: FabricClient.ServiceManagementClient.CreateServiceFromTemplateAsync(Uri, Uri, String, Byte(), TimeSpan, CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Fabric.FabricClient.ServiceManagementClient.CreateServiceFromTemplateAsync(System.Uri, System.Uri, System.String, System.Byte(), System.TimeSpan, System.Threading.CancellationToken)
  name.vb: CreateServiceFromTemplateAsync(Uri, Uri, String, Byte(), TimeSpan, CancellationToken)
- uid: System.Fabric.FabricClient.ServiceManagementClient.UpdateServiceAsync(System.Uri,System.Fabric.Description.ServiceUpdateDescription)
  commentId: M:System.Fabric.FabricClient.ServiceManagementClient.UpdateServiceAsync(System.Uri,System.Fabric.Description.ServiceUpdateDescription)
  id: UpdateServiceAsync(System.Uri,System.Fabric.Description.ServiceUpdateDescription)
  parent: System.Fabric.FabricClient.ServiceManagementClient
  langs:
  - csharp
  - vb
  name: UpdateServiceAsync(Uri, ServiceUpdateDescription)
  nameWithType: FabricClient.ServiceManagementClient.UpdateServiceAsync(Uri, ServiceUpdateDescription)
  fullName: System.Fabric.FabricClient.ServiceManagementClient.UpdateServiceAsync(System.Uri, System.Fabric.Description.ServiceUpdateDescription)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ServiceManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: UpdateServiceAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ServiceManagementClient.cs
    startLine: 290
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Updates a service with the specified description.</p>\n"
  example: []
  syntax:
    content: public Task UpdateServiceAsync(Uri name, ServiceUpdateDescription updateDescription)
    content.vb: Public Function UpdateServiceAsync(name As Uri, updateDescription As ServiceUpdateDescription) As Task
    parameters:
    - id: name
      type: System.Uri
      description: <p>The URI name of the service being updated.</p>
    - id: updateDescription
      type: System.Fabric.Description.ServiceUpdateDescription
      description: <p>The <xref href="System.Fabric.Description.ServiceUpdateDescription" data-throw-if-not-resolved="false"></xref> that specifies the updated configuration for the service.</p>
    return:
      type: System.Threading.Tasks.Task
      description: <p>The updated service.</p>
  overload: System.Fabric.FabricClient.ServiceManagementClient.UpdateServiceAsync*
  exceptions:
  - type: System.Fabric.FabricObjectClosedException
    commentId: T:System.Fabric.FabricObjectClosedException
    description: "\n<p>The <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object is in a closed state.\nDispose of the<xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object you are using and instantiate a new <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.ServiceManagementClient.UpdateServiceAsync(System.Uri,System.Fabric.Description.ServiceUpdateDescription,System.TimeSpan,System.Threading.CancellationToken)
  commentId: M:System.Fabric.FabricClient.ServiceManagementClient.UpdateServiceAsync(System.Uri,System.Fabric.Description.ServiceUpdateDescription,System.TimeSpan,System.Threading.CancellationToken)
  id: UpdateServiceAsync(System.Uri,System.Fabric.Description.ServiceUpdateDescription,System.TimeSpan,System.Threading.CancellationToken)
  parent: System.Fabric.FabricClient.ServiceManagementClient
  langs:
  - csharp
  - vb
  name: UpdateServiceAsync(Uri, ServiceUpdateDescription, TimeSpan, CancellationToken)
  nameWithType: FabricClient.ServiceManagementClient.UpdateServiceAsync(Uri, ServiceUpdateDescription, TimeSpan, CancellationToken)
  fullName: System.Fabric.FabricClient.ServiceManagementClient.UpdateServiceAsync(System.Uri, System.Fabric.Description.ServiceUpdateDescription, System.TimeSpan, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ServiceManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: UpdateServiceAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ServiceManagementClient.cs
    startLine: 311
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Updates a service with the specified description.</p>\n"
  example: []
  syntax:
    content: public Task UpdateServiceAsync(Uri name, ServiceUpdateDescription serviceUpdateDescription, TimeSpan timeout, CancellationToken cancellationToken)
    content.vb: Public Function UpdateServiceAsync(name As Uri, serviceUpdateDescription As ServiceUpdateDescription, timeout As TimeSpan, cancellationToken As CancellationToken) As Task
    parameters:
    - id: name
      type: System.Uri
      description: <p>The URI name of the service being updated.</p>
    - id: serviceUpdateDescription
      type: System.Fabric.Description.ServiceUpdateDescription
      description: <p>The <xref href="System.Fabric.Description.ServiceUpdateDescription" data-throw-if-not-resolved="false"></xref> that specifies the updated configuration for the service.</p>
    - id: timeout
      type: System.TimeSpan
      description: "\n<p>The maximum amount of time the system will allow this operation to continue before returning <xref href=\"System.TimeoutException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> that the operation is observing. It can be used to propagate notification that the operation should be canceled.</p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: <p>The updated service.</p>
  overload: System.Fabric.FabricClient.ServiceManagementClient.UpdateServiceAsync*
  exceptions:
  - type: System.Fabric.FabricObjectClosedException
    commentId: T:System.Fabric.FabricObjectClosedException
    description: "\n<p>The <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object is in a closed state.\nDispose of the<xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object you are using and instantiate a new <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.ServiceManagementClient.DeleteServiceAsync(System.Uri)
  commentId: M:System.Fabric.FabricClient.ServiceManagementClient.DeleteServiceAsync(System.Uri)
  id: DeleteServiceAsync(System.Uri)
  parent: System.Fabric.FabricClient.ServiceManagementClient
  langs:
  - csharp
  - vb
  name: DeleteServiceAsync(Uri)
  nameWithType: FabricClient.ServiceManagementClient.DeleteServiceAsync(Uri)
  fullName: System.Fabric.FabricClient.ServiceManagementClient.DeleteServiceAsync(System.Uri)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ServiceManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: DeleteServiceAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ServiceManagementClient.cs
    startLine: 335
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Deletes the specified service instance.</p>\n"
  remarks: "\n<p>Service Fabric name will be implicitly and recursively deleted if the application is Service Fabric managed.</p>\n"
  example: []
  syntax:
    content: >-
      [Obsolete("This api is deprecated, use overload taking DeleteServiceDescription instead.", false)]

      public Task DeleteServiceAsync(Uri serviceName)
    content.vb: >-
      <Obsolete("This api is deprecated, use overload taking DeleteServiceDescription instead.", False)>

      Public Function DeleteServiceAsync(serviceName As Uri) As Task
    parameters:
    - id: serviceName
      type: System.Uri
      description: "\n<p>The Service Fabric Name of the service.</p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>The deleted service instance.</p>\n"
  overload: System.Fabric.FabricClient.ServiceManagementClient.DeleteServiceAsync*
  exceptions:
  - type: System.Fabric.FabricObjectClosedException
    commentId: T:System.Fabric.FabricObjectClosedException
    description: "\n<p>The <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object is in a closed state. Dispose of the <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object you are using and instantiate a new <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String,System.Boolean)
    arguments:
    - type: System.String
      value: This api is deprecated, use overload taking DeleteServiceDescription instead.
    - type: System.Boolean
      value: false
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.ServiceManagementClient.DeleteServiceAsync(System.Uri,System.TimeSpan,System.Threading.CancellationToken)
  commentId: M:System.Fabric.FabricClient.ServiceManagementClient.DeleteServiceAsync(System.Uri,System.TimeSpan,System.Threading.CancellationToken)
  id: DeleteServiceAsync(System.Uri,System.TimeSpan,System.Threading.CancellationToken)
  parent: System.Fabric.FabricClient.ServiceManagementClient
  langs:
  - csharp
  - vb
  name: DeleteServiceAsync(Uri, TimeSpan, CancellationToken)
  nameWithType: FabricClient.ServiceManagementClient.DeleteServiceAsync(Uri, TimeSpan, CancellationToken)
  fullName: System.Fabric.FabricClient.ServiceManagementClient.DeleteServiceAsync(System.Uri, System.TimeSpan, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ServiceManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: DeleteServiceAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ServiceManagementClient.cs
    startLine: 362
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Deletes the specified service instance.</p>\n"
  remarks: "\n<p>Service Fabric name will be implicitly and recursively deleted if the application is Service Fabric managed.</p>\n"
  example: []
  syntax:
    content: >-
      [Obsolete("This api is deprecated, use overload taking DeleteServiceDescription instead.", false)]

      public Task DeleteServiceAsync(Uri serviceName, TimeSpan timeout, CancellationToken cancellationToken)
    content.vb: >-
      <Obsolete("This api is deprecated, use overload taking DeleteServiceDescription instead.", False)>

      Public Function DeleteServiceAsync(serviceName As Uri, timeout As TimeSpan, cancellationToken As CancellationToken) As Task
    parameters:
    - id: serviceName
      type: System.Uri
      description: "\n<p>The Service Fabric Name of the service.</p>\n"
    - id: timeout
      type: System.TimeSpan
      description: "\n<p>The maximum amount of time the system will allow this operation to continue before returning <xref href=\"System.TimeoutException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> that the operation is observing. It can be used to propagate notification that the operation should be canceled.</p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>The deleted service instance.</p>\n"
  overload: System.Fabric.FabricClient.ServiceManagementClient.DeleteServiceAsync*
  exceptions:
  - type: System.Fabric.FabricObjectClosedException
    commentId: T:System.Fabric.FabricObjectClosedException
    description: "\n<p>The <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object is in a closed state. Dispose of the <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object you are using and instantiate a new <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String,System.Boolean)
    arguments:
    - type: System.String
      value: This api is deprecated, use overload taking DeleteServiceDescription instead.
    - type: System.Boolean
      value: false
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.ServiceManagementClient.DeleteServiceAsync(System.Fabric.Description.DeleteServiceDescription)
  commentId: M:System.Fabric.FabricClient.ServiceManagementClient.DeleteServiceAsync(System.Fabric.Description.DeleteServiceDescription)
  id: DeleteServiceAsync(System.Fabric.Description.DeleteServiceDescription)
  parent: System.Fabric.FabricClient.ServiceManagementClient
  langs:
  - csharp
  - vb
  name: DeleteServiceAsync(DeleteServiceDescription)
  nameWithType: FabricClient.ServiceManagementClient.DeleteServiceAsync(DeleteServiceDescription)
  fullName: System.Fabric.FabricClient.ServiceManagementClient.DeleteServiceAsync(System.Fabric.Description.DeleteServiceDescription)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ServiceManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: DeleteServiceAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ServiceManagementClient.cs
    startLine: 387
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Deletes the specified service instance.</p>\n"
  remarks: "\n<p>Service Fabric name will be implicitly and recursively deleted if the application is Service Fabric managed.</p>\n<p>A forceful deletion call can convert on-going normal deletion to forceful one.</p>\n"
  example: []
  syntax:
    content: public Task DeleteServiceAsync(DeleteServiceDescription deleteServiceDescription)
    content.vb: Public Function DeleteServiceAsync(deleteServiceDescription As DeleteServiceDescription) As Task
    parameters:
    - id: deleteServiceDescription
      type: System.Fabric.Description.DeleteServiceDescription
      description: "\n<p>The description of the service to be deleted.</p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>The deleted service instance.</p>\n"
  overload: System.Fabric.FabricClient.ServiceManagementClient.DeleteServiceAsync*
  exceptions:
  - type: System.Fabric.FabricObjectClosedException
    commentId: T:System.Fabric.FabricObjectClosedException
    description: "\n<p>The <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object is in a closed state. Dispose of the <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object you are using and instantiate a new <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.ServiceManagementClient.DeleteServiceAsync(System.Fabric.Description.DeleteServiceDescription,System.TimeSpan,System.Threading.CancellationToken)
  commentId: M:System.Fabric.FabricClient.ServiceManagementClient.DeleteServiceAsync(System.Fabric.Description.DeleteServiceDescription,System.TimeSpan,System.Threading.CancellationToken)
  id: DeleteServiceAsync(System.Fabric.Description.DeleteServiceDescription,System.TimeSpan,System.Threading.CancellationToken)
  parent: System.Fabric.FabricClient.ServiceManagementClient
  langs:
  - csharp
  - vb
  name: DeleteServiceAsync(DeleteServiceDescription, TimeSpan, CancellationToken)
  nameWithType: FabricClient.ServiceManagementClient.DeleteServiceAsync(DeleteServiceDescription, TimeSpan, CancellationToken)
  fullName: System.Fabric.FabricClient.ServiceManagementClient.DeleteServiceAsync(System.Fabric.Description.DeleteServiceDescription, System.TimeSpan, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ServiceManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: DeleteServiceAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ServiceManagementClient.cs
    startLine: 414
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Deletes the specified service instance.</p>\n"
  remarks: "\n<p>Service Fabric name will be implicitly and recursively deleted if the application is Service Fabric managed.</p>\n<p>A forceful deletion call can convert on-going normal deletion to forceful one.</p>\n"
  example: []
  syntax:
    content: public Task DeleteServiceAsync(DeleteServiceDescription deleteServiceDescription, TimeSpan timeout, CancellationToken cancellationToken)
    content.vb: Public Function DeleteServiceAsync(deleteServiceDescription As DeleteServiceDescription, timeout As TimeSpan, cancellationToken As CancellationToken) As Task
    parameters:
    - id: deleteServiceDescription
      type: System.Fabric.Description.DeleteServiceDescription
      description: "\n<p>The description of the service to be deleted.</p>\n"
    - id: timeout
      type: System.TimeSpan
      description: "\n<p>The maximum amount of time the system will allow this operation to continue before returning <xref href=\"System.TimeoutException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> that the operation is observing. It can be used to propagate notification that the operation should be canceled.</p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>The deleted service instance.</p>\n"
  overload: System.Fabric.FabricClient.ServiceManagementClient.DeleteServiceAsync*
  exceptions:
  - type: System.Fabric.FabricObjectClosedException
    commentId: T:System.Fabric.FabricObjectClosedException
    description: "\n<p>The <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object is in a closed state. Dispose of the <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object you are using and instantiate a new <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.ServiceManagementClient.GetServiceDescriptionAsync(System.Uri)
  commentId: M:System.Fabric.FabricClient.ServiceManagementClient.GetServiceDescriptionAsync(System.Uri)
  id: GetServiceDescriptionAsync(System.Uri)
  parent: System.Fabric.FabricClient.ServiceManagementClient
  langs:
  - csharp
  - vb
  name: GetServiceDescriptionAsync(Uri)
  nameWithType: FabricClient.ServiceManagementClient.GetServiceDescriptionAsync(Uri)
  fullName: System.Fabric.FabricClient.ServiceManagementClient.GetServiceDescriptionAsync(System.Uri)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ServiceManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: GetServiceDescriptionAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ServiceManagementClient.cs
    startLine: 438
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Gets the Service Description for the specified service instance.</p>\n"
  remarks: "\n<p>\n<xref href=\"System.Fabric.FabricClient.ServiceManagementClient.GetServiceDescriptionAsync(System.Uri)\" data-throw-if-not-resolved=\"false\"></xref> is the most efficient way of determining whether a name is associated with a service.</p>\n"
  example: []
  syntax:
    content: public Task<ServiceDescription> GetServiceDescriptionAsync(Uri serviceName)
    content.vb: Public Function GetServiceDescriptionAsync(serviceName As Uri) As Task(Of ServiceDescription)
    parameters:
    - id: serviceName
      type: System.Uri
      description: "\n<p>The Service Fabric Name of the service.</p>\n"
    return:
      type: System.Threading.Tasks.Task{System.Fabric.Description.ServiceDescription}
      description: "\n<p>The Service Description for the specified service instance.</p>\n"
  overload: System.Fabric.FabricClient.ServiceManagementClient.GetServiceDescriptionAsync*
  exceptions:
  - type: System.Fabric.FabricObjectClosedException
    commentId: T:System.Fabric.FabricObjectClosedException
    description: "\n<p>The <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object is in a closed state. Dispose of the <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object you are using and instantiate a new <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.ServiceManagementClient.GetServiceDescriptionAsync(System.Uri,System.TimeSpan,System.Threading.CancellationToken)
  commentId: M:System.Fabric.FabricClient.ServiceManagementClient.GetServiceDescriptionAsync(System.Uri,System.TimeSpan,System.Threading.CancellationToken)
  id: GetServiceDescriptionAsync(System.Uri,System.TimeSpan,System.Threading.CancellationToken)
  parent: System.Fabric.FabricClient.ServiceManagementClient
  langs:
  - csharp
  - vb
  name: GetServiceDescriptionAsync(Uri, TimeSpan, CancellationToken)
  nameWithType: FabricClient.ServiceManagementClient.GetServiceDescriptionAsync(Uri, TimeSpan, CancellationToken)
  fullName: System.Fabric.FabricClient.ServiceManagementClient.GetServiceDescriptionAsync(System.Uri, System.TimeSpan, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ServiceManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: GetServiceDescriptionAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ServiceManagementClient.cs
    startLine: 465
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Gets the Service Description for the specified service instance.</p>\n"
  remarks: "\n<p>\n<xref href=\"System.Fabric.FabricClient.ServiceManagementClient.GetServiceDescriptionAsync(System.Uri)\" data-throw-if-not-resolved=\"false\"></xref> is the most efficient way of determining whether a name is associated with a service.</p>\n"
  example: []
  syntax:
    content: public Task<ServiceDescription> GetServiceDescriptionAsync(Uri serviceName, TimeSpan timeout, CancellationToken cancellationToken)
    content.vb: Public Function GetServiceDescriptionAsync(serviceName As Uri, timeout As TimeSpan, cancellationToken As CancellationToken) As Task(Of ServiceDescription)
    parameters:
    - id: serviceName
      type: System.Uri
      description: "\n<p>The Service Fabric Name of the service. </p>\n"
    - id: timeout
      type: System.TimeSpan
      description: "\n<p>The maximum amount of time the system will allow this operation to continue before returning <xref href=\"System.TimeoutException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> that the operation is observing. It can be used to propagate notification that the operation should be canceled.</p>\n"
    return:
      type: System.Threading.Tasks.Task{System.Fabric.Description.ServiceDescription}
      description: "\n<p>The Service Description for the specified service instance.</p>\n"
  overload: System.Fabric.FabricClient.ServiceManagementClient.GetServiceDescriptionAsync*
  exceptions:
  - type: System.Fabric.FabricObjectClosedException
    commentId: T:System.Fabric.FabricObjectClosedException
    description: "\n<p>The <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object is in a closed state. Dispose of the <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object you are using and instantiate a new <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.ServiceManagementClient.ResolveServicePartitionAsync(System.Uri)
  commentId: M:System.Fabric.FabricClient.ServiceManagementClient.ResolveServicePartitionAsync(System.Uri)
  id: ResolveServicePartitionAsync(System.Uri)
  parent: System.Fabric.FabricClient.ServiceManagementClient
  langs:
  - csharp
  - vb
  name: ResolveServicePartitionAsync(Uri)
  nameWithType: FabricClient.ServiceManagementClient.ResolveServicePartitionAsync(Uri)
  fullName: System.Fabric.FabricClient.ServiceManagementClient.ResolveServicePartitionAsync(System.Uri)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ServiceManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: ResolveServicePartitionAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ServiceManagementClient.cs
    startLine: 492
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Queries the system for the set of endpoints the specified service partition is listening to.</p>\n"
  remarks: "\n<p>This is a complaint based resolution API.</p>\n<p>The <xref href=\"System.Fabric.FabricClient.ServiceManagementClient.ResolveServicePartitionAsync(System.Uri)\" data-throw-if-not-resolved=\"false\"></xref> will return a <xref href=\"System.Fabric.ResolvedServicePartition\" data-throw-if-not-resolved=\"false\"></xref> for the specified service partition. When this overload is used, the system will always return the closest <xref href=\"System.Fabric.ResolvedServicePartition\" data-throw-if-not-resolved=\"false\"></xref> for the service partition. Timeout for the operation will be set to the Naming “MaxOperationTimeout” parameter specified in the Cluster Manifest.</p>\n"
  example: []
  syntax:
    content: public Task<ResolvedServicePartition> ResolveServicePartitionAsync(Uri serviceName)
    content.vb: Public Function ResolveServicePartitionAsync(serviceName As Uri) As Task(Of ResolvedServicePartition)
    parameters:
    - id: serviceName
      type: System.Uri
      description: "\n<p>The Service Fabric Name of the service instance.</p>\n"
    return:
      type: System.Threading.Tasks.Task{System.Fabric.ResolvedServicePartition}
      description: "\n<p>The set of endpoints the specified service partition is listening to.</p>\n"
  overload: System.Fabric.FabricClient.ServiceManagementClient.ResolveServicePartitionAsync*
  exceptions:
  - type: System.Fabric.FabricObjectClosedException
    commentId: T:System.Fabric.FabricObjectClosedException
    description: "\n<p>The <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object is in a closed state. Dispose of the <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object you are using and instantiate a new <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.ServiceManagementClient.ResolveServicePartitionAsync(System.Uri,System.TimeSpan)
  commentId: M:System.Fabric.FabricClient.ServiceManagementClient.ResolveServicePartitionAsync(System.Uri,System.TimeSpan)
  id: ResolveServicePartitionAsync(System.Uri,System.TimeSpan)
  parent: System.Fabric.FabricClient.ServiceManagementClient
  langs:
  - csharp
  - vb
  name: ResolveServicePartitionAsync(Uri, TimeSpan)
  nameWithType: FabricClient.ServiceManagementClient.ResolveServicePartitionAsync(Uri, TimeSpan)
  fullName: System.Fabric.FabricClient.ServiceManagementClient.ResolveServicePartitionAsync(System.Uri, System.TimeSpan)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ServiceManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: ResolveServicePartitionAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ServiceManagementClient.cs
    startLine: 516
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Queries the system for the set of endpoints the specified service partition is listening to.</p>\n"
  remarks: "\n<p>This is a complaint based resolution API.</p>\n<p>This will return a <xref href=\"System.Fabric.ResolvedServicePartition\" data-throw-if-not-resolved=\"false\"></xref> for the specified service partition. When this overload is used, the system will always return the closest <xref href=\"System.Fabric.ResolvedServicePartition\" data-throw-if-not-resolved=\"false\"></xref> for the service partition.</p>\n"
  example: []
  syntax:
    content: public Task<ResolvedServicePartition> ResolveServicePartitionAsync(Uri serviceName, TimeSpan timeout)
    content.vb: Public Function ResolveServicePartitionAsync(serviceName As Uri, timeout As TimeSpan) As Task(Of ResolvedServicePartition)
    parameters:
    - id: serviceName
      type: System.Uri
      description: "\n<p>The Service Fabric Name of the service instance.</p>\n"
    - id: timeout
      type: System.TimeSpan
      description: "\n<p>The maximum amount of time the system will allow this operation to continue before returning <xref href=\"System.TimeoutException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    return:
      type: System.Threading.Tasks.Task{System.Fabric.ResolvedServicePartition}
      description: "\n<p>The set of endpoints the specified service partition is listening to.</p>\n"
  overload: System.Fabric.FabricClient.ServiceManagementClient.ResolveServicePartitionAsync*
  exceptions:
  - type: System.Fabric.FabricObjectClosedException
    commentId: T:System.Fabric.FabricObjectClosedException
    description: "\n<p>The <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object is in a closed state. Dispose of the <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object you are using and instantiate a new <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.ServiceManagementClient.ResolveServicePartitionAsync(System.Uri,System.TimeSpan,System.Threading.CancellationToken)
  commentId: M:System.Fabric.FabricClient.ServiceManagementClient.ResolveServicePartitionAsync(System.Uri,System.TimeSpan,System.Threading.CancellationToken)
  id: ResolveServicePartitionAsync(System.Uri,System.TimeSpan,System.Threading.CancellationToken)
  parent: System.Fabric.FabricClient.ServiceManagementClient
  langs:
  - csharp
  - vb
  name: ResolveServicePartitionAsync(Uri, TimeSpan, CancellationToken)
  nameWithType: FabricClient.ServiceManagementClient.ResolveServicePartitionAsync(Uri, TimeSpan, CancellationToken)
  fullName: System.Fabric.FabricClient.ServiceManagementClient.ResolveServicePartitionAsync(System.Uri, System.TimeSpan, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ServiceManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: ResolveServicePartitionAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ServiceManagementClient.cs
    startLine: 543
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Queries the system for the set of endpoints the specified service partition is listening to.</p>\n"
  remarks: "\n<p>This is a complaint based resolution API.</p>\n<p>This will return a <xref href=\"System.Fabric.ResolvedServicePartition\" data-throw-if-not-resolved=\"false\"></xref> for the specified service partition. When this overload is used, the system will always return the closest <xref href=\"System.Fabric.ResolvedServicePartition\" data-throw-if-not-resolved=\"false\"></xref> for the service partition.</p>\n"
  example: []
  syntax:
    content: public Task<ResolvedServicePartition> ResolveServicePartitionAsync(Uri serviceName, TimeSpan timeout, CancellationToken cancellationToken)
    content.vb: Public Function ResolveServicePartitionAsync(serviceName As Uri, timeout As TimeSpan, cancellationToken As CancellationToken) As Task(Of ResolvedServicePartition)
    parameters:
    - id: serviceName
      type: System.Uri
      description: "\n<p>The Service Fabric Name of the service instance.</p>\n"
    - id: timeout
      type: System.TimeSpan
      description: "\n<p>The maximum amount of time the system will allow this operation to continue before returning <xref href=\"System.TimeoutException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> that the operation is observing. It can be used to propagate notification that the operation should be canceled.</p>\n"
    return:
      type: System.Threading.Tasks.Task{System.Fabric.ResolvedServicePartition}
      description: "\n<p>The set of endpoints the specified service partition is listening to.</p>\n"
  overload: System.Fabric.FabricClient.ServiceManagementClient.ResolveServicePartitionAsync*
  exceptions:
  - type: System.Fabric.FabricObjectClosedException
    commentId: T:System.Fabric.FabricObjectClosedException
    description: "\n<p>The <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object is in a closed state. Dispose of the <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object you are using and instantiate a new <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.ServiceManagementClient.ResolveServicePartitionAsync(System.Uri,System.Fabric.ResolvedServicePartition)
  commentId: M:System.Fabric.FabricClient.ServiceManagementClient.ResolveServicePartitionAsync(System.Uri,System.Fabric.ResolvedServicePartition)
  id: ResolveServicePartitionAsync(System.Uri,System.Fabric.ResolvedServicePartition)
  parent: System.Fabric.FabricClient.ServiceManagementClient
  langs:
  - csharp
  - vb
  name: ResolveServicePartitionAsync(Uri, ResolvedServicePartition)
  nameWithType: FabricClient.ServiceManagementClient.ResolveServicePartitionAsync(Uri, ResolvedServicePartition)
  fullName: System.Fabric.FabricClient.ServiceManagementClient.ResolveServicePartitionAsync(System.Uri, System.Fabric.ResolvedServicePartition)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ServiceManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: ResolveServicePartitionAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ServiceManagementClient.cs
    startLine: 568
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Queries the system for the set of endpoints the specified service partition is listening to.</p>\n"
  remarks: "\n<p>A complaint based resolution API.</p>\n<p>This method will return a <xref href=\"System.Fabric.ResolvedServicePartition\" data-throw-if-not-resolved=\"false\"></xref> for the specified service partition. When this overload is used, the system will return a more up-to-date <xref href=\"System.Fabric.ResolvedServicePartition\" data-throw-if-not-resolved=\"false\"></xref> than the “previousResult” argument if it is available. Timeout for the operation will be set to the Naming “MaxOperationTimeout” parameter specified in the Cluster Manifest.</p>\n<p>PreviousResult argument enables the user to say ”This is the previous list of endpoints for this Service partition. I have tried the endpoints and I believe they are stale. Return me a more up to date version of this set.” In this case, the system will try to return a more up-to-date <xref href=\"System.Fabric.ResolvedServicePartition\" data-throw-if-not-resolved=\"false\"></xref> in the most efficient way possible. If no newer version can be found, a <xref href=\"System.Fabric.ResolvedServicePartition\" data-throw-if-not-resolved=\"false\"></xref> with the same version will be returned.ResolveServicePartition can be called without the previousResult argument or previousResult argument set to null. As no prerequisite is specified, the system will return the closest copy of the <xref href=\"System.Fabric.ResolvedServicePartition\" data-throw-if-not-resolved=\"false\"></xref> for the service partition.</p>\n"
  example: []
  syntax:
    content: public Task<ResolvedServicePartition> ResolveServicePartitionAsync(Uri serviceName, ResolvedServicePartition previousResult)
    content.vb: Public Function ResolveServicePartitionAsync(serviceName As Uri, previousResult As ResolvedServicePartition) As Task(Of ResolvedServicePartition)
    parameters:
    - id: serviceName
      type: System.Uri
      description: "\n<p>The Service Fabric Name of the service instance.</p>\n"
    - id: previousResult
      type: System.Fabric.ResolvedServicePartition
      description: "\n<p>The Previous <xref href=\"System.Fabric.ResolvedServicePartition\" data-throw-if-not-resolved=\"false\"></xref> for the service partition that the user believes is stale.</p>\n"
    return:
      type: System.Threading.Tasks.Task{System.Fabric.ResolvedServicePartition}
      description: "\n<p>The set of endpoints the specified service partition is listening to.</p>\n"
  overload: System.Fabric.FabricClient.ServiceManagementClient.ResolveServicePartitionAsync*
  exceptions:
  - type: System.Fabric.FabricObjectClosedException
    commentId: T:System.Fabric.FabricObjectClosedException
    description: "\n<p>The <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object is in a closed state. Dispose of the <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object you are using and instantiate a new <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.ServiceManagementClient.ResolveServicePartitionAsync(System.Uri,System.Fabric.ResolvedServicePartition,System.TimeSpan)
  commentId: M:System.Fabric.FabricClient.ServiceManagementClient.ResolveServicePartitionAsync(System.Uri,System.Fabric.ResolvedServicePartition,System.TimeSpan)
  id: ResolveServicePartitionAsync(System.Uri,System.Fabric.ResolvedServicePartition,System.TimeSpan)
  parent: System.Fabric.FabricClient.ServiceManagementClient
  langs:
  - csharp
  - vb
  name: ResolveServicePartitionAsync(Uri, ResolvedServicePartition, TimeSpan)
  nameWithType: FabricClient.ServiceManagementClient.ResolveServicePartitionAsync(Uri, ResolvedServicePartition, TimeSpan)
  fullName: System.Fabric.FabricClient.ServiceManagementClient.ResolveServicePartitionAsync(System.Uri, System.Fabric.ResolvedServicePartition, System.TimeSpan)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ServiceManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: ResolveServicePartitionAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ServiceManagementClient.cs
    startLine: 593
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Queries the system for the set of endpoints the specified service partition is listening to.</p>\n"
  remarks: "\n<p>This is a complaint based resolution API.</p>\n<p>This method will return a <xref href=\"System.Fabric.ResolvedServicePartition\" data-throw-if-not-resolved=\"false\"></xref> for the specified service partition. When this overload is used, the system will return a more up-to-date <xref href=\"System.Fabric.ResolvedServicePartition\" data-throw-if-not-resolved=\"false\"></xref> than the “previousResult” argument if it is available.</p>\n<p>PreviousResult argument enables the user to say ”This is the previous list of endpoints for this Service partition. I have tried the endpoints and I believe they are stale. Return me a more up to date version of this set.” In this case, the system will try to return a more up-to-date <xref href=\"System.Fabric.ResolvedServicePartition\" data-throw-if-not-resolved=\"false\"></xref> in the most efficient way possible. If no newer version can be found, a <xref href=\"System.Fabric.ResolvedServicePartition\" data-throw-if-not-resolved=\"false\"></xref> with the same version will be returned.ResolveServicePartition can be called without the previousResult argument or previousResult argument set to null. As no prerequisite is specified, the system will return the closest copy of the <xref href=\"System.Fabric.ResolvedServicePartition\" data-throw-if-not-resolved=\"false\"></xref> for the service partition.</p>\n"
  example: []
  syntax:
    content: public Task<ResolvedServicePartition> ResolveServicePartitionAsync(Uri serviceName, ResolvedServicePartition previousResult, TimeSpan timeout)
    content.vb: Public Function ResolveServicePartitionAsync(serviceName As Uri, previousResult As ResolvedServicePartition, timeout As TimeSpan) As Task(Of ResolvedServicePartition)
    parameters:
    - id: serviceName
      type: System.Uri
      description: "\n<p>The Service Fabric Name of the service instance.</p>\n"
    - id: previousResult
      type: System.Fabric.ResolvedServicePartition
      description: "\n<p>The Previous <xref href=\"System.Fabric.ResolvedServicePartition\" data-throw-if-not-resolved=\"false\"></xref> for the service partition that the user believes is stale.</p>\n"
    - id: timeout
      type: System.TimeSpan
      description: "\n<p>The maximum amount of time the system will allow this operation to continue before returning <xref href=\"System.TimeoutException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    return:
      type: System.Threading.Tasks.Task{System.Fabric.ResolvedServicePartition}
      description: "\n<p>The set of endpoints the specified service partition is listening to.</p>\n"
  overload: System.Fabric.FabricClient.ServiceManagementClient.ResolveServicePartitionAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.ServiceManagementClient.ResolveServicePartitionAsync(System.Uri,System.Fabric.ResolvedServicePartition,System.TimeSpan,System.Threading.CancellationToken)
  commentId: M:System.Fabric.FabricClient.ServiceManagementClient.ResolveServicePartitionAsync(System.Uri,System.Fabric.ResolvedServicePartition,System.TimeSpan,System.Threading.CancellationToken)
  id: ResolveServicePartitionAsync(System.Uri,System.Fabric.ResolvedServicePartition,System.TimeSpan,System.Threading.CancellationToken)
  parent: System.Fabric.FabricClient.ServiceManagementClient
  langs:
  - csharp
  - vb
  name: ResolveServicePartitionAsync(Uri, ResolvedServicePartition, TimeSpan, CancellationToken)
  nameWithType: FabricClient.ServiceManagementClient.ResolveServicePartitionAsync(Uri, ResolvedServicePartition, TimeSpan, CancellationToken)
  fullName: System.Fabric.FabricClient.ServiceManagementClient.ResolveServicePartitionAsync(System.Uri, System.Fabric.ResolvedServicePartition, System.TimeSpan, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ServiceManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: ResolveServicePartitionAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ServiceManagementClient.cs
    startLine: 625
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Queries the system for the set of endpoints the specified service partition is listening to.</p>\n"
  remarks: "\n<p>This is a complaint based resolution API.</p>\n<p>This method will return a <xref href=\"System.Fabric.ResolvedServicePartition\" data-throw-if-not-resolved=\"false\"></xref> for the specified service partition. When this overload is used, the system will return a more up-to-date <xref href=\"System.Fabric.ResolvedServicePartition\" data-throw-if-not-resolved=\"false\"></xref> than the “previousResult” argument if it is available.</p>\n<p>\n<em>previousResult</em> argument enables the user to say ”This is the previous list of endpoints for this Service partition. I have tried the endpoints and I believe they are stale. Return me a more up to date version of this set.” In this case, the system will try to return a more up-to-date <xref href=\"System.Fabric.ResolvedServicePartition\" data-throw-if-not-resolved=\"false\"></xref> in the most efficient way possible. If no newer version can be found, a <xref href=\"System.Fabric.ResolvedServicePartition\" data-throw-if-not-resolved=\"false\"></xref> with the same version will be returned.ResolveServicePartition can be called without the <em>previousResult</em> argument or <em>previousResult</em> argument set to null. As no prerequisite is specified, the system will return the closest copy of the <xref href=\"System.Fabric.ResolvedServicePartition\" data-throw-if-not-resolved=\"false\"></xref> for the service partition.</p>\n"
  example: []
  syntax:
    content: public Task<ResolvedServicePartition> ResolveServicePartitionAsync(Uri serviceName, ResolvedServicePartition previousResult, TimeSpan timeout, CancellationToken cancellationToken)
    content.vb: Public Function ResolveServicePartitionAsync(serviceName As Uri, previousResult As ResolvedServicePartition, timeout As TimeSpan, cancellationToken As CancellationToken) As Task(Of ResolvedServicePartition)
    parameters:
    - id: serviceName
      type: System.Uri
      description: "\n<p>The Service Fabric Name of the service instance.</p>\n"
    - id: previousResult
      type: System.Fabric.ResolvedServicePartition
      description: "\n<p>Previous <xref href=\"System.Fabric.ResolvedServicePartition\" data-throw-if-not-resolved=\"false\"></xref> for the service partition that the user believes is stale.</p>\n"
    - id: timeout
      type: System.TimeSpan
      description: "\n<p>The maximum amount of time the system will allow this operation to continue before returning <xref href=\"System.TimeoutException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref>that the operation is observing. It can be used to propagate notification that the operation should be canceled.</p>\n"
    return:
      type: System.Threading.Tasks.Task{System.Fabric.ResolvedServicePartition}
      description: "\n<p>The set of endpoints the specified service partition is listening to.</p>\n"
  overload: System.Fabric.FabricClient.ServiceManagementClient.ResolveServicePartitionAsync*
  exceptions:
  - type: System.Fabric.FabricObjectClosedException
    commentId: T:System.Fabric.FabricObjectClosedException
    description: "\n<p>The <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object is in a closed state. Dispose of the <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object you are using and instantiate a new <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.ServiceManagementClient.ResolveServicePartitionAsync(System.Uri,System.Int64)
  commentId: M:System.Fabric.FabricClient.ServiceManagementClient.ResolveServicePartitionAsync(System.Uri,System.Int64)
  id: ResolveServicePartitionAsync(System.Uri,System.Int64)
  parent: System.Fabric.FabricClient.ServiceManagementClient
  langs:
  - csharp
  - vb
  name: ResolveServicePartitionAsync(Uri, Int64)
  nameWithType: FabricClient.ServiceManagementClient.ResolveServicePartitionAsync(Uri, Int64)
  fullName: System.Fabric.FabricClient.ServiceManagementClient.ResolveServicePartitionAsync(System.Uri, System.Int64)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ServiceManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: ResolveServicePartitionAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ServiceManagementClient.cs
    startLine: 652
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Queries the system for the set of endpoints the specified service partition is listening to.</p>\n"
  remarks: "\n<p>This is a complaint based resolution API.</p>\n<p>This method will return a <xref href=\"System.Fabric.ResolvedServicePartition\" data-throw-if-not-resolved=\"false\"></xref> for the specified service partition. When this overload is used, the system will always return the closest <xref href=\"System.Fabric.ResolvedServicePartition\" data-throw-if-not-resolved=\"false\"></xref> for the service partition. Timeout for the operation will be set to the Naming “MaxOperationTimeout” parameter specified in the Cluster Manifest.</p>\n"
  example: []
  syntax:
    content: public Task<ResolvedServicePartition> ResolveServicePartitionAsync(Uri serviceName, long partitionKey)
    content.vb: Public Function ResolveServicePartitionAsync(serviceName As Uri, partitionKey As Long) As Task(Of ResolvedServicePartition)
    parameters:
    - id: serviceName
      type: System.Uri
      description: "\n<p>The Service Fabric Name of the service instance.</p>\n"
    - id: partitionKey
      type: System.Int64
      description: "\n<p>The partition key for the service partition.</p>\n"
    return:
      type: System.Threading.Tasks.Task{System.Fabric.ResolvedServicePartition}
      description: "\n<p>The set of endpoints the specified service partition is listening to.</p>\n"
  overload: System.Fabric.FabricClient.ServiceManagementClient.ResolveServicePartitionAsync*
  exceptions:
  - type: System.Fabric.FabricObjectClosedException
    commentId: T:System.Fabric.FabricObjectClosedException
    description: "\n<p>The <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object is in a closed state. Dispose of the <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object you are using and instantiate a new <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.ServiceManagementClient.ResolveServicePartitionAsync(System.Uri,System.Int64,System.TimeSpan)
  commentId: M:System.Fabric.FabricClient.ServiceManagementClient.ResolveServicePartitionAsync(System.Uri,System.Int64,System.TimeSpan)
  id: ResolveServicePartitionAsync(System.Uri,System.Int64,System.TimeSpan)
  parent: System.Fabric.FabricClient.ServiceManagementClient
  langs:
  - csharp
  - vb
  name: ResolveServicePartitionAsync(Uri, Int64, TimeSpan)
  nameWithType: FabricClient.ServiceManagementClient.ResolveServicePartitionAsync(Uri, Int64, TimeSpan)
  fullName: System.Fabric.FabricClient.ServiceManagementClient.ResolveServicePartitionAsync(System.Uri, System.Int64, System.TimeSpan)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ServiceManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: ResolveServicePartitionAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ServiceManagementClient.cs
    startLine: 679
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Queries the system for the set of endpoints the specified service partition is listening to.</p>\n"
  remarks: "\n<p>This is a complaint based resolution API.</p>\n<p>This will return a <xref href=\"System.Fabric.ResolvedServicePartition\" data-throw-if-not-resolved=\"false\"></xref> for the specified service partition. When this overload is used, the system will always return the closest <xref href=\"System.Fabric.ResolvedServicePartition\" data-throw-if-not-resolved=\"false\"></xref> for the service partition.</p>\n"
  example: []
  syntax:
    content: public Task<ResolvedServicePartition> ResolveServicePartitionAsync(Uri serviceName, long partitionKey, TimeSpan timeout)
    content.vb: Public Function ResolveServicePartitionAsync(serviceName As Uri, partitionKey As Long, timeout As TimeSpan) As Task(Of ResolvedServicePartition)
    parameters:
    - id: serviceName
      type: System.Uri
      description: "\n<p>The Service Fabric Name of the service instance.</p>\n"
    - id: partitionKey
      type: System.Int64
      description: "\n<p>The partition key for the service partition.</p>\n"
    - id: timeout
      type: System.TimeSpan
      description: "\n<p>The maximum amount of time the system will allow this operation to continue before returning <xref href=\"System.TimeoutException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    return:
      type: System.Threading.Tasks.Task{System.Fabric.ResolvedServicePartition}
      description: "\n<p>The set of endpoints the specified service partition is listening to.</p>\n"
  overload: System.Fabric.FabricClient.ServiceManagementClient.ResolveServicePartitionAsync*
  exceptions:
  - type: System.Fabric.FabricObjectClosedException
    commentId: T:System.Fabric.FabricObjectClosedException
    description: "\n<p>The <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object is in a closed state. Dispose of the <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object you are using and instantiate a new <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.ServiceManagementClient.ResolveServicePartitionAsync(System.Uri,System.Int64,System.TimeSpan,System.Threading.CancellationToken)
  commentId: M:System.Fabric.FabricClient.ServiceManagementClient.ResolveServicePartitionAsync(System.Uri,System.Int64,System.TimeSpan,System.Threading.CancellationToken)
  id: ResolveServicePartitionAsync(System.Uri,System.Int64,System.TimeSpan,System.Threading.CancellationToken)
  parent: System.Fabric.FabricClient.ServiceManagementClient
  langs:
  - csharp
  - vb
  name: ResolveServicePartitionAsync(Uri, Int64, TimeSpan, CancellationToken)
  nameWithType: FabricClient.ServiceManagementClient.ResolveServicePartitionAsync(Uri, Int64, TimeSpan, CancellationToken)
  fullName: System.Fabric.FabricClient.ServiceManagementClient.ResolveServicePartitionAsync(System.Uri, System.Int64, System.TimeSpan, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ServiceManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: ResolveServicePartitionAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ServiceManagementClient.cs
    startLine: 709
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Queries the system for the set of endpoints the specified service partition is listening to.</p>\n"
  remarks: "\n<p>This is a complaint based resolution API.</p>\n<p>This will return a <xref href=\"System.Fabric.ResolvedServicePartition\" data-throw-if-not-resolved=\"false\"></xref> for the specified service partition. When this overload is used, the system will always return the closest <xref href=\"System.Fabric.ResolvedServicePartition\" data-throw-if-not-resolved=\"false\"></xref> for the service partition.</p>\n"
  example: []
  syntax:
    content: public Task<ResolvedServicePartition> ResolveServicePartitionAsync(Uri serviceName, long partitionKey, TimeSpan timeout, CancellationToken cancellationToken)
    content.vb: Public Function ResolveServicePartitionAsync(serviceName As Uri, partitionKey As Long, timeout As TimeSpan, cancellationToken As CancellationToken) As Task(Of ResolvedServicePartition)
    parameters:
    - id: serviceName
      type: System.Uri
      description: "\n<p>The Service Fabric Name of the service instance.</p>\n"
    - id: partitionKey
      type: System.Int64
      description: "\n<p>The partition key for the service partition.</p>\n"
    - id: timeout
      type: System.TimeSpan
      description: "\n<p>The maximum amount of time the system will allow this operation to continue before returning <xref href=\"System.TimeoutException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> that the operation is observing. It can be used to propagate notification that the operation should be canceled.</p>\n"
    return:
      type: System.Threading.Tasks.Task{System.Fabric.ResolvedServicePartition}
      description: "\n<p>The set of endpoints the specified service partition is listening to.</p>\n"
  overload: System.Fabric.FabricClient.ServiceManagementClient.ResolveServicePartitionAsync*
  exceptions:
  - type: System.Fabric.FabricObjectClosedException
    commentId: T:System.Fabric.FabricObjectClosedException
    description: "\n<p>The <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object is in a closed state. Dispose of the <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object you are using and instantiate a new <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.ServiceManagementClient.ResolveServicePartitionAsync(System.Uri,System.Int64,System.Fabric.ResolvedServicePartition)
  commentId: M:System.Fabric.FabricClient.ServiceManagementClient.ResolveServicePartitionAsync(System.Uri,System.Int64,System.Fabric.ResolvedServicePartition)
  id: ResolveServicePartitionAsync(System.Uri,System.Int64,System.Fabric.ResolvedServicePartition)
  parent: System.Fabric.FabricClient.ServiceManagementClient
  langs:
  - csharp
  - vb
  name: ResolveServicePartitionAsync(Uri, Int64, ResolvedServicePartition)
  nameWithType: FabricClient.ServiceManagementClient.ResolveServicePartitionAsync(Uri, Int64, ResolvedServicePartition)
  fullName: System.Fabric.FabricClient.ServiceManagementClient.ResolveServicePartitionAsync(System.Uri, System.Int64, System.Fabric.ResolvedServicePartition)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ServiceManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: ResolveServicePartitionAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ServiceManagementClient.cs
    startLine: 737
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Queries the system for the set of endpoints the specified service partition is listening to.</p>\n"
  remarks: "\n<p>This is a complaint based resolution API.</p>\n<p>This will return a <xref href=\"System.Fabric.ResolvedServicePartition\" data-throw-if-not-resolved=\"false\"></xref> for the specified service partition. When this overload is used, the system will return a more up-to-date <xref href=\"System.Fabric.ResolvedServicePartition\" data-throw-if-not-resolved=\"false\"></xref> than the “previousResult” argument if it is available. Timeout for the operation will be set to the Naming “MaxOperationTimeout” parameter specified in the Cluster Manifest.</p>\n<p>PreviousResult argument enables the user to say ”This is the previous list of endpoints for this Service partition. I have tried the endpoints and I believe they are stale. Return me a more up to date version of this set.” In this case, the system will try to return a more up-to-date <xref href=\"System.Fabric.ResolvedServicePartition\" data-throw-if-not-resolved=\"false\"></xref> in the most efficient way possible. If no newer version can be found, a <xref href=\"System.Fabric.ResolvedServicePartition\" data-throw-if-not-resolved=\"false\"></xref> with the same version will be returned.ResolveServicePartition can be called without the previousResult argument or previousResult argument set to null. As no prerequisite is specified, the system will return the closest copy of the <xref href=\"System.Fabric.ResolvedServicePartition\" data-throw-if-not-resolved=\"false\"></xref> for the service partition.</p>\n"
  example: []
  syntax:
    content: public Task<ResolvedServicePartition> ResolveServicePartitionAsync(Uri serviceName, long partitionKey, ResolvedServicePartition previousResult)
    content.vb: Public Function ResolveServicePartitionAsync(serviceName As Uri, partitionKey As Long, previousResult As ResolvedServicePartition) As Task(Of ResolvedServicePartition)
    parameters:
    - id: serviceName
      type: System.Uri
      description: "\n<p>The Service Fabric Name of the service instance.</p>\n"
    - id: partitionKey
      type: System.Int64
      description: "\n<p>The partition key for the service partition.</p>\n"
    - id: previousResult
      type: System.Fabric.ResolvedServicePartition
      description: "\n<p>The Previous <xref href=\"System.Fabric.ResolvedServicePartition\" data-throw-if-not-resolved=\"false\"></xref> for the service partition that the user believes is stale.</p>\n"
    return:
      type: System.Threading.Tasks.Task{System.Fabric.ResolvedServicePartition}
      description: "\n<p>The set of endpoints the specified service partition is listening to.</p>\n"
  overload: System.Fabric.FabricClient.ServiceManagementClient.ResolveServicePartitionAsync*
  exceptions:
  - type: System.Fabric.FabricObjectClosedException
    commentId: T:System.Fabric.FabricObjectClosedException
    description: "\n<p>The <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object is in a closed state. Dispose of the <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object you are using and instantiate a new <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.ServiceManagementClient.ResolveServicePartitionAsync(System.Uri,System.Int64,System.Fabric.ResolvedServicePartition,System.TimeSpan)
  commentId: M:System.Fabric.FabricClient.ServiceManagementClient.ResolveServicePartitionAsync(System.Uri,System.Int64,System.Fabric.ResolvedServicePartition,System.TimeSpan)
  id: ResolveServicePartitionAsync(System.Uri,System.Int64,System.Fabric.ResolvedServicePartition,System.TimeSpan)
  parent: System.Fabric.FabricClient.ServiceManagementClient
  langs:
  - csharp
  - vb
  name: ResolveServicePartitionAsync(Uri, Int64, ResolvedServicePartition, TimeSpan)
  nameWithType: FabricClient.ServiceManagementClient.ResolveServicePartitionAsync(Uri, Int64, ResolvedServicePartition, TimeSpan)
  fullName: System.Fabric.FabricClient.ServiceManagementClient.ResolveServicePartitionAsync(System.Uri, System.Int64, System.Fabric.ResolvedServicePartition, System.TimeSpan)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ServiceManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: ResolveServicePartitionAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ServiceManagementClient.cs
    startLine: 768
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Queries the system for the set of endpoints the specified service partition is listening to.</p>\n"
  remarks: "\n<p>This is a complaint based resolution API.</p>\n<p>This will return a <xref href=\"System.Fabric.ResolvedServicePartition\" data-throw-if-not-resolved=\"false\"></xref> for the specified service partition. When this overload is used, the system will return a more up-to-date <xref href=\"System.Fabric.ResolvedServicePartition\" data-throw-if-not-resolved=\"false\"></xref> than the “previousResult” argument if it is available.</p>\n<p>PreviousResult argument enables the user to say ”This is the previous list of endpoints for this Service partition. I have tried the endpoints and I believe they are stale. Return me a more up to date version of this set.” In this case, the system will try to return a more up-to-date <xref href=\"System.Fabric.ResolvedServicePartition\" data-throw-if-not-resolved=\"false\"></xref> in the most efficient way possible. If no newer version can be found, a <xref href=\"System.Fabric.ResolvedServicePartition\" data-throw-if-not-resolved=\"false\"></xref> with the same version will be returned.ResolveServicePartition can be called without the previousResult argument or previousResult argument set to null. As no prerequisite is specified, the system will return the closest copy of the <xref href=\"System.Fabric.ResolvedServicePartition\" data-throw-if-not-resolved=\"false\"></xref> for the service partition.</p>\n"
  example: []
  syntax:
    content: public Task<ResolvedServicePartition> ResolveServicePartitionAsync(Uri serviceName, long partitionKey, ResolvedServicePartition previousResult, TimeSpan timeout)
    content.vb: Public Function ResolveServicePartitionAsync(serviceName As Uri, partitionKey As Long, previousResult As ResolvedServicePartition, timeout As TimeSpan) As Task(Of ResolvedServicePartition)
    parameters:
    - id: serviceName
      type: System.Uri
      description: "\n<p>The Service Fabric Name of the service instance.</p>\n"
    - id: partitionKey
      type: System.Int64
      description: "\n<p>The partition key for the service partition.</p>\n"
    - id: previousResult
      type: System.Fabric.ResolvedServicePartition
      description: "\n<p>Previous <xref href=\"System.Fabric.ResolvedServicePartition\" data-throw-if-not-resolved=\"false\"></xref> for the service partition that the user believes is stale.</p>\n"
    - id: timeout
      type: System.TimeSpan
      description: "\n<p>The maximum amount of time the system will allow this operation to continue before returning <xref href=\"System.TimeoutException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    return:
      type: System.Threading.Tasks.Task{System.Fabric.ResolvedServicePartition}
      description: "\n<p>The set of endpoints the specified service partition is listening to.</p>\n"
  overload: System.Fabric.FabricClient.ServiceManagementClient.ResolveServicePartitionAsync*
  exceptions:
  - type: System.Fabric.FabricObjectClosedException
    commentId: T:System.Fabric.FabricObjectClosedException
    description: "\n<p>The <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object is in a closed state. Dispose of the <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object you are using and instantiate a new <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.ServiceManagementClient.ResolveServicePartitionAsync(System.Uri,System.Int64,System.Fabric.ResolvedServicePartition,System.TimeSpan,System.Threading.CancellationToken)
  commentId: M:System.Fabric.FabricClient.ServiceManagementClient.ResolveServicePartitionAsync(System.Uri,System.Int64,System.Fabric.ResolvedServicePartition,System.TimeSpan,System.Threading.CancellationToken)
  id: ResolveServicePartitionAsync(System.Uri,System.Int64,System.Fabric.ResolvedServicePartition,System.TimeSpan,System.Threading.CancellationToken)
  parent: System.Fabric.FabricClient.ServiceManagementClient
  langs:
  - csharp
  - vb
  name: ResolveServicePartitionAsync(Uri, Int64, ResolvedServicePartition, TimeSpan, CancellationToken)
  nameWithType: FabricClient.ServiceManagementClient.ResolveServicePartitionAsync(Uri, Int64, ResolvedServicePartition, TimeSpan, CancellationToken)
  fullName: System.Fabric.FabricClient.ServiceManagementClient.ResolveServicePartitionAsync(System.Uri, System.Int64, System.Fabric.ResolvedServicePartition, System.TimeSpan, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ServiceManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: ResolveServicePartitionAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ServiceManagementClient.cs
    startLine: 803
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Queries the system for the set of endpoints the specified service partition is listening to.</p>\n"
  remarks: "\n<p>This is a complaint based resolution API.</p>\n<p>This will return a <xref href=\"System.Fabric.ResolvedServicePartition\" data-throw-if-not-resolved=\"false\"></xref> for the specified service partition. When this overload is used, the system will return a more up-to-date <xref href=\"System.Fabric.ResolvedServicePartition\" data-throw-if-not-resolved=\"false\"></xref> than the “previousResult” argument if it is available.</p>\n<p>PreviousResult argument enables the user to say ”This is the previous list of endpoints for this Service partition. I have tried the endpoints and I believe they are stale. Return me a more up to date version of this set.” In this case, the system will try to return a more up-to-date <xref href=\"System.Fabric.ResolvedServicePartition\" data-throw-if-not-resolved=\"false\"></xref> in the most efficient way possible. If no newer version can be found, a <xref href=\"System.Fabric.ResolvedServicePartition\" data-throw-if-not-resolved=\"false\"></xref> with the same version will be returned.ResolveServicePartition can be called without the previousResult argument or previousResult argument set to null. As no prerequisite is specified, the system will return the closest copy of the <xref href=\"System.Fabric.ResolvedServicePartition\" data-throw-if-not-resolved=\"false\"></xref> for the service partition.</p>\n"
  example: []
  syntax:
    content: public Task<ResolvedServicePartition> ResolveServicePartitionAsync(Uri serviceName, long partitionKey, ResolvedServicePartition previousResult, TimeSpan timeout, CancellationToken cancellationToken)
    content.vb: Public Function ResolveServicePartitionAsync(serviceName As Uri, partitionKey As Long, previousResult As ResolvedServicePartition, timeout As TimeSpan, cancellationToken As CancellationToken) As Task(Of ResolvedServicePartition)
    parameters:
    - id: serviceName
      type: System.Uri
      description: "\n<p>The Service Fabric Name of the service instance.</p>\n"
    - id: partitionKey
      type: System.Int64
      description: "\n<p>The partition key for the service partition.</p>\n"
    - id: previousResult
      type: System.Fabric.ResolvedServicePartition
      description: "\n<p>Previous <xref href=\"System.Fabric.ResolvedServicePartition\" data-throw-if-not-resolved=\"false\"></xref> for the service partition that the user believes is stale.</p>\n"
    - id: timeout
      type: System.TimeSpan
      description: "\n<p>The maximum amount of time the system will allow this operation to continue before returning <xref href=\"System.TimeoutException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>\n<xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> that the operation is observing. It can be used to propagate notification that the operation should be canceled.</p>\n"
    return:
      type: System.Threading.Tasks.Task{System.Fabric.ResolvedServicePartition}
      description: "\n<p>The set of endpoints the specified service partition is listening to.</p>\n"
  overload: System.Fabric.FabricClient.ServiceManagementClient.ResolveServicePartitionAsync*
  exceptions:
  - type: System.Fabric.FabricObjectClosedException
    commentId: T:System.Fabric.FabricObjectClosedException
    description: "\n<p>The <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object is in a closed state. Dispose of the <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object you are using and instantiate a new <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.ServiceManagementClient.ResolveServicePartitionAsync(System.Uri,System.String)
  commentId: M:System.Fabric.FabricClient.ServiceManagementClient.ResolveServicePartitionAsync(System.Uri,System.String)
  id: ResolveServicePartitionAsync(System.Uri,System.String)
  parent: System.Fabric.FabricClient.ServiceManagementClient
  langs:
  - csharp
  - vb
  name: ResolveServicePartitionAsync(Uri, String)
  nameWithType: FabricClient.ServiceManagementClient.ResolveServicePartitionAsync(Uri, String)
  fullName: System.Fabric.FabricClient.ServiceManagementClient.ResolveServicePartitionAsync(System.Uri, System.String)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ServiceManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: ResolveServicePartitionAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ServiceManagementClient.cs
    startLine: 830
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Queries the system for the set of endpoints the specified service partition is listening to.</p>\n"
  remarks: "\n<p>This is a complaint based resolution API.</p>\n<p>This will return a <xref href=\"System.Fabric.ResolvedServicePartition\" data-throw-if-not-resolved=\"false\"></xref> for the specified service partition. When this overload is used, the system will always return the closest <xref href=\"System.Fabric.ResolvedServicePartition\" data-throw-if-not-resolved=\"false\"></xref> for the service partition. Timeout for the operation will be set to the Naming “MaxOperationTimeout” parameter specified in the Cluster Manifest.</p>\n"
  example: []
  syntax:
    content: public Task<ResolvedServicePartition> ResolveServicePartitionAsync(Uri serviceName, string partitionKey)
    content.vb: Public Function ResolveServicePartitionAsync(serviceName As Uri, partitionKey As String) As Task(Of ResolvedServicePartition)
    parameters:
    - id: serviceName
      type: System.Uri
      description: "\n<p>The Service Fabric Name of the service instance.</p>\n"
    - id: partitionKey
      type: System.String
      description: "\n<p>The partition key for the service partition.</p>\n"
    return:
      type: System.Threading.Tasks.Task{System.Fabric.ResolvedServicePartition}
      description: "\n<p>The set of endpoints the specified service partition is listening to.</p>\n"
  overload: System.Fabric.FabricClient.ServiceManagementClient.ResolveServicePartitionAsync*
  exceptions:
  - type: System.Fabric.FabricObjectClosedException
    commentId: T:System.Fabric.FabricObjectClosedException
    description: "\n<p>The <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object is in a closed state. Dispose of the <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object you are using and instantiate a new <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.ServiceManagementClient.ResolveServicePartitionAsync(System.Uri,System.String,System.TimeSpan)
  commentId: M:System.Fabric.FabricClient.ServiceManagementClient.ResolveServicePartitionAsync(System.Uri,System.String,System.TimeSpan)
  id: ResolveServicePartitionAsync(System.Uri,System.String,System.TimeSpan)
  parent: System.Fabric.FabricClient.ServiceManagementClient
  langs:
  - csharp
  - vb
  name: ResolveServicePartitionAsync(Uri, String, TimeSpan)
  nameWithType: FabricClient.ServiceManagementClient.ResolveServicePartitionAsync(Uri, String, TimeSpan)
  fullName: System.Fabric.FabricClient.ServiceManagementClient.ResolveServicePartitionAsync(System.Uri, System.String, System.TimeSpan)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ServiceManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: ResolveServicePartitionAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ServiceManagementClient.cs
    startLine: 857
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Queries the system for the set of endpoints the specified service partition is listening to.</p>\n"
  remarks: "\n<p>This is a complaint based resolution API.</p>\n<p>This will return a <xref href=\"System.Fabric.ResolvedServicePartition\" data-throw-if-not-resolved=\"false\"></xref> for the specified service partition. When this overload is used, the system will always return the closest <xref href=\"System.Fabric.ResolvedServicePartition\" data-throw-if-not-resolved=\"false\"></xref> for the service partition.</p>\n"
  example: []
  syntax:
    content: public Task<ResolvedServicePartition> ResolveServicePartitionAsync(Uri serviceName, string partitionKey, TimeSpan timeout)
    content.vb: Public Function ResolveServicePartitionAsync(serviceName As Uri, partitionKey As String, timeout As TimeSpan) As Task(Of ResolvedServicePartition)
    parameters:
    - id: serviceName
      type: System.Uri
      description: "\n<p>The Service Fabric Name of the service instance.</p>\n"
    - id: partitionKey
      type: System.String
      description: "\n<p>The partition key for the service partition.</p>\n"
    - id: timeout
      type: System.TimeSpan
      description: "\n<p>The maximum amount of time the system will allow this operation to continue before returning <xref href=\"System.TimeoutException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    return:
      type: System.Threading.Tasks.Task{System.Fabric.ResolvedServicePartition}
      description: "\n<p>The set of endpoints the specified service partition is listening to.</p>\n"
  overload: System.Fabric.FabricClient.ServiceManagementClient.ResolveServicePartitionAsync*
  exceptions:
  - type: System.Fabric.FabricObjectClosedException
    commentId: T:System.Fabric.FabricObjectClosedException
    description: "\n<p>The <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object is in a closed state. Dispose of the <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object you are using and instantiate a new <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.ServiceManagementClient.ResolveServicePartitionAsync(System.Uri,System.String,System.TimeSpan,System.Threading.CancellationToken)
  commentId: M:System.Fabric.FabricClient.ServiceManagementClient.ResolveServicePartitionAsync(System.Uri,System.String,System.TimeSpan,System.Threading.CancellationToken)
  id: ResolveServicePartitionAsync(System.Uri,System.String,System.TimeSpan,System.Threading.CancellationToken)
  parent: System.Fabric.FabricClient.ServiceManagementClient
  langs:
  - csharp
  - vb
  name: ResolveServicePartitionAsync(Uri, String, TimeSpan, CancellationToken)
  nameWithType: FabricClient.ServiceManagementClient.ResolveServicePartitionAsync(Uri, String, TimeSpan, CancellationToken)
  fullName: System.Fabric.FabricClient.ServiceManagementClient.ResolveServicePartitionAsync(System.Uri, System.String, System.TimeSpan, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ServiceManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: ResolveServicePartitionAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ServiceManagementClient.cs
    startLine: 887
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Queries the system for the set of endpoints the specified service partition is listening to.</p>\n"
  remarks: "\n<p>This is a complaint based resolution API.</p>\n<p>This will return a <xref href=\"System.Fabric.ResolvedServicePartition\" data-throw-if-not-resolved=\"false\"></xref> for the specified service partition. When this overload is used, the system will always return the closest <xref href=\"System.Fabric.ResolvedServicePartition\" data-throw-if-not-resolved=\"false\"></xref> for the service partition.</p>\n"
  example: []
  syntax:
    content: public Task<ResolvedServicePartition> ResolveServicePartitionAsync(Uri serviceName, string partitionKey, TimeSpan timeout, CancellationToken cancellationToken)
    content.vb: Public Function ResolveServicePartitionAsync(serviceName As Uri, partitionKey As String, timeout As TimeSpan, cancellationToken As CancellationToken) As Task(Of ResolvedServicePartition)
    parameters:
    - id: serviceName
      type: System.Uri
      description: "\n<p>The Service Fabric Name of the service instance.</p>\n"
    - id: partitionKey
      type: System.String
      description: "\n<p>The partition key for the service partition.</p>\n"
    - id: timeout
      type: System.TimeSpan
      description: "\n<p>The maximum amount of time the system will allow this operation to continue before returning <xref href=\"System.TimeoutException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> that the operation is observing. It can be used to propagate notification that the operation should be canceled.</p>\n"
    return:
      type: System.Threading.Tasks.Task{System.Fabric.ResolvedServicePartition}
      description: "\n<p>The set of endpoints the specified service partition is listening to.</p>\n"
  overload: System.Fabric.FabricClient.ServiceManagementClient.ResolveServicePartitionAsync*
  exceptions:
  - type: System.Fabric.FabricObjectClosedException
    commentId: T:System.Fabric.FabricObjectClosedException
    description: "\n<p>The <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object is in a closed state. Dispose of the <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object you are using and instantiate a new <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.ServiceManagementClient.ResolveServicePartitionAsync(System.Uri,System.String,System.Fabric.ResolvedServicePartition)
  commentId: M:System.Fabric.FabricClient.ServiceManagementClient.ResolveServicePartitionAsync(System.Uri,System.String,System.Fabric.ResolvedServicePartition)
  id: ResolveServicePartitionAsync(System.Uri,System.String,System.Fabric.ResolvedServicePartition)
  parent: System.Fabric.FabricClient.ServiceManagementClient
  langs:
  - csharp
  - vb
  name: ResolveServicePartitionAsync(Uri, String, ResolvedServicePartition)
  nameWithType: FabricClient.ServiceManagementClient.ResolveServicePartitionAsync(Uri, String, ResolvedServicePartition)
  fullName: System.Fabric.FabricClient.ServiceManagementClient.ResolveServicePartitionAsync(System.Uri, System.String, System.Fabric.ResolvedServicePartition)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ServiceManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: ResolveServicePartitionAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ServiceManagementClient.cs
    startLine: 915
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Queries the system for the set of endpoints the specified service partition is listening to.</p>\n"
  remarks: "\n<p>This is a complaint based resolution API.</p>\n<p>This will return a <xref href=\"System.Fabric.ResolvedServicePartition\" data-throw-if-not-resolved=\"false\"></xref> for the specified service partition. When this overload is used, the system will return a more up-to-date <xref href=\"System.Fabric.ResolvedServicePartition\" data-throw-if-not-resolved=\"false\"></xref> than the “previousResult” argument if it is available. Timeout for the operation will be set to the Naming “MaxOperationTimeout” parameter specified in the Cluster Manifest.</p>\n<p>The PreviousResult argument enables the user to say ”This is the previous list of endpoints for this Service partition. I have tried the endpoints and I believe they are stale. Return me a more up to date version of this set.” In this case, the system will try to return a more up-to-date <xref href=\"System.Fabric.ResolvedServicePartition\" data-throw-if-not-resolved=\"false\"></xref> in the most efficient way possible. If no newer version can be found, a <xref href=\"System.Fabric.ResolvedServicePartition\" data-throw-if-not-resolved=\"false\"></xref> with the same version will be returned.ResolveServicePartition can be called without the previousResult argument or previousResult argument set to null. As no prerequisite is specified, the system will return the closest copy of the <xref href=\"System.Fabric.ResolvedServicePartition\" data-throw-if-not-resolved=\"false\"></xref> for the service partition.</p>\n"
  example: []
  syntax:
    content: public Task<ResolvedServicePartition> ResolveServicePartitionAsync(Uri serviceName, string partitionKey, ResolvedServicePartition previousResult)
    content.vb: Public Function ResolveServicePartitionAsync(serviceName As Uri, partitionKey As String, previousResult As ResolvedServicePartition) As Task(Of ResolvedServicePartition)
    parameters:
    - id: serviceName
      type: System.Uri
      description: "\n<p>The Service Fabric Name of the service instance.</p>\n"
    - id: partitionKey
      type: System.String
      description: "\n<p>The partition key for the service partition.</p>\n"
    - id: previousResult
      type: System.Fabric.ResolvedServicePartition
      description: "\n<p>The previous <xref href=\"System.Fabric.ResolvedServicePartition\" data-throw-if-not-resolved=\"false\"></xref> for the service partition that the user believes is stale.</p>\n"
    return:
      type: System.Threading.Tasks.Task{System.Fabric.ResolvedServicePartition}
      description: "\n<p>The set of endpoints the specified service partition is listening to.</p>\n"
  overload: System.Fabric.FabricClient.ServiceManagementClient.ResolveServicePartitionAsync*
  exceptions:
  - type: System.Fabric.FabricObjectClosedException
    commentId: T:System.Fabric.FabricObjectClosedException
    description: "\n<p>The <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object is in a closed state. Dispose of the <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object you are using and instantiate a new <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.ServiceManagementClient.ResolveServicePartitionAsync(System.Uri,System.String,System.Fabric.ResolvedServicePartition,System.TimeSpan)
  commentId: M:System.Fabric.FabricClient.ServiceManagementClient.ResolveServicePartitionAsync(System.Uri,System.String,System.Fabric.ResolvedServicePartition,System.TimeSpan)
  id: ResolveServicePartitionAsync(System.Uri,System.String,System.Fabric.ResolvedServicePartition,System.TimeSpan)
  parent: System.Fabric.FabricClient.ServiceManagementClient
  langs:
  - csharp
  - vb
  name: ResolveServicePartitionAsync(Uri, String, ResolvedServicePartition, TimeSpan)
  nameWithType: FabricClient.ServiceManagementClient.ResolveServicePartitionAsync(Uri, String, ResolvedServicePartition, TimeSpan)
  fullName: System.Fabric.FabricClient.ServiceManagementClient.ResolveServicePartitionAsync(System.Uri, System.String, System.Fabric.ResolvedServicePartition, System.TimeSpan)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ServiceManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: ResolveServicePartitionAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ServiceManagementClient.cs
    startLine: 946
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Queries the system for the set of endpoints the specified service partition is listening to.</p>\n"
  remarks: "\n<p>This is a complaint based resolution API.</p>\n<p>This will return a <xref href=\"System.Fabric.ResolvedServicePartition\" data-throw-if-not-resolved=\"false\"></xref> for the specified service partition. When this overload is used, the system will return a more up-to-date <xref href=\"System.Fabric.ResolvedServicePartition\" data-throw-if-not-resolved=\"false\"></xref> than the “previousResult” argument if it is available.</p>\n<p>The PreviousResult argument enables the user to say ”This is the previous list of endpoints for this Service partition. I have tried the endpoints and I believe they are stale. Return me a more up to date version of this set.” In this case, the system will try to return a more up-to-date <xref href=\"System.Fabric.ResolvedServicePartition\" data-throw-if-not-resolved=\"false\"></xref> in the most efficient way possible. If no newer version can be found, a <xref href=\"System.Fabric.ResolvedServicePartition\" data-throw-if-not-resolved=\"false\"></xref> with the same version will be returned.ResolveServicePartition can be called without the previousResult argument or previousResult argument set to null. As no prerequisite is specified, the system will return the closest copy of the <xref href=\"System.Fabric.ResolvedServicePartition\" data-throw-if-not-resolved=\"false\"></xref> for the service partition.</p>\n"
  example: []
  syntax:
    content: public Task<ResolvedServicePartition> ResolveServicePartitionAsync(Uri serviceName, string partitionKey, ResolvedServicePartition previousResult, TimeSpan timeout)
    content.vb: Public Function ResolveServicePartitionAsync(serviceName As Uri, partitionKey As String, previousResult As ResolvedServicePartition, timeout As TimeSpan) As Task(Of ResolvedServicePartition)
    parameters:
    - id: serviceName
      type: System.Uri
      description: "\n<p>The Service Fabric Name of the service instance.</p>\n"
    - id: partitionKey
      type: System.String
      description: "\n<p>The partition key for the service partition.</p>\n"
    - id: previousResult
      type: System.Fabric.ResolvedServicePartition
      description: "\n<p>The previous <xref href=\"System.Fabric.ResolvedServicePartition\" data-throw-if-not-resolved=\"false\"></xref> for the service partition that the user believes is stale.</p>\n"
    - id: timeout
      type: System.TimeSpan
      description: "\n<p>The maximum amount of time the system will allow this operation to continue before returning <xref href=\"System.TimeoutException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    return:
      type: System.Threading.Tasks.Task{System.Fabric.ResolvedServicePartition}
      description: "\n<p>The set of endpoints the specified service partition is listening to.</p>\n"
  overload: System.Fabric.FabricClient.ServiceManagementClient.ResolveServicePartitionAsync*
  exceptions:
  - type: System.Fabric.FabricObjectClosedException
    commentId: T:System.Fabric.FabricObjectClosedException
    description: "\n<p>The <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object is in a closed state. Dispose of the <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object you are using and instantiate a new <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.ServiceManagementClient.ResolveServicePartitionAsync(System.Uri,System.String,System.Fabric.ResolvedServicePartition,System.TimeSpan,System.Threading.CancellationToken)
  commentId: M:System.Fabric.FabricClient.ServiceManagementClient.ResolveServicePartitionAsync(System.Uri,System.String,System.Fabric.ResolvedServicePartition,System.TimeSpan,System.Threading.CancellationToken)
  id: ResolveServicePartitionAsync(System.Uri,System.String,System.Fabric.ResolvedServicePartition,System.TimeSpan,System.Threading.CancellationToken)
  parent: System.Fabric.FabricClient.ServiceManagementClient
  langs:
  - csharp
  - vb
  name: ResolveServicePartitionAsync(Uri, String, ResolvedServicePartition, TimeSpan, CancellationToken)
  nameWithType: FabricClient.ServiceManagementClient.ResolveServicePartitionAsync(Uri, String, ResolvedServicePartition, TimeSpan, CancellationToken)
  fullName: System.Fabric.FabricClient.ServiceManagementClient.ResolveServicePartitionAsync(System.Uri, System.String, System.Fabric.ResolvedServicePartition, System.TimeSpan, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ServiceManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: ResolveServicePartitionAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ServiceManagementClient.cs
    startLine: 980
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Queries the system for the set of endpoints the specified service partition is listening to.</p>\n"
  remarks: "\n<p>This is a complaint based resolution API.</p>\n<p>This will return a <xref href=\"System.Fabric.ResolvedServicePartition\" data-throw-if-not-resolved=\"false\"></xref> for the specified service partition. When this overload is used, the system will return a more up-to-date <xref href=\"System.Fabric.ResolvedServicePartition\" data-throw-if-not-resolved=\"false\"></xref> than the “previousResult” argument if it is available.</p>\n<p>The PreviousResult argument enables the user to say ”This is the previous list of endpoints for this Service partition. I have tried the endpoints and I believe they are stale. Return me a more up to date version of this set.” In this case, the system will try to return a more up-to-date <xref href=\"System.Fabric.ResolvedServicePartition\" data-throw-if-not-resolved=\"false\"></xref> in the most efficient way possible. If no newer version can be found, a <xref href=\"System.Fabric.ResolvedServicePartition\" data-throw-if-not-resolved=\"false\"></xref> with the same version will be returned.ResolveServicePartition can be called without the previousResult argument or previousResult argument set to null. As no prerequisite is specified, the system will return the closest copy of the <xref href=\"System.Fabric.ResolvedServicePartition\" data-throw-if-not-resolved=\"false\"></xref> for the service partition.</p>\n"
  example: []
  syntax:
    content: public Task<ResolvedServicePartition> ResolveServicePartitionAsync(Uri serviceName, string partitionKey, ResolvedServicePartition previousResult, TimeSpan timeout, CancellationToken cancellationToken)
    content.vb: Public Function ResolveServicePartitionAsync(serviceName As Uri, partitionKey As String, previousResult As ResolvedServicePartition, timeout As TimeSpan, cancellationToken As CancellationToken) As Task(Of ResolvedServicePartition)
    parameters:
    - id: serviceName
      type: System.Uri
      description: "\n<p>The Service Fabric Name of the service instance.</p>\n"
    - id: partitionKey
      type: System.String
      description: "\n<p>The partition key for the service partition.</p>\n"
    - id: previousResult
      type: System.Fabric.ResolvedServicePartition
      description: "\n<p>The previous <xref href=\"System.Fabric.ResolvedServicePartition\" data-throw-if-not-resolved=\"false\"></xref> for the service partition that the user believes is stale.</p>\n"
    - id: timeout
      type: System.TimeSpan
      description: "\n<p>The maximum amount of time the system will allow this operation to continue before returning <xref href=\"System.TimeoutException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> that the operation is observing. It can be used to propagate notification that the operation should be canceled.</p>\n"
    return:
      type: System.Threading.Tasks.Task{System.Fabric.ResolvedServicePartition}
      description: "\n<p>The set of endpoints the specified service partition is listening to.</p>\n"
  overload: System.Fabric.FabricClient.ServiceManagementClient.ResolveServicePartitionAsync*
  exceptions:
  - type: System.Fabric.FabricObjectClosedException
    commentId: T:System.Fabric.FabricObjectClosedException
    description: "\n<p>The <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object is in a closed state. Dispose of the <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object you are using and instantiate a new <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.ServiceManagementClient.RegisterServicePartitionResolutionChangeHandler(System.Uri,System.Fabric.ServicePartitionResolutionChangeHandler)
  commentId: M:System.Fabric.FabricClient.ServiceManagementClient.RegisterServicePartitionResolutionChangeHandler(System.Uri,System.Fabric.ServicePartitionResolutionChangeHandler)
  id: RegisterServicePartitionResolutionChangeHandler(System.Uri,System.Fabric.ServicePartitionResolutionChangeHandler)
  parent: System.Fabric.FabricClient.ServiceManagementClient
  langs:
  - csharp
  - vb
  name: RegisterServicePartitionResolutionChangeHandler(Uri, ServicePartitionResolutionChangeHandler)
  nameWithType: FabricClient.ServiceManagementClient.RegisterServicePartitionResolutionChangeHandler(Uri, ServicePartitionResolutionChangeHandler)
  fullName: System.Fabric.FabricClient.ServiceManagementClient.RegisterServicePartitionResolutionChangeHandler(System.Uri, System.Fabric.ServicePartitionResolutionChangeHandler)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ServiceManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: RegisterServicePartitionResolutionChangeHandler
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ServiceManagementClient.cs
    startLine: 1008
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Registers a handler to be raised when the accessibility information of a service partition changes.</p>\n"
  remarks: "\n<p>Notification will include changes on partition’s endpoints or exceptions that occurred while the information was being updated. This overload is used for Singleton partitioned service instances. Returned Int64 is the callback handle identifier for the registration.</p>\n<p>Notifications is a mechanism that delivers notifications to user’s code each time there is an service address change or an address resolution error related to a service partition the code has raised interest for. This way instead of resolving every time the current <xref href=\"System.Fabric.ResolvedServicePartition\" data-throw-if-not-resolved=\"false\"></xref> becomes stale, program registers for updates.</p>\n"
  example: []
  syntax:
    content: public long RegisterServicePartitionResolutionChangeHandler(Uri serviceName, ServicePartitionResolutionChangeHandler callback)
    content.vb: Public Function RegisterServicePartitionResolutionChangeHandler(serviceName As Uri, callback As ServicePartitionResolutionChangeHandler) As Long
    parameters:
    - id: serviceName
      type: System.Uri
      description: "\n<p>The Service Fabric Name of the service.</p>\n"
    - id: callback
      type: System.Fabric.ServicePartitionResolutionChangeHandler
      description: "\n<p>The function that will be called when a notification arrives.</p>\n"
    return:
      type: System.Int64
      description: "\n<p>The handler to be raised when the accessibility information of a service partition changes.</p>\n"
  overload: System.Fabric.FabricClient.ServiceManagementClient.RegisterServicePartitionResolutionChangeHandler*
  exceptions:
  - type: System.Fabric.FabricObjectClosedException
    commentId: T:System.Fabric.FabricObjectClosedException
    description: "\n<p>The <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object is in a closed state. Dispose of the <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object you are using and instantiate a new <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.ServiceManagementClient.RegisterServicePartitionResolutionChangeHandler(System.Uri,System.Int64,System.Fabric.ServicePartitionResolutionChangeHandler)
  commentId: M:System.Fabric.FabricClient.ServiceManagementClient.RegisterServicePartitionResolutionChangeHandler(System.Uri,System.Int64,System.Fabric.ServicePartitionResolutionChangeHandler)
  id: RegisterServicePartitionResolutionChangeHandler(System.Uri,System.Int64,System.Fabric.ServicePartitionResolutionChangeHandler)
  parent: System.Fabric.FabricClient.ServiceManagementClient
  langs:
  - csharp
  - vb
  name: RegisterServicePartitionResolutionChangeHandler(Uri, Int64, ServicePartitionResolutionChangeHandler)
  nameWithType: FabricClient.ServiceManagementClient.RegisterServicePartitionResolutionChangeHandler(Uri, Int64, ServicePartitionResolutionChangeHandler)
  fullName: System.Fabric.FabricClient.ServiceManagementClient.RegisterServicePartitionResolutionChangeHandler(System.Uri, System.Int64, System.Fabric.ServicePartitionResolutionChangeHandler)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ServiceManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: RegisterServicePartitionResolutionChangeHandler
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ServiceManagementClient.cs
    startLine: 1035
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Registers a handler to be raised when the accessibility information of a service partition changes.</p>\n"
  remarks: "\n<p>Notification will include changes on partition’s endpoints or exceptions that occurred while the information was being updated. This overload is used for UniformInt64Range partitioned service instances. Returned Int64 is the callback handle identifier for the registration.</p>\n<p>Notifications is a mechanism that delivers notifications to user’s code each time there is an service address change or an address resolution error related to a service partition the code has raised interest for. This way instead of resolving every time the current <xref href=\"System.Fabric.ResolvedServicePartition\" data-throw-if-not-resolved=\"false\"></xref> becomes stale, program registers for updates.</p>\n"
  example: []
  syntax:
    content: public long RegisterServicePartitionResolutionChangeHandler(Uri serviceName, long partitionKey, ServicePartitionResolutionChangeHandler callback)
    content.vb: Public Function RegisterServicePartitionResolutionChangeHandler(serviceName As Uri, partitionKey As Long, callback As ServicePartitionResolutionChangeHandler) As Long
    parameters:
    - id: serviceName
      type: System.Uri
      description: "\n<p>The Service Fabric Name of the service.</p>\n"
    - id: partitionKey
      type: System.Int64
      description: "\n<p>The partition key for the service partition.</p>\n"
    - id: callback
      type: System.Fabric.ServicePartitionResolutionChangeHandler
      description: "\n<p>The function that will be called when a notification arrives.</p>\n"
    return:
      type: System.Int64
      description: "\n<p>The handler to be raised when the accessibility information of a service partition changes.</p>\n"
  overload: System.Fabric.FabricClient.ServiceManagementClient.RegisterServicePartitionResolutionChangeHandler*
  exceptions:
  - type: System.Fabric.FabricObjectClosedException
    commentId: T:System.Fabric.FabricObjectClosedException
    description: "\n<p>The <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object is in a closed state. Dispose of the <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object you are using and instantiate a new <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.ServiceManagementClient.RegisterServicePartitionResolutionChangeHandler(System.Uri,System.String,System.Fabric.ServicePartitionResolutionChangeHandler)
  commentId: M:System.Fabric.FabricClient.ServiceManagementClient.RegisterServicePartitionResolutionChangeHandler(System.Uri,System.String,System.Fabric.ServicePartitionResolutionChangeHandler)
  id: RegisterServicePartitionResolutionChangeHandler(System.Uri,System.String,System.Fabric.ServicePartitionResolutionChangeHandler)
  parent: System.Fabric.FabricClient.ServiceManagementClient
  langs:
  - csharp
  - vb
  name: RegisterServicePartitionResolutionChangeHandler(Uri, String, ServicePartitionResolutionChangeHandler)
  nameWithType: FabricClient.ServiceManagementClient.RegisterServicePartitionResolutionChangeHandler(Uri, String, ServicePartitionResolutionChangeHandler)
  fullName: System.Fabric.FabricClient.ServiceManagementClient.RegisterServicePartitionResolutionChangeHandler(System.Uri, System.String, System.Fabric.ServicePartitionResolutionChangeHandler)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ServiceManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: RegisterServicePartitionResolutionChangeHandler
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ServiceManagementClient.cs
    startLine: 1062
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Registers a handler to be raised when the accessibility information of a service partition changes.</p>\n"
  remarks: "\n<p>Notification will include changes on partition’s endpoints or exceptions that occurred while the information was being updated. This overload is used for Named partitioned service instances. Returned Int64 is the callback handle identifier for the registration.</p>\n<p>Notifications is a mechanism that delivers notifications to user’s code each time there is an service address change or an address resolution error related to a service partition the code has raised interest for. This way instead of resolving every time the current <xref href=\"System.Fabric.ResolvedServicePartition\" data-throw-if-not-resolved=\"false\"></xref> becomes stale, program registers for updates.</p>\n"
  example: []
  syntax:
    content: public long RegisterServicePartitionResolutionChangeHandler(Uri serviceName, string partitionKey, ServicePartitionResolutionChangeHandler callback)
    content.vb: Public Function RegisterServicePartitionResolutionChangeHandler(serviceName As Uri, partitionKey As String, callback As ServicePartitionResolutionChangeHandler) As Long
    parameters:
    - id: serviceName
      type: System.Uri
      description: "\n<p>The Service Fabric Name of the service.</p>\n"
    - id: partitionKey
      type: System.String
      description: "\n<p>The partition key for the service partition.</p>\n"
    - id: callback
      type: System.Fabric.ServicePartitionResolutionChangeHandler
      description: "\n<p>The function that will be called when a notification arrives.</p>\n"
    return:
      type: System.Int64
      description: "\n<p>The handler to be raised when the accessibility information of a service partition changes.</p>\n"
  overload: System.Fabric.FabricClient.ServiceManagementClient.RegisterServicePartitionResolutionChangeHandler*
  exceptions:
  - type: System.Fabric.FabricObjectClosedException
    commentId: T:System.Fabric.FabricObjectClosedException
    description: "\n<p>The <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object is in a closed state. Dispose of the <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object you are using and instantiate a new <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.ServiceManagementClient.UnregisterServicePartitionResolutionChangeHandler(System.Int64)
  commentId: M:System.Fabric.FabricClient.ServiceManagementClient.UnregisterServicePartitionResolutionChangeHandler(System.Int64)
  id: UnregisterServicePartitionResolutionChangeHandler(System.Int64)
  parent: System.Fabric.FabricClient.ServiceManagementClient
  langs:
  - csharp
  - vb
  name: UnregisterServicePartitionResolutionChangeHandler(Int64)
  nameWithType: FabricClient.ServiceManagementClient.UnregisterServicePartitionResolutionChangeHandler(Int64)
  fullName: System.Fabric.FabricClient.ServiceManagementClient.UnregisterServicePartitionResolutionChangeHandler(System.Int64)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ServiceManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: UnregisterServicePartitionResolutionChangeHandler
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ServiceManagementClient.cs
    startLine: 1078
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Unregisters a change handler previously registered with <xref href=\"System.Fabric.FabricClient.ServiceManagementClient.RegisterServicePartitionResolutionChangeHandler(System.Uri%2cSystem.Fabric.ServicePartitionResolutionChangeHandler)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example: []
  syntax:
    content: public void UnregisterServicePartitionResolutionChangeHandler(long callbackHandle)
    content.vb: Public Sub UnregisterServicePartitionResolutionChangeHandler(callbackHandle As Long)
    parameters:
    - id: callbackHandle
      type: System.Int64
      description: "\n<p>The callbackHandle identifier that will be removed. This is returned by the <xref href=\"System.Fabric.FabricClient.ServiceManagementClient.RegisterServicePartitionResolutionChangeHandler(System.Uri%2cSystem.Fabric.ServicePartitionResolutionChangeHandler)\" data-throw-if-not-resolved=\"false\"></xref> call.</p>\n"
  overload: System.Fabric.FabricClient.ServiceManagementClient.UnregisterServicePartitionResolutionChangeHandler*
  exceptions:
  - type: System.Fabric.FabricObjectClosedException
    commentId: T:System.Fabric.FabricObjectClosedException
    description: "\n<p>The <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object is in a closed state. Dispose of the <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object you are using and instantiate a new <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.ServiceManagementClient.GetServiceManifestAsync(System.String,System.String,System.String)
  commentId: M:System.Fabric.FabricClient.ServiceManagementClient.GetServiceManifestAsync(System.String,System.String,System.String)
  id: GetServiceManifestAsync(System.String,System.String,System.String)
  parent: System.Fabric.FabricClient.ServiceManagementClient
  langs:
  - csharp
  - vb
  name: GetServiceManifestAsync(String, String, String)
  nameWithType: FabricClient.ServiceManagementClient.GetServiceManifestAsync(String, String, String)
  fullName: System.Fabric.FabricClient.ServiceManagementClient.GetServiceManifestAsync(System.String, System.String, System.String)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ServiceManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: GetServiceManifestAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ServiceManagementClient.cs
    startLine: 1102
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Gets the provisioned service manifest document in the specified ApplicationTypeName and ApplicationTypeVersion.</p>\n"
  example: []
  syntax:
    content: public Task<string> GetServiceManifestAsync(string applicationTypeName, string applicationTypeVersion, string serviceManifestName)
    content.vb: Public Function GetServiceManifestAsync(applicationTypeName As String, applicationTypeVersion As String, serviceManifestName As String) As Task(Of String)
    parameters:
    - id: applicationTypeName
      type: System.String
      description: "\n<p>The name of the provisioned application manifest.</p>\n"
    - id: applicationTypeVersion
      type: System.String
      description: "\n<p>The version of the provisioned application manifest.</p>\n"
    - id: serviceManifestName
      type: System.String
      description: "\n<p>The name of the service manifest referenced in the application manifest.</p>\n"
    return:
      type: System.Threading.Tasks.Task{System.String}
      description: "\n<p>The provisioned service manifest document.</p>\n"
  overload: System.Fabric.FabricClient.ServiceManagementClient.GetServiceManifestAsync*
  exceptions:
  - type: System.Fabric.FabricObjectClosedException
    commentId: T:System.Fabric.FabricObjectClosedException
    description: "\n<p>The <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object is in a closed state. Dispose of the <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object you are using and instantiate a new <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.ServiceManagementClient.GetServiceManifestAsync(System.String,System.String,System.String,System.TimeSpan,System.Threading.CancellationToken)
  commentId: M:System.Fabric.FabricClient.ServiceManagementClient.GetServiceManifestAsync(System.String,System.String,System.String,System.TimeSpan,System.Threading.CancellationToken)
  id: GetServiceManifestAsync(System.String,System.String,System.String,System.TimeSpan,System.Threading.CancellationToken)
  parent: System.Fabric.FabricClient.ServiceManagementClient
  langs:
  - csharp
  - vb
  name: GetServiceManifestAsync(String, String, String, TimeSpan, CancellationToken)
  nameWithType: FabricClient.ServiceManagementClient.GetServiceManifestAsync(String, String, String, TimeSpan, CancellationToken)
  fullName: System.Fabric.FabricClient.ServiceManagementClient.GetServiceManifestAsync(System.String, System.String, System.String, System.TimeSpan, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ServiceManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: GetServiceManifestAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ServiceManagementClient.cs
    startLine: 1131
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Gets the provisioned Service manifest document in the specified ApplicationTypeName and ApplicationTypeVersion.</p>\n"
  example: []
  syntax:
    content: public Task<string> GetServiceManifestAsync(string applicationTypeName, string applicationTypeVersion, string serviceManifestName, TimeSpan timeout, CancellationToken cancellationToken)
    content.vb: Public Function GetServiceManifestAsync(applicationTypeName As String, applicationTypeVersion As String, serviceManifestName As String, timeout As TimeSpan, cancellationToken As CancellationToken) As Task(Of String)
    parameters:
    - id: applicationTypeName
      type: System.String
      description: "\n<p>The name of the provisioned application manifest.</p>\n"
    - id: applicationTypeVersion
      type: System.String
      description: "\n<p>The version of the provisioned application manifest.</p>\n"
    - id: serviceManifestName
      type: System.String
      description: "\n<p>The name of the service manifest referenced in the application manifest.</p>\n"
    - id: timeout
      type: System.TimeSpan
      description: "\n<p>The maximum amount of time the system will allow this operation to continue before returning <xref href=\"System.TimeoutException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> that the operation is observing. It can be used to propagate notification that the operation should be canceled.</p>\n"
    return:
      type: System.Threading.Tasks.Task{System.String}
      description: "\n<p>The provisioned service manifest document</p>\n"
  overload: System.Fabric.FabricClient.ServiceManagementClient.GetServiceManifestAsync*
  exceptions:
  - type: System.Fabric.FabricObjectClosedException
    commentId: T:System.Fabric.FabricObjectClosedException
    description: "\n<p>The <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object is in a closed state. Dispose of the <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object you are using and instantiate a new <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.ServiceManagementClient.RemoveReplicaAsync(System.String,System.Guid,System.Int64)
  commentId: M:System.Fabric.FabricClient.ServiceManagementClient.RemoveReplicaAsync(System.String,System.Guid,System.Int64)
  id: RemoveReplicaAsync(System.String,System.Guid,System.Int64)
  parent: System.Fabric.FabricClient.ServiceManagementClient
  langs:
  - csharp
  - vb
  name: RemoveReplicaAsync(String, Guid, Int64)
  nameWithType: FabricClient.ServiceManagementClient.RemoveReplicaAsync(String, Guid, Int64)
  fullName: System.Fabric.FabricClient.ServiceManagementClient.RemoveReplicaAsync(System.String, System.Guid, System.Int64)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ServiceManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: RemoveReplicaAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ServiceManagementClient.cs
    startLine: 1176
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Removes a service replica running on a node.</p>\n"
  remarks: "\n<p>This API gives a running replica the chance to cleanup its state and be gracefully shutdown. </p>\n<p>WARNING: There are no safety checks performed when this API is used. Incorrect use of this API can lead to data loss for stateful services.</p>\n"
  example: []
  syntax:
    content: public Task RemoveReplicaAsync(string nodeName, Guid partitionId, long replicaOrInstanceId)
    content.vb: Public Function RemoveReplicaAsync(nodeName As String, partitionId As Guid, replicaOrInstanceId As Long) As Task
    parameters:
    - id: nodeName
      type: System.String
      description: "\n<p>The name of the node.</p>\n"
    - id: partitionId
      type: System.Guid
      description: "\n<p>The partition identifier.</p>\n"
    - id: replicaOrInstanceId
      type: System.Int64
      description: "\n<p>The instance identifier.</p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>A Task representing the acknowledgment of the request.</p>\n"
  overload: System.Fabric.FabricClient.ServiceManagementClient.RemoveReplicaAsync*
  exceptions:
  - type: System.Fabric.FabricObjectClosedException
    commentId: T:System.Fabric.FabricObjectClosedException
    description: "\n<p>\n    See <a href=\"https://azure.microsoft.com/documentation/articles/service-fabric-errors-and-exceptions/\"></a> for handling common FabricClient failures.</p>\n"
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: "\n<p>\n    See <a href=\"https://azure.microsoft.com/documentation/articles/service-fabric-errors-and-exceptions/\"></a> for handling common FabricClient failures.</p>\n"
  - type: System.Fabric.FabricException
    commentId: T:System.Fabric.FabricException
    description: "\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.ReplicaDoesNotExist\" data-throw-if-not-resolved=\"false\"></xref> is returned if the replica or instance id is not running on the node.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidReplicaStateForReplicaOperation\" data-throw-if-not-resolved=\"false\"></xref> is returned if the replica or instance id cannot be restarted or removed at this time as it is in an invalid state. For example, the replica is already in the process of being closed.</p>\n<p>\n    See also <a href=\"https://azure.microsoft.com/documentation/articles/service-fabric-errors-and-exceptions/\"></a> for handling common FabricClient failures.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.ServiceManagementClient.RemoveReplicaAsync(System.String,System.Guid,System.Int64,System.Boolean)
  commentId: M:System.Fabric.FabricClient.ServiceManagementClient.RemoveReplicaAsync(System.String,System.Guid,System.Int64,System.Boolean)
  id: RemoveReplicaAsync(System.String,System.Guid,System.Int64,System.Boolean)
  parent: System.Fabric.FabricClient.ServiceManagementClient
  langs:
  - csharp
  - vb
  name: RemoveReplicaAsync(String, Guid, Int64, Boolean)
  nameWithType: FabricClient.ServiceManagementClient.RemoveReplicaAsync(String, Guid, Int64, Boolean)
  fullName: System.Fabric.FabricClient.ServiceManagementClient.RemoveReplicaAsync(System.String, System.Guid, System.Int64, System.Boolean)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ServiceManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: RemoveReplicaAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ServiceManagementClient.cs
    startLine: 1221
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Removes a service replica running on a node.</p>\n"
  remarks: "\n<p>This API gives a running replica the chance to cleanup its state and be gracefully shutdown. </p>\n<p>If the forceRemove flag is set then no such opportunity is given. Service Fabric will terminate the host for that replica and any persisted state of that replica will be leaked. </p>\n<p>WARNING: There are no safety checks performed when this API is used. Incorrect use of this API can lead to data loss for stateful services.</p>\n<p>In addition, the forceRemove flag impacts all other replicas hosted in the same process.</p>\n"
  example: []
  syntax:
    content: public Task RemoveReplicaAsync(string nodeName, Guid partitionId, long replicaOrInstanceId, bool forceRemove)
    content.vb: Public Function RemoveReplicaAsync(nodeName As String, partitionId As Guid, replicaOrInstanceId As Long, forceRemove As Boolean) As Task
    parameters:
    - id: nodeName
      type: System.String
      description: "\n<p>The name of the node.</p>\n"
    - id: partitionId
      type: System.Guid
      description: "\n<p>The partition identifier.</p>\n"
    - id: replicaOrInstanceId
      type: System.Int64
      description: "\n<p>The instance identifier.</p>\n"
    - id: forceRemove
      type: System.Boolean
      description: "\n<p>Specifies whether the replica should be given a chance to gracefully clean up its state and close</p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>A Task representing the acknowledgment of the request.</p>\n"
  overload: System.Fabric.FabricClient.ServiceManagementClient.RemoveReplicaAsync*
  exceptions:
  - type: System.Fabric.FabricObjectClosedException
    commentId: T:System.Fabric.FabricObjectClosedException
    description: "\n<p>\n    See <a href=\"https://azure.microsoft.com/documentation/articles/service-fabric-errors-and-exceptions/\"></a> for handling common FabricClient failures.</p>\n"
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: "\n<p>\n    See <a href=\"https://azure.microsoft.com/documentation/articles/service-fabric-errors-and-exceptions/\"></a> for handling common FabricClient failures.</p>\n"
  - type: System.Fabric.FabricException
    commentId: T:System.Fabric.FabricException
    description: "\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.ReplicaDoesNotExist\" data-throw-if-not-resolved=\"false\"></xref> is returned if the replica or instance id is not running on the node.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidReplicaStateForReplicaOperation\" data-throw-if-not-resolved=\"false\"></xref> is returned if the replica or instance id cannot be restarted or removed at this time as it is in an invalid state. For example, the replica is already in the process of being closed.</p>\n<p>\n    See also <a href=\"https://azure.microsoft.com/documentation/articles/service-fabric-errors-and-exceptions/\"></a> for handling common FabricClient failures.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.ServiceManagementClient.RemoveReplicaAsync(System.String,System.Guid,System.Int64,System.TimeSpan,System.Threading.CancellationToken)
  commentId: M:System.Fabric.FabricClient.ServiceManagementClient.RemoveReplicaAsync(System.String,System.Guid,System.Int64,System.TimeSpan,System.Threading.CancellationToken)
  id: RemoveReplicaAsync(System.String,System.Guid,System.Int64,System.TimeSpan,System.Threading.CancellationToken)
  parent: System.Fabric.FabricClient.ServiceManagementClient
  langs:
  - csharp
  - vb
  name: RemoveReplicaAsync(String, Guid, Int64, TimeSpan, CancellationToken)
  nameWithType: FabricClient.ServiceManagementClient.RemoveReplicaAsync(String, Guid, Int64, TimeSpan, CancellationToken)
  fullName: System.Fabric.FabricClient.ServiceManagementClient.RemoveReplicaAsync(System.String, System.Guid, System.Int64, System.TimeSpan, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ServiceManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: RemoveReplicaAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ServiceManagementClient.cs
    startLine: 1267
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Removes a service replica running on a node.</p>\n"
  remarks: "\n<p>This API gives a running replica the chance to cleanup its state and be gracefully shutdown. </p>\n<p>WARNING: There are no safety checks performed when this API is used. Incorrect use of this API can lead to data loss for stateful services.</p>\n"
  example: []
  syntax:
    content: public Task RemoveReplicaAsync(string nodeName, Guid partitionId, long replicaOrInstanceId, TimeSpan timeout, CancellationToken cancellationToken)
    content.vb: Public Function RemoveReplicaAsync(nodeName As String, partitionId As Guid, replicaOrInstanceId As Long, timeout As TimeSpan, cancellationToken As CancellationToken) As Task
    parameters:
    - id: nodeName
      type: System.String
      description: "\n<p>The name of the node.</p>\n"
    - id: partitionId
      type: System.Guid
      description: "\n<p>The partition identifier.</p>\n"
    - id: replicaOrInstanceId
      type: System.Int64
      description: "\n<p>The instance identifier.</p>\n"
    - id: timeout
      type: System.TimeSpan
      description: "\n<p>The timespan that defines the maximum amount of time  will allow this operation to continue before returning a <xref href=\"System.TimeoutException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The optional cancellation token that the operation is observing. It can be used to send a notification that the operation should be canceled. Note that cancellation is advisory and that the operation may still be completed even if it is cancelled.</p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>A Task representing the acknowledgment of the request.</p>\n"
  overload: System.Fabric.FabricClient.ServiceManagementClient.RemoveReplicaAsync*
  exceptions:
  - type: System.Fabric.FabricObjectClosedException
    commentId: T:System.Fabric.FabricObjectClosedException
    description: "\n<p>\n    See <a href=\"https://azure.microsoft.com/documentation/articles/service-fabric-errors-and-exceptions/\"></a> for handling common FabricClient failures.</p>\n"
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: "\n<p>\n    See <a href=\"https://azure.microsoft.com/documentation/articles/service-fabric-errors-and-exceptions/\"></a> for handling common FabricClient failures.</p>\n"
  - type: System.Fabric.FabricException
    commentId: T:System.Fabric.FabricException
    description: "\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.ReplicaDoesNotExist\" data-throw-if-not-resolved=\"false\"></xref> is returned if the replica or instance id is not running on the node.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidReplicaStateForReplicaOperation\" data-throw-if-not-resolved=\"false\"></xref> is returned if the replica or instance id cannot be restarted or removed at this time as it is in an invalid state. For example, the replica is already in the process of being closed.</p>\n<p>\n    See also <a href=\"https://azure.microsoft.com/documentation/articles/service-fabric-errors-and-exceptions/\"></a> for handling common FabricClient failures.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.ServiceManagementClient.RemoveReplicaAsync(System.String,System.Guid,System.Int64,System.Boolean,System.TimeSpan,System.Threading.CancellationToken)
  commentId: M:System.Fabric.FabricClient.ServiceManagementClient.RemoveReplicaAsync(System.String,System.Guid,System.Int64,System.Boolean,System.TimeSpan,System.Threading.CancellationToken)
  id: RemoveReplicaAsync(System.String,System.Guid,System.Int64,System.Boolean,System.TimeSpan,System.Threading.CancellationToken)
  parent: System.Fabric.FabricClient.ServiceManagementClient
  langs:
  - csharp
  - vb
  name: RemoveReplicaAsync(String, Guid, Int64, Boolean, TimeSpan, CancellationToken)
  nameWithType: FabricClient.ServiceManagementClient.RemoveReplicaAsync(String, Guid, Int64, Boolean, TimeSpan, CancellationToken)
  fullName: System.Fabric.FabricClient.ServiceManagementClient.RemoveReplicaAsync(System.String, System.Guid, System.Int64, System.Boolean, System.TimeSpan, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ServiceManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: RemoveReplicaAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ServiceManagementClient.cs
    startLine: 1318
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Removes a service replica running on a node.</p>\n"
  remarks: "\n<p>This API gives a running replica the chance to cleanup its state and be gracefully shutdown. </p>\n<p>If the forceRemove flag is set then no such opportunity is given. Service Fabric will terminate the host for that replica and any persisted state of that replica will be leaked. </p>\n<p>WARNING: There are no safety checks performed when this API is used. Incorrect use of this API can lead to data loss for stateful services.</p>\n<p>In addition, the forceRemove flag impacts all other replicas hosted in the same process.</p>\n"
  example: []
  syntax:
    content: public Task RemoveReplicaAsync(string nodeName, Guid partitionId, long replicaOrInstanceId, bool forceRemove, TimeSpan timeout, CancellationToken cancellationToken)
    content.vb: Public Function RemoveReplicaAsync(nodeName As String, partitionId As Guid, replicaOrInstanceId As Long, forceRemove As Boolean, timeout As TimeSpan, cancellationToken As CancellationToken) As Task
    parameters:
    - id: nodeName
      type: System.String
      description: "\n<p>The name of the node.</p>\n"
    - id: partitionId
      type: System.Guid
      description: "\n<p>The partition identifier.</p>\n"
    - id: replicaOrInstanceId
      type: System.Int64
      description: "\n<p>The instance identifier.</p>\n"
    - id: forceRemove
      type: System.Boolean
      description: "\n<p>Specifies whether the replica should be given a chance to gracefully clean up its state and close</p>\n"
    - id: timeout
      type: System.TimeSpan
      description: "\n<p>The timespan that defines the maximum amount of time  will allow this operation to continue before returning a <xref href=\"System.TimeoutException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The optional cancellation token that the operation is observing. It can be used to send a notification that the operation should be canceled. Note that cancellation is advisory and that the operation may still be completed even if it is cancelled.</p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>A Task representing the acknowledgment of the request.</p>\n"
  overload: System.Fabric.FabricClient.ServiceManagementClient.RemoveReplicaAsync*
  exceptions:
  - type: System.Fabric.FabricObjectClosedException
    commentId: T:System.Fabric.FabricObjectClosedException
    description: "\n<p>\n    See <a href=\"https://azure.microsoft.com/documentation/articles/service-fabric-errors-and-exceptions/\"></a> for handling common FabricClient failures.</p>\n"
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: "\n<p>\n    See <a href=\"https://azure.microsoft.com/documentation/articles/service-fabric-errors-and-exceptions/\"></a> for handling common FabricClient failures.</p>\n"
  - type: System.Fabric.FabricException
    commentId: T:System.Fabric.FabricException
    description: "\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.ReplicaDoesNotExist\" data-throw-if-not-resolved=\"false\"></xref> is returned if the replica or instance id is not running on the node.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidReplicaStateForReplicaOperation\" data-throw-if-not-resolved=\"false\"></xref> is returned if the replica or instance id cannot be restarted or removed at this time as it is in an invalid state. For example, the replica is already in the process of being closed.</p>\n<p>\n    See also <a href=\"https://azure.microsoft.com/documentation/articles/service-fabric-errors-and-exceptions/\"></a> for handling common FabricClient failures.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.ServiceManagementClient.RestartReplicaAsync(System.String,System.Guid,System.Int64)
  commentId: M:System.Fabric.FabricClient.ServiceManagementClient.RestartReplicaAsync(System.String,System.Guid,System.Int64)
  id: RestartReplicaAsync(System.String,System.Guid,System.Int64)
  parent: System.Fabric.FabricClient.ServiceManagementClient
  langs:
  - csharp
  - vb
  name: RestartReplicaAsync(String, Guid, Int64)
  nameWithType: FabricClient.ServiceManagementClient.RestartReplicaAsync(String, Guid, Int64)
  fullName: System.Fabric.FabricClient.ServiceManagementClient.RestartReplicaAsync(System.String, System.Guid, System.Int64)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ServiceManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: RestartReplicaAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ServiceManagementClient.cs
    startLine: 1362
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Restarts a service replica of a persisted service running on a node.</p>\n"
  remarks: "\n<p>WARNING: There are no safety checks performed when this API is used. Incorrect use of this API can lead to availability loss for stateful services.</p>\n"
  example: []
  syntax:
    content: public Task RestartReplicaAsync(string nodeName, Guid partitionId, long replicaOrInstanceId)
    content.vb: Public Function RestartReplicaAsync(nodeName As String, partitionId As Guid, replicaOrInstanceId As Long) As Task
    parameters:
    - id: nodeName
      type: System.String
      description: "\n<p>The name of the node.</p>\n"
    - id: partitionId
      type: System.Guid
      description: "\n<p>The partition identifier.</p>\n"
    - id: replicaOrInstanceId
      type: System.Int64
      description: "\n<p>The instance identifier.</p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>A Task representing the acknowledgment of the request.</p>\n"
  overload: System.Fabric.FabricClient.ServiceManagementClient.RestartReplicaAsync*
  exceptions:
  - type: System.Fabric.FabricObjectClosedException
    commentId: T:System.Fabric.FabricObjectClosedException
    description: "\n<p>\n    See <a href=\"https://azure.microsoft.com/documentation/articles/service-fabric-errors-and-exceptions/\"></a> for handling common FabricClient failures.</p>\n"
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: "\n<p>\n    See <a href=\"https://azure.microsoft.com/documentation/articles/service-fabric-errors-and-exceptions/\"></a> for handling common FabricClient failures.</p>\n"
  - type: System.Fabric.FabricException
    commentId: T:System.Fabric.FabricException
    description: "\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.ReplicaDoesNotExist\" data-throw-if-not-resolved=\"false\"></xref> is returned if the replica or instance id is not running on the node.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidReplicaStateForReplicaOperation\" data-throw-if-not-resolved=\"false\"></xref> is returned if the replica or instance id cannot be restarted or removed at this time as it is in an invalid state. For example, the replica is already in the process of being closed.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidReplicaOperation\" data-throw-if-not-resolved=\"false\"></xref> is returned if the replica does not belong to a stateful persisted service. Only stateful persisted replicas can be restarted.</p>\n<p>\n    See also <a href=\"https://azure.microsoft.com/documentation/articles/service-fabric-errors-and-exceptions/\"></a> for handling common FabricClient failures.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.ServiceManagementClient.RestartReplicaAsync(System.String,System.Guid,System.Int64,System.TimeSpan,System.Threading.CancellationToken)
  commentId: M:System.Fabric.FabricClient.ServiceManagementClient.RestartReplicaAsync(System.String,System.Guid,System.Int64,System.TimeSpan,System.Threading.CancellationToken)
  id: RestartReplicaAsync(System.String,System.Guid,System.Int64,System.TimeSpan,System.Threading.CancellationToken)
  parent: System.Fabric.FabricClient.ServiceManagementClient
  langs:
  - csharp
  - vb
  name: RestartReplicaAsync(String, Guid, Int64, TimeSpan, CancellationToken)
  nameWithType: FabricClient.ServiceManagementClient.RestartReplicaAsync(String, Guid, Int64, TimeSpan, CancellationToken)
  fullName: System.Fabric.FabricClient.ServiceManagementClient.RestartReplicaAsync(System.String, System.Guid, System.Int64, System.TimeSpan, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ServiceManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: RestartReplicaAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ServiceManagementClient.cs
    startLine: 1409
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Restarts a service replica of a persisted service running on a node.</p>\n"
  remarks: "\n<p>WARNING: There are no safety checks performed when this API is used. Incorrect use of this API can lead to availability loss for stateful services.</p>\n"
  example: []
  syntax:
    content: public Task RestartReplicaAsync(string nodeName, Guid partitionId, long replicaOrInstanceId, TimeSpan timeout, CancellationToken cancellationToken)
    content.vb: Public Function RestartReplicaAsync(nodeName As String, partitionId As Guid, replicaOrInstanceId As Long, timeout As TimeSpan, cancellationToken As CancellationToken) As Task
    parameters:
    - id: nodeName
      type: System.String
      description: "\n<p>The name of the node.</p>\n"
    - id: partitionId
      type: System.Guid
      description: "\n<p>The partition identifier.</p>\n"
    - id: replicaOrInstanceId
      type: System.Int64
      description: "\n<p>The instance identifier.</p>\n"
    - id: timeout
      type: System.TimeSpan
      description: "\n<p>The timespan that defines the maximum amount of time  will allow this operation to continue before returning a <xref href=\"System.TimeoutException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The optional cancellation token that the operation is observing. It can be used to send a notification that the operation should be canceled. Note that cancellation is advisory and that the operation may still be completed even if it is cancelled.</p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>A Task representing the acknowledgment of the request.</p>\n"
  overload: System.Fabric.FabricClient.ServiceManagementClient.RestartReplicaAsync*
  exceptions:
  - type: System.Fabric.FabricObjectClosedException
    commentId: T:System.Fabric.FabricObjectClosedException
    description: "\n<p>\n    See <a href=\"https://azure.microsoft.com/documentation/articles/service-fabric-errors-and-exceptions/\"></a> for handling common FabricClient failures.</p>\n"
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: "\n<p>\n    See <a href=\"https://azure.microsoft.com/documentation/articles/service-fabric-errors-and-exceptions/\"></a> for handling common FabricClient failures.</p>\n"
  - type: System.Fabric.FabricException
    commentId: T:System.Fabric.FabricException
    description: "\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.ReplicaDoesNotExist\" data-throw-if-not-resolved=\"false\"></xref> is returned if the replica or instance id is not running on the node.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidReplicaStateForReplicaOperation\" data-throw-if-not-resolved=\"false\"></xref> is returned if the replica or instance id cannot be restarted or removed at this time as it is in an invalid state. For example, the replica is already in the process of being closed.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidReplicaOperation\" data-throw-if-not-resolved=\"false\"></xref> is returned if the replica does not belong to a stateful persisted service. Only stateful persisted replicas can be restarted.</p>\n<p>\n    See also <a href=\"https://azure.microsoft.com/documentation/articles/service-fabric-errors-and-exceptions/\"></a> for handling common FabricClient failures.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.ServiceManagementClient.RegisterServiceNotificationFilterAsync(System.Fabric.Description.ServiceNotificationFilterDescription)
  commentId: M:System.Fabric.FabricClient.ServiceManagementClient.RegisterServiceNotificationFilterAsync(System.Fabric.Description.ServiceNotificationFilterDescription)
  id: RegisterServiceNotificationFilterAsync(System.Fabric.Description.ServiceNotificationFilterDescription)
  parent: System.Fabric.FabricClient.ServiceManagementClient
  langs:
  - csharp
  - vb
  name: RegisterServiceNotificationFilterAsync(ServiceNotificationFilterDescription)
  nameWithType: FabricClient.ServiceManagementClient.RegisterServiceNotificationFilterAsync(ServiceNotificationFilterDescription)
  fullName: System.Fabric.FabricClient.ServiceManagementClient.RegisterServiceNotificationFilterAsync(System.Fabric.Description.ServiceNotificationFilterDescription)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ServiceManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: RegisterServiceNotificationFilterAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ServiceManagementClient.cs
    startLine: 1426
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Registers a <xref href=\"System.Fabric.Description.ServiceNotificationFilterDescription\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example: []
  syntax:
    content: public Task<long> RegisterServiceNotificationFilterAsync(ServiceNotificationFilterDescription description)
    content.vb: Public Function RegisterServiceNotificationFilterAsync(description As ServiceNotificationFilterDescription) As Task(Of Long)
    parameters:
    - id: description
      type: System.Fabric.Description.ServiceNotificationFilterDescription
      description: "\n<p>The description that determines which service endpoint change events should be delivered to this client through the <xref href=\"System.Fabric.FabricClient.ServiceManagementClient.ServiceNotificationFilterMatched\" data-throw-if-not-resolved=\"false\"></xref> event.</p>\n"
    return:
      type: System.Threading.Tasks.Task{System.Int64}
      description: "\n<p>An ID corresponding to the registered <xref href=\"System.Fabric.Description.ServiceNotificationFilterDescription\" data-throw-if-not-resolved=\"false\"></xref> that can be used to unregister the same filter through <xref href=\"System.Fabric.FabricClient.ServiceManagementClient.UnregisterServiceNotificationFilterAsync(System.Int64)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  overload: System.Fabric.FabricClient.ServiceManagementClient.RegisterServiceNotificationFilterAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.ServiceManagementClient.RegisterServiceNotificationFilterAsync(System.Fabric.Description.ServiceNotificationFilterDescription,System.TimeSpan,System.Threading.CancellationToken)
  commentId: M:System.Fabric.FabricClient.ServiceManagementClient.RegisterServiceNotificationFilterAsync(System.Fabric.Description.ServiceNotificationFilterDescription,System.TimeSpan,System.Threading.CancellationToken)
  id: RegisterServiceNotificationFilterAsync(System.Fabric.Description.ServiceNotificationFilterDescription,System.TimeSpan,System.Threading.CancellationToken)
  parent: System.Fabric.FabricClient.ServiceManagementClient
  langs:
  - csharp
  - vb
  name: RegisterServiceNotificationFilterAsync(ServiceNotificationFilterDescription, TimeSpan, CancellationToken)
  nameWithType: FabricClient.ServiceManagementClient.RegisterServiceNotificationFilterAsync(ServiceNotificationFilterDescription, TimeSpan, CancellationToken)
  fullName: System.Fabric.FabricClient.ServiceManagementClient.RegisterServiceNotificationFilterAsync(System.Fabric.Description.ServiceNotificationFilterDescription, System.TimeSpan, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ServiceManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: RegisterServiceNotificationFilterAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ServiceManagementClient.cs
    startLine: 1446
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Registers a <xref href=\"System.Fabric.Description.ServiceNotificationFilterDescription\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example: []
  syntax:
    content: public Task<long> RegisterServiceNotificationFilterAsync(ServiceNotificationFilterDescription description, TimeSpan timeout, CancellationToken cancellationToken)
    content.vb: Public Function RegisterServiceNotificationFilterAsync(description As ServiceNotificationFilterDescription, timeout As TimeSpan, cancellationToken As CancellationToken) As Task(Of Long)
    parameters:
    - id: description
      type: System.Fabric.Description.ServiceNotificationFilterDescription
      description: "\n<p>The description that determines which service endpoint change events should be delivered to this client through the <xref href=\"System.Fabric.FabricClient.ServiceManagementClient.ServiceNotificationFilterMatched\" data-throw-if-not-resolved=\"false\"></xref> event.</p>\n"
    - id: timeout
      type: System.TimeSpan
      description: "\n<p>The maximum time allowed for processing the request before <xref href=\"System.TimeoutException\" data-throw-if-not-resolved=\"false\"></xref> is thrown.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>Reserved for future use.</p>\n"
    return:
      type: System.Threading.Tasks.Task{System.Int64}
      description: "\n<p>An ID corresponding to the registered <xref href=\"System.Fabric.Description.ServiceNotificationFilterDescription\" data-throw-if-not-resolved=\"false\"></xref> that can be used to unregister the same filter through <xref href=\"System.Fabric.FabricClient.ServiceManagementClient.UnregisterServiceNotificationFilterAsync(System.Int64)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  overload: System.Fabric.FabricClient.ServiceManagementClient.RegisterServiceNotificationFilterAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.ServiceManagementClient.UnregisterServiceNotificationFilterAsync(System.Int64)
  commentId: M:System.Fabric.FabricClient.ServiceManagementClient.UnregisterServiceNotificationFilterAsync(System.Int64)
  id: UnregisterServiceNotificationFilterAsync(System.Int64)
  parent: System.Fabric.FabricClient.ServiceManagementClient
  langs:
  - csharp
  - vb
  name: UnregisterServiceNotificationFilterAsync(Int64)
  nameWithType: FabricClient.ServiceManagementClient.UnregisterServiceNotificationFilterAsync(Int64)
  fullName: System.Fabric.FabricClient.ServiceManagementClient.UnregisterServiceNotificationFilterAsync(System.Int64)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ServiceManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: UnregisterServiceNotificationFilterAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ServiceManagementClient.cs
    startLine: 1466
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Unregisters a previously registered <xref href=\"System.Fabric.Description.ServiceNotificationFilterDescription\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\nIt's not necessary to unregister individual filters if the client itself will no longer be used since all <xref href=\"System.Fabric.Description.ServiceNotificationFilterDescription\" data-throw-if-not-resolved=\"false\"></xref> objects registered by the <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> will be automatically unregistered when client is disposed.\n"
  example: []
  syntax:
    content: public Task UnregisterServiceNotificationFilterAsync(long filterId)
    content.vb: Public Function UnregisterServiceNotificationFilterAsync(filterId As Long) As Task
    parameters:
    - id: filterId
      type: System.Int64
      description: "\n<p>The ID of a previously registered <xref href=\"System.Fabric.Description.ServiceNotificationFilterDescription\" data-throw-if-not-resolved=\"false\"></xref> returned from <xref href=\"System.Fabric.FabricClient.ServiceManagementClient.RegisterServiceNotificationFilterAsync(System.Fabric.Description.ServiceNotificationFilterDescription)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>A <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> representing the async operation.</p>\n"
  overload: System.Fabric.FabricClient.ServiceManagementClient.UnregisterServiceNotificationFilterAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.ServiceManagementClient.UnregisterServiceNotificationFilterAsync(System.Int64,System.TimeSpan,System.Threading.CancellationToken)
  commentId: M:System.Fabric.FabricClient.ServiceManagementClient.UnregisterServiceNotificationFilterAsync(System.Int64,System.TimeSpan,System.Threading.CancellationToken)
  id: UnregisterServiceNotificationFilterAsync(System.Int64,System.TimeSpan,System.Threading.CancellationToken)
  parent: System.Fabric.FabricClient.ServiceManagementClient
  langs:
  - csharp
  - vb
  name: UnregisterServiceNotificationFilterAsync(Int64, TimeSpan, CancellationToken)
  nameWithType: FabricClient.ServiceManagementClient.UnregisterServiceNotificationFilterAsync(Int64, TimeSpan, CancellationToken)
  fullName: System.Fabric.FabricClient.ServiceManagementClient.UnregisterServiceNotificationFilterAsync(System.Int64, System.TimeSpan, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ServiceManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: UnregisterServiceNotificationFilterAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ServiceManagementClient.cs
    startLine: 1489
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Unregisters a previously registered <xref href=\"System.Fabric.Description.ServiceNotificationFilterDescription\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\nIt's not necessary to unregister individual filters if the client itself will no longer be used since all <xref href=\"System.Fabric.Description.ServiceNotificationFilterDescription\" data-throw-if-not-resolved=\"false\"></xref> objects registered by the <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> will be automatically unregistered when client is disposed.\n"
  example: []
  syntax:
    content: public Task UnregisterServiceNotificationFilterAsync(long filterId, TimeSpan timeout, CancellationToken cancellationToken)
    content.vb: Public Function UnregisterServiceNotificationFilterAsync(filterId As Long, timeout As TimeSpan, cancellationToken As CancellationToken) As Task
    parameters:
    - id: filterId
      type: System.Int64
      description: "\n<p>The ID of a previously registered <xref href=\"System.Fabric.Description.ServiceNotificationFilterDescription\" data-throw-if-not-resolved=\"false\"></xref> returned from <xref href=\"System.Fabric.FabricClient.ServiceManagementClient.RegisterServiceNotificationFilterAsync(System.Fabric.Description.ServiceNotificationFilterDescription)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    - id: timeout
      type: System.TimeSpan
      description: "\n<p>The maximum time allowed for processing the request before <xref href=\"System.TimeoutException\" data-throw-if-not-resolved=\"false\"></xref> is thrown.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>Reserved for future use.</p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>A <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> representing the async operation.</p>\n"
  overload: System.Fabric.FabricClient.ServiceManagementClient.UnregisterServiceNotificationFilterAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: System.Fabric
  commentId: N:System.Fabric
  isExternal: false
  name: System.Fabric
  nameWithType: System.Fabric
  fullName: System.Fabric
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.FabricClient.ServiceManagementClient.System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
  commentId: M:System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  parent: System.Fabric.Messaging.Stream.ByteArraySerializer
  definition: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  name: Serialize<FabricClient.ServiceManagementClient>()
  nameWithType: ByteArraySerializer.Serialize<FabricClient.ServiceManagementClient>()
  fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<System.Fabric.FabricClient.ServiceManagementClient>()
  nameWithType.vb: ByteArraySerializer.Serialize(Of FabricClient.ServiceManagementClient)()
  fullname.vb: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of System.Fabric.FabricClient.ServiceManagementClient)()
  name.vb: Serialize(Of FabricClient.ServiceManagementClient)()
  spec.csharp:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
    name: Serialize<FabricClient.ServiceManagementClient>
    nameWithType: ByteArraySerializer.Serialize<FabricClient.ServiceManagementClient>
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<System.Fabric.FabricClient.ServiceManagementClient>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
    name: Serialize(Of FabricClient.ServiceManagementClient)
    nameWithType: ByteArraySerializer.Serialize(Of FabricClient.ServiceManagementClient)
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of System.Fabric.FabricClient.ServiceManagementClient)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  commentId: M:System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  isExternal: false
  name: Serialize<T>(T)
  nameWithType: ByteArraySerializer.Serialize<T>(T)
  fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<T>(T)
  nameWithType.vb: ByteArraySerializer.Serialize(Of T)(T)
  fullname.vb: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of T)(T)
  name.vb: Serialize(Of T)(T)
  spec.csharp:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
    name: Serialize<T>
    nameWithType: ByteArraySerializer.Serialize<T>
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
    name: Serialize(Of T)
    nameWithType: ByteArraySerializer.Serialize(Of T)
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.Messaging.Stream.ByteArraySerializer
  commentId: T:System.Fabric.Messaging.Stream.ByteArraySerializer
  parent: System.Fabric.Messaging.Stream
  isExternal: false
  name: ByteArraySerializer
  nameWithType: ByteArraySerializer
  fullName: System.Fabric.Messaging.Stream.ByteArraySerializer
- uid: System.Fabric.Messaging.Stream
  commentId: N:System.Fabric.Messaging.Stream
  isExternal: false
  name: System.Fabric.Messaging.Stream
  nameWithType: System.Fabric.Messaging.Stream
  fullName: System.Fabric.Messaging.Stream
- uid: System.Fabric.Description.ServiceNotificationFilterDescription
  commentId: T:System.Fabric.Description.ServiceNotificationFilterDescription
  parent: System.Fabric.Description
  isExternal: false
  name: ServiceNotificationFilterDescription
  nameWithType: ServiceNotificationFilterDescription
  fullName: System.Fabric.Description.ServiceNotificationFilterDescription
- uid: System.Fabric.FabricClient.ServiceManagementClient.RegisterServiceNotificationFilterAsync(System.Fabric.Description.ServiceNotificationFilterDescription)
  commentId: M:System.Fabric.FabricClient.ServiceManagementClient.RegisterServiceNotificationFilterAsync(System.Fabric.Description.ServiceNotificationFilterDescription)
- uid: System.Fabric.FabricClient.ServiceManagementClient.ServiceNotificationEventArgs
  commentId: T:System.Fabric.FabricClient.ServiceManagementClient.ServiceNotificationEventArgs
  isExternal: false
  name: FabricClient.ServiceManagementClient.ServiceNotificationEventArgs
  nameWithType: FabricClient.ServiceManagementClient.ServiceNotificationEventArgs
  fullName: System.Fabric.FabricClient.ServiceManagementClient.ServiceNotificationEventArgs
- uid: System.EventHandler
  commentId: T:System.EventHandler
  parent: System
  isExternal: true
  name: EventHandler
  nameWithType: EventHandler
  fullName: System.EventHandler
- uid: System.Fabric.Description
  commentId: N:System.Fabric.Description
  isExternal: false
  name: System.Fabric.Description
  nameWithType: System.Fabric.Description
  fullName: System.Fabric.Description
- uid: System.Fabric.FabricClient
  commentId: T:System.Fabric.FabricClient
  parent: System.Fabric
  isExternal: false
  name: FabricClient
  nameWithType: FabricClient
  fullName: System.Fabric.FabricClient
- uid: System.Fabric.FabricClient.ServiceManagementClient.CreateServiceAsync*
  commentId: Overload:System.Fabric.FabricClient.ServiceManagementClient.CreateServiceAsync
  isExternal: false
  name: CreateServiceAsync
  nameWithType: FabricClient.ServiceManagementClient.CreateServiceAsync
  fullName: System.Fabric.FabricClient.ServiceManagementClient.CreateServiceAsync
- uid: System.Fabric.FabricObjectClosedException
  commentId: T:System.Fabric.FabricObjectClosedException
  isExternal: false
  name: FabricObjectClosedException
  nameWithType: FabricObjectClosedException
  fullName: System.Fabric.FabricObjectClosedException
- uid: System.Fabric.Description.ServiceDescription
  commentId: T:System.Fabric.Description.ServiceDescription
  parent: System.Fabric.Description
  isExternal: false
  name: ServiceDescription
  nameWithType: ServiceDescription
  fullName: System.Fabric.Description.ServiceDescription
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: System.TimeoutException
  commentId: T:System.TimeoutException
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.TimeSpan
  commentId: T:System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: false
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
- uid: System.Fabric.FabricErrorCode.ServiceTemplateNotFound
  commentId: F:System.Fabric.FabricErrorCode.ServiceTemplateNotFound
- uid: System.Fabric.FabricClient.ServiceManagementClient.CreateServiceFromTemplateAsync*
  commentId: Overload:System.Fabric.FabricClient.ServiceManagementClient.CreateServiceFromTemplateAsync
  isExternal: false
  name: CreateServiceFromTemplateAsync
  nameWithType: FabricClient.ServiceManagementClient.CreateServiceFromTemplateAsync
  fullName: System.Fabric.FabricClient.ServiceManagementClient.CreateServiceFromTemplateAsync
- uid: System.Fabric.FabricElementNotFoundException
  commentId: T:System.Fabric.FabricElementNotFoundException
  parent: System.Fabric
  isExternal: false
  name: FabricElementNotFoundException
  nameWithType: FabricElementNotFoundException
  fullName: System.Fabric.FabricElementNotFoundException
- uid: System.OperationCanceledException
  commentId: T:System.OperationCanceledException
- uid: System.Uri
  commentId: T:System.Uri
  parent: System
  isExternal: true
  name: Uri
  nameWithType: Uri
  fullName: System.Uri
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Byte[]
  name: Byte[]
  nameWithType: Byte[]
  fullName: System.Byte[]
  nameWithType.vb: Byte()
  fullname.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Fabric.Description.ServiceUpdateDescription
  commentId: T:System.Fabric.Description.ServiceUpdateDescription
  parent: System.Fabric.Description
  isExternal: false
  name: ServiceUpdateDescription
  nameWithType: ServiceUpdateDescription
  fullName: System.Fabric.Description.ServiceUpdateDescription
- uid: System.Fabric.FabricClient.ServiceManagementClient.UpdateServiceAsync*
  commentId: Overload:System.Fabric.FabricClient.ServiceManagementClient.UpdateServiceAsync
  isExternal: false
  name: UpdateServiceAsync
  nameWithType: FabricClient.ServiceManagementClient.UpdateServiceAsync
  fullName: System.Fabric.FabricClient.ServiceManagementClient.UpdateServiceAsync
- uid: System.Fabric.FabricClient.ServiceManagementClient.DeleteServiceAsync*
  commentId: Overload:System.Fabric.FabricClient.ServiceManagementClient.DeleteServiceAsync
  isExternal: false
  name: DeleteServiceAsync
  nameWithType: FabricClient.ServiceManagementClient.DeleteServiceAsync
  fullName: System.Fabric.FabricClient.ServiceManagementClient.DeleteServiceAsync
- uid: System.Fabric.Description.DeleteServiceDescription
  commentId: T:System.Fabric.Description.DeleteServiceDescription
  parent: System.Fabric.Description
  isExternal: false
  name: DeleteServiceDescription
  nameWithType: DeleteServiceDescription
  fullName: System.Fabric.Description.DeleteServiceDescription
- uid: System.Fabric.FabricClient.ServiceManagementClient.GetServiceDescriptionAsync(System.Uri)
  commentId: M:System.Fabric.FabricClient.ServiceManagementClient.GetServiceDescriptionAsync(System.Uri)
- uid: System.Fabric.FabricClient.ServiceManagementClient.GetServiceDescriptionAsync*
  commentId: Overload:System.Fabric.FabricClient.ServiceManagementClient.GetServiceDescriptionAsync
  isExternal: false
  name: GetServiceDescriptionAsync
  nameWithType: FabricClient.ServiceManagementClient.GetServiceDescriptionAsync
  fullName: System.Fabric.FabricClient.ServiceManagementClient.GetServiceDescriptionAsync
- uid: System.Threading.Tasks.Task{System.Fabric.Description.ServiceDescription}
  commentId: T:System.Threading.Tasks.Task{System.Fabric.Description.ServiceDescription}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<ServiceDescription>
  nameWithType: Task<ServiceDescription>
  fullName: System.Threading.Tasks.Task<System.Fabric.Description.ServiceDescription>
  nameWithType.vb: Task(Of ServiceDescription)
  fullname.vb: System.Threading.Tasks.Task(Of System.Fabric.Description.ServiceDescription)
  name.vb: Task(Of ServiceDescription)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Fabric.Description.ServiceDescription
    name: ServiceDescription
    nameWithType: ServiceDescription
    fullName: System.Fabric.Description.ServiceDescription
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Fabric.Description.ServiceDescription
    name: ServiceDescription
    nameWithType: ServiceDescription
    fullName: System.Fabric.Description.ServiceDescription
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullname.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.FabricClient.ServiceManagementClient.ResolveServicePartitionAsync(System.Uri)
  commentId: M:System.Fabric.FabricClient.ServiceManagementClient.ResolveServicePartitionAsync(System.Uri)
- uid: System.Fabric.ResolvedServicePartition
  commentId: T:System.Fabric.ResolvedServicePartition
  parent: System.Fabric
  isExternal: false
  name: ResolvedServicePartition
  nameWithType: ResolvedServicePartition
  fullName: System.Fabric.ResolvedServicePartition
- uid: System.Fabric.FabricClient.ServiceManagementClient.ResolveServicePartitionAsync*
  commentId: Overload:System.Fabric.FabricClient.ServiceManagementClient.ResolveServicePartitionAsync
  isExternal: false
  name: ResolveServicePartitionAsync
  nameWithType: FabricClient.ServiceManagementClient.ResolveServicePartitionAsync
  fullName: System.Fabric.FabricClient.ServiceManagementClient.ResolveServicePartitionAsync
- uid: System.Threading.Tasks.Task{System.Fabric.ResolvedServicePartition}
  commentId: T:System.Threading.Tasks.Task{System.Fabric.ResolvedServicePartition}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<ResolvedServicePartition>
  nameWithType: Task<ResolvedServicePartition>
  fullName: System.Threading.Tasks.Task<System.Fabric.ResolvedServicePartition>
  nameWithType.vb: Task(Of ResolvedServicePartition)
  fullname.vb: System.Threading.Tasks.Task(Of System.Fabric.ResolvedServicePartition)
  name.vb: Task(Of ResolvedServicePartition)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Fabric.ResolvedServicePartition
    name: ResolvedServicePartition
    nameWithType: ResolvedServicePartition
    fullName: System.Fabric.ResolvedServicePartition
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Fabric.ResolvedServicePartition
    name: ResolvedServicePartition
    nameWithType: ResolvedServicePartition
    fullName: System.Fabric.ResolvedServicePartition
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Int64
  commentId: T:System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.Fabric.FabricClient.ServiceManagementClient.RegisterServicePartitionResolutionChangeHandler*
  commentId: Overload:System.Fabric.FabricClient.ServiceManagementClient.RegisterServicePartitionResolutionChangeHandler
  isExternal: false
  name: RegisterServicePartitionResolutionChangeHandler
  nameWithType: FabricClient.ServiceManagementClient.RegisterServicePartitionResolutionChangeHandler
  fullName: System.Fabric.FabricClient.ServiceManagementClient.RegisterServicePartitionResolutionChangeHandler
- uid: System.Fabric.ServicePartitionResolutionChangeHandler
  commentId: T:System.Fabric.ServicePartitionResolutionChangeHandler
  parent: System.Fabric
  isExternal: false
  name: ServicePartitionResolutionChangeHandler
  nameWithType: ServicePartitionResolutionChangeHandler
  fullName: System.Fabric.ServicePartitionResolutionChangeHandler
- uid: System.Fabric.FabricClient.ServiceManagementClient.RegisterServicePartitionResolutionChangeHandler(System.Uri,System.Fabric.ServicePartitionResolutionChangeHandler)
  commentId: M:System.Fabric.FabricClient.ServiceManagementClient.RegisterServicePartitionResolutionChangeHandler(System.Uri,System.Fabric.ServicePartitionResolutionChangeHandler)
- uid: System.Fabric.FabricClient.ServiceManagementClient.UnregisterServicePartitionResolutionChangeHandler*
  commentId: Overload:System.Fabric.FabricClient.ServiceManagementClient.UnregisterServicePartitionResolutionChangeHandler
  isExternal: false
  name: UnregisterServicePartitionResolutionChangeHandler
  nameWithType: FabricClient.ServiceManagementClient.UnregisterServicePartitionResolutionChangeHandler
  fullName: System.Fabric.FabricClient.ServiceManagementClient.UnregisterServicePartitionResolutionChangeHandler
- uid: System.Fabric.FabricClient.ServiceManagementClient.GetServiceManifestAsync*
  commentId: Overload:System.Fabric.FabricClient.ServiceManagementClient.GetServiceManifestAsync
  isExternal: false
  name: GetServiceManifestAsync
  nameWithType: FabricClient.ServiceManagementClient.GetServiceManifestAsync
  fullName: System.Fabric.FabricClient.ServiceManagementClient.GetServiceManifestAsync
- uid: System.Threading.Tasks.Task{System.String}
  commentId: T:System.Threading.Tasks.Task{System.String}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<String>
  nameWithType: Task<String>
  fullName: System.Threading.Tasks.Task<System.String>
  nameWithType.vb: Task(Of String)
  fullname.vb: System.Threading.Tasks.Task(Of System.String)
  name.vb: Task(Of String)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.FabricErrorCode.ReplicaDoesNotExist
  commentId: F:System.Fabric.FabricErrorCode.ReplicaDoesNotExist
- uid: System.Fabric.FabricErrorCode.InvalidReplicaStateForReplicaOperation
  commentId: F:System.Fabric.FabricErrorCode.InvalidReplicaStateForReplicaOperation
- uid: System.Fabric.FabricClient.ServiceManagementClient.RemoveReplicaAsync*
  commentId: Overload:System.Fabric.FabricClient.ServiceManagementClient.RemoveReplicaAsync
  isExternal: false
  name: RemoveReplicaAsync
  nameWithType: FabricClient.ServiceManagementClient.RemoveReplicaAsync
  fullName: System.Fabric.FabricClient.ServiceManagementClient.RemoveReplicaAsync
- uid: System.Fabric.FabricException
  commentId: T:System.Fabric.FabricException
  parent: System.Fabric
  isExternal: false
  name: FabricException
  nameWithType: FabricException
  fullName: System.Fabric.FabricException
- uid: System.Guid
  commentId: T:System.Guid
  parent: System
  isExternal: true
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Fabric.FabricErrorCode.InvalidReplicaOperation
  commentId: F:System.Fabric.FabricErrorCode.InvalidReplicaOperation
- uid: System.Fabric.FabricClient.ServiceManagementClient.RestartReplicaAsync*
  commentId: Overload:System.Fabric.FabricClient.ServiceManagementClient.RestartReplicaAsync
  isExternal: false
  name: RestartReplicaAsync
  nameWithType: FabricClient.ServiceManagementClient.RestartReplicaAsync
  fullName: System.Fabric.FabricClient.ServiceManagementClient.RestartReplicaAsync
- uid: System.Fabric.FabricClient.ServiceManagementClient.ServiceNotificationFilterMatched
  commentId: E:System.Fabric.FabricClient.ServiceManagementClient.ServiceNotificationFilterMatched
- uid: System.Fabric.FabricClient.ServiceManagementClient.UnregisterServiceNotificationFilterAsync(System.Int64)
  commentId: M:System.Fabric.FabricClient.ServiceManagementClient.UnregisterServiceNotificationFilterAsync(System.Int64)
- uid: System.Fabric.FabricClient.ServiceManagementClient.RegisterServiceNotificationFilterAsync*
  commentId: Overload:System.Fabric.FabricClient.ServiceManagementClient.RegisterServiceNotificationFilterAsync
  isExternal: false
  name: RegisterServiceNotificationFilterAsync
  nameWithType: FabricClient.ServiceManagementClient.RegisterServiceNotificationFilterAsync
  fullName: System.Fabric.FabricClient.ServiceManagementClient.RegisterServiceNotificationFilterAsync
- uid: System.Threading.Tasks.Task{System.Int64}
  commentId: T:System.Threading.Tasks.Task{System.Int64}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Int64>
  nameWithType: Task<Int64>
  fullName: System.Threading.Tasks.Task<System.Int64>
  nameWithType.vb: Task(Of Int64)
  fullname.vb: System.Threading.Tasks.Task(Of System.Int64)
  name.vb: Task(Of Int64)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.FabricClient.ServiceManagementClient.UnregisterServiceNotificationFilterAsync*
  commentId: Overload:System.Fabric.FabricClient.ServiceManagementClient.UnregisterServiceNotificationFilterAsync
  isExternal: false
  name: UnregisterServiceNotificationFilterAsync
  nameWithType: FabricClient.ServiceManagementClient.UnregisterServiceNotificationFilterAsync
  fullName: System.Fabric.FabricClient.ServiceManagementClient.UnregisterServiceNotificationFilterAsync
