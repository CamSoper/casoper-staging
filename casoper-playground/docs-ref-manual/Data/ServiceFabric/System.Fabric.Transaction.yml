### YamlMime:ManagedReference
items:
- uid: System.Fabric.Transaction
  commentId: T:System.Fabric.Transaction
  id: Transaction
  parent: System.Fabric
  children:
  - System.Fabric.Transaction.CommitAsync
  - System.Fabric.Transaction.CommitAsync(System.TimeSpan,System.Threading.CancellationToken)
  - System.Fabric.Transaction.OnDispose
  - System.Fabric.Transaction.Rollback
  - System.Fabric.Transaction.ThrowIfDisposed
  langs:
  - csharp
  - vb
  name: Transaction
  nameWithType: Transaction
  fullName: System.Fabric.Transaction
  type: Class
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/Transaction.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: Transaction
    path: src/prod/src/managed/Api/src/System/Fabric/Transaction.cs
    startLine: 15
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Represents a transaction. <xref href=\"System.Fabric.KeyValueStoreReplica\" data-throw-if-not-resolved=\"false\"></xref></p>\n"
  example: []
  syntax:
    content: 'public class Transaction : TransactionBase, IDisposable'
    content.vb: >-
      Public Class Transaction
          Inherits TransactionBase
          Implements IDisposable
  inheritance:
  - System.Object
  - System.Fabric.TransactionBase
  implements:
  - System.IDisposable
  inheritedMembers:
  - System.Fabric.TransactionBase.Id
  - System.Fabric.TransactionBase.IsolationLevel
  - System.Fabric.TransactionBase.Dispose
  - System.Fabric.TransactionBase.IsDisposed
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  extensionMethods:
  - System.Fabric.Transaction.System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: System.Fabric.Transaction.Rollback
  commentId: M:System.Fabric.Transaction.Rollback
  id: Rollback
  parent: System.Fabric.Transaction
  langs:
  - csharp
  - vb
  name: Rollback()
  nameWithType: Transaction.Rollback()
  fullName: System.Fabric.Transaction.Rollback()
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/Transaction.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: Rollback
    path: src/prod/src/managed/Api/src/System/Fabric/Transaction.cs
    startLine: 28
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Rolls back the set of operations that are associated with this transaction.</p>\n"
  example: []
  syntax:
    content: public void Rollback()
    content.vb: Public Sub Rollback
  overload: System.Fabric.Transaction.Rollback*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.Transaction.CommitAsync
  commentId: M:System.Fabric.Transaction.CommitAsync
  id: CommitAsync
  parent: System.Fabric.Transaction
  langs:
  - csharp
  - vb
  name: CommitAsync()
  nameWithType: Transaction.CommitAsync()
  fullName: System.Fabric.Transaction.CommitAsync()
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/Transaction.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: CommitAsync
    path: src/prod/src/managed/Api/src/System/Fabric/Transaction.cs
    startLine: 52
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Commits the set of operations associated with the transaction. Replication and local disk writes are performed asynchronously</p>\n"
  example: []
  syntax:
    content: public Task<long> CommitAsync()
    content.vb: Public Function CommitAsync As Task(Of Long)
    return:
      type: System.Threading.Tasks.Task{System.Int64}
      description: "\n<p>\nA Task whose result is the Logical Sequence Number of the transaction. \nThe sequence number is associated with all keys written in this transaction \nand can be passed into APIs accepting a check sequence number parameter to implement optimistic concurrency:\n<ul><li><xref href=\"System.Fabric.KeyValueStoreReplica.Update(System.Fabric.TransactionBase%2cSystem.String%2cSystem.Byte%5b%5d%2cSystem.Int64)\" data-throw-if-not-resolved=\"false\"></xref></li><li><xref href=\"System.Fabric.KeyValueStoreReplica.Remove(System.Fabric.TransactionBase%2cSystem.String%2cSystem.Int64)\" data-throw-if-not-resolved=\"false\"></xref></li><li><xref href=\"System.Fabric.KeyValueStoreReplica.TryUpdate(System.Fabric.TransactionBase%2cSystem.String%2cSystem.Byte%5b%5d%2cSystem.Int64)\" data-throw-if-not-resolved=\"false\"></xref></li><li><xref href=\"System.Fabric.KeyValueStoreReplica.TryRemove(System.Fabric.TransactionBase%2cSystem.String%2cSystem.Int64)\" data-throw-if-not-resolved=\"false\"></xref></li></ul>\n</p>\n"
  overload: System.Fabric.Transaction.CommitAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.Transaction.CommitAsync(System.TimeSpan,System.Threading.CancellationToken)
  commentId: M:System.Fabric.Transaction.CommitAsync(System.TimeSpan,System.Threading.CancellationToken)
  id: CommitAsync(System.TimeSpan,System.Threading.CancellationToken)
  parent: System.Fabric.Transaction
  langs:
  - csharp
  - vb
  name: CommitAsync(TimeSpan, CancellationToken)
  nameWithType: Transaction.CommitAsync(TimeSpan, CancellationToken)
  fullName: System.Fabric.Transaction.CommitAsync(System.TimeSpan, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/Transaction.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: CommitAsync
    path: src/prod/src/managed/Api/src/System/Fabric/Transaction.cs
    startLine: 81
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Commits the set of operations that are associated with the transaction with an optional timeout. Replication and local disk \nwrites are performed asynchronously. Note that the underlying replication operation may not have been cancelled even in the event of a timeout.</p>\n"
  example: []
  syntax:
    content: public Task<long> CommitAsync(TimeSpan timeout, CancellationToken cancellationToken)
    content.vb: Public Function CommitAsync(timeout As TimeSpan, cancellationToken As CancellationToken) As Task(Of Long)
    parameters:
    - id: timeout
      type: System.TimeSpan
      description: "\n<p>The amount of time to wait for replication and local disk writes to complete before <xref href=\"System.TimeoutException\" data-throw-if-not-resolved=\"false\"></xref> is thrown.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>Currently not used. Reserved for future use.</p>\n"
    return:
      type: System.Threading.Tasks.Task{System.Int64}
      description: "\n<p>\nA Task whose result is the Logical Sequence Number of the transaction. \nThe sequence number is associated with all keys written in this transaction \nand can be passed into APIs accepting a check sequence number parameter to implement optimistic concurrency:\n\n<ul><li><xref href=\"System.Fabric.KeyValueStoreReplica.Update(System.Fabric.TransactionBase%2cSystem.String%2cSystem.Byte%5b%5d%2cSystem.Int64)\" data-throw-if-not-resolved=\"false\"></xref></li><li><xref href=\"System.Fabric.KeyValueStoreReplica.Remove(System.Fabric.TransactionBase%2cSystem.String%2cSystem.Int64)\" data-throw-if-not-resolved=\"false\"></xref></li><li><xref href=\"System.Fabric.KeyValueStoreReplica.TryUpdate(System.Fabric.TransactionBase%2cSystem.String%2cSystem.Byte%5b%5d%2cSystem.Int64)\" data-throw-if-not-resolved=\"false\"></xref></li><li><xref href=\"System.Fabric.KeyValueStoreReplica.TryRemove(System.Fabric.TransactionBase%2cSystem.String%2cSystem.Int64)\" data-throw-if-not-resolved=\"false\"></xref></li></ul>\n</p>\n"
  overload: System.Fabric.Transaction.CommitAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.Transaction.OnDispose
  commentId: M:System.Fabric.Transaction.OnDispose
  id: OnDispose
  parent: System.Fabric.Transaction
  langs:
  - csharp
  - vb
  name: OnDispose()
  nameWithType: Transaction.OnDispose()
  fullName: System.Fabric.Transaction.OnDispose()
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/Transaction.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: OnDispose
    path: src/prod/src/managed/Api/src/System/Fabric/Transaction.cs
    startLine: 99
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>The dispose event occurs when the transaction is disposed of through the <strong>Dispose</strong> method. </p>\n"
  remarks: "\n<p>To override <xref href=\"System.Fabric.Transaction.OnDispose\" data-throw-if-not-resolved=\"false\"></xref>, be sure to call <strong>OnDispose</strong> on the base class.</p>\n"
  example: []
  syntax:
    content: protected override void OnDispose()
    content.vb: Protected Overrides Sub OnDispose
  overridden: System.Fabric.TransactionBase.OnDispose
  overload: System.Fabric.Transaction.OnDispose*
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
- uid: System.Fabric.Transaction.ThrowIfDisposed
  commentId: M:System.Fabric.Transaction.ThrowIfDisposed
  id: ThrowIfDisposed
  parent: System.Fabric.Transaction
  langs:
  - csharp
  - vb
  name: ThrowIfDisposed()
  nameWithType: Transaction.ThrowIfDisposed()
  fullName: System.Fabric.Transaction.ThrowIfDisposed()
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/Transaction.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: ThrowIfDisposed
    path: src/prod/src/managed/Api/src/System/Fabric/Transaction.cs
    startLine: 113
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Throws an exception if the <xref href=\"System.Fabric.Transaction\" data-throw-if-not-resolved=\"false\"></xref> object is disposed.</p>\n"
  example: []
  syntax:
    content: protected void ThrowIfDisposed()
    content.vb: Protected Sub ThrowIfDisposed
  overload: System.Fabric.Transaction.ThrowIfDisposed*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
references:
- uid: System.Fabric.KeyValueStoreReplica
  commentId: T:System.Fabric.KeyValueStoreReplica
  isExternal: false
  name: KeyValueStoreReplica
  nameWithType: KeyValueStoreReplica
  fullName: System.Fabric.KeyValueStoreReplica
- uid: System.Fabric
  commentId: N:System.Fabric
  isExternal: false
  name: System.Fabric
  nameWithType: System.Fabric
  fullName: System.Fabric
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Fabric.TransactionBase
  commentId: T:System.Fabric.TransactionBase
  parent: System.Fabric
  isExternal: false
  name: TransactionBase
  nameWithType: TransactionBase
  fullName: System.Fabric.TransactionBase
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: System.Fabric.TransactionBase.Id
  commentId: P:System.Fabric.TransactionBase.Id
  parent: System.Fabric.TransactionBase
  isExternal: false
  name: Id
  nameWithType: TransactionBase.Id
  fullName: System.Fabric.TransactionBase.Id
- uid: System.Fabric.TransactionBase.IsolationLevel
  commentId: P:System.Fabric.TransactionBase.IsolationLevel
  parent: System.Fabric.TransactionBase
  isExternal: false
  name: IsolationLevel
  nameWithType: TransactionBase.IsolationLevel
  fullName: System.Fabric.TransactionBase.IsolationLevel
- uid: System.Fabric.TransactionBase.Dispose
  commentId: M:System.Fabric.TransactionBase.Dispose
  parent: System.Fabric.TransactionBase
  isExternal: false
  name: Dispose()
  nameWithType: TransactionBase.Dispose()
  fullName: System.Fabric.TransactionBase.Dispose()
  spec.csharp:
  - uid: System.Fabric.TransactionBase.Dispose
    name: Dispose
    nameWithType: TransactionBase.Dispose
    fullName: System.Fabric.TransactionBase.Dispose
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Fabric.TransactionBase.Dispose
    name: Dispose
    nameWithType: TransactionBase.Dispose
    fullName: System.Fabric.TransactionBase.Dispose
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.TransactionBase.IsDisposed
  commentId: M:System.Fabric.TransactionBase.IsDisposed
  parent: System.Fabric.TransactionBase
  isExternal: false
  name: IsDisposed()
  nameWithType: TransactionBase.IsDisposed()
  fullName: System.Fabric.TransactionBase.IsDisposed()
  spec.csharp:
  - uid: System.Fabric.TransactionBase.IsDisposed
    name: IsDisposed
    nameWithType: TransactionBase.IsDisposed
    fullName: System.Fabric.TransactionBase.IsDisposed
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Fabric.TransactionBase.IsDisposed
    name: IsDisposed
    nameWithType: TransactionBase.IsDisposed
    fullName: System.Fabric.TransactionBase.IsDisposed
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.Transaction.System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
  commentId: M:System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  parent: System.Fabric.Messaging.Stream.ByteArraySerializer
  definition: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  name: Serialize<Transaction>()
  nameWithType: ByteArraySerializer.Serialize<Transaction>()
  fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<System.Fabric.Transaction>()
  nameWithType.vb: ByteArraySerializer.Serialize(Of Transaction)()
  fullname.vb: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of System.Fabric.Transaction)()
  name.vb: Serialize(Of Transaction)()
  spec.csharp:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
    name: Serialize<Transaction>
    nameWithType: ByteArraySerializer.Serialize<Transaction>
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<System.Fabric.Transaction>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
    name: Serialize(Of Transaction)
    nameWithType: ByteArraySerializer.Serialize(Of Transaction)
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of System.Fabric.Transaction)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  commentId: M:System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  isExternal: false
  name: Serialize<T>(T)
  nameWithType: ByteArraySerializer.Serialize<T>(T)
  fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<T>(T)
  nameWithType.vb: ByteArraySerializer.Serialize(Of T)(T)
  fullname.vb: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of T)(T)
  name.vb: Serialize(Of T)(T)
  spec.csharp:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
    name: Serialize<T>
    nameWithType: ByteArraySerializer.Serialize<T>
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
    name: Serialize(Of T)
    nameWithType: ByteArraySerializer.Serialize(Of T)
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.Messaging.Stream.ByteArraySerializer
  commentId: T:System.Fabric.Messaging.Stream.ByteArraySerializer
  parent: System.Fabric.Messaging.Stream
  isExternal: false
  name: ByteArraySerializer
  nameWithType: ByteArraySerializer
  fullName: System.Fabric.Messaging.Stream.ByteArraySerializer
- uid: System.Fabric.Messaging.Stream
  commentId: N:System.Fabric.Messaging.Stream
  isExternal: false
  name: System.Fabric.Messaging.Stream
  nameWithType: System.Fabric.Messaging.Stream
  fullName: System.Fabric.Messaging.Stream
- uid: System.Fabric.Transaction.Rollback*
  commentId: Overload:System.Fabric.Transaction.Rollback
  isExternal: false
  name: Rollback
  nameWithType: Transaction.Rollback
  fullName: System.Fabric.Transaction.Rollback
- uid: System.Fabric.KeyValueStoreReplica.Update(System.Fabric.TransactionBase,System.String,System.Byte[],System.Int64)
  commentId: M:System.Fabric.KeyValueStoreReplica.Update(System.Fabric.TransactionBase,System.String,System.Byte[],System.Int64)
- uid: System.Fabric.KeyValueStoreReplica.Remove(System.Fabric.TransactionBase,System.String,System.Int64)
  commentId: M:System.Fabric.KeyValueStoreReplica.Remove(System.Fabric.TransactionBase,System.String,System.Int64)
- uid: System.Fabric.KeyValueStoreReplica.TryUpdate(System.Fabric.TransactionBase,System.String,System.Byte[],System.Int64)
  commentId: M:System.Fabric.KeyValueStoreReplica.TryUpdate(System.Fabric.TransactionBase,System.String,System.Byte[],System.Int64)
- uid: System.Fabric.KeyValueStoreReplica.TryRemove(System.Fabric.TransactionBase,System.String,System.Int64)
  commentId: M:System.Fabric.KeyValueStoreReplica.TryRemove(System.Fabric.TransactionBase,System.String,System.Int64)
- uid: System.Fabric.Transaction.CommitAsync*
  commentId: Overload:System.Fabric.Transaction.CommitAsync
  isExternal: false
  name: CommitAsync
  nameWithType: Transaction.CommitAsync
  fullName: System.Fabric.Transaction.CommitAsync
- uid: System.Threading.Tasks.Task{System.Int64}
  commentId: T:System.Threading.Tasks.Task{System.Int64}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Int64>
  nameWithType: Task<Int64>
  fullName: System.Threading.Tasks.Task<System.Int64>
  nameWithType.vb: Task(Of Int64)
  fullname.vb: System.Threading.Tasks.Task(Of System.Int64)
  name.vb: Task(Of Int64)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullname.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: System.TimeoutException
  commentId: T:System.TimeoutException
- uid: System.TimeSpan
  commentId: T:System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: false
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
- uid: System.Fabric.Transaction.OnDispose
  commentId: M:System.Fabric.Transaction.OnDispose
- uid: System.Fabric.TransactionBase.OnDispose
  commentId: M:System.Fabric.TransactionBase.OnDispose
  parent: System.Fabric.TransactionBase
  isExternal: false
  name: OnDispose()
  nameWithType: TransactionBase.OnDispose()
  fullName: System.Fabric.TransactionBase.OnDispose()
  spec.csharp:
  - uid: System.Fabric.TransactionBase.OnDispose
    name: OnDispose
    nameWithType: TransactionBase.OnDispose
    fullName: System.Fabric.TransactionBase.OnDispose
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Fabric.TransactionBase.OnDispose
    name: OnDispose
    nameWithType: TransactionBase.OnDispose
    fullName: System.Fabric.TransactionBase.OnDispose
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.Transaction.OnDispose*
  commentId: Overload:System.Fabric.Transaction.OnDispose
  isExternal: false
  name: OnDispose
  nameWithType: Transaction.OnDispose
  fullName: System.Fabric.Transaction.OnDispose
- uid: System.Fabric.Transaction
  commentId: T:System.Fabric.Transaction
  parent: System.Fabric
  isExternal: false
  name: Transaction
  nameWithType: Transaction
  fullName: System.Fabric.Transaction
- uid: System.Fabric.Transaction.ThrowIfDisposed*
  commentId: Overload:System.Fabric.Transaction.ThrowIfDisposed
  isExternal: false
  name: ThrowIfDisposed
  nameWithType: Transaction.ThrowIfDisposed
  fullName: System.Fabric.Transaction.ThrowIfDisposed
