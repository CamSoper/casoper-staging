### YamlMime:ManagedReference
items:
- uid: Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver
  commentId: T:Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver
  id: ServicePartitionResolver
  parent: Microsoft.ServiceFabric.Services.Client
  children:
  - Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver.#ctor(Microsoft.ServiceFabric.Services.Client.CreateFabricClientDelegate)
  - Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver.#ctor(Microsoft.ServiceFabric.Services.Client.CreateFabricClientDelegate,Microsoft.ServiceFabric.Services.Client.CreateFabricClientDelegate)
  - Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver.#ctor(System.Fabric.FabricClientSettings,System.String[])
  - Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver.#ctor(System.Fabric.SecurityCredentials,System.Fabric.FabricClientSettings,System.String[])
  - Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver.#ctor(System.Fabric.SecurityCredentials,System.String[])
  - Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver.#ctor(System.String[])
  - Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver.DefaultMaxRetryBackoffInterval
  - Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver.DefaultResolveTimeout
  - Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver.GetDefault
  - Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver.ResolveAsync(System.Fabric.ResolvedServicePartition,System.Threading.CancellationToken)
  - Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver.ResolveAsync(System.Fabric.ResolvedServicePartition,System.TimeSpan,System.TimeSpan,System.Threading.CancellationToken)
  - Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver.ResolveAsync(System.Uri,Microsoft.ServiceFabric.Services.Client.ServicePartitionKey,System.Threading.CancellationToken)
  - Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver.ResolveAsync(System.Uri,Microsoft.ServiceFabric.Services.Client.ServicePartitionKey,System.TimeSpan,System.TimeSpan,System.Threading.CancellationToken)
  - Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver.SetDefault(Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver)
  langs:
  - csharp
  - vb
  name: ServicePartitionResolver
  nameWithType: ServicePartitionResolver
  fullName: Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver
  type: Class
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Services/Client/ServicePartitionResolver.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: ServicePartitionResolver
    path: src/prod/src/managed/Microsoft.ServiceFabric.Services/Client/ServicePartitionResolver.cs
    startLine: 22
  assemblies:
  - Microsoft.ServiceFabric.Services
  namespace: Microsoft.ServiceFabric.Services.Client
  summary: "\nImplements the class that helps in determining the endpoint of a service. This class wraps the FabricClient's\n<xref href=\"System.Fabric.FabricClient.ServiceManagementClient.ResolveServicePartitionAsync(System.Uri)\" data-throw-if-not-resolved=\"false\"></xref>method, and implements a back-off/retry mechanism on errors from that method.\n"
  example: []
  syntax:
    content: 'public class ServicePartitionResolver : IServicePartitionResolver'
    content.vb: >-
      Public Class ServicePartitionResolver
          Implements IServicePartitionResolver
  inheritance:
  - System.Object
  implements:
  - Microsoft.ServiceFabric.Services.Client.IServicePartitionResolver
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  extensionMethods:
  - Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver.System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver.DefaultResolveTimeout
  commentId: F:Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver.DefaultResolveTimeout
  id: DefaultResolveTimeout
  parent: Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver
  langs:
  - csharp
  - vb
  name: DefaultResolveTimeout
  nameWithType: ServicePartitionResolver.DefaultResolveTimeout
  fullName: Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver.DefaultResolveTimeout
  type: Field
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Services/Client/ServicePartitionResolver.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: DefaultResolveTimeout
    path: src/prod/src/managed/Microsoft.ServiceFabric.Services/Client/ServicePartitionResolver.cs
    startLine: 37
  assemblies:
  - Microsoft.ServiceFabric.Services
  namespace: Microsoft.ServiceFabric.Services.Client
  summary: "\nThis is the default resolve timeout per try used by the ResolveAsync method of <xref href=\"Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver\" data-throw-if-not-resolved=\"false\"></xref> when it is\ninvoked without explicitly specifying the resolveTimeoutPerTry argument. \n"
  example: []
  syntax:
    content: public static readonly TimeSpan DefaultResolveTimeout
    content.vb: Public Shared ReadOnly DefaultResolveTimeout As TimeSpan
    return:
      type: System.TimeSpan
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver.DefaultMaxRetryBackoffInterval
  commentId: F:Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver.DefaultMaxRetryBackoffInterval
  id: DefaultMaxRetryBackoffInterval
  parent: Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver
  langs:
  - csharp
  - vb
  name: DefaultMaxRetryBackoffInterval
  nameWithType: ServicePartitionResolver.DefaultMaxRetryBackoffInterval
  fullName: Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver.DefaultMaxRetryBackoffInterval
  type: Field
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Services/Client/ServicePartitionResolver.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: DefaultMaxRetryBackoffInterval
    path: src/prod/src/managed/Microsoft.ServiceFabric.Services/Client/ServicePartitionResolver.cs
    startLine: 43
  assemblies:
  - Microsoft.ServiceFabric.Services
  namespace: Microsoft.ServiceFabric.Services.Client
  summary: "\nThis is the default max retry backoff interval used by ServicePartitionResolver's ResolveAsync method when it is\ninvoked without explicitly specifying the maxRetryBackoffInterval argument.\n"
  example: []
  syntax:
    content: public static readonly TimeSpan DefaultMaxRetryBackoffInterval
    content.vb: Public Shared ReadOnly DefaultMaxRetryBackoffInterval As TimeSpan
    return:
      type: System.TimeSpan
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver.#ctor(Microsoft.ServiceFabric.Services.Client.CreateFabricClientDelegate,Microsoft.ServiceFabric.Services.Client.CreateFabricClientDelegate)
  commentId: M:Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver.#ctor(Microsoft.ServiceFabric.Services.Client.CreateFabricClientDelegate,Microsoft.ServiceFabric.Services.Client.CreateFabricClientDelegate)
  id: '#ctor(Microsoft.ServiceFabric.Services.Client.CreateFabricClientDelegate,Microsoft.ServiceFabric.Services.Client.CreateFabricClientDelegate)'
  parent: Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver
  langs:
  - csharp
  - vb
  name: ServicePartitionResolver(CreateFabricClientDelegate, CreateFabricClientDelegate)
  nameWithType: ServicePartitionResolver.ServicePartitionResolver(CreateFabricClientDelegate, CreateFabricClientDelegate)
  fullName: Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver.ServicePartitionResolver(Microsoft.ServiceFabric.Services.Client.CreateFabricClientDelegate, Microsoft.ServiceFabric.Services.Client.CreateFabricClientDelegate)
  type: Constructor
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Services/Client/ServicePartitionResolver.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: .ctor
    path: src/prod/src/managed/Microsoft.ServiceFabric.Services/Client/ServicePartitionResolver.cs
    startLine: 53
  assemblies:
  - Microsoft.ServiceFabric.Services
  namespace: Microsoft.ServiceFabric.Services.Client
  summary: "\nInstantiates a ServicePartionResolver, invoking the first delegate to instantiate FabricClient.\nDuring partition resolution if FabricClient object gets disposed and second delegate is provided,\nit uses the second delegate to re-create the FabricClient. The second delegate provides a way to specify\nan alternate way to create FabricClient if FabricClient created with first delegates get disposed.\n"
  example: []
  syntax:
    content: public ServicePartitionResolver(CreateFabricClientDelegate createFabricClient, CreateFabricClientDelegate recreateFabricClient)
    content.vb: Public Sub New(createFabricClient As CreateFabricClientDelegate, recreateFabricClient As CreateFabricClientDelegate)
    parameters:
    - id: createFabricClient
      type: Microsoft.ServiceFabric.Services.Client.CreateFabricClientDelegate
      description: Delegate to create fabric client
    - id: recreateFabricClient
      type: Microsoft.ServiceFabric.Services.Client.CreateFabricClientDelegate
      description: Delegate to create fabric client
  overload: Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver.#ctor(Microsoft.ServiceFabric.Services.Client.CreateFabricClientDelegate)
  commentId: M:Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver.#ctor(Microsoft.ServiceFabric.Services.Client.CreateFabricClientDelegate)
  id: '#ctor(Microsoft.ServiceFabric.Services.Client.CreateFabricClientDelegate)'
  parent: Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver
  langs:
  - csharp
  - vb
  name: ServicePartitionResolver(CreateFabricClientDelegate)
  nameWithType: ServicePartitionResolver.ServicePartitionResolver(CreateFabricClientDelegate)
  fullName: Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver.ServicePartitionResolver(Microsoft.ServiceFabric.Services.Client.CreateFabricClientDelegate)
  type: Constructor
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Services/Client/ServicePartitionResolver.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: .ctor
    path: src/prod/src/managed/Microsoft.ServiceFabric.Services/Client/ServicePartitionResolver.cs
    startLine: 65
  assemblies:
  - Microsoft.ServiceFabric.Services
  namespace: Microsoft.ServiceFabric.Services.Client
  summary: "\nInstantiates a ServicePartitionResolver, invoking the given delegate to instantiate FabricClient.\n"
  example: []
  syntax:
    content: public ServicePartitionResolver(CreateFabricClientDelegate createFabricClient)
    content.vb: Public Sub New(createFabricClient As CreateFabricClientDelegate)
    parameters:
    - id: createFabricClient
      type: Microsoft.ServiceFabric.Services.Client.CreateFabricClientDelegate
      description: Delegate to create fabric client
  overload: Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver.#ctor(System.String[])
  commentId: M:Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver.#ctor(System.String[])
  id: '#ctor(System.String[])'
  parent: Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver
  langs:
  - csharp
  - vb
  name: ServicePartitionResolver(String[])
  nameWithType: ServicePartitionResolver.ServicePartitionResolver(String[])
  fullName: Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver.ServicePartitionResolver(System.String[])
  type: Constructor
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Services/Client/ServicePartitionResolver.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: .ctor
    path: src/prod/src/managed/Microsoft.ServiceFabric.Services/Client/ServicePartitionResolver.cs
    startLine: 75
  assemblies:
  - Microsoft.ServiceFabric.Services
  namespace: Microsoft.ServiceFabric.Services.Client
  summary: "\nInstantiates a ServicePartitionResolver, uses the given connectionEndpoints to create a new instance of FabricClient.\n"
  example: []
  syntax:
    content: public ServicePartitionResolver(params string[] connectionEndpoints)
    content.vb: Public Sub New(ParamArray connectionEndpoints As String())
    parameters:
    - id: connectionEndpoints
      type: System.String[]
      description: Array of management endpoints of the cluster
  overload: Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver.#ctor*
  nameWithType.vb: ServicePartitionResolver.ServicePartitionResolver(String())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver.ServicePartitionResolver(System.String())
  name.vb: ServicePartitionResolver(String())
- uid: Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver.#ctor(System.Fabric.FabricClientSettings,System.String[])
  commentId: M:Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver.#ctor(System.Fabric.FabricClientSettings,System.String[])
  id: '#ctor(System.Fabric.FabricClientSettings,System.String[])'
  parent: Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver
  langs:
  - csharp
  - vb
  name: ServicePartitionResolver(FabricClientSettings, String[])
  nameWithType: ServicePartitionResolver.ServicePartitionResolver(FabricClientSettings, String[])
  fullName: Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver.ServicePartitionResolver(System.Fabric.FabricClientSettings, System.String[])
  type: Constructor
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Services/Client/ServicePartitionResolver.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: .ctor
    path: src/prod/src/managed/Microsoft.ServiceFabric.Services/Client/ServicePartitionResolver.cs
    startLine: 86
  assemblies:
  - Microsoft.ServiceFabric.Services
  namespace: Microsoft.ServiceFabric.Services.Client
  summary: "\nInstantiates a ServicePartitionResolver, uses the given FabricClient Settings and the connectionEndpoints to create\na new instance of FabricClient.\n"
  example: []
  syntax:
    content: public ServicePartitionResolver(FabricClientSettings settings, params string[] connectionEndpoints)
    content.vb: Public Sub New(settings As FabricClientSettings, ParamArray connectionEndpoints As String())
    parameters:
    - id: settings
      type: System.Fabric.FabricClientSettings
      description: Fabric client Settings
    - id: connectionEndpoints
      type: System.String[]
      description: Array of management endpoints of the cluster
  overload: Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver.#ctor*
  nameWithType.vb: ServicePartitionResolver.ServicePartitionResolver(FabricClientSettings, String())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver.ServicePartitionResolver(System.Fabric.FabricClientSettings, System.String())
  name.vb: ServicePartitionResolver(FabricClientSettings, String())
- uid: Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver.#ctor(System.Fabric.SecurityCredentials,System.String[])
  commentId: M:Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver.#ctor(System.Fabric.SecurityCredentials,System.String[])
  id: '#ctor(System.Fabric.SecurityCredentials,System.String[])'
  parent: Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver
  langs:
  - csharp
  - vb
  name: ServicePartitionResolver(SecurityCredentials, String[])
  nameWithType: ServicePartitionResolver.ServicePartitionResolver(SecurityCredentials, String[])
  fullName: Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver.ServicePartitionResolver(System.Fabric.SecurityCredentials, System.String[])
  type: Constructor
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Services/Client/ServicePartitionResolver.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: .ctor
    path: src/prod/src/managed/Microsoft.ServiceFabric.Services/Client/ServicePartitionResolver.cs
    startLine: 99
  assemblies:
  - Microsoft.ServiceFabric.Services
  namespace: Microsoft.ServiceFabric.Services.Client
  summary: "\nInstantiates a ServicePartitionResolver, uses the given security credentials and the connectionEndpoints to create\na new instance of FabricClient.\n"
  example: []
  syntax:
    content: public ServicePartitionResolver(SecurityCredentials credential, params string[] connectionEndpoints)
    content.vb: Public Sub New(credential As SecurityCredentials, ParamArray connectionEndpoints As String())
    parameters:
    - id: credential
      type: System.Fabric.SecurityCredentials
      description: Security credentials for the fabric client
    - id: connectionEndpoints
      type: System.String[]
      description: Array of management endpoints of the cluster
  overload: Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver.#ctor*
  nameWithType.vb: ServicePartitionResolver.ServicePartitionResolver(SecurityCredentials, String())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver.ServicePartitionResolver(System.Fabric.SecurityCredentials, System.String())
  name.vb: ServicePartitionResolver(SecurityCredentials, String())
- uid: Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver.#ctor(System.Fabric.SecurityCredentials,System.Fabric.FabricClientSettings,System.String[])
  commentId: M:Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver.#ctor(System.Fabric.SecurityCredentials,System.Fabric.FabricClientSettings,System.String[])
  id: '#ctor(System.Fabric.SecurityCredentials,System.Fabric.FabricClientSettings,System.String[])'
  parent: Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver
  langs:
  - csharp
  - vb
  name: ServicePartitionResolver(SecurityCredentials, FabricClientSettings, String[])
  nameWithType: ServicePartitionResolver.ServicePartitionResolver(SecurityCredentials, FabricClientSettings, String[])
  fullName: Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver.ServicePartitionResolver(System.Fabric.SecurityCredentials, System.Fabric.FabricClientSettings, System.String[])
  type: Constructor
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Services/Client/ServicePartitionResolver.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: .ctor
    path: src/prod/src/managed/Microsoft.ServiceFabric.Services/Client/ServicePartitionResolver.cs
    startLine: 113
  assemblies:
  - Microsoft.ServiceFabric.Services
  namespace: Microsoft.ServiceFabric.Services.Client
  summary: "\nInstantiates a ServicePartitionResolver, uses the given security credentials, FabricClient Settings and the connectionEndpoints\nto create a new instance of FabricClient.\n"
  example: []
  syntax:
    content: public ServicePartitionResolver(SecurityCredentials credential, FabricClientSettings settings, params string[] connectionEndpoints)
    content.vb: Public Sub New(credential As SecurityCredentials, settings As FabricClientSettings, ParamArray connectionEndpoints As String())
    parameters:
    - id: credential
      type: System.Fabric.SecurityCredentials
      description: Security credentials for the fabric client
    - id: settings
      type: System.Fabric.FabricClientSettings
      description: Fabric client Settings
    - id: connectionEndpoints
      type: System.String[]
      description: Array of management endpoints of the cluster
  overload: Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver.#ctor*
  nameWithType.vb: ServicePartitionResolver.ServicePartitionResolver(SecurityCredentials, FabricClientSettings, String())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver.ServicePartitionResolver(System.Fabric.SecurityCredentials, System.Fabric.FabricClientSettings, System.String())
  name.vb: ServicePartitionResolver(SecurityCredentials, FabricClientSettings, String())
- uid: Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver.ResolveAsync(System.Uri,Microsoft.ServiceFabric.Services.Client.ServicePartitionKey,System.Threading.CancellationToken)
  commentId: M:Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver.ResolveAsync(System.Uri,Microsoft.ServiceFabric.Services.Client.ServicePartitionKey,System.Threading.CancellationToken)
  id: ResolveAsync(System.Uri,Microsoft.ServiceFabric.Services.Client.ServicePartitionKey,System.Threading.CancellationToken)
  parent: Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver
  langs:
  - csharp
  - vb
  name: ResolveAsync(Uri, ServicePartitionKey, CancellationToken)
  nameWithType: ServicePartitionResolver.ResolveAsync(Uri, ServicePartitionKey, CancellationToken)
  fullName: Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver.ResolveAsync(System.Uri, Microsoft.ServiceFabric.Services.Client.ServicePartitionKey, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Services/Client/ServicePartitionResolver.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: ResolveAsync
    path: src/prod/src/managed/Microsoft.ServiceFabric.Services/Client/ServicePartitionResolver.cs
    startLine: 133
  assemblies:
  - Microsoft.ServiceFabric.Services
  namespace: Microsoft.ServiceFabric.Services.Client
  summary: "\nResolves a partition of the specified service by invoking FabricClient's\n<xref href=\"System.Fabric.FabricClient.ServiceManagementClient.ResolveServicePartitionAsync(System.Uri)\" data-throw-if-not-resolved=\"false\"></xref>method with back-off/retry on retry-able errors.\n"
  example: []
  syntax:
    content: public Task<ResolvedServicePartition> ResolveAsync(Uri serviceUri, ServicePartitionKey partitionKey, CancellationToken cancellationToken)
    content.vb: Public Function ResolveAsync(serviceUri As Uri, partitionKey As ServicePartitionKey, cancellationToken As CancellationToken) As Task(Of ResolvedServicePartition)
    parameters:
    - id: serviceUri
      type: System.Uri
      description: Uri of the service to resolve
    - id: partitionKey
      type: Microsoft.ServiceFabric.Services.Client.ServicePartitionKey
      description: Key that identifies the partition to resolve
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: Cancellation token
    return:
      type: System.Threading.Tasks.Task{System.Fabric.ResolvedServicePartition}
      description: "\nA <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> that represents outstanding operation. The result from\nthe Task is the <xref href=\"System.Fabric.ResolvedServicePartition\" data-throw-if-not-resolved=\"false\"></xref> object, that contains the information\nabout the resolved service partition including the service endpoints.\n"
  overload: Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver.ResolveAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver.ResolveAsync(System.Uri,Microsoft.ServiceFabric.Services.Client.ServicePartitionKey,System.TimeSpan,System.TimeSpan,System.Threading.CancellationToken)
  commentId: M:Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver.ResolveAsync(System.Uri,Microsoft.ServiceFabric.Services.Client.ServicePartitionKey,System.TimeSpan,System.TimeSpan,System.Threading.CancellationToken)
  id: ResolveAsync(System.Uri,Microsoft.ServiceFabric.Services.Client.ServicePartitionKey,System.TimeSpan,System.TimeSpan,System.Threading.CancellationToken)
  parent: Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver
  langs:
  - csharp
  - vb
  name: ResolveAsync(Uri, ServicePartitionKey, TimeSpan, TimeSpan, CancellationToken)
  nameWithType: ServicePartitionResolver.ResolveAsync(Uri, ServicePartitionKey, TimeSpan, TimeSpan, CancellationToken)
  fullName: Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver.ResolveAsync(System.Uri, Microsoft.ServiceFabric.Services.Client.ServicePartitionKey, System.TimeSpan, System.TimeSpan, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Services/Client/ServicePartitionResolver.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: ResolveAsync
    path: src/prod/src/managed/Microsoft.ServiceFabric.Services/Client/ServicePartitionResolver.cs
    startLine: 162
  assemblies:
  - Microsoft.ServiceFabric.Services
  namespace: Microsoft.ServiceFabric.Services.Client
  summary: "\nResolves a partition of the specified service by invoking FabricClient's\n<xref href=\"System.Fabric.FabricClient.ServiceManagementClient.ResolveServicePartitionAsync(System.Uri)\" data-throw-if-not-resolved=\"false\"></xref>method with back-off/retry on retry-able errors.\n"
  example: []
  syntax:
    content: public Task<ResolvedServicePartition> ResolveAsync(Uri serviceUri, ServicePartitionKey partitionKey, TimeSpan resolveTimeoutPerTry, TimeSpan maxRetryBackoffInterval, CancellationToken cancellationToken)
    content.vb: Public Function ResolveAsync(serviceUri As Uri, partitionKey As ServicePartitionKey, resolveTimeoutPerTry As TimeSpan, maxRetryBackoffInterval As TimeSpan, cancellationToken As CancellationToken) As Task(Of ResolvedServicePartition)
    parameters:
    - id: serviceUri
      type: System.Uri
      description: Uri of the service to resolve
    - id: partitionKey
      type: Microsoft.ServiceFabric.Services.Client.ServicePartitionKey
      description: Key that identifies the partition to resolve
    - id: resolveTimeoutPerTry
      type: System.TimeSpan
      description: 'The timeout passed to FabricClient''s <xref href="System.Fabric.FabricClient.ServiceManagementClient.ResolveServicePartitionAsync(System.Uri)" data-throw-if-not-resolved="false"></xref>method '
    - id: maxRetryBackoffInterval
      type: System.TimeSpan
      description: "\nThe interval to back-off before retrying when FabricClient's <xref href=\"System.Fabric.FabricClient.ServiceManagementClient.ResolveServicePartitionAsync(System.Uri)\" data-throw-if-not-resolved=\"false\"></xref>method fails with a retry-able exception.\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: Cancellation token
    return:
      type: System.Threading.Tasks.Task{System.Fabric.ResolvedServicePartition}
      description: "\nA <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> that represents outstanding operation. The result from\nthe Task is the <xref href=\"System.Fabric.ResolvedServicePartition\" data-throw-if-not-resolved=\"false\"></xref> object, that contains the information\nabout the resolved service partition including the service endpoints.\n"
  overload: Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver.ResolveAsync*
  implements:
  - Microsoft.ServiceFabric.Services.Client.IServicePartitionResolver.ResolveAsync(System.Uri,Microsoft.ServiceFabric.Services.Client.ServicePartitionKey,System.TimeSpan,System.TimeSpan,System.Threading.CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver.ResolveAsync(System.Fabric.ResolvedServicePartition,System.Threading.CancellationToken)
  commentId: M:Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver.ResolveAsync(System.Fabric.ResolvedServicePartition,System.Threading.CancellationToken)
  id: ResolveAsync(System.Fabric.ResolvedServicePartition,System.Threading.CancellationToken)
  parent: Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver
  langs:
  - csharp
  - vb
  name: ResolveAsync(ResolvedServicePartition, CancellationToken)
  nameWithType: ServicePartitionResolver.ResolveAsync(ResolvedServicePartition, CancellationToken)
  fullName: Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver.ResolveAsync(System.Fabric.ResolvedServicePartition, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Services/Client/ServicePartitionResolver.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: ResolveAsync
    path: src/prod/src/managed/Microsoft.ServiceFabric.Services/Client/ServicePartitionResolver.cs
    startLine: 238
  assemblies:
  - Microsoft.ServiceFabric.Services
  namespace: Microsoft.ServiceFabric.Services.Client
  summary: "\nResolves a partition of the specified service by invoking FabricClient's\n<xref href=\"System.Fabric.FabricClient.ServiceManagementClient.ResolveServicePartitionAsync(System.Uri)\" data-throw-if-not-resolved=\"false\"></xref>method with back-off/retry on retry-able errors. This takes in \nthe resolved service partition that was got via an earlier invocation of the ResolveAsync() method. \nThis api-overload is used in cases where the client knows that the resolved service partition that it has is no longer valid.\n"
  example: []
  syntax:
    content: public Task<ResolvedServicePartition> ResolveAsync(ResolvedServicePartition previousRsp, CancellationToken cancellationToken)
    content.vb: Public Function ResolveAsync(previousRsp As ResolvedServicePartition, cancellationToken As CancellationToken) As Task(Of ResolvedServicePartition)
    parameters:
    - id: previousRsp
      type: System.Fabric.ResolvedServicePartition
      description: Previous resolved service partition
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: Cancellation token
    return:
      type: System.Threading.Tasks.Task{System.Fabric.ResolvedServicePartition}
      description: "\nA <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> that represents outstanding operation. The result from\nthe Task is the <xref href=\"System.Fabric.ResolvedServicePartition\" data-throw-if-not-resolved=\"false\"></xref> object, that\ncontains the service endpoints.\n"
  overload: Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver.ResolveAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver.ResolveAsync(System.Fabric.ResolvedServicePartition,System.TimeSpan,System.TimeSpan,System.Threading.CancellationToken)
  commentId: M:Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver.ResolveAsync(System.Fabric.ResolvedServicePartition,System.TimeSpan,System.TimeSpan,System.Threading.CancellationToken)
  id: ResolveAsync(System.Fabric.ResolvedServicePartition,System.TimeSpan,System.TimeSpan,System.Threading.CancellationToken)
  parent: Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver
  langs:
  - csharp
  - vb
  name: ResolveAsync(ResolvedServicePartition, TimeSpan, TimeSpan, CancellationToken)
  nameWithType: ServicePartitionResolver.ResolveAsync(ResolvedServicePartition, TimeSpan, TimeSpan, CancellationToken)
  fullName: Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver.ResolveAsync(System.Fabric.ResolvedServicePartition, System.TimeSpan, System.TimeSpan, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Services/Client/ServicePartitionResolver.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: ResolveAsync
    path: src/prod/src/managed/Microsoft.ServiceFabric.Services/Client/ServicePartitionResolver.cs
    startLine: 266
  assemblies:
  - Microsoft.ServiceFabric.Services
  namespace: Microsoft.ServiceFabric.Services.Client
  summary: "\nResolves a partition of the specified service by invoking FabricClient's\n<xref href=\"System.Fabric.FabricClient.ServiceManagementClient.ResolveServicePartitionAsync(System.Uri)\" data-throw-if-not-resolved=\"false\"></xref>method with back-off/retry on retry-able errors. This takes in \nthe resolved service partition that was got via an earlier invocation of the ResolveAsync() method. \nThis api-overload is used in cases where the client knows that the resolved service partition that it has is no longer valid.\n"
  example: []
  syntax:
    content: public Task<ResolvedServicePartition> ResolveAsync(ResolvedServicePartition previousRsp, TimeSpan resolveTimeoutPerTry, TimeSpan maxRetryBackoffInterval, CancellationToken cancellationToken)
    content.vb: Public Function ResolveAsync(previousRsp As ResolvedServicePartition, resolveTimeoutPerTry As TimeSpan, maxRetryBackoffInterval As TimeSpan, cancellationToken As CancellationToken) As Task(Of ResolvedServicePartition)
    parameters:
    - id: previousRsp
      type: System.Fabric.ResolvedServicePartition
      description: Previous resolved service partition
    - id: resolveTimeoutPerTry
      type: System.TimeSpan
      description: 'The timeout passed to FabricClient''s <xref href="System.Fabric.FabricClient.ServiceManagementClient.ResolveServicePartitionAsync(System.Uri)" data-throw-if-not-resolved="false"></xref>method '
    - id: maxRetryBackoffInterval
      type: System.TimeSpan
      description: "\nThe interval to back-off before retrying when FabricClient's <xref href=\"System.Fabric.FabricClient.ServiceManagementClient.ResolveServicePartitionAsync(System.Uri)\" data-throw-if-not-resolved=\"false\"></xref>method fails with a retry-able exception.\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: Cancellation token
    return:
      type: System.Threading.Tasks.Task{System.Fabric.ResolvedServicePartition}
      description: "\nA <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> that represents outstanding operation. The result from\nthe Task is the <xref href=\"System.Fabric.ResolvedServicePartition\" data-throw-if-not-resolved=\"false\"></xref> object, that contains the information\nabout the resolved service partition including the service endpoints.\n"
  overload: Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver.ResolveAsync*
  implements:
  - Microsoft.ServiceFabric.Services.Client.IServicePartitionResolver.ResolveAsync(System.Fabric.ResolvedServicePartition,System.TimeSpan,System.TimeSpan,System.Threading.CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver.SetDefault(Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver)
  commentId: M:Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver.SetDefault(Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver)
  id: SetDefault(Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver)
  parent: Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver
  langs:
  - csharp
  - vb
  name: SetDefault(ServicePartitionResolver)
  nameWithType: ServicePartitionResolver.SetDefault(ServicePartitionResolver)
  fullName: Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver.SetDefault(Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Services/Client/ServicePartitionResolver.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: SetDefault
    path: src/prod/src/managed/Microsoft.ServiceFabric.Services/Client/ServicePartitionResolver.cs
    startLine: 330
  assemblies:
  - Microsoft.ServiceFabric.Services
  namespace: Microsoft.ServiceFabric.Services.Client
  summary: "\nUpdates the default ServicePartitionResolver\n"
  example: []
  syntax:
    content: public static void SetDefault(ServicePartitionResolver defaultServiceResolver)
    content.vb: Public Shared Sub SetDefault(defaultServiceResolver As ServicePartitionResolver)
    parameters:
    - id: defaultServiceResolver
      type: Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver
      description: The new default value
  overload: Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver.SetDefault*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver.GetDefault
  commentId: M:Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver.GetDefault
  id: GetDefault
  parent: Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver
  langs:
  - csharp
  - vb
  name: GetDefault()
  nameWithType: ServicePartitionResolver.GetDefault()
  fullName: Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver.GetDefault()
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Services/Client/ServicePartitionResolver.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: GetDefault
    path: src/prod/src/managed/Microsoft.ServiceFabric.Services/Client/ServicePartitionResolver.cs
    startLine: 342
  assemblies:
  - Microsoft.ServiceFabric.Services
  namespace: Microsoft.ServiceFabric.Services.Client
  summary: "\nGets the default ServicePartitionResolver\n"
  example: []
  syntax:
    content: public static ServicePartitionResolver GetDefault()
    content.vb: Public Shared Function GetDefault As ServicePartitionResolver
    return:
      type: Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver
      description: Default <xref href="Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver" data-throw-if-not-resolved="false"></xref>
  overload: Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver.GetDefault*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: System.Fabric.FabricClient.ServiceManagementClient.ResolveServicePartitionAsync(System.Uri)
  commentId: M:System.Fabric.FabricClient.ServiceManagementClient.ResolveServicePartitionAsync(System.Uri)
- uid: Microsoft.ServiceFabric.Services.Client
  commentId: N:Microsoft.ServiceFabric.Services.Client
  isExternal: false
  name: Microsoft.ServiceFabric.Services.Client
  nameWithType: Microsoft.ServiceFabric.Services.Client
  fullName: Microsoft.ServiceFabric.Services.Client
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Microsoft.ServiceFabric.Services.Client.IServicePartitionResolver
  commentId: T:Microsoft.ServiceFabric.Services.Client.IServicePartitionResolver
  parent: Microsoft.ServiceFabric.Services.Client
  isExternal: false
  name: IServicePartitionResolver
  nameWithType: IServicePartitionResolver
  fullName: Microsoft.ServiceFabric.Services.Client.IServicePartitionResolver
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver.System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
  commentId: M:System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  parent: System.Fabric.Messaging.Stream.ByteArraySerializer
  definition: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  name: Serialize<ServicePartitionResolver>()
  nameWithType: ByteArraySerializer.Serialize<ServicePartitionResolver>()
  fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver>()
  nameWithType.vb: ByteArraySerializer.Serialize(Of ServicePartitionResolver)()
  fullname.vb: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver)()
  name.vb: Serialize(Of ServicePartitionResolver)()
  spec.csharp:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
    name: Serialize<ServicePartitionResolver>
    nameWithType: ByteArraySerializer.Serialize<ServicePartitionResolver>
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
    name: Serialize(Of ServicePartitionResolver)
    nameWithType: ByteArraySerializer.Serialize(Of ServicePartitionResolver)
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  commentId: M:System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  isExternal: false
  name: Serialize<T>(T)
  nameWithType: ByteArraySerializer.Serialize<T>(T)
  fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<T>(T)
  nameWithType.vb: ByteArraySerializer.Serialize(Of T)(T)
  fullname.vb: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of T)(T)
  name.vb: Serialize(Of T)(T)
  spec.csharp:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
    name: Serialize<T>
    nameWithType: ByteArraySerializer.Serialize<T>
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
    name: Serialize(Of T)
    nameWithType: ByteArraySerializer.Serialize(Of T)
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.Messaging.Stream.ByteArraySerializer
  commentId: T:System.Fabric.Messaging.Stream.ByteArraySerializer
  parent: System.Fabric.Messaging.Stream
  isExternal: false
  name: ByteArraySerializer
  nameWithType: ByteArraySerializer
  fullName: System.Fabric.Messaging.Stream.ByteArraySerializer
- uid: System.Fabric.Messaging.Stream
  commentId: N:System.Fabric.Messaging.Stream
  isExternal: false
  name: System.Fabric.Messaging.Stream
  nameWithType: System.Fabric.Messaging.Stream
  fullName: System.Fabric.Messaging.Stream
- uid: Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver
  commentId: T:Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver
  parent: Microsoft.ServiceFabric.Services.Client
  isExternal: false
  name: ServicePartitionResolver
  nameWithType: ServicePartitionResolver
  fullName: Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver
- uid: System.TimeSpan
  commentId: T:System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver.#ctor*
  commentId: Overload:Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver.#ctor
  isExternal: false
  name: ServicePartitionResolver
  nameWithType: ServicePartitionResolver.ServicePartitionResolver
  fullName: Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver.ServicePartitionResolver
- uid: Microsoft.ServiceFabric.Services.Client.CreateFabricClientDelegate
  commentId: T:Microsoft.ServiceFabric.Services.Client.CreateFabricClientDelegate
  parent: Microsoft.ServiceFabric.Services.Client
  isExternal: false
  name: CreateFabricClientDelegate
  nameWithType: CreateFabricClientDelegate
  fullName: Microsoft.ServiceFabric.Services.Client.CreateFabricClientDelegate
- uid: System.String[]
  name: String[]
  nameWithType: String[]
  fullName: System.String[]
  nameWithType.vb: String()
  fullname.vb: System.String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Fabric.FabricClientSettings
  commentId: T:System.Fabric.FabricClientSettings
  parent: System.Fabric
  isExternal: false
  name: FabricClientSettings
  nameWithType: FabricClientSettings
  fullName: System.Fabric.FabricClientSettings
- uid: System.Fabric
  commentId: N:System.Fabric
  isExternal: false
  name: System.Fabric
  nameWithType: System.Fabric
  fullName: System.Fabric
- uid: System.Fabric.SecurityCredentials
  commentId: T:System.Fabric.SecurityCredentials
  parent: System.Fabric
  isExternal: false
  name: SecurityCredentials
  nameWithType: SecurityCredentials
  fullName: System.Fabric.SecurityCredentials
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Fabric.ResolvedServicePartition
  commentId: T:System.Fabric.ResolvedServicePartition
  parent: System.Fabric
  isExternal: false
  name: ResolvedServicePartition
  nameWithType: ResolvedServicePartition
  fullName: System.Fabric.ResolvedServicePartition
- uid: Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver.ResolveAsync*
  commentId: Overload:Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver.ResolveAsync
  isExternal: false
  name: ResolveAsync
  nameWithType: ServicePartitionResolver.ResolveAsync
  fullName: Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver.ResolveAsync
- uid: System.Uri
  commentId: T:System.Uri
  parent: System
  isExternal: true
  name: Uri
  nameWithType: Uri
  fullName: System.Uri
- uid: Microsoft.ServiceFabric.Services.Client.ServicePartitionKey
  commentId: T:Microsoft.ServiceFabric.Services.Client.ServicePartitionKey
  parent: Microsoft.ServiceFabric.Services.Client
  isExternal: false
  name: ServicePartitionKey
  nameWithType: ServicePartitionKey
  fullName: Microsoft.ServiceFabric.Services.Client.ServicePartitionKey
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task{System.Fabric.ResolvedServicePartition}
  commentId: T:System.Threading.Tasks.Task{System.Fabric.ResolvedServicePartition}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<ResolvedServicePartition>
  nameWithType: Task<ResolvedServicePartition>
  fullName: System.Threading.Tasks.Task<System.Fabric.ResolvedServicePartition>
  nameWithType.vb: Task(Of ResolvedServicePartition)
  fullname.vb: System.Threading.Tasks.Task(Of System.Fabric.ResolvedServicePartition)
  name.vb: Task(Of ResolvedServicePartition)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Fabric.ResolvedServicePartition
    name: ResolvedServicePartition
    nameWithType: ResolvedServicePartition
    fullName: System.Fabric.ResolvedServicePartition
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Fabric.ResolvedServicePartition
    name: ResolvedServicePartition
    nameWithType: ResolvedServicePartition
    fullName: System.Fabric.ResolvedServicePartition
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: false
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullname.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceFabric.Services.Client.IServicePartitionResolver.ResolveAsync(System.Uri,Microsoft.ServiceFabric.Services.Client.ServicePartitionKey,System.TimeSpan,System.TimeSpan,System.Threading.CancellationToken)
  commentId: M:Microsoft.ServiceFabric.Services.Client.IServicePartitionResolver.ResolveAsync(System.Uri,Microsoft.ServiceFabric.Services.Client.ServicePartitionKey,System.TimeSpan,System.TimeSpan,System.Threading.CancellationToken)
  parent: Microsoft.ServiceFabric.Services.Client.IServicePartitionResolver
  isExternal: true
  name: ResolveAsync(Uri, ServicePartitionKey, TimeSpan, TimeSpan, CancellationToken)
  nameWithType: IServicePartitionResolver.ResolveAsync(Uri, ServicePartitionKey, TimeSpan, TimeSpan, CancellationToken)
  fullName: Microsoft.ServiceFabric.Services.Client.IServicePartitionResolver.ResolveAsync(System.Uri, Microsoft.ServiceFabric.Services.Client.ServicePartitionKey, System.TimeSpan, System.TimeSpan, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.ServiceFabric.Services.Client.IServicePartitionResolver.ResolveAsync(System.Uri,Microsoft.ServiceFabric.Services.Client.ServicePartitionKey,System.TimeSpan,System.TimeSpan,System.Threading.CancellationToken)
    name: ResolveAsync
    nameWithType: IServicePartitionResolver.ResolveAsync
    fullName: Microsoft.ServiceFabric.Services.Client.IServicePartitionResolver.ResolveAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Uri
    name: Uri
    nameWithType: Uri
    fullName: System.Uri
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.ServiceFabric.Services.Client.ServicePartitionKey
    name: ServicePartitionKey
    nameWithType: ServicePartitionKey
    fullName: Microsoft.ServiceFabric.Services.Client.ServicePartitionKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ServiceFabric.Services.Client.IServicePartitionResolver.ResolveAsync(System.Uri,Microsoft.ServiceFabric.Services.Client.ServicePartitionKey,System.TimeSpan,System.TimeSpan,System.Threading.CancellationToken)
    name: ResolveAsync
    nameWithType: IServicePartitionResolver.ResolveAsync
    fullName: Microsoft.ServiceFabric.Services.Client.IServicePartitionResolver.ResolveAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Uri
    name: Uri
    nameWithType: Uri
    fullName: System.Uri
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.ServiceFabric.Services.Client.ServicePartitionKey
    name: ServicePartitionKey
    nameWithType: ServicePartitionKey
    fullName: Microsoft.ServiceFabric.Services.Client.ServicePartitionKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceFabric.Services.Client.IServicePartitionResolver.ResolveAsync(System.Fabric.ResolvedServicePartition,System.TimeSpan,System.TimeSpan,System.Threading.CancellationToken)
  commentId: M:Microsoft.ServiceFabric.Services.Client.IServicePartitionResolver.ResolveAsync(System.Fabric.ResolvedServicePartition,System.TimeSpan,System.TimeSpan,System.Threading.CancellationToken)
  parent: Microsoft.ServiceFabric.Services.Client.IServicePartitionResolver
  isExternal: true
  name: ResolveAsync(ResolvedServicePartition, TimeSpan, TimeSpan, CancellationToken)
  nameWithType: IServicePartitionResolver.ResolveAsync(ResolvedServicePartition, TimeSpan, TimeSpan, CancellationToken)
  fullName: Microsoft.ServiceFabric.Services.Client.IServicePartitionResolver.ResolveAsync(System.Fabric.ResolvedServicePartition, System.TimeSpan, System.TimeSpan, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.ServiceFabric.Services.Client.IServicePartitionResolver.ResolveAsync(System.Fabric.ResolvedServicePartition,System.TimeSpan,System.TimeSpan,System.Threading.CancellationToken)
    name: ResolveAsync
    nameWithType: IServicePartitionResolver.ResolveAsync
    fullName: Microsoft.ServiceFabric.Services.Client.IServicePartitionResolver.ResolveAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Fabric.ResolvedServicePartition
    name: ResolvedServicePartition
    nameWithType: ResolvedServicePartition
    fullName: System.Fabric.ResolvedServicePartition
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ServiceFabric.Services.Client.IServicePartitionResolver.ResolveAsync(System.Fabric.ResolvedServicePartition,System.TimeSpan,System.TimeSpan,System.Threading.CancellationToken)
    name: ResolveAsync
    nameWithType: IServicePartitionResolver.ResolveAsync
    fullName: Microsoft.ServiceFabric.Services.Client.IServicePartitionResolver.ResolveAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Fabric.ResolvedServicePartition
    name: ResolvedServicePartition
    nameWithType: ResolvedServicePartition
    fullName: System.Fabric.ResolvedServicePartition
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver.SetDefault*
  commentId: Overload:Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver.SetDefault
  isExternal: false
  name: SetDefault
  nameWithType: ServicePartitionResolver.SetDefault
  fullName: Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver.SetDefault
- uid: Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver.GetDefault*
  commentId: Overload:Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver.GetDefault
  isExternal: false
  name: GetDefault
  nameWithType: ServicePartitionResolver.GetDefault
  fullName: Microsoft.ServiceFabric.Services.Client.ServicePartitionResolver.GetDefault
