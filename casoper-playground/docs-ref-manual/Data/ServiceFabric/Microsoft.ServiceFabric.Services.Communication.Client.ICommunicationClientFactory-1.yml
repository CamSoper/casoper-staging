### YamlMime:ManagedReference
items:
- uid: Microsoft.ServiceFabric.Services.Communication.Client.ICommunicationClientFactory`1
  commentId: T:Microsoft.ServiceFabric.Services.Communication.Client.ICommunicationClientFactory`1
  id: ICommunicationClientFactory`1
  parent: Microsoft.ServiceFabric.Services.Communication.Client
  children:
  - Microsoft.ServiceFabric.Services.Communication.Client.ICommunicationClientFactory`1.ClientConnected
  - Microsoft.ServiceFabric.Services.Communication.Client.ICommunicationClientFactory`1.ClientDisconnected
  - Microsoft.ServiceFabric.Services.Communication.Client.ICommunicationClientFactory`1.GetClientAsync(System.Fabric.ResolvedServicePartition,Microsoft.ServiceFabric.Services.Communication.Client.TargetReplicaSelector,System.String,Microsoft.ServiceFabric.Services.Communication.Client.OperationRetrySettings,System.Threading.CancellationToken)
  - Microsoft.ServiceFabric.Services.Communication.Client.ICommunicationClientFactory`1.GetClientAsync(System.Uri,Microsoft.ServiceFabric.Services.Client.ServicePartitionKey,Microsoft.ServiceFabric.Services.Communication.Client.TargetReplicaSelector,System.String,Microsoft.ServiceFabric.Services.Communication.Client.OperationRetrySettings,System.Threading.CancellationToken)
  - Microsoft.ServiceFabric.Services.Communication.Client.ICommunicationClientFactory`1.ReportOperationExceptionAsync(`0,Microsoft.ServiceFabric.Services.Communication.Client.ExceptionInformation,Microsoft.ServiceFabric.Services.Communication.Client.OperationRetrySettings,System.Threading.CancellationToken)
  langs:
  - csharp
  - vb
  name: ICommunicationClientFactory<TCommunicationClient>
  nameWithType: ICommunicationClientFactory<TCommunicationClient>
  fullName: Microsoft.ServiceFabric.Services.Communication.Client.ICommunicationClientFactory<TCommunicationClient>
  type: Interface
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Services/Communication/Client/ICommunicationClientFactory.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: ICommunicationClientFactory
    path: src/prod/src/managed/Microsoft.ServiceFabric.Services/Communication/Client/ICommunicationClientFactory.cs
    startLine: 16
  assemblies:
  - Microsoft.ServiceFabric.Services
  namespace: Microsoft.ServiceFabric.Services.Communication.Client
  summary: "\nDefines the interface that must be implemented to provide a factory for communication clients to talk to a service fabric service.\n"
  example: []
  syntax:
    content: >-
      public interface ICommunicationClientFactory<TCommunicationClient>
          where TCommunicationClient : ICommunicationClient
    content.vb: Public Interface ICommunicationClientFactory(Of TCommunicationClient As ICommunicationClient)
    typeParameters:
    - id: TCommunicationClient
      description: Type of communication client
  extensionMethods:
  - Microsoft.ServiceFabric.Services.Communication.Client.ICommunicationClientFactory`1.System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
  nameWithType.vb: ICommunicationClientFactory(Of TCommunicationClient)
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
  fullName.vb: Microsoft.ServiceFabric.Services.Communication.Client.ICommunicationClientFactory(Of TCommunicationClient)
  name.vb: ICommunicationClientFactory(Of TCommunicationClient)
- uid: Microsoft.ServiceFabric.Services.Communication.Client.ICommunicationClientFactory`1.ClientConnected
  commentId: E:Microsoft.ServiceFabric.Services.Communication.Client.ICommunicationClientFactory`1.ClientConnected
  id: ClientConnected
  parent: Microsoft.ServiceFabric.Services.Communication.Client.ICommunicationClientFactory`1
  langs:
  - csharp
  - vb
  name: ClientConnected
  nameWithType: ICommunicationClientFactory<TCommunicationClient>.ClientConnected
  fullName: Microsoft.ServiceFabric.Services.Communication.Client.ICommunicationClientFactory<TCommunicationClient>.ClientConnected
  type: Event
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Services/Communication/Client/ICommunicationClientFactory.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: ClientConnected
    path: src/prod/src/managed/Microsoft.ServiceFabric.Services/Communication/Client/ICommunicationClientFactory.cs
    startLine: 22
  assemblies:
  - Microsoft.ServiceFabric.Services
  namespace: Microsoft.ServiceFabric.Services.Communication.Client
  summary: "\nEvent handler that is fired when the Communication client connects to the service endpoint.\n"
  example: []
  syntax:
    content: event EventHandler<CommunicationClientEventArgs<TCommunicationClient>> ClientConnected
    content.vb: Event ClientConnected As EventHandler(Of CommunicationClientEventArgs(Of TCommunicationClient))
    return:
      type: System.EventHandler{Microsoft.ServiceFabric.Services.Communication.Client.CommunicationClientEventArgs{{TCommunicationClient}}}
  nameWithType.vb: ICommunicationClientFactory(Of TCommunicationClient).ClientConnected
  fullName.vb: Microsoft.ServiceFabric.Services.Communication.Client.ICommunicationClientFactory(Of TCommunicationClient).ClientConnected
- uid: Microsoft.ServiceFabric.Services.Communication.Client.ICommunicationClientFactory`1.ClientDisconnected
  commentId: E:Microsoft.ServiceFabric.Services.Communication.Client.ICommunicationClientFactory`1.ClientDisconnected
  id: ClientDisconnected
  parent: Microsoft.ServiceFabric.Services.Communication.Client.ICommunicationClientFactory`1
  langs:
  - csharp
  - vb
  name: ClientDisconnected
  nameWithType: ICommunicationClientFactory<TCommunicationClient>.ClientDisconnected
  fullName: Microsoft.ServiceFabric.Services.Communication.Client.ICommunicationClientFactory<TCommunicationClient>.ClientDisconnected
  type: Event
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Services/Communication/Client/ICommunicationClientFactory.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: ClientDisconnected
    path: src/prod/src/managed/Microsoft.ServiceFabric.Services/Communication/Client/ICommunicationClientFactory.cs
    startLine: 27
  assemblies:
  - Microsoft.ServiceFabric.Services
  namespace: Microsoft.ServiceFabric.Services.Communication.Client
  summary: "\nEvent handler that is fired when the Communication client disconnects from the service endpoint.\n"
  example: []
  syntax:
    content: event EventHandler<CommunicationClientEventArgs<TCommunicationClient>> ClientDisconnected
    content.vb: Event ClientDisconnected As EventHandler(Of CommunicationClientEventArgs(Of TCommunicationClient))
    return:
      type: System.EventHandler{Microsoft.ServiceFabric.Services.Communication.Client.CommunicationClientEventArgs{{TCommunicationClient}}}
  nameWithType.vb: ICommunicationClientFactory(Of TCommunicationClient).ClientDisconnected
  fullName.vb: Microsoft.ServiceFabric.Services.Communication.Client.ICommunicationClientFactory(Of TCommunicationClient).ClientDisconnected
- uid: Microsoft.ServiceFabric.Services.Communication.Client.ICommunicationClientFactory`1.GetClientAsync(System.Uri,Microsoft.ServiceFabric.Services.Client.ServicePartitionKey,Microsoft.ServiceFabric.Services.Communication.Client.TargetReplicaSelector,System.String,Microsoft.ServiceFabric.Services.Communication.Client.OperationRetrySettings,System.Threading.CancellationToken)
  commentId: M:Microsoft.ServiceFabric.Services.Communication.Client.ICommunicationClientFactory`1.GetClientAsync(System.Uri,Microsoft.ServiceFabric.Services.Client.ServicePartitionKey,Microsoft.ServiceFabric.Services.Communication.Client.TargetReplicaSelector,System.String,Microsoft.ServiceFabric.Services.Communication.Client.OperationRetrySettings,System.Threading.CancellationToken)
  id: GetClientAsync(System.Uri,Microsoft.ServiceFabric.Services.Client.ServicePartitionKey,Microsoft.ServiceFabric.Services.Communication.Client.TargetReplicaSelector,System.String,Microsoft.ServiceFabric.Services.Communication.Client.OperationRetrySettings,System.Threading.CancellationToken)
  parent: Microsoft.ServiceFabric.Services.Communication.Client.ICommunicationClientFactory`1
  langs:
  - csharp
  - vb
  name: GetClientAsync(Uri, ServicePartitionKey, TargetReplicaSelector, String, OperationRetrySettings, CancellationToken)
  nameWithType: ICommunicationClientFactory<TCommunicationClient>.GetClientAsync(Uri, ServicePartitionKey, TargetReplicaSelector, String, OperationRetrySettings, CancellationToken)
  fullName: Microsoft.ServiceFabric.Services.Communication.Client.ICommunicationClientFactory<TCommunicationClient>.GetClientAsync(System.Uri, Microsoft.ServiceFabric.Services.Client.ServicePartitionKey, Microsoft.ServiceFabric.Services.Communication.Client.TargetReplicaSelector, System.String, Microsoft.ServiceFabric.Services.Communication.Client.OperationRetrySettings, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Services/Communication/Client/ICommunicationClientFactory.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: GetClientAsync
    path: src/prod/src/managed/Microsoft.ServiceFabric.Services/Communication/Client/ICommunicationClientFactory.cs
    startLine: 45
  assemblies:
  - Microsoft.ServiceFabric.Services
  namespace: Microsoft.ServiceFabric.Services.Communication.Client
  summary: "\nResolves a partition of the specified service containing one or more communication listeners and returns a client to communicate \nto the endpoint corresponding to the given listenerName. \n\nThe endpoint of the service is of the form - {\"Endpoints\":{\"Listener1\":\"Endpoint1\",\"Listener2\":\"Endpoint2\" ...}}\n"
  example: []
  syntax:
    content: Task<TCommunicationClient> GetClientAsync(Uri serviceUri, ServicePartitionKey partitionKey, TargetReplicaSelector targetReplicaSelector, string listenerName, OperationRetrySettings retrySettings, CancellationToken cancellationToken)
    content.vb: Function GetClientAsync(serviceUri As Uri, partitionKey As ServicePartitionKey, targetReplicaSelector As TargetReplicaSelector, listenerName As String, retrySettings As OperationRetrySettings, cancellationToken As CancellationToken) As Task(Of TCommunicationClient)
    parameters:
    - id: serviceUri
      type: System.Uri
      description: Uri of the service to resolve
    - id: partitionKey
      type: Microsoft.ServiceFabric.Services.Client.ServicePartitionKey
      description: Key that identifies the partition to resolve
    - id: targetReplicaSelector
      type: Microsoft.ServiceFabric.Services.Communication.Client.TargetReplicaSelector
      description: Specifies which replica in the partition identified by the partition key, the client should connect to
    - id: listenerName
      type: System.String
      description: Specifies which listener in the endpoint of the chosen replica, to which the client should connect to
    - id: retrySettings
      type: Microsoft.ServiceFabric.Services.Communication.Client.OperationRetrySettings
      description: Specifies the retry policy that should be used for exceptions that occur when creating the client.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: Cancellation token
    return:
      type: System.Threading.Tasks.Task{{TCommunicationClient}}
      description: "\nA <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> that represents outstanding operation. The result of the Task is\nthe CommunicationClient(<xref href=\"Microsoft.ServiceFabric.Services.Communication.Client.ICommunicationClient\" data-throw-if-not-resolved=\"false\"></xref>) object.\n"
  overload: Microsoft.ServiceFabric.Services.Communication.Client.ICommunicationClientFactory`1.GetClientAsync*
  nameWithType.vb: ICommunicationClientFactory(Of TCommunicationClient).GetClientAsync(Uri, ServicePartitionKey, TargetReplicaSelector, String, OperationRetrySettings, CancellationToken)
  fullName.vb: Microsoft.ServiceFabric.Services.Communication.Client.ICommunicationClientFactory(Of TCommunicationClient).GetClientAsync(System.Uri, Microsoft.ServiceFabric.Services.Client.ServicePartitionKey, Microsoft.ServiceFabric.Services.Communication.Client.TargetReplicaSelector, System.String, Microsoft.ServiceFabric.Services.Communication.Client.OperationRetrySettings, System.Threading.CancellationToken)
- uid: Microsoft.ServiceFabric.Services.Communication.Client.ICommunicationClientFactory`1.GetClientAsync(System.Fabric.ResolvedServicePartition,Microsoft.ServiceFabric.Services.Communication.Client.TargetReplicaSelector,System.String,Microsoft.ServiceFabric.Services.Communication.Client.OperationRetrySettings,System.Threading.CancellationToken)
  commentId: M:Microsoft.ServiceFabric.Services.Communication.Client.ICommunicationClientFactory`1.GetClientAsync(System.Fabric.ResolvedServicePartition,Microsoft.ServiceFabric.Services.Communication.Client.TargetReplicaSelector,System.String,Microsoft.ServiceFabric.Services.Communication.Client.OperationRetrySettings,System.Threading.CancellationToken)
  id: GetClientAsync(System.Fabric.ResolvedServicePartition,Microsoft.ServiceFabric.Services.Communication.Client.TargetReplicaSelector,System.String,Microsoft.ServiceFabric.Services.Communication.Client.OperationRetrySettings,System.Threading.CancellationToken)
  parent: Microsoft.ServiceFabric.Services.Communication.Client.ICommunicationClientFactory`1
  langs:
  - csharp
  - vb
  name: GetClientAsync(ResolvedServicePartition, TargetReplicaSelector, String, OperationRetrySettings, CancellationToken)
  nameWithType: ICommunicationClientFactory<TCommunicationClient>.GetClientAsync(ResolvedServicePartition, TargetReplicaSelector, String, OperationRetrySettings, CancellationToken)
  fullName: Microsoft.ServiceFabric.Services.Communication.Client.ICommunicationClientFactory<TCommunicationClient>.GetClientAsync(System.Fabric.ResolvedServicePartition, Microsoft.ServiceFabric.Services.Communication.Client.TargetReplicaSelector, System.String, Microsoft.ServiceFabric.Services.Communication.Client.OperationRetrySettings, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Services/Communication/Client/ICommunicationClientFactory.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: GetClientAsync
    path: src/prod/src/managed/Microsoft.ServiceFabric.Services/Communication/Client/ICommunicationClientFactory.cs
    startLine: 68
  assemblies:
  - Microsoft.ServiceFabric.Services
  namespace: Microsoft.ServiceFabric.Services.Communication.Client
  summary: "\nRe-resolves a partition of the specified service containing one or more communication listeners and returns a client to communicate \nto the endpoint corresponding to the given listenerName. \n\nThe endpoint of the service is of the form - {\"Endpoints\":{\"Listener1\":\"Endpoint1\",\"Listener2\":\"Endpoint2\" ...}}\n"
  example: []
  syntax:
    content: Task<TCommunicationClient> GetClientAsync(ResolvedServicePartition previousRsp, TargetReplicaSelector targetReplicaSelector, string listenerName, OperationRetrySettings retrySettings, CancellationToken cancellationToken)
    content.vb: Function GetClientAsync(previousRsp As ResolvedServicePartition, targetReplicaSelector As TargetReplicaSelector, listenerName As String, retrySettings As OperationRetrySettings, cancellationToken As CancellationToken) As Task(Of TCommunicationClient)
    parameters:
    - id: previousRsp
      type: System.Fabric.ResolvedServicePartition
      description: Previous ResolvedServicePartition value
    - id: targetReplicaSelector
      type: Microsoft.ServiceFabric.Services.Communication.Client.TargetReplicaSelector
      description: Specifies which replica in the partition identified by the partition key, the client should connect to
    - id: listenerName
      type: System.String
      description: Specifies which listener in the endpoint of the chosen replica, to which the client should connect to
    - id: retrySettings
      type: Microsoft.ServiceFabric.Services.Communication.Client.OperationRetrySettings
      description: Specifies the retry policy that should be used for exceptions that occur when creating the client.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: Cancellation token
    return:
      type: System.Threading.Tasks.Task{{TCommunicationClient}}
      description: "\nA <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> that represents outstanding operation. The result of the Task is\nthe CommunicationClient(<xref href=\"Microsoft.ServiceFabric.Services.Communication.Client.ICommunicationClient\" data-throw-if-not-resolved=\"false\"></xref>) object.\n"
  overload: Microsoft.ServiceFabric.Services.Communication.Client.ICommunicationClientFactory`1.GetClientAsync*
  nameWithType.vb: ICommunicationClientFactory(Of TCommunicationClient).GetClientAsync(ResolvedServicePartition, TargetReplicaSelector, String, OperationRetrySettings, CancellationToken)
  fullName.vb: Microsoft.ServiceFabric.Services.Communication.Client.ICommunicationClientFactory(Of TCommunicationClient).GetClientAsync(System.Fabric.ResolvedServicePartition, Microsoft.ServiceFabric.Services.Communication.Client.TargetReplicaSelector, System.String, Microsoft.ServiceFabric.Services.Communication.Client.OperationRetrySettings, System.Threading.CancellationToken)
- uid: Microsoft.ServiceFabric.Services.Communication.Client.ICommunicationClientFactory`1.ReportOperationExceptionAsync(`0,Microsoft.ServiceFabric.Services.Communication.Client.ExceptionInformation,Microsoft.ServiceFabric.Services.Communication.Client.OperationRetrySettings,System.Threading.CancellationToken)
  commentId: M:Microsoft.ServiceFabric.Services.Communication.Client.ICommunicationClientFactory`1.ReportOperationExceptionAsync(`0,Microsoft.ServiceFabric.Services.Communication.Client.ExceptionInformation,Microsoft.ServiceFabric.Services.Communication.Client.OperationRetrySettings,System.Threading.CancellationToken)
  id: ReportOperationExceptionAsync(`0,Microsoft.ServiceFabric.Services.Communication.Client.ExceptionInformation,Microsoft.ServiceFabric.Services.Communication.Client.OperationRetrySettings,System.Threading.CancellationToken)
  parent: Microsoft.ServiceFabric.Services.Communication.Client.ICommunicationClientFactory`1
  langs:
  - csharp
  - vb
  name: ReportOperationExceptionAsync(TCommunicationClient, ExceptionInformation, OperationRetrySettings, CancellationToken)
  nameWithType: ICommunicationClientFactory<TCommunicationClient>.ReportOperationExceptionAsync(TCommunicationClient, ExceptionInformation, OperationRetrySettings, CancellationToken)
  fullName: Microsoft.ServiceFabric.Services.Communication.Client.ICommunicationClientFactory<TCommunicationClient>.ReportOperationExceptionAsync(TCommunicationClient, Microsoft.ServiceFabric.Services.Communication.Client.ExceptionInformation, Microsoft.ServiceFabric.Services.Communication.Client.OperationRetrySettings, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Services/Communication/Client/ICommunicationClientFactory.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: ReportOperationExceptionAsync
    path: src/prod/src/managed/Microsoft.ServiceFabric.Services/Communication/Client/ICommunicationClientFactory.cs
    startLine: 86
  assemblies:
  - Microsoft.ServiceFabric.Services
  namespace: Microsoft.ServiceFabric.Services.Communication.Client
  summary: "\nHandles the exceptions that occur in the CommunicationClient when sending a message to the Service\n"
  example: []
  syntax:
    content: Task<OperationRetryControl> ReportOperationExceptionAsync(TCommunicationClient client, ExceptionInformation exceptionInformation, OperationRetrySettings retrySettings, CancellationToken cancellationToken)
    content.vb: Function ReportOperationExceptionAsync(client As TCommunicationClient, exceptionInformation As ExceptionInformation, retrySettings As OperationRetrySettings, cancellationToken As CancellationToken) As Task(Of OperationRetryControl)
    parameters:
    - id: client
      type: '{TCommunicationClient}'
      description: Communication client
    - id: exceptionInformation
      type: Microsoft.ServiceFabric.Services.Communication.Client.ExceptionInformation
      description: Information about exception that happened while communicating with the service.
    - id: retrySettings
      type: Microsoft.ServiceFabric.Services.Communication.Client.OperationRetrySettings
      description: Specifies the retry policy that should be used for handling the reported exception.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: Cancellation token
    return:
      type: System.Threading.Tasks.Task{Microsoft.ServiceFabric.Services.Communication.Client.OperationRetryControl}
      description: "\nA <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> that represents outstanding operation. The result of the Task is\na <xref href=\"Microsoft.ServiceFabric.Services.Communication.Client.OperationRetryControl\" data-throw-if-not-resolved=\"false\"></xref> object that provides information on retry policy for this exception.\n"
  overload: Microsoft.ServiceFabric.Services.Communication.Client.ICommunicationClientFactory`1.ReportOperationExceptionAsync*
  nameWithType.vb: ICommunicationClientFactory(Of TCommunicationClient).ReportOperationExceptionAsync(TCommunicationClient, ExceptionInformation, OperationRetrySettings, CancellationToken)
  fullName.vb: Microsoft.ServiceFabric.Services.Communication.Client.ICommunicationClientFactory(Of TCommunicationClient).ReportOperationExceptionAsync(TCommunicationClient, Microsoft.ServiceFabric.Services.Communication.Client.ExceptionInformation, Microsoft.ServiceFabric.Services.Communication.Client.OperationRetrySettings, System.Threading.CancellationToken)
references:
- uid: Microsoft.ServiceFabric.Services.Communication.Client
  commentId: N:Microsoft.ServiceFabric.Services.Communication.Client
  isExternal: false
  name: Microsoft.ServiceFabric.Services.Communication.Client
  nameWithType: Microsoft.ServiceFabric.Services.Communication.Client
  fullName: Microsoft.ServiceFabric.Services.Communication.Client
- uid: Microsoft.ServiceFabric.Services.Communication.Client.ICommunicationClientFactory`1.System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
  commentId: M:System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  parent: System.Fabric.Messaging.Stream.ByteArraySerializer
  definition: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  name: Serialize<ICommunicationClientFactory<TCommunicationClient>>()
  nameWithType: ByteArraySerializer.Serialize<ICommunicationClientFactory<TCommunicationClient>>()
  fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<Microsoft.ServiceFabric.Services.Communication.Client.ICommunicationClientFactory<TCommunicationClient>>()
  nameWithType.vb: ByteArraySerializer.Serialize(Of ICommunicationClientFactory(Of TCommunicationClient))()
  fullname.vb: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of Microsoft.ServiceFabric.Services.Communication.Client.ICommunicationClientFactory(Of TCommunicationClient))()
  name.vb: Serialize(Of ICommunicationClientFactory(Of TCommunicationClient))()
  spec.csharp:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
    name: Serialize<ICommunicationClientFactory<TCommunicationClient>>
    nameWithType: ByteArraySerializer.Serialize<ICommunicationClientFactory<TCommunicationClient>>
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<Microsoft.ServiceFabric.Services.Communication.Client.ICommunicationClientFactory<TCommunicationClient>>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
    name: Serialize(Of ICommunicationClientFactory(Of TCommunicationClient))
    nameWithType: ByteArraySerializer.Serialize(Of ICommunicationClientFactory(Of TCommunicationClient))
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of Microsoft.ServiceFabric.Services.Communication.Client.ICommunicationClientFactory(Of TCommunicationClient))
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  commentId: M:System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  isExternal: false
  name: Serialize<T>(T)
  nameWithType: ByteArraySerializer.Serialize<T>(T)
  fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<T>(T)
  nameWithType.vb: ByteArraySerializer.Serialize(Of T)(T)
  fullname.vb: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of T)(T)
  name.vb: Serialize(Of T)(T)
  spec.csharp:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
    name: Serialize<T>
    nameWithType: ByteArraySerializer.Serialize<T>
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
    name: Serialize(Of T)
    nameWithType: ByteArraySerializer.Serialize(Of T)
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.Messaging.Stream.ByteArraySerializer
  commentId: T:System.Fabric.Messaging.Stream.ByteArraySerializer
  parent: System.Fabric.Messaging.Stream
  isExternal: false
  name: ByteArraySerializer
  nameWithType: ByteArraySerializer
  fullName: System.Fabric.Messaging.Stream.ByteArraySerializer
- uid: System.Fabric.Messaging.Stream
  commentId: N:System.Fabric.Messaging.Stream
  isExternal: false
  name: System.Fabric.Messaging.Stream
  nameWithType: System.Fabric.Messaging.Stream
  fullName: System.Fabric.Messaging.Stream
- uid: System.EventHandler{Microsoft.ServiceFabric.Services.Communication.Client.CommunicationClientEventArgs{{TCommunicationClient}}}
  commentId: T:System.EventHandler{Microsoft.ServiceFabric.Services.Communication.Client.CommunicationClientEventArgs{`0}}
  parent: System
  definition: System.EventHandler`1
  name: EventHandler<CommunicationClientEventArgs<TCommunicationClient>>
  nameWithType: EventHandler<CommunicationClientEventArgs<TCommunicationClient>>
  fullName: System.EventHandler<Microsoft.ServiceFabric.Services.Communication.Client.CommunicationClientEventArgs<TCommunicationClient>>
  nameWithType.vb: EventHandler(Of CommunicationClientEventArgs(Of TCommunicationClient))
  fullname.vb: System.EventHandler(Of Microsoft.ServiceFabric.Services.Communication.Client.CommunicationClientEventArgs(Of TCommunicationClient))
  name.vb: EventHandler(Of CommunicationClientEventArgs(Of TCommunicationClient))
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.ServiceFabric.Services.Communication.Client.CommunicationClientEventArgs`1
    name: CommunicationClientEventArgs
    nameWithType: CommunicationClientEventArgs
    fullName: Microsoft.ServiceFabric.Services.Communication.Client.CommunicationClientEventArgs
  - name: <
    nameWithType: <
    fullName: <
  - name: TCommunicationClient
    nameWithType: TCommunicationClient
    fullName: TCommunicationClient
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.ServiceFabric.Services.Communication.Client.CommunicationClientEventArgs`1
    name: CommunicationClientEventArgs
    nameWithType: CommunicationClientEventArgs
    fullName: Microsoft.ServiceFabric.Services.Communication.Client.CommunicationClientEventArgs
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TCommunicationClient
    nameWithType: TCommunicationClient
    fullName: TCommunicationClient
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.EventHandler`1
  commentId: T:System.EventHandler`1
  isExternal: true
  name: EventHandler<TEventArgs>
  nameWithType: EventHandler<TEventArgs>
  fullName: System.EventHandler<TEventArgs>
  nameWithType.vb: EventHandler(Of TEventArgs)
  fullname.vb: System.EventHandler(Of TEventArgs)
  name.vb: EventHandler(Of TEventArgs)
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEventArgs
    nameWithType: TEventArgs
    fullName: TEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEventArgs
    nameWithType: TEventArgs
    fullName: TEventArgs
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: Microsoft.ServiceFabric.Services.Communication.Client.ICommunicationClient
  commentId: T:Microsoft.ServiceFabric.Services.Communication.Client.ICommunicationClient
  parent: Microsoft.ServiceFabric.Services.Communication.Client
  isExternal: false
  name: ICommunicationClient
  nameWithType: ICommunicationClient
  fullName: Microsoft.ServiceFabric.Services.Communication.Client.ICommunicationClient
- uid: Microsoft.ServiceFabric.Services.Communication.Client.ICommunicationClientFactory`1.GetClientAsync*
  commentId: Overload:Microsoft.ServiceFabric.Services.Communication.Client.ICommunicationClientFactory`1.GetClientAsync
  isExternal: false
  name: GetClientAsync
  nameWithType: ICommunicationClientFactory<TCommunicationClient>.GetClientAsync
  fullName: Microsoft.ServiceFabric.Services.Communication.Client.ICommunicationClientFactory<TCommunicationClient>.GetClientAsync
  nameWithType.vb: ICommunicationClientFactory(Of TCommunicationClient).GetClientAsync
  fullname.vb: Microsoft.ServiceFabric.Services.Communication.Client.ICommunicationClientFactory(Of TCommunicationClient).GetClientAsync
- uid: System.Uri
  commentId: T:System.Uri
  parent: System
  isExternal: true
  name: Uri
  nameWithType: Uri
  fullName: System.Uri
- uid: Microsoft.ServiceFabric.Services.Client.ServicePartitionKey
  commentId: T:Microsoft.ServiceFabric.Services.Client.ServicePartitionKey
  parent: Microsoft.ServiceFabric.Services.Client
  isExternal: false
  name: ServicePartitionKey
  nameWithType: ServicePartitionKey
  fullName: Microsoft.ServiceFabric.Services.Client.ServicePartitionKey
- uid: Microsoft.ServiceFabric.Services.Communication.Client.TargetReplicaSelector
  commentId: T:Microsoft.ServiceFabric.Services.Communication.Client.TargetReplicaSelector
  parent: Microsoft.ServiceFabric.Services.Communication.Client
  isExternal: false
  name: TargetReplicaSelector
  nameWithType: TargetReplicaSelector
  fullName: Microsoft.ServiceFabric.Services.Communication.Client.TargetReplicaSelector
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.ServiceFabric.Services.Communication.Client.OperationRetrySettings
  commentId: T:Microsoft.ServiceFabric.Services.Communication.Client.OperationRetrySettings
  parent: Microsoft.ServiceFabric.Services.Communication.Client
  isExternal: false
  name: OperationRetrySettings
  nameWithType: OperationRetrySettings
  fullName: Microsoft.ServiceFabric.Services.Communication.Client.OperationRetrySettings
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task{{TCommunicationClient}}
  commentId: T:System.Threading.Tasks.Task{`0}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<TCommunicationClient>
  nameWithType: Task<TCommunicationClient>
  fullName: System.Threading.Tasks.Task<TCommunicationClient>
  nameWithType.vb: Task(Of TCommunicationClient)
  fullname.vb: System.Threading.Tasks.Task(Of TCommunicationClient)
  name.vb: Task(Of TCommunicationClient)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TCommunicationClient
    nameWithType: TCommunicationClient
    fullName: TCommunicationClient
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TCommunicationClient
    nameWithType: TCommunicationClient
    fullName: TCommunicationClient
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: Microsoft.ServiceFabric.Services.Client
  commentId: N:Microsoft.ServiceFabric.Services.Client
  isExternal: false
  name: Microsoft.ServiceFabric.Services.Client
  nameWithType: Microsoft.ServiceFabric.Services.Client
  fullName: Microsoft.ServiceFabric.Services.Client
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: false
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullname.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.ResolvedServicePartition
  commentId: T:System.Fabric.ResolvedServicePartition
  parent: System.Fabric
  isExternal: false
  name: ResolvedServicePartition
  nameWithType: ResolvedServicePartition
  fullName: System.Fabric.ResolvedServicePartition
- uid: System.Fabric
  commentId: N:System.Fabric
  isExternal: false
  name: System.Fabric
  nameWithType: System.Fabric
  fullName: System.Fabric
- uid: Microsoft.ServiceFabric.Services.Communication.Client.OperationRetryControl
  commentId: T:Microsoft.ServiceFabric.Services.Communication.Client.OperationRetryControl
  isExternal: false
  name: OperationRetryControl
  nameWithType: OperationRetryControl
  fullName: Microsoft.ServiceFabric.Services.Communication.Client.OperationRetryControl
- uid: Microsoft.ServiceFabric.Services.Communication.Client.ICommunicationClientFactory`1.ReportOperationExceptionAsync*
  commentId: Overload:Microsoft.ServiceFabric.Services.Communication.Client.ICommunicationClientFactory`1.ReportOperationExceptionAsync
  isExternal: false
  name: ReportOperationExceptionAsync
  nameWithType: ICommunicationClientFactory<TCommunicationClient>.ReportOperationExceptionAsync
  fullName: Microsoft.ServiceFabric.Services.Communication.Client.ICommunicationClientFactory<TCommunicationClient>.ReportOperationExceptionAsync
  nameWithType.vb: ICommunicationClientFactory(Of TCommunicationClient).ReportOperationExceptionAsync
  fullname.vb: Microsoft.ServiceFabric.Services.Communication.Client.ICommunicationClientFactory(Of TCommunicationClient).ReportOperationExceptionAsync
- uid: '{TCommunicationClient}'
  commentId: '!:TCommunicationClient'
  definition: TCommunicationClient
  name: TCommunicationClient
  nameWithType: TCommunicationClient
  fullName: TCommunicationClient
- uid: Microsoft.ServiceFabric.Services.Communication.Client.ExceptionInformation
  commentId: T:Microsoft.ServiceFabric.Services.Communication.Client.ExceptionInformation
  parent: Microsoft.ServiceFabric.Services.Communication.Client
  isExternal: false
  name: ExceptionInformation
  nameWithType: ExceptionInformation
  fullName: Microsoft.ServiceFabric.Services.Communication.Client.ExceptionInformation
- uid: System.Threading.Tasks.Task{Microsoft.ServiceFabric.Services.Communication.Client.OperationRetryControl}
  commentId: T:System.Threading.Tasks.Task{Microsoft.ServiceFabric.Services.Communication.Client.OperationRetryControl}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<OperationRetryControl>
  nameWithType: Task<OperationRetryControl>
  fullName: System.Threading.Tasks.Task<Microsoft.ServiceFabric.Services.Communication.Client.OperationRetryControl>
  nameWithType.vb: Task(Of OperationRetryControl)
  fullname.vb: System.Threading.Tasks.Task(Of Microsoft.ServiceFabric.Services.Communication.Client.OperationRetryControl)
  name.vb: Task(Of OperationRetryControl)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.ServiceFabric.Services.Communication.Client.OperationRetryControl
    name: OperationRetryControl
    nameWithType: OperationRetryControl
    fullName: Microsoft.ServiceFabric.Services.Communication.Client.OperationRetryControl
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.ServiceFabric.Services.Communication.Client.OperationRetryControl
    name: OperationRetryControl
    nameWithType: OperationRetryControl
    fullName: Microsoft.ServiceFabric.Services.Communication.Client.OperationRetryControl
  - name: )
    nameWithType: )
    fullName: )
- uid: TCommunicationClient
  isExternal: false
  name: TCommunicationClient
  nameWithType: TCommunicationClient
  fullName: TCommunicationClient
