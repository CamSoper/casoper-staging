### YamlMime:ManagedReference
items:
- uid: Microsoft.ServiceFabric.Replicator.TransactionBase
  commentId: T:Microsoft.ServiceFabric.Replicator.TransactionBase
  id: TransactionBase
  parent: Microsoft.ServiceFabric.Replicator
  children:
  - Microsoft.ServiceFabric.Replicator.TransactionBase.AddLockContext(Microsoft.ServiceFabric.Replicator.LockContext)
  - Microsoft.ServiceFabric.Replicator.TransactionBase.CommitSequenceNumber
  - Microsoft.ServiceFabric.Replicator.TransactionBase.DefaultCommitAcceptanceTimeout
  - Microsoft.ServiceFabric.Replicator.TransactionBase.Dispose
  - Microsoft.ServiceFabric.Replicator.TransactionBase.Equals(Microsoft.ServiceFabric.Replicator.TransactionBase)
  - Microsoft.ServiceFabric.Replicator.TransactionBase.Equals(System.Object)
  - Microsoft.ServiceFabric.Replicator.TransactionBase.GetHashCode
  - Microsoft.ServiceFabric.Replicator.TransactionBase.Id
  - Microsoft.ServiceFabric.Replicator.TransactionBase.IsWriteTransaction
  - Microsoft.ServiceFabric.Replicator.TransactionBase.LastTransactionId
  - Microsoft.ServiceFabric.Replicator.TransactionBase.LockContexts
  - Microsoft.ServiceFabric.Replicator.TransactionBase.LookupLockContext(Microsoft.ServiceFabric.Replicator.ILockManager,System.Object)
  - Microsoft.ServiceFabric.Replicator.TransactionBase.MaxRetryDelay
  - Microsoft.ServiceFabric.Replicator.TransactionBase.op_Equality(Microsoft.ServiceFabric.Replicator.TransactionBase,Microsoft.ServiceFabric.Replicator.TransactionBase)
  - Microsoft.ServiceFabric.Replicator.TransactionBase.op_GreaterThan(Microsoft.ServiceFabric.Replicator.TransactionBase,Microsoft.ServiceFabric.Replicator.TransactionBase)
  - Microsoft.ServiceFabric.Replicator.TransactionBase.op_GreaterThanOrEqual(Microsoft.ServiceFabric.Replicator.TransactionBase,Microsoft.ServiceFabric.Replicator.TransactionBase)
  - Microsoft.ServiceFabric.Replicator.TransactionBase.op_Inequality(Microsoft.ServiceFabric.Replicator.TransactionBase,Microsoft.ServiceFabric.Replicator.TransactionBase)
  - Microsoft.ServiceFabric.Replicator.TransactionBase.op_LessThan(Microsoft.ServiceFabric.Replicator.TransactionBase,Microsoft.ServiceFabric.Replicator.TransactionBase)
  - Microsoft.ServiceFabric.Replicator.TransactionBase.op_LessThanOrEqual(Microsoft.ServiceFabric.Replicator.TransactionBase,Microsoft.ServiceFabric.Replicator.TransactionBase)
  - Microsoft.ServiceFabric.Replicator.TransactionBase.ProcessException(System.Exception)
  - Microsoft.ServiceFabric.Replicator.TransactionBase.RemoveLockContext(Microsoft.ServiceFabric.Replicator.ILockManager,System.Object)
  - Microsoft.ServiceFabric.Replicator.TransactionBase.RemoveLockContext(Microsoft.ServiceFabric.Replicator.LockContext)
  - Microsoft.ServiceFabric.Replicator.TransactionBase.RetryBackoffFactor
  - Microsoft.ServiceFabric.Replicator.TransactionBase.State
  - Microsoft.ServiceFabric.Replicator.TransactionBase.ThrowIfNotPrimary(System.Fabric.ReplicaRole)
  - Microsoft.ServiceFabric.Replicator.TransactionBase.ThrowIfNotPrimaryTransaction(System.Boolean)
  - Microsoft.ServiceFabric.Replicator.TransactionBase.ToString
  - Microsoft.ServiceFabric.Replicator.TransactionBase.TransactionLock
  - Microsoft.ServiceFabric.Replicator.TransactionBase.TransactionRetryDelay
  langs:
  - csharp
  - vb
  name: TransactionBase
  nameWithType: TransactionBase
  fullName: Microsoft.ServiceFabric.Replicator.TransactionBase
  type: Class
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Impl/Replicator/TransactionBase.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: TransactionBase
    path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Impl/Replicator/TransactionBase.cs
    startLine: 17
  assemblies:
  - Microsoft.ServiceFabric.Data.Impl
  namespace: Microsoft.ServiceFabric.Replicator
  summary: "\nAn abstraction for a set of 'operations' that can be all be committed or reverted atomically \n"
  example: []
  syntax:
    content: 'public abstract class TransactionBase : IDisposable'
    content.vb: >-
      Public MustInherit Class TransactionBase
          Implements IDisposable
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers:
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.MemberwiseClone
  extensionMethods:
  - Microsoft.ServiceFabric.Replicator.TransactionBase.System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: Microsoft.ServiceFabric.Replicator.TransactionBase.DefaultCommitAcceptanceTimeout
  commentId: F:Microsoft.ServiceFabric.Replicator.TransactionBase.DefaultCommitAcceptanceTimeout
  id: DefaultCommitAcceptanceTimeout
  parent: Microsoft.ServiceFabric.Replicator.TransactionBase
  langs:
  - csharp
  - vb
  name: DefaultCommitAcceptanceTimeout
  nameWithType: TransactionBase.DefaultCommitAcceptanceTimeout
  fullName: Microsoft.ServiceFabric.Replicator.TransactionBase.DefaultCommitAcceptanceTimeout
  type: Field
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Impl/Replicator/TransactionBase.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: DefaultCommitAcceptanceTimeout
    path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Impl/Replicator/TransactionBase.cs
    startLine: 22
  assemblies:
  - Microsoft.ServiceFabric.Data.Impl
  namespace: Microsoft.ServiceFabric.Replicator
  summary: "\nDefault timeout for commit acceptance.\n"
  example: []
  syntax:
    content: protected static readonly TimeSpan DefaultCommitAcceptanceTimeout
    content.vb: Protected Shared ReadOnly DefaultCommitAcceptanceTimeout As TimeSpan
    return:
      type: System.TimeSpan
  modifiers.csharp:
  - protected
  - static
  - readonly
  modifiers.vb:
  - Protected
  - Shared
  - ReadOnly
- uid: Microsoft.ServiceFabric.Replicator.TransactionBase.CommitSequenceNumber
  commentId: P:Microsoft.ServiceFabric.Replicator.TransactionBase.CommitSequenceNumber
  id: CommitSequenceNumber
  parent: Microsoft.ServiceFabric.Replicator.TransactionBase
  langs:
  - csharp
  - vb
  name: CommitSequenceNumber
  nameWithType: TransactionBase.CommitSequenceNumber
  fullName: Microsoft.ServiceFabric.Replicator.TransactionBase.CommitSequenceNumber
  type: Property
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Impl/Replicator/TransactionBase.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: CommitSequenceNumber
    path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Impl/Replicator/TransactionBase.cs
    startLine: 105
  assemblies:
  - Microsoft.ServiceFabric.Data.Impl
  namespace: Microsoft.ServiceFabric.Replicator
  summary: "\nGets the commit sequence number.\nFor atomic operations, commit sequence number equals the operation sequence number.\n"
  example: []
  syntax:
    content: public long CommitSequenceNumber { get; }
    content.vb: Public ReadOnly Property CommitSequenceNumber As Long
    parameters: []
    return:
      type: System.Int64
  overload: Microsoft.ServiceFabric.Replicator.TransactionBase.CommitSequenceNumber*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.ServiceFabric.Replicator.TransactionBase.Id
  commentId: P:Microsoft.ServiceFabric.Replicator.TransactionBase.Id
  id: Id
  parent: Microsoft.ServiceFabric.Replicator.TransactionBase
  langs:
  - csharp
  - vb
  name: Id
  nameWithType: TransactionBase.Id
  fullName: Microsoft.ServiceFabric.Replicator.TransactionBase.Id
  type: Property
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Impl/Replicator/TransactionBase.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: Id
    path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Impl/Replicator/TransactionBase.cs
    startLine: 123
  assemblies:
  - Microsoft.ServiceFabric.Data.Impl
  namespace: Microsoft.ServiceFabric.Replicator
  summary: "\nGets the transaction id.\n"
  example: []
  syntax:
    content: public long Id { get; }
    content.vb: Public ReadOnly Property Id As Long
    parameters: []
    return:
      type: System.Int64
  overload: Microsoft.ServiceFabric.Replicator.TransactionBase.Id*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.ServiceFabric.Replicator.TransactionBase.LockContexts
  commentId: P:Microsoft.ServiceFabric.Replicator.TransactionBase.LockContexts
  id: LockContexts
  parent: Microsoft.ServiceFabric.Replicator.TransactionBase
  langs:
  - csharp
  - vb
  name: LockContexts
  nameWithType: TransactionBase.LockContexts
  fullName: Microsoft.ServiceFabric.Replicator.TransactionBase.LockContexts
  type: Property
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Impl/Replicator/TransactionBase.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: LockContexts
    path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Impl/Replicator/TransactionBase.cs
    startLine: 132
  assemblies:
  - Microsoft.ServiceFabric.Data.Impl
  namespace: Microsoft.ServiceFabric.Replicator
  summary: "\nThis is for internal use only.\nGets the lock contexts.\n"
  example: []
  syntax:
    content: public List<LockContext> LockContexts { get; protected set; }
    content.vb: Public Property LockContexts As List(Of LockContext)
    parameters: []
    return:
      type: System.Collections.Generic.List{Microsoft.ServiceFabric.Replicator.LockContext}
  overload: Microsoft.ServiceFabric.Replicator.TransactionBase.LockContexts*
  modifiers.csharp:
  - public
  - get
  - protected set
  modifiers.vb:
  - Public
  - Get
  - Protected Set
- uid: Microsoft.ServiceFabric.Replicator.TransactionBase.State
  commentId: P:Microsoft.ServiceFabric.Replicator.TransactionBase.State
  id: State
  parent: Microsoft.ServiceFabric.Replicator.TransactionBase
  langs:
  - csharp
  - vb
  name: State
  nameWithType: TransactionBase.State
  fullName: Microsoft.ServiceFabric.Replicator.TransactionBase.State
  type: Property
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Impl/Replicator/TransactionBase.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: State
    path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Impl/Replicator/TransactionBase.cs
    startLine: 137
  assemblies:
  - Microsoft.ServiceFabric.Data.Impl
  namespace: Microsoft.ServiceFabric.Replicator
  summary: "\nGets the transaction state.\n"
  example: []
  syntax:
    content: public TransactionState State { get; protected set; }
    content.vb: Public Property State As TransactionState
    parameters: []
    return:
      type: Microsoft.ServiceFabric.Replicator.TransactionState
  overload: Microsoft.ServiceFabric.Replicator.TransactionBase.State*
  modifiers.csharp:
  - public
  - get
  - protected set
  modifiers.vb:
  - Public
  - Get
  - Protected Set
- uid: Microsoft.ServiceFabric.Replicator.TransactionBase.MaxRetryDelay
  commentId: P:Microsoft.ServiceFabric.Replicator.TransactionBase.MaxRetryDelay
  id: MaxRetryDelay
  parent: Microsoft.ServiceFabric.Replicator.TransactionBase
  langs:
  - csharp
  - vb
  name: MaxRetryDelay
  nameWithType: TransactionBase.MaxRetryDelay
  fullName: Microsoft.ServiceFabric.Replicator.TransactionBase.MaxRetryDelay
  type: Property
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Impl/Replicator/TransactionBase.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: MaxRetryDelay
    path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Impl/Replicator/TransactionBase.cs
    startLine: 188
  assemblies:
  - Microsoft.ServiceFabric.Data.Impl
  namespace: Microsoft.ServiceFabric.Replicator
  summary: "\nThe maximum allowed delay for a retry operation.\n"
  example: []
  syntax:
    content: protected static int MaxRetryDelay { get; }
    content.vb: Protected Shared ReadOnly Property MaxRetryDelay As Integer
    parameters: []
    return:
      type: System.Int32
  overload: Microsoft.ServiceFabric.Replicator.TransactionBase.MaxRetryDelay*
  modifiers.csharp:
  - protected
  - static
  - get
  modifiers.vb:
  - Protected
  - Shared
  - ReadOnly
- uid: Microsoft.ServiceFabric.Replicator.TransactionBase.RetryBackoffFactor
  commentId: P:Microsoft.ServiceFabric.Replicator.TransactionBase.RetryBackoffFactor
  id: RetryBackoffFactor
  parent: Microsoft.ServiceFabric.Replicator.TransactionBase
  langs:
  - csharp
  - vb
  name: RetryBackoffFactor
  nameWithType: TransactionBase.RetryBackoffFactor
  fullName: Microsoft.ServiceFabric.Replicator.TransactionBase.RetryBackoffFactor
  type: Property
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Impl/Replicator/TransactionBase.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: RetryBackoffFactor
    path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Impl/Replicator/TransactionBase.cs
    startLine: 196
  assemblies:
  - Microsoft.ServiceFabric.Data.Impl
  namespace: Microsoft.ServiceFabric.Replicator
  summary: "\nWhen performing backoff-retry, multiply the wait time by this factor.\n"
  example: []
  syntax:
    content: protected static int RetryBackoffFactor { get; }
    content.vb: Protected Shared ReadOnly Property RetryBackoffFactor As Integer
    parameters: []
    return:
      type: System.Int32
  overload: Microsoft.ServiceFabric.Replicator.TransactionBase.RetryBackoffFactor*
  modifiers.csharp:
  - protected
  - static
  - get
  modifiers.vb:
  - Protected
  - Shared
  - ReadOnly
- uid: Microsoft.ServiceFabric.Replicator.TransactionBase.LastTransactionId
  commentId: P:Microsoft.ServiceFabric.Replicator.TransactionBase.LastTransactionId
  id: LastTransactionId
  parent: Microsoft.ServiceFabric.Replicator.TransactionBase
  langs:
  - csharp
  - vb
  name: LastTransactionId
  nameWithType: TransactionBase.LastTransactionId
  fullName: Microsoft.ServiceFabric.Replicator.TransactionBase.LastTransactionId
  type: Property
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Impl/Replicator/TransactionBase.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: LastTransactionId
    path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Impl/Replicator/TransactionBase.cs
    startLine: 204
  assemblies:
  - Microsoft.ServiceFabric.Data.Impl
  namespace: Microsoft.ServiceFabric.Replicator
  summary: "\nThe last generated transaction Id.\n"
  example: []
  syntax:
    content: protected static long LastTransactionId { get; set; }
    content.vb: Protected Shared Property LastTransactionId As Long
    parameters: []
    return:
      type: System.Int64
  overload: Microsoft.ServiceFabric.Replicator.TransactionBase.LastTransactionId*
  modifiers.csharp:
  - protected
  - static
  - get
  - set
  modifiers.vb:
  - Protected
  - Shared
- uid: Microsoft.ServiceFabric.Replicator.TransactionBase.TransactionLock
  commentId: P:Microsoft.ServiceFabric.Replicator.TransactionBase.TransactionLock
  id: TransactionLock
  parent: Microsoft.ServiceFabric.Replicator.TransactionBase
  langs:
  - csharp
  - vb
  name: TransactionLock
  nameWithType: TransactionBase.TransactionLock
  fullName: Microsoft.ServiceFabric.Replicator.TransactionBase.TransactionLock
  type: Property
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Impl/Replicator/TransactionBase.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: TransactionLock
    path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Impl/Replicator/TransactionBase.cs
    startLine: 214
  assemblies:
  - Microsoft.ServiceFabric.Data.Impl
  namespace: Microsoft.ServiceFabric.Replicator
  summary: "\nLock to be taken when generating unique transaction Ids.\n"
  example: []
  syntax:
    content: protected static object TransactionLock { get; set; }
    content.vb: Protected Shared Property TransactionLock As Object
    parameters: []
    return:
      type: System.Object
  overload: Microsoft.ServiceFabric.Replicator.TransactionBase.TransactionLock*
  modifiers.csharp:
  - protected
  - static
  - get
  - set
  modifiers.vb:
  - Protected
  - Shared
- uid: Microsoft.ServiceFabric.Replicator.TransactionBase.IsWriteTransaction
  commentId: P:Microsoft.ServiceFabric.Replicator.TransactionBase.IsWriteTransaction
  id: IsWriteTransaction
  parent: Microsoft.ServiceFabric.Replicator.TransactionBase
  langs:
  - csharp
  - vb
  name: IsWriteTransaction
  nameWithType: TransactionBase.IsWriteTransaction
  fullName: Microsoft.ServiceFabric.Replicator.TransactionBase.IsWriteTransaction
  type: Property
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Impl/Replicator/TransactionBase.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: IsWriteTransaction
    path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Impl/Replicator/TransactionBase.cs
    startLine: 224
  assemblies:
  - Microsoft.ServiceFabric.Data.Impl
  namespace: Microsoft.ServiceFabric.Replicator
  summary: "\nWhether or not this transaction is a write transaction.\n"
  example: []
  syntax:
    content: protected bool IsWriteTransaction { get; set; }
    content.vb: Protected Property IsWriteTransaction As Boolean
    parameters: []
    return:
      type: System.Boolean
  overload: Microsoft.ServiceFabric.Replicator.TransactionBase.IsWriteTransaction*
  modifiers.csharp:
  - protected
  - get
  - set
  modifiers.vb:
  - Protected
- uid: Microsoft.ServiceFabric.Replicator.TransactionBase.TransactionRetryDelay
  commentId: P:Microsoft.ServiceFabric.Replicator.TransactionBase.TransactionRetryDelay
  id: TransactionRetryDelay
  parent: Microsoft.ServiceFabric.Replicator.TransactionBase
  langs:
  - csharp
  - vb
  name: TransactionRetryDelay
  nameWithType: TransactionBase.TransactionRetryDelay
  fullName: Microsoft.ServiceFabric.Replicator.TransactionBase.TransactionRetryDelay
  type: Property
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Impl/Replicator/TransactionBase.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: TransactionRetryDelay
    path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Impl/Replicator/TransactionBase.cs
    startLine: 234
  assemblies:
  - Microsoft.ServiceFabric.Data.Impl
  namespace: Microsoft.ServiceFabric.Replicator
  summary: "\nThe current retry delay used in backoff-retry.  Will increase by a factor of <xref href=\"Microsoft.ServiceFabric.Replicator.TransactionBase.RetryBackoffFactor\" data-throw-if-not-resolved=\"false\"></xref> for each additional retry.\n"
  example: []
  syntax:
    content: protected int TransactionRetryDelay { get; set; }
    content.vb: Protected Property TransactionRetryDelay As Integer
    parameters: []
    return:
      type: System.Int32
  overload: Microsoft.ServiceFabric.Replicator.TransactionBase.TransactionRetryDelay*
  modifiers.csharp:
  - protected
  - get
  - set
  modifiers.vb:
  - Protected
- uid: Microsoft.ServiceFabric.Replicator.TransactionBase.op_Equality(Microsoft.ServiceFabric.Replicator.TransactionBase,Microsoft.ServiceFabric.Replicator.TransactionBase)
  commentId: M:Microsoft.ServiceFabric.Replicator.TransactionBase.op_Equality(Microsoft.ServiceFabric.Replicator.TransactionBase,Microsoft.ServiceFabric.Replicator.TransactionBase)
  id: op_Equality(Microsoft.ServiceFabric.Replicator.TransactionBase,Microsoft.ServiceFabric.Replicator.TransactionBase)
  parent: Microsoft.ServiceFabric.Replicator.TransactionBase
  langs:
  - csharp
  - vb
  name: Equality(TransactionBase, TransactionBase)
  nameWithType: TransactionBase.Equality(TransactionBase, TransactionBase)
  fullName: Microsoft.ServiceFabric.Replicator.TransactionBase.Equality(Microsoft.ServiceFabric.Replicator.TransactionBase, Microsoft.ServiceFabric.Replicator.TransactionBase)
  type: Operator
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Impl/Replicator/TransactionBase.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: op_Equality
    path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Impl/Replicator/TransactionBase.cs
    startLine: 247
  assemblies:
  - Microsoft.ServiceFabric.Data.Impl
  namespace: Microsoft.ServiceFabric.Replicator
  summary: "\nDetermines whether the two Transactions are equal\n"
  example: []
  syntax:
    content: public static bool operator ==(TransactionBase left, TransactionBase right)
    content.vb: Public Shared Operator =(left As TransactionBase, right As TransactionBase) As Boolean
    parameters:
    - id: left
      type: Microsoft.ServiceFabric.Replicator.TransactionBase
      description: First transaction
    - id: right
      type: Microsoft.ServiceFabric.Replicator.TransactionBase
      description: Second transaction
    return:
      type: System.Boolean
      description: "'true' if both the transactions are equal"
  overload: Microsoft.ServiceFabric.Replicator.TransactionBase.op_Equality*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.ServiceFabric.Replicator.TransactionBase.op_GreaterThan(Microsoft.ServiceFabric.Replicator.TransactionBase,Microsoft.ServiceFabric.Replicator.TransactionBase)
  commentId: M:Microsoft.ServiceFabric.Replicator.TransactionBase.op_GreaterThan(Microsoft.ServiceFabric.Replicator.TransactionBase,Microsoft.ServiceFabric.Replicator.TransactionBase)
  id: op_GreaterThan(Microsoft.ServiceFabric.Replicator.TransactionBase,Microsoft.ServiceFabric.Replicator.TransactionBase)
  parent: Microsoft.ServiceFabric.Replicator.TransactionBase
  langs:
  - csharp
  - vb
  name: GreaterThan(TransactionBase, TransactionBase)
  nameWithType: TransactionBase.GreaterThan(TransactionBase, TransactionBase)
  fullName: Microsoft.ServiceFabric.Replicator.TransactionBase.GreaterThan(Microsoft.ServiceFabric.Replicator.TransactionBase, Microsoft.ServiceFabric.Replicator.TransactionBase)
  type: Operator
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Impl/Replicator/TransactionBase.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: op_GreaterThan
    path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Impl/Replicator/TransactionBase.cs
    startLine: 270
  assemblies:
  - Microsoft.ServiceFabric.Data.Impl
  namespace: Microsoft.ServiceFabric.Replicator
  summary: "\nDetermines whether one transaction is semantically 'greater' than the other\n"
  example: []
  syntax:
    content: public static bool operator>(TransactionBase left, TransactionBase right)
    content.vb: Public Shared Operator>(left As TransactionBase, right As TransactionBase) As Boolean
    parameters:
    - id: left
      type: Microsoft.ServiceFabric.Replicator.TransactionBase
      description: First transaction
    - id: right
      type: Microsoft.ServiceFabric.Replicator.TransactionBase
      description: Second transaction
    return:
      type: System.Boolean
      description: "'true' if 'left'(First) transaction is 'greater' than 'right'(Second) transaction.\n'greater' could mean 'newer', 'larger data' e.t.c\nThis is an internal implementation detail that must not be relevant to the client"
  overload: Microsoft.ServiceFabric.Replicator.TransactionBase.op_GreaterThan*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.ServiceFabric.Replicator.TransactionBase.op_GreaterThanOrEqual(Microsoft.ServiceFabric.Replicator.TransactionBase,Microsoft.ServiceFabric.Replicator.TransactionBase)
  commentId: M:Microsoft.ServiceFabric.Replicator.TransactionBase.op_GreaterThanOrEqual(Microsoft.ServiceFabric.Replicator.TransactionBase,Microsoft.ServiceFabric.Replicator.TransactionBase)
  id: op_GreaterThanOrEqual(Microsoft.ServiceFabric.Replicator.TransactionBase,Microsoft.ServiceFabric.Replicator.TransactionBase)
  parent: Microsoft.ServiceFabric.Replicator.TransactionBase
  langs:
  - csharp
  - vb
  name: GreaterThanOrEqual(TransactionBase, TransactionBase)
  nameWithType: TransactionBase.GreaterThanOrEqual(TransactionBase, TransactionBase)
  fullName: Microsoft.ServiceFabric.Replicator.TransactionBase.GreaterThanOrEqual(Microsoft.ServiceFabric.Replicator.TransactionBase, Microsoft.ServiceFabric.Replicator.TransactionBase)
  type: Operator
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Impl/Replicator/TransactionBase.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: op_GreaterThanOrEqual
    path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Impl/Replicator/TransactionBase.cs
    startLine: 293
  assemblies:
  - Microsoft.ServiceFabric.Data.Impl
  namespace: Microsoft.ServiceFabric.Replicator
  summary: "\nDetermines whether one transaction is semantically 'greater or equal' to the other\n"
  example: []
  syntax:
    content: public static bool operator >=(TransactionBase left, TransactionBase right)
    content.vb: Public Shared Operator >=(left As TransactionBase, right As TransactionBase) As Boolean
    parameters:
    - id: left
      type: Microsoft.ServiceFabric.Replicator.TransactionBase
      description: First transaction
    - id: right
      type: Microsoft.ServiceFabric.Replicator.TransactionBase
      description: Second transaction
    return:
      type: System.Boolean
      description: "'true' if 'left'(First) transaction is 'greater or equal' to 'right'(Second) transaction.\n'greater or equal' could mean 'newer', 'larger data' e.t.c\nThis is an internal implementation detail that must not be relevant to the client"
  overload: Microsoft.ServiceFabric.Replicator.TransactionBase.op_GreaterThanOrEqual*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.ServiceFabric.Replicator.TransactionBase.op_Inequality(Microsoft.ServiceFabric.Replicator.TransactionBase,Microsoft.ServiceFabric.Replicator.TransactionBase)
  commentId: M:Microsoft.ServiceFabric.Replicator.TransactionBase.op_Inequality(Microsoft.ServiceFabric.Replicator.TransactionBase,Microsoft.ServiceFabric.Replicator.TransactionBase)
  id: op_Inequality(Microsoft.ServiceFabric.Replicator.TransactionBase,Microsoft.ServiceFabric.Replicator.TransactionBase)
  parent: Microsoft.ServiceFabric.Replicator.TransactionBase
  langs:
  - csharp
  - vb
  name: Inequality(TransactionBase, TransactionBase)
  nameWithType: TransactionBase.Inequality(TransactionBase, TransactionBase)
  fullName: Microsoft.ServiceFabric.Replicator.TransactionBase.Inequality(Microsoft.ServiceFabric.Replicator.TransactionBase, Microsoft.ServiceFabric.Replicator.TransactionBase)
  type: Operator
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Impl/Replicator/TransactionBase.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: op_Inequality
    path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Impl/Replicator/TransactionBase.cs
    startLine: 304
  assemblies:
  - Microsoft.ServiceFabric.Data.Impl
  namespace: Microsoft.ServiceFabric.Replicator
  summary: "\nDetermines whether the 2 Transactions are equal \n"
  example: []
  syntax:
    content: public static bool operator !=(TransactionBase left, TransactionBase right)
    content.vb: Public Shared Operator <>(left As TransactionBase, right As TransactionBase) As Boolean
    parameters:
    - id: left
      type: Microsoft.ServiceFabric.Replicator.TransactionBase
      description: First transaction
    - id: right
      type: Microsoft.ServiceFabric.Replicator.TransactionBase
      description: Second transaction
    return:
      type: System.Boolean
      description: "'true' if the two transactions are not equal"
  overload: Microsoft.ServiceFabric.Replicator.TransactionBase.op_Inequality*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.ServiceFabric.Replicator.TransactionBase.op_LessThan(Microsoft.ServiceFabric.Replicator.TransactionBase,Microsoft.ServiceFabric.Replicator.TransactionBase)
  commentId: M:Microsoft.ServiceFabric.Replicator.TransactionBase.op_LessThan(Microsoft.ServiceFabric.Replicator.TransactionBase,Microsoft.ServiceFabric.Replicator.TransactionBase)
  id: op_LessThan(Microsoft.ServiceFabric.Replicator.TransactionBase,Microsoft.ServiceFabric.Replicator.TransactionBase)
  parent: Microsoft.ServiceFabric.Replicator.TransactionBase
  langs:
  - csharp
  - vb
  name: LessThan(TransactionBase, TransactionBase)
  nameWithType: TransactionBase.LessThan(TransactionBase, TransactionBase)
  fullName: Microsoft.ServiceFabric.Replicator.TransactionBase.LessThan(Microsoft.ServiceFabric.Replicator.TransactionBase, Microsoft.ServiceFabric.Replicator.TransactionBase)
  type: Operator
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Impl/Replicator/TransactionBase.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: op_LessThan
    path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Impl/Replicator/TransactionBase.cs
    startLine: 317
  assemblies:
  - Microsoft.ServiceFabric.Data.Impl
  namespace: Microsoft.ServiceFabric.Replicator
  summary: "\nDetermines whether one transaction is semantically 'lesser' than the other\n"
  example: []
  syntax:
    content: public static bool operator <(TransactionBase left, TransactionBase right)
    content.vb: Public Shared Operator <(left As TransactionBase, right As TransactionBase) As Boolean
    parameters:
    - id: left
      type: Microsoft.ServiceFabric.Replicator.TransactionBase
      description: First transaction
    - id: right
      type: Microsoft.ServiceFabric.Replicator.TransactionBase
      description: Second transaction
    return:
      type: System.Boolean
      description: "'true' if 'left'(First) transaction is 'lesser' than 'right'(Second) transaction.\n'lesser' could mean 'older', 'smaller data' e.t.c\nThis is an internal implementation detail that must not be relevant to the client"
  overload: Microsoft.ServiceFabric.Replicator.TransactionBase.op_LessThan*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.ServiceFabric.Replicator.TransactionBase.op_LessThanOrEqual(Microsoft.ServiceFabric.Replicator.TransactionBase,Microsoft.ServiceFabric.Replicator.TransactionBase)
  commentId: M:Microsoft.ServiceFabric.Replicator.TransactionBase.op_LessThanOrEqual(Microsoft.ServiceFabric.Replicator.TransactionBase,Microsoft.ServiceFabric.Replicator.TransactionBase)
  id: op_LessThanOrEqual(Microsoft.ServiceFabric.Replicator.TransactionBase,Microsoft.ServiceFabric.Replicator.TransactionBase)
  parent: Microsoft.ServiceFabric.Replicator.TransactionBase
  langs:
  - csharp
  - vb
  name: LessThanOrEqual(TransactionBase, TransactionBase)
  nameWithType: TransactionBase.LessThanOrEqual(TransactionBase, TransactionBase)
  fullName: Microsoft.ServiceFabric.Replicator.TransactionBase.LessThanOrEqual(Microsoft.ServiceFabric.Replicator.TransactionBase, Microsoft.ServiceFabric.Replicator.TransactionBase)
  type: Operator
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Impl/Replicator/TransactionBase.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: op_LessThanOrEqual
    path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Impl/Replicator/TransactionBase.cs
    startLine: 340
  assemblies:
  - Microsoft.ServiceFabric.Data.Impl
  namespace: Microsoft.ServiceFabric.Replicator
  summary: "\nDetermines whether one transaction is semantically 'lesser or equal' to the other\n"
  example: []
  syntax:
    content: public static bool operator <=(TransactionBase left, TransactionBase right)
    content.vb: Public Shared Operator <=(left As TransactionBase, right As TransactionBase) As Boolean
    parameters:
    - id: left
      type: Microsoft.ServiceFabric.Replicator.TransactionBase
      description: First transaction
    - id: right
      type: Microsoft.ServiceFabric.Replicator.TransactionBase
      description: Second transaction
    return:
      type: System.Boolean
      description: "'true' if 'left'(First) transaction is 'lesser or equal' to the 'right'(Second) transaction.\n'lesser or equal' could mean 'older', 'smaller data' e.t.c\nThis is an internal implementation detail that must not be relevant to the client"
  overload: Microsoft.ServiceFabric.Replicator.TransactionBase.op_LessThanOrEqual*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.ServiceFabric.Replicator.TransactionBase.AddLockContext(Microsoft.ServiceFabric.Replicator.LockContext)
  commentId: M:Microsoft.ServiceFabric.Replicator.TransactionBase.AddLockContext(Microsoft.ServiceFabric.Replicator.LockContext)
  id: AddLockContext(Microsoft.ServiceFabric.Replicator.LockContext)
  parent: Microsoft.ServiceFabric.Replicator.TransactionBase
  langs:
  - csharp
  - vb
  name: AddLockContext(LockContext)
  nameWithType: TransactionBase.AddLockContext(LockContext)
  fullName: Microsoft.ServiceFabric.Replicator.TransactionBase.AddLockContext(Microsoft.ServiceFabric.Replicator.LockContext)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Impl/Replicator/TransactionBase.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: AddLockContext
    path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Impl/Replicator/TransactionBase.cs
    startLine: 351
  assemblies:
  - Microsoft.ServiceFabric.Data.Impl
  namespace: Microsoft.ServiceFabric.Replicator
  summary: "\nAdds a lock context.\n"
  example: []
  syntax:
    content: public void AddLockContext(LockContext lockContext)
    content.vb: Public Sub AddLockContext(lockContext As LockContext)
    parameters:
    - id: lockContext
      type: Microsoft.ServiceFabric.Replicator.LockContext
      description: "\nThe lock context.\n"
  overload: Microsoft.ServiceFabric.Replicator.TransactionBase.AddLockContext*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceFabric.Replicator.TransactionBase.Dispose
  commentId: M:Microsoft.ServiceFabric.Replicator.TransactionBase.Dispose
  id: Dispose
  parent: Microsoft.ServiceFabric.Replicator.TransactionBase
  langs:
  - csharp
  - vb
  name: Dispose()
  nameWithType: TransactionBase.Dispose()
  fullName: Microsoft.ServiceFabric.Replicator.TransactionBase.Dispose()
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Impl/Replicator/TransactionBase.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: Dispose
    path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Impl/Replicator/TransactionBase.cs
    startLine: 365
  assemblies:
  - Microsoft.ServiceFabric.Data.Impl
  namespace: Microsoft.ServiceFabric.Replicator
  summary: "\nReleases all resources used by the Transaction.\n"
  example: []
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose
  overload: Microsoft.ServiceFabric.Replicator.TransactionBase.Dispose*
  implements:
  - System.IDisposable.Dispose
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceFabric.Replicator.TransactionBase.Equals(System.Object)
  commentId: M:Microsoft.ServiceFabric.Replicator.TransactionBase.Equals(System.Object)
  id: Equals(System.Object)
  parent: Microsoft.ServiceFabric.Replicator.TransactionBase
  langs:
  - csharp
  - vb
  name: Equals(Object)
  nameWithType: TransactionBase.Equals(Object)
  fullName: Microsoft.ServiceFabric.Replicator.TransactionBase.Equals(System.Object)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Impl/Replicator/TransactionBase.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: Equals
    path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Impl/Replicator/TransactionBase.cs
    startLine: 376
  assemblies:
  - Microsoft.ServiceFabric.Data.Impl
  namespace: Microsoft.ServiceFabric.Replicator
  summary: "\nDetermines whether the specified Transaction is equal to the current transaction\n"
  example: []
  syntax:
    content: public override bool Equals(object obj)
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
    parameters:
    - id: obj
      type: System.Object
      description: Transaction to check equality with
    return:
      type: System.Boolean
      description: "'true' if both the transactions are equal"
  overridden: System.Object.Equals(System.Object)
  overload: Microsoft.ServiceFabric.Replicator.TransactionBase.Equals*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Microsoft.ServiceFabric.Replicator.TransactionBase.Equals(Microsoft.ServiceFabric.Replicator.TransactionBase)
  commentId: M:Microsoft.ServiceFabric.Replicator.TransactionBase.Equals(Microsoft.ServiceFabric.Replicator.TransactionBase)
  id: Equals(Microsoft.ServiceFabric.Replicator.TransactionBase)
  parent: Microsoft.ServiceFabric.Replicator.TransactionBase
  langs:
  - csharp
  - vb
  name: Equals(TransactionBase)
  nameWithType: TransactionBase.Equals(TransactionBase)
  fullName: Microsoft.ServiceFabric.Replicator.TransactionBase.Equals(Microsoft.ServiceFabric.Replicator.TransactionBase)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Impl/Replicator/TransactionBase.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: Equals
    path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Impl/Replicator/TransactionBase.cs
    startLine: 392
  assemblies:
  - Microsoft.ServiceFabric.Data.Impl
  namespace: Microsoft.ServiceFabric.Replicator
  summary: "\nDetermines whether the specified Transaction is equal to the current transaction\n"
  example: []
  syntax:
    content: public bool Equals(TransactionBase transaction)
    content.vb: Public Function Equals(transaction As TransactionBase) As Boolean
    parameters:
    - id: transaction
      type: Microsoft.ServiceFabric.Replicator.TransactionBase
      description: Transaction to check equality with
    return:
      type: System.Boolean
      description: "'true' if both the transactions are equal"
  overload: Microsoft.ServiceFabric.Replicator.TransactionBase.Equals*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceFabric.Replicator.TransactionBase.GetHashCode
  commentId: M:Microsoft.ServiceFabric.Replicator.TransactionBase.GetHashCode
  id: GetHashCode
  parent: Microsoft.ServiceFabric.Replicator.TransactionBase
  langs:
  - csharp
  - vb
  name: GetHashCode()
  nameWithType: TransactionBase.GetHashCode()
  fullName: Microsoft.ServiceFabric.Replicator.TransactionBase.GetHashCode()
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Impl/Replicator/TransactionBase.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: GetHashCode
    path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Impl/Replicator/TransactionBase.cs
    startLine: 406
  assemblies:
  - Microsoft.ServiceFabric.Data.Impl
  namespace: Microsoft.ServiceFabric.Replicator
  summary: "\nServes as a hash function for this type\n"
  example: []
  syntax:
    content: public override int GetHashCode()
    content.vb: Public Overrides Function GetHashCode As Integer
    return:
      type: System.Int32
      description: A hash code for the current object
  overridden: System.Object.GetHashCode
  overload: Microsoft.ServiceFabric.Replicator.TransactionBase.GetHashCode*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Microsoft.ServiceFabric.Replicator.TransactionBase.LookupLockContext(Microsoft.ServiceFabric.Replicator.ILockManager,System.Object)
  commentId: M:Microsoft.ServiceFabric.Replicator.TransactionBase.LookupLockContext(Microsoft.ServiceFabric.Replicator.ILockManager,System.Object)
  id: LookupLockContext(Microsoft.ServiceFabric.Replicator.ILockManager,System.Object)
  parent: Microsoft.ServiceFabric.Replicator.TransactionBase
  langs:
  - csharp
  - vb
  name: LookupLockContext(ILockManager, Object)
  nameWithType: TransactionBase.LookupLockContext(ILockManager, Object)
  fullName: Microsoft.ServiceFabric.Replicator.TransactionBase.LookupLockContext(Microsoft.ServiceFabric.Replicator.ILockManager, System.Object)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Impl/Replicator/TransactionBase.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: LookupLockContext
    path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Impl/Replicator/TransactionBase.cs
    startLine: 417
  assemblies:
  - Microsoft.ServiceFabric.Data.Impl
  namespace: Microsoft.ServiceFabric.Replicator
  summary: "\nFinds the lock context in the lock manager\n"
  example: []
  syntax:
    content: public LockContext LookupLockContext(ILockManager lockManager, object lockOrKey)
    content.vb: Public Function LookupLockContext(lockManager As ILockManager, lockOrKey As Object) As LockContext
    parameters:
    - id: lockManager
      type: Microsoft.ServiceFabric.Replicator.ILockManager
      description: Lock manager object from which the lock is to be looked up
    - id: lockOrKey
      type: System.Object
      description: name of the lock
    return:
      type: Microsoft.ServiceFabric.Replicator.LockContext
      description: LockContext object if found. null otherwise
  overload: Microsoft.ServiceFabric.Replicator.TransactionBase.LookupLockContext*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceFabric.Replicator.TransactionBase.RemoveLockContext(Microsoft.ServiceFabric.Replicator.ILockManager,System.Object)
  commentId: M:Microsoft.ServiceFabric.Replicator.TransactionBase.RemoveLockContext(Microsoft.ServiceFabric.Replicator.ILockManager,System.Object)
  id: RemoveLockContext(Microsoft.ServiceFabric.Replicator.ILockManager,System.Object)
  parent: Microsoft.ServiceFabric.Replicator.TransactionBase
  langs:
  - csharp
  - vb
  name: RemoveLockContext(ILockManager, Object)
  nameWithType: TransactionBase.RemoveLockContext(ILockManager, Object)
  fullName: Microsoft.ServiceFabric.Replicator.TransactionBase.RemoveLockContext(Microsoft.ServiceFabric.Replicator.ILockManager, System.Object)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Impl/Replicator/TransactionBase.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: RemoveLockContext
    path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Impl/Replicator/TransactionBase.cs
    startLine: 449
  assemblies:
  - Microsoft.ServiceFabric.Data.Impl
  namespace: Microsoft.ServiceFabric.Replicator
  summary: "\nThis is for internal use only.\nRemoves the lock context\n"
  example: []
  syntax:
    content: public LockContext RemoveLockContext(ILockManager lockManager, object lockOrKey)
    content.vb: Public Function RemoveLockContext(lockManager As ILockManager, lockOrKey As Object) As LockContext
    parameters:
    - id: lockManager
      type: Microsoft.ServiceFabric.Replicator.ILockManager
      description: Lock manager object which contains the lock to be removed
    - id: lockOrKey
      type: System.Object
      description: name of the lock
    return:
      type: Microsoft.ServiceFabric.Replicator.LockContext
      description: LockContext object if found. null otherwise
  overload: Microsoft.ServiceFabric.Replicator.TransactionBase.RemoveLockContext*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceFabric.Replicator.TransactionBase.RemoveLockContext(Microsoft.ServiceFabric.Replicator.LockContext)
  commentId: M:Microsoft.ServiceFabric.Replicator.TransactionBase.RemoveLockContext(Microsoft.ServiceFabric.Replicator.LockContext)
  id: RemoveLockContext(Microsoft.ServiceFabric.Replicator.LockContext)
  parent: Microsoft.ServiceFabric.Replicator.TransactionBase
  langs:
  - csharp
  - vb
  name: RemoveLockContext(LockContext)
  nameWithType: TransactionBase.RemoveLockContext(LockContext)
  fullName: Microsoft.ServiceFabric.Replicator.TransactionBase.RemoveLockContext(Microsoft.ServiceFabric.Replicator.LockContext)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Impl/Replicator/TransactionBase.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: RemoveLockContext
    path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Impl/Replicator/TransactionBase.cs
    startLine: 483
  assemblies:
  - Microsoft.ServiceFabric.Data.Impl
  namespace: Microsoft.ServiceFabric.Replicator
  summary: "\nThis is for internal use only.\nRemoves the lock context\n"
  example: []
  syntax:
    content: public void RemoveLockContext(LockContext lockContext)
    content.vb: Public Sub RemoveLockContext(lockContext As LockContext)
    parameters:
    - id: lockContext
      type: Microsoft.ServiceFabric.Replicator.LockContext
      description: The lock context to be removed
  overload: Microsoft.ServiceFabric.Replicator.TransactionBase.RemoveLockContext*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceFabric.Replicator.TransactionBase.ToString
  commentId: M:Microsoft.ServiceFabric.Replicator.TransactionBase.ToString
  id: ToString
  parent: Microsoft.ServiceFabric.Replicator.TransactionBase
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: TransactionBase.ToString()
  fullName: Microsoft.ServiceFabric.Replicator.TransactionBase.ToString()
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Impl/Replicator/TransactionBase.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: ToString
    path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Impl/Replicator/TransactionBase.cs
    startLine: 504
  assemblies:
  - Microsoft.ServiceFabric.Data.Impl
  namespace: Microsoft.ServiceFabric.Replicator
  summary: "\nConverts the value of this instance to a string\n"
  example: []
  syntax:
    content: public override string ToString()
    content.vb: Public Overrides Function ToString As String
    return:
      type: System.String
      description: A string that represents the current object
  overridden: System.Object.ToString
  overload: Microsoft.ServiceFabric.Replicator.TransactionBase.ToString*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Microsoft.ServiceFabric.Replicator.TransactionBase.ProcessException(System.Exception)
  commentId: M:Microsoft.ServiceFabric.Replicator.TransactionBase.ProcessException(System.Exception)
  id: ProcessException(System.Exception)
  parent: Microsoft.ServiceFabric.Replicator.TransactionBase
  langs:
  - csharp
  - vb
  name: ProcessException(Exception)
  nameWithType: TransactionBase.ProcessException(Exception)
  fullName: Microsoft.ServiceFabric.Replicator.TransactionBase.ProcessException(System.Exception)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Impl/Replicator/TransactionBase.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: ProcessException
    path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Impl/Replicator/TransactionBase.cs
    startLine: 672
  assemblies:
  - Microsoft.ServiceFabric.Data.Impl
  namespace: Microsoft.ServiceFabric.Replicator
  summary: "\nThe process exception.\n"
  example: []
  syntax:
    content: protected static bool ProcessException(Exception e)
    content.vb: Protected Shared Function ProcessException(e As Exception) As Boolean
    parameters:
    - id: e
      type: System.Exception
      description: "\nThe e.\n"
    return:
      type: System.Boolean
      description: "\nThe <xref href=\"System.Boolean\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  overload: Microsoft.ServiceFabric.Replicator.TransactionBase.ProcessException*
  modifiers.csharp:
  - protected
  - static
  modifiers.vb:
  - Protected
  - Shared
- uid: Microsoft.ServiceFabric.Replicator.TransactionBase.ThrowIfNotPrimary(System.Fabric.ReplicaRole)
  commentId: M:Microsoft.ServiceFabric.Replicator.TransactionBase.ThrowIfNotPrimary(System.Fabric.ReplicaRole)
  id: ThrowIfNotPrimary(System.Fabric.ReplicaRole)
  parent: Microsoft.ServiceFabric.Replicator.TransactionBase
  langs:
  - csharp
  - vb
  name: ThrowIfNotPrimary(ReplicaRole)
  nameWithType: TransactionBase.ThrowIfNotPrimary(ReplicaRole)
  fullName: Microsoft.ServiceFabric.Replicator.TransactionBase.ThrowIfNotPrimary(System.Fabric.ReplicaRole)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Impl/Replicator/TransactionBase.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: ThrowIfNotPrimary
    path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Impl/Replicator/TransactionBase.cs
    startLine: 688
  assemblies:
  - Microsoft.ServiceFabric.Data.Impl
  namespace: Microsoft.ServiceFabric.Replicator
  summary: "\nThe throw if not primary.\n"
  example: []
  syntax:
    content: protected void ThrowIfNotPrimary(ReplicaRole role)
    content.vb: Protected Sub ThrowIfNotPrimary(role As ReplicaRole)
    parameters:
    - id: role
      type: System.Fabric.ReplicaRole
      description: "\nThe role.\n"
  overload: Microsoft.ServiceFabric.Replicator.TransactionBase.ThrowIfNotPrimary*
  exceptions:
  - type: System.Fabric.FabricNotPrimaryException
    commentId: T:System.Fabric.FabricNotPrimaryException
    description: "\nThrows if role is not primary\n"
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: Microsoft.ServiceFabric.Replicator.TransactionBase.ThrowIfNotPrimaryTransaction(System.Boolean)
  commentId: M:Microsoft.ServiceFabric.Replicator.TransactionBase.ThrowIfNotPrimaryTransaction(System.Boolean)
  id: ThrowIfNotPrimaryTransaction(System.Boolean)
  parent: Microsoft.ServiceFabric.Replicator.TransactionBase
  langs:
  - csharp
  - vb
  name: ThrowIfNotPrimaryTransaction(Boolean)
  nameWithType: TransactionBase.ThrowIfNotPrimaryTransaction(Boolean)
  fullName: Microsoft.ServiceFabric.Replicator.TransactionBase.ThrowIfNotPrimaryTransaction(System.Boolean)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Impl/Replicator/TransactionBase.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: ThrowIfNotPrimaryTransaction
    path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Impl/Replicator/TransactionBase.cs
    startLine: 699
  assemblies:
  - Microsoft.ServiceFabric.Data.Impl
  namespace: Microsoft.ServiceFabric.Replicator
  summary: "\nThrow is the transaction is not a primary transaction\n"
  example: []
  syntax:
    content: protected void ThrowIfNotPrimaryTransaction(bool isPrimaryTransaction)
    content.vb: Protected Sub ThrowIfNotPrimaryTransaction(isPrimaryTransaction As Boolean)
    parameters:
    - id: isPrimaryTransaction
      type: System.Boolean
  overload: Microsoft.ServiceFabric.Replicator.TransactionBase.ThrowIfNotPrimaryTransaction*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
references:
- uid: Microsoft.ServiceFabric.Replicator
  commentId: N:Microsoft.ServiceFabric.Replicator
  isExternal: false
  name: Microsoft.ServiceFabric.Replicator
  nameWithType: Microsoft.ServiceFabric.Replicator
  fullName: Microsoft.ServiceFabric.Replicator
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceFabric.Replicator.TransactionBase.System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
  commentId: M:System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  parent: System.Fabric.Messaging.Stream.ByteArraySerializer
  definition: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  name: Serialize<TransactionBase>()
  nameWithType: ByteArraySerializer.Serialize<TransactionBase>()
  fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<Microsoft.ServiceFabric.Replicator.TransactionBase>()
  nameWithType.vb: ByteArraySerializer.Serialize(Of TransactionBase)()
  fullname.vb: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of Microsoft.ServiceFabric.Replicator.TransactionBase)()
  name.vb: Serialize(Of TransactionBase)()
  spec.csharp:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
    name: Serialize<TransactionBase>
    nameWithType: ByteArraySerializer.Serialize<TransactionBase>
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<Microsoft.ServiceFabric.Replicator.TransactionBase>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
    name: Serialize(Of TransactionBase)
    nameWithType: ByteArraySerializer.Serialize(Of TransactionBase)
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of Microsoft.ServiceFabric.Replicator.TransactionBase)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  commentId: M:System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  isExternal: false
  name: Serialize<T>(T)
  nameWithType: ByteArraySerializer.Serialize<T>(T)
  fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<T>(T)
  nameWithType.vb: ByteArraySerializer.Serialize(Of T)(T)
  fullname.vb: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of T)(T)
  name.vb: Serialize(Of T)(T)
  spec.csharp:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
    name: Serialize<T>
    nameWithType: ByteArraySerializer.Serialize<T>
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
    name: Serialize(Of T)
    nameWithType: ByteArraySerializer.Serialize(Of T)
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.Messaging.Stream.ByteArraySerializer
  commentId: T:System.Fabric.Messaging.Stream.ByteArraySerializer
  parent: System.Fabric.Messaging.Stream
  isExternal: false
  name: ByteArraySerializer
  nameWithType: ByteArraySerializer
  fullName: System.Fabric.Messaging.Stream.ByteArraySerializer
- uid: System.Fabric.Messaging.Stream
  commentId: N:System.Fabric.Messaging.Stream
  isExternal: false
  name: System.Fabric.Messaging.Stream
  nameWithType: System.Fabric.Messaging.Stream
  fullName: System.Fabric.Messaging.Stream
- uid: System.TimeSpan
  commentId: T:System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: Microsoft.ServiceFabric.Replicator.TransactionBase.CommitSequenceNumber*
  commentId: Overload:Microsoft.ServiceFabric.Replicator.TransactionBase.CommitSequenceNumber
  isExternal: false
  name: CommitSequenceNumber
  nameWithType: TransactionBase.CommitSequenceNumber
  fullName: Microsoft.ServiceFabric.Replicator.TransactionBase.CommitSequenceNumber
- uid: System.Int64
  commentId: T:System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: Microsoft.ServiceFabric.Replicator.TransactionBase.Id*
  commentId: Overload:Microsoft.ServiceFabric.Replicator.TransactionBase.Id
  isExternal: false
  name: Id
  nameWithType: TransactionBase.Id
  fullName: Microsoft.ServiceFabric.Replicator.TransactionBase.Id
- uid: Microsoft.ServiceFabric.Replicator.TransactionBase.LockContexts*
  commentId: Overload:Microsoft.ServiceFabric.Replicator.TransactionBase.LockContexts
  isExternal: false
  name: LockContexts
  nameWithType: TransactionBase.LockContexts
  fullName: Microsoft.ServiceFabric.Replicator.TransactionBase.LockContexts
- uid: System.Collections.Generic.List{Microsoft.ServiceFabric.Replicator.LockContext}
  commentId: T:System.Collections.Generic.List{Microsoft.ServiceFabric.Replicator.LockContext}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<LockContext>
  nameWithType: List<LockContext>
  fullName: System.Collections.Generic.List<Microsoft.ServiceFabric.Replicator.LockContext>
  nameWithType.vb: List(Of LockContext)
  fullname.vb: System.Collections.Generic.List(Of Microsoft.ServiceFabric.Replicator.LockContext)
  name.vb: List(Of LockContext)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.ServiceFabric.Replicator.LockContext
    name: LockContext
    nameWithType: LockContext
    fullName: Microsoft.ServiceFabric.Replicator.LockContext
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.ServiceFabric.Replicator.LockContext
    name: LockContext
    nameWithType: LockContext
    fullName: Microsoft.ServiceFabric.Replicator.LockContext
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullname.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Microsoft.ServiceFabric.Replicator.TransactionBase.State*
  commentId: Overload:Microsoft.ServiceFabric.Replicator.TransactionBase.State
  isExternal: false
  name: State
  nameWithType: TransactionBase.State
  fullName: Microsoft.ServiceFabric.Replicator.TransactionBase.State
- uid: Microsoft.ServiceFabric.Replicator.TransactionState
  commentId: T:Microsoft.ServiceFabric.Replicator.TransactionState
  parent: Microsoft.ServiceFabric.Replicator
  isExternal: false
  name: TransactionState
  nameWithType: TransactionState
  fullName: Microsoft.ServiceFabric.Replicator.TransactionState
- uid: Microsoft.ServiceFabric.Replicator.TransactionBase.MaxRetryDelay*
  commentId: Overload:Microsoft.ServiceFabric.Replicator.TransactionBase.MaxRetryDelay
  isExternal: false
  name: MaxRetryDelay
  nameWithType: TransactionBase.MaxRetryDelay
  fullName: Microsoft.ServiceFabric.Replicator.TransactionBase.MaxRetryDelay
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Microsoft.ServiceFabric.Replicator.TransactionBase.RetryBackoffFactor*
  commentId: Overload:Microsoft.ServiceFabric.Replicator.TransactionBase.RetryBackoffFactor
  isExternal: false
  name: RetryBackoffFactor
  nameWithType: TransactionBase.RetryBackoffFactor
  fullName: Microsoft.ServiceFabric.Replicator.TransactionBase.RetryBackoffFactor
- uid: Microsoft.ServiceFabric.Replicator.TransactionBase.LastTransactionId*
  commentId: Overload:Microsoft.ServiceFabric.Replicator.TransactionBase.LastTransactionId
  isExternal: false
  name: LastTransactionId
  nameWithType: TransactionBase.LastTransactionId
  fullName: Microsoft.ServiceFabric.Replicator.TransactionBase.LastTransactionId
- uid: Microsoft.ServiceFabric.Replicator.TransactionBase.TransactionLock*
  commentId: Overload:Microsoft.ServiceFabric.Replicator.TransactionBase.TransactionLock
  isExternal: false
  name: TransactionLock
  nameWithType: TransactionBase.TransactionLock
  fullName: Microsoft.ServiceFabric.Replicator.TransactionBase.TransactionLock
- uid: Microsoft.ServiceFabric.Replicator.TransactionBase.IsWriteTransaction*
  commentId: Overload:Microsoft.ServiceFabric.Replicator.TransactionBase.IsWriteTransaction
  isExternal: false
  name: IsWriteTransaction
  nameWithType: TransactionBase.IsWriteTransaction
  fullName: Microsoft.ServiceFabric.Replicator.TransactionBase.IsWriteTransaction
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Microsoft.ServiceFabric.Replicator.TransactionBase.RetryBackoffFactor
  commentId: P:Microsoft.ServiceFabric.Replicator.TransactionBase.RetryBackoffFactor
  parent: Microsoft.ServiceFabric.Replicator.TransactionBase
  isExternal: false
  name: RetryBackoffFactor
  nameWithType: TransactionBase.RetryBackoffFactor
  fullName: Microsoft.ServiceFabric.Replicator.TransactionBase.RetryBackoffFactor
- uid: Microsoft.ServiceFabric.Replicator.TransactionBase.TransactionRetryDelay*
  commentId: Overload:Microsoft.ServiceFabric.Replicator.TransactionBase.TransactionRetryDelay
  isExternal: false
  name: TransactionRetryDelay
  nameWithType: TransactionBase.TransactionRetryDelay
  fullName: Microsoft.ServiceFabric.Replicator.TransactionBase.TransactionRetryDelay
- uid: Microsoft.ServiceFabric.Replicator.TransactionBase
  commentId: T:Microsoft.ServiceFabric.Replicator.TransactionBase
  parent: Microsoft.ServiceFabric.Replicator
  isExternal: false
  name: TransactionBase
  nameWithType: TransactionBase
  fullName: Microsoft.ServiceFabric.Replicator.TransactionBase
- uid: Microsoft.ServiceFabric.Replicator.TransactionBase.op_Equality*
  commentId: Overload:Microsoft.ServiceFabric.Replicator.TransactionBase.op_Equality
  isExternal: false
  name: Equality
  nameWithType: TransactionBase.Equality
  fullName: Microsoft.ServiceFabric.Replicator.TransactionBase.Equality
- uid: Microsoft.ServiceFabric.Replicator.TransactionBase.op_GreaterThan*
  commentId: Overload:Microsoft.ServiceFabric.Replicator.TransactionBase.op_GreaterThan
  isExternal: false
  name: GreaterThan
  nameWithType: TransactionBase.GreaterThan
  fullName: Microsoft.ServiceFabric.Replicator.TransactionBase.GreaterThan
- uid: Microsoft.ServiceFabric.Replicator.TransactionBase.op_GreaterThanOrEqual*
  commentId: Overload:Microsoft.ServiceFabric.Replicator.TransactionBase.op_GreaterThanOrEqual
  isExternal: false
  name: GreaterThanOrEqual
  nameWithType: TransactionBase.GreaterThanOrEqual
  fullName: Microsoft.ServiceFabric.Replicator.TransactionBase.GreaterThanOrEqual
- uid: Microsoft.ServiceFabric.Replicator.TransactionBase.op_Inequality*
  commentId: Overload:Microsoft.ServiceFabric.Replicator.TransactionBase.op_Inequality
  isExternal: false
  name: Inequality
  nameWithType: TransactionBase.Inequality
  fullName: Microsoft.ServiceFabric.Replicator.TransactionBase.Inequality
- uid: Microsoft.ServiceFabric.Replicator.TransactionBase.op_LessThan*
  commentId: Overload:Microsoft.ServiceFabric.Replicator.TransactionBase.op_LessThan
  isExternal: false
  name: LessThan
  nameWithType: TransactionBase.LessThan
  fullName: Microsoft.ServiceFabric.Replicator.TransactionBase.LessThan
- uid: Microsoft.ServiceFabric.Replicator.TransactionBase.op_LessThanOrEqual*
  commentId: Overload:Microsoft.ServiceFabric.Replicator.TransactionBase.op_LessThanOrEqual
  isExternal: false
  name: LessThanOrEqual
  nameWithType: TransactionBase.LessThanOrEqual
  fullName: Microsoft.ServiceFabric.Replicator.TransactionBase.LessThanOrEqual
- uid: Microsoft.ServiceFabric.Replicator.TransactionBase.AddLockContext*
  commentId: Overload:Microsoft.ServiceFabric.Replicator.TransactionBase.AddLockContext
  isExternal: false
  name: AddLockContext
  nameWithType: TransactionBase.AddLockContext
  fullName: Microsoft.ServiceFabric.Replicator.TransactionBase.AddLockContext
- uid: Microsoft.ServiceFabric.Replicator.LockContext
  commentId: T:Microsoft.ServiceFabric.Replicator.LockContext
  parent: Microsoft.ServiceFabric.Replicator
  isExternal: false
  name: LockContext
  nameWithType: LockContext
  fullName: Microsoft.ServiceFabric.Replicator.LockContext
- uid: Microsoft.ServiceFabric.Replicator.TransactionBase.Dispose*
  commentId: Overload:Microsoft.ServiceFabric.Replicator.TransactionBase.Dispose
  isExternal: false
  name: Dispose
  nameWithType: TransactionBase.Dispose
  fullName: Microsoft.ServiceFabric.Replicator.TransactionBase.Dispose
- uid: System.IDisposable.Dispose
  commentId: M:System.IDisposable.Dispose
  parent: System.IDisposable
  isExternal: true
  name: Dispose()
  nameWithType: IDisposable.Dispose()
  fullName: System.IDisposable.Dispose()
  spec.csharp:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceFabric.Replicator.TransactionBase.Equals*
  commentId: Overload:Microsoft.ServiceFabric.Replicator.TransactionBase.Equals
  isExternal: false
  name: Equals
  nameWithType: TransactionBase.Equals
  fullName: Microsoft.ServiceFabric.Replicator.TransactionBase.Equals
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceFabric.Replicator.TransactionBase.GetHashCode*
  commentId: Overload:Microsoft.ServiceFabric.Replicator.TransactionBase.GetHashCode
  isExternal: false
  name: GetHashCode
  nameWithType: TransactionBase.GetHashCode
  fullName: Microsoft.ServiceFabric.Replicator.TransactionBase.GetHashCode
- uid: Microsoft.ServiceFabric.Replicator.TransactionBase.LookupLockContext*
  commentId: Overload:Microsoft.ServiceFabric.Replicator.TransactionBase.LookupLockContext
  isExternal: false
  name: LookupLockContext
  nameWithType: TransactionBase.LookupLockContext
  fullName: Microsoft.ServiceFabric.Replicator.TransactionBase.LookupLockContext
- uid: Microsoft.ServiceFabric.Replicator.ILockManager
  commentId: T:Microsoft.ServiceFabric.Replicator.ILockManager
  parent: Microsoft.ServiceFabric.Replicator
  isExternal: false
  name: ILockManager
  nameWithType: ILockManager
  fullName: Microsoft.ServiceFabric.Replicator.ILockManager
- uid: Microsoft.ServiceFabric.Replicator.TransactionBase.RemoveLockContext*
  commentId: Overload:Microsoft.ServiceFabric.Replicator.TransactionBase.RemoveLockContext
  isExternal: false
  name: RemoveLockContext
  nameWithType: TransactionBase.RemoveLockContext
  fullName: Microsoft.ServiceFabric.Replicator.TransactionBase.RemoveLockContext
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceFabric.Replicator.TransactionBase.ToString*
  commentId: Overload:Microsoft.ServiceFabric.Replicator.TransactionBase.ToString
  isExternal: false
  name: ToString
  nameWithType: TransactionBase.ToString
  fullName: Microsoft.ServiceFabric.Replicator.TransactionBase.ToString
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.ServiceFabric.Replicator.TransactionBase.ProcessException*
  commentId: Overload:Microsoft.ServiceFabric.Replicator.TransactionBase.ProcessException
  isExternal: false
  name: ProcessException
  nameWithType: TransactionBase.ProcessException
  fullName: Microsoft.ServiceFabric.Replicator.TransactionBase.ProcessException
- uid: System.Exception
  commentId: T:System.Exception
  parent: System
  isExternal: true
  name: Exception
  nameWithType: Exception
  fullName: System.Exception
- uid: Microsoft.ServiceFabric.Replicator.TransactionBase.ThrowIfNotPrimary*
  commentId: Overload:Microsoft.ServiceFabric.Replicator.TransactionBase.ThrowIfNotPrimary
  isExternal: false
  name: ThrowIfNotPrimary
  nameWithType: TransactionBase.ThrowIfNotPrimary
  fullName: Microsoft.ServiceFabric.Replicator.TransactionBase.ThrowIfNotPrimary
- uid: System.Fabric.FabricNotPrimaryException
  commentId: T:System.Fabric.FabricNotPrimaryException
  isExternal: false
  name: FabricNotPrimaryException
  nameWithType: FabricNotPrimaryException
  fullName: System.Fabric.FabricNotPrimaryException
- uid: System.Fabric.ReplicaRole
  commentId: T:System.Fabric.ReplicaRole
  parent: System.Fabric
  isExternal: false
  name: ReplicaRole
  nameWithType: ReplicaRole
  fullName: System.Fabric.ReplicaRole
- uid: System.Fabric
  commentId: N:System.Fabric
  isExternal: false
  name: System.Fabric
  nameWithType: System.Fabric
  fullName: System.Fabric
- uid: Microsoft.ServiceFabric.Replicator.TransactionBase.ThrowIfNotPrimaryTransaction*
  commentId: Overload:Microsoft.ServiceFabric.Replicator.TransactionBase.ThrowIfNotPrimaryTransaction
  isExternal: false
  name: ThrowIfNotPrimaryTransaction
  nameWithType: TransactionBase.ThrowIfNotPrimaryTransaction
  fullName: Microsoft.ServiceFabric.Replicator.TransactionBase.ThrowIfNotPrimaryTransaction
