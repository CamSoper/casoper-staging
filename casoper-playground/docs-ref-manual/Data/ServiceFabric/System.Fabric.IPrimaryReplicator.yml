### YamlMime:ManagedReference
items:
- uid: System.Fabric.IPrimaryReplicator
  commentId: T:System.Fabric.IPrimaryReplicator
  id: IPrimaryReplicator
  parent: System.Fabric
  children:
  - System.Fabric.IPrimaryReplicator.BuildReplicaAsync(System.Fabric.ReplicaInformation,System.Threading.CancellationToken)
  - System.Fabric.IPrimaryReplicator.OnDataLossAsync(System.Threading.CancellationToken)
  - System.Fabric.IPrimaryReplicator.RemoveReplica(System.Int64)
  - System.Fabric.IPrimaryReplicator.UpdateCatchUpReplicaSetConfiguration(System.Fabric.ReplicaSetConfiguration,System.Fabric.ReplicaSetConfiguration)
  - System.Fabric.IPrimaryReplicator.UpdateCurrentReplicaSetConfiguration(System.Fabric.ReplicaSetConfiguration)
  - System.Fabric.IPrimaryReplicator.WaitForCatchUpQuorumAsync(System.Fabric.ReplicaSetQuorumMode,System.Threading.CancellationToken)
  langs:
  - csharp
  - vb
  name: IPrimaryReplicator
  nameWithType: IPrimaryReplicator
  fullName: System.Fabric.IPrimaryReplicator
  type: Interface
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/IReplicator.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: IPrimaryReplicator
    path: src/prod/src/managed/Api/src/System/Fabric/IReplicator.cs
    startLine: 10
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: This supports the Service Fabric infrastructure and is not meant to be used directly from your code.
  example: []
  syntax:
    content: public interface IPrimaryReplicator
    content.vb: Public Interface IPrimaryReplicator
  extensionMethods:
  - System.Fabric.IPrimaryReplicator.System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: System.Fabric.IPrimaryReplicator.OnDataLossAsync(System.Threading.CancellationToken)
  commentId: M:System.Fabric.IPrimaryReplicator.OnDataLossAsync(System.Threading.CancellationToken)
  id: OnDataLossAsync(System.Threading.CancellationToken)
  parent: System.Fabric.IPrimaryReplicator
  langs:
  - csharp
  - vb
  name: OnDataLossAsync(CancellationToken)
  nameWithType: IPrimaryReplicator.OnDataLossAsync(CancellationToken)
  fullName: System.Fabric.IPrimaryReplicator.OnDataLossAsync(System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/IReplicator.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: OnDataLossAsync
    path: src/prod/src/managed/Api/src/System/Fabric/IReplicator.cs
    startLine: 19
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: This supports the Service Fabric infrastructure and is not meant to be used directly from your code.
  example: []
  syntax:
    content: Task<bool> OnDataLossAsync(CancellationToken cancellationToken)
    content.vb: Function OnDataLossAsync(cancellationToken As CancellationToken) As Task(Of Boolean)
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> object that the operation is observing. It can be used to send a notification that the operation should be canceled. Note that cancellation is advisory and that the operation might still be completed even if it is canceled.</p>\n"
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
      description: "\n<p>A task that represents the asynchronous operation.</p>\n"
  overload: System.Fabric.IPrimaryReplicator.OnDataLossAsync*
- uid: System.Fabric.IPrimaryReplicator.UpdateCatchUpReplicaSetConfiguration(System.Fabric.ReplicaSetConfiguration,System.Fabric.ReplicaSetConfiguration)
  commentId: M:System.Fabric.IPrimaryReplicator.UpdateCatchUpReplicaSetConfiguration(System.Fabric.ReplicaSetConfiguration,System.Fabric.ReplicaSetConfiguration)
  id: UpdateCatchUpReplicaSetConfiguration(System.Fabric.ReplicaSetConfiguration,System.Fabric.ReplicaSetConfiguration)
  parent: System.Fabric.IPrimaryReplicator
  langs:
  - csharp
  - vb
  name: UpdateCatchUpReplicaSetConfiguration(ReplicaSetConfiguration, ReplicaSetConfiguration)
  nameWithType: IPrimaryReplicator.UpdateCatchUpReplicaSetConfiguration(ReplicaSetConfiguration, ReplicaSetConfiguration)
  fullName: System.Fabric.IPrimaryReplicator.UpdateCatchUpReplicaSetConfiguration(System.Fabric.ReplicaSetConfiguration, System.Fabric.ReplicaSetConfiguration)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/IReplicator.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: UpdateCatchUpReplicaSetConfiguration
    path: src/prod/src/managed/Api/src/System/Fabric/IReplicator.cs
    startLine: 28
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: This supports the Service Fabric infrastructure and is not meant to be used directly from your code.
  example: []
  syntax:
    content: void UpdateCatchUpReplicaSetConfiguration(ReplicaSetConfiguration currentConfiguration, ReplicaSetConfiguration previousConfiguration)
    content.vb: Sub UpdateCatchUpReplicaSetConfiguration(currentConfiguration As ReplicaSetConfiguration, previousConfiguration As ReplicaSetConfiguration)
    parameters:
    - id: currentConfiguration
      type: System.Fabric.ReplicaSetConfiguration
      description: "\n<p>For Internal Use Only.</p>\n"
    - id: previousConfiguration
      type: System.Fabric.ReplicaSetConfiguration
      description: "\n<p>For Internal Use Only.</p>\n"
  overload: System.Fabric.IPrimaryReplicator.UpdateCatchUpReplicaSetConfiguration*
- uid: System.Fabric.IPrimaryReplicator.WaitForCatchUpQuorumAsync(System.Fabric.ReplicaSetQuorumMode,System.Threading.CancellationToken)
  commentId: M:System.Fabric.IPrimaryReplicator.WaitForCatchUpQuorumAsync(System.Fabric.ReplicaSetQuorumMode,System.Threading.CancellationToken)
  id: WaitForCatchUpQuorumAsync(System.Fabric.ReplicaSetQuorumMode,System.Threading.CancellationToken)
  parent: System.Fabric.IPrimaryReplicator
  langs:
  - csharp
  - vb
  name: WaitForCatchUpQuorumAsync(ReplicaSetQuorumMode, CancellationToken)
  nameWithType: IPrimaryReplicator.WaitForCatchUpQuorumAsync(ReplicaSetQuorumMode, CancellationToken)
  fullName: System.Fabric.IPrimaryReplicator.WaitForCatchUpQuorumAsync(System.Fabric.ReplicaSetQuorumMode, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/IReplicator.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: WaitForCatchUpQuorumAsync
    path: src/prod/src/managed/Api/src/System/Fabric/IReplicator.cs
    startLine: 41
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: This supports the Service Fabric infrastructure and is not meant to be used directly from your code.
  example: []
  syntax:
    content: Task WaitForCatchUpQuorumAsync(ReplicaSetQuorumMode quorumMode, CancellationToken cancellationToken)
    content.vb: Function WaitForCatchUpQuorumAsync(quorumMode As ReplicaSetQuorumMode, cancellationToken As CancellationToken) As Task
    parameters:
    - id: quorumMode
      type: System.Fabric.ReplicaSetQuorumMode
      description: "\n<p>For Internal Use Only.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The CancellationToken object that the operation is observing. It can be used to send a notification that the operation should be canceled.\nNote that cancellation is advisory and that the operation might still be completed even if it is canceled.</p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>For Internal Use Only.</p>\n"
  overload: System.Fabric.IPrimaryReplicator.WaitForCatchUpQuorumAsync*
- uid: System.Fabric.IPrimaryReplicator.UpdateCurrentReplicaSetConfiguration(System.Fabric.ReplicaSetConfiguration)
  commentId: M:System.Fabric.IPrimaryReplicator.UpdateCurrentReplicaSetConfiguration(System.Fabric.ReplicaSetConfiguration)
  id: UpdateCurrentReplicaSetConfiguration(System.Fabric.ReplicaSetConfiguration)
  parent: System.Fabric.IPrimaryReplicator
  langs:
  - csharp
  - vb
  name: UpdateCurrentReplicaSetConfiguration(ReplicaSetConfiguration)
  nameWithType: IPrimaryReplicator.UpdateCurrentReplicaSetConfiguration(ReplicaSetConfiguration)
  fullName: System.Fabric.IPrimaryReplicator.UpdateCurrentReplicaSetConfiguration(System.Fabric.ReplicaSetConfiguration)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/IReplicator.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: UpdateCurrentReplicaSetConfiguration
    path: src/prod/src/managed/Api/src/System/Fabric/IReplicator.cs
    startLine: 50
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: This supports the Service Fabric infrastructure and is not meant to be used directly from your code.
  remarks: "\n<p>This supports the Service Fabric infrastructure and is not meant to be used directly from your code.</p>\n"
  example: []
  syntax:
    content: void UpdateCurrentReplicaSetConfiguration(ReplicaSetConfiguration currentConfiguration)
    content.vb: Sub UpdateCurrentReplicaSetConfiguration(currentConfiguration As ReplicaSetConfiguration)
    parameters:
    - id: currentConfiguration
      type: System.Fabric.ReplicaSetConfiguration
      description: "\n<p>This supports the Service Fabric infrastructure and is not meant to be used directly from your code.</p>\n"
  overload: System.Fabric.IPrimaryReplicator.UpdateCurrentReplicaSetConfiguration*
- uid: System.Fabric.IPrimaryReplicator.BuildReplicaAsync(System.Fabric.ReplicaInformation,System.Threading.CancellationToken)
  commentId: M:System.Fabric.IPrimaryReplicator.BuildReplicaAsync(System.Fabric.ReplicaInformation,System.Threading.CancellationToken)
  id: BuildReplicaAsync(System.Fabric.ReplicaInformation,System.Threading.CancellationToken)
  parent: System.Fabric.IPrimaryReplicator
  langs:
  - csharp
  - vb
  name: BuildReplicaAsync(ReplicaInformation, CancellationToken)
  nameWithType: IPrimaryReplicator.BuildReplicaAsync(ReplicaInformation, CancellationToken)
  fullName: System.Fabric.IPrimaryReplicator.BuildReplicaAsync(System.Fabric.ReplicaInformation, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/IReplicator.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: BuildReplicaAsync
    path: src/prod/src/managed/Api/src/System/Fabric/IReplicator.cs
    startLine: 62
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: This supports the Service Fabric infrastructure and is not meant to be used directly from your code.
  example: []
  syntax:
    content: Task BuildReplicaAsync(ReplicaInformation replicaInfo, CancellationToken cancellationToken)
    content.vb: Function BuildReplicaAsync(replicaInfo As ReplicaInformation, cancellationToken As CancellationToken) As Task
    parameters:
    - id: replicaInfo
      type: System.Fabric.ReplicaInformation
      description: "\n<p>This supports the Service Fabric infrastructure and is not meant to be used directly from your code.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref>  object that the operation is observing. It can be used to send a notification that the operation should be canceled. Note that cancellation is advisory and that the operation might still be completed even if it is canceled.</p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>A task that represents the asynchronous operation.</p>\n"
  overload: System.Fabric.IPrimaryReplicator.BuildReplicaAsync*
- uid: System.Fabric.IPrimaryReplicator.RemoveReplica(System.Int64)
  commentId: M:System.Fabric.IPrimaryReplicator.RemoveReplica(System.Int64)
  id: RemoveReplica(System.Int64)
  parent: System.Fabric.IPrimaryReplicator
  langs:
  - csharp
  - vb
  name: RemoveReplica(Int64)
  nameWithType: IPrimaryReplicator.RemoveReplica(Int64)
  fullName: System.Fabric.IPrimaryReplicator.RemoveReplica(System.Int64)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/IReplicator.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: RemoveReplica
    path: src/prod/src/managed/Api/src/System/Fabric/IReplicator.cs
    startLine: 71
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: This supports the Service Fabric infrastructure and is not meant to be used directly from your code.
  remarks: "\n<p>This supports the Service Fabric infrastructure and is not meant to be used directly from your code.</p>\n"
  example: []
  syntax:
    content: void RemoveReplica(long replicaId)
    content.vb: Sub RemoveReplica(replicaId As Long)
    parameters:
    - id: replicaId
      type: System.Int64
      description: "\n<p>This supports the Service Fabric infrastructure and is not meant to be used directly from your code.</p>\n"
  overload: System.Fabric.IPrimaryReplicator.RemoveReplica*
references:
- uid: System.Fabric
  commentId: N:System.Fabric
  isExternal: false
  name: System.Fabric
  nameWithType: System.Fabric
  fullName: System.Fabric
- uid: System.Fabric.IPrimaryReplicator.System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
  commentId: M:System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  parent: System.Fabric.Messaging.Stream.ByteArraySerializer
  definition: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  name: Serialize<IPrimaryReplicator>()
  nameWithType: ByteArraySerializer.Serialize<IPrimaryReplicator>()
  fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<System.Fabric.IPrimaryReplicator>()
  nameWithType.vb: ByteArraySerializer.Serialize(Of IPrimaryReplicator)()
  fullname.vb: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of System.Fabric.IPrimaryReplicator)()
  name.vb: Serialize(Of IPrimaryReplicator)()
  spec.csharp:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
    name: Serialize<IPrimaryReplicator>
    nameWithType: ByteArraySerializer.Serialize<IPrimaryReplicator>
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<System.Fabric.IPrimaryReplicator>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
    name: Serialize(Of IPrimaryReplicator)
    nameWithType: ByteArraySerializer.Serialize(Of IPrimaryReplicator)
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of System.Fabric.IPrimaryReplicator)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  commentId: M:System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  isExternal: false
  name: Serialize<T>(T)
  nameWithType: ByteArraySerializer.Serialize<T>(T)
  fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<T>(T)
  nameWithType.vb: ByteArraySerializer.Serialize(Of T)(T)
  fullname.vb: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of T)(T)
  name.vb: Serialize(Of T)(T)
  spec.csharp:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
    name: Serialize<T>
    nameWithType: ByteArraySerializer.Serialize<T>
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
    name: Serialize(Of T)
    nameWithType: ByteArraySerializer.Serialize(Of T)
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.Messaging.Stream.ByteArraySerializer
  commentId: T:System.Fabric.Messaging.Stream.ByteArraySerializer
  parent: System.Fabric.Messaging.Stream
  isExternal: false
  name: ByteArraySerializer
  nameWithType: ByteArraySerializer
  fullName: System.Fabric.Messaging.Stream.ByteArraySerializer
- uid: System.Fabric.Messaging.Stream
  commentId: N:System.Fabric.Messaging.Stream
  isExternal: false
  name: System.Fabric.Messaging.Stream
  nameWithType: System.Fabric.Messaging.Stream
  fullName: System.Fabric.Messaging.Stream
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Fabric.IPrimaryReplicator.OnDataLossAsync*
  commentId: Overload:System.Fabric.IPrimaryReplicator.OnDataLossAsync
  isExternal: false
  name: OnDataLossAsync
  nameWithType: IPrimaryReplicator.OnDataLossAsync
  fullName: System.Fabric.IPrimaryReplicator.OnDataLossAsync
- uid: System.Threading.Tasks.Task{System.Boolean}
  commentId: T:System.Threading.Tasks.Task{System.Boolean}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Boolean>
  nameWithType: Task<Boolean>
  fullName: System.Threading.Tasks.Task<System.Boolean>
  nameWithType.vb: Task(Of Boolean)
  fullname.vb: System.Threading.Tasks.Task(Of System.Boolean)
  name.vb: Task(Of Boolean)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: false
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullname.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: System.Fabric.IPrimaryReplicator.UpdateCatchUpReplicaSetConfiguration*
  commentId: Overload:System.Fabric.IPrimaryReplicator.UpdateCatchUpReplicaSetConfiguration
  isExternal: false
  name: UpdateCatchUpReplicaSetConfiguration
  nameWithType: IPrimaryReplicator.UpdateCatchUpReplicaSetConfiguration
  fullName: System.Fabric.IPrimaryReplicator.UpdateCatchUpReplicaSetConfiguration
- uid: System.Fabric.ReplicaSetConfiguration
  commentId: T:System.Fabric.ReplicaSetConfiguration
  parent: System.Fabric
  isExternal: false
  name: ReplicaSetConfiguration
  nameWithType: ReplicaSetConfiguration
  fullName: System.Fabric.ReplicaSetConfiguration
- uid: System.Fabric.IPrimaryReplicator.WaitForCatchUpQuorumAsync*
  commentId: Overload:System.Fabric.IPrimaryReplicator.WaitForCatchUpQuorumAsync
  isExternal: false
  name: WaitForCatchUpQuorumAsync
  nameWithType: IPrimaryReplicator.WaitForCatchUpQuorumAsync
  fullName: System.Fabric.IPrimaryReplicator.WaitForCatchUpQuorumAsync
- uid: System.Fabric.ReplicaSetQuorumMode
  commentId: T:System.Fabric.ReplicaSetQuorumMode
  parent: System.Fabric
  isExternal: false
  name: ReplicaSetQuorumMode
  nameWithType: ReplicaSetQuorumMode
  fullName: System.Fabric.ReplicaSetQuorumMode
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Fabric.IPrimaryReplicator.UpdateCurrentReplicaSetConfiguration*
  commentId: Overload:System.Fabric.IPrimaryReplicator.UpdateCurrentReplicaSetConfiguration
  isExternal: false
  name: UpdateCurrentReplicaSetConfiguration
  nameWithType: IPrimaryReplicator.UpdateCurrentReplicaSetConfiguration
  fullName: System.Fabric.IPrimaryReplicator.UpdateCurrentReplicaSetConfiguration
- uid: System.Fabric.IPrimaryReplicator.BuildReplicaAsync*
  commentId: Overload:System.Fabric.IPrimaryReplicator.BuildReplicaAsync
  isExternal: false
  name: BuildReplicaAsync
  nameWithType: IPrimaryReplicator.BuildReplicaAsync
  fullName: System.Fabric.IPrimaryReplicator.BuildReplicaAsync
- uid: System.Fabric.ReplicaInformation
  commentId: T:System.Fabric.ReplicaInformation
  parent: System.Fabric
  isExternal: false
  name: ReplicaInformation
  nameWithType: ReplicaInformation
  fullName: System.Fabric.ReplicaInformation
- uid: System.Fabric.IPrimaryReplicator.RemoveReplica*
  commentId: Overload:System.Fabric.IPrimaryReplicator.RemoveReplica
  isExternal: false
  name: RemoveReplica
  nameWithType: IPrimaryReplicator.RemoveReplica
  fullName: System.Fabric.IPrimaryReplicator.RemoveReplica
- uid: System.Int64
  commentId: T:System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
