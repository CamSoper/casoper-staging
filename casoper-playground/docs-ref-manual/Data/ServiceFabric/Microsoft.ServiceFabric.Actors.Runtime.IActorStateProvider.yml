### YamlMime:ManagedReference
items:
- uid: Microsoft.ServiceFabric.Actors.Runtime.IActorStateProvider
  commentId: T:Microsoft.ServiceFabric.Actors.Runtime.IActorStateProvider
  id: IActorStateProvider
  parent: Microsoft.ServiceFabric.Actors.Runtime
  children:
  - Microsoft.ServiceFabric.Actors.Runtime.IActorStateProvider.ActorActivatedAsync(Microsoft.ServiceFabric.Actors.ActorId,System.Threading.CancellationToken)
  - Microsoft.ServiceFabric.Actors.Runtime.IActorStateProvider.ContainsStateAsync(Microsoft.ServiceFabric.Actors.ActorId,System.String,System.Threading.CancellationToken)
  - Microsoft.ServiceFabric.Actors.Runtime.IActorStateProvider.DeleteReminderAsync(Microsoft.ServiceFabric.Actors.ActorId,System.String,System.Threading.CancellationToken)
  - Microsoft.ServiceFabric.Actors.Runtime.IActorStateProvider.EnumerateStateNamesAsync(Microsoft.ServiceFabric.Actors.ActorId,System.Threading.CancellationToken)
  - Microsoft.ServiceFabric.Actors.Runtime.IActorStateProvider.GetActorsAsync(System.Int32,Microsoft.ServiceFabric.Actors.Query.ContinuationToken,System.Threading.CancellationToken)
  - Microsoft.ServiceFabric.Actors.Runtime.IActorStateProvider.Initialize(Microsoft.ServiceFabric.Actors.Runtime.ActorTypeInformation)
  - Microsoft.ServiceFabric.Actors.Runtime.IActorStateProvider.LoadRemindersAsync(System.Threading.CancellationToken)
  - Microsoft.ServiceFabric.Actors.Runtime.IActorStateProvider.LoadStateAsync``1(Microsoft.ServiceFabric.Actors.ActorId,System.String,System.Threading.CancellationToken)
  - Microsoft.ServiceFabric.Actors.Runtime.IActorStateProvider.ReminderCallbackCompletedAsync(Microsoft.ServiceFabric.Actors.ActorId,Microsoft.ServiceFabric.Actors.Runtime.IActorReminder,System.Threading.CancellationToken)
  - Microsoft.ServiceFabric.Actors.Runtime.IActorStateProvider.RemoveActorAsync(Microsoft.ServiceFabric.Actors.ActorId,System.Threading.CancellationToken)
  - Microsoft.ServiceFabric.Actors.Runtime.IActorStateProvider.SaveReminderAsync(Microsoft.ServiceFabric.Actors.ActorId,Microsoft.ServiceFabric.Actors.Runtime.IActorReminder,System.Threading.CancellationToken)
  - Microsoft.ServiceFabric.Actors.Runtime.IActorStateProvider.SaveStateAsync(Microsoft.ServiceFabric.Actors.ActorId,System.Collections.Generic.IReadOnlyCollection{Microsoft.ServiceFabric.Actors.Runtime.ActorStateChange},System.Threading.CancellationToken)
  langs:
  - csharp
  - vb
  name: IActorStateProvider
  nameWithType: IActorStateProvider
  fullName: Microsoft.ServiceFabric.Actors.Runtime.IActorStateProvider
  type: Interface
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Actors/Runtime/IActorStateProvider.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: IActorStateProvider
    path: src/prod/src/managed/Microsoft.ServiceFabric.Actors/Runtime/IActorStateProvider.cs
    startLine: 17
  assemblies:
  - Microsoft.ServiceFabric.Actors
  namespace: Microsoft.ServiceFabric.Actors.Runtime
  summary: "\nRepresents the interface that an actor state provider needs to implement for \nactor runtime to communicate with it. \n"
  example: []
  syntax:
    content: 'public interface IActorStateProvider : IStateProviderReplica'
    content.vb: >-
      Public Interface IActorStateProvider
          Inherits IStateProviderReplica
  inheritedMembers:
  - Microsoft.ServiceFabric.Data.IStateProviderReplica.OnDataLossAsync
  - Microsoft.ServiceFabric.Data.IStateProviderReplica.Initialize(System.Fabric.StatefulServiceInitializationParameters)
  - Microsoft.ServiceFabric.Data.IStateProviderReplica.OpenAsync(System.Fabric.ReplicaOpenMode,System.Fabric.IStatefulServicePartition,System.Threading.CancellationToken)
  - Microsoft.ServiceFabric.Data.IStateProviderReplica.ChangeRoleAsync(System.Fabric.ReplicaRole,System.Threading.CancellationToken)
  - Microsoft.ServiceFabric.Data.IStateProviderReplica.CloseAsync(System.Threading.CancellationToken)
  - Microsoft.ServiceFabric.Data.IStateProviderReplica.Abort
  - Microsoft.ServiceFabric.Data.IStateProviderReplica.BackupAsync(System.Func{Microsoft.ServiceFabric.Data.BackupInfo,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}})
  - Microsoft.ServiceFabric.Data.IStateProviderReplica.BackupAsync(Microsoft.ServiceFabric.Data.BackupOption,System.TimeSpan,System.Threading.CancellationToken,System.Func{Microsoft.ServiceFabric.Data.BackupInfo,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}})
  - Microsoft.ServiceFabric.Data.IStateProviderReplica.RestoreAsync(System.String)
  - Microsoft.ServiceFabric.Data.IStateProviderReplica.RestoreAsync(System.String,Microsoft.ServiceFabric.Data.RestorePolicy,System.Threading.CancellationToken)
  extensionMethods:
  - Microsoft.ServiceFabric.Actors.Runtime.IActorStateProvider.System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: Microsoft.ServiceFabric.Actors.Runtime.IActorStateProvider.Initialize(Microsoft.ServiceFabric.Actors.Runtime.ActorTypeInformation)
  commentId: M:Microsoft.ServiceFabric.Actors.Runtime.IActorStateProvider.Initialize(Microsoft.ServiceFabric.Actors.Runtime.ActorTypeInformation)
  id: Initialize(Microsoft.ServiceFabric.Actors.Runtime.ActorTypeInformation)
  parent: Microsoft.ServiceFabric.Actors.Runtime.IActorStateProvider
  langs:
  - csharp
  - vb
  name: Initialize(ActorTypeInformation)
  nameWithType: IActorStateProvider.Initialize(ActorTypeInformation)
  fullName: Microsoft.ServiceFabric.Actors.Runtime.IActorStateProvider.Initialize(Microsoft.ServiceFabric.Actors.Runtime.ActorTypeInformation)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Actors/Runtime/IActorStateProvider.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: Initialize
    path: src/prod/src/managed/Microsoft.ServiceFabric.Actors/Runtime/IActorStateProvider.cs
    startLine: 24
  assemblies:
  - Microsoft.ServiceFabric.Actors
  namespace: Microsoft.ServiceFabric.Actors.Runtime
  summary: "\nInitializes the actor state provider with type information\nof the actor type associated with it.\n"
  example: []
  syntax:
    content: void Initialize(ActorTypeInformation actorTypeInformation)
    content.vb: Sub Initialize(actorTypeInformation As ActorTypeInformation)
    parameters:
    - id: actorTypeInformation
      type: Microsoft.ServiceFabric.Actors.Runtime.ActorTypeInformation
      description: Type information of the actor class
  overload: Microsoft.ServiceFabric.Actors.Runtime.IActorStateProvider.Initialize*
- uid: Microsoft.ServiceFabric.Actors.Runtime.IActorStateProvider.ActorActivatedAsync(Microsoft.ServiceFabric.Actors.ActorId,System.Threading.CancellationToken)
  commentId: M:Microsoft.ServiceFabric.Actors.Runtime.IActorStateProvider.ActorActivatedAsync(Microsoft.ServiceFabric.Actors.ActorId,System.Threading.CancellationToken)
  id: ActorActivatedAsync(Microsoft.ServiceFabric.Actors.ActorId,System.Threading.CancellationToken)
  parent: Microsoft.ServiceFabric.Actors.Runtime.IActorStateProvider
  langs:
  - csharp
  - vb
  name: ActorActivatedAsync(ActorId, CancellationToken)
  nameWithType: IActorStateProvider.ActorActivatedAsync(ActorId, CancellationToken)
  fullName: Microsoft.ServiceFabric.Actors.Runtime.IActorStateProvider.ActorActivatedAsync(Microsoft.ServiceFabric.Actors.ActorId, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Actors/Runtime/IActorStateProvider.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: ActorActivatedAsync
    path: src/prod/src/managed/Microsoft.ServiceFabric.Actors/Runtime/IActorStateProvider.cs
    startLine: 33
  assemblies:
  - Microsoft.ServiceFabric.Actors
  namespace: Microsoft.ServiceFabric.Actors.Runtime
  summary: "\nThis method is invoked as part of the activation process of the actor with the specified Id. \n"
  example: []
  syntax:
    content: Task ActorActivatedAsync(ActorId actorId, CancellationToken cancellationToken = null)
    content.vb: Function ActorActivatedAsync(actorId As ActorId, cancellationToken As CancellationToken = Nothing) As Task
    parameters:
    - id: actorId
      type: Microsoft.ServiceFabric.Actors.ActorId
      description: ID of the actor that is activated.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The token to monitor for cancellation requests.
    return:
      type: System.Threading.Tasks.Task
      description: A task that represents the asynchronous Actor activation notification processing.
  overload: Microsoft.ServiceFabric.Actors.Runtime.IActorStateProvider.ActorActivatedAsync*
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: The operation was canceled.
- uid: Microsoft.ServiceFabric.Actors.Runtime.IActorStateProvider.ReminderCallbackCompletedAsync(Microsoft.ServiceFabric.Actors.ActorId,Microsoft.ServiceFabric.Actors.Runtime.IActorReminder,System.Threading.CancellationToken)
  commentId: M:Microsoft.ServiceFabric.Actors.Runtime.IActorStateProvider.ReminderCallbackCompletedAsync(Microsoft.ServiceFabric.Actors.ActorId,Microsoft.ServiceFabric.Actors.Runtime.IActorReminder,System.Threading.CancellationToken)
  id: ReminderCallbackCompletedAsync(Microsoft.ServiceFabric.Actors.ActorId,Microsoft.ServiceFabric.Actors.Runtime.IActorReminder,System.Threading.CancellationToken)
  parent: Microsoft.ServiceFabric.Actors.Runtime.IActorStateProvider
  langs:
  - csharp
  - vb
  name: ReminderCallbackCompletedAsync(ActorId, IActorReminder, CancellationToken)
  nameWithType: IActorStateProvider.ReminderCallbackCompletedAsync(ActorId, IActorReminder, CancellationToken)
  fullName: Microsoft.ServiceFabric.Actors.Runtime.IActorStateProvider.ReminderCallbackCompletedAsync(Microsoft.ServiceFabric.Actors.ActorId, Microsoft.ServiceFabric.Actors.Runtime.IActorReminder, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Actors/Runtime/IActorStateProvider.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: ReminderCallbackCompletedAsync
    path: src/prod/src/managed/Microsoft.ServiceFabric.Actors/Runtime/IActorStateProvider.cs
    startLine: 45
  assemblies:
  - Microsoft.ServiceFabric.Actors
  namespace: Microsoft.ServiceFabric.Actors.Runtime
  summary: "\nThis method is invoked when a reminder fires and finishes executing its callback \n<xref href=\"Microsoft.ServiceFabric.Actors.Runtime.IRemindable.ReceiveReminderAsync(System.String%2cSystem.Byte%5b%5d%2cSystem.TimeSpan%2cSystem.TimeSpan)\" data-throw-if-not-resolved=\"false\"></xref> successfully.\n"
  example: []
  syntax:
    content: Task ReminderCallbackCompletedAsync(ActorId actorId, IActorReminder reminder, CancellationToken cancellationToken = null)
    content.vb: Function ReminderCallbackCompletedAsync(actorId As ActorId, reminder As IActorReminder, cancellationToken As CancellationToken = Nothing) As Task
    parameters:
    - id: actorId
      type: Microsoft.ServiceFabric.Actors.ActorId
      description: ID of the actor which own reminder
    - id: reminder
      type: Microsoft.ServiceFabric.Actors.Runtime.IActorReminder
      description: Actor reminder that completed successfully.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The token to monitor for cancellation requests.
    return:
      type: System.Threading.Tasks.Task
      description: "\nA task that represents the asynchronous reminder callback completed notification processing.\n"
  overload: Microsoft.ServiceFabric.Actors.Runtime.IActorStateProvider.ReminderCallbackCompletedAsync*
- uid: Microsoft.ServiceFabric.Actors.Runtime.IActorStateProvider.LoadStateAsync``1(Microsoft.ServiceFabric.Actors.ActorId,System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.ServiceFabric.Actors.Runtime.IActorStateProvider.LoadStateAsync``1(Microsoft.ServiceFabric.Actors.ActorId,System.String,System.Threading.CancellationToken)
  id: LoadStateAsync``1(Microsoft.ServiceFabric.Actors.ActorId,System.String,System.Threading.CancellationToken)
  parent: Microsoft.ServiceFabric.Actors.Runtime.IActorStateProvider
  langs:
  - csharp
  - vb
  name: LoadStateAsync<T>(ActorId, String, CancellationToken)
  nameWithType: IActorStateProvider.LoadStateAsync<T>(ActorId, String, CancellationToken)
  fullName: Microsoft.ServiceFabric.Actors.Runtime.IActorStateProvider.LoadStateAsync<T>(Microsoft.ServiceFabric.Actors.ActorId, System.String, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Actors/Runtime/IActorStateProvider.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: LoadStateAsync
    path: src/prod/src/managed/Microsoft.ServiceFabric.Actors/Runtime/IActorStateProvider.cs
    startLine: 60
  assemblies:
  - Microsoft.ServiceFabric.Actors
  namespace: Microsoft.ServiceFabric.Actors.Runtime
  summary: "\nLoads the actor state associated with the specified state name.\n"
  example: []
  syntax:
    content: Task<T> LoadStateAsync<T>(ActorId actorId, string stateName, CancellationToken cancellationToken = null)
    content.vb: Function LoadStateAsync(Of T)(actorId As ActorId, stateName As String, cancellationToken As CancellationToken = Nothing) As Task(Of T)
    parameters:
    - id: actorId
      type: Microsoft.ServiceFabric.Actors.ActorId
      description: ID of the actor for which to load the state.
    - id: stateName
      type: System.String
      description: Name of the actor state to load.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The token to monitor for cancellation requests.
    typeParameters:
    - id: T
      description: Type of value of actor state associated with given state name.
    return:
      type: System.Threading.Tasks.Task{{T}}
      description: "\nA task that represents the asynchronous load operation. The value of TResult\nparameter contains value of actor state associated with given state name.\n"
  overload: Microsoft.ServiceFabric.Actors.Runtime.IActorStateProvider.LoadStateAsync*
  exceptions:
  - type: System.Collections.Generic.KeyNotFoundException
    commentId: T:System.Collections.Generic.KeyNotFoundException
    description: Actor state associated with specified state name does not exist.
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: The operation was canceled.
  nameWithType.vb: IActorStateProvider.LoadStateAsync(Of T)(ActorId, String, CancellationToken)
  fullName.vb: Microsoft.ServiceFabric.Actors.Runtime.IActorStateProvider.LoadStateAsync(Of T)(Microsoft.ServiceFabric.Actors.ActorId, System.String, System.Threading.CancellationToken)
  name.vb: LoadStateAsync(Of T)(ActorId, String, CancellationToken)
- uid: Microsoft.ServiceFabric.Actors.Runtime.IActorStateProvider.SaveStateAsync(Microsoft.ServiceFabric.Actors.ActorId,System.Collections.Generic.IReadOnlyCollection{Microsoft.ServiceFabric.Actors.Runtime.ActorStateChange},System.Threading.CancellationToken)
  commentId: M:Microsoft.ServiceFabric.Actors.Runtime.IActorStateProvider.SaveStateAsync(Microsoft.ServiceFabric.Actors.ActorId,System.Collections.Generic.IReadOnlyCollection{Microsoft.ServiceFabric.Actors.Runtime.ActorStateChange},System.Threading.CancellationToken)
  id: SaveStateAsync(Microsoft.ServiceFabric.Actors.ActorId,System.Collections.Generic.IReadOnlyCollection{Microsoft.ServiceFabric.Actors.Runtime.ActorStateChange},System.Threading.CancellationToken)
  parent: Microsoft.ServiceFabric.Actors.Runtime.IActorStateProvider
  langs:
  - csharp
  - vb
  name: SaveStateAsync(ActorId, IReadOnlyCollection<ActorStateChange>, CancellationToken)
  nameWithType: IActorStateProvider.SaveStateAsync(ActorId, IReadOnlyCollection<ActorStateChange>, CancellationToken)
  fullName: Microsoft.ServiceFabric.Actors.Runtime.IActorStateProvider.SaveStateAsync(Microsoft.ServiceFabric.Actors.ActorId, System.Collections.Generic.IReadOnlyCollection<Microsoft.ServiceFabric.Actors.Runtime.ActorStateChange>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Actors/Runtime/IActorStateProvider.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: SaveStateAsync
    path: src/prod/src/managed/Microsoft.ServiceFabric.Actors/Runtime/IActorStateProvider.cs
    startLine: 78
  assemblies:
  - Microsoft.ServiceFabric.Actors
  namespace: Microsoft.ServiceFabric.Actors.Runtime
  summary: "\nSaves the specified set of actor state changes atomically.\n"
  remarks: "\nThe collection of state changes should contain only one item for a given state name.\nThe save operation will fail on trying to add an actor state which already exists \nor update/remove an actor state which does not exist.\n"
  example: []
  syntax:
    content: Task SaveStateAsync(ActorId actorId, IReadOnlyCollection<ActorStateChange> stateChanges, CancellationToken cancellationToken = null)
    content.vb: Function SaveStateAsync(actorId As ActorId, stateChanges As IReadOnlyCollection(Of ActorStateChange), cancellationToken As CancellationToken = Nothing) As Task
    parameters:
    - id: actorId
      type: Microsoft.ServiceFabric.Actors.ActorId
      description: ID of the actor for which to save the state changes.
    - id: stateChanges
      type: System.Collections.Generic.IReadOnlyCollection{Microsoft.ServiceFabric.Actors.Runtime.ActorStateChange}
      description: Collection of state changes to save.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The token to monitor for cancellation requests.
    return:
      type: System.Threading.Tasks.Task
      description: A task that represents the asynchronous save operation.
  overload: Microsoft.ServiceFabric.Actors.Runtime.IActorStateProvider.SaveStateAsync*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\nWhen <xref href=\"Microsoft.ServiceFabric.Actors.Runtime.StateChangeKind\" data-throw-if-not-resolved=\"false\"></xref> is <xref href=\"Microsoft.ServiceFabric.Actors.Runtime.StateChangeKind.None\" data-throw-if-not-resolved=\"false\"></xref>\n"
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: The operation was canceled.
  nameWithType.vb: IActorStateProvider.SaveStateAsync(ActorId, IReadOnlyCollection(Of ActorStateChange), CancellationToken)
  fullName.vb: Microsoft.ServiceFabric.Actors.Runtime.IActorStateProvider.SaveStateAsync(Microsoft.ServiceFabric.Actors.ActorId, System.Collections.Generic.IReadOnlyCollection(Of Microsoft.ServiceFabric.Actors.Runtime.ActorStateChange), System.Threading.CancellationToken)
  name.vb: SaveStateAsync(ActorId, IReadOnlyCollection(Of ActorStateChange), CancellationToken)
- uid: Microsoft.ServiceFabric.Actors.Runtime.IActorStateProvider.ContainsStateAsync(Microsoft.ServiceFabric.Actors.ActorId,System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.ServiceFabric.Actors.Runtime.IActorStateProvider.ContainsStateAsync(Microsoft.ServiceFabric.Actors.ActorId,System.String,System.Threading.CancellationToken)
  id: ContainsStateAsync(Microsoft.ServiceFabric.Actors.ActorId,System.String,System.Threading.CancellationToken)
  parent: Microsoft.ServiceFabric.Actors.Runtime.IActorStateProvider
  langs:
  - csharp
  - vb
  name: ContainsStateAsync(ActorId, String, CancellationToken)
  nameWithType: IActorStateProvider.ContainsStateAsync(ActorId, String, CancellationToken)
  fullName: Microsoft.ServiceFabric.Actors.Runtime.IActorStateProvider.ContainsStateAsync(Microsoft.ServiceFabric.Actors.ActorId, System.String, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Actors/Runtime/IActorStateProvider.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: ContainsStateAsync
    path: src/prod/src/managed/Microsoft.ServiceFabric.Actors/Runtime/IActorStateProvider.cs
    startLine: 92
  assemblies:
  - Microsoft.ServiceFabric.Actors
  namespace: Microsoft.ServiceFabric.Actors.Runtime
  summary: "\nChecks whether actor state provider contains an actor state with \nspecified state name.\n"
  example: []
  syntax:
    content: Task<bool> ContainsStateAsync(ActorId actorId, string stateName, CancellationToken cancellationToken = null)
    content.vb: Function ContainsStateAsync(actorId As ActorId, stateName As String, cancellationToken As CancellationToken = Nothing) As Task(Of Boolean)
    parameters:
    - id: actorId
      type: Microsoft.ServiceFabric.Actors.ActorId
      description: ID of the actor for which to check state existence.
    - id: stateName
      type: System.String
      description: Name of the actor state to check for existence.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The token to monitor for cancellation requests.
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
      description: "\nA task that represents the asynchronous check operation. The value of TResult\nparameter is <code>true</code> if state with specified name exists otherwise <code>false</code>.\n"
  overload: Microsoft.ServiceFabric.Actors.Runtime.IActorStateProvider.ContainsStateAsync*
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: The operation was canceled.
- uid: Microsoft.ServiceFabric.Actors.Runtime.IActorStateProvider.RemoveActorAsync(Microsoft.ServiceFabric.Actors.ActorId,System.Threading.CancellationToken)
  commentId: M:Microsoft.ServiceFabric.Actors.Runtime.IActorStateProvider.RemoveActorAsync(Microsoft.ServiceFabric.Actors.ActorId,System.Threading.CancellationToken)
  id: RemoveActorAsync(Microsoft.ServiceFabric.Actors.ActorId,System.Threading.CancellationToken)
  parent: Microsoft.ServiceFabric.Actors.Runtime.IActorStateProvider
  langs:
  - csharp
  - vb
  name: RemoveActorAsync(ActorId, CancellationToken)
  nameWithType: IActorStateProvider.RemoveActorAsync(ActorId, CancellationToken)
  fullName: Microsoft.ServiceFabric.Actors.Runtime.IActorStateProvider.RemoveActorAsync(Microsoft.ServiceFabric.Actors.ActorId, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Actors/Runtime/IActorStateProvider.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: RemoveActorAsync
    path: src/prod/src/managed/Microsoft.ServiceFabric.Actors/Runtime/IActorStateProvider.cs
    startLine: 101
  assemblies:
  - Microsoft.ServiceFabric.Actors
  namespace: Microsoft.ServiceFabric.Actors.Runtime
  summary: "\nRemoves all the existing states and reminders associated with specified actor atomically.\n"
  example: []
  syntax:
    content: Task RemoveActorAsync(ActorId actorId, CancellationToken cancellationToken = null)
    content.vb: Function RemoveActorAsync(actorId As ActorId, cancellationToken As CancellationToken = Nothing) As Task
    parameters:
    - id: actorId
      type: Microsoft.ServiceFabric.Actors.ActorId
      description: ID of the actor for which to remove state.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The token to monitor for cancellation requests.
    return:
      type: System.Threading.Tasks.Task
      description: A task that represents the asynchronous remove operation.
  overload: Microsoft.ServiceFabric.Actors.Runtime.IActorStateProvider.RemoveActorAsync*
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: The operation was canceled.
- uid: Microsoft.ServiceFabric.Actors.Runtime.IActorStateProvider.EnumerateStateNamesAsync(Microsoft.ServiceFabric.Actors.ActorId,System.Threading.CancellationToken)
  commentId: M:Microsoft.ServiceFabric.Actors.Runtime.IActorStateProvider.EnumerateStateNamesAsync(Microsoft.ServiceFabric.Actors.ActorId,System.Threading.CancellationToken)
  id: EnumerateStateNamesAsync(Microsoft.ServiceFabric.Actors.ActorId,System.Threading.CancellationToken)
  parent: Microsoft.ServiceFabric.Actors.Runtime.IActorStateProvider
  langs:
  - csharp
  - vb
  name: EnumerateStateNamesAsync(ActorId, CancellationToken)
  nameWithType: IActorStateProvider.EnumerateStateNamesAsync(ActorId, CancellationToken)
  fullName: Microsoft.ServiceFabric.Actors.Runtime.IActorStateProvider.EnumerateStateNamesAsync(Microsoft.ServiceFabric.Actors.ActorId, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Actors/Runtime/IActorStateProvider.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: EnumerateStateNamesAsync
    path: src/prod/src/managed/Microsoft.ServiceFabric.Actors/Runtime/IActorStateProvider.cs
    startLine: 118
  assemblies:
  - Microsoft.ServiceFabric.Actors
  namespace: Microsoft.ServiceFabric.Actors.Runtime
  summary: "\nCreates an enumerable of all the state names associated with specified actor.\n"
  remarks: "\nThe enumerator returned from actor state provider is safe to use concurrently\nwith reads and writes to the state provider. It represents a snapshot consistent\nview of the state provider.\n"
  example: []
  syntax:
    content: Task<IEnumerable<string>> EnumerateStateNamesAsync(ActorId actorId, CancellationToken cancellationToken = null)
    content.vb: Function EnumerateStateNamesAsync(actorId As ActorId, cancellationToken As CancellationToken = Nothing) As Task(Of IEnumerable(Of String))
    parameters:
    - id: actorId
      type: Microsoft.ServiceFabric.Actors.ActorId
      description: ID of the actor for which to create enumerable.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The token to monitor for cancellation requests.
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{System.String}}
      description: "\nA task that represents the asynchronous enumeration operation. The value of TResult\nparameter is an enumerable of all state names associated with specified actor.\n"
  overload: Microsoft.ServiceFabric.Actors.Runtime.IActorStateProvider.EnumerateStateNamesAsync*
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: The operation was canceled.
- uid: Microsoft.ServiceFabric.Actors.Runtime.IActorStateProvider.GetActorsAsync(System.Int32,Microsoft.ServiceFabric.Actors.Query.ContinuationToken,System.Threading.CancellationToken)
  commentId: M:Microsoft.ServiceFabric.Actors.Runtime.IActorStateProvider.GetActorsAsync(System.Int32,Microsoft.ServiceFabric.Actors.Query.ContinuationToken,System.Threading.CancellationToken)
  id: GetActorsAsync(System.Int32,Microsoft.ServiceFabric.Actors.Query.ContinuationToken,System.Threading.CancellationToken)
  parent: Microsoft.ServiceFabric.Actors.Runtime.IActorStateProvider
  langs:
  - csharp
  - vb
  name: GetActorsAsync(Int32, ContinuationToken, CancellationToken)
  nameWithType: IActorStateProvider.GetActorsAsync(Int32, ContinuationToken, CancellationToken)
  fullName: Microsoft.ServiceFabric.Actors.Runtime.IActorStateProvider.GetActorsAsync(System.Int32, Microsoft.ServiceFabric.Actors.Query.ContinuationToken, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Actors/Runtime/IActorStateProvider.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: GetActorsAsync
    path: src/prod/src/managed/Microsoft.ServiceFabric.Actors/Runtime/IActorStateProvider.cs
    startLine: 138
  assemblies:
  - Microsoft.ServiceFabric.Actors
  namespace: Microsoft.ServiceFabric.Actors.Runtime
  summary: "\nGets ActorIds from the State Provider.\n"
  remarks: "\nThe <em>continuationToken</em> is relative to the state of actor state provider\nat the time of invocation of this API. If the state of actor state provider changes (i.e.\nnew actors are activated or existing actors are deleted) in between calls to this API and\nthe continuation token from previous call (before the state was modified) is supplied, the \nresult may contain entries that were already fetched in previous calls.\n"
  example: []
  syntax:
    content: Task<PagedResult<ActorId>> GetActorsAsync(int numItemsToReturn, ContinuationToken continuationToken, CancellationToken cancellationToken)
    content.vb: Function GetActorsAsync(numItemsToReturn As Integer, continuationToken As ContinuationToken, cancellationToken As CancellationToken) As Task(Of PagedResult(Of ActorId))
    parameters:
    - id: numItemsToReturn
      type: System.Int32
      description: Number of items requested to be returned.
    - id: continuationToken
      type: Microsoft.ServiceFabric.Actors.Query.ContinuationToken
      description: "\nA continuation token to start querying the results from.\nA null value of continuation token means start returning values form the beginning.\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The token to monitor for cancellation requests.
    return:
      type: System.Threading.Tasks.Task{Microsoft.ServiceFabric.Actors.Query.PagedResult{Microsoft.ServiceFabric.Actors.ActorId}}
      description: A task that represents the asynchronous operation of call to server.
  overload: Microsoft.ServiceFabric.Actors.Runtime.IActorStateProvider.GetActorsAsync*
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: The operation was canceled.
- uid: Microsoft.ServiceFabric.Actors.Runtime.IActorStateProvider.SaveReminderAsync(Microsoft.ServiceFabric.Actors.ActorId,Microsoft.ServiceFabric.Actors.Runtime.IActorReminder,System.Threading.CancellationToken)
  commentId: M:Microsoft.ServiceFabric.Actors.Runtime.IActorStateProvider.SaveReminderAsync(Microsoft.ServiceFabric.Actors.ActorId,Microsoft.ServiceFabric.Actors.Runtime.IActorReminder,System.Threading.CancellationToken)
  id: SaveReminderAsync(Microsoft.ServiceFabric.Actors.ActorId,Microsoft.ServiceFabric.Actors.Runtime.IActorReminder,System.Threading.CancellationToken)
  parent: Microsoft.ServiceFabric.Actors.Runtime.IActorStateProvider
  langs:
  - csharp
  - vb
  name: SaveReminderAsync(ActorId, IActorReminder, CancellationToken)
  nameWithType: IActorStateProvider.SaveReminderAsync(ActorId, IActorReminder, CancellationToken)
  fullName: Microsoft.ServiceFabric.Actors.Runtime.IActorStateProvider.SaveReminderAsync(Microsoft.ServiceFabric.Actors.ActorId, Microsoft.ServiceFabric.Actors.Runtime.IActorReminder, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Actors/Runtime/IActorStateProvider.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: SaveReminderAsync
    path: src/prod/src/managed/Microsoft.ServiceFabric.Actors/Runtime/IActorStateProvider.cs
    startLine: 150
  assemblies:
  - Microsoft.ServiceFabric.Actors
  namespace: Microsoft.ServiceFabric.Actors.Runtime
  summary: "\nSaves the specified actor reminder. If an actor reminder with\ngiven name does not exist, it adds the actor reminder otherwise\nexisting actor reminder with same name is updated. \n"
  example: []
  syntax:
    content: Task SaveReminderAsync(ActorId actorId, IActorReminder reminder, CancellationToken cancellationToken = null)
    content.vb: Function SaveReminderAsync(actorId As ActorId, reminder As IActorReminder, cancellationToken As CancellationToken = Nothing) As Task
    parameters:
    - id: actorId
      type: Microsoft.ServiceFabric.Actors.ActorId
      description: ID of the actor for which to save the reminder.
    - id: reminder
      type: Microsoft.ServiceFabric.Actors.Runtime.IActorReminder
      description: Actor reminder to save.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The token to monitor for cancellation requests.
    return:
      type: System.Threading.Tasks.Task
      description: A task that represents the asynchronous save operation.
  overload: Microsoft.ServiceFabric.Actors.Runtime.IActorStateProvider.SaveReminderAsync*
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: The operation was canceled.
- uid: Microsoft.ServiceFabric.Actors.Runtime.IActorStateProvider.DeleteReminderAsync(Microsoft.ServiceFabric.Actors.ActorId,System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.ServiceFabric.Actors.Runtime.IActorStateProvider.DeleteReminderAsync(Microsoft.ServiceFabric.Actors.ActorId,System.String,System.Threading.CancellationToken)
  id: DeleteReminderAsync(Microsoft.ServiceFabric.Actors.ActorId,System.String,System.Threading.CancellationToken)
  parent: Microsoft.ServiceFabric.Actors.Runtime.IActorStateProvider
  langs:
  - csharp
  - vb
  name: DeleteReminderAsync(ActorId, String, CancellationToken)
  nameWithType: IActorStateProvider.DeleteReminderAsync(ActorId, String, CancellationToken)
  fullName: Microsoft.ServiceFabric.Actors.Runtime.IActorStateProvider.DeleteReminderAsync(Microsoft.ServiceFabric.Actors.ActorId, System.String, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Actors/Runtime/IActorStateProvider.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: DeleteReminderAsync
    path: src/prod/src/managed/Microsoft.ServiceFabric.Actors/Runtime/IActorStateProvider.cs
    startLine: 160
  assemblies:
  - Microsoft.ServiceFabric.Actors
  namespace: Microsoft.ServiceFabric.Actors.Runtime
  summary: "\nDeletes the specified actor reminder if it exists.\n"
  example: []
  syntax:
    content: Task DeleteReminderAsync(ActorId actorId, string reminderName, CancellationToken cancellationToken = null)
    content.vb: Function DeleteReminderAsync(actorId As ActorId, reminderName As String, cancellationToken As CancellationToken = Nothing) As Task
    parameters:
    - id: actorId
      type: Microsoft.ServiceFabric.Actors.ActorId
      description: ID of the actor for which to delete the reminder.
    - id: reminderName
      type: System.String
      description: Name of the reminder to delete.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The token to monitor for cancellation requests.
    return:
      type: System.Threading.Tasks.Task
      description: A task that represents the asynchronous delete operation.
  overload: Microsoft.ServiceFabric.Actors.Runtime.IActorStateProvider.DeleteReminderAsync*
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: The operation was canceled.
- uid: Microsoft.ServiceFabric.Actors.Runtime.IActorStateProvider.LoadRemindersAsync(System.Threading.CancellationToken)
  commentId: M:Microsoft.ServiceFabric.Actors.Runtime.IActorStateProvider.LoadRemindersAsync(System.Threading.CancellationToken)
  id: LoadRemindersAsync(System.Threading.CancellationToken)
  parent: Microsoft.ServiceFabric.Actors.Runtime.IActorStateProvider
  langs:
  - csharp
  - vb
  name: LoadRemindersAsync(CancellationToken)
  nameWithType: IActorStateProvider.LoadRemindersAsync(CancellationToken)
  fullName: Microsoft.ServiceFabric.Actors.Runtime.IActorStateProvider.LoadRemindersAsync(System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Actors/Runtime/IActorStateProvider.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: LoadRemindersAsync
    path: src/prod/src/managed/Microsoft.ServiceFabric.Actors/Runtime/IActorStateProvider.cs
    startLine: 171
  assemblies:
  - Microsoft.ServiceFabric.Actors
  namespace: Microsoft.ServiceFabric.Actors.Runtime
  summary: "\nLoads all the reminders contained in the actor state provider.\n"
  example: []
  syntax:
    content: Task<IActorReminderCollection> LoadRemindersAsync(CancellationToken cancellationToken = null)
    content.vb: Function LoadRemindersAsync(cancellationToken As CancellationToken = Nothing) As Task(Of IActorReminderCollection)
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: Cancellation token for asynchronous load operation.
    return:
      type: System.Threading.Tasks.Task{Microsoft.ServiceFabric.Actors.Runtime.IActorReminderCollection}
      description: "\nA task that represents the asynchronous load operation. The value of TResult\nparameter is a collection of all actor reminders contained in the actor state provider.\n"
  overload: Microsoft.ServiceFabric.Actors.Runtime.IActorStateProvider.LoadRemindersAsync*
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: The operation was canceled.
references:
- uid: Microsoft.ServiceFabric.Actors.Runtime
  commentId: N:Microsoft.ServiceFabric.Actors.Runtime
  isExternal: false
  name: Microsoft.ServiceFabric.Actors.Runtime
  nameWithType: Microsoft.ServiceFabric.Actors.Runtime
  fullName: Microsoft.ServiceFabric.Actors.Runtime
- uid: Microsoft.ServiceFabric.Data.IStateProviderReplica.OnDataLossAsync
  commentId: P:Microsoft.ServiceFabric.Data.IStateProviderReplica.OnDataLossAsync
  parent: Microsoft.ServiceFabric.Data.IStateProviderReplica
  isExternal: false
  name: OnDataLossAsync
  nameWithType: IStateProviderReplica.OnDataLossAsync
  fullName: Microsoft.ServiceFabric.Data.IStateProviderReplica.OnDataLossAsync
- uid: Microsoft.ServiceFabric.Data.IStateProviderReplica.Initialize(System.Fabric.StatefulServiceInitializationParameters)
  commentId: M:Microsoft.ServiceFabric.Data.IStateProviderReplica.Initialize(System.Fabric.StatefulServiceInitializationParameters)
  parent: Microsoft.ServiceFabric.Data.IStateProviderReplica
  isExternal: false
  name: Initialize(StatefulServiceInitializationParameters)
  nameWithType: IStateProviderReplica.Initialize(StatefulServiceInitializationParameters)
  fullName: Microsoft.ServiceFabric.Data.IStateProviderReplica.Initialize(System.Fabric.StatefulServiceInitializationParameters)
  spec.csharp:
  - uid: Microsoft.ServiceFabric.Data.IStateProviderReplica.Initialize(System.Fabric.StatefulServiceInitializationParameters)
    name: Initialize
    nameWithType: IStateProviderReplica.Initialize
    fullName: Microsoft.ServiceFabric.Data.IStateProviderReplica.Initialize
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Fabric.StatefulServiceInitializationParameters
    name: StatefulServiceInitializationParameters
    nameWithType: StatefulServiceInitializationParameters
    fullName: System.Fabric.StatefulServiceInitializationParameters
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ServiceFabric.Data.IStateProviderReplica.Initialize(System.Fabric.StatefulServiceInitializationParameters)
    name: Initialize
    nameWithType: IStateProviderReplica.Initialize
    fullName: Microsoft.ServiceFabric.Data.IStateProviderReplica.Initialize
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Fabric.StatefulServiceInitializationParameters
    name: StatefulServiceInitializationParameters
    nameWithType: StatefulServiceInitializationParameters
    fullName: System.Fabric.StatefulServiceInitializationParameters
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceFabric.Data.IStateProviderReplica.OpenAsync(System.Fabric.ReplicaOpenMode,System.Fabric.IStatefulServicePartition,System.Threading.CancellationToken)
  commentId: M:Microsoft.ServiceFabric.Data.IStateProviderReplica.OpenAsync(System.Fabric.ReplicaOpenMode,System.Fabric.IStatefulServicePartition,System.Threading.CancellationToken)
  parent: Microsoft.ServiceFabric.Data.IStateProviderReplica
  isExternal: true
  name: OpenAsync(ReplicaOpenMode, IStatefulServicePartition, CancellationToken)
  nameWithType: IStateProviderReplica.OpenAsync(ReplicaOpenMode, IStatefulServicePartition, CancellationToken)
  fullName: Microsoft.ServiceFabric.Data.IStateProviderReplica.OpenAsync(System.Fabric.ReplicaOpenMode, System.Fabric.IStatefulServicePartition, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.ServiceFabric.Data.IStateProviderReplica.OpenAsync(System.Fabric.ReplicaOpenMode,System.Fabric.IStatefulServicePartition,System.Threading.CancellationToken)
    name: OpenAsync
    nameWithType: IStateProviderReplica.OpenAsync
    fullName: Microsoft.ServiceFabric.Data.IStateProviderReplica.OpenAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Fabric.ReplicaOpenMode
    name: ReplicaOpenMode
    nameWithType: ReplicaOpenMode
    fullName: System.Fabric.ReplicaOpenMode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Fabric.IStatefulServicePartition
    name: IStatefulServicePartition
    nameWithType: IStatefulServicePartition
    fullName: System.Fabric.IStatefulServicePartition
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ServiceFabric.Data.IStateProviderReplica.OpenAsync(System.Fabric.ReplicaOpenMode,System.Fabric.IStatefulServicePartition,System.Threading.CancellationToken)
    name: OpenAsync
    nameWithType: IStateProviderReplica.OpenAsync
    fullName: Microsoft.ServiceFabric.Data.IStateProviderReplica.OpenAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Fabric.ReplicaOpenMode
    name: ReplicaOpenMode
    nameWithType: ReplicaOpenMode
    fullName: System.Fabric.ReplicaOpenMode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Fabric.IStatefulServicePartition
    name: IStatefulServicePartition
    nameWithType: IStatefulServicePartition
    fullName: System.Fabric.IStatefulServicePartition
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceFabric.Data.IStateProviderReplica.ChangeRoleAsync(System.Fabric.ReplicaRole,System.Threading.CancellationToken)
  commentId: M:Microsoft.ServiceFabric.Data.IStateProviderReplica.ChangeRoleAsync(System.Fabric.ReplicaRole,System.Threading.CancellationToken)
  parent: Microsoft.ServiceFabric.Data.IStateProviderReplica
  isExternal: true
  name: ChangeRoleAsync(ReplicaRole, CancellationToken)
  nameWithType: IStateProviderReplica.ChangeRoleAsync(ReplicaRole, CancellationToken)
  fullName: Microsoft.ServiceFabric.Data.IStateProviderReplica.ChangeRoleAsync(System.Fabric.ReplicaRole, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.ServiceFabric.Data.IStateProviderReplica.ChangeRoleAsync(System.Fabric.ReplicaRole,System.Threading.CancellationToken)
    name: ChangeRoleAsync
    nameWithType: IStateProviderReplica.ChangeRoleAsync
    fullName: Microsoft.ServiceFabric.Data.IStateProviderReplica.ChangeRoleAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Fabric.ReplicaRole
    name: ReplicaRole
    nameWithType: ReplicaRole
    fullName: System.Fabric.ReplicaRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ServiceFabric.Data.IStateProviderReplica.ChangeRoleAsync(System.Fabric.ReplicaRole,System.Threading.CancellationToken)
    name: ChangeRoleAsync
    nameWithType: IStateProviderReplica.ChangeRoleAsync
    fullName: Microsoft.ServiceFabric.Data.IStateProviderReplica.ChangeRoleAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Fabric.ReplicaRole
    name: ReplicaRole
    nameWithType: ReplicaRole
    fullName: System.Fabric.ReplicaRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceFabric.Data.IStateProviderReplica.CloseAsync(System.Threading.CancellationToken)
  commentId: M:Microsoft.ServiceFabric.Data.IStateProviderReplica.CloseAsync(System.Threading.CancellationToken)
  parent: Microsoft.ServiceFabric.Data.IStateProviderReplica
  isExternal: true
  name: CloseAsync(CancellationToken)
  nameWithType: IStateProviderReplica.CloseAsync(CancellationToken)
  fullName: Microsoft.ServiceFabric.Data.IStateProviderReplica.CloseAsync(System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.ServiceFabric.Data.IStateProviderReplica.CloseAsync(System.Threading.CancellationToken)
    name: CloseAsync
    nameWithType: IStateProviderReplica.CloseAsync
    fullName: Microsoft.ServiceFabric.Data.IStateProviderReplica.CloseAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ServiceFabric.Data.IStateProviderReplica.CloseAsync(System.Threading.CancellationToken)
    name: CloseAsync
    nameWithType: IStateProviderReplica.CloseAsync
    fullName: Microsoft.ServiceFabric.Data.IStateProviderReplica.CloseAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceFabric.Data.IStateProviderReplica.Abort
  commentId: M:Microsoft.ServiceFabric.Data.IStateProviderReplica.Abort
  parent: Microsoft.ServiceFabric.Data.IStateProviderReplica
  isExternal: false
  name: Abort()
  nameWithType: IStateProviderReplica.Abort()
  fullName: Microsoft.ServiceFabric.Data.IStateProviderReplica.Abort()
  spec.csharp:
  - uid: Microsoft.ServiceFabric.Data.IStateProviderReplica.Abort
    name: Abort
    nameWithType: IStateProviderReplica.Abort
    fullName: Microsoft.ServiceFabric.Data.IStateProviderReplica.Abort
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ServiceFabric.Data.IStateProviderReplica.Abort
    name: Abort
    nameWithType: IStateProviderReplica.Abort
    fullName: Microsoft.ServiceFabric.Data.IStateProviderReplica.Abort
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceFabric.Data.IStateProviderReplica.BackupAsync(System.Func{Microsoft.ServiceFabric.Data.BackupInfo,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}})
  commentId: M:Microsoft.ServiceFabric.Data.IStateProviderReplica.BackupAsync(System.Func{Microsoft.ServiceFabric.Data.BackupInfo,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}})
  parent: Microsoft.ServiceFabric.Data.IStateProviderReplica
  isExternal: true
  name: BackupAsync(Func<BackupInfo, CancellationToken, Task<Boolean>>)
  nameWithType: IStateProviderReplica.BackupAsync(Func<BackupInfo, CancellationToken, Task<Boolean>>)
  fullName: Microsoft.ServiceFabric.Data.IStateProviderReplica.BackupAsync(System.Func<Microsoft.ServiceFabric.Data.BackupInfo, System.Threading.CancellationToken, System.Threading.Tasks.Task<System.Boolean>>)
  nameWithType.vb: IStateProviderReplica.BackupAsync(Func(Of BackupInfo, CancellationToken, Task(Of Boolean)))
  fullname.vb: Microsoft.ServiceFabric.Data.IStateProviderReplica.BackupAsync(System.Func(Of Microsoft.ServiceFabric.Data.BackupInfo, System.Threading.CancellationToken, System.Threading.Tasks.Task(Of System.Boolean)))
  name.vb: BackupAsync(Func(Of BackupInfo, CancellationToken, Task(Of Boolean)))
  spec.csharp:
  - uid: Microsoft.ServiceFabric.Data.IStateProviderReplica.BackupAsync(System.Func{Microsoft.ServiceFabric.Data.BackupInfo,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}})
    name: BackupAsync
    nameWithType: IStateProviderReplica.BackupAsync
    fullName: Microsoft.ServiceFabric.Data.IStateProviderReplica.BackupAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.ServiceFabric.Data.BackupInfo
    name: BackupInfo
    nameWithType: BackupInfo
    fullName: Microsoft.ServiceFabric.Data.BackupInfo
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ServiceFabric.Data.IStateProviderReplica.BackupAsync(System.Func{Microsoft.ServiceFabric.Data.BackupInfo,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}})
    name: BackupAsync
    nameWithType: IStateProviderReplica.BackupAsync
    fullName: Microsoft.ServiceFabric.Data.IStateProviderReplica.BackupAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.ServiceFabric.Data.BackupInfo
    name: BackupInfo
    nameWithType: BackupInfo
    fullName: Microsoft.ServiceFabric.Data.BackupInfo
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceFabric.Data.IStateProviderReplica.BackupAsync(Microsoft.ServiceFabric.Data.BackupOption,System.TimeSpan,System.Threading.CancellationToken,System.Func{Microsoft.ServiceFabric.Data.BackupInfo,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}})
  commentId: M:Microsoft.ServiceFabric.Data.IStateProviderReplica.BackupAsync(Microsoft.ServiceFabric.Data.BackupOption,System.TimeSpan,System.Threading.CancellationToken,System.Func{Microsoft.ServiceFabric.Data.BackupInfo,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}})
  parent: Microsoft.ServiceFabric.Data.IStateProviderReplica
  isExternal: true
  name: BackupAsync(BackupOption, TimeSpan, CancellationToken, Func<BackupInfo, CancellationToken, Task<Boolean>>)
  nameWithType: IStateProviderReplica.BackupAsync(BackupOption, TimeSpan, CancellationToken, Func<BackupInfo, CancellationToken, Task<Boolean>>)
  fullName: Microsoft.ServiceFabric.Data.IStateProviderReplica.BackupAsync(Microsoft.ServiceFabric.Data.BackupOption, System.TimeSpan, System.Threading.CancellationToken, System.Func<Microsoft.ServiceFabric.Data.BackupInfo, System.Threading.CancellationToken, System.Threading.Tasks.Task<System.Boolean>>)
  nameWithType.vb: IStateProviderReplica.BackupAsync(BackupOption, TimeSpan, CancellationToken, Func(Of BackupInfo, CancellationToken, Task(Of Boolean)))
  fullname.vb: Microsoft.ServiceFabric.Data.IStateProviderReplica.BackupAsync(Microsoft.ServiceFabric.Data.BackupOption, System.TimeSpan, System.Threading.CancellationToken, System.Func(Of Microsoft.ServiceFabric.Data.BackupInfo, System.Threading.CancellationToken, System.Threading.Tasks.Task(Of System.Boolean)))
  name.vb: BackupAsync(BackupOption, TimeSpan, CancellationToken, Func(Of BackupInfo, CancellationToken, Task(Of Boolean)))
  spec.csharp:
  - uid: Microsoft.ServiceFabric.Data.IStateProviderReplica.BackupAsync(Microsoft.ServiceFabric.Data.BackupOption,System.TimeSpan,System.Threading.CancellationToken,System.Func{Microsoft.ServiceFabric.Data.BackupInfo,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}})
    name: BackupAsync
    nameWithType: IStateProviderReplica.BackupAsync
    fullName: Microsoft.ServiceFabric.Data.IStateProviderReplica.BackupAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.ServiceFabric.Data.BackupOption
    name: BackupOption
    nameWithType: BackupOption
    fullName: Microsoft.ServiceFabric.Data.BackupOption
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.ServiceFabric.Data.BackupInfo
    name: BackupInfo
    nameWithType: BackupInfo
    fullName: Microsoft.ServiceFabric.Data.BackupInfo
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ServiceFabric.Data.IStateProviderReplica.BackupAsync(Microsoft.ServiceFabric.Data.BackupOption,System.TimeSpan,System.Threading.CancellationToken,System.Func{Microsoft.ServiceFabric.Data.BackupInfo,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}})
    name: BackupAsync
    nameWithType: IStateProviderReplica.BackupAsync
    fullName: Microsoft.ServiceFabric.Data.IStateProviderReplica.BackupAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.ServiceFabric.Data.BackupOption
    name: BackupOption
    nameWithType: BackupOption
    fullName: Microsoft.ServiceFabric.Data.BackupOption
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.ServiceFabric.Data.BackupInfo
    name: BackupInfo
    nameWithType: BackupInfo
    fullName: Microsoft.ServiceFabric.Data.BackupInfo
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceFabric.Data.IStateProviderReplica.RestoreAsync(System.String)
  commentId: M:Microsoft.ServiceFabric.Data.IStateProviderReplica.RestoreAsync(System.String)
  parent: Microsoft.ServiceFabric.Data.IStateProviderReplica
  isExternal: true
  name: RestoreAsync(String)
  nameWithType: IStateProviderReplica.RestoreAsync(String)
  fullName: Microsoft.ServiceFabric.Data.IStateProviderReplica.RestoreAsync(System.String)
  spec.csharp:
  - uid: Microsoft.ServiceFabric.Data.IStateProviderReplica.RestoreAsync(System.String)
    name: RestoreAsync
    nameWithType: IStateProviderReplica.RestoreAsync
    fullName: Microsoft.ServiceFabric.Data.IStateProviderReplica.RestoreAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ServiceFabric.Data.IStateProviderReplica.RestoreAsync(System.String)
    name: RestoreAsync
    nameWithType: IStateProviderReplica.RestoreAsync
    fullName: Microsoft.ServiceFabric.Data.IStateProviderReplica.RestoreAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceFabric.Data.IStateProviderReplica.RestoreAsync(System.String,Microsoft.ServiceFabric.Data.RestorePolicy,System.Threading.CancellationToken)
  commentId: M:Microsoft.ServiceFabric.Data.IStateProviderReplica.RestoreAsync(System.String,Microsoft.ServiceFabric.Data.RestorePolicy,System.Threading.CancellationToken)
  parent: Microsoft.ServiceFabric.Data.IStateProviderReplica
  isExternal: true
  name: RestoreAsync(String, RestorePolicy, CancellationToken)
  nameWithType: IStateProviderReplica.RestoreAsync(String, RestorePolicy, CancellationToken)
  fullName: Microsoft.ServiceFabric.Data.IStateProviderReplica.RestoreAsync(System.String, Microsoft.ServiceFabric.Data.RestorePolicy, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.ServiceFabric.Data.IStateProviderReplica.RestoreAsync(System.String,Microsoft.ServiceFabric.Data.RestorePolicy,System.Threading.CancellationToken)
    name: RestoreAsync
    nameWithType: IStateProviderReplica.RestoreAsync
    fullName: Microsoft.ServiceFabric.Data.IStateProviderReplica.RestoreAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.ServiceFabric.Data.RestorePolicy
    name: RestorePolicy
    nameWithType: RestorePolicy
    fullName: Microsoft.ServiceFabric.Data.RestorePolicy
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ServiceFabric.Data.IStateProviderReplica.RestoreAsync(System.String,Microsoft.ServiceFabric.Data.RestorePolicy,System.Threading.CancellationToken)
    name: RestoreAsync
    nameWithType: IStateProviderReplica.RestoreAsync
    fullName: Microsoft.ServiceFabric.Data.IStateProviderReplica.RestoreAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.ServiceFabric.Data.RestorePolicy
    name: RestorePolicy
    nameWithType: RestorePolicy
    fullName: Microsoft.ServiceFabric.Data.RestorePolicy
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceFabric.Actors.Runtime.IActorStateProvider.System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
  commentId: M:System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  parent: System.Fabric.Messaging.Stream.ByteArraySerializer
  definition: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  name: Serialize<IActorStateProvider>()
  nameWithType: ByteArraySerializer.Serialize<IActorStateProvider>()
  fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<Microsoft.ServiceFabric.Actors.Runtime.IActorStateProvider>()
  nameWithType.vb: ByteArraySerializer.Serialize(Of IActorStateProvider)()
  fullname.vb: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of Microsoft.ServiceFabric.Actors.Runtime.IActorStateProvider)()
  name.vb: Serialize(Of IActorStateProvider)()
  spec.csharp:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
    name: Serialize<IActorStateProvider>
    nameWithType: ByteArraySerializer.Serialize<IActorStateProvider>
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<Microsoft.ServiceFabric.Actors.Runtime.IActorStateProvider>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
    name: Serialize(Of IActorStateProvider)
    nameWithType: ByteArraySerializer.Serialize(Of IActorStateProvider)
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of Microsoft.ServiceFabric.Actors.Runtime.IActorStateProvider)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceFabric.Data.IStateProviderReplica
  commentId: T:Microsoft.ServiceFabric.Data.IStateProviderReplica
  parent: Microsoft.ServiceFabric.Data
  isExternal: false
  name: IStateProviderReplica
  nameWithType: IStateProviderReplica
  fullName: Microsoft.ServiceFabric.Data.IStateProviderReplica
- uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  commentId: M:System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  isExternal: false
  name: Serialize<T>(T)
  nameWithType: ByteArraySerializer.Serialize<T>(T)
  fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<T>(T)
  nameWithType.vb: ByteArraySerializer.Serialize(Of T)(T)
  fullname.vb: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of T)(T)
  name.vb: Serialize(Of T)(T)
  spec.csharp:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
    name: Serialize<T>
    nameWithType: ByteArraySerializer.Serialize<T>
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
    name: Serialize(Of T)
    nameWithType: ByteArraySerializer.Serialize(Of T)
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.Messaging.Stream.ByteArraySerializer
  commentId: T:System.Fabric.Messaging.Stream.ByteArraySerializer
  parent: System.Fabric.Messaging.Stream
  isExternal: false
  name: ByteArraySerializer
  nameWithType: ByteArraySerializer
  fullName: System.Fabric.Messaging.Stream.ByteArraySerializer
- uid: Microsoft.ServiceFabric.Data
  commentId: N:Microsoft.ServiceFabric.Data
  isExternal: false
  name: Microsoft.ServiceFabric.Data
  nameWithType: Microsoft.ServiceFabric.Data
  fullName: Microsoft.ServiceFabric.Data
- uid: System.Fabric.Messaging.Stream
  commentId: N:System.Fabric.Messaging.Stream
  isExternal: false
  name: System.Fabric.Messaging.Stream
  nameWithType: System.Fabric.Messaging.Stream
  fullName: System.Fabric.Messaging.Stream
- uid: Microsoft.ServiceFabric.Actors.Runtime.IActorStateProvider.Initialize*
  commentId: Overload:Microsoft.ServiceFabric.Actors.Runtime.IActorStateProvider.Initialize
  isExternal: false
  name: Initialize
  nameWithType: IActorStateProvider.Initialize
  fullName: Microsoft.ServiceFabric.Actors.Runtime.IActorStateProvider.Initialize
- uid: Microsoft.ServiceFabric.Actors.Runtime.ActorTypeInformation
  commentId: T:Microsoft.ServiceFabric.Actors.Runtime.ActorTypeInformation
  parent: Microsoft.ServiceFabric.Actors.Runtime
  isExternal: false
  name: ActorTypeInformation
  nameWithType: ActorTypeInformation
  fullName: Microsoft.ServiceFabric.Actors.Runtime.ActorTypeInformation
- uid: Microsoft.ServiceFabric.Actors.Runtime.IActorStateProvider.ActorActivatedAsync*
  commentId: Overload:Microsoft.ServiceFabric.Actors.Runtime.IActorStateProvider.ActorActivatedAsync
  isExternal: false
  name: ActorActivatedAsync
  nameWithType: IActorStateProvider.ActorActivatedAsync
  fullName: Microsoft.ServiceFabric.Actors.Runtime.IActorStateProvider.ActorActivatedAsync
- uid: System.OperationCanceledException
  commentId: T:System.OperationCanceledException
- uid: Microsoft.ServiceFabric.Actors.ActorId
  commentId: T:Microsoft.ServiceFabric.Actors.ActorId
  parent: Microsoft.ServiceFabric.Actors
  isExternal: false
  name: ActorId
  nameWithType: ActorId
  fullName: Microsoft.ServiceFabric.Actors.ActorId
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: Microsoft.ServiceFabric.Actors
  commentId: N:Microsoft.ServiceFabric.Actors
  isExternal: false
  name: Microsoft.ServiceFabric.Actors
  nameWithType: Microsoft.ServiceFabric.Actors
  fullName: Microsoft.ServiceFabric.Actors
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: false
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: Microsoft.ServiceFabric.Actors.Runtime.IRemindable.ReceiveReminderAsync(System.String,System.Byte[],System.TimeSpan,System.TimeSpan)
  commentId: M:Microsoft.ServiceFabric.Actors.Runtime.IRemindable.ReceiveReminderAsync(System.String,System.Byte[],System.TimeSpan,System.TimeSpan)
- uid: Microsoft.ServiceFabric.Actors.Runtime.IActorStateProvider.ReminderCallbackCompletedAsync*
  commentId: Overload:Microsoft.ServiceFabric.Actors.Runtime.IActorStateProvider.ReminderCallbackCompletedAsync
  isExternal: false
  name: ReminderCallbackCompletedAsync
  nameWithType: IActorStateProvider.ReminderCallbackCompletedAsync
  fullName: Microsoft.ServiceFabric.Actors.Runtime.IActorStateProvider.ReminderCallbackCompletedAsync
- uid: Microsoft.ServiceFabric.Actors.Runtime.IActorReminder
  commentId: T:Microsoft.ServiceFabric.Actors.Runtime.IActorReminder
  parent: Microsoft.ServiceFabric.Actors.Runtime
  isExternal: false
  name: IActorReminder
  nameWithType: IActorReminder
  fullName: Microsoft.ServiceFabric.Actors.Runtime.IActorReminder
- uid: Microsoft.ServiceFabric.Actors.Runtime.IActorStateProvider.LoadStateAsync*
  commentId: Overload:Microsoft.ServiceFabric.Actors.Runtime.IActorStateProvider.LoadStateAsync
  isExternal: false
  name: LoadStateAsync<T>
  nameWithType: IActorStateProvider.LoadStateAsync<T>
  fullName: Microsoft.ServiceFabric.Actors.Runtime.IActorStateProvider.LoadStateAsync<T>
  nameWithType.vb: IActorStateProvider.LoadStateAsync(Of T)
  fullname.vb: Microsoft.ServiceFabric.Actors.Runtime.IActorStateProvider.LoadStateAsync(Of T)
  name.vb: LoadStateAsync(Of T)
- uid: System.Collections.Generic.KeyNotFoundException
  commentId: T:System.Collections.Generic.KeyNotFoundException
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Threading.Tasks.Task{{T}}
  commentId: T:System.Threading.Tasks.Task{``0}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<T>
  nameWithType: Task<T>
  fullName: System.Threading.Tasks.Task<T>
  nameWithType.vb: Task(Of T)
  fullname.vb: System.Threading.Tasks.Task(Of T)
  name.vb: Task(Of T)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullname.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceFabric.Actors.Runtime.StateChangeKind
  commentId: T:Microsoft.ServiceFabric.Actors.Runtime.StateChangeKind
  parent: Microsoft.ServiceFabric.Actors.Runtime
  isExternal: false
  name: StateChangeKind
  nameWithType: StateChangeKind
  fullName: Microsoft.ServiceFabric.Actors.Runtime.StateChangeKind
- uid: Microsoft.ServiceFabric.Actors.Runtime.StateChangeKind.None
  commentId: F:Microsoft.ServiceFabric.Actors.Runtime.StateChangeKind.None
- uid: Microsoft.ServiceFabric.Actors.Runtime.IActorStateProvider.SaveStateAsync*
  commentId: Overload:Microsoft.ServiceFabric.Actors.Runtime.IActorStateProvider.SaveStateAsync
  isExternal: false
  name: SaveStateAsync
  nameWithType: IActorStateProvider.SaveStateAsync
  fullName: Microsoft.ServiceFabric.Actors.Runtime.IActorStateProvider.SaveStateAsync
- uid: System.InvalidOperationException
  commentId: T:System.InvalidOperationException
  parent: System
  isExternal: true
  name: InvalidOperationException
  nameWithType: InvalidOperationException
  fullName: System.InvalidOperationException
- uid: System.Collections.Generic.IReadOnlyCollection{Microsoft.ServiceFabric.Actors.Runtime.ActorStateChange}
  commentId: T:System.Collections.Generic.IReadOnlyCollection{Microsoft.ServiceFabric.Actors.Runtime.ActorStateChange}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyCollection`1
  name: IReadOnlyCollection<ActorStateChange>
  nameWithType: IReadOnlyCollection<ActorStateChange>
  fullName: System.Collections.Generic.IReadOnlyCollection<Microsoft.ServiceFabric.Actors.Runtime.ActorStateChange>
  nameWithType.vb: IReadOnlyCollection(Of ActorStateChange)
  fullname.vb: System.Collections.Generic.IReadOnlyCollection(Of Microsoft.ServiceFabric.Actors.Runtime.ActorStateChange)
  name.vb: IReadOnlyCollection(Of ActorStateChange)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.ServiceFabric.Actors.Runtime.ActorStateChange
    name: ActorStateChange
    nameWithType: ActorStateChange
    fullName: Microsoft.ServiceFabric.Actors.Runtime.ActorStateChange
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.ServiceFabric.Actors.Runtime.ActorStateChange
    name: ActorStateChange
    nameWithType: ActorStateChange
    fullName: Microsoft.ServiceFabric.Actors.Runtime.ActorStateChange
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyCollection`1
  commentId: T:System.Collections.Generic.IReadOnlyCollection`1
  isExternal: true
  name: IReadOnlyCollection<T>
  nameWithType: IReadOnlyCollection<T>
  fullName: System.Collections.Generic.IReadOnlyCollection<T>
  nameWithType.vb: IReadOnlyCollection(Of T)
  fullname.vb: System.Collections.Generic.IReadOnlyCollection(Of T)
  name.vb: IReadOnlyCollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Microsoft.ServiceFabric.Actors.Runtime.IActorStateProvider.ContainsStateAsync*
  commentId: Overload:Microsoft.ServiceFabric.Actors.Runtime.IActorStateProvider.ContainsStateAsync
  isExternal: false
  name: ContainsStateAsync
  nameWithType: IActorStateProvider.ContainsStateAsync
  fullName: Microsoft.ServiceFabric.Actors.Runtime.IActorStateProvider.ContainsStateAsync
- uid: System.Threading.Tasks.Task{System.Boolean}
  commentId: T:System.Threading.Tasks.Task{System.Boolean}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Boolean>
  nameWithType: Task<Boolean>
  fullName: System.Threading.Tasks.Task<System.Boolean>
  nameWithType.vb: Task(Of Boolean)
  fullname.vb: System.Threading.Tasks.Task(Of System.Boolean)
  name.vb: Task(Of Boolean)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceFabric.Actors.Runtime.IActorStateProvider.RemoveActorAsync*
  commentId: Overload:Microsoft.ServiceFabric.Actors.Runtime.IActorStateProvider.RemoveActorAsync
  isExternal: false
  name: RemoveActorAsync
  nameWithType: IActorStateProvider.RemoveActorAsync
  fullName: Microsoft.ServiceFabric.Actors.Runtime.IActorStateProvider.RemoveActorAsync
- uid: Microsoft.ServiceFabric.Actors.Runtime.IActorStateProvider.EnumerateStateNamesAsync*
  commentId: Overload:Microsoft.ServiceFabric.Actors.Runtime.IActorStateProvider.EnumerateStateNamesAsync
  isExternal: false
  name: EnumerateStateNamesAsync
  nameWithType: IActorStateProvider.EnumerateStateNamesAsync
  fullName: Microsoft.ServiceFabric.Actors.Runtime.IActorStateProvider.EnumerateStateNamesAsync
- uid: System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{System.String}}
  commentId: T:System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{System.String}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<IEnumerable<String>>
  nameWithType: Task<IEnumerable<String>>
  fullName: System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<System.String>>
  nameWithType.vb: Task(Of IEnumerable(Of String))
  fullname.vb: System.Threading.Tasks.Task(Of System.Collections.Generic.IEnumerable(Of System.String))
  name.vb: Task(Of IEnumerable(Of String))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceFabric.Actors.Runtime.IActorStateProvider.GetActorsAsync*
  commentId: Overload:Microsoft.ServiceFabric.Actors.Runtime.IActorStateProvider.GetActorsAsync
  isExternal: false
  name: GetActorsAsync
  nameWithType: IActorStateProvider.GetActorsAsync
  fullName: Microsoft.ServiceFabric.Actors.Runtime.IActorStateProvider.GetActorsAsync
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Microsoft.ServiceFabric.Actors.Query.ContinuationToken
  commentId: T:Microsoft.ServiceFabric.Actors.Query.ContinuationToken
  parent: Microsoft.ServiceFabric.Actors.Query
  isExternal: false
  name: ContinuationToken
  nameWithType: ContinuationToken
  fullName: Microsoft.ServiceFabric.Actors.Query.ContinuationToken
- uid: System.Threading.Tasks.Task{Microsoft.ServiceFabric.Actors.Query.PagedResult{Microsoft.ServiceFabric.Actors.ActorId}}
  commentId: T:System.Threading.Tasks.Task{Microsoft.ServiceFabric.Actors.Query.PagedResult{Microsoft.ServiceFabric.Actors.ActorId}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<PagedResult<ActorId>>
  nameWithType: Task<PagedResult<ActorId>>
  fullName: System.Threading.Tasks.Task<Microsoft.ServiceFabric.Actors.Query.PagedResult<Microsoft.ServiceFabric.Actors.ActorId>>
  nameWithType.vb: Task(Of PagedResult(Of ActorId))
  fullname.vb: System.Threading.Tasks.Task(Of Microsoft.ServiceFabric.Actors.Query.PagedResult(Of Microsoft.ServiceFabric.Actors.ActorId))
  name.vb: Task(Of PagedResult(Of ActorId))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.ServiceFabric.Actors.Query.PagedResult`1
    name: PagedResult
    nameWithType: PagedResult
    fullName: Microsoft.ServiceFabric.Actors.Query.PagedResult
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.ServiceFabric.Actors.ActorId
    name: ActorId
    nameWithType: ActorId
    fullName: Microsoft.ServiceFabric.Actors.ActorId
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.ServiceFabric.Actors.Query.PagedResult`1
    name: PagedResult
    nameWithType: PagedResult
    fullName: Microsoft.ServiceFabric.Actors.Query.PagedResult
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.ServiceFabric.Actors.ActorId
    name: ActorId
    nameWithType: ActorId
    fullName: Microsoft.ServiceFabric.Actors.ActorId
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceFabric.Actors.Query
  commentId: N:Microsoft.ServiceFabric.Actors.Query
  isExternal: false
  name: Microsoft.ServiceFabric.Actors.Query
  nameWithType: Microsoft.ServiceFabric.Actors.Query
  fullName: Microsoft.ServiceFabric.Actors.Query
- uid: Microsoft.ServiceFabric.Actors.Runtime.IActorStateProvider.SaveReminderAsync*
  commentId: Overload:Microsoft.ServiceFabric.Actors.Runtime.IActorStateProvider.SaveReminderAsync
  isExternal: false
  name: SaveReminderAsync
  nameWithType: IActorStateProvider.SaveReminderAsync
  fullName: Microsoft.ServiceFabric.Actors.Runtime.IActorStateProvider.SaveReminderAsync
- uid: Microsoft.ServiceFabric.Actors.Runtime.IActorStateProvider.DeleteReminderAsync*
  commentId: Overload:Microsoft.ServiceFabric.Actors.Runtime.IActorStateProvider.DeleteReminderAsync
  isExternal: false
  name: DeleteReminderAsync
  nameWithType: IActorStateProvider.DeleteReminderAsync
  fullName: Microsoft.ServiceFabric.Actors.Runtime.IActorStateProvider.DeleteReminderAsync
- uid: Microsoft.ServiceFabric.Actors.Runtime.IActorStateProvider.LoadRemindersAsync*
  commentId: Overload:Microsoft.ServiceFabric.Actors.Runtime.IActorStateProvider.LoadRemindersAsync
  isExternal: false
  name: LoadRemindersAsync
  nameWithType: IActorStateProvider.LoadRemindersAsync
  fullName: Microsoft.ServiceFabric.Actors.Runtime.IActorStateProvider.LoadRemindersAsync
- uid: System.Threading.Tasks.Task{Microsoft.ServiceFabric.Actors.Runtime.IActorReminderCollection}
  commentId: T:System.Threading.Tasks.Task{Microsoft.ServiceFabric.Actors.Runtime.IActorReminderCollection}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<IActorReminderCollection>
  nameWithType: Task<IActorReminderCollection>
  fullName: System.Threading.Tasks.Task<Microsoft.ServiceFabric.Actors.Runtime.IActorReminderCollection>
  nameWithType.vb: Task(Of IActorReminderCollection)
  fullname.vb: System.Threading.Tasks.Task(Of Microsoft.ServiceFabric.Actors.Runtime.IActorReminderCollection)
  name.vb: Task(Of IActorReminderCollection)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.ServiceFabric.Actors.Runtime.IActorReminderCollection
    name: IActorReminderCollection
    nameWithType: IActorReminderCollection
    fullName: Microsoft.ServiceFabric.Actors.Runtime.IActorReminderCollection
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.ServiceFabric.Actors.Runtime.IActorReminderCollection
    name: IActorReminderCollection
    nameWithType: IActorReminderCollection
    fullName: Microsoft.ServiceFabric.Actors.Runtime.IActorReminderCollection
  - name: )
    nameWithType: )
    fullName: )
