### YamlMime:ManagedReference
items:
- uid: System.Fabric.Health.ClusterHealthPolicy
  commentId: T:System.Fabric.Health.ClusterHealthPolicy
  id: ClusterHealthPolicy
  parent: System.Fabric.Health
  children:
  - System.Fabric.Health.ClusterHealthPolicy.#ctor
  - System.Fabric.Health.ClusterHealthPolicy.ApplicationTypeHealthPolicyMap
  - System.Fabric.Health.ClusterHealthPolicy.ConsiderWarningAsError
  - System.Fabric.Health.ClusterHealthPolicy.MaxPercentUnhealthyApplications
  - System.Fabric.Health.ClusterHealthPolicy.MaxPercentUnhealthyNodes
  - System.Fabric.Health.ClusterHealthPolicy.ToString
  langs:
  - csharp
  - vb
  name: ClusterHealthPolicy
  nameWithType: ClusterHealthPolicy
  fullName: System.Fabric.Health.ClusterHealthPolicy
  type: Class
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/Health/ClusterHealthPolicy.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: ClusterHealthPolicy
    path: src/prod/src/managed/Api/src/System/Fabric/Health/ClusterHealthPolicy.cs
    startLine: 14
  assemblies:
  - System.Fabric
  namespace: System.Fabric.Health
  summary: "\n<p>Defines a health policy used to evaluate the health of the cluster or of a cluster node.</p>\n"
  example: []
  syntax:
    content: public class ClusterHealthPolicy
    content.vb: Public Class ClusterHealthPolicy
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  extensionMethods:
  - System.Fabric.Health.ClusterHealthPolicy.System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: System.Fabric.Health.ClusterHealthPolicy.#ctor
  commentId: M:System.Fabric.Health.ClusterHealthPolicy.#ctor
  id: '#ctor'
  parent: System.Fabric.Health.ClusterHealthPolicy
  langs:
  - csharp
  - vb
  name: ClusterHealthPolicy()
  nameWithType: ClusterHealthPolicy.ClusterHealthPolicy()
  fullName: System.Fabric.Health.ClusterHealthPolicy.ClusterHealthPolicy()
  type: Constructor
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/Health/ClusterHealthPolicy.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: .ctor
    path: src/prod/src/managed/Api/src/System/Fabric/Health/ClusterHealthPolicy.cs
    startLine: 27
  assemblies:
  - System.Fabric
  namespace: System.Fabric.Health
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Fabric.Health.ClusterHealthPolicy\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  remarks: By default, no errors or warnings are tolerated.
  example: []
  syntax:
    content: public ClusterHealthPolicy()
    content.vb: Public Sub New
  overload: System.Fabric.Health.ClusterHealthPolicy.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.Health.ClusterHealthPolicy.ConsiderWarningAsError
  commentId: P:System.Fabric.Health.ClusterHealthPolicy.ConsiderWarningAsError
  id: ConsiderWarningAsError
  parent: System.Fabric.Health.ClusterHealthPolicy
  langs:
  - csharp
  - vb
  name: ConsiderWarningAsError
  nameWithType: ClusterHealthPolicy.ConsiderWarningAsError
  fullName: System.Fabric.Health.ClusterHealthPolicy.ConsiderWarningAsError
  type: Property
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/Health/ClusterHealthPolicy.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: ConsiderWarningAsError
    path: src/prod/src/managed/Api/src/System/Fabric/Health/ClusterHealthPolicy.cs
    startLine: 43
  assemblies:
  - System.Fabric
  namespace: System.Fabric.Health
  summary: "\n<p>Gets or sets a <xref href=\"System.Boolean\" data-throw-if-not-resolved=\"false\"></xref> that determines whetherÂ reports with warning state should be treated with the same severity as errors.</p>\n"
  example: []
  syntax:
    content: public bool ConsiderWarningAsError { get; set; }
    content.vb: Public Property ConsiderWarningAsError As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if reports with warning state should be treated as errors; <strong>false</strong> if warnings \nshould not be treated as errors.</p>\n"
  overload: System.Fabric.Health.ClusterHealthPolicy.ConsiderWarningAsError*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Fabric.Health.ClusterHealthPolicy.MaxPercentUnhealthyNodes
  commentId: P:System.Fabric.Health.ClusterHealthPolicy.MaxPercentUnhealthyNodes
  id: MaxPercentUnhealthyNodes
  parent: System.Fabric.Health.ClusterHealthPolicy
  langs:
  - csharp
  - vb
  name: MaxPercentUnhealthyNodes
  nameWithType: ClusterHealthPolicy.MaxPercentUnhealthyNodes
  fullName: System.Fabric.Health.ClusterHealthPolicy.MaxPercentUnhealthyNodes
  type: Property
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/Health/ClusterHealthPolicy.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: MaxPercentUnhealthyNodes
    path: src/prod/src/managed/Api/src/System/Fabric/Health/ClusterHealthPolicy.cs
    startLine: 76
  assemblies:
  - System.Fabric
  namespace: System.Fabric.Health
  summary: "\n<p>Gets or sets the maximum allowed percentage of unhealthy nodes.</p>\n"
  remarks: "\n<p>\nThe percentage represents the maximum tolerated percentage of nodes that can be unhealthy \nbefore the cluster is considered in error. If the percentage is respected but there is at least one unhealthy node,\nthe health is evaluated as Warning.\nThis is calculated by dividing the number of unhealthy nodes\nover the total number of nodes in the cluster.\nThe computation rounds up to tolerate one failure on small numbers of nodes. Default percentage: zero.\n</p>\n<p>In large clusters, some nodes will always be down or out for repairs, so this percentage should be configured to tolerate that.</p>\n"
  example: []
  syntax:
    content: public byte MaxPercentUnhealthyNodes { get; set; }
    content.vb: Public Property MaxPercentUnhealthyNodes As Byte
    parameters: []
    return:
      type: System.Byte
      description: "\n<p>The maximum allowed percentage of unhealthy nodes. Allowed values are integer values from zero to 100.</p>\n"
  overload: System.Fabric.Health.ClusterHealthPolicy.MaxPercentUnhealthyNodes*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The specified value was outside the range of integer values from zero to 100.</p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Fabric.Health.ClusterHealthPolicy.MaxPercentUnhealthyApplications
  commentId: P:System.Fabric.Health.ClusterHealthPolicy.MaxPercentUnhealthyApplications
  id: MaxPercentUnhealthyApplications
  parent: System.Fabric.Health.ClusterHealthPolicy
  langs:
  - csharp
  - vb
  name: MaxPercentUnhealthyApplications
  nameWithType: ClusterHealthPolicy.MaxPercentUnhealthyApplications
  fullName: System.Fabric.Health.ClusterHealthPolicy.MaxPercentUnhealthyApplications
  type: Property
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/Health/ClusterHealthPolicy.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: MaxPercentUnhealthyApplications
    path: src/prod/src/managed/Api/src/System/Fabric/Health/ClusterHealthPolicy.cs
    startLine: 114
  assemblies:
  - System.Fabric
  namespace: System.Fabric.Health
  summary: "\n<p>Gets or sets the maximum allowed percentage of unhealthy applications.</p>\n"
  remarks: "\n<p>\nThe percentage represents the maximum tolerated percentage of applications that can be unhealthy \nbefore the cluster is considered in error. If the percentage is respected but there is at least one unhealthy application,\nthe health is evaluated as Warning.\nThis is calculated by dividing the number of unhealthy applications\nover the total number of applications deployed in the cluster, excluding all applications of application types\nthat are included in the <xref href=\"System.Fabric.Health.ClusterHealthPolicy.ApplicationTypeHealthPolicyMap\" data-throw-if-not-resolved=\"false\"></xref>.\nThe computation rounds up to tolerate one failure on small numbers of applications. Default percentage: zero.\n</p>\n"
  example: []
  syntax:
    content: public byte MaxPercentUnhealthyApplications { get; set; }
    content.vb: Public Property MaxPercentUnhealthyApplications As Byte
    parameters: []
    return:
      type: System.Byte
      description: "\n<p>The maximum allowed percentage of unhealthy applications. Allowed values are integer values from zero to 100.</p>\n"
  overload: System.Fabric.Health.ClusterHealthPolicy.MaxPercentUnhealthyApplications*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The specified value was outside the range of integer values from zero to 100.</p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Fabric.Health.ClusterHealthPolicy.ToString
  commentId: M:System.Fabric.Health.ClusterHealthPolicy.ToString
  id: ToString
  parent: System.Fabric.Health.ClusterHealthPolicy
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: ClusterHealthPolicy.ToString()
  fullName: System.Fabric.Health.ClusterHealthPolicy.ToString()
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/Health/ClusterHealthPolicy.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: ToString
    path: src/prod/src/managed/Api/src/System/Fabric/Health/ClusterHealthPolicy.cs
    startLine: 136
  assemblies:
  - System.Fabric
  namespace: System.Fabric.Health
  summary: "\nGets a string representation of the cluster health policy.\n"
  example: []
  syntax:
    content: public override string ToString()
    content.vb: Public Overrides Function ToString As String
    return:
      type: System.String
      description: A string representation of the cluster health policy.
  overridden: System.Object.ToString
  overload: System.Fabric.Health.ClusterHealthPolicy.ToString*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Fabric.Health.ClusterHealthPolicy.ApplicationTypeHealthPolicyMap
  commentId: P:System.Fabric.Health.ClusterHealthPolicy.ApplicationTypeHealthPolicyMap
  id: ApplicationTypeHealthPolicyMap
  parent: System.Fabric.Health.ClusterHealthPolicy
  langs:
  - csharp
  - vb
  name: ApplicationTypeHealthPolicyMap
  nameWithType: ClusterHealthPolicy.ApplicationTypeHealthPolicyMap
  fullName: System.Fabric.Health.ClusterHealthPolicy.ApplicationTypeHealthPolicyMap
  type: Property
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/Health/ClusterHealthPolicy.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: ApplicationTypeHealthPolicyMap
    path: src/prod/src/managed/Api/src/System/Fabric/Health/ClusterHealthPolicy.cs
    startLine: 174
  assemblies:
  - System.Fabric
  namespace: System.Fabric.Health
  summary: "\n<p>\nGets the map with MaxPercentUnhealthyApplications per application type name. \n</p>\n"
  remarks: "\n<p>The application type health policy map can be used during cluster health evaluation to describe special application types. \nBy default, all applications are put into a pool and evaluated with <xref href=\"System.Fabric.Health.ClusterHealthPolicy.MaxPercentUnhealthyApplications\" data-throw-if-not-resolved=\"false\"></xref>. If one or more application types are special \nand should be treated in a different way, they can be taken out of the global pool and evaluated against the percentages associated with their application type name in the map. \nFor example, in a cluster there are thousands of applications of different types, and a few control application instances of a special application type.\nThe control applications should never be in error. So users can specify global MaxPercentUnhealthyApplications to 20% to tolerate some failures, \nbut for the application type \"ControlApplicationType\" set the MaxPercentUnhealthyApplications to 0. \nThis way, if some of the many applications are unhealthy, but below the global unhealthy percentage, the cluster would be evaluated to Warning. \nA warning health state does not impact cluster upgrade or other monitoring triggered by Error health state.\nBut even one control application in error would make cluster health error, which can rollback or prevent a cluster upgrade. </p>&gt;\n<p>For the application types defined in the map, all application instances are taken out of the global pool of applications.\nThey are evaluated based on the total number of applications of the application type, using the specific MaxPercentUnhealthyApplications from the map.\nAll the rest of the applications remain in the global pool and are evaluated with MaxPercentUnhealthyApplications.</p>\n<p>To define entries for the specific application types in the cluster manifest, inside FabricSettings add entries\nfor parameters with name formed by prefix \"ApplicationTypeMaxPercentUnhealthyApplications-\" followed by application type name.</p>\n<p>If no policy is specified for an application type, the default MaxPercentUnhealthyApplications is used for evaluation.</p>\n<p>The application type health evaluation is done only when the cluster is configured with EnableApplicationTypeHealthEvaluation <strong>true</strong>.\nThe setting is disabled by default.\n</p>\n"
  example: []
  syntax:
    content: public ApplicationTypeHealthPolicyMap ApplicationTypeHealthPolicyMap { get; }
    content.vb: Public ReadOnly Property ApplicationTypeHealthPolicyMap As ApplicationTypeHealthPolicyMap
    parameters: []
    return:
      type: System.Fabric.Health.ApplicationTypeHealthPolicyMap
      description: "\n<p>The application type health policy map with MaxPercentUnhealthyApplications per application type name.</p>\n"
  overload: System.Fabric.Health.ClusterHealthPolicy.ApplicationTypeHealthPolicyMap*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
references:
- uid: System.Fabric.Health
  commentId: N:System.Fabric.Health
  isExternal: false
  name: System.Fabric.Health
  nameWithType: System.Fabric.Health
  fullName: System.Fabric.Health
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.Health.ClusterHealthPolicy.System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
  commentId: M:System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  parent: System.Fabric.Messaging.Stream.ByteArraySerializer
  definition: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  name: Serialize<ClusterHealthPolicy>()
  nameWithType: ByteArraySerializer.Serialize<ClusterHealthPolicy>()
  fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<System.Fabric.Health.ClusterHealthPolicy>()
  nameWithType.vb: ByteArraySerializer.Serialize(Of ClusterHealthPolicy)()
  fullname.vb: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of System.Fabric.Health.ClusterHealthPolicy)()
  name.vb: Serialize(Of ClusterHealthPolicy)()
  spec.csharp:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
    name: Serialize<ClusterHealthPolicy>
    nameWithType: ByteArraySerializer.Serialize<ClusterHealthPolicy>
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<System.Fabric.Health.ClusterHealthPolicy>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
    name: Serialize(Of ClusterHealthPolicy)
    nameWithType: ByteArraySerializer.Serialize(Of ClusterHealthPolicy)
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of System.Fabric.Health.ClusterHealthPolicy)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  commentId: M:System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  isExternal: false
  name: Serialize<T>(T)
  nameWithType: ByteArraySerializer.Serialize<T>(T)
  fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<T>(T)
  nameWithType.vb: ByteArraySerializer.Serialize(Of T)(T)
  fullname.vb: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of T)(T)
  name.vb: Serialize(Of T)(T)
  spec.csharp:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
    name: Serialize<T>
    nameWithType: ByteArraySerializer.Serialize<T>
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
    name: Serialize(Of T)
    nameWithType: ByteArraySerializer.Serialize(Of T)
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.Messaging.Stream.ByteArraySerializer
  commentId: T:System.Fabric.Messaging.Stream.ByteArraySerializer
  parent: System.Fabric.Messaging.Stream
  isExternal: false
  name: ByteArraySerializer
  nameWithType: ByteArraySerializer
  fullName: System.Fabric.Messaging.Stream.ByteArraySerializer
- uid: System.Fabric.Messaging.Stream
  commentId: N:System.Fabric.Messaging.Stream
  isExternal: false
  name: System.Fabric.Messaging.Stream
  nameWithType: System.Fabric.Messaging.Stream
  fullName: System.Fabric.Messaging.Stream
- uid: System.Fabric.Health.ClusterHealthPolicy
  commentId: T:System.Fabric.Health.ClusterHealthPolicy
  parent: System.Fabric.Health
  isExternal: false
  name: ClusterHealthPolicy
  nameWithType: ClusterHealthPolicy
  fullName: System.Fabric.Health.ClusterHealthPolicy
- uid: System.Fabric.Health.ClusterHealthPolicy.#ctor*
  commentId: Overload:System.Fabric.Health.ClusterHealthPolicy.#ctor
  isExternal: false
  name: ClusterHealthPolicy
  nameWithType: ClusterHealthPolicy.ClusterHealthPolicy
  fullName: System.Fabric.Health.ClusterHealthPolicy.ClusterHealthPolicy
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Fabric.Health.ClusterHealthPolicy.ConsiderWarningAsError*
  commentId: Overload:System.Fabric.Health.ClusterHealthPolicy.ConsiderWarningAsError
  isExternal: false
  name: ConsiderWarningAsError
  nameWithType: ClusterHealthPolicy.ConsiderWarningAsError
  fullName: System.Fabric.Health.ClusterHealthPolicy.ConsiderWarningAsError
- uid: System.Fabric.Health.ClusterHealthPolicy.MaxPercentUnhealthyNodes*
  commentId: Overload:System.Fabric.Health.ClusterHealthPolicy.MaxPercentUnhealthyNodes
  isExternal: false
  name: MaxPercentUnhealthyNodes
  nameWithType: ClusterHealthPolicy.MaxPercentUnhealthyNodes
  fullName: System.Fabric.Health.ClusterHealthPolicy.MaxPercentUnhealthyNodes
- uid: System.ArgumentOutOfRangeException
  commentId: T:System.ArgumentOutOfRangeException
- uid: System.Byte
  commentId: T:System.Byte
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte
- uid: System.Fabric.Health.ClusterHealthPolicy.ApplicationTypeHealthPolicyMap
  commentId: P:System.Fabric.Health.ClusterHealthPolicy.ApplicationTypeHealthPolicyMap
- uid: System.Fabric.Health.ClusterHealthPolicy.MaxPercentUnhealthyApplications*
  commentId: Overload:System.Fabric.Health.ClusterHealthPolicy.MaxPercentUnhealthyApplications
  isExternal: false
  name: MaxPercentUnhealthyApplications
  nameWithType: ClusterHealthPolicy.MaxPercentUnhealthyApplications
  fullName: System.Fabric.Health.ClusterHealthPolicy.MaxPercentUnhealthyApplications
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.Health.ClusterHealthPolicy.ToString*
  commentId: Overload:System.Fabric.Health.ClusterHealthPolicy.ToString
  isExternal: false
  name: ToString
  nameWithType: ClusterHealthPolicy.ToString
  fullName: System.Fabric.Health.ClusterHealthPolicy.ToString
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Fabric.Health.ClusterHealthPolicy.MaxPercentUnhealthyApplications
  commentId: P:System.Fabric.Health.ClusterHealthPolicy.MaxPercentUnhealthyApplications
- uid: System.Fabric.Health.ClusterHealthPolicy.ApplicationTypeHealthPolicyMap*
  commentId: Overload:System.Fabric.Health.ClusterHealthPolicy.ApplicationTypeHealthPolicyMap
  isExternal: false
  name: ApplicationTypeHealthPolicyMap
  nameWithType: ClusterHealthPolicy.ApplicationTypeHealthPolicyMap
  fullName: System.Fabric.Health.ClusterHealthPolicy.ApplicationTypeHealthPolicyMap
- uid: System.Fabric.Health.ApplicationTypeHealthPolicyMap
  commentId: T:System.Fabric.Health.ApplicationTypeHealthPolicyMap
  parent: System.Fabric.Health
  isExternal: false
  name: ApplicationTypeHealthPolicyMap
  nameWithType: ApplicationTypeHealthPolicyMap
  fullName: System.Fabric.Health.ApplicationTypeHealthPolicyMap
