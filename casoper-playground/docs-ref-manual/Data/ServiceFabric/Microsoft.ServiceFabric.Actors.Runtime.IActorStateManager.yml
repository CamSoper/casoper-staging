### YamlMime:ManagedReference
items:
- uid: Microsoft.ServiceFabric.Actors.Runtime.IActorStateManager
  commentId: T:Microsoft.ServiceFabric.Actors.Runtime.IActorStateManager
  id: IActorStateManager
  parent: Microsoft.ServiceFabric.Actors.Runtime
  children:
  - Microsoft.ServiceFabric.Actors.Runtime.IActorStateManager.AddOrUpdateStateAsync``1(System.String,``0,System.Func{System.String,``0,``0},System.Threading.CancellationToken)
  - Microsoft.ServiceFabric.Actors.Runtime.IActorStateManager.AddStateAsync``1(System.String,``0,System.Threading.CancellationToken)
  - Microsoft.ServiceFabric.Actors.Runtime.IActorStateManager.ClearCacheAsync(System.Threading.CancellationToken)
  - Microsoft.ServiceFabric.Actors.Runtime.IActorStateManager.ContainsStateAsync(System.String,System.Threading.CancellationToken)
  - Microsoft.ServiceFabric.Actors.Runtime.IActorStateManager.GetOrAddStateAsync``1(System.String,``0,System.Threading.CancellationToken)
  - Microsoft.ServiceFabric.Actors.Runtime.IActorStateManager.GetStateAsync``1(System.String,System.Threading.CancellationToken)
  - Microsoft.ServiceFabric.Actors.Runtime.IActorStateManager.GetStateNamesAsync(System.Threading.CancellationToken)
  - Microsoft.ServiceFabric.Actors.Runtime.IActorStateManager.RemoveStateAsync(System.String,System.Threading.CancellationToken)
  - Microsoft.ServiceFabric.Actors.Runtime.IActorStateManager.SaveStateAsync(System.Threading.CancellationToken)
  - Microsoft.ServiceFabric.Actors.Runtime.IActorStateManager.SetStateAsync``1(System.String,``0,System.Threading.CancellationToken)
  - Microsoft.ServiceFabric.Actors.Runtime.IActorStateManager.TryAddStateAsync``1(System.String,``0,System.Threading.CancellationToken)
  - Microsoft.ServiceFabric.Actors.Runtime.IActorStateManager.TryGetStateAsync``1(System.String,System.Threading.CancellationToken)
  - Microsoft.ServiceFabric.Actors.Runtime.IActorStateManager.TryRemoveStateAsync(System.String,System.Threading.CancellationToken)
  langs:
  - csharp
  - vb
  name: IActorStateManager
  nameWithType: IActorStateManager
  fullName: Microsoft.ServiceFabric.Actors.Runtime.IActorStateManager
  type: Interface
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Actors/Runtime/IActorStateManager.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: IActorStateManager
    path: src/prod/src/managed/Microsoft.ServiceFabric.Actors/Runtime/IActorStateManager.cs
    startLine: 15
  assemblies:
  - Microsoft.ServiceFabric.Actors
  namespace: Microsoft.ServiceFabric.Actors.Runtime
  summary: "\nRepresents the interface that state manager for <xref href=\"Microsoft.ServiceFabric.Actors.Runtime.Actor\" data-throw-if-not-resolved=\"false\"></xref> implements.\n"
  example: []
  syntax:
    content: public interface IActorStateManager
    content.vb: Public Interface IActorStateManager
  extensionMethods:
  - Microsoft.ServiceFabric.Actors.Runtime.IActorStateManager.System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: Microsoft.ServiceFabric.Actors.Runtime.IActorStateManager.AddStateAsync``1(System.String,``0,System.Threading.CancellationToken)
  commentId: M:Microsoft.ServiceFabric.Actors.Runtime.IActorStateManager.AddStateAsync``1(System.String,``0,System.Threading.CancellationToken)
  id: AddStateAsync``1(System.String,``0,System.Threading.CancellationToken)
  parent: Microsoft.ServiceFabric.Actors.Runtime.IActorStateManager
  langs:
  - csharp
  - vb
  name: AddStateAsync<T>(String, T, CancellationToken)
  nameWithType: IActorStateManager.AddStateAsync<T>(String, T, CancellationToken)
  fullName: Microsoft.ServiceFabric.Actors.Runtime.IActorStateManager.AddStateAsync<T>(System.String, T, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Actors/Runtime/IActorStateManager.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: AddStateAsync
    path: src/prod/src/managed/Microsoft.ServiceFabric.Actors/Runtime/IActorStateManager.cs
    startLine: 36
  assemblies:
  - Microsoft.ServiceFabric.Actors
  namespace: Microsoft.ServiceFabric.Actors.Runtime
  summary: "\nAdds an actor state with given state name.\n"
  remarks: "\nThe type of state value <em>T</em> must be \n<a href=\"https://msdn.microsoft.com/library/ms731923.aspx\">Data Contract</a> serializable.\n"
  example: []
  syntax:
    content: Task AddStateAsync<T>(string stateName, T value, CancellationToken cancellationToken = null)
    content.vb: Function AddStateAsync(Of T)(stateName As String, value As T, cancellationToken As CancellationToken = Nothing) As Task
    parameters:
    - id: stateName
      type: System.String
      description: Name of the actor state to add.
    - id: value
      type: '{T}'
      description: Value of the actor state to add.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The token to monitor for cancellation requests.
    typeParameters:
    - id: T
      description: Type of value associated with given state name.
    return:
      type: System.Threading.Tasks.Task
      description: "\nA task that represents the asynchronous add operation.\n"
  overload: Microsoft.ServiceFabric.Actors.Runtime.IActorStateManager.AddStateAsync*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\nAn actor state with given state name already exists.\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The specified state name is null.
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: The operation was canceled.
  nameWithType.vb: IActorStateManager.AddStateAsync(Of T)(String, T, CancellationToken)
  fullName.vb: Microsoft.ServiceFabric.Actors.Runtime.IActorStateManager.AddStateAsync(Of T)(System.String, T, System.Threading.CancellationToken)
  name.vb: AddStateAsync(Of T)(String, T, CancellationToken)
- uid: Microsoft.ServiceFabric.Actors.Runtime.IActorStateManager.GetStateAsync``1(System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.ServiceFabric.Actors.Runtime.IActorStateManager.GetStateAsync``1(System.String,System.Threading.CancellationToken)
  id: GetStateAsync``1(System.String,System.Threading.CancellationToken)
  parent: Microsoft.ServiceFabric.Actors.Runtime.IActorStateManager
  langs:
  - csharp
  - vb
  name: GetStateAsync<T>(String, CancellationToken)
  nameWithType: IActorStateManager.GetStateAsync<T>(String, CancellationToken)
  fullName: Microsoft.ServiceFabric.Actors.Runtime.IActorStateManager.GetStateAsync<T>(System.String, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Actors/Runtime/IActorStateManager.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: GetStateAsync
    path: src/prod/src/managed/Microsoft.ServiceFabric.Actors/Runtime/IActorStateManager.cs
    startLine: 57
  assemblies:
  - Microsoft.ServiceFabric.Actors
  namespace: Microsoft.ServiceFabric.Actors.Runtime
  summary: "\nGets an actor state with specified state name.\n"
  remarks: "\nThe type of state value <em>T</em> must be \n<a href=\"https://msdn.microsoft.com/library/ms731923.aspx\">Data Contract</a> serializable.\n"
  example: []
  syntax:
    content: Task<T> GetStateAsync<T>(string stateName, CancellationToken cancellationToken = null)
    content.vb: Function GetStateAsync(Of T)(stateName As String, cancellationToken As CancellationToken = Nothing) As Task(Of T)
    parameters:
    - id: stateName
      type: System.String
      description: Name of the actor state to get.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The token to monitor for cancellation requests.
    typeParameters:
    - id: T
      description: Type of value associated with given state name.
    return:
      type: System.Threading.Tasks.Task{{T}}
      description: "\nA task that represents the asynchronous get operation. The value of TResult\nparameter contains value of actor state with given state name.\n"
  overload: Microsoft.ServiceFabric.Actors.Runtime.IActorStateManager.GetStateAsync*
  exceptions:
  - type: System.Collections.Generic.KeyNotFoundException
    commentId: T:System.Collections.Generic.KeyNotFoundException
    description: "\nAn actor state with given state name does not exist.\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The specified state name is null.
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: The operation was canceled.
  nameWithType.vb: IActorStateManager.GetStateAsync(Of T)(String, CancellationToken)
  fullName.vb: Microsoft.ServiceFabric.Actors.Runtime.IActorStateManager.GetStateAsync(Of T)(System.String, System.Threading.CancellationToken)
  name.vb: GetStateAsync(Of T)(String, CancellationToken)
- uid: Microsoft.ServiceFabric.Actors.Runtime.IActorStateManager.SetStateAsync``1(System.String,``0,System.Threading.CancellationToken)
  commentId: M:Microsoft.ServiceFabric.Actors.Runtime.IActorStateManager.SetStateAsync``1(System.String,``0,System.Threading.CancellationToken)
  id: SetStateAsync``1(System.String,``0,System.Threading.CancellationToken)
  parent: Microsoft.ServiceFabric.Actors.Runtime.IActorStateManager
  langs:
  - csharp
  - vb
  name: SetStateAsync<T>(String, T, CancellationToken)
  nameWithType: IActorStateManager.SetStateAsync<T>(String, T, CancellationToken)
  fullName: Microsoft.ServiceFabric.Actors.Runtime.IActorStateManager.SetStateAsync<T>(System.String, T, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Actors/Runtime/IActorStateManager.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: SetStateAsync
    path: src/prod/src/managed/Microsoft.ServiceFabric.Actors/Runtime/IActorStateManager.cs
    startLine: 76
  assemblies:
  - Microsoft.ServiceFabric.Actors
  namespace: Microsoft.ServiceFabric.Actors.Runtime
  summary: "\nSets an actor state with given state name to specified value.\nIf an actor state with specified name does not exist, it is added.\n"
  remarks: "\nThe type of state value <em>T</em> must be \n<a href=\"https://msdn.microsoft.com/library/ms731923.aspx\">Data Contract</a> serializable.\n"
  example: []
  syntax:
    content: Task SetStateAsync<T>(string stateName, T value, CancellationToken cancellationToken = null)
    content.vb: Function SetStateAsync(Of T)(stateName As String, value As T, cancellationToken As CancellationToken = Nothing) As Task
    parameters:
    - id: stateName
      type: System.String
      description: Name of the actor state to set.
    - id: value
      type: '{T}'
      description: Value of the actor state.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The token to monitor for cancellation requests.
    typeParameters:
    - id: T
      description: Type of value associated with given state name.
    return:
      type: System.Threading.Tasks.Task
      description: "\nA task that represents the asynchronous set operation.\n"
  overload: Microsoft.ServiceFabric.Actors.Runtime.IActorStateManager.SetStateAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The specified state name is null.
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: The operation was canceled.
  nameWithType.vb: IActorStateManager.SetStateAsync(Of T)(String, T, CancellationToken)
  fullName.vb: Microsoft.ServiceFabric.Actors.Runtime.IActorStateManager.SetStateAsync(Of T)(System.String, T, System.Threading.CancellationToken)
  name.vb: SetStateAsync(Of T)(String, T, CancellationToken)
- uid: Microsoft.ServiceFabric.Actors.Runtime.IActorStateManager.RemoveStateAsync(System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.ServiceFabric.Actors.Runtime.IActorStateManager.RemoveStateAsync(System.String,System.Threading.CancellationToken)
  id: RemoveStateAsync(System.String,System.Threading.CancellationToken)
  parent: Microsoft.ServiceFabric.Actors.Runtime.IActorStateManager
  langs:
  - csharp
  - vb
  name: RemoveStateAsync(String, CancellationToken)
  nameWithType: IActorStateManager.RemoveStateAsync(String, CancellationToken)
  fullName: Microsoft.ServiceFabric.Actors.Runtime.IActorStateManager.RemoveStateAsync(System.String, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Actors/Runtime/IActorStateManager.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: RemoveStateAsync
    path: src/prod/src/managed/Microsoft.ServiceFabric.Actors/Runtime/IActorStateManager.cs
    startLine: 89
  assemblies:
  - Microsoft.ServiceFabric.Actors
  namespace: Microsoft.ServiceFabric.Actors.Runtime
  summary: "\nRemoves an actor state with specified state name.\n"
  example: []
  syntax:
    content: Task RemoveStateAsync(string stateName, CancellationToken cancellationToken = null)
    content.vb: Function RemoveStateAsync(stateName As String, cancellationToken As CancellationToken = Nothing) As Task
    parameters:
    - id: stateName
      type: System.String
      description: Name of the actor state to remove.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The token to monitor for cancellation requests.
    return:
      type: System.Threading.Tasks.Task
      description: A task that represents the asynchronous remove operation.
  overload: Microsoft.ServiceFabric.Actors.Runtime.IActorStateManager.RemoveStateAsync*
  exceptions:
  - type: System.Collections.Generic.KeyNotFoundException
    commentId: T:System.Collections.Generic.KeyNotFoundException
    description: "\nAn actor state with given state name does not exist.\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: 'The specified state name is null. '
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: The operation was canceled.
- uid: Microsoft.ServiceFabric.Actors.Runtime.IActorStateManager.TryAddStateAsync``1(System.String,``0,System.Threading.CancellationToken)
  commentId: M:Microsoft.ServiceFabric.Actors.Runtime.IActorStateManager.TryAddStateAsync``1(System.String,``0,System.Threading.CancellationToken)
  id: TryAddStateAsync``1(System.String,``0,System.Threading.CancellationToken)
  parent: Microsoft.ServiceFabric.Actors.Runtime.IActorStateManager
  langs:
  - csharp
  - vb
  name: TryAddStateAsync<T>(String, T, CancellationToken)
  nameWithType: IActorStateManager.TryAddStateAsync<T>(String, T, CancellationToken)
  fullName: Microsoft.ServiceFabric.Actors.Runtime.IActorStateManager.TryAddStateAsync<T>(System.String, T, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Actors/Runtime/IActorStateManager.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: TryAddStateAsync
    path: src/prod/src/managed/Microsoft.ServiceFabric.Actors/Runtime/IActorStateManager.cs
    startLine: 108
  assemblies:
  - Microsoft.ServiceFabric.Actors
  namespace: Microsoft.ServiceFabric.Actors.Runtime
  summary: "\nAttempts to add an actor state with given state name.\n"
  remarks: "\nThe type of state value <em>T</em> must be \n<a href=\"https://msdn.microsoft.com/library/ms731923.aspx\">Data Contract</a> serializable.\n"
  example: []
  syntax:
    content: Task<bool> TryAddStateAsync<T>(string stateName, T value, CancellationToken cancellationToken = null)
    content.vb: Function TryAddStateAsync(Of T)(stateName As String, value As T, cancellationToken As CancellationToken = Nothing) As Task(Of Boolean)
    parameters:
    - id: stateName
      type: System.String
      description: Name of the actor state to add.
    - id: value
      type: '{T}'
      description: Value of the actor state to add.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The token to monitor for cancellation requests.
    typeParameters:
    - id: T
      description: Type of value associated with given state name.
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
      description: "\nA task that represents the asynchronous add operation. The value of TResult\nparameter indicates if the state was successfully added.\n"
  overload: Microsoft.ServiceFabric.Actors.Runtime.IActorStateManager.TryAddStateAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The specified state name is null.
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: The operation was canceled.
  nameWithType.vb: IActorStateManager.TryAddStateAsync(Of T)(String, T, CancellationToken)
  fullName.vb: Microsoft.ServiceFabric.Actors.Runtime.IActorStateManager.TryAddStateAsync(Of T)(System.String, T, System.Threading.CancellationToken)
  name.vb: TryAddStateAsync(Of T)(String, T, CancellationToken)
- uid: Microsoft.ServiceFabric.Actors.Runtime.IActorStateManager.TryGetStateAsync``1(System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.ServiceFabric.Actors.Runtime.IActorStateManager.TryGetStateAsync``1(System.String,System.Threading.CancellationToken)
  id: TryGetStateAsync``1(System.String,System.Threading.CancellationToken)
  parent: Microsoft.ServiceFabric.Actors.Runtime.IActorStateManager
  langs:
  - csharp
  - vb
  name: TryGetStateAsync<T>(String, CancellationToken)
  nameWithType: IActorStateManager.TryGetStateAsync<T>(String, CancellationToken)
  fullName: Microsoft.ServiceFabric.Actors.Runtime.IActorStateManager.TryGetStateAsync<T>(System.String, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Actors/Runtime/IActorStateManager.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: TryGetStateAsync
    path: src/prod/src/managed/Microsoft.ServiceFabric.Actors/Runtime/IActorStateManager.cs
    startLine: 127
  assemblies:
  - Microsoft.ServiceFabric.Actors
  namespace: Microsoft.ServiceFabric.Actors.Runtime
  summary: "\nAttempts to get an actor state with specified state name.\n"
  remarks: "\nThe type of state value <em>T</em> must be \n<a href=\"https://msdn.microsoft.com/library/ms731923.aspx\">Data Contract</a> serializable.\n"
  example: []
  syntax:
    content: Task<ConditionalValue<T>> TryGetStateAsync<T>(string stateName, CancellationToken cancellationToken = null)
    content.vb: Function TryGetStateAsync(Of T)(stateName As String, cancellationToken As CancellationToken = Nothing) As Task(Of ConditionalValue(Of T))
    parameters:
    - id: stateName
      type: System.String
      description: Name of the actor state to get.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The token to monitor for cancellation requests.
    typeParameters:
    - id: T
      description: Type of value associated with given state name.
    return:
      type: System.Threading.Tasks.Task{Microsoft.ServiceFabric.Data.ConditionalValue{{T}}}
      description: "\nA task that represents the asynchronous get operation. The value of TResult\nparameter contains <xref href=\"Microsoft.ServiceFabric.Data.ConditionalValue%601\" data-throw-if-not-resolved=\"false\"></xref>\nindicating whether the actor state is present and the value of actor state if it is present.\n"
  overload: Microsoft.ServiceFabric.Actors.Runtime.IActorStateManager.TryGetStateAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The specified state name is null.
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: The operation was canceled.
  nameWithType.vb: IActorStateManager.TryGetStateAsync(Of T)(String, CancellationToken)
  fullName.vb: Microsoft.ServiceFabric.Actors.Runtime.IActorStateManager.TryGetStateAsync(Of T)(System.String, System.Threading.CancellationToken)
  name.vb: TryGetStateAsync(Of T)(String, CancellationToken)
- uid: Microsoft.ServiceFabric.Actors.Runtime.IActorStateManager.TryRemoveStateAsync(System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.ServiceFabric.Actors.Runtime.IActorStateManager.TryRemoveStateAsync(System.String,System.Threading.CancellationToken)
  id: TryRemoveStateAsync(System.String,System.Threading.CancellationToken)
  parent: Microsoft.ServiceFabric.Actors.Runtime.IActorStateManager
  langs:
  - csharp
  - vb
  name: TryRemoveStateAsync(String, CancellationToken)
  nameWithType: IActorStateManager.TryRemoveStateAsync(String, CancellationToken)
  fullName: Microsoft.ServiceFabric.Actors.Runtime.IActorStateManager.TryRemoveStateAsync(System.String, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Actors/Runtime/IActorStateManager.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: TryRemoveStateAsync
    path: src/prod/src/managed/Microsoft.ServiceFabric.Actors/Runtime/IActorStateManager.cs
    startLine: 140
  assemblies:
  - Microsoft.ServiceFabric.Actors
  namespace: Microsoft.ServiceFabric.Actors.Runtime
  summary: "\nAttempts to remove an actor state with specified state name.\n"
  example: []
  syntax:
    content: Task<bool> TryRemoveStateAsync(string stateName, CancellationToken cancellationToken = null)
    content.vb: Function TryRemoveStateAsync(stateName As String, cancellationToken As CancellationToken = Nothing) As Task(Of Boolean)
    parameters:
    - id: stateName
      type: System.String
      description: Name of the actor state to remove.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The token to monitor for cancellation requests.
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
      description: "\nA task that represents the asynchronous remove operation. The value of TResult\nparameter indicates if the state was successfully removed.\n"
  overload: Microsoft.ServiceFabric.Actors.Runtime.IActorStateManager.TryRemoveStateAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The specified state name is null.
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: The operation was canceled.
- uid: Microsoft.ServiceFabric.Actors.Runtime.IActorStateManager.ContainsStateAsync(System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.ServiceFabric.Actors.Runtime.IActorStateManager.ContainsStateAsync(System.String,System.Threading.CancellationToken)
  id: ContainsStateAsync(System.String,System.Threading.CancellationToken)
  parent: Microsoft.ServiceFabric.Actors.Runtime.IActorStateManager
  langs:
  - csharp
  - vb
  name: ContainsStateAsync(String, CancellationToken)
  nameWithType: IActorStateManager.ContainsStateAsync(String, CancellationToken)
  fullName: Microsoft.ServiceFabric.Actors.Runtime.IActorStateManager.ContainsStateAsync(System.String, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Actors/Runtime/IActorStateManager.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: ContainsStateAsync
    path: src/prod/src/managed/Microsoft.ServiceFabric.Actors/Runtime/IActorStateManager.cs
    startLine: 153
  assemblies:
  - Microsoft.ServiceFabric.Actors
  namespace: Microsoft.ServiceFabric.Actors.Runtime
  summary: "\nChecks if an actor state with specified name exists.\n"
  example: []
  syntax:
    content: Task<bool> ContainsStateAsync(string stateName, CancellationToken cancellationToken = null)
    content.vb: Function ContainsStateAsync(stateName As String, cancellationToken As CancellationToken = Nothing) As Task(Of Boolean)
    parameters:
    - id: stateName
      type: System.String
      description: Name of the actor state.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The token to monitor for cancellation requests.
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
      description: "\nA task that represents the asynchronous check operation. The value of TResult\nparameter is <code>true</code> if state with specified name exists otherwise <code>false</code>.\n"
  overload: Microsoft.ServiceFabric.Actors.Runtime.IActorStateManager.ContainsStateAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The specified state name is null.
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: The operation was canceled.
- uid: Microsoft.ServiceFabric.Actors.Runtime.IActorStateManager.GetOrAddStateAsync``1(System.String,``0,System.Threading.CancellationToken)
  commentId: M:Microsoft.ServiceFabric.Actors.Runtime.IActorStateManager.GetOrAddStateAsync``1(System.String,``0,System.Threading.CancellationToken)
  id: GetOrAddStateAsync``1(System.String,``0,System.Threading.CancellationToken)
  parent: Microsoft.ServiceFabric.Actors.Runtime.IActorStateManager
  langs:
  - csharp
  - vb
  name: GetOrAddStateAsync<T>(String, T, CancellationToken)
  nameWithType: IActorStateManager.GetOrAddStateAsync<T>(String, T, CancellationToken)
  fullName: Microsoft.ServiceFabric.Actors.Runtime.IActorStateManager.GetOrAddStateAsync<T>(System.String, T, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Actors/Runtime/IActorStateManager.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: GetOrAddStateAsync
    path: src/prod/src/managed/Microsoft.ServiceFabric.Actors/Runtime/IActorStateManager.cs
    startLine: 173
  assemblies:
  - Microsoft.ServiceFabric.Actors
  namespace: Microsoft.ServiceFabric.Actors.Runtime
  summary: "\nGets an actor state with given state name, if it exists or adds the state with\nspecified state name and value, if it does not exist. \n"
  remarks: "\nThe type of state value <em>T</em> must be \n<a href=\"https://msdn.microsoft.com/library/ms731923.aspx\">Data Contract</a> serializable.\n"
  example: []
  syntax:
    content: Task<T> GetOrAddStateAsync<T>(string stateName, T value, CancellationToken cancellationToken = null)
    content.vb: Function GetOrAddStateAsync(Of T)(stateName As String, value As T, cancellationToken As CancellationToken = Nothing) As Task(Of T)
    parameters:
    - id: stateName
      type: System.String
      description: Name of the actor state to get or add.
    - id: value
      type: '{T}'
      description: Value of the actor state to add if it does not exist.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The token to monitor for cancellation requests.
    typeParameters:
    - id: T
      description: Type of value associated with given state name.
    return:
      type: System.Threading.Tasks.Task{{T}}
      description: "\nA task that represents the asynchronous get or add operation. The value of TResult\nparameter contains value of actor state with given state name.\n"
  overload: Microsoft.ServiceFabric.Actors.Runtime.IActorStateManager.GetOrAddStateAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The specified state name is null.
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: The operation was canceled.
  nameWithType.vb: IActorStateManager.GetOrAddStateAsync(Of T)(String, T, CancellationToken)
  fullName.vb: Microsoft.ServiceFabric.Actors.Runtime.IActorStateManager.GetOrAddStateAsync(Of T)(System.String, T, System.Threading.CancellationToken)
  name.vb: GetOrAddStateAsync(Of T)(String, T, CancellationToken)
- uid: Microsoft.ServiceFabric.Actors.Runtime.IActorStateManager.AddOrUpdateStateAsync``1(System.String,``0,System.Func{System.String,``0,``0},System.Threading.CancellationToken)
  commentId: M:Microsoft.ServiceFabric.Actors.Runtime.IActorStateManager.AddOrUpdateStateAsync``1(System.String,``0,System.Func{System.String,``0,``0},System.Threading.CancellationToken)
  id: AddOrUpdateStateAsync``1(System.String,``0,System.Func{System.String,``0,``0},System.Threading.CancellationToken)
  parent: Microsoft.ServiceFabric.Actors.Runtime.IActorStateManager
  langs:
  - csharp
  - vb
  name: AddOrUpdateStateAsync<T>(String, T, Func<String, T, T>, CancellationToken)
  nameWithType: IActorStateManager.AddOrUpdateStateAsync<T>(String, T, Func<String, T, T>, CancellationToken)
  fullName: Microsoft.ServiceFabric.Actors.Runtime.IActorStateManager.AddOrUpdateStateAsync<T>(System.String, T, System.Func<System.String, T, T>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Actors/Runtime/IActorStateManager.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: AddOrUpdateStateAsync
    path: src/prod/src/managed/Microsoft.ServiceFabric.Actors/Runtime/IActorStateManager.cs
    startLine: 194
  assemblies:
  - Microsoft.ServiceFabric.Actors
  namespace: Microsoft.ServiceFabric.Actors.Runtime
  summary: "\nAdds an actor state with given state name, if it does not already exist or updates\nthe state with specified state name, if it exists. \n"
  remarks: "\nThe type of state value <em>T</em> must be \n<a href=\"https://msdn.microsoft.com/library/ms731923.aspx\">Data Contract</a> serializable.\n"
  example: []
  syntax:
    content: Task<T> AddOrUpdateStateAsync<T>(string stateName, T addValue, Func<string, T, T> updateValueFactory, CancellationToken cancellationToken = null)
    content.vb: Function AddOrUpdateStateAsync(Of T)(stateName As String, addValue As T, updateValueFactory As Func(Of String, T, T), cancellationToken As CancellationToken = Nothing) As Task(Of T)
    parameters:
    - id: stateName
      type: System.String
      description: Name of the actor state to add or update.
    - id: addValue
      type: '{T}'
      description: Value of the actor state to add if it does not exist.
    - id: updateValueFactory
      type: System.Func{System.String,{T},{T}}
      description: Factory function to generate value of actor state to update if it exists.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The token to monitor for cancellation requests.
    typeParameters:
    - id: T
      description: Type of value associated with given state name.
    return:
      type: System.Threading.Tasks.Task{{T}}
      description: "\nA task that represents the asynchronous add/update operation. The value of TResult\nparameter contains value of actor state that was added/updated.\n"
  overload: Microsoft.ServiceFabric.Actors.Runtime.IActorStateManager.AddOrUpdateStateAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The specified state name is null.
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: The operation was canceled.
  nameWithType.vb: IActorStateManager.AddOrUpdateStateAsync(Of T)(String, T, Func(Of String, T, T), CancellationToken)
  fullName.vb: Microsoft.ServiceFabric.Actors.Runtime.IActorStateManager.AddOrUpdateStateAsync(Of T)(System.String, T, System.Func(Of System.String, T, T), System.Threading.CancellationToken)
  name.vb: AddOrUpdateStateAsync(Of T)(String, T, Func(Of String, T, T), CancellationToken)
- uid: Microsoft.ServiceFabric.Actors.Runtime.IActorStateManager.GetStateNamesAsync(System.Threading.CancellationToken)
  commentId: M:Microsoft.ServiceFabric.Actors.Runtime.IActorStateManager.GetStateNamesAsync(System.Threading.CancellationToken)
  id: GetStateNamesAsync(System.Threading.CancellationToken)
  parent: Microsoft.ServiceFabric.Actors.Runtime.IActorStateManager
  langs:
  - csharp
  - vb
  name: GetStateNamesAsync(CancellationToken)
  nameWithType: IActorStateManager.GetStateNamesAsync(CancellationToken)
  fullName: Microsoft.ServiceFabric.Actors.Runtime.IActorStateManager.GetStateNamesAsync(System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Actors/Runtime/IActorStateManager.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: GetStateNamesAsync
    path: src/prod/src/managed/Microsoft.ServiceFabric.Actors/Runtime/IActorStateManager.cs
    startLine: 205
  assemblies:
  - Microsoft.ServiceFabric.Actors
  namespace: Microsoft.ServiceFabric.Actors.Runtime
  summary: "\nCreates an enumerable of all actor state names for current actor.\n"
  example: []
  syntax:
    content: Task<IEnumerable<string>> GetStateNamesAsync(CancellationToken cancellationToken = null)
    content.vb: Function GetStateNamesAsync(cancellationToken As CancellationToken = Nothing) As Task(Of IEnumerable(Of String))
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The token to monitor for cancellation requests.
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{System.String}}
      description: "\nA task that represents the asynchronous enumeration operation. The value of TResult\nparameter is an enumerable of all actor state names.\n"
  overload: Microsoft.ServiceFabric.Actors.Runtime.IActorStateManager.GetStateNamesAsync*
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: The operation was canceled.
- uid: Microsoft.ServiceFabric.Actors.Runtime.IActorStateManager.ClearCacheAsync(System.Threading.CancellationToken)
  commentId: M:Microsoft.ServiceFabric.Actors.Runtime.IActorStateManager.ClearCacheAsync(System.Threading.CancellationToken)
  id: ClearCacheAsync(System.Threading.CancellationToken)
  parent: Microsoft.ServiceFabric.Actors.Runtime.IActorStateManager
  langs:
  - csharp
  - vb
  name: ClearCacheAsync(CancellationToken)
  nameWithType: IActorStateManager.ClearCacheAsync(CancellationToken)
  fullName: Microsoft.ServiceFabric.Actors.Runtime.IActorStateManager.ClearCacheAsync(System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Actors/Runtime/IActorStateManager.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: ClearCacheAsync
    path: src/prod/src/managed/Microsoft.ServiceFabric.Actors/Runtime/IActorStateManager.cs
    startLine: 219
  assemblies:
  - Microsoft.ServiceFabric.Actors
  namespace: Microsoft.ServiceFabric.Actors.Runtime
  summary: "\nClears all the cached actor states and any operation(s) performed on <xref href=\"Microsoft.ServiceFabric.Actors.Runtime.IActorStateManager\" data-throw-if-not-resolved=\"false\"></xref>\nsince last state save operation.\n"
  remarks: "\nAll the operation(s) performed on <xref href=\"Microsoft.ServiceFabric.Actors.Runtime.IActorStateManager\" data-throw-if-not-resolved=\"false\"></xref>  since last save operation are cleared on\nclearing the cache and will not be included in next save operation.\n"
  example: []
  syntax:
    content: Task ClearCacheAsync(CancellationToken cancellationToken = null)
    content.vb: Function ClearCacheAsync(cancellationToken As CancellationToken = Nothing) As Task
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The token to monitor for cancellation requests.
    return:
      type: System.Threading.Tasks.Task
      description: "\nA task that represents the asynchronous clear cache operation.\n"
  overload: Microsoft.ServiceFabric.Actors.Runtime.IActorStateManager.ClearCacheAsync*
- uid: Microsoft.ServiceFabric.Actors.Runtime.IActorStateManager.SaveStateAsync(System.Threading.CancellationToken)
  commentId: M:Microsoft.ServiceFabric.Actors.Runtime.IActorStateManager.SaveStateAsync(System.Threading.CancellationToken)
  id: SaveStateAsync(System.Threading.CancellationToken)
  parent: Microsoft.ServiceFabric.Actors.Runtime.IActorStateManager
  langs:
  - csharp
  - vb
  name: SaveStateAsync(CancellationToken)
  nameWithType: IActorStateManager.SaveStateAsync(CancellationToken)
  fullName: Microsoft.ServiceFabric.Actors.Runtime.IActorStateManager.SaveStateAsync(System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Actors/Runtime/IActorStateManager.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: SaveStateAsync
    path: src/prod/src/managed/Microsoft.ServiceFabric.Actors/Runtime/IActorStateManager.cs
    startLine: 229
  assemblies:
  - Microsoft.ServiceFabric.Actors
  namespace: Microsoft.ServiceFabric.Actors.Runtime
  summary: "\nSaves all the cached state changes (add/update/remove) that were made since last call to\n<xref href=\"Microsoft.ServiceFabric.Actors.Runtime.IActorStateManager.SaveStateAsync(System.Threading.CancellationToken)\" data-throw-if-not-resolved=\"false\"></xref> by actor runtime or by user explicitly.\n"
  example: []
  syntax:
    content: Task SaveStateAsync(CancellationToken cancellationToken = null)
    content.vb: Function SaveStateAsync(cancellationToken As CancellationToken = Nothing) As Task
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The token to monitor for cancellation requests.
    return:
      type: System.Threading.Tasks.Task
      description: "\nA task that represents the asynchronous save operation.\n"
  overload: Microsoft.ServiceFabric.Actors.Runtime.IActorStateManager.SaveStateAsync*
references:
- uid: Microsoft.ServiceFabric.Actors.Runtime.Actor
  commentId: T:Microsoft.ServiceFabric.Actors.Runtime.Actor
  isExternal: false
  name: Actor
  nameWithType: Actor
  fullName: Microsoft.ServiceFabric.Actors.Runtime.Actor
- uid: Microsoft.ServiceFabric.Actors.Runtime
  commentId: N:Microsoft.ServiceFabric.Actors.Runtime
  isExternal: false
  name: Microsoft.ServiceFabric.Actors.Runtime
  nameWithType: Microsoft.ServiceFabric.Actors.Runtime
  fullName: Microsoft.ServiceFabric.Actors.Runtime
- uid: Microsoft.ServiceFabric.Actors.Runtime.IActorStateManager.System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
  commentId: M:System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  parent: System.Fabric.Messaging.Stream.ByteArraySerializer
  definition: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  name: Serialize<IActorStateManager>()
  nameWithType: ByteArraySerializer.Serialize<IActorStateManager>()
  fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<Microsoft.ServiceFabric.Actors.Runtime.IActorStateManager>()
  nameWithType.vb: ByteArraySerializer.Serialize(Of IActorStateManager)()
  fullname.vb: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of Microsoft.ServiceFabric.Actors.Runtime.IActorStateManager)()
  name.vb: Serialize(Of IActorStateManager)()
  spec.csharp:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
    name: Serialize<IActorStateManager>
    nameWithType: ByteArraySerializer.Serialize<IActorStateManager>
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<Microsoft.ServiceFabric.Actors.Runtime.IActorStateManager>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
    name: Serialize(Of IActorStateManager)
    nameWithType: ByteArraySerializer.Serialize(Of IActorStateManager)
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of Microsoft.ServiceFabric.Actors.Runtime.IActorStateManager)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  commentId: M:System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  isExternal: false
  name: Serialize<T>(T)
  nameWithType: ByteArraySerializer.Serialize<T>(T)
  fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<T>(T)
  nameWithType.vb: ByteArraySerializer.Serialize(Of T)(T)
  fullname.vb: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of T)(T)
  name.vb: Serialize(Of T)(T)
  spec.csharp:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
    name: Serialize<T>
    nameWithType: ByteArraySerializer.Serialize<T>
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
    name: Serialize(Of T)
    nameWithType: ByteArraySerializer.Serialize(Of T)
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.Messaging.Stream.ByteArraySerializer
  commentId: T:System.Fabric.Messaging.Stream.ByteArraySerializer
  parent: System.Fabric.Messaging.Stream
  isExternal: false
  name: ByteArraySerializer
  nameWithType: ByteArraySerializer
  fullName: System.Fabric.Messaging.Stream.ByteArraySerializer
- uid: System.Fabric.Messaging.Stream
  commentId: N:System.Fabric.Messaging.Stream
  isExternal: false
  name: System.Fabric.Messaging.Stream
  nameWithType: System.Fabric.Messaging.Stream
  fullName: System.Fabric.Messaging.Stream
- uid: Microsoft.ServiceFabric.Actors.Runtime.IActorStateManager.AddStateAsync*
  commentId: Overload:Microsoft.ServiceFabric.Actors.Runtime.IActorStateManager.AddStateAsync
  isExternal: false
  name: AddStateAsync<T>
  nameWithType: IActorStateManager.AddStateAsync<T>
  fullName: Microsoft.ServiceFabric.Actors.Runtime.IActorStateManager.AddStateAsync<T>
  nameWithType.vb: IActorStateManager.AddStateAsync(Of T)
  fullname.vb: Microsoft.ServiceFabric.Actors.Runtime.IActorStateManager.AddStateAsync(Of T)
  name.vb: AddStateAsync(Of T)
- uid: System.InvalidOperationException
  commentId: T:System.InvalidOperationException
  parent: System
  isExternal: true
  name: InvalidOperationException
  nameWithType: InvalidOperationException
  fullName: System.InvalidOperationException
- uid: System.ArgumentNullException
  commentId: T:System.ArgumentNullException
- uid: System.OperationCanceledException
  commentId: T:System.OperationCanceledException
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: T
  isExternal: false
  name: T
  nameWithType: T
  fullName: T
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: false
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: Microsoft.ServiceFabric.Actors.Runtime.IActorStateManager.GetStateAsync*
  commentId: Overload:Microsoft.ServiceFabric.Actors.Runtime.IActorStateManager.GetStateAsync
  isExternal: false
  name: GetStateAsync<T>
  nameWithType: IActorStateManager.GetStateAsync<T>
  fullName: Microsoft.ServiceFabric.Actors.Runtime.IActorStateManager.GetStateAsync<T>
  nameWithType.vb: IActorStateManager.GetStateAsync(Of T)
  fullname.vb: Microsoft.ServiceFabric.Actors.Runtime.IActorStateManager.GetStateAsync(Of T)
  name.vb: GetStateAsync(Of T)
- uid: System.Collections.Generic.KeyNotFoundException
  commentId: T:System.Collections.Generic.KeyNotFoundException
- uid: System.Threading.Tasks.Task{{T}}
  commentId: T:System.Threading.Tasks.Task{``0}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<T>
  nameWithType: Task<T>
  fullName: System.Threading.Tasks.Task<T>
  nameWithType.vb: Task(Of T)
  fullname.vb: System.Threading.Tasks.Task(Of T)
  name.vb: Task(Of T)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullname.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceFabric.Actors.Runtime.IActorStateManager.SetStateAsync*
  commentId: Overload:Microsoft.ServiceFabric.Actors.Runtime.IActorStateManager.SetStateAsync
  isExternal: false
  name: SetStateAsync<T>
  nameWithType: IActorStateManager.SetStateAsync<T>
  fullName: Microsoft.ServiceFabric.Actors.Runtime.IActorStateManager.SetStateAsync<T>
  nameWithType.vb: IActorStateManager.SetStateAsync(Of T)
  fullname.vb: Microsoft.ServiceFabric.Actors.Runtime.IActorStateManager.SetStateAsync(Of T)
  name.vb: SetStateAsync(Of T)
- uid: Microsoft.ServiceFabric.Actors.Runtime.IActorStateManager.RemoveStateAsync*
  commentId: Overload:Microsoft.ServiceFabric.Actors.Runtime.IActorStateManager.RemoveStateAsync
  isExternal: false
  name: RemoveStateAsync
  nameWithType: IActorStateManager.RemoveStateAsync
  fullName: Microsoft.ServiceFabric.Actors.Runtime.IActorStateManager.RemoveStateAsync
- uid: Microsoft.ServiceFabric.Actors.Runtime.IActorStateManager.TryAddStateAsync*
  commentId: Overload:Microsoft.ServiceFabric.Actors.Runtime.IActorStateManager.TryAddStateAsync
  isExternal: false
  name: TryAddStateAsync<T>
  nameWithType: IActorStateManager.TryAddStateAsync<T>
  fullName: Microsoft.ServiceFabric.Actors.Runtime.IActorStateManager.TryAddStateAsync<T>
  nameWithType.vb: IActorStateManager.TryAddStateAsync(Of T)
  fullname.vb: Microsoft.ServiceFabric.Actors.Runtime.IActorStateManager.TryAddStateAsync(Of T)
  name.vb: TryAddStateAsync(Of T)
- uid: System.Threading.Tasks.Task{System.Boolean}
  commentId: T:System.Threading.Tasks.Task{System.Boolean}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Boolean>
  nameWithType: Task<Boolean>
  fullName: System.Threading.Tasks.Task<System.Boolean>
  nameWithType.vb: Task(Of Boolean)
  fullname.vb: System.Threading.Tasks.Task(Of System.Boolean)
  name.vb: Task(Of Boolean)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceFabric.Data.ConditionalValue`1
  commentId: T:Microsoft.ServiceFabric.Data.ConditionalValue`1
  isExternal: false
  name: ConditionalValue<TValue>
  nameWithType: ConditionalValue<TValue>
  fullName: Microsoft.ServiceFabric.Data.ConditionalValue<TValue>
  nameWithType.vb: ConditionalValue(Of TValue)
  fullname.vb: Microsoft.ServiceFabric.Data.ConditionalValue(Of TValue)
  name.vb: ConditionalValue(Of TValue)
  spec.csharp:
  - uid: Microsoft.ServiceFabric.Data.ConditionalValue`1
    name: ConditionalValue
    nameWithType: ConditionalValue
    fullName: Microsoft.ServiceFabric.Data.ConditionalValue
  - name: <
    nameWithType: <
    fullName: <
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.ServiceFabric.Data.ConditionalValue`1
    name: ConditionalValue
    nameWithType: ConditionalValue
    fullName: Microsoft.ServiceFabric.Data.ConditionalValue
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceFabric.Actors.Runtime.IActorStateManager.TryGetStateAsync*
  commentId: Overload:Microsoft.ServiceFabric.Actors.Runtime.IActorStateManager.TryGetStateAsync
  isExternal: false
  name: TryGetStateAsync<T>
  nameWithType: IActorStateManager.TryGetStateAsync<T>
  fullName: Microsoft.ServiceFabric.Actors.Runtime.IActorStateManager.TryGetStateAsync<T>
  nameWithType.vb: IActorStateManager.TryGetStateAsync(Of T)
  fullname.vb: Microsoft.ServiceFabric.Actors.Runtime.IActorStateManager.TryGetStateAsync(Of T)
  name.vb: TryGetStateAsync(Of T)
- uid: System.Threading.Tasks.Task{Microsoft.ServiceFabric.Data.ConditionalValue{{T}}}
  commentId: T:System.Threading.Tasks.Task{Microsoft.ServiceFabric.Data.ConditionalValue{``0}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<ConditionalValue<T>>
  nameWithType: Task<ConditionalValue<T>>
  fullName: System.Threading.Tasks.Task<Microsoft.ServiceFabric.Data.ConditionalValue<T>>
  nameWithType.vb: Task(Of ConditionalValue(Of T))
  fullname.vb: System.Threading.Tasks.Task(Of Microsoft.ServiceFabric.Data.ConditionalValue(Of T))
  name.vb: Task(Of ConditionalValue(Of T))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.ServiceFabric.Data.ConditionalValue`1
    name: ConditionalValue
    nameWithType: ConditionalValue
    fullName: Microsoft.ServiceFabric.Data.ConditionalValue
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.ServiceFabric.Data.ConditionalValue`1
    name: ConditionalValue
    nameWithType: ConditionalValue
    fullName: Microsoft.ServiceFabric.Data.ConditionalValue
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceFabric.Actors.Runtime.IActorStateManager.TryRemoveStateAsync*
  commentId: Overload:Microsoft.ServiceFabric.Actors.Runtime.IActorStateManager.TryRemoveStateAsync
  isExternal: false
  name: TryRemoveStateAsync
  nameWithType: IActorStateManager.TryRemoveStateAsync
  fullName: Microsoft.ServiceFabric.Actors.Runtime.IActorStateManager.TryRemoveStateAsync
- uid: Microsoft.ServiceFabric.Actors.Runtime.IActorStateManager.ContainsStateAsync*
  commentId: Overload:Microsoft.ServiceFabric.Actors.Runtime.IActorStateManager.ContainsStateAsync
  isExternal: false
  name: ContainsStateAsync
  nameWithType: IActorStateManager.ContainsStateAsync
  fullName: Microsoft.ServiceFabric.Actors.Runtime.IActorStateManager.ContainsStateAsync
- uid: Microsoft.ServiceFabric.Actors.Runtime.IActorStateManager.GetOrAddStateAsync*
  commentId: Overload:Microsoft.ServiceFabric.Actors.Runtime.IActorStateManager.GetOrAddStateAsync
  isExternal: false
  name: GetOrAddStateAsync<T>
  nameWithType: IActorStateManager.GetOrAddStateAsync<T>
  fullName: Microsoft.ServiceFabric.Actors.Runtime.IActorStateManager.GetOrAddStateAsync<T>
  nameWithType.vb: IActorStateManager.GetOrAddStateAsync(Of T)
  fullname.vb: Microsoft.ServiceFabric.Actors.Runtime.IActorStateManager.GetOrAddStateAsync(Of T)
  name.vb: GetOrAddStateAsync(Of T)
- uid: Microsoft.ServiceFabric.Actors.Runtime.IActorStateManager.AddOrUpdateStateAsync*
  commentId: Overload:Microsoft.ServiceFabric.Actors.Runtime.IActorStateManager.AddOrUpdateStateAsync
  isExternal: false
  name: AddOrUpdateStateAsync<T>
  nameWithType: IActorStateManager.AddOrUpdateStateAsync<T>
  fullName: Microsoft.ServiceFabric.Actors.Runtime.IActorStateManager.AddOrUpdateStateAsync<T>
  nameWithType.vb: IActorStateManager.AddOrUpdateStateAsync(Of T)
  fullname.vb: Microsoft.ServiceFabric.Actors.Runtime.IActorStateManager.AddOrUpdateStateAsync(Of T)
  name.vb: AddOrUpdateStateAsync(Of T)
- uid: System.Func{System.String,{T},{T}}
  commentId: T:System.Func{System.String,``0,``0}
  parent: System
  definition: System.Func`3
  name: Func<String, T, T>
  nameWithType: Func<String, T, T>
  fullName: System.Func<System.String, T, T>
  nameWithType.vb: Func(Of String, T, T)
  fullname.vb: System.Func(Of System.String, T, T)
  name.vb: Func(Of String, T, T)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`3
  commentId: T:System.Func`3
  isExternal: true
  name: Func<T1, T2, TResult>
  nameWithType: Func<T1, T2, TResult>
  fullName: System.Func<T1, T2, TResult>
  nameWithType.vb: Func(Of T1, T2, TResult)
  fullname.vb: System.Func(Of T1, T2, TResult)
  name.vb: Func(Of T1, T2, TResult)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceFabric.Actors.Runtime.IActorStateManager.GetStateNamesAsync*
  commentId: Overload:Microsoft.ServiceFabric.Actors.Runtime.IActorStateManager.GetStateNamesAsync
  isExternal: false
  name: GetStateNamesAsync
  nameWithType: IActorStateManager.GetStateNamesAsync
  fullName: Microsoft.ServiceFabric.Actors.Runtime.IActorStateManager.GetStateNamesAsync
- uid: System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{System.String}}
  commentId: T:System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{System.String}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<IEnumerable<String>>
  nameWithType: Task<IEnumerable<String>>
  fullName: System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<System.String>>
  nameWithType.vb: Task(Of IEnumerable(Of String))
  fullname.vb: System.Threading.Tasks.Task(Of System.Collections.Generic.IEnumerable(Of System.String))
  name.vb: Task(Of IEnumerable(Of String))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceFabric.Actors.Runtime.IActorStateManager
  commentId: T:Microsoft.ServiceFabric.Actors.Runtime.IActorStateManager
  parent: Microsoft.ServiceFabric.Actors.Runtime
  isExternal: false
  name: IActorStateManager
  nameWithType: IActorStateManager
  fullName: Microsoft.ServiceFabric.Actors.Runtime.IActorStateManager
- uid: Microsoft.ServiceFabric.Actors.Runtime.IActorStateManager.ClearCacheAsync*
  commentId: Overload:Microsoft.ServiceFabric.Actors.Runtime.IActorStateManager.ClearCacheAsync
  isExternal: false
  name: ClearCacheAsync
  nameWithType: IActorStateManager.ClearCacheAsync
  fullName: Microsoft.ServiceFabric.Actors.Runtime.IActorStateManager.ClearCacheAsync
- uid: Microsoft.ServiceFabric.Actors.Runtime.IActorStateManager.SaveStateAsync(System.Threading.CancellationToken)
  commentId: M:Microsoft.ServiceFabric.Actors.Runtime.IActorStateManager.SaveStateAsync(System.Threading.CancellationToken)
- uid: Microsoft.ServiceFabric.Actors.Runtime.IActorStateManager.SaveStateAsync*
  commentId: Overload:Microsoft.ServiceFabric.Actors.Runtime.IActorStateManager.SaveStateAsync
  isExternal: false
  name: SaveStateAsync
  nameWithType: IActorStateManager.SaveStateAsync
  fullName: Microsoft.ServiceFabric.Actors.Runtime.IActorStateManager.SaveStateAsync
