### YamlMime:ManagedReference
items:
- uid: System.Fabric.FaultType
  commentId: T:System.Fabric.FaultType
  id: FaultType
  parent: System.Fabric
  children:
  - System.Fabric.FaultType.Invalid
  - System.Fabric.FaultType.Permanent
  - System.Fabric.FaultType.Transient
  langs:
  - csharp
  - vb
  name: FaultType
  nameWithType: FaultType
  fullName: System.Fabric.FaultType
  type: Enum
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FaultType.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: FaultType
    path: src/prod/src/managed/Api/src/System/Fabric/FaultType.cs
    startLine: 14
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Indicates the type of fault that a service reports: invalid, transient or permanent. </p>\n"
  remarks: "\n<p>Services can report faults during runtime by using the <xref href=\"System.Fabric.IServicePartition.ReportFault(System.Fabric.FaultType)\" data-throw-if-not-resolved=\"false\"></xref> method to indicate the type of fault.</p>\n"
  example: []
  syntax:
    content: public enum FaultType
    content.vb: Public Enum FaultType
  extensionMethods:
  - System.Fabric.FaultType.System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
  modifiers.csharp:
  - public
  - enum
  modifiers.vb:
  - Public
  - Enum
- uid: System.Fabric.FaultType.Invalid
  commentId: F:System.Fabric.FaultType.Invalid
  id: Invalid
  parent: System.Fabric.FaultType
  langs:
  - csharp
  - vb
  name: Invalid
  nameWithType: FaultType.Invalid
  fullName: System.Fabric.FaultType.Invalid
  type: Field
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FaultType.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: Invalid
    path: src/prod/src/managed/Api/src/System/Fabric/FaultType.cs
    startLine: 19
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>The type is invalid.</p>\n"
  example: []
  syntax:
    content: Invalid = 0
    return:
      type: System.Fabric.FaultType
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Fabric.FaultType.Permanent
  commentId: F:System.Fabric.FaultType.Permanent
  id: Permanent
  parent: System.Fabric.FaultType
  langs:
  - csharp
  - vb
  name: Permanent
  nameWithType: FaultType.Permanent
  fullName: System.Fabric.FaultType.Permanent
  type: Field
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FaultType.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: Permanent
    path: src/prod/src/managed/Api/src/System/Fabric/FaultType.cs
    startLine: 26
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>A permanent fault is a fault that the replica cannot recover from. This type of fault indicates that the replica can make no further progress and should be removed and replaced. </p>\n"
  remarks: "\n<p>An example of a permanent fault would be a persistent stateful service that tries to write information to disk and determines that the disk had been removed or was unusable. Calling <xref href=\"System.Fabric.IServicePartition.ReportFault(System.Fabric.FaultType)\" data-throw-if-not-resolved=\"false\"></xref> and reporting a permanent fault result in the service to be Aborted via <strong>IStatefulServiceReplica.</strong><xref href=\"System.Fabric.IStatefulServiceReplica.Abort\" data-throw-if-not-resolved=\"false\"></xref> or <strong>IStatelessServiceInstance.</strong><xref href=\"System.Fabric.IStatelessServiceInstance.Abort\" data-throw-if-not-resolved=\"false\"></xref> without a chance to gracefully clean up state or complete operations. Therefore, if any cleanup or other long-running work is necessary, it should be performed before <xref href=\"System.Fabric.IServicePartition.ReportFault(System.Fabric.FaultType)\" data-throw-if-not-resolved=\"false\"></xref> is called. Note that the distinction between permanent and transient faults is useful mainly for persistent stateful services. Other than the call sequence, the effects on other service types are the same: the replica or instance is removed, all state at that replica or instance is lost, and the replica or instance is recreated, potentially in a different location.</p>\n"
  example: []
  syntax:
    content: Permanent = 1
    return:
      type: System.Fabric.FaultType
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Fabric.FaultType.Transient
  commentId: F:System.Fabric.FaultType.Transient
  id: Transient
  parent: System.Fabric.FaultType
  langs:
  - csharp
  - vb
  name: Transient
  nameWithType: FaultType.Transient
  fullName: System.Fabric.FaultType.Transient
  type: Field
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FaultType.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: Transient
    path: src/prod/src/managed/Api/src/System/Fabric/FaultType.cs
    startLine: 33
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>A transient fault indicates that there is some temporary condition which prevents the replica from making further progress or from processing further user requests. </p>\n"
  remarks: "\n<p>An example of a transient fault is a service that determines that a portion of its state or some reference file is corrupted, but can be repaired if the service were to be re-initialized. In this case, the service uses the <xref href=\"System.Fabric.IServicePartition.ReportFault(System.Fabric.FaultType)\" data-throw-if-not-resolved=\"false\"></xref> method to report a transient fault. Reporting a transient fault closes the service via <strong>IStatefulServiceReplica.</strong><xref href=\"System.Fabric.IStatefulServiceReplica.CloseAsync(System.Threading.CancellationToken)\" data-throw-if-not-resolved=\"false\"></xref> or <strong>IStatelessServiceInstance.</strong><xref href=\"System.Fabric.IStatelessServiceInstance.CloseAsync(System.Threading.CancellationToken)\" data-throw-if-not-resolved=\"false\"></xref>. Note that for stateless and stateful services, volatile transient faults are not very useful because state is not preserved across the failure. For these services, whether to use transient or permanent faults is dependent on whether the service should be gracefully closed asynchronously with cleanup or ungracefully closed with a synchronous <strong>IStatefulServiceReplica.</strong><xref href=\"System.Fabric.IStatefulServiceReplica.Abort\" data-throw-if-not-resolved=\"false\"></xref> or <strong>IStatelessServiceInstance.</strong><xref href=\"System.Fabric.IStatelessServiceInstance.Abort\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n"
  example: []
  syntax:
    content: Transient = 2
    return:
      type: System.Fabric.FaultType
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
references:
- uid: System.Fabric.IServicePartition.ReportFault(System.Fabric.FaultType)
  commentId: M:System.Fabric.IServicePartition.ReportFault(System.Fabric.FaultType)
  parent: System.Fabric.IServicePartition
  isExternal: false
  name: ReportFault(FaultType)
  nameWithType: IServicePartition.ReportFault(FaultType)
  fullName: System.Fabric.IServicePartition.ReportFault(System.Fabric.FaultType)
  spec.csharp:
  - uid: System.Fabric.IServicePartition.ReportFault(System.Fabric.FaultType)
    name: ReportFault
    nameWithType: IServicePartition.ReportFault
    fullName: System.Fabric.IServicePartition.ReportFault
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Fabric.FaultType
    name: FaultType
    nameWithType: FaultType
    fullName: System.Fabric.FaultType
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Fabric.IServicePartition.ReportFault(System.Fabric.FaultType)
    name: ReportFault
    nameWithType: IServicePartition.ReportFault
    fullName: System.Fabric.IServicePartition.ReportFault
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Fabric.FaultType
    name: FaultType
    nameWithType: FaultType
    fullName: System.Fabric.FaultType
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric
  commentId: N:System.Fabric
  isExternal: false
  name: System.Fabric
  nameWithType: System.Fabric
  fullName: System.Fabric
- uid: System.Fabric.FaultType.System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
  commentId: M:System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  parent: System.Fabric.Messaging.Stream.ByteArraySerializer
  definition: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  name: Serialize<FaultType>()
  nameWithType: ByteArraySerializer.Serialize<FaultType>()
  fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<System.Fabric.FaultType>()
  nameWithType.vb: ByteArraySerializer.Serialize(Of FaultType)()
  fullname.vb: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of System.Fabric.FaultType)()
  name.vb: Serialize(Of FaultType)()
  spec.csharp:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
    name: Serialize<FaultType>
    nameWithType: ByteArraySerializer.Serialize<FaultType>
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<System.Fabric.FaultType>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
    name: Serialize(Of FaultType)
    nameWithType: ByteArraySerializer.Serialize(Of FaultType)
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of System.Fabric.FaultType)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.IServicePartition
  commentId: T:System.Fabric.IServicePartition
  parent: System.Fabric
  isExternal: false
  name: IServicePartition
  nameWithType: IServicePartition
  fullName: System.Fabric.IServicePartition
- uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  commentId: M:System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  isExternal: false
  name: Serialize<T>(T)
  nameWithType: ByteArraySerializer.Serialize<T>(T)
  fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<T>(T)
  nameWithType.vb: ByteArraySerializer.Serialize(Of T)(T)
  fullname.vb: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of T)(T)
  name.vb: Serialize(Of T)(T)
  spec.csharp:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
    name: Serialize<T>
    nameWithType: ByteArraySerializer.Serialize<T>
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
    name: Serialize(Of T)
    nameWithType: ByteArraySerializer.Serialize(Of T)
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.Messaging.Stream.ByteArraySerializer
  commentId: T:System.Fabric.Messaging.Stream.ByteArraySerializer
  parent: System.Fabric.Messaging.Stream
  isExternal: false
  name: ByteArraySerializer
  nameWithType: ByteArraySerializer
  fullName: System.Fabric.Messaging.Stream.ByteArraySerializer
- uid: System.Fabric.Messaging.Stream
  commentId: N:System.Fabric.Messaging.Stream
  isExternal: false
  name: System.Fabric.Messaging.Stream
  nameWithType: System.Fabric.Messaging.Stream
  fullName: System.Fabric.Messaging.Stream
- uid: System.Fabric.FaultType
  commentId: T:System.Fabric.FaultType
  parent: System.Fabric
  isExternal: false
  name: FaultType
  nameWithType: FaultType
  fullName: System.Fabric.FaultType
- uid: System.Fabric.IStatefulServiceReplica.Abort
  commentId: M:System.Fabric.IStatefulServiceReplica.Abort
  parent: System.Fabric.IStatefulServiceReplica
  isExternal: false
  name: Abort()
  nameWithType: IStatefulServiceReplica.Abort()
  fullName: System.Fabric.IStatefulServiceReplica.Abort()
  spec.csharp:
  - uid: System.Fabric.IStatefulServiceReplica.Abort
    name: Abort
    nameWithType: IStatefulServiceReplica.Abort
    fullName: System.Fabric.IStatefulServiceReplica.Abort
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Fabric.IStatefulServiceReplica.Abort
    name: Abort
    nameWithType: IStatefulServiceReplica.Abort
    fullName: System.Fabric.IStatefulServiceReplica.Abort
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.IStatelessServiceInstance.Abort
  commentId: M:System.Fabric.IStatelessServiceInstance.Abort
- uid: System.Fabric.IStatefulServiceReplica
  commentId: T:System.Fabric.IStatefulServiceReplica
  parent: System.Fabric
  isExternal: false
  name: IStatefulServiceReplica
  nameWithType: IStatefulServiceReplica
  fullName: System.Fabric.IStatefulServiceReplica
- uid: System.Fabric.IStatefulServiceReplica.CloseAsync(System.Threading.CancellationToken)
  commentId: M:System.Fabric.IStatefulServiceReplica.CloseAsync(System.Threading.CancellationToken)
  parent: System.Fabric.IStatefulServiceReplica
  isExternal: true
  name: CloseAsync(CancellationToken)
  nameWithType: IStatefulServiceReplica.CloseAsync(CancellationToken)
  fullName: System.Fabric.IStatefulServiceReplica.CloseAsync(System.Threading.CancellationToken)
  spec.csharp:
  - uid: System.Fabric.IStatefulServiceReplica.CloseAsync(System.Threading.CancellationToken)
    name: CloseAsync
    nameWithType: IStatefulServiceReplica.CloseAsync
    fullName: System.Fabric.IStatefulServiceReplica.CloseAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Fabric.IStatefulServiceReplica.CloseAsync(System.Threading.CancellationToken)
    name: CloseAsync
    nameWithType: IStatefulServiceReplica.CloseAsync
    fullName: System.Fabric.IStatefulServiceReplica.CloseAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.IStatelessServiceInstance.CloseAsync(System.Threading.CancellationToken)
  commentId: M:System.Fabric.IStatelessServiceInstance.CloseAsync(System.Threading.CancellationToken)
