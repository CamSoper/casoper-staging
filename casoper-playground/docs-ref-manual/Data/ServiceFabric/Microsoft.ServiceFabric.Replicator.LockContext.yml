### YamlMime:ManagedReference
items:
- uid: Microsoft.ServiceFabric.Replicator.LockContext
  commentId: T:Microsoft.ServiceFabric.Replicator.LockContext
  id: LockContext
  parent: Microsoft.ServiceFabric.Replicator
  children:
  - Microsoft.ServiceFabric.Replicator.LockContext.#ctor
  - Microsoft.ServiceFabric.Replicator.LockContext.#ctor(Microsoft.ServiceFabric.Replicator.ILockManager)
  - Microsoft.ServiceFabric.Replicator.LockContext.IsEqual(System.Object)
  - Microsoft.ServiceFabric.Replicator.LockContext.IsTrackingContext
  - Microsoft.ServiceFabric.Replicator.LockContext.Unlock
  langs:
  - csharp
  - vb
  name: LockContext
  nameWithType: LockContext
  fullName: Microsoft.ServiceFabric.Replicator.LockContext
  type: Class
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Impl/Replicator/LockContext.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: LockContext
    path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Impl/Replicator/LockContext.cs
    startLine: 10
  assemblies:
  - Microsoft.ServiceFabric.Data.Impl
  namespace: Microsoft.ServiceFabric.Replicator
  summary: "\nThis is for internal use only.\nContext for the lock.\n"
  example: []
  syntax:
    content: public abstract class LockContext
    content.vb: Public MustInherit Class LockContext
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  extensionMethods:
  - Microsoft.ServiceFabric.Replicator.LockContext.System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: Microsoft.ServiceFabric.Replicator.LockContext.#ctor
  commentId: M:Microsoft.ServiceFabric.Replicator.LockContext.#ctor
  id: '#ctor'
  parent: Microsoft.ServiceFabric.Replicator.LockContext
  langs:
  - csharp
  - vb
  name: LockContext()
  nameWithType: LockContext.LockContext()
  fullName: Microsoft.ServiceFabric.Replicator.LockContext.LockContext()
  type: Constructor
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Impl/Replicator/LockContext.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: .ctor
    path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Impl/Replicator/LockContext.cs
    startLine: 25
  assemblies:
  - Microsoft.ServiceFabric.Data.Impl
  namespace: Microsoft.ServiceFabric.Replicator
  summary: "\nInitializes a new instance of the <xref href=\"Microsoft.ServiceFabric.Replicator.LockContext\" data-throw-if-not-resolved=\"false\"></xref> class. \n"
  example: []
  syntax:
    content: protected LockContext()
    content.vb: Protected Sub New
  overload: Microsoft.ServiceFabric.Replicator.LockContext.#ctor*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: Microsoft.ServiceFabric.Replicator.LockContext.#ctor(Microsoft.ServiceFabric.Replicator.ILockManager)
  commentId: M:Microsoft.ServiceFabric.Replicator.LockContext.#ctor(Microsoft.ServiceFabric.Replicator.ILockManager)
  id: '#ctor(Microsoft.ServiceFabric.Replicator.ILockManager)'
  parent: Microsoft.ServiceFabric.Replicator.LockContext
  langs:
  - csharp
  - vb
  name: LockContext(ILockManager)
  nameWithType: LockContext.LockContext(ILockManager)
  fullName: Microsoft.ServiceFabric.Replicator.LockContext.LockContext(Microsoft.ServiceFabric.Replicator.ILockManager)
  type: Constructor
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Impl/Replicator/LockContext.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: .ctor
    path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Impl/Replicator/LockContext.cs
    startLine: 33
  assemblies:
  - Microsoft.ServiceFabric.Data.Impl
  namespace: Microsoft.ServiceFabric.Replicator
  summary: "\nInitializes a new instance of the <xref href=\"Microsoft.ServiceFabric.Replicator.LockContext\" data-throw-if-not-resolved=\"false\"></xref> class. \n"
  example: []
  syntax:
    content: protected LockContext(ILockManager lockManager)
    content.vb: Protected Sub New(lockManager As ILockManager)
    parameters:
    - id: lockManager
      type: Microsoft.ServiceFabric.Replicator.ILockManager
      description: lock manager
  overload: Microsoft.ServiceFabric.Replicator.LockContext.#ctor*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: Microsoft.ServiceFabric.Replicator.LockContext.IsTrackingContext
  commentId: P:Microsoft.ServiceFabric.Replicator.LockContext.IsTrackingContext
  id: IsTrackingContext
  parent: Microsoft.ServiceFabric.Replicator.LockContext
  langs:
  - csharp
  - vb
  name: IsTrackingContext
  nameWithType: LockContext.IsTrackingContext
  fullName: Microsoft.ServiceFabric.Replicator.LockContext.IsTrackingContext
  type: Property
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Impl/Replicator/LockContext.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: IsTrackingContext
    path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Impl/Replicator/LockContext.cs
    startLine: 42
  assemblies:
  - Microsoft.ServiceFabric.Data.Impl
  namespace: Microsoft.ServiceFabric.Replicator
  summary: "\nGets or sets a value indicating tracking context.\n"
  example: []
  syntax:
    content: public bool IsTrackingContext { get; set; }
    content.vb: Public Property IsTrackingContext As Boolean
    parameters: []
    return:
      type: System.Boolean
  overload: Microsoft.ServiceFabric.Replicator.LockContext.IsTrackingContext*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.ServiceFabric.Replicator.LockContext.Unlock
  commentId: M:Microsoft.ServiceFabric.Replicator.LockContext.Unlock
  id: Unlock
  parent: Microsoft.ServiceFabric.Replicator.LockContext
  langs:
  - csharp
  - vb
  name: Unlock()
  nameWithType: LockContext.Unlock()
  fullName: Microsoft.ServiceFabric.Replicator.LockContext.Unlock()
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Impl/Replicator/LockContext.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: Unlock
    path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Impl/Replicator/LockContext.cs
    startLine: 60
  assemblies:
  - Microsoft.ServiceFabric.Data.Impl
  namespace: Microsoft.ServiceFabric.Replicator
  summary: "\nReleases locks.\n"
  example: []
  syntax:
    content: public virtual void Unlock()
    content.vb: Public Overridable Sub Unlock
  overload: Microsoft.ServiceFabric.Replicator.LockContext.Unlock*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.ServiceFabric.Replicator.LockContext.IsEqual(System.Object)
  commentId: M:Microsoft.ServiceFabric.Replicator.LockContext.IsEqual(System.Object)
  id: IsEqual(System.Object)
  parent: Microsoft.ServiceFabric.Replicator.LockContext
  langs:
  - csharp
  - vb
  name: IsEqual(Object)
  nameWithType: LockContext.IsEqual(Object)
  fullName: Microsoft.ServiceFabric.Replicator.LockContext.IsEqual(System.Object)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Impl/Replicator/LockContext.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: IsEqual
    path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Impl/Replicator/LockContext.cs
    startLine: 83
  assemblies:
  - Microsoft.ServiceFabric.Data.Impl
  namespace: Microsoft.ServiceFabric.Replicator
  summary: "\nGets a value that indicates if the states are equal.\n"
  example: []
  syntax:
    content: protected abstract bool IsEqual(object stateOrKey)
    content.vb: Protected MustOverride Function IsEqual(stateOrKey As Object) As Boolean
    parameters:
    - id: stateOrKey
      type: System.Object
      description: ''
    return:
      type: System.Boolean
      description: ''
  overload: Microsoft.ServiceFabric.Replicator.LockContext.IsEqual*
  modifiers.csharp:
  - protected
  - abstract
  modifiers.vb:
  - Protected
  - MustOverride
references:
- uid: Microsoft.ServiceFabric.Replicator
  commentId: N:Microsoft.ServiceFabric.Replicator
  isExternal: false
  name: Microsoft.ServiceFabric.Replicator
  nameWithType: Microsoft.ServiceFabric.Replicator
  fullName: Microsoft.ServiceFabric.Replicator
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceFabric.Replicator.LockContext.System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
  commentId: M:System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  parent: System.Fabric.Messaging.Stream.ByteArraySerializer
  definition: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  name: Serialize<LockContext>()
  nameWithType: ByteArraySerializer.Serialize<LockContext>()
  fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<Microsoft.ServiceFabric.Replicator.LockContext>()
  nameWithType.vb: ByteArraySerializer.Serialize(Of LockContext)()
  fullname.vb: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of Microsoft.ServiceFabric.Replicator.LockContext)()
  name.vb: Serialize(Of LockContext)()
  spec.csharp:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
    name: Serialize<LockContext>
    nameWithType: ByteArraySerializer.Serialize<LockContext>
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<Microsoft.ServiceFabric.Replicator.LockContext>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
    name: Serialize(Of LockContext)
    nameWithType: ByteArraySerializer.Serialize(Of LockContext)
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of Microsoft.ServiceFabric.Replicator.LockContext)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  commentId: M:System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  isExternal: false
  name: Serialize<T>(T)
  nameWithType: ByteArraySerializer.Serialize<T>(T)
  fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<T>(T)
  nameWithType.vb: ByteArraySerializer.Serialize(Of T)(T)
  fullname.vb: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of T)(T)
  name.vb: Serialize(Of T)(T)
  spec.csharp:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
    name: Serialize<T>
    nameWithType: ByteArraySerializer.Serialize<T>
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
    name: Serialize(Of T)
    nameWithType: ByteArraySerializer.Serialize(Of T)
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.Messaging.Stream.ByteArraySerializer
  commentId: T:System.Fabric.Messaging.Stream.ByteArraySerializer
  parent: System.Fabric.Messaging.Stream
  isExternal: false
  name: ByteArraySerializer
  nameWithType: ByteArraySerializer
  fullName: System.Fabric.Messaging.Stream.ByteArraySerializer
- uid: System.Fabric.Messaging.Stream
  commentId: N:System.Fabric.Messaging.Stream
  isExternal: false
  name: System.Fabric.Messaging.Stream
  nameWithType: System.Fabric.Messaging.Stream
  fullName: System.Fabric.Messaging.Stream
- uid: Microsoft.ServiceFabric.Replicator.LockContext
  commentId: T:Microsoft.ServiceFabric.Replicator.LockContext
  parent: Microsoft.ServiceFabric.Replicator
  isExternal: false
  name: LockContext
  nameWithType: LockContext
  fullName: Microsoft.ServiceFabric.Replicator.LockContext
- uid: Microsoft.ServiceFabric.Replicator.LockContext.#ctor*
  commentId: Overload:Microsoft.ServiceFabric.Replicator.LockContext.#ctor
  isExternal: false
  name: LockContext
  nameWithType: LockContext.LockContext
  fullName: Microsoft.ServiceFabric.Replicator.LockContext.LockContext
- uid: Microsoft.ServiceFabric.Replicator.ILockManager
  commentId: T:Microsoft.ServiceFabric.Replicator.ILockManager
  parent: Microsoft.ServiceFabric.Replicator
  isExternal: false
  name: ILockManager
  nameWithType: ILockManager
  fullName: Microsoft.ServiceFabric.Replicator.ILockManager
- uid: Microsoft.ServiceFabric.Replicator.LockContext.IsTrackingContext*
  commentId: Overload:Microsoft.ServiceFabric.Replicator.LockContext.IsTrackingContext
  isExternal: false
  name: IsTrackingContext
  nameWithType: LockContext.IsTrackingContext
  fullName: Microsoft.ServiceFabric.Replicator.LockContext.IsTrackingContext
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Microsoft.ServiceFabric.Replicator.LockContext.Unlock*
  commentId: Overload:Microsoft.ServiceFabric.Replicator.LockContext.Unlock
  isExternal: false
  name: Unlock
  nameWithType: LockContext.Unlock
  fullName: Microsoft.ServiceFabric.Replicator.LockContext.Unlock
- uid: Microsoft.ServiceFabric.Replicator.LockContext.IsEqual*
  commentId: Overload:Microsoft.ServiceFabric.Replicator.LockContext.IsEqual
  isExternal: false
  name: IsEqual
  nameWithType: LockContext.IsEqual
  fullName: Microsoft.ServiceFabric.Replicator.LockContext.IsEqual
