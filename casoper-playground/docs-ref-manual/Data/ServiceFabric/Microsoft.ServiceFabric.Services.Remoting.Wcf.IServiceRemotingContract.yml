### YamlMime:ManagedReference
items:
- uid: Microsoft.ServiceFabric.Services.Remoting.Wcf.IServiceRemotingContract
  commentId: T:Microsoft.ServiceFabric.Services.Remoting.Wcf.IServiceRemotingContract
  id: IServiceRemotingContract
  parent: Microsoft.ServiceFabric.Services.Remoting.Wcf
  children:
  - Microsoft.ServiceFabric.Services.Remoting.Wcf.IServiceRemotingContract.OneWayMessage(Microsoft.ServiceFabric.Services.Remoting.ServiceRemotingMessageHeaders,System.Byte[])
  - Microsoft.ServiceFabric.Services.Remoting.Wcf.IServiceRemotingContract.RequestResponseAsync(Microsoft.ServiceFabric.Services.Remoting.ServiceRemotingMessageHeaders,System.Byte[])
  langs:
  - csharp
  - vb
  name: IServiceRemotingContract
  nameWithType: IServiceRemotingContract
  fullName: Microsoft.ServiceFabric.Services.Remoting.Wcf.IServiceRemotingContract
  type: Interface
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Services.Wcf/Remoting/Wcf/IServiceRemotingContract.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: IServiceRemotingContract
    path: src/prod/src/managed/Microsoft.ServiceFabric.Services.Wcf/Remoting/Wcf/IServiceRemotingContract.cs
    startLine: 13
  assemblies:
  - Microsoft.ServiceFabric.Services.Wcf
  namespace: Microsoft.ServiceFabric.Services.Remoting.Wcf
  summary: "\nInterface that defines the contract for WCF service remoting.\n"
  example: []
  syntax:
    content: >-
      [ServiceContract(Namespace = "urn:ServiceFabric.Communication", CallbackContract = typeof (IServiceRemotingCallbackContract))]

      public interface IServiceRemotingContract
    content.vb: >-
      <ServiceContract(Namespace:="urn:ServiceFabric.Communication", CallbackContract:=GetType(IServiceRemotingCallbackContract))>

      Public Interface IServiceRemotingContract
  extensionMethods:
  - Microsoft.ServiceFabric.Services.Remoting.Wcf.IServiceRemotingContract.System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
  attributes:
  - type: System.ServiceModel.ServiceContractAttribute
    ctor: System.ServiceModel.ServiceContractAttribute.#ctor
    arguments: []
    namedArguments:
    - name: Namespace
      type: System.String
      value: urn:ServiceFabric.Communication
    - name: CallbackContract
      type: System.Type
      value: Microsoft.ServiceFabric.Services.Remoting.Wcf.IServiceRemotingCallbackContract
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: Microsoft.ServiceFabric.Services.Remoting.Wcf.IServiceRemotingContract.RequestResponseAsync(Microsoft.ServiceFabric.Services.Remoting.ServiceRemotingMessageHeaders,System.Byte[])
  commentId: M:Microsoft.ServiceFabric.Services.Remoting.Wcf.IServiceRemotingContract.RequestResponseAsync(Microsoft.ServiceFabric.Services.Remoting.ServiceRemotingMessageHeaders,System.Byte[])
  id: RequestResponseAsync(Microsoft.ServiceFabric.Services.Remoting.ServiceRemotingMessageHeaders,System.Byte[])
  parent: Microsoft.ServiceFabric.Services.Remoting.Wcf.IServiceRemotingContract
  langs:
  - csharp
  - vb
  name: RequestResponseAsync(ServiceRemotingMessageHeaders, Byte[])
  nameWithType: IServiceRemotingContract.RequestResponseAsync(ServiceRemotingMessageHeaders, Byte[])
  fullName: Microsoft.ServiceFabric.Services.Remoting.Wcf.IServiceRemotingContract.RequestResponseAsync(Microsoft.ServiceFabric.Services.Remoting.ServiceRemotingMessageHeaders, System.Byte[])
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Services.Wcf/Remoting/Wcf/IServiceRemotingContract.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: RequestResponseAsync
    path: src/prod/src/managed/Microsoft.ServiceFabric.Services.Wcf/Remoting/Wcf/IServiceRemotingContract.cs
    startLine: 25
  assemblies:
  - Microsoft.ServiceFabric.Services.Wcf
  namespace: Microsoft.ServiceFabric.Services.Remoting.Wcf
  summary: "\nSends a message to the client and gets the response.\n"
  example: []
  syntax:
    content: >-
      [OperationContract]

      [FaultContract(typeof (RemoteExceptionInformation))]

      Task<byte[]> RequestResponseAsync(ServiceRemotingMessageHeaders messageHeaders, byte[] requestBody)
    content.vb: >-
      <OperationContract>

      <FaultContract(GetType(RemoteExceptionInformation))>

      Function RequestResponseAsync(messageHeaders As ServiceRemotingMessageHeaders, requestBody As Byte()) As Task(Of Byte())
    parameters:
    - id: messageHeaders
      type: Microsoft.ServiceFabric.Services.Remoting.ServiceRemotingMessageHeaders
      description: Message Headers contains the information needed to deserialize request and to dispatch message to the service.
    - id: requestBody
      type: System.Byte[]
      description: Message Body contains a request in a serialized form.
    return:
      type: System.Threading.Tasks.Task{System.Byte[]}
      description: Response Body is a serialized response recived by the client
  overload: Microsoft.ServiceFabric.Services.Remoting.Wcf.IServiceRemotingContract.RequestResponseAsync*
  attributes:
  - type: System.ServiceModel.OperationContractAttribute
    ctor: System.ServiceModel.OperationContractAttribute.#ctor
    arguments: []
  - type: System.ServiceModel.FaultContractAttribute
    ctor: System.ServiceModel.FaultContractAttribute.#ctor(System.Type)
    arguments:
    - type: System.Type
      value: Microsoft.ServiceFabric.Services.Communication.RemoteExceptionInformation
  nameWithType.vb: IServiceRemotingContract.RequestResponseAsync(ServiceRemotingMessageHeaders, Byte())
  fullName.vb: Microsoft.ServiceFabric.Services.Remoting.Wcf.IServiceRemotingContract.RequestResponseAsync(Microsoft.ServiceFabric.Services.Remoting.ServiceRemotingMessageHeaders, System.Byte())
  name.vb: RequestResponseAsync(ServiceRemotingMessageHeaders, Byte())
- uid: Microsoft.ServiceFabric.Services.Remoting.Wcf.IServiceRemotingContract.OneWayMessage(Microsoft.ServiceFabric.Services.Remoting.ServiceRemotingMessageHeaders,System.Byte[])
  commentId: M:Microsoft.ServiceFabric.Services.Remoting.Wcf.IServiceRemotingContract.OneWayMessage(Microsoft.ServiceFabric.Services.Remoting.ServiceRemotingMessageHeaders,System.Byte[])
  id: OneWayMessage(Microsoft.ServiceFabric.Services.Remoting.ServiceRemotingMessageHeaders,System.Byte[])
  parent: Microsoft.ServiceFabric.Services.Remoting.Wcf.IServiceRemotingContract
  langs:
  - csharp
  - vb
  name: OneWayMessage(ServiceRemotingMessageHeaders, Byte[])
  nameWithType: IServiceRemotingContract.OneWayMessage(ServiceRemotingMessageHeaders, Byte[])
  fullName: Microsoft.ServiceFabric.Services.Remoting.Wcf.IServiceRemotingContract.OneWayMessage(Microsoft.ServiceFabric.Services.Remoting.ServiceRemotingMessageHeaders, System.Byte[])
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Services.Wcf/Remoting/Wcf/IServiceRemotingContract.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: OneWayMessage
    path: src/prod/src/managed/Microsoft.ServiceFabric.Services.Wcf/Remoting/Wcf/IServiceRemotingContract.cs
    startLine: 34
  assemblies:
  - Microsoft.ServiceFabric.Services.Wcf
  namespace: Microsoft.ServiceFabric.Services.Remoting.Wcf
  summary: "\nSends a one way message to the client.\n"
  example: []
  syntax:
    content: >-
      [OperationContract(IsOneWay = true)]

      void OneWayMessage(ServiceRemotingMessageHeaders messageHeaders, byte[] requestBody)
    content.vb: >-
      <OperationContract(IsOneWay:=True)>

      Sub OneWayMessage(messageHeaders As ServiceRemotingMessageHeaders, requestBody As Byte())
    parameters:
    - id: messageHeaders
      type: Microsoft.ServiceFabric.Services.Remoting.ServiceRemotingMessageHeaders
      description: Message Headers contains the information needed to deserialize request and to dispatch message to the service.
    - id: requestBody
      type: System.Byte[]
      description: Message Body contains a serialized message
  overload: Microsoft.ServiceFabric.Services.Remoting.Wcf.IServiceRemotingContract.OneWayMessage*
  attributes:
  - type: System.ServiceModel.OperationContractAttribute
    ctor: System.ServiceModel.OperationContractAttribute.#ctor
    arguments: []
    namedArguments:
    - name: IsOneWay
      type: System.Boolean
      value: true
  nameWithType.vb: IServiceRemotingContract.OneWayMessage(ServiceRemotingMessageHeaders, Byte())
  fullName.vb: Microsoft.ServiceFabric.Services.Remoting.Wcf.IServiceRemotingContract.OneWayMessage(Microsoft.ServiceFabric.Services.Remoting.ServiceRemotingMessageHeaders, System.Byte())
  name.vb: OneWayMessage(ServiceRemotingMessageHeaders, Byte())
references:
- uid: Microsoft.ServiceFabric.Services.Remoting.Wcf
  commentId: N:Microsoft.ServiceFabric.Services.Remoting.Wcf
  isExternal: false
  name: Microsoft.ServiceFabric.Services.Remoting.Wcf
  nameWithType: Microsoft.ServiceFabric.Services.Remoting.Wcf
  fullName: Microsoft.ServiceFabric.Services.Remoting.Wcf
- uid: Microsoft.ServiceFabric.Services.Remoting.Wcf.IServiceRemotingContract.System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
  commentId: M:System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  parent: System.Fabric.Messaging.Stream.ByteArraySerializer
  definition: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  name: Serialize<IServiceRemotingContract>()
  nameWithType: ByteArraySerializer.Serialize<IServiceRemotingContract>()
  fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<Microsoft.ServiceFabric.Services.Remoting.Wcf.IServiceRemotingContract>()
  nameWithType.vb: ByteArraySerializer.Serialize(Of IServiceRemotingContract)()
  fullname.vb: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of Microsoft.ServiceFabric.Services.Remoting.Wcf.IServiceRemotingContract)()
  name.vb: Serialize(Of IServiceRemotingContract)()
  spec.csharp:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
    name: Serialize<IServiceRemotingContract>
    nameWithType: ByteArraySerializer.Serialize<IServiceRemotingContract>
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<Microsoft.ServiceFabric.Services.Remoting.Wcf.IServiceRemotingContract>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
    name: Serialize(Of IServiceRemotingContract)
    nameWithType: ByteArraySerializer.Serialize(Of IServiceRemotingContract)
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of Microsoft.ServiceFabric.Services.Remoting.Wcf.IServiceRemotingContract)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  commentId: M:System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  isExternal: false
  name: Serialize<T>(T)
  nameWithType: ByteArraySerializer.Serialize<T>(T)
  fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<T>(T)
  nameWithType.vb: ByteArraySerializer.Serialize(Of T)(T)
  fullname.vb: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of T)(T)
  name.vb: Serialize(Of T)(T)
  spec.csharp:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
    name: Serialize<T>
    nameWithType: ByteArraySerializer.Serialize<T>
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
    name: Serialize(Of T)
    nameWithType: ByteArraySerializer.Serialize(Of T)
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.Messaging.Stream.ByteArraySerializer
  commentId: T:System.Fabric.Messaging.Stream.ByteArraySerializer
  parent: System.Fabric.Messaging.Stream
  isExternal: false
  name: ByteArraySerializer
  nameWithType: ByteArraySerializer
  fullName: System.Fabric.Messaging.Stream.ByteArraySerializer
- uid: System.Fabric.Messaging.Stream
  commentId: N:System.Fabric.Messaging.Stream
  isExternal: false
  name: System.Fabric.Messaging.Stream
  nameWithType: System.Fabric.Messaging.Stream
  fullName: System.Fabric.Messaging.Stream
- uid: Microsoft.ServiceFabric.Services.Remoting.Wcf.IServiceRemotingContract.RequestResponseAsync*
  commentId: Overload:Microsoft.ServiceFabric.Services.Remoting.Wcf.IServiceRemotingContract.RequestResponseAsync
  isExternal: false
  name: RequestResponseAsync
  nameWithType: IServiceRemotingContract.RequestResponseAsync
  fullName: Microsoft.ServiceFabric.Services.Remoting.Wcf.IServiceRemotingContract.RequestResponseAsync
- uid: Microsoft.ServiceFabric.Services.Remoting.ServiceRemotingMessageHeaders
  commentId: T:Microsoft.ServiceFabric.Services.Remoting.ServiceRemotingMessageHeaders
  parent: Microsoft.ServiceFabric.Services.Remoting
  isExternal: false
  name: ServiceRemotingMessageHeaders
  nameWithType: ServiceRemotingMessageHeaders
  fullName: Microsoft.ServiceFabric.Services.Remoting.ServiceRemotingMessageHeaders
- uid: System.Byte[]
  name: Byte[]
  nameWithType: Byte[]
  fullName: System.Byte[]
  nameWithType.vb: Byte()
  fullname.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Threading.Tasks.Task{System.Byte[]}
  commentId: T:System.Threading.Tasks.Task{System.Byte[]}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Byte[]>
  nameWithType: Task<Byte[]>
  fullName: System.Threading.Tasks.Task<System.Byte[]>
  nameWithType.vb: Task(Of Byte())
  fullname.vb: System.Threading.Tasks.Task(Of System.Byte())
  name.vb: Task(Of Byte())
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceFabric.Services.Remoting
  commentId: N:Microsoft.ServiceFabric.Services.Remoting
  isExternal: false
  name: Microsoft.ServiceFabric.Services.Remoting
  nameWithType: Microsoft.ServiceFabric.Services.Remoting
  fullName: Microsoft.ServiceFabric.Services.Remoting
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullname.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: Microsoft.ServiceFabric.Services.Remoting.Wcf.IServiceRemotingContract.OneWayMessage*
  commentId: Overload:Microsoft.ServiceFabric.Services.Remoting.Wcf.IServiceRemotingContract.OneWayMessage
  isExternal: false
  name: OneWayMessage
  nameWithType: IServiceRemotingContract.OneWayMessage
  fullName: Microsoft.ServiceFabric.Services.Remoting.Wcf.IServiceRemotingContract.OneWayMessage
