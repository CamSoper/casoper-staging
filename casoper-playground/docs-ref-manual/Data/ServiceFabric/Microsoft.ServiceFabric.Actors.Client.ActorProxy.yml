### YamlMime:ManagedReference
items:
- uid: Microsoft.ServiceFabric.Actors.Client.ActorProxy
  commentId: T:Microsoft.ServiceFabric.Actors.Client.ActorProxy
  id: ActorProxy
  parent: Microsoft.ServiceFabric.Actors.Client
  children:
  - Microsoft.ServiceFabric.Actors.Client.ActorProxy.#ctor
  - Microsoft.ServiceFabric.Actors.Client.ActorProxy.Create``1(Microsoft.ServiceFabric.Actors.ActorId,System.String,System.String,System.String)
  - Microsoft.ServiceFabric.Actors.Client.ActorProxy.Create``1(Microsoft.ServiceFabric.Actors.ActorId,System.Uri,System.String)
  - Microsoft.ServiceFabric.Actors.Client.ActorProxy.Microsoft#ServiceFabric#Actors#Client#IActorProxy#ActorId
  - Microsoft.ServiceFabric.Actors.Client.ActorProxy.Microsoft#ServiceFabric#Actors#Client#IActorProxy#ActorServicePartitionClient
  langs:
  - csharp
  - vb
  name: ActorProxy
  nameWithType: ActorProxy
  fullName: Microsoft.ServiceFabric.Actors.Client.ActorProxy
  type: Class
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Actors/Client/ActorProxy.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: ActorProxy
    path: src/prod/src/managed/Microsoft.ServiceFabric.Actors/Client/ActorProxy.cs
    startLine: 19
  assemblies:
  - Microsoft.ServiceFabric.Actors
  namespace: Microsoft.ServiceFabric.Actors.Client
  summary: "\nProvides the base implementation for the proxy to the remote actor objects implementing IActor interfaces.\n"
  example: []
  syntax:
    content: 'public abstract class ActorProxy : ProxyBase, IActorProxy'
    content.vb: >-
      Public MustInherit Class ActorProxy
          Inherits ProxyBase
          Implements IActorProxy
  inheritance:
  - System.Object
  - Microsoft.ServiceFabric.Services.Remoting.Builder.ProxyBase
  implements:
  - Microsoft.ServiceFabric.Actors.Client.IActorProxy
  inheritedMembers:
  - Microsoft.ServiceFabric.Services.Remoting.Builder.ProxyBase.Invoke(System.Int32,System.Int32,System.Object)
  - Microsoft.ServiceFabric.Services.Remoting.Builder.ProxyBase.InvokeAsync(System.Int32,System.Int32,System.Object,System.Threading.CancellationToken)
  - Microsoft.ServiceFabric.Services.Remoting.Builder.ProxyBase.ContinueWithResult``1(System.Int32,System.Int32,System.Threading.Tasks.Task{System.Object})
  - Microsoft.ServiceFabric.Services.Remoting.Builder.ProxyBase.ContinueWith(System.Threading.Tasks.Task{System.Object})
  - Microsoft.ServiceFabric.Services.Remoting.Builder.ProxyBase.GetReturnValue(System.Int32,System.Int32,System.Object)
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  extensionMethods:
  - Microsoft.ServiceFabric.Actors.Client.ActorProxy.System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: Microsoft.ServiceFabric.Actors.Client.ActorProxy.#ctor
  commentId: M:Microsoft.ServiceFabric.Actors.Client.ActorProxy.#ctor
  id: '#ctor'
  parent: Microsoft.ServiceFabric.Actors.Client.ActorProxy
  langs:
  - csharp
  - vb
  name: ActorProxy()
  nameWithType: ActorProxy.ActorProxy()
  fullName: Microsoft.ServiceFabric.Actors.Client.ActorProxy.ActorProxy()
  type: Constructor
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Actors/Client/ActorProxy.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: .ctor
    path: src/prod/src/managed/Microsoft.ServiceFabric.Actors/Client/ActorProxy.cs
    startLine: 29
  assemblies:
  - Microsoft.ServiceFabric.Actors
  namespace: Microsoft.ServiceFabric.Actors.Client
  summary: "\nInitializes a new instance of the ActorProxy class.\n"
  example: []
  syntax:
    content: protected ActorProxy()
    content.vb: Protected Sub New
  overload: Microsoft.ServiceFabric.Actors.Client.ActorProxy.#ctor*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: Microsoft.ServiceFabric.Actors.Client.ActorProxy.Microsoft#ServiceFabric#Actors#Client#IActorProxy#ActorId
  commentId: P:Microsoft.ServiceFabric.Actors.Client.ActorProxy.Microsoft#ServiceFabric#Actors#Client#IActorProxy#ActorId
  id: Microsoft#ServiceFabric#Actors#Client#IActorProxy#ActorId
  isEii: true
  parent: Microsoft.ServiceFabric.Actors.Client.ActorProxy
  langs:
  - csharp
  - vb
  name: IActorProxy.ActorId
  nameWithType: ActorProxy.IActorProxy.ActorId
  fullName: Microsoft.ServiceFabric.Actors.Client.ActorProxy.Microsoft.ServiceFabric.Actors.Client.IActorProxy.ActorId
  type: Property
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Actors/Client/ActorProxy.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: Microsoft.ServiceFabric.Actors.Client.IActorProxy.ActorId
    path: src/prod/src/managed/Microsoft.ServiceFabric.Actors/Client/ActorProxy.cs
    startLine: 37
  assemblies:
  - Microsoft.ServiceFabric.Actors
  namespace: Microsoft.ServiceFabric.Actors.Client
  summary: "\nGets <xref href=\"Microsoft.ServiceFabric.Actors.ActorId\" data-throw-if-not-resolved=\"false\"></xref> associated with the proxy object.\n"
  example: []
  syntax:
    content: ActorId IActorProxy.ActorId { get; }
    content.vb: ReadOnly WriteOnly Property Microsoft.ServiceFabric.Actors.Client.IActorProxy.ActorId As ActorId Implements IActorProxy.ActorId
    parameters: []
    return:
      type: Microsoft.ServiceFabric.Actors.ActorId
      description: <xref href="Microsoft.ServiceFabric.Actors.ActorId" data-throw-if-not-resolved="false"></xref> associated with the proxy object.
  overload: Microsoft.ServiceFabric.Actors.Client.ActorProxy.Microsoft#ServiceFabric#Actors#Client#IActorProxy#ActorId*
  implements:
  - Microsoft.ServiceFabric.Actors.Client.IActorProxy.ActorId
  nameWithType.vb: ActorProxy.Microsoft.ServiceFabric.Actors.Client.IActorProxy.ActorId
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  name.vb: Microsoft.ServiceFabric.Actors.Client.IActorProxy.ActorId
- uid: Microsoft.ServiceFabric.Actors.Client.ActorProxy.Microsoft#ServiceFabric#Actors#Client#IActorProxy#ActorServicePartitionClient
  commentId: P:Microsoft.ServiceFabric.Actors.Client.ActorProxy.Microsoft#ServiceFabric#Actors#Client#IActorProxy#ActorServicePartitionClient
  id: Microsoft#ServiceFabric#Actors#Client#IActorProxy#ActorServicePartitionClient
  isEii: true
  parent: Microsoft.ServiceFabric.Actors.Client.ActorProxy
  langs:
  - csharp
  - vb
  name: IActorProxy.ActorServicePartitionClient
  nameWithType: ActorProxy.IActorProxy.ActorServicePartitionClient
  fullName: Microsoft.ServiceFabric.Actors.Client.ActorProxy.Microsoft.ServiceFabric.Actors.Client.IActorProxy.ActorServicePartitionClient
  type: Property
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Actors/Client/ActorProxy.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: Microsoft.ServiceFabric.Actors.Client.IActorProxy.ActorServicePartitionClient
    path: src/prod/src/managed/Microsoft.ServiceFabric.Actors/Client/ActorProxy.cs
    startLine: 46
  assemblies:
  - Microsoft.ServiceFabric.Actors
  namespace: Microsoft.ServiceFabric.Actors.Client
  summary: "\nGets <xref href=\"Microsoft.ServiceFabric.Actors.Client.IActorServicePartitionClient\" data-throw-if-not-resolved=\"false\"></xref> that this proxy is using to communicate with the actor.\n"
  example: []
  syntax:
    content: IActorServicePartitionClient IActorProxy.ActorServicePartitionClient { get; }
    content.vb: ReadOnly WriteOnly Property Microsoft.ServiceFabric.Actors.Client.IActorProxy.ActorServicePartitionClient As IActorServicePartitionClient Implements IActorProxy.ActorServicePartitionClient
    parameters: []
    return:
      type: Microsoft.ServiceFabric.Actors.Client.IActorServicePartitionClient
      description: <xref href="Microsoft.ServiceFabric.Actors.Client.IActorServicePartitionClient" data-throw-if-not-resolved="false"></xref> that this proxy is using to communicate with the actor.
  overload: Microsoft.ServiceFabric.Actors.Client.ActorProxy.Microsoft#ServiceFabric#Actors#Client#IActorProxy#ActorServicePartitionClient*
  implements:
  - Microsoft.ServiceFabric.Actors.Client.IActorProxy.ActorServicePartitionClient
  nameWithType.vb: ActorProxy.Microsoft.ServiceFabric.Actors.Client.IActorProxy.ActorServicePartitionClient
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  name.vb: Microsoft.ServiceFabric.Actors.Client.IActorProxy.ActorServicePartitionClient
- uid: Microsoft.ServiceFabric.Actors.Client.ActorProxy.Create``1(Microsoft.ServiceFabric.Actors.ActorId,System.String,System.String,System.String)
  commentId: M:Microsoft.ServiceFabric.Actors.Client.ActorProxy.Create``1(Microsoft.ServiceFabric.Actors.ActorId,System.String,System.String,System.String)
  id: Create``1(Microsoft.ServiceFabric.Actors.ActorId,System.String,System.String,System.String)
  parent: Microsoft.ServiceFabric.Actors.Client.ActorProxy
  langs:
  - csharp
  - vb
  name: Create<TActorInterface>(ActorId, String, String, String)
  nameWithType: ActorProxy.Create<TActorInterface>(ActorId, String, String, String)
  fullName: Microsoft.ServiceFabric.Actors.Client.ActorProxy.Create<TActorInterface>(Microsoft.ServiceFabric.Actors.ActorId, System.String, System.String, System.String)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Actors/Client/ActorProxy.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: Create
    path: src/prod/src/managed/Microsoft.ServiceFabric.Actors/Client/ActorProxy.cs
    startLine: 80
  assemblies:
  - Microsoft.ServiceFabric.Actors
  namespace: Microsoft.ServiceFabric.Actors.Client
  summary: "\nCreates a proxy to the actor object that implements an actor interface.\n"
  remarks: "<p>The applicationName parameter can be null if the client is running as part of the same Service Fabric\n    application as the actor service it intends to communicate with. In this case, the application name is determined from\n<xref href=\"System.Fabric.CodePackageActivationContext\" data-throw-if-not-resolved=\"false\"></xref>, and is obtained by calling the \n<xref href=\"System.Fabric.CodePackageActivationContext.ApplicationName\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n"
  example: []
  syntax:
    content: 'public static TActorInterface Create<TActorInterface>(ActorId actorId, string applicationName = null, string serviceName = null, string listenerName = null)where TActorInterface : IActor'
    content.vb: Public Shared Function Create(Of TActorInterface As IActor)(actorId As ActorId, applicationName As String = Nothing, serviceName As String = Nothing, listenerName As String = Nothing) As TActorInterface
    parameters:
    - id: actorId
      type: Microsoft.ServiceFabric.Actors.ActorId
      description: "Actor Id of the proxy actor object. Methods called on this proxy will result in requests \nbeing sent to the actor with this id."
    - id: applicationName
      type: System.String
      description: "\nName of the Service Fabric application that contains the actor service hosting the actor objects.\nThis parameter can be null if the client is running as part of that same Service Fabric application. For more information, see Remarks. \n"
    - id: serviceName
      type: System.String
      description: "\nName of the Service Fabric service as configured by <xref href=\"Microsoft.ServiceFabric.Actors.Runtime.ActorServiceAttribute\" data-throw-if-not-resolved=\"false\"></xref> on the actor implementation.\nBy default, the name of the service is derived from the name of the actor interface. However <xref href=\"Microsoft.ServiceFabric.Actors.Runtime.ActorServiceAttribute\" data-throw-if-not-resolved=\"false\"></xref>\nis required when an actor implements more than one actor interfaces or an actor interface derives from another actor interface as the determination of the \nserviceName cannot be made automatically.\n"
    - id: listenerName
      type: System.String
      description: "\nBy default an actor service has only one listener for clients to connect to and communicate with.\nHowever it is possible to configure an actor service with more than one listeners, the listenerName parameter specifies the name of the listener to connect to.\n"
    typeParameters:
    - id: TActorInterface
      description: "\nThe actor interface implemented by the remote actor object. \nThe returned proxy object will implement this interface.\n"
    return:
      type: '{TActorInterface}'
      description: An actor proxy object that implements <xref href="Microsoft.ServiceFabric.Actors.Client.IActorProxy" data-throw-if-not-resolved="false"></xref> and TActorInterface.
  overload: Microsoft.ServiceFabric.Actors.Client.ActorProxy.Create*
  nameWithType.vb: ActorProxy.Create(Of TActorInterface)(ActorId, String, String, String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.ServiceFabric.Actors.Client.ActorProxy.Create(Of TActorInterface)(Microsoft.ServiceFabric.Actors.ActorId, System.String, System.String, System.String)
  name.vb: Create(Of TActorInterface)(ActorId, String, String, String)
- uid: Microsoft.ServiceFabric.Actors.Client.ActorProxy.Create``1(Microsoft.ServiceFabric.Actors.ActorId,System.Uri,System.String)
  commentId: M:Microsoft.ServiceFabric.Actors.Client.ActorProxy.Create``1(Microsoft.ServiceFabric.Actors.ActorId,System.Uri,System.String)
  id: Create``1(Microsoft.ServiceFabric.Actors.ActorId,System.Uri,System.String)
  parent: Microsoft.ServiceFabric.Actors.Client.ActorProxy
  langs:
  - csharp
  - vb
  name: Create<TActorInterface>(ActorId, Uri, String)
  nameWithType: ActorProxy.Create<TActorInterface>(ActorId, Uri, String)
  fullName: Microsoft.ServiceFabric.Actors.Client.ActorProxy.Create<TActorInterface>(Microsoft.ServiceFabric.Actors.ActorId, System.Uri, System.String)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Actors/Client/ActorProxy.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: Create
    path: src/prod/src/managed/Microsoft.ServiceFabric.Actors/Client/ActorProxy.cs
    startLine: 104
  assemblies:
  - Microsoft.ServiceFabric.Actors
  namespace: Microsoft.ServiceFabric.Actors.Client
  summary: "\nCreates a proxy to the actor object that implements an actor interface.\n"
  example: []
  syntax:
    content: 'public static TActorInterface Create<TActorInterface>(ActorId actorId, Uri serviceUri, string listenerName = null)where TActorInterface : IActor'
    content.vb: Public Shared Function Create(Of TActorInterface As IActor)(actorId As ActorId, serviceUri As Uri, listenerName As String = Nothing) As TActorInterface
    parameters:
    - id: actorId
      type: Microsoft.ServiceFabric.Actors.ActorId
      description: "Actor Id of the proxy actor object. Methods called on this proxy will result in requests \nbeing sent to the actor with this id."
    - id: serviceUri
      type: System.Uri
      description: Uri of the actor service.
    - id: listenerName
      type: System.String
      description: "\nBy default an actor service has only one listener for clients to connect to and communicate with.\nHowever it is possible to configure an actor service with more than one listeners, the listenerName parameter specifies the name of the listener to connect to.\n"
    typeParameters:
    - id: TActorInterface
      description: "\nThe actor interface implemented by the remote actor object. \nThe returned proxy object will implement this interface.\n"
    return:
      type: '{TActorInterface}'
      description: An actor proxy object that implements <xref href="Microsoft.ServiceFabric.Actors.Client.IActorProxy" data-throw-if-not-resolved="false"></xref> and TActorInterface.
  overload: Microsoft.ServiceFabric.Actors.Client.ActorProxy.Create*
  nameWithType.vb: ActorProxy.Create(Of TActorInterface)(ActorId, Uri, String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.ServiceFabric.Actors.Client.ActorProxy.Create(Of TActorInterface)(Microsoft.ServiceFabric.Actors.ActorId, System.Uri, System.String)
  name.vb: Create(Of TActorInterface)(ActorId, Uri, String)
references:
- uid: Microsoft.ServiceFabric.Actors.Client
  commentId: N:Microsoft.ServiceFabric.Actors.Client
  isExternal: false
  name: Microsoft.ServiceFabric.Actors.Client
  nameWithType: Microsoft.ServiceFabric.Actors.Client
  fullName: Microsoft.ServiceFabric.Actors.Client
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Microsoft.ServiceFabric.Services.Remoting.Builder.ProxyBase
  commentId: T:Microsoft.ServiceFabric.Services.Remoting.Builder.ProxyBase
  parent: Microsoft.ServiceFabric.Services.Remoting.Builder
  isExternal: false
  name: ProxyBase
  nameWithType: ProxyBase
  fullName: Microsoft.ServiceFabric.Services.Remoting.Builder.ProxyBase
- uid: Microsoft.ServiceFabric.Actors.Client.IActorProxy
  commentId: T:Microsoft.ServiceFabric.Actors.Client.IActorProxy
  parent: Microsoft.ServiceFabric.Actors.Client
  isExternal: false
  name: IActorProxy
  nameWithType: IActorProxy
  fullName: Microsoft.ServiceFabric.Actors.Client.IActorProxy
- uid: Microsoft.ServiceFabric.Services.Remoting.Builder.ProxyBase.Invoke(System.Int32,System.Int32,System.Object)
  commentId: M:Microsoft.ServiceFabric.Services.Remoting.Builder.ProxyBase.Invoke(System.Int32,System.Int32,System.Object)
  parent: Microsoft.ServiceFabric.Services.Remoting.Builder.ProxyBase
  isExternal: true
  name: Invoke(Int32, Int32, Object)
  nameWithType: ProxyBase.Invoke(Int32, Int32, Object)
  fullName: Microsoft.ServiceFabric.Services.Remoting.Builder.ProxyBase.Invoke(System.Int32, System.Int32, System.Object)
  spec.csharp:
  - uid: Microsoft.ServiceFabric.Services.Remoting.Builder.ProxyBase.Invoke(System.Int32,System.Int32,System.Object)
    name: Invoke
    nameWithType: ProxyBase.Invoke
    fullName: Microsoft.ServiceFabric.Services.Remoting.Builder.ProxyBase.Invoke
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ServiceFabric.Services.Remoting.Builder.ProxyBase.Invoke(System.Int32,System.Int32,System.Object)
    name: Invoke
    nameWithType: ProxyBase.Invoke
    fullName: Microsoft.ServiceFabric.Services.Remoting.Builder.ProxyBase.Invoke
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceFabric.Services.Remoting.Builder.ProxyBase.InvokeAsync(System.Int32,System.Int32,System.Object,System.Threading.CancellationToken)
  commentId: M:Microsoft.ServiceFabric.Services.Remoting.Builder.ProxyBase.InvokeAsync(System.Int32,System.Int32,System.Object,System.Threading.CancellationToken)
  parent: Microsoft.ServiceFabric.Services.Remoting.Builder.ProxyBase
  isExternal: true
  name: InvokeAsync(Int32, Int32, Object, CancellationToken)
  nameWithType: ProxyBase.InvokeAsync(Int32, Int32, Object, CancellationToken)
  fullName: Microsoft.ServiceFabric.Services.Remoting.Builder.ProxyBase.InvokeAsync(System.Int32, System.Int32, System.Object, System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.ServiceFabric.Services.Remoting.Builder.ProxyBase.InvokeAsync(System.Int32,System.Int32,System.Object,System.Threading.CancellationToken)
    name: InvokeAsync
    nameWithType: ProxyBase.InvokeAsync
    fullName: Microsoft.ServiceFabric.Services.Remoting.Builder.ProxyBase.InvokeAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ServiceFabric.Services.Remoting.Builder.ProxyBase.InvokeAsync(System.Int32,System.Int32,System.Object,System.Threading.CancellationToken)
    name: InvokeAsync
    nameWithType: ProxyBase.InvokeAsync
    fullName: Microsoft.ServiceFabric.Services.Remoting.Builder.ProxyBase.InvokeAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceFabric.Services.Remoting.Builder.ProxyBase.ContinueWithResult``1(System.Int32,System.Int32,System.Threading.Tasks.Task{System.Object})
  commentId: M:Microsoft.ServiceFabric.Services.Remoting.Builder.ProxyBase.ContinueWithResult``1(System.Int32,System.Int32,System.Threading.Tasks.Task{System.Object})
  parent: Microsoft.ServiceFabric.Services.Remoting.Builder.ProxyBase
  isExternal: true
  name: ContinueWithResult<TRetval>(Int32, Int32, Task<Object>)
  nameWithType: ProxyBase.ContinueWithResult<TRetval>(Int32, Int32, Task<Object>)
  fullName: Microsoft.ServiceFabric.Services.Remoting.Builder.ProxyBase.ContinueWithResult<TRetval>(System.Int32, System.Int32, System.Threading.Tasks.Task<System.Object>)
  nameWithType.vb: ProxyBase.ContinueWithResult(Of TRetval)(Int32, Int32, Task(Of Object))
  fullname.vb: Microsoft.ServiceFabric.Services.Remoting.Builder.ProxyBase.ContinueWithResult(Of TRetval)(System.Int32, System.Int32, System.Threading.Tasks.Task(Of System.Object))
  name.vb: ContinueWithResult(Of TRetval)(Int32, Int32, Task(Of Object))
  spec.csharp:
  - uid: Microsoft.ServiceFabric.Services.Remoting.Builder.ProxyBase.ContinueWithResult``1(System.Int32,System.Int32,System.Threading.Tasks.Task{System.Object})
    name: ContinueWithResult<TRetval>
    nameWithType: ProxyBase.ContinueWithResult<TRetval>
    fullName: Microsoft.ServiceFabric.Services.Remoting.Builder.ProxyBase.ContinueWithResult<TRetval>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ServiceFabric.Services.Remoting.Builder.ProxyBase.ContinueWithResult``1(System.Int32,System.Int32,System.Threading.Tasks.Task{System.Object})
    name: ContinueWithResult(Of TRetval)
    nameWithType: ProxyBase.ContinueWithResult(Of TRetval)
    fullName: Microsoft.ServiceFabric.Services.Remoting.Builder.ProxyBase.ContinueWithResult(Of TRetval)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceFabric.Services.Remoting.Builder.ProxyBase.ContinueWith(System.Threading.Tasks.Task{System.Object})
  commentId: M:Microsoft.ServiceFabric.Services.Remoting.Builder.ProxyBase.ContinueWith(System.Threading.Tasks.Task{System.Object})
  parent: Microsoft.ServiceFabric.Services.Remoting.Builder.ProxyBase
  isExternal: true
  name: ContinueWith(Task<Object>)
  nameWithType: ProxyBase.ContinueWith(Task<Object>)
  fullName: Microsoft.ServiceFabric.Services.Remoting.Builder.ProxyBase.ContinueWith(System.Threading.Tasks.Task<System.Object>)
  nameWithType.vb: ProxyBase.ContinueWith(Task(Of Object))
  fullname.vb: Microsoft.ServiceFabric.Services.Remoting.Builder.ProxyBase.ContinueWith(System.Threading.Tasks.Task(Of System.Object))
  name.vb: ContinueWith(Task(Of Object))
  spec.csharp:
  - uid: Microsoft.ServiceFabric.Services.Remoting.Builder.ProxyBase.ContinueWith(System.Threading.Tasks.Task{System.Object})
    name: ContinueWith
    nameWithType: ProxyBase.ContinueWith
    fullName: Microsoft.ServiceFabric.Services.Remoting.Builder.ProxyBase.ContinueWith
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ServiceFabric.Services.Remoting.Builder.ProxyBase.ContinueWith(System.Threading.Tasks.Task{System.Object})
    name: ContinueWith
    nameWithType: ProxyBase.ContinueWith
    fullName: Microsoft.ServiceFabric.Services.Remoting.Builder.ProxyBase.ContinueWith
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceFabric.Services.Remoting.Builder.ProxyBase.GetReturnValue(System.Int32,System.Int32,System.Object)
  commentId: M:Microsoft.ServiceFabric.Services.Remoting.Builder.ProxyBase.GetReturnValue(System.Int32,System.Int32,System.Object)
  parent: Microsoft.ServiceFabric.Services.Remoting.Builder.ProxyBase
  isExternal: true
  name: GetReturnValue(Int32, Int32, Object)
  nameWithType: ProxyBase.GetReturnValue(Int32, Int32, Object)
  fullName: Microsoft.ServiceFabric.Services.Remoting.Builder.ProxyBase.GetReturnValue(System.Int32, System.Int32, System.Object)
  spec.csharp:
  - uid: Microsoft.ServiceFabric.Services.Remoting.Builder.ProxyBase.GetReturnValue(System.Int32,System.Int32,System.Object)
    name: GetReturnValue
    nameWithType: ProxyBase.GetReturnValue
    fullName: Microsoft.ServiceFabric.Services.Remoting.Builder.ProxyBase.GetReturnValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ServiceFabric.Services.Remoting.Builder.ProxyBase.GetReturnValue(System.Int32,System.Int32,System.Object)
    name: GetReturnValue
    nameWithType: ProxyBase.GetReturnValue
    fullName: Microsoft.ServiceFabric.Services.Remoting.Builder.ProxyBase.GetReturnValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceFabric.Actors.Client.ActorProxy.System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
  commentId: M:System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  parent: System.Fabric.Messaging.Stream.ByteArraySerializer
  definition: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  name: Serialize<ActorProxy>()
  nameWithType: ByteArraySerializer.Serialize<ActorProxy>()
  fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<Microsoft.ServiceFabric.Actors.Client.ActorProxy>()
  nameWithType.vb: ByteArraySerializer.Serialize(Of ActorProxy)()
  fullname.vb: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of Microsoft.ServiceFabric.Actors.Client.ActorProxy)()
  name.vb: Serialize(Of ActorProxy)()
  spec.csharp:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
    name: Serialize<ActorProxy>
    nameWithType: ByteArraySerializer.Serialize<ActorProxy>
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<Microsoft.ServiceFabric.Actors.Client.ActorProxy>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
    name: Serialize(Of ActorProxy)
    nameWithType: ByteArraySerializer.Serialize(Of ActorProxy)
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of Microsoft.ServiceFabric.Actors.Client.ActorProxy)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.ServiceFabric.Services.Remoting.Builder
  commentId: N:Microsoft.ServiceFabric.Services.Remoting.Builder
  isExternal: false
  name: Microsoft.ServiceFabric.Services.Remoting.Builder
  nameWithType: Microsoft.ServiceFabric.Services.Remoting.Builder
  fullName: Microsoft.ServiceFabric.Services.Remoting.Builder
- uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  commentId: M:System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  isExternal: false
  name: Serialize<T>(T)
  nameWithType: ByteArraySerializer.Serialize<T>(T)
  fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<T>(T)
  nameWithType.vb: ByteArraySerializer.Serialize(Of T)(T)
  fullname.vb: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of T)(T)
  name.vb: Serialize(Of T)(T)
  spec.csharp:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
    name: Serialize<T>
    nameWithType: ByteArraySerializer.Serialize<T>
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
    name: Serialize(Of T)
    nameWithType: ByteArraySerializer.Serialize(Of T)
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.Messaging.Stream.ByteArraySerializer
  commentId: T:System.Fabric.Messaging.Stream.ByteArraySerializer
  parent: System.Fabric.Messaging.Stream
  isExternal: false
  name: ByteArraySerializer
  nameWithType: ByteArraySerializer
  fullName: System.Fabric.Messaging.Stream.ByteArraySerializer
- uid: System.Fabric.Messaging.Stream
  commentId: N:System.Fabric.Messaging.Stream
  isExternal: false
  name: System.Fabric.Messaging.Stream
  nameWithType: System.Fabric.Messaging.Stream
  fullName: System.Fabric.Messaging.Stream
- uid: Microsoft.ServiceFabric.Actors.Client.ActorProxy.#ctor*
  commentId: Overload:Microsoft.ServiceFabric.Actors.Client.ActorProxy.#ctor
  isExternal: false
  name: ActorProxy
  nameWithType: ActorProxy.ActorProxy
  fullName: Microsoft.ServiceFabric.Actors.Client.ActorProxy.ActorProxy
- uid: Microsoft.ServiceFabric.Actors.ActorId
  commentId: T:Microsoft.ServiceFabric.Actors.ActorId
  parent: Microsoft.ServiceFabric.Actors
  isExternal: false
  name: ActorId
  nameWithType: ActorId
  fullName: Microsoft.ServiceFabric.Actors.ActorId
- uid: Microsoft.ServiceFabric.Actors.Client.ActorProxy.Microsoft#ServiceFabric#Actors#Client#IActorProxy#ActorId*
  commentId: Overload:Microsoft.ServiceFabric.Actors.Client.ActorProxy.Microsoft#ServiceFabric#Actors#Client#IActorProxy#ActorId
  isExternal: false
  name: IActorProxy.ActorId
  nameWithType: ActorProxy.IActorProxy.ActorId
  fullName: Microsoft.ServiceFabric.Actors.Client.ActorProxy.Microsoft.ServiceFabric.Actors.Client.IActorProxy.ActorId
  nameWithType.vb: ActorProxy.Microsoft.ServiceFabric.Actors.Client.IActorProxy.ActorId
  name.vb: Microsoft.ServiceFabric.Actors.Client.IActorProxy.ActorId
- uid: Microsoft.ServiceFabric.Actors.Client.IActorProxy.ActorId
  commentId: P:Microsoft.ServiceFabric.Actors.Client.IActorProxy.ActorId
  parent: Microsoft.ServiceFabric.Actors.Client.IActorProxy
  isExternal: false
  name: ActorId
  nameWithType: IActorProxy.ActorId
  fullName: Microsoft.ServiceFabric.Actors.Client.IActorProxy.ActorId
- uid: Microsoft.ServiceFabric.Actors
  commentId: N:Microsoft.ServiceFabric.Actors
  isExternal: false
  name: Microsoft.ServiceFabric.Actors
  nameWithType: Microsoft.ServiceFabric.Actors
  fullName: Microsoft.ServiceFabric.Actors
- uid: Microsoft.ServiceFabric.Actors.Client.IActorServicePartitionClient
  commentId: T:Microsoft.ServiceFabric.Actors.Client.IActorServicePartitionClient
  parent: Microsoft.ServiceFabric.Actors.Client
  isExternal: false
  name: IActorServicePartitionClient
  nameWithType: IActorServicePartitionClient
  fullName: Microsoft.ServiceFabric.Actors.Client.IActorServicePartitionClient
- uid: Microsoft.ServiceFabric.Actors.Client.ActorProxy.Microsoft#ServiceFabric#Actors#Client#IActorProxy#ActorServicePartitionClient*
  commentId: Overload:Microsoft.ServiceFabric.Actors.Client.ActorProxy.Microsoft#ServiceFabric#Actors#Client#IActorProxy#ActorServicePartitionClient
  isExternal: false
  name: IActorProxy.ActorServicePartitionClient
  nameWithType: ActorProxy.IActorProxy.ActorServicePartitionClient
  fullName: Microsoft.ServiceFabric.Actors.Client.ActorProxy.Microsoft.ServiceFabric.Actors.Client.IActorProxy.ActorServicePartitionClient
  nameWithType.vb: ActorProxy.Microsoft.ServiceFabric.Actors.Client.IActorProxy.ActorServicePartitionClient
  name.vb: Microsoft.ServiceFabric.Actors.Client.IActorProxy.ActorServicePartitionClient
- uid: Microsoft.ServiceFabric.Actors.Client.IActorProxy.ActorServicePartitionClient
  commentId: P:Microsoft.ServiceFabric.Actors.Client.IActorProxy.ActorServicePartitionClient
  parent: Microsoft.ServiceFabric.Actors.Client.IActorProxy
  isExternal: false
  name: ActorServicePartitionClient
  nameWithType: IActorProxy.ActorServicePartitionClient
  fullName: Microsoft.ServiceFabric.Actors.Client.IActorProxy.ActorServicePartitionClient
- uid: Microsoft.ServiceFabric.Actors.Runtime.ActorServiceAttribute
  commentId: T:Microsoft.ServiceFabric.Actors.Runtime.ActorServiceAttribute
  isExternal: false
  name: ActorServiceAttribute
  nameWithType: ActorServiceAttribute
  fullName: Microsoft.ServiceFabric.Actors.Runtime.ActorServiceAttribute
- uid: System.Fabric.CodePackageActivationContext
  commentId: T:System.Fabric.CodePackageActivationContext
  parent: System.Fabric
  isExternal: false
  name: CodePackageActivationContext
  nameWithType: CodePackageActivationContext
  fullName: System.Fabric.CodePackageActivationContext
- uid: System.Fabric.CodePackageActivationContext.ApplicationName
  commentId: P:System.Fabric.CodePackageActivationContext.ApplicationName
- uid: Microsoft.ServiceFabric.Actors.Client.ActorProxy.Create*
  commentId: Overload:Microsoft.ServiceFabric.Actors.Client.ActorProxy.Create
  isExternal: false
  name: Create<TActorInterface>
  nameWithType: ActorProxy.Create<TActorInterface>
  fullName: Microsoft.ServiceFabric.Actors.Client.ActorProxy.Create<TActorInterface>
  nameWithType.vb: ActorProxy.Create(Of TActorInterface)
  fullname.vb: Microsoft.ServiceFabric.Actors.Client.ActorProxy.Create(Of TActorInterface)
  name.vb: Create(Of TActorInterface)
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: '{TActorInterface}'
  commentId: '!:TActorInterface'
  definition: TActorInterface
  name: TActorInterface
  nameWithType: TActorInterface
  fullName: TActorInterface
- uid: System.Fabric
  commentId: N:System.Fabric
  isExternal: false
  name: System.Fabric
  nameWithType: System.Fabric
  fullName: System.Fabric
- uid: TActorInterface
  isExternal: false
  name: TActorInterface
  nameWithType: TActorInterface
  fullName: TActorInterface
- uid: System.Uri
  commentId: T:System.Uri
  parent: System
  isExternal: true
  name: Uri
  nameWithType: Uri
  fullName: System.Uri
