### YamlMime:ManagedReference
items:
- uid: System.Fabric.Description.ClusterHealthChunkQueryDescription
  commentId: T:System.Fabric.Description.ClusterHealthChunkQueryDescription
  id: ClusterHealthChunkQueryDescription
  parent: System.Fabric.Description
  children:
  - System.Fabric.Description.ClusterHealthChunkQueryDescription.#ctor
  - System.Fabric.Description.ClusterHealthChunkQueryDescription.ApplicationFilters
  - System.Fabric.Description.ClusterHealthChunkQueryDescription.ApplicationHealthPolicies
  - System.Fabric.Description.ClusterHealthChunkQueryDescription.ClusterHealthPolicy
  - System.Fabric.Description.ClusterHealthChunkQueryDescription.NodeFilters
  langs:
  - csharp
  - vb
  name: ClusterHealthChunkQueryDescription
  nameWithType: ClusterHealthChunkQueryDescription
  fullName: System.Fabric.Description.ClusterHealthChunkQueryDescription
  type: Class
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/Description/ClusterHealthChunkQueryDescription.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: ClusterHealthChunkQueryDescription
    path: src/prod/src/managed/Api/src/System/Fabric/Description/ClusterHealthChunkQueryDescription.cs
    startLine: 15
  assemblies:
  - System.Fabric
  namespace: System.Fabric.Description
  summary: "\nDescribes the cluster health chunk query input.\n"
  example: []
  syntax:
    content: public sealed class ClusterHealthChunkQueryDescription
    content.vb: Public NotInheritable Class ClusterHealthChunkQueryDescription
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  extensionMethods:
  - System.Fabric.Description.ClusterHealthChunkQueryDescription.System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: System.Fabric.Description.ClusterHealthChunkQueryDescription.#ctor
  commentId: M:System.Fabric.Description.ClusterHealthChunkQueryDescription.#ctor
  id: '#ctor'
  parent: System.Fabric.Description.ClusterHealthChunkQueryDescription
  langs:
  - csharp
  - vb
  name: ClusterHealthChunkQueryDescription()
  nameWithType: ClusterHealthChunkQueryDescription.ClusterHealthChunkQueryDescription()
  fullName: System.Fabric.Description.ClusterHealthChunkQueryDescription.ClusterHealthChunkQueryDescription()
  type: Constructor
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/Description/ClusterHealthChunkQueryDescription.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: .ctor
    path: src/prod/src/managed/Api/src/System/Fabric/Description/ClusterHealthChunkQueryDescription.cs
    startLine: 20
  assemblies:
  - System.Fabric
  namespace: System.Fabric.Description
  summary: "\nInitializes a new instance of the <xref href=\"System.Fabric.Description.ClusterHealthChunkQueryDescription\" data-throw-if-not-resolved=\"false\"></xref> class.\n"
  example: []
  syntax:
    content: public ClusterHealthChunkQueryDescription()
    content.vb: Public Sub New
  overload: System.Fabric.Description.ClusterHealthChunkQueryDescription.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.Description.ClusterHealthChunkQueryDescription.ClusterHealthPolicy
  commentId: P:System.Fabric.Description.ClusterHealthChunkQueryDescription.ClusterHealthPolicy
  id: ClusterHealthPolicy
  parent: System.Fabric.Description.ClusterHealthChunkQueryDescription
  langs:
  - csharp
  - vb
  name: ClusterHealthPolicy
  nameWithType: ClusterHealthChunkQueryDescription.ClusterHealthPolicy
  fullName: System.Fabric.Description.ClusterHealthChunkQueryDescription.ClusterHealthPolicy
  type: Property
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/Description/ClusterHealthChunkQueryDescription.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: ClusterHealthPolicy
    path: src/prod/src/managed/Api/src/System/Fabric/Description/ClusterHealthChunkQueryDescription.cs
    startLine: 33
  assemblies:
  - System.Fabric
  namespace: System.Fabric.Description
  summary: "\nGets or sets the <xref href=\"System.Fabric.Health.ClusterHealthPolicy\" data-throw-if-not-resolved=\"false\"></xref> used to evaluate the cluster health. \n"
  remarks: >-
    The policy will be used to evaluate the aggregated health state of the events reported on cluster and the aggregated health state of the nodes.

    If not specified, the cluster health policy described in the manifest or the default cluster health policy are used.
  example: []
  syntax:
    content: public ClusterHealthPolicy ClusterHealthPolicy { get; set; }
    content.vb: Public Property ClusterHealthPolicy As ClusterHealthPolicy
    parameters: []
    return:
      type: System.Fabric.Health.ClusterHealthPolicy
      description: the <xref href="System.Fabric.Health.ClusterHealthPolicy" data-throw-if-not-resolved="false"></xref> used to evaluate the cluster health.
  overload: System.Fabric.Description.ClusterHealthChunkQueryDescription.ClusterHealthPolicy*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Fabric.Description.ClusterHealthChunkQueryDescription.ApplicationHealthPolicies
  commentId: P:System.Fabric.Description.ClusterHealthChunkQueryDescription.ApplicationHealthPolicies
  id: ApplicationHealthPolicies
  parent: System.Fabric.Description.ClusterHealthChunkQueryDescription
  langs:
  - csharp
  - vb
  name: ApplicationHealthPolicies
  nameWithType: ClusterHealthChunkQueryDescription.ApplicationHealthPolicies
  fullName: System.Fabric.Description.ClusterHealthChunkQueryDescription.ApplicationHealthPolicies
  type: Property
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/Description/ClusterHealthChunkQueryDescription.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: ApplicationHealthPolicies
    path: src/prod/src/managed/Api/src/System/Fabric/Description/ClusterHealthChunkQueryDescription.cs
    startLine: 48
  assemblies:
  - System.Fabric
  namespace: System.Fabric.Description
  summary: "\nGets the application health policies used to evaluate the health of the applications from the cluster. \n"
  remarks: "Each entry specifies as key the application name and as value an <xref href=\"System.Fabric.Health.ApplicationHealthPolicy\" data-throw-if-not-resolved=\"false\"></xref> used to evaluate the application health.\nIf an application is not specified in the map, the ApplicationHealthPolicy found in the application manifest will be used for evaluation. \nThe map is empty by default.\n"
  example: []
  syntax:
    content: public ApplicationHealthPolicyMap ApplicationHealthPolicies { get; }
    content.vb: Public ReadOnly Property ApplicationHealthPolicies As ApplicationHealthPolicyMap
    parameters: []
    return:
      type: System.Fabric.Health.ApplicationHealthPolicyMap
      description: The application health policies used to evaluate the health of the specified applications.
  overload: System.Fabric.Description.ClusterHealthChunkQueryDescription.ApplicationHealthPolicies*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Fabric.Description.ClusterHealthChunkQueryDescription.ApplicationFilters
  commentId: P:System.Fabric.Description.ClusterHealthChunkQueryDescription.ApplicationFilters
  id: ApplicationFilters
  parent: System.Fabric.Description.ClusterHealthChunkQueryDescription
  langs:
  - csharp
  - vb
  name: ApplicationFilters
  nameWithType: ClusterHealthChunkQueryDescription.ApplicationFilters
  fullName: System.Fabric.Description.ClusterHealthChunkQueryDescription.ApplicationFilters
  type: Property
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/Description/ClusterHealthChunkQueryDescription.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: ApplicationFilters
    path: src/prod/src/managed/Api/src/System/Fabric/Description/ClusterHealthChunkQueryDescription.cs
    startLine: 61
  assemblies:
  - System.Fabric
  namespace: System.Fabric.Description
  summary: "\nGets the list of <xref href=\"System.Fabric.Health.ApplicationHealthStateFilter\" data-throw-if-not-resolved=\"false\"></xref> to be applied to the application children health states.\n"
  remarks: >-
    The list can contain one default application filter and/or application filters for specific applications or application types to fine-grain entities returned by the query.

    All application children that match the filter will be returned as children of the cluster.

    If empty, no application is returned.
  example: []
  syntax:
    content: public IList<ApplicationHealthStateFilter> ApplicationFilters { get; }
    content.vb: Public ReadOnly Property ApplicationFilters As IList(Of ApplicationHealthStateFilter)
    parameters: []
    return:
      type: System.Collections.Generic.IList{System.Fabric.Health.ApplicationHealthStateFilter}
      description: The list of <xref href="System.Fabric.Health.ApplicationHealthStateFilter" data-throw-if-not-resolved="false"></xref> to be applied to the application children health states.
  overload: System.Fabric.Description.ClusterHealthChunkQueryDescription.ApplicationFilters*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Fabric.Description.ClusterHealthChunkQueryDescription.NodeFilters
  commentId: P:System.Fabric.Description.ClusterHealthChunkQueryDescription.NodeFilters
  id: NodeFilters
  parent: System.Fabric.Description.ClusterHealthChunkQueryDescription
  langs:
  - csharp
  - vb
  name: NodeFilters
  nameWithType: ClusterHealthChunkQueryDescription.NodeFilters
  fullName: System.Fabric.Description.ClusterHealthChunkQueryDescription.NodeFilters
  type: Property
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/Description/ClusterHealthChunkQueryDescription.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: NodeFilters
    path: src/prod/src/managed/Api/src/System/Fabric/Description/ClusterHealthChunkQueryDescription.cs
    startLine: 74
  assemblies:
  - System.Fabric
  namespace: System.Fabric.Description
  summary: "\nGets the list of <xref href=\"System.Fabric.Health.NodeHealthStateFilter\" data-throw-if-not-resolved=\"false\"></xref> to be applied to the node children health states.\n"
  remarks: "\nAll node children that match the filter will be returned as children of the cluster.\nIf empty, no node is returned."
  example: []
  syntax:
    content: public IList<NodeHealthStateFilter> NodeFilters { get; }
    content.vb: Public ReadOnly Property NodeFilters As IList(Of NodeHealthStateFilter)
    parameters: []
    return:
      type: System.Collections.Generic.IList{System.Fabric.Health.NodeHealthStateFilter}
      description: The list of <xref href="System.Fabric.Health.NodeHealthStateFilter" data-throw-if-not-resolved="false"></xref> to be applied to the node children health states.
  overload: System.Fabric.Description.ClusterHealthChunkQueryDescription.NodeFilters*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
references:
- uid: System.Fabric.Description
  commentId: N:System.Fabric.Description
  isExternal: false
  name: System.Fabric.Description
  nameWithType: System.Fabric.Description
  fullName: System.Fabric.Description
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.Description.ClusterHealthChunkQueryDescription.System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
  commentId: M:System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  parent: System.Fabric.Messaging.Stream.ByteArraySerializer
  definition: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  name: Serialize<ClusterHealthChunkQueryDescription>()
  nameWithType: ByteArraySerializer.Serialize<ClusterHealthChunkQueryDescription>()
  fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<System.Fabric.Description.ClusterHealthChunkQueryDescription>()
  nameWithType.vb: ByteArraySerializer.Serialize(Of ClusterHealthChunkQueryDescription)()
  fullname.vb: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of System.Fabric.Description.ClusterHealthChunkQueryDescription)()
  name.vb: Serialize(Of ClusterHealthChunkQueryDescription)()
  spec.csharp:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
    name: Serialize<ClusterHealthChunkQueryDescription>
    nameWithType: ByteArraySerializer.Serialize<ClusterHealthChunkQueryDescription>
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<System.Fabric.Description.ClusterHealthChunkQueryDescription>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
    name: Serialize(Of ClusterHealthChunkQueryDescription)
    nameWithType: ByteArraySerializer.Serialize(Of ClusterHealthChunkQueryDescription)
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of System.Fabric.Description.ClusterHealthChunkQueryDescription)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  commentId: M:System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  isExternal: false
  name: Serialize<T>(T)
  nameWithType: ByteArraySerializer.Serialize<T>(T)
  fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<T>(T)
  nameWithType.vb: ByteArraySerializer.Serialize(Of T)(T)
  fullname.vb: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of T)(T)
  name.vb: Serialize(Of T)(T)
  spec.csharp:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
    name: Serialize<T>
    nameWithType: ByteArraySerializer.Serialize<T>
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
    name: Serialize(Of T)
    nameWithType: ByteArraySerializer.Serialize(Of T)
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.Messaging.Stream.ByteArraySerializer
  commentId: T:System.Fabric.Messaging.Stream.ByteArraySerializer
  parent: System.Fabric.Messaging.Stream
  isExternal: false
  name: ByteArraySerializer
  nameWithType: ByteArraySerializer
  fullName: System.Fabric.Messaging.Stream.ByteArraySerializer
- uid: System.Fabric.Messaging.Stream
  commentId: N:System.Fabric.Messaging.Stream
  isExternal: false
  name: System.Fabric.Messaging.Stream
  nameWithType: System.Fabric.Messaging.Stream
  fullName: System.Fabric.Messaging.Stream
- uid: System.Fabric.Description.ClusterHealthChunkQueryDescription
  commentId: T:System.Fabric.Description.ClusterHealthChunkQueryDescription
  parent: System.Fabric.Description
  isExternal: false
  name: ClusterHealthChunkQueryDescription
  nameWithType: ClusterHealthChunkQueryDescription
  fullName: System.Fabric.Description.ClusterHealthChunkQueryDescription
- uid: System.Fabric.Description.ClusterHealthChunkQueryDescription.#ctor*
  commentId: Overload:System.Fabric.Description.ClusterHealthChunkQueryDescription.#ctor
  isExternal: false
  name: ClusterHealthChunkQueryDescription
  nameWithType: ClusterHealthChunkQueryDescription.ClusterHealthChunkQueryDescription
  fullName: System.Fabric.Description.ClusterHealthChunkQueryDescription.ClusterHealthChunkQueryDescription
- uid: System.Fabric.Health.ClusterHealthPolicy
  commentId: T:System.Fabric.Health.ClusterHealthPolicy
  parent: System.Fabric.Health
  isExternal: false
  name: ClusterHealthPolicy
  nameWithType: ClusterHealthPolicy
  fullName: System.Fabric.Health.ClusterHealthPolicy
- uid: System.Fabric.Description.ClusterHealthChunkQueryDescription.ClusterHealthPolicy*
  commentId: Overload:System.Fabric.Description.ClusterHealthChunkQueryDescription.ClusterHealthPolicy
  isExternal: false
  name: ClusterHealthPolicy
  nameWithType: ClusterHealthChunkQueryDescription.ClusterHealthPolicy
  fullName: System.Fabric.Description.ClusterHealthChunkQueryDescription.ClusterHealthPolicy
- uid: System.Fabric.Health
  commentId: N:System.Fabric.Health
  isExternal: false
  name: System.Fabric.Health
  nameWithType: System.Fabric.Health
  fullName: System.Fabric.Health
- uid: System.Fabric.Health.ApplicationHealthPolicy
  commentId: T:System.Fabric.Health.ApplicationHealthPolicy
  parent: System.Fabric.Health
  isExternal: false
  name: ApplicationHealthPolicy
  nameWithType: ApplicationHealthPolicy
  fullName: System.Fabric.Health.ApplicationHealthPolicy
- uid: System.Fabric.Description.ClusterHealthChunkQueryDescription.ApplicationHealthPolicies*
  commentId: Overload:System.Fabric.Description.ClusterHealthChunkQueryDescription.ApplicationHealthPolicies
  isExternal: false
  name: ApplicationHealthPolicies
  nameWithType: ClusterHealthChunkQueryDescription.ApplicationHealthPolicies
  fullName: System.Fabric.Description.ClusterHealthChunkQueryDescription.ApplicationHealthPolicies
- uid: System.Fabric.Health.ApplicationHealthPolicyMap
  commentId: T:System.Fabric.Health.ApplicationHealthPolicyMap
  parent: System.Fabric.Health
  isExternal: false
  name: ApplicationHealthPolicyMap
  nameWithType: ApplicationHealthPolicyMap
  fullName: System.Fabric.Health.ApplicationHealthPolicyMap
- uid: System.Fabric.Health.ApplicationHealthStateFilter
  commentId: T:System.Fabric.Health.ApplicationHealthStateFilter
  isExternal: false
  name: ApplicationHealthStateFilter
  nameWithType: ApplicationHealthStateFilter
  fullName: System.Fabric.Health.ApplicationHealthStateFilter
- uid: System.Fabric.Description.ClusterHealthChunkQueryDescription.ApplicationFilters*
  commentId: Overload:System.Fabric.Description.ClusterHealthChunkQueryDescription.ApplicationFilters
  isExternal: false
  name: ApplicationFilters
  nameWithType: ClusterHealthChunkQueryDescription.ApplicationFilters
  fullName: System.Fabric.Description.ClusterHealthChunkQueryDescription.ApplicationFilters
- uid: System.Collections.Generic.IList{System.Fabric.Health.ApplicationHealthStateFilter}
  commentId: T:System.Collections.Generic.IList{System.Fabric.Health.ApplicationHealthStateFilter}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<ApplicationHealthStateFilter>
  nameWithType: IList<ApplicationHealthStateFilter>
  fullName: System.Collections.Generic.IList<System.Fabric.Health.ApplicationHealthStateFilter>
  nameWithType.vb: IList(Of ApplicationHealthStateFilter)
  fullname.vb: System.Collections.Generic.IList(Of System.Fabric.Health.ApplicationHealthStateFilter)
  name.vb: IList(Of ApplicationHealthStateFilter)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Fabric.Health.ApplicationHealthStateFilter
    name: ApplicationHealthStateFilter
    nameWithType: ApplicationHealthStateFilter
    fullName: System.Fabric.Health.ApplicationHealthStateFilter
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Fabric.Health.ApplicationHealthStateFilter
    name: ApplicationHealthStateFilter
    nameWithType: ApplicationHealthStateFilter
    fullName: System.Fabric.Health.ApplicationHealthStateFilter
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList`1
  commentId: T:System.Collections.Generic.IList`1
  isExternal: true
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullname.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Fabric.Health.NodeHealthStateFilter
  commentId: T:System.Fabric.Health.NodeHealthStateFilter
  isExternal: false
  name: NodeHealthStateFilter
  nameWithType: NodeHealthStateFilter
  fullName: System.Fabric.Health.NodeHealthStateFilter
- uid: System.Fabric.Description.ClusterHealthChunkQueryDescription.NodeFilters*
  commentId: Overload:System.Fabric.Description.ClusterHealthChunkQueryDescription.NodeFilters
  isExternal: false
  name: NodeFilters
  nameWithType: ClusterHealthChunkQueryDescription.NodeFilters
  fullName: System.Fabric.Description.ClusterHealthChunkQueryDescription.NodeFilters
- uid: System.Collections.Generic.IList{System.Fabric.Health.NodeHealthStateFilter}
  commentId: T:System.Collections.Generic.IList{System.Fabric.Health.NodeHealthStateFilter}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<NodeHealthStateFilter>
  nameWithType: IList<NodeHealthStateFilter>
  fullName: System.Collections.Generic.IList<System.Fabric.Health.NodeHealthStateFilter>
  nameWithType.vb: IList(Of NodeHealthStateFilter)
  fullname.vb: System.Collections.Generic.IList(Of System.Fabric.Health.NodeHealthStateFilter)
  name.vb: IList(Of NodeHealthStateFilter)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Fabric.Health.NodeHealthStateFilter
    name: NodeHealthStateFilter
    nameWithType: NodeHealthStateFilter
    fullName: System.Fabric.Health.NodeHealthStateFilter
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Fabric.Health.NodeHealthStateFilter
    name: NodeHealthStateFilter
    nameWithType: NodeHealthStateFilter
    fullName: System.Fabric.Health.NodeHealthStateFilter
  - name: )
    nameWithType: )
    fullName: )
