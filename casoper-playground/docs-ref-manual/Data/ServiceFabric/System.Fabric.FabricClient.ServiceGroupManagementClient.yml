### YamlMime:ManagedReference
items:
- uid: System.Fabric.FabricClient.ServiceGroupManagementClient
  commentId: T:System.Fabric.FabricClient.ServiceGroupManagementClient
  id: FabricClient.ServiceGroupManagementClient
  parent: System.Fabric
  children:
  - System.Fabric.FabricClient.ServiceGroupManagementClient.CreateServiceGroupAsync(System.Fabric.Description.ServiceGroupDescription)
  - System.Fabric.FabricClient.ServiceGroupManagementClient.CreateServiceGroupAsync(System.Fabric.Description.ServiceGroupDescription,System.TimeSpan,System.Threading.CancellationToken)
  - System.Fabric.FabricClient.ServiceGroupManagementClient.CreateServiceGroupFromTemplateAsync(System.Uri,System.Uri,System.String,System.Byte[])
  - System.Fabric.FabricClient.ServiceGroupManagementClient.CreateServiceGroupFromTemplateAsync(System.Uri,System.Uri,System.String,System.Byte[],System.TimeSpan,System.Threading.CancellationToken)
  - System.Fabric.FabricClient.ServiceGroupManagementClient.DeleteServiceGroupAsync(System.Uri)
  - System.Fabric.FabricClient.ServiceGroupManagementClient.DeleteServiceGroupAsync(System.Uri,System.TimeSpan,System.Threading.CancellationToken)
  - System.Fabric.FabricClient.ServiceGroupManagementClient.GetServiceGroupDescriptionAsync(System.Uri)
  - System.Fabric.FabricClient.ServiceGroupManagementClient.GetServiceGroupDescriptionAsync(System.Uri,System.TimeSpan,System.Threading.CancellationToken)
  - System.Fabric.FabricClient.ServiceGroupManagementClient.UpdateServiceGroupAsync(System.Uri,System.Fabric.Description.ServiceGroupUpdateDescription)
  - System.Fabric.FabricClient.ServiceGroupManagementClient.UpdateServiceGroupAsync(System.Uri,System.Fabric.Description.ServiceGroupUpdateDescription,System.TimeSpan,System.Threading.CancellationToken)
  langs:
  - csharp
  - vb
  name: FabricClient.ServiceGroupManagementClient
  nameWithType: FabricClient.ServiceGroupManagementClient
  fullName: System.Fabric.FabricClient.ServiceGroupManagementClient
  type: Class
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ServiceGroupManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: ServiceGroupManagementClient
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ServiceGroupManagementClient.cs
    startLine: 19
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Allows client side creation, deletion, and inspection of service groups inside the cluster, \njust like the <xref href=\"System.Fabric.FabricClient.ServiceManagementClient\" data-throw-if-not-resolved=\"false\"></xref> for regular services.</p>\n"
  example: []
  syntax:
    content: public class ServiceGroupManagementClient
    content.vb: Public Class ServiceGroupManagementClient
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  extensionMethods:
  - System.Fabric.FabricClient.ServiceGroupManagementClient.System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: System.Fabric.FabricClient.ServiceGroupManagementClient.CreateServiceGroupAsync(System.Fabric.Description.ServiceGroupDescription)
  commentId: M:System.Fabric.FabricClient.ServiceGroupManagementClient.CreateServiceGroupAsync(System.Fabric.Description.ServiceGroupDescription)
  id: CreateServiceGroupAsync(System.Fabric.Description.ServiceGroupDescription)
  parent: System.Fabric.FabricClient.ServiceGroupManagementClient
  langs:
  - csharp
  - vb
  name: CreateServiceGroupAsync(ServiceGroupDescription)
  nameWithType: FabricClient.ServiceGroupManagementClient.CreateServiceGroupAsync(ServiceGroupDescription)
  fullName: System.Fabric.FabricClient.ServiceGroupManagementClient.CreateServiceGroupAsync(System.Fabric.Description.ServiceGroupDescription)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ServiceGroupManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: CreateServiceGroupAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ServiceGroupManagementClient.cs
    startLine: 45
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\nAsynchronously creates a service group from the given <xref href=\"System.Fabric.Description.ServiceGroupDescription\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public Task CreateServiceGroupAsync(ServiceGroupDescription description)
    content.vb: Public Function CreateServiceGroupAsync(description As ServiceGroupDescription) As Task
    parameters:
    - id: description
      type: System.Fabric.Description.ServiceGroupDescription
      description: The <xref href="System.Fabric.Description.ServiceGroupDescription" data-throw-if-not-resolved="false"></xref> which describes the group and its members.
    return:
      type: System.Threading.Tasks.Task
      description: The task representing the asynchronous operation.
  overload: System.Fabric.FabricClient.ServiceGroupManagementClient.CreateServiceGroupAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.ServiceGroupManagementClient.CreateServiceGroupAsync(System.Fabric.Description.ServiceGroupDescription,System.TimeSpan,System.Threading.CancellationToken)
  commentId: M:System.Fabric.FabricClient.ServiceGroupManagementClient.CreateServiceGroupAsync(System.Fabric.Description.ServiceGroupDescription,System.TimeSpan,System.Threading.CancellationToken)
  id: CreateServiceGroupAsync(System.Fabric.Description.ServiceGroupDescription,System.TimeSpan,System.Threading.CancellationToken)
  parent: System.Fabric.FabricClient.ServiceGroupManagementClient
  langs:
  - csharp
  - vb
  name: CreateServiceGroupAsync(ServiceGroupDescription, TimeSpan, CancellationToken)
  nameWithType: FabricClient.ServiceGroupManagementClient.CreateServiceGroupAsync(ServiceGroupDescription, TimeSpan, CancellationToken)
  fullName: System.Fabric.FabricClient.ServiceGroupManagementClient.CreateServiceGroupAsync(System.Fabric.Description.ServiceGroupDescription, System.TimeSpan, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ServiceGroupManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: CreateServiceGroupAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ServiceGroupManagementClient.cs
    startLine: 61
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\nAsynchronously creates a service group from the given <xref href=\"System.Fabric.Description.ServiceGroupDescription\" data-throw-if-not-resolved=\"false\"></xref> with the provided timeout \nand <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public Task CreateServiceGroupAsync(ServiceGroupDescription description, TimeSpan timeout, CancellationToken cancellationToken)
    content.vb: Public Function CreateServiceGroupAsync(description As ServiceGroupDescription, timeout As TimeSpan, cancellationToken As CancellationToken) As Task
    parameters:
    - id: description
      type: System.Fabric.Description.ServiceGroupDescription
      description: The <xref href="System.Fabric.Description.ServiceGroupDescription" data-throw-if-not-resolved="false"></xref> which describes the group and its members.
    - id: timeout
      type: System.TimeSpan
      description: "Timespan that defines the maximum amount of time Service Fabric will allow this operation to continue before returning \na Timeout Exception."
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "The <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> object that the operation is observing.  It can be \nused to send a notification that the operation should be canceled.  Note that cancellation is advisory and that the operation may \nstill be completed even if it is canceled."
    return:
      type: System.Threading.Tasks.Task
      description: The task representing the asynchronous operation.
  overload: System.Fabric.FabricClient.ServiceGroupManagementClient.CreateServiceGroupAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.ServiceGroupManagementClient.CreateServiceGroupFromTemplateAsync(System.Uri,System.Uri,System.String,System.Byte[])
  commentId: M:System.Fabric.FabricClient.ServiceGroupManagementClient.CreateServiceGroupFromTemplateAsync(System.Uri,System.Uri,System.String,System.Byte[])
  id: CreateServiceGroupFromTemplateAsync(System.Uri,System.Uri,System.String,System.Byte[])
  parent: System.Fabric.FabricClient.ServiceGroupManagementClient
  langs:
  - csharp
  - vb
  name: CreateServiceGroupFromTemplateAsync(Uri, Uri, String, Byte[])
  nameWithType: FabricClient.ServiceGroupManagementClient.CreateServiceGroupFromTemplateAsync(Uri, Uri, String, Byte[])
  fullName: System.Fabric.FabricClient.ServiceGroupManagementClient.CreateServiceGroupFromTemplateAsync(System.Uri, System.Uri, System.String, System.Byte[])
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ServiceGroupManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: CreateServiceGroupFromTemplateAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ServiceGroupManagementClient.cs
    startLine: 88
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Creates a Service Group from a Service Group Template that is pre-defined in the current Application Manifest.</p>\n"
  example: []
  syntax:
    content: public Task CreateServiceGroupFromTemplateAsync(Uri applicationName, Uri serviceName, string serviceTypeName, byte[] initializationData)
    content.vb: Public Function CreateServiceGroupFromTemplateAsync(applicationName As Uri, serviceName As Uri, serviceTypeName As String, initializationData As Byte()) As Task
    parameters:
    - id: applicationName
      type: System.Uri
      description: "\n<p>Application name for the Service Group</p>\n"
    - id: serviceName
      type: System.Uri
      description: "\n<p>Service name for the Service Group</p>\n"
    - id: serviceTypeName
      type: System.String
      description: "\n<p>Service Type Name for the Service Group</p>\n"
    - id: initializationData
      type: System.Byte[]
      description: "\n<p>Initialization data to pass into the Service Group instance</p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>Returns <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  overload: System.Fabric.FabricClient.ServiceGroupManagementClient.CreateServiceGroupFromTemplateAsync*
  nameWithType.vb: FabricClient.ServiceGroupManagementClient.CreateServiceGroupFromTemplateAsync(Uri, Uri, String, Byte())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Fabric.FabricClient.ServiceGroupManagementClient.CreateServiceGroupFromTemplateAsync(System.Uri, System.Uri, System.String, System.Byte())
  name.vb: CreateServiceGroupFromTemplateAsync(Uri, Uri, String, Byte())
- uid: System.Fabric.FabricClient.ServiceGroupManagementClient.CreateServiceGroupFromTemplateAsync(System.Uri,System.Uri,System.String,System.Byte[],System.TimeSpan,System.Threading.CancellationToken)
  commentId: M:System.Fabric.FabricClient.ServiceGroupManagementClient.CreateServiceGroupFromTemplateAsync(System.Uri,System.Uri,System.String,System.Byte[],System.TimeSpan,System.Threading.CancellationToken)
  id: CreateServiceGroupFromTemplateAsync(System.Uri,System.Uri,System.String,System.Byte[],System.TimeSpan,System.Threading.CancellationToken)
  parent: System.Fabric.FabricClient.ServiceGroupManagementClient
  langs:
  - csharp
  - vb
  name: CreateServiceGroupFromTemplateAsync(Uri, Uri, String, Byte[], TimeSpan, CancellationToken)
  nameWithType: FabricClient.ServiceGroupManagementClient.CreateServiceGroupFromTemplateAsync(Uri, Uri, String, Byte[], TimeSpan, CancellationToken)
  fullName: System.Fabric.FabricClient.ServiceGroupManagementClient.CreateServiceGroupFromTemplateAsync(System.Uri, System.Uri, System.String, System.Byte[], System.TimeSpan, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ServiceGroupManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: CreateServiceGroupFromTemplateAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ServiceGroupManagementClient.cs
    startLine: 117
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Creates a service group from a Service Group Template that is pre-defined in the current Application Manifest.</p>\n"
  example: []
  syntax:
    content: public Task CreateServiceGroupFromTemplateAsync(Uri applicationName, Uri serviceName, string serviceTypeName, byte[] initializationData, TimeSpan timeout, CancellationToken cancellationToken)
    content.vb: Public Function CreateServiceGroupFromTemplateAsync(applicationName As Uri, serviceName As Uri, serviceTypeName As String, initializationData As Byte(), timeout As TimeSpan, cancellationToken As CancellationToken) As Task
    parameters:
    - id: applicationName
      type: System.Uri
      description: "\n<p>Application name for the Service Group</p>\n"
    - id: serviceName
      type: System.Uri
      description: "\n<p>Service name for the Service Group</p>\n"
    - id: serviceTypeName
      type: System.String
      description: "\n<p>Service Type Name for the Service Group</p>\n"
    - id: initializationData
      type: System.Byte[]
      description: "\n<p>Initialization data to pass into the Service Group instance</p>\n"
    - id: timeout
      type: System.TimeSpan
      description: "\n<p>Maximum allowed time for the operation to complete before TimeoutException is thrown.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>Reserved for future use.</p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>Returns <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  overload: System.Fabric.FabricClient.ServiceGroupManagementClient.CreateServiceGroupFromTemplateAsync*
  nameWithType.vb: FabricClient.ServiceGroupManagementClient.CreateServiceGroupFromTemplateAsync(Uri, Uri, String, Byte(), TimeSpan, CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Fabric.FabricClient.ServiceGroupManagementClient.CreateServiceGroupFromTemplateAsync(System.Uri, System.Uri, System.String, System.Byte(), System.TimeSpan, System.Threading.CancellationToken)
  name.vb: CreateServiceGroupFromTemplateAsync(Uri, Uri, String, Byte(), TimeSpan, CancellationToken)
- uid: System.Fabric.FabricClient.ServiceGroupManagementClient.UpdateServiceGroupAsync(System.Uri,System.Fabric.Description.ServiceGroupUpdateDescription)
  commentId: M:System.Fabric.FabricClient.ServiceGroupManagementClient.UpdateServiceGroupAsync(System.Uri,System.Fabric.Description.ServiceGroupUpdateDescription)
  id: UpdateServiceGroupAsync(System.Uri,System.Fabric.Description.ServiceGroupUpdateDescription)
  parent: System.Fabric.FabricClient.ServiceGroupManagementClient
  langs:
  - csharp
  - vb
  name: UpdateServiceGroupAsync(Uri, ServiceGroupUpdateDescription)
  nameWithType: FabricClient.ServiceGroupManagementClient.UpdateServiceGroupAsync(Uri, ServiceGroupUpdateDescription)
  fullName: System.Fabric.FabricClient.ServiceGroupManagementClient.UpdateServiceGroupAsync(System.Uri, System.Fabric.Description.ServiceGroupUpdateDescription)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ServiceGroupManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: UpdateServiceGroupAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ServiceGroupManagementClient.cs
    startLine: 133
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\nAsynchronously updates a service group with the specified description.\n"
  example: []
  syntax:
    content: public Task UpdateServiceGroupAsync(Uri name, ServiceGroupUpdateDescription updateDescription)
    content.vb: Public Function UpdateServiceGroupAsync(name As Uri, updateDescription As ServiceGroupUpdateDescription) As Task
    parameters:
    - id: name
      type: System.Uri
      description: The URI name of the service group being updated.
    - id: updateDescription
      type: System.Fabric.Description.ServiceGroupUpdateDescription
      description: The <xref href="System.Fabric.Description.ServiceGroupUpdateDescription" data-throw-if-not-resolved="false"></xref> that specifies the updated configuration for the service group.
    return:
      type: System.Threading.Tasks.Task
      description: The task representing the asynchronous operation.
  overload: System.Fabric.FabricClient.ServiceGroupManagementClient.UpdateServiceGroupAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.ServiceGroupManagementClient.UpdateServiceGroupAsync(System.Uri,System.Fabric.Description.ServiceGroupUpdateDescription,System.TimeSpan,System.Threading.CancellationToken)
  commentId: M:System.Fabric.FabricClient.ServiceGroupManagementClient.UpdateServiceGroupAsync(System.Uri,System.Fabric.Description.ServiceGroupUpdateDescription,System.TimeSpan,System.Threading.CancellationToken)
  id: UpdateServiceGroupAsync(System.Uri,System.Fabric.Description.ServiceGroupUpdateDescription,System.TimeSpan,System.Threading.CancellationToken)
  parent: System.Fabric.FabricClient.ServiceGroupManagementClient
  langs:
  - csharp
  - vb
  name: UpdateServiceGroupAsync(Uri, ServiceGroupUpdateDescription, TimeSpan, CancellationToken)
  nameWithType: FabricClient.ServiceGroupManagementClient.UpdateServiceGroupAsync(Uri, ServiceGroupUpdateDescription, TimeSpan, CancellationToken)
  fullName: System.Fabric.FabricClient.ServiceGroupManagementClient.UpdateServiceGroupAsync(System.Uri, System.Fabric.Description.ServiceGroupUpdateDescription, System.TimeSpan, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ServiceGroupManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: UpdateServiceGroupAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ServiceGroupManagementClient.cs
    startLine: 146
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\nAsynchronously updates a service group with specified description.\n"
  example: []
  syntax:
    content: public Task UpdateServiceGroupAsync(Uri name, ServiceGroupUpdateDescription updateDescription, TimeSpan timeout, CancellationToken cancellationToken)
    content.vb: Public Function UpdateServiceGroupAsync(name As Uri, updateDescription As ServiceGroupUpdateDescription, timeout As TimeSpan, cancellationToken As CancellationToken) As Task
    parameters:
    - id: name
      type: System.Uri
      description: The URI name of the service being updated.
    - id: updateDescription
      type: System.Fabric.Description.ServiceGroupUpdateDescription
      description: The <xref href="System.Fabric.Description.ServiceGroupUpdateDescription" data-throw-if-not-resolved="false"></xref> that specifies the updated configuration for the service.
    - id: timeout
      type: System.TimeSpan
      description: The maximum amount of time the system will allow this API to take before returning <xref href="System.TimeoutException" data-throw-if-not-resolved="false"></xref>.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> that the operation is observing. It can be used to propagate notification that the operation should be canceled.
    return:
      type: System.Threading.Tasks.Task
      description: The task representing the asynchronous operation.
  overload: System.Fabric.FabricClient.ServiceGroupManagementClient.UpdateServiceGroupAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.ServiceGroupManagementClient.DeleteServiceGroupAsync(System.Uri)
  commentId: M:System.Fabric.FabricClient.ServiceGroupManagementClient.DeleteServiceGroupAsync(System.Uri)
  id: DeleteServiceGroupAsync(System.Uri)
  parent: System.Fabric.FabricClient.ServiceGroupManagementClient
  langs:
  - csharp
  - vb
  name: DeleteServiceGroupAsync(Uri)
  nameWithType: FabricClient.ServiceGroupManagementClient.DeleteServiceGroupAsync(Uri)
  fullName: System.Fabric.FabricClient.ServiceGroupManagementClient.DeleteServiceGroupAsync(System.Uri)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ServiceGroupManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: DeleteServiceGroupAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ServiceGroupManagementClient.cs
    startLine: 167
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Asynchronously deletes the specified service group.</p>\n"
  example: []
  syntax:
    content: public Task DeleteServiceGroupAsync(Uri serviceGroupName)
    content.vb: Public Function DeleteServiceGroupAsync(serviceGroupName As Uri) As Task
    parameters:
    - id: serviceGroupName
      type: System.Uri
      description: "\n<p>The name of the service group to be deleted.</p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>The task representing the asynchronous operation.</p>\n"
  overload: System.Fabric.FabricClient.ServiceGroupManagementClient.DeleteServiceGroupAsync*
  exceptions:
  - type: System.Fabric.FabricObjectClosedException
    commentId: T:System.Fabric.FabricObjectClosedException
    description: "\n<p>The <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object is in a closed state. Dispose of the <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object you are using and instantiate a new <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.ServiceGroupManagementClient.DeleteServiceGroupAsync(System.Uri,System.TimeSpan,System.Threading.CancellationToken)
  commentId: M:System.Fabric.FabricClient.ServiceGroupManagementClient.DeleteServiceGroupAsync(System.Uri,System.TimeSpan,System.Threading.CancellationToken)
  id: DeleteServiceGroupAsync(System.Uri,System.TimeSpan,System.Threading.CancellationToken)
  parent: System.Fabric.FabricClient.ServiceGroupManagementClient
  langs:
  - csharp
  - vb
  name: DeleteServiceGroupAsync(Uri, TimeSpan, CancellationToken)
  nameWithType: FabricClient.ServiceGroupManagementClient.DeleteServiceGroupAsync(Uri, TimeSpan, CancellationToken)
  fullName: System.Fabric.FabricClient.ServiceGroupManagementClient.DeleteServiceGroupAsync(System.Uri, System.TimeSpan, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ServiceGroupManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: DeleteServiceGroupAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ServiceGroupManagementClient.cs
    startLine: 190
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Asynchronously deletes the specified service group with the provided timeout and <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example: []
  syntax:
    content: public Task DeleteServiceGroupAsync(Uri serviceGroupName, TimeSpan timeout, CancellationToken cancellationToken)
    content.vb: Public Function DeleteServiceGroupAsync(serviceGroupName As Uri, timeout As TimeSpan, cancellationToken As CancellationToken) As Task
    parameters:
    - id: serviceGroupName
      type: System.Uri
      description: "\n<p>The name of the service group to be deleted.</p>\n"
    - id: timeout
      type: System.TimeSpan
      description: "\n<p>Timespan that defines the maximum amount of time Service Fabric will allow this operation to continue before returning a Timeout Exception.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> object that the operation is observing.  It can be used to send a notification that the operation should be canceled.  Note that cancellation is advisory and that the operation may still be completed even if it is cancelled.</p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>The task representing the asynchronous operation.</p>\n"
  overload: System.Fabric.FabricClient.ServiceGroupManagementClient.DeleteServiceGroupAsync*
  exceptions:
  - type: System.Fabric.FabricObjectClosedException
    commentId: T:System.Fabric.FabricObjectClosedException
    description: "\n<p>The <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object is in a closed state. Dispose of the <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object you are using and instantiate a new <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.ServiceGroupManagementClient.GetServiceGroupDescriptionAsync(System.Uri)
  commentId: M:System.Fabric.FabricClient.ServiceGroupManagementClient.GetServiceGroupDescriptionAsync(System.Uri)
  id: GetServiceGroupDescriptionAsync(System.Uri)
  parent: System.Fabric.FabricClient.ServiceGroupManagementClient
  langs:
  - csharp
  - vb
  name: GetServiceGroupDescriptionAsync(Uri)
  nameWithType: FabricClient.ServiceGroupManagementClient.GetServiceGroupDescriptionAsync(Uri)
  fullName: System.Fabric.FabricClient.ServiceGroupManagementClient.GetServiceGroupDescriptionAsync(System.Uri)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ServiceGroupManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: GetServiceGroupDescriptionAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ServiceGroupManagementClient.cs
    startLine: 210
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Asynchronously fetches the <xref href=\"System.Fabric.Description.ServiceGroupDescription\" data-throw-if-not-resolved=\"false\"></xref> for the specified service group, if it exists.</p>\n"
  example: []
  syntax:
    content: public Task<ServiceGroupDescription> GetServiceGroupDescriptionAsync(Uri serviceGroupName)
    content.vb: Public Function GetServiceGroupDescriptionAsync(serviceGroupName As Uri) As Task(Of ServiceGroupDescription)
    parameters:
    - id: serviceGroupName
      type: System.Uri
      description: "\n<p>The name of the service group whose <xref href=\"System.Fabric.Description.ServiceGroupDescription\" data-throw-if-not-resolved=\"false\"></xref> should be fetched.</p>\n"
    return:
      type: System.Threading.Tasks.Task{System.Fabric.Description.ServiceGroupDescription}
      description: "\n<p>The task representing the asynchronous operation.</p>\n"
  overload: System.Fabric.FabricClient.ServiceGroupManagementClient.GetServiceGroupDescriptionAsync*
  exceptions:
  - type: System.Fabric.FabricObjectClosedException
    commentId: T:System.Fabric.FabricObjectClosedException
    description: "\n<p>The <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object is in a closed state. Dispose of the <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object you are using and instantiate a new <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.ServiceGroupManagementClient.GetServiceGroupDescriptionAsync(System.Uri,System.TimeSpan,System.Threading.CancellationToken)
  commentId: M:System.Fabric.FabricClient.ServiceGroupManagementClient.GetServiceGroupDescriptionAsync(System.Uri,System.TimeSpan,System.Threading.CancellationToken)
  id: GetServiceGroupDescriptionAsync(System.Uri,System.TimeSpan,System.Threading.CancellationToken)
  parent: System.Fabric.FabricClient.ServiceGroupManagementClient
  langs:
  - csharp
  - vb
  name: GetServiceGroupDescriptionAsync(Uri, TimeSpan, CancellationToken)
  nameWithType: FabricClient.ServiceGroupManagementClient.GetServiceGroupDescriptionAsync(Uri, TimeSpan, CancellationToken)
  fullName: System.Fabric.FabricClient.ServiceGroupManagementClient.GetServiceGroupDescriptionAsync(System.Uri, System.TimeSpan, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ServiceGroupManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: GetServiceGroupDescriptionAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ServiceGroupManagementClient.cs
    startLine: 233
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Asynchronously fetches the <xref href=\"System.Fabric.Description.ServiceGroupDescription\" data-throw-if-not-resolved=\"false\"></xref> for the specified service group, if it exists, with the provided timeout and <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example: []
  syntax:
    content: public Task<ServiceGroupDescription> GetServiceGroupDescriptionAsync(Uri serviceGroupName, TimeSpan timeout, CancellationToken cancellationToken)
    content.vb: Public Function GetServiceGroupDescriptionAsync(serviceGroupName As Uri, timeout As TimeSpan, cancellationToken As CancellationToken) As Task(Of ServiceGroupDescription)
    parameters:
    - id: serviceGroupName
      type: System.Uri
      description: "\n<p>The name of the service group whose <xref href=\"System.Fabric.Description.ServiceGroupDescription\" data-throw-if-not-resolved=\"false\"></xref> should be fetched.</p>\n"
    - id: timeout
      type: System.TimeSpan
      description: "\n<p>Timespan that defines the maximum amount of time Service Fabric will allow this operation to continue before returning a Timeout Exception.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> that the operation is observing.  It can be used to send a notification that the operation should be canceled.  Note that cancellation is advisory and that the operation may still be completed even if it is cancelled.</p>\n"
    return:
      type: System.Threading.Tasks.Task{System.Fabric.Description.ServiceGroupDescription}
      description: "\n<p>The task representing the asynchronous operation.</p>\n"
  overload: System.Fabric.FabricClient.ServiceGroupManagementClient.GetServiceGroupDescriptionAsync*
  exceptions:
  - type: System.Fabric.FabricObjectClosedException
    commentId: T:System.Fabric.FabricObjectClosedException
    description: "\n<p>The <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object is in a closed state. Dispose of the <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object you are using and instantiate a new <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: System.Fabric.FabricClient.ServiceManagementClient
  commentId: T:System.Fabric.FabricClient.ServiceManagementClient
  parent: System.Fabric
  isExternal: false
  name: FabricClient.ServiceManagementClient
  nameWithType: FabricClient.ServiceManagementClient
  fullName: System.Fabric.FabricClient.ServiceManagementClient
- uid: System.Fabric
  commentId: N:System.Fabric
  isExternal: false
  name: System.Fabric
  nameWithType: System.Fabric
  fullName: System.Fabric
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.FabricClient.ServiceGroupManagementClient.System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
  commentId: M:System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  parent: System.Fabric.Messaging.Stream.ByteArraySerializer
  definition: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  name: Serialize<FabricClient.ServiceGroupManagementClient>()
  nameWithType: ByteArraySerializer.Serialize<FabricClient.ServiceGroupManagementClient>()
  fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<System.Fabric.FabricClient.ServiceGroupManagementClient>()
  nameWithType.vb: ByteArraySerializer.Serialize(Of FabricClient.ServiceGroupManagementClient)()
  fullname.vb: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of System.Fabric.FabricClient.ServiceGroupManagementClient)()
  name.vb: Serialize(Of FabricClient.ServiceGroupManagementClient)()
  spec.csharp:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
    name: Serialize<FabricClient.ServiceGroupManagementClient>
    nameWithType: ByteArraySerializer.Serialize<FabricClient.ServiceGroupManagementClient>
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<System.Fabric.FabricClient.ServiceGroupManagementClient>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
    name: Serialize(Of FabricClient.ServiceGroupManagementClient)
    nameWithType: ByteArraySerializer.Serialize(Of FabricClient.ServiceGroupManagementClient)
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of System.Fabric.FabricClient.ServiceGroupManagementClient)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  commentId: M:System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  isExternal: false
  name: Serialize<T>(T)
  nameWithType: ByteArraySerializer.Serialize<T>(T)
  fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<T>(T)
  nameWithType.vb: ByteArraySerializer.Serialize(Of T)(T)
  fullname.vb: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of T)(T)
  name.vb: Serialize(Of T)(T)
  spec.csharp:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
    name: Serialize<T>
    nameWithType: ByteArraySerializer.Serialize<T>
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
    name: Serialize(Of T)
    nameWithType: ByteArraySerializer.Serialize(Of T)
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.Messaging.Stream.ByteArraySerializer
  commentId: T:System.Fabric.Messaging.Stream.ByteArraySerializer
  parent: System.Fabric.Messaging.Stream
  isExternal: false
  name: ByteArraySerializer
  nameWithType: ByteArraySerializer
  fullName: System.Fabric.Messaging.Stream.ByteArraySerializer
- uid: System.Fabric.Messaging.Stream
  commentId: N:System.Fabric.Messaging.Stream
  isExternal: false
  name: System.Fabric.Messaging.Stream
  nameWithType: System.Fabric.Messaging.Stream
  fullName: System.Fabric.Messaging.Stream
- uid: System.Fabric.Description.ServiceGroupDescription
  commentId: T:System.Fabric.Description.ServiceGroupDescription
  parent: System.Fabric.Description
  isExternal: false
  name: ServiceGroupDescription
  nameWithType: ServiceGroupDescription
  fullName: System.Fabric.Description.ServiceGroupDescription
- uid: System.Fabric.FabricClient.ServiceGroupManagementClient.CreateServiceGroupAsync*
  commentId: Overload:System.Fabric.FabricClient.ServiceGroupManagementClient.CreateServiceGroupAsync
  isExternal: false
  name: CreateServiceGroupAsync
  nameWithType: FabricClient.ServiceGroupManagementClient.CreateServiceGroupAsync
  fullName: System.Fabric.FabricClient.ServiceGroupManagementClient.CreateServiceGroupAsync
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Fabric.Description
  commentId: N:System.Fabric.Description
  isExternal: false
  name: System.Fabric.Description
  nameWithType: System.Fabric.Description
  fullName: System.Fabric.Description
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.TimeSpan
  commentId: T:System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: false
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
- uid: System.Fabric.FabricClient.ServiceGroupManagementClient.CreateServiceGroupFromTemplateAsync*
  commentId: Overload:System.Fabric.FabricClient.ServiceGroupManagementClient.CreateServiceGroupFromTemplateAsync
  isExternal: false
  name: CreateServiceGroupFromTemplateAsync
  nameWithType: FabricClient.ServiceGroupManagementClient.CreateServiceGroupFromTemplateAsync
  fullName: System.Fabric.FabricClient.ServiceGroupManagementClient.CreateServiceGroupFromTemplateAsync
- uid: System.Uri
  commentId: T:System.Uri
  parent: System
  isExternal: true
  name: Uri
  nameWithType: Uri
  fullName: System.Uri
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Byte[]
  name: Byte[]
  nameWithType: Byte[]
  fullName: System.Byte[]
  nameWithType.vb: Byte()
  fullname.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Fabric.Description.ServiceGroupUpdateDescription
  commentId: T:System.Fabric.Description.ServiceGroupUpdateDescription
  parent: System.Fabric.Description
  isExternal: false
  name: ServiceGroupUpdateDescription
  nameWithType: ServiceGroupUpdateDescription
  fullName: System.Fabric.Description.ServiceGroupUpdateDescription
- uid: System.Fabric.FabricClient.ServiceGroupManagementClient.UpdateServiceGroupAsync*
  commentId: Overload:System.Fabric.FabricClient.ServiceGroupManagementClient.UpdateServiceGroupAsync
  isExternal: false
  name: UpdateServiceGroupAsync
  nameWithType: FabricClient.ServiceGroupManagementClient.UpdateServiceGroupAsync
  fullName: System.Fabric.FabricClient.ServiceGroupManagementClient.UpdateServiceGroupAsync
- uid: System.TimeoutException
  commentId: T:System.TimeoutException
- uid: System.Fabric.FabricClient
  commentId: T:System.Fabric.FabricClient
  parent: System.Fabric
  isExternal: false
  name: FabricClient
  nameWithType: FabricClient
  fullName: System.Fabric.FabricClient
- uid: System.Fabric.FabricClient.ServiceGroupManagementClient.DeleteServiceGroupAsync*
  commentId: Overload:System.Fabric.FabricClient.ServiceGroupManagementClient.DeleteServiceGroupAsync
  isExternal: false
  name: DeleteServiceGroupAsync
  nameWithType: FabricClient.ServiceGroupManagementClient.DeleteServiceGroupAsync
  fullName: System.Fabric.FabricClient.ServiceGroupManagementClient.DeleteServiceGroupAsync
- uid: System.Fabric.FabricObjectClosedException
  commentId: T:System.Fabric.FabricObjectClosedException
  isExternal: false
  name: FabricObjectClosedException
  nameWithType: FabricObjectClosedException
  fullName: System.Fabric.FabricObjectClosedException
- uid: System.Fabric.FabricClient.ServiceGroupManagementClient.GetServiceGroupDescriptionAsync*
  commentId: Overload:System.Fabric.FabricClient.ServiceGroupManagementClient.GetServiceGroupDescriptionAsync
  isExternal: false
  name: GetServiceGroupDescriptionAsync
  nameWithType: FabricClient.ServiceGroupManagementClient.GetServiceGroupDescriptionAsync
  fullName: System.Fabric.FabricClient.ServiceGroupManagementClient.GetServiceGroupDescriptionAsync
- uid: System.Threading.Tasks.Task{System.Fabric.Description.ServiceGroupDescription}
  commentId: T:System.Threading.Tasks.Task{System.Fabric.Description.ServiceGroupDescription}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<ServiceGroupDescription>
  nameWithType: Task<ServiceGroupDescription>
  fullName: System.Threading.Tasks.Task<System.Fabric.Description.ServiceGroupDescription>
  nameWithType.vb: Task(Of ServiceGroupDescription)
  fullname.vb: System.Threading.Tasks.Task(Of System.Fabric.Description.ServiceGroupDescription)
  name.vb: Task(Of ServiceGroupDescription)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Fabric.Description.ServiceGroupDescription
    name: ServiceGroupDescription
    nameWithType: ServiceGroupDescription
    fullName: System.Fabric.Description.ServiceGroupDescription
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Fabric.Description.ServiceGroupDescription
    name: ServiceGroupDescription
    nameWithType: ServiceGroupDescription
    fullName: System.Fabric.Description.ServiceGroupDescription
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullname.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
