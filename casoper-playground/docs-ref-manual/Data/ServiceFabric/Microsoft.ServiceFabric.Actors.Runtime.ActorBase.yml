### YamlMime:ManagedReference
items:
- uid: Microsoft.ServiceFabric.Actors.Runtime.ActorBase
  commentId: T:Microsoft.ServiceFabric.Actors.Runtime.ActorBase
  id: ActorBase
  parent: Microsoft.ServiceFabric.Actors.Runtime
  children:
  - Microsoft.ServiceFabric.Actors.Runtime.ActorBase.ActorService
  - Microsoft.ServiceFabric.Actors.Runtime.ActorBase.ApplicationName
  - Microsoft.ServiceFabric.Actors.Runtime.ActorBase.GetEvent``1
  - Microsoft.ServiceFabric.Actors.Runtime.ActorBase.GetReminder(System.String)
  - Microsoft.ServiceFabric.Actors.Runtime.ActorBase.Id
  - Microsoft.ServiceFabric.Actors.Runtime.ActorBase.OnActivateAsync
  - Microsoft.ServiceFabric.Actors.Runtime.ActorBase.OnDeactivateAsync
  - Microsoft.ServiceFabric.Actors.Runtime.ActorBase.OnPostActorMethodAsync(Microsoft.ServiceFabric.Actors.Runtime.ActorMethodContext)
  - Microsoft.ServiceFabric.Actors.Runtime.ActorBase.OnPreActorMethodAsync(Microsoft.ServiceFabric.Actors.Runtime.ActorMethodContext)
  - Microsoft.ServiceFabric.Actors.Runtime.ActorBase.RegisterReminderAsync(System.String,System.Byte[],System.TimeSpan,System.TimeSpan)
  - Microsoft.ServiceFabric.Actors.Runtime.ActorBase.RegisterTimer(System.Func{System.Object,System.Threading.Tasks.Task},System.Object,System.TimeSpan,System.TimeSpan)
  - Microsoft.ServiceFabric.Actors.Runtime.ActorBase.ServiceUri
  - Microsoft.ServiceFabric.Actors.Runtime.ActorBase.UnregisterReminderAsync(Microsoft.ServiceFabric.Actors.Runtime.IActorReminder)
  - Microsoft.ServiceFabric.Actors.Runtime.ActorBase.UnregisterTimer(Microsoft.ServiceFabric.Actors.Runtime.IActorTimer)
  langs:
  - csharp
  - vb
  name: ActorBase
  nameWithType: ActorBase
  fullName: Microsoft.ServiceFabric.Actors.Runtime.ActorBase
  type: Class
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Actors/Runtime/ActorBase.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: ActorBase
    path: src/prod/src/managed/Microsoft.ServiceFabric.Actors/Runtime/ActorBase.cs
    startLine: 24
  assemblies:
  - Microsoft.ServiceFabric.Actors
  namespace: Microsoft.ServiceFabric.Actors.Runtime
  summary: "\nRepresents base class for actors.\n"
  remarks: "\nThis is a base type for actor, it provides the functionality that is \ncommon across actors implemented by actor deriving from <xref href=\"Microsoft.ServiceFabric.Actors.Runtime.Actor\" data-throw-if-not-resolved=\"false\"></xref>\nThe state is preserved across actor garbage collections and fail-overs. The storage and\nretrieval of the state is provided by the actor state provider \n<xref href=\"Microsoft.ServiceFabric.Actors.Runtime.IActorStateProvider\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public abstract class ActorBase
    content.vb: Public MustInherit Class ActorBase
  seealso:
  - linkId: Microsoft.ServiceFabric.Actors.Runtime.Actor
    commentId: T:Microsoft.ServiceFabric.Actors.Runtime.Actor
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  extensionMethods:
  - Microsoft.ServiceFabric.Actors.Runtime.ActorBase.System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: Microsoft.ServiceFabric.Actors.Runtime.ActorBase.Id
  commentId: P:Microsoft.ServiceFabric.Actors.Runtime.ActorBase.Id
  id: Id
  parent: Microsoft.ServiceFabric.Actors.Runtime.ActorBase
  langs:
  - csharp
  - vb
  name: Id
  nameWithType: ActorBase.Id
  fullName: Microsoft.ServiceFabric.Actors.Runtime.ActorBase.Id
  type: Property
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Actors/Runtime/ActorBase.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: Id
    path: src/prod/src/managed/Microsoft.ServiceFabric.Actors/Runtime/ActorBase.cs
    startLine: 58
  assemblies:
  - Microsoft.ServiceFabric.Actors
  namespace: Microsoft.ServiceFabric.Actors.Runtime
  summary: "\nGets the identity of this actor with the actor service.\n"
  example: []
  syntax:
    content: public ActorId Id { get; }
    content.vb: Public ReadOnly Property Id As ActorId
    parameters: []
    return:
      type: Microsoft.ServiceFabric.Actors.ActorId
      description: <xref href="Microsoft.ServiceFabric.Actors.ActorId" data-throw-if-not-resolved="false"></xref> for the actor.
  overload: Microsoft.ServiceFabric.Actors.Runtime.ActorBase.Id*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.ServiceFabric.Actors.Runtime.ActorBase.ApplicationName
  commentId: P:Microsoft.ServiceFabric.Actors.Runtime.ActorBase.ApplicationName
  id: ApplicationName
  parent: Microsoft.ServiceFabric.Actors.Runtime.ActorBase
  langs:
  - csharp
  - vb
  name: ApplicationName
  nameWithType: ActorBase.ApplicationName
  fullName: Microsoft.ServiceFabric.Actors.Runtime.ActorBase.ApplicationName
  type: Property
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Actors/Runtime/ActorBase.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: ApplicationName
    path: src/prod/src/managed/Microsoft.ServiceFabric.Actors/Runtime/ActorBase.cs
    startLine: 67
  assemblies:
  - Microsoft.ServiceFabric.Actors
  namespace: Microsoft.ServiceFabric.Actors.Runtime
  summary: "\nGets the name of the application that contains the actor service that is hosting this actor.\n"
  example: []
  syntax:
    content: public string ApplicationName { get; }
    content.vb: Public ReadOnly Property ApplicationName As String
    parameters: []
    return:
      type: System.String
      description: Name of application that contains the actor service that is hosting this actor.
  overload: Microsoft.ServiceFabric.Actors.Runtime.ActorBase.ApplicationName*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.ServiceFabric.Actors.Runtime.ActorBase.ServiceUri
  commentId: P:Microsoft.ServiceFabric.Actors.Runtime.ActorBase.ServiceUri
  id: ServiceUri
  parent: Microsoft.ServiceFabric.Actors.Runtime.ActorBase
  langs:
  - csharp
  - vb
  name: ServiceUri
  nameWithType: ActorBase.ServiceUri
  fullName: Microsoft.ServiceFabric.Actors.Runtime.ActorBase.ServiceUri
  type: Property
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Actors/Runtime/ActorBase.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: ServiceUri
    path: src/prod/src/managed/Microsoft.ServiceFabric.Actors/Runtime/ActorBase.cs
    startLine: 76
  assemblies:
  - Microsoft.ServiceFabric.Actors
  namespace: Microsoft.ServiceFabric.Actors.Runtime
  summary: "\nGets the Uri of the actor service that is hosting this actor.\n"
  example: []
  syntax:
    content: public Uri ServiceUri { get; }
    content.vb: Public ReadOnly Property ServiceUri As Uri
    parameters: []
    return:
      type: System.Uri
      description: <xref href="System.Uri" data-throw-if-not-resolved="false"></xref> of the actor service that is hosting this actor.
  overload: Microsoft.ServiceFabric.Actors.Runtime.ActorBase.ServiceUri*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.ServiceFabric.Actors.Runtime.ActorBase.ActorService
  commentId: P:Microsoft.ServiceFabric.Actors.Runtime.ActorBase.ActorService
  id: ActorService
  parent: Microsoft.ServiceFabric.Actors.Runtime.ActorBase
  langs:
  - csharp
  - vb
  name: ActorService
  nameWithType: ActorBase.ActorService
  fullName: Microsoft.ServiceFabric.Actors.Runtime.ActorBase.ActorService
  type: Property
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Actors/Runtime/ActorBase.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: ActorService
    path: src/prod/src/managed/Microsoft.ServiceFabric.Actors/Runtime/ActorBase.cs
    startLine: 87
  assemblies:
  - Microsoft.ServiceFabric.Actors
  namespace: Microsoft.ServiceFabric.Actors.Runtime
  summary: "\nGets the stateful service replica that is hosting the actor.\n"
  example: []
  syntax:
    content: public ActorService ActorService { get; }
    content.vb: Public ReadOnly Property ActorService As ActorService
    parameters: []
    return:
      type: Microsoft.ServiceFabric.Actors.Runtime.ActorService
      description: "\nA <xref href=\"Microsoft.ServiceFabric.Actors.Runtime.ActorService\" data-throw-if-not-resolved=\"false\"></xref> that represents the stateful service replica hosting the actor.\n"
  overload: Microsoft.ServiceFabric.Actors.Runtime.ActorBase.ActorService*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.ServiceFabric.Actors.Runtime.ActorBase.OnActivateAsync
  commentId: M:Microsoft.ServiceFabric.Actors.Runtime.ActorBase.OnActivateAsync
  id: OnActivateAsync
  parent: Microsoft.ServiceFabric.Actors.Runtime.ActorBase
  langs:
  - csharp
  - vb
  name: OnActivateAsync()
  nameWithType: ActorBase.OnActivateAsync()
  fullName: Microsoft.ServiceFabric.Actors.Runtime.ActorBase.OnActivateAsync()
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Actors/Runtime/ActorBase.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: OnActivateAsync
    path: src/prod/src/managed/Microsoft.ServiceFabric.Actors/Runtime/ActorBase.cs
    startLine: 124
  assemblies:
  - Microsoft.ServiceFabric.Actors
  namespace: Microsoft.ServiceFabric.Actors.Runtime
  summary: "\nOverride this method to initialize the members, initialize state or register timers. This method is called right after the actor is activated\nand before any method call or reminders are dispatched on it.\n"
  example: []
  syntax:
    content: protected virtual Task OnActivateAsync()
    content.vb: Protected Overridable Function OnActivateAsync As Task
    return:
      type: System.Threading.Tasks.Task
      description: A <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> that represents outstanding OnActivateAsync operation.
  overload: Microsoft.ServiceFabric.Actors.Runtime.ActorBase.OnActivateAsync*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: Microsoft.ServiceFabric.Actors.Runtime.ActorBase.OnDeactivateAsync
  commentId: M:Microsoft.ServiceFabric.Actors.Runtime.ActorBase.OnDeactivateAsync
  id: OnDeactivateAsync
  parent: Microsoft.ServiceFabric.Actors.Runtime.ActorBase
  langs:
  - csharp
  - vb
  name: OnDeactivateAsync()
  nameWithType: ActorBase.OnDeactivateAsync()
  fullName: Microsoft.ServiceFabric.Actors.Runtime.ActorBase.OnDeactivateAsync()
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Actors/Runtime/ActorBase.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: OnDeactivateAsync
    path: src/prod/src/managed/Microsoft.ServiceFabric.Actors/Runtime/ActorBase.cs
    startLine: 134
  assemblies:
  - Microsoft.ServiceFabric.Actors
  namespace: Microsoft.ServiceFabric.Actors.Runtime
  summary: "\nOverride this method to release any resources. This method is called when actor is deactivated (garbage collected by Actor Runtime).\nActor operations like state changes should not be called from this method.\n"
  example: []
  syntax:
    content: protected virtual Task OnDeactivateAsync()
    content.vb: Protected Overridable Function OnDeactivateAsync As Task
    return:
      type: System.Threading.Tasks.Task
      description: A <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> that represents outstanding OnDeactivateAsync operation.
  overload: Microsoft.ServiceFabric.Actors.Runtime.ActorBase.OnDeactivateAsync*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: Microsoft.ServiceFabric.Actors.Runtime.ActorBase.OnPreActorMethodAsync(Microsoft.ServiceFabric.Actors.Runtime.ActorMethodContext)
  commentId: M:Microsoft.ServiceFabric.Actors.Runtime.ActorBase.OnPreActorMethodAsync(Microsoft.ServiceFabric.Actors.Runtime.ActorMethodContext)
  id: OnPreActorMethodAsync(Microsoft.ServiceFabric.Actors.Runtime.ActorMethodContext)
  parent: Microsoft.ServiceFabric.Actors.Runtime.ActorBase
  langs:
  - csharp
  - vb
  name: OnPreActorMethodAsync(ActorMethodContext)
  nameWithType: ActorBase.OnPreActorMethodAsync(ActorMethodContext)
  fullName: Microsoft.ServiceFabric.Actors.Runtime.ActorBase.OnPreActorMethodAsync(Microsoft.ServiceFabric.Actors.Runtime.ActorMethodContext)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Actors/Runtime/ActorBase.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: OnPreActorMethodAsync
    path: src/prod/src/managed/Microsoft.ServiceFabric.Actors/Runtime/ActorBase.cs
    startLine: 157
  assemblies:
  - Microsoft.ServiceFabric.Actors
  namespace: Microsoft.ServiceFabric.Actors.Runtime
  summary: "\nThis method is invoked by actor runtime just before invoking an actor method. Override this method\nfor performing any actions prior to an actor method is invoked.\n"
  remarks: "\nThis method is invoked by actor runtime prior to:\n<ul><li>Invoking an actor interface method when a client request comes.</li><li>Invoking a method on <xref href=\"Microsoft.ServiceFabric.Actors.Runtime.IRemindable\" data-throw-if-not-resolved=\"false\"></xref> interface when a reminder fires.</li><li>Invoking a timer callback when timer fires.</li></ul>\n"
  example: []
  syntax:
    content: protected virtual Task OnPreActorMethodAsync(ActorMethodContext actorMethodContext)
    content.vb: Protected Overridable Function OnPreActorMethodAsync(actorMethodContext As ActorMethodContext) As Task
    parameters:
    - id: actorMethodContext
      type: Microsoft.ServiceFabric.Actors.Runtime.ActorMethodContext
      description: "\nAn <xref href=\"Microsoft.ServiceFabric.Actors.Runtime.ActorMethodContext\" data-throw-if-not-resolved=\"false\"></xref> describing the method that will be invoked by actor runtime after this method finishes.\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\nA <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> representing pre-actor-method operation.\n"
  overload: Microsoft.ServiceFabric.Actors.Runtime.ActorBase.OnPreActorMethodAsync*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: Microsoft.ServiceFabric.Actors.Runtime.ActorBase.OnPostActorMethodAsync(Microsoft.ServiceFabric.Actors.Runtime.ActorMethodContext)
  commentId: M:Microsoft.ServiceFabric.Actors.Runtime.ActorBase.OnPostActorMethodAsync(Microsoft.ServiceFabric.Actors.Runtime.ActorMethodContext)
  id: OnPostActorMethodAsync(Microsoft.ServiceFabric.Actors.Runtime.ActorMethodContext)
  parent: Microsoft.ServiceFabric.Actors.Runtime.ActorBase
  langs:
  - csharp
  - vb
  name: OnPostActorMethodAsync(ActorMethodContext)
  nameWithType: ActorBase.OnPostActorMethodAsync(ActorMethodContext)
  fullName: Microsoft.ServiceFabric.Actors.Runtime.ActorBase.OnPostActorMethodAsync(Microsoft.ServiceFabric.Actors.Runtime.ActorMethodContext)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Actors/Runtime/ActorBase.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: OnPostActorMethodAsync
    path: src/prod/src/managed/Microsoft.ServiceFabric.Actors/Runtime/ActorBase.cs
    startLine: 180
  assemblies:
  - Microsoft.ServiceFabric.Actors
  namespace: Microsoft.ServiceFabric.Actors.Runtime
  summary: "\nThis method is invoked by actor runtime an actor method has finished execution. Override this method\nfor performing any actions after an actor method has finished execution. \n"
  remarks: "\nThis method is invoked by actor runtime prior to:\n<ul><li>Invoking an actor interface method when a client request comes.</li><li>Invoking a method on <xref href=\"Microsoft.ServiceFabric.Actors.Runtime.IRemindable\" data-throw-if-not-resolved=\"false\"></xref> interface when a reminder fires.</li><li>Invoking a timer callback when timer fires.</li></ul>\n"
  example: []
  syntax:
    content: protected virtual Task OnPostActorMethodAsync(ActorMethodContext actorMethodContext)
    content.vb: Protected Overridable Function OnPostActorMethodAsync(actorMethodContext As ActorMethodContext) As Task
    parameters:
    - id: actorMethodContext
      type: Microsoft.ServiceFabric.Actors.Runtime.ActorMethodContext
      description: "\nAn <xref href=\"Microsoft.ServiceFabric.Actors.Runtime.ActorMethodContext\" data-throw-if-not-resolved=\"false\"></xref> describing the method that was invoked by actor runtime prior to this method.\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\nA <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> representing post-actor-method operation.\n"
  overload: Microsoft.ServiceFabric.Actors.Runtime.ActorBase.OnPostActorMethodAsync*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: Microsoft.ServiceFabric.Actors.Runtime.ActorBase.UnregisterTimer(Microsoft.ServiceFabric.Actors.Runtime.IActorTimer)
  commentId: M:Microsoft.ServiceFabric.Actors.Runtime.ActorBase.UnregisterTimer(Microsoft.ServiceFabric.Actors.Runtime.IActorTimer)
  id: UnregisterTimer(Microsoft.ServiceFabric.Actors.Runtime.IActorTimer)
  parent: Microsoft.ServiceFabric.Actors.Runtime.ActorBase
  langs:
  - csharp
  - vb
  name: UnregisterTimer(IActorTimer)
  nameWithType: ActorBase.UnregisterTimer(IActorTimer)
  fullName: Microsoft.ServiceFabric.Actors.Runtime.ActorBase.UnregisterTimer(Microsoft.ServiceFabric.Actors.Runtime.IActorTimer)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Actors/Runtime/ActorBase.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: UnregisterTimer
    path: src/prod/src/managed/Microsoft.ServiceFabric.Actors/Runtime/ActorBase.cs
    startLine: 189
  assemblies:
  - Microsoft.ServiceFabric.Actors
  namespace: Microsoft.ServiceFabric.Actors.Runtime
  summary: "\nUnregisters a Timer previously set on this actor.\n"
  example: []
  syntax:
    content: protected void UnregisterTimer(IActorTimer timer)
    content.vb: Protected Sub UnregisterTimer(timer As IActorTimer)
    parameters:
    - id: timer
      type: Microsoft.ServiceFabric.Actors.Runtime.IActorTimer
      description: IActorTimer representing timer that needs to be unregistered..
  overload: Microsoft.ServiceFabric.Actors.Runtime.ActorBase.UnregisterTimer*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: Microsoft.ServiceFabric.Actors.Runtime.ActorBase.GetEvent``1
  commentId: M:Microsoft.ServiceFabric.Actors.Runtime.ActorBase.GetEvent``1
  id: GetEvent``1
  parent: Microsoft.ServiceFabric.Actors.Runtime.ActorBase
  langs:
  - csharp
  - vb
  name: GetEvent<TEvent>()
  nameWithType: ActorBase.GetEvent<TEvent>()
  fullName: Microsoft.ServiceFabric.Actors.Runtime.ActorBase.GetEvent<TEvent>()
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Actors/Runtime/ActorBase.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: GetEvent
    path: src/prod/src/managed/Microsoft.ServiceFabric.Actors/Runtime/ActorBase.cs
    startLine: 205
  assemblies:
  - Microsoft.ServiceFabric.Actors
  namespace: Microsoft.ServiceFabric.Actors.Runtime
  summary: "\nGets the event for the specified event interface.\n"
  example: []
  syntax:
    content: protected TEvent GetEvent<TEvent>()
    content.vb: Protected Function GetEvent(Of TEvent) As TEvent
    typeParameters:
    - id: TEvent
      description: Event interface type.
    return:
      type: '{TEvent}'
      description: Returns Event that represents the specified interface.
  overload: Microsoft.ServiceFabric.Actors.Runtime.ActorBase.GetEvent*
  nameWithType.vb: ActorBase.GetEvent(Of TEvent)()
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: Microsoft.ServiceFabric.Actors.Runtime.ActorBase.GetEvent(Of TEvent)()
  name.vb: GetEvent(Of TEvent)()
- uid: Microsoft.ServiceFabric.Actors.Runtime.ActorBase.GetReminder(System.String)
  commentId: M:Microsoft.ServiceFabric.Actors.Runtime.ActorBase.GetReminder(System.String)
  id: GetReminder(System.String)
  parent: Microsoft.ServiceFabric.Actors.Runtime.ActorBase
  langs:
  - csharp
  - vb
  name: GetReminder(String)
  nameWithType: ActorBase.GetReminder(String)
  fullName: Microsoft.ServiceFabric.Actors.Runtime.ActorBase.GetReminder(System.String)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Actors/Runtime/ActorBase.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: GetReminder
    path: src/prod/src/managed/Microsoft.ServiceFabric.Actors/Runtime/ActorBase.cs
    startLine: 217
  assemblies:
  - Microsoft.ServiceFabric.Actors
  namespace: Microsoft.ServiceFabric.Actors.Runtime
  summary: "\nGets the actor reminder with specified reminder name.\n"
  example: []
  syntax:
    content: protected IActorReminder GetReminder(string reminderName)
    content.vb: Protected Function GetReminder(reminderName As String) As IActorReminder
    parameters:
    - id: reminderName
      type: System.String
      description: Name of the reminder to get.
    return:
      type: Microsoft.ServiceFabric.Actors.Runtime.IActorReminder
      description: "\nAn <xref href=\"Microsoft.ServiceFabric.Actors.Runtime.IActorReminder\" data-throw-if-not-resolved=\"false\"></xref> that represents an actor reminder.\n"
  overload: Microsoft.ServiceFabric.Actors.Runtime.ActorBase.GetReminder*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: Microsoft.ServiceFabric.Actors.Runtime.ActorBase.UnregisterReminderAsync(Microsoft.ServiceFabric.Actors.Runtime.IActorReminder)
  commentId: M:Microsoft.ServiceFabric.Actors.Runtime.ActorBase.UnregisterReminderAsync(Microsoft.ServiceFabric.Actors.Runtime.IActorReminder)
  id: UnregisterReminderAsync(Microsoft.ServiceFabric.Actors.Runtime.IActorReminder)
  parent: Microsoft.ServiceFabric.Actors.Runtime.ActorBase
  langs:
  - csharp
  - vb
  name: UnregisterReminderAsync(IActorReminder)
  nameWithType: ActorBase.UnregisterReminderAsync(IActorReminder)
  fullName: Microsoft.ServiceFabric.Actors.Runtime.ActorBase.UnregisterReminderAsync(Microsoft.ServiceFabric.Actors.Runtime.IActorReminder)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Actors/Runtime/ActorBase.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: UnregisterReminderAsync
    path: src/prod/src/managed/Microsoft.ServiceFabric.Actors/Runtime/ActorBase.cs
    startLine: 233
  assemblies:
  - Microsoft.ServiceFabric.Actors
  namespace: Microsoft.ServiceFabric.Actors.Runtime
  summary: "\nUnregisters the specified reminder with actor.\n"
  example: []
  syntax:
    content: protected Task UnregisterReminderAsync(IActorReminder reminder)
    content.vb: Protected Function UnregisterReminderAsync(reminder As IActorReminder) As Task
    parameters:
    - id: reminder
      type: Microsoft.ServiceFabric.Actors.Runtime.IActorReminder
      description: The actor reminder to unregister.
    return:
      type: System.Threading.Tasks.Task
      description: "\nA task that represents the asynchronous unregister operation.\n"
  overload: Microsoft.ServiceFabric.Actors.Runtime.ActorBase.UnregisterReminderAsync*
  exceptions:
  - type: System.Fabric.FabricException
    commentId: T:System.Fabric.FabricException
    description: "\nWhen the specified reminder is not registered with actor.\n"
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: Microsoft.ServiceFabric.Actors.Runtime.ActorBase.RegisterTimer(System.Func{System.Object,System.Threading.Tasks.Task},System.Object,System.TimeSpan,System.TimeSpan)
  commentId: M:Microsoft.ServiceFabric.Actors.Runtime.ActorBase.RegisterTimer(System.Func{System.Object,System.Threading.Tasks.Task},System.Object,System.TimeSpan,System.TimeSpan)
  id: RegisterTimer(System.Func{System.Object,System.Threading.Tasks.Task},System.Object,System.TimeSpan,System.TimeSpan)
  parent: Microsoft.ServiceFabric.Actors.Runtime.ActorBase
  langs:
  - csharp
  - vb
  name: RegisterTimer(Func<Object, Task>, Object, TimeSpan, TimeSpan)
  nameWithType: ActorBase.RegisterTimer(Func<Object, Task>, Object, TimeSpan, TimeSpan)
  fullName: Microsoft.ServiceFabric.Actors.Runtime.ActorBase.RegisterTimer(System.Func<System.Object, System.Threading.Tasks.Task>, System.Object, System.TimeSpan, System.TimeSpan)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Actors/Runtime/ActorBase.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: RegisterTimer
    path: src/prod/src/managed/Microsoft.ServiceFabric.Actors/Runtime/ActorBase.cs
    startLine: 247
  assemblies:
  - Microsoft.ServiceFabric.Actors
  namespace: Microsoft.ServiceFabric.Actors.Runtime
  summary: "\nRegisters a Timer for the actor.\n"
  example: []
  syntax:
    content: protected IActorTimer RegisterTimer(Func<object, Task> asyncCallback, object state, TimeSpan dueTime, TimeSpan period)
    content.vb: Protected Function RegisterTimer(asyncCallback As Func(Of Object, Task), state As Object, dueTime As TimeSpan, period As TimeSpan) As IActorTimer
    parameters:
    - id: asyncCallback
      type: System.Func{System.Object,System.Threading.Tasks.Task}
      description: Callback to invoke when timer fires.
    - id: state
      type: System.Object
      description: State to pass into timer callback.
    - id: dueTime
      type: System.TimeSpan
      description: TimeSpan when actor timer is first due.
    - id: period
      type: System.TimeSpan
      description: TimeSpan for subsequent actor timer invocation.
    return:
      type: Microsoft.ServiceFabric.Actors.Runtime.IActorTimer
      description: Returns IActorTimer object.
  overload: Microsoft.ServiceFabric.Actors.Runtime.ActorBase.RegisterTimer*
  nameWithType.vb: ActorBase.RegisterTimer(Func(Of Object, Task), Object, TimeSpan, TimeSpan)
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: Microsoft.ServiceFabric.Actors.Runtime.ActorBase.RegisterTimer(System.Func(Of System.Object, System.Threading.Tasks.Task), System.Object, System.TimeSpan, System.TimeSpan)
  name.vb: RegisterTimer(Func(Of Object, Task), Object, TimeSpan, TimeSpan)
- uid: Microsoft.ServiceFabric.Actors.Runtime.ActorBase.RegisterReminderAsync(System.String,System.Byte[],System.TimeSpan,System.TimeSpan)
  commentId: M:Microsoft.ServiceFabric.Actors.Runtime.ActorBase.RegisterReminderAsync(System.String,System.Byte[],System.TimeSpan,System.TimeSpan)
  id: RegisterReminderAsync(System.String,System.Byte[],System.TimeSpan,System.TimeSpan)
  parent: Microsoft.ServiceFabric.Actors.Runtime.ActorBase
  langs:
  - csharp
  - vb
  name: RegisterReminderAsync(String, Byte[], TimeSpan, TimeSpan)
  nameWithType: ActorBase.RegisterReminderAsync(String, Byte[], TimeSpan, TimeSpan)
  fullName: Microsoft.ServiceFabric.Actors.Runtime.ActorBase.RegisterReminderAsync(System.String, System.Byte[], System.TimeSpan, System.TimeSpan)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Actors/Runtime/ActorBase.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: RegisterReminderAsync
    path: src/prod/src/managed/Microsoft.ServiceFabric.Actors/Runtime/ActorBase.cs
    startLine: 287
  assemblies:
  - Microsoft.ServiceFabric.Actors
  namespace: Microsoft.ServiceFabric.Actors.Runtime
  summary: "\nRegisters the specified reminder with actor.\n"
  example: []
  syntax:
    content: protected Task<IActorReminder> RegisterReminderAsync(string reminderName, byte[] state, TimeSpan dueTime, TimeSpan period)
    content.vb: Protected Function RegisterReminderAsync(reminderName As String, state As Byte(), dueTime As TimeSpan, period As TimeSpan) As Task(Of IActorReminder)
    parameters:
    - id: reminderName
      type: System.String
      description: Name of the reminder to register.
    - id: state
      type: System.Byte[]
      description: State associated with reminder.
    - id: dueTime
      type: System.TimeSpan
      description: "\nA <xref href=\"System.TimeSpan\" data-throw-if-not-resolved=\"false\"></xref> representing the amount of time to delay before firing\nthe reminder. Specify negative one (-1) milliseconds to prevent reminder from firing. \nSpecify zero (0) to fire the reminder immediately.\n"
    - id: period
      type: System.TimeSpan
      description: "\nThe time interval between firing of reminders. Specify negative one (-1) milliseconds\nto disable periodic firing.\n"
    return:
      type: System.Threading.Tasks.Task{Microsoft.ServiceFabric.Actors.Runtime.IActorReminder}
      description: "\nA task that represents the asynchronous registration operation. The value of TResult\nparameter is an <xref href=\"Microsoft.ServiceFabric.Actors.Runtime.IActorReminder\" data-throw-if-not-resolved=\"false\"></xref> that represents the\nactor reminder that was registered.\n"
  overload: Microsoft.ServiceFabric.Actors.Runtime.ActorBase.RegisterReminderAsync*
  nameWithType.vb: ActorBase.RegisterReminderAsync(String, Byte(), TimeSpan, TimeSpan)
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: Microsoft.ServiceFabric.Actors.Runtime.ActorBase.RegisterReminderAsync(System.String, System.Byte(), System.TimeSpan, System.TimeSpan)
  name.vb: RegisterReminderAsync(String, Byte(), TimeSpan, TimeSpan)
references:
- uid: Microsoft.ServiceFabric.Actors.Runtime.Actor
  commentId: T:Microsoft.ServiceFabric.Actors.Runtime.Actor
  isExternal: false
  name: Actor
  nameWithType: Actor
  fullName: Microsoft.ServiceFabric.Actors.Runtime.Actor
- uid: Microsoft.ServiceFabric.Actors.Runtime.IActorStateProvider
  commentId: T:Microsoft.ServiceFabric.Actors.Runtime.IActorStateProvider
  parent: Microsoft.ServiceFabric.Actors.Runtime
  isExternal: false
  name: IActorStateProvider
  nameWithType: IActorStateProvider
  fullName: Microsoft.ServiceFabric.Actors.Runtime.IActorStateProvider
- uid: Microsoft.ServiceFabric.Actors.Runtime
  commentId: N:Microsoft.ServiceFabric.Actors.Runtime
  isExternal: false
  name: Microsoft.ServiceFabric.Actors.Runtime
  nameWithType: Microsoft.ServiceFabric.Actors.Runtime
  fullName: Microsoft.ServiceFabric.Actors.Runtime
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceFabric.Actors.Runtime.ActorBase.System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
  commentId: M:System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  parent: System.Fabric.Messaging.Stream.ByteArraySerializer
  definition: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  name: Serialize<ActorBase>()
  nameWithType: ByteArraySerializer.Serialize<ActorBase>()
  fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<Microsoft.ServiceFabric.Actors.Runtime.ActorBase>()
  nameWithType.vb: ByteArraySerializer.Serialize(Of ActorBase)()
  fullname.vb: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of Microsoft.ServiceFabric.Actors.Runtime.ActorBase)()
  name.vb: Serialize(Of ActorBase)()
  spec.csharp:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
    name: Serialize<ActorBase>
    nameWithType: ByteArraySerializer.Serialize<ActorBase>
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<Microsoft.ServiceFabric.Actors.Runtime.ActorBase>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
    name: Serialize(Of ActorBase)
    nameWithType: ByteArraySerializer.Serialize(Of ActorBase)
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of Microsoft.ServiceFabric.Actors.Runtime.ActorBase)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  commentId: M:System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  isExternal: false
  name: Serialize<T>(T)
  nameWithType: ByteArraySerializer.Serialize<T>(T)
  fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<T>(T)
  nameWithType.vb: ByteArraySerializer.Serialize(Of T)(T)
  fullname.vb: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of T)(T)
  name.vb: Serialize(Of T)(T)
  spec.csharp:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
    name: Serialize<T>
    nameWithType: ByteArraySerializer.Serialize<T>
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
    name: Serialize(Of T)
    nameWithType: ByteArraySerializer.Serialize(Of T)
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.Messaging.Stream.ByteArraySerializer
  commentId: T:System.Fabric.Messaging.Stream.ByteArraySerializer
  parent: System.Fabric.Messaging.Stream
  isExternal: false
  name: ByteArraySerializer
  nameWithType: ByteArraySerializer
  fullName: System.Fabric.Messaging.Stream.ByteArraySerializer
- uid: System.Fabric.Messaging.Stream
  commentId: N:System.Fabric.Messaging.Stream
  isExternal: false
  name: System.Fabric.Messaging.Stream
  nameWithType: System.Fabric.Messaging.Stream
  fullName: System.Fabric.Messaging.Stream
- uid: Microsoft.ServiceFabric.Actors.ActorId
  commentId: T:Microsoft.ServiceFabric.Actors.ActorId
  parent: Microsoft.ServiceFabric.Actors
  isExternal: false
  name: ActorId
  nameWithType: ActorId
  fullName: Microsoft.ServiceFabric.Actors.ActorId
- uid: Microsoft.ServiceFabric.Actors.Runtime.ActorBase.Id*
  commentId: Overload:Microsoft.ServiceFabric.Actors.Runtime.ActorBase.Id
  isExternal: false
  name: Id
  nameWithType: ActorBase.Id
  fullName: Microsoft.ServiceFabric.Actors.Runtime.ActorBase.Id
- uid: Microsoft.ServiceFabric.Actors
  commentId: N:Microsoft.ServiceFabric.Actors
  isExternal: false
  name: Microsoft.ServiceFabric.Actors
  nameWithType: Microsoft.ServiceFabric.Actors
  fullName: Microsoft.ServiceFabric.Actors
- uid: Microsoft.ServiceFabric.Actors.Runtime.ActorBase.ApplicationName*
  commentId: Overload:Microsoft.ServiceFabric.Actors.Runtime.ActorBase.ApplicationName
  isExternal: false
  name: ApplicationName
  nameWithType: ActorBase.ApplicationName
  fullName: Microsoft.ServiceFabric.Actors.Runtime.ActorBase.ApplicationName
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Uri
  commentId: T:System.Uri
  parent: System
  isExternal: true
  name: Uri
  nameWithType: Uri
  fullName: System.Uri
- uid: Microsoft.ServiceFabric.Actors.Runtime.ActorBase.ServiceUri*
  commentId: Overload:Microsoft.ServiceFabric.Actors.Runtime.ActorBase.ServiceUri
  isExternal: false
  name: ServiceUri
  nameWithType: ActorBase.ServiceUri
  fullName: Microsoft.ServiceFabric.Actors.Runtime.ActorBase.ServiceUri
- uid: Microsoft.ServiceFabric.Actors.Runtime.ActorService
  commentId: T:Microsoft.ServiceFabric.Actors.Runtime.ActorService
  parent: Microsoft.ServiceFabric.Actors.Runtime
  isExternal: false
  name: ActorService
  nameWithType: ActorService
  fullName: Microsoft.ServiceFabric.Actors.Runtime.ActorService
- uid: Microsoft.ServiceFabric.Actors.Runtime.ActorBase.ActorService*
  commentId: Overload:Microsoft.ServiceFabric.Actors.Runtime.ActorBase.ActorService
  isExternal: false
  name: ActorService
  nameWithType: ActorBase.ActorService
  fullName: Microsoft.ServiceFabric.Actors.Runtime.ActorBase.ActorService
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: Microsoft.ServiceFabric.Actors.Runtime.ActorBase.OnActivateAsync*
  commentId: Overload:Microsoft.ServiceFabric.Actors.Runtime.ActorBase.OnActivateAsync
  isExternal: false
  name: OnActivateAsync
  nameWithType: ActorBase.OnActivateAsync
  fullName: Microsoft.ServiceFabric.Actors.Runtime.ActorBase.OnActivateAsync
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: Microsoft.ServiceFabric.Actors.Runtime.ActorBase.OnDeactivateAsync*
  commentId: Overload:Microsoft.ServiceFabric.Actors.Runtime.ActorBase.OnDeactivateAsync
  isExternal: false
  name: OnDeactivateAsync
  nameWithType: ActorBase.OnDeactivateAsync
  fullName: Microsoft.ServiceFabric.Actors.Runtime.ActorBase.OnDeactivateAsync
- uid: Microsoft.ServiceFabric.Actors.Runtime.ActorMethodContext
  commentId: T:Microsoft.ServiceFabric.Actors.Runtime.ActorMethodContext
  parent: Microsoft.ServiceFabric.Actors.Runtime
  isExternal: false
  name: ActorMethodContext
  nameWithType: ActorMethodContext
  fullName: Microsoft.ServiceFabric.Actors.Runtime.ActorMethodContext
- uid: Microsoft.ServiceFabric.Actors.Runtime.IRemindable
  commentId: T:Microsoft.ServiceFabric.Actors.Runtime.IRemindable
  isExternal: false
  name: IRemindable
  nameWithType: IRemindable
  fullName: Microsoft.ServiceFabric.Actors.Runtime.IRemindable
- uid: Microsoft.ServiceFabric.Actors.Runtime.ActorBase.OnPreActorMethodAsync*
  commentId: Overload:Microsoft.ServiceFabric.Actors.Runtime.ActorBase.OnPreActorMethodAsync
  isExternal: false
  name: OnPreActorMethodAsync
  nameWithType: ActorBase.OnPreActorMethodAsync
  fullName: Microsoft.ServiceFabric.Actors.Runtime.ActorBase.OnPreActorMethodAsync
- uid: Microsoft.ServiceFabric.Actors.Runtime.ActorBase.OnPostActorMethodAsync*
  commentId: Overload:Microsoft.ServiceFabric.Actors.Runtime.ActorBase.OnPostActorMethodAsync
  isExternal: false
  name: OnPostActorMethodAsync
  nameWithType: ActorBase.OnPostActorMethodAsync
  fullName: Microsoft.ServiceFabric.Actors.Runtime.ActorBase.OnPostActorMethodAsync
- uid: Microsoft.ServiceFabric.Actors.Runtime.ActorBase.UnregisterTimer*
  commentId: Overload:Microsoft.ServiceFabric.Actors.Runtime.ActorBase.UnregisterTimer
  isExternal: false
  name: UnregisterTimer
  nameWithType: ActorBase.UnregisterTimer
  fullName: Microsoft.ServiceFabric.Actors.Runtime.ActorBase.UnregisterTimer
- uid: Microsoft.ServiceFabric.Actors.Runtime.IActorTimer
  commentId: T:Microsoft.ServiceFabric.Actors.Runtime.IActorTimer
  parent: Microsoft.ServiceFabric.Actors.Runtime
  isExternal: false
  name: IActorTimer
  nameWithType: IActorTimer
  fullName: Microsoft.ServiceFabric.Actors.Runtime.IActorTimer
- uid: Microsoft.ServiceFabric.Actors.Runtime.ActorBase.GetEvent*
  commentId: Overload:Microsoft.ServiceFabric.Actors.Runtime.ActorBase.GetEvent
  isExternal: false
  name: GetEvent<TEvent>
  nameWithType: ActorBase.GetEvent<TEvent>
  fullName: Microsoft.ServiceFabric.Actors.Runtime.ActorBase.GetEvent<TEvent>
  nameWithType.vb: ActorBase.GetEvent(Of TEvent)
  fullname.vb: Microsoft.ServiceFabric.Actors.Runtime.ActorBase.GetEvent(Of TEvent)
  name.vb: GetEvent(Of TEvent)
- uid: '{TEvent}'
  commentId: '!:TEvent'
  definition: TEvent
  name: TEvent
  nameWithType: TEvent
  fullName: TEvent
- uid: TEvent
  isExternal: false
  name: TEvent
  nameWithType: TEvent
  fullName: TEvent
- uid: Microsoft.ServiceFabric.Actors.Runtime.IActorReminder
  commentId: T:Microsoft.ServiceFabric.Actors.Runtime.IActorReminder
  parent: Microsoft.ServiceFabric.Actors.Runtime
  isExternal: false
  name: IActorReminder
  nameWithType: IActorReminder
  fullName: Microsoft.ServiceFabric.Actors.Runtime.IActorReminder
- uid: Microsoft.ServiceFabric.Actors.Runtime.ActorBase.GetReminder*
  commentId: Overload:Microsoft.ServiceFabric.Actors.Runtime.ActorBase.GetReminder
  isExternal: false
  name: GetReminder
  nameWithType: ActorBase.GetReminder
  fullName: Microsoft.ServiceFabric.Actors.Runtime.ActorBase.GetReminder
- uid: Microsoft.ServiceFabric.Actors.Runtime.ActorBase.UnregisterReminderAsync*
  commentId: Overload:Microsoft.ServiceFabric.Actors.Runtime.ActorBase.UnregisterReminderAsync
  isExternal: false
  name: UnregisterReminderAsync
  nameWithType: ActorBase.UnregisterReminderAsync
  fullName: Microsoft.ServiceFabric.Actors.Runtime.ActorBase.UnregisterReminderAsync
- uid: System.Fabric.FabricException
  commentId: T:System.Fabric.FabricException
  parent: System.Fabric
  isExternal: false
  name: FabricException
  nameWithType: FabricException
  fullName: System.Fabric.FabricException
- uid: System.Fabric
  commentId: N:System.Fabric
  isExternal: false
  name: System.Fabric
  nameWithType: System.Fabric
  fullName: System.Fabric
- uid: Microsoft.ServiceFabric.Actors.Runtime.ActorBase.RegisterTimer*
  commentId: Overload:Microsoft.ServiceFabric.Actors.Runtime.ActorBase.RegisterTimer
  isExternal: false
  name: RegisterTimer
  nameWithType: ActorBase.RegisterTimer
  fullName: Microsoft.ServiceFabric.Actors.Runtime.ActorBase.RegisterTimer
- uid: System.Func{System.Object,System.Threading.Tasks.Task}
  commentId: T:System.Func{System.Object,System.Threading.Tasks.Task}
  parent: System
  definition: System.Func`2
  name: Func<Object, Task>
  nameWithType: Func<Object, Task>
  fullName: System.Func<System.Object, System.Threading.Tasks.Task>
  nameWithType.vb: Func(Of Object, Task)
  fullname.vb: System.Func(Of System.Object, System.Threading.Tasks.Task)
  name.vb: Func(Of Object, Task)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.TimeSpan
  commentId: T:System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullname.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceFabric.Actors.Runtime.ActorBase.RegisterReminderAsync*
  commentId: Overload:Microsoft.ServiceFabric.Actors.Runtime.ActorBase.RegisterReminderAsync
  isExternal: false
  name: RegisterReminderAsync
  nameWithType: ActorBase.RegisterReminderAsync
  fullName: Microsoft.ServiceFabric.Actors.Runtime.ActorBase.RegisterReminderAsync
- uid: System.Byte[]
  name: Byte[]
  nameWithType: Byte[]
  fullName: System.Byte[]
  nameWithType.vb: Byte()
  fullname.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Threading.Tasks.Task{Microsoft.ServiceFabric.Actors.Runtime.IActorReminder}
  commentId: T:System.Threading.Tasks.Task{Microsoft.ServiceFabric.Actors.Runtime.IActorReminder}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<IActorReminder>
  nameWithType: Task<IActorReminder>
  fullName: System.Threading.Tasks.Task<Microsoft.ServiceFabric.Actors.Runtime.IActorReminder>
  nameWithType.vb: Task(Of IActorReminder)
  fullname.vb: System.Threading.Tasks.Task(Of Microsoft.ServiceFabric.Actors.Runtime.IActorReminder)
  name.vb: Task(Of IActorReminder)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.ServiceFabric.Actors.Runtime.IActorReminder
    name: IActorReminder
    nameWithType: IActorReminder
    fullName: Microsoft.ServiceFabric.Actors.Runtime.IActorReminder
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.ServiceFabric.Actors.Runtime.IActorReminder
    name: IActorReminder
    nameWithType: IActorReminder
    fullName: Microsoft.ServiceFabric.Actors.Runtime.IActorReminder
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullname.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
