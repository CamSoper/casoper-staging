### YamlMime:ManagedReference
items:
- uid: System.Fabric.IReplicator
  commentId: T:System.Fabric.IReplicator
  id: IReplicator
  parent: System.Fabric
  children:
  - System.Fabric.IReplicator.Abort
  - System.Fabric.IReplicator.ChangeRoleAsync(System.Fabric.Epoch,System.Fabric.ReplicaRole,System.Threading.CancellationToken)
  - System.Fabric.IReplicator.CloseAsync(System.Threading.CancellationToken)
  - System.Fabric.IReplicator.GetCatchUpCapability
  - System.Fabric.IReplicator.GetCurrentProgress
  - System.Fabric.IReplicator.OpenAsync(System.Threading.CancellationToken)
  - System.Fabric.IReplicator.UpdateEpochAsync(System.Fabric.Epoch,System.Threading.CancellationToken)
  langs:
  - csharp
  - vb
  name: IReplicator
  nameWithType: IReplicator
  fullName: System.Fabric.IReplicator
  type: Interface
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/IReplicator.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: IReplicator
    path: src/prod/src/managed/Api/src/System/Fabric/IReplicator.cs
    startLine: 75
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: This supports the Service Fabric infrastructure and is not meant to be used directly from your code.
  example: []
  syntax:
    content: 'public interface IReplicator : IPrimaryReplicator'
    content.vb: >-
      Public Interface IReplicator
          Inherits IPrimaryReplicator
  inheritedMembers:
  - System.Fabric.IPrimaryReplicator.OnDataLossAsync(System.Threading.CancellationToken)
  - System.Fabric.IPrimaryReplicator.UpdateCatchUpReplicaSetConfiguration(System.Fabric.ReplicaSetConfiguration,System.Fabric.ReplicaSetConfiguration)
  - System.Fabric.IPrimaryReplicator.WaitForCatchUpQuorumAsync(System.Fabric.ReplicaSetQuorumMode,System.Threading.CancellationToken)
  - System.Fabric.IPrimaryReplicator.UpdateCurrentReplicaSetConfiguration(System.Fabric.ReplicaSetConfiguration)
  - System.Fabric.IPrimaryReplicator.BuildReplicaAsync(System.Fabric.ReplicaInformation,System.Threading.CancellationToken)
  - System.Fabric.IPrimaryReplicator.RemoveReplica(System.Int64)
  extensionMethods:
  - System.Fabric.IReplicator.System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: System.Fabric.IReplicator.OpenAsync(System.Threading.CancellationToken)
  commentId: M:System.Fabric.IReplicator.OpenAsync(System.Threading.CancellationToken)
  id: OpenAsync(System.Threading.CancellationToken)
  parent: System.Fabric.IReplicator
  langs:
  - csharp
  - vb
  name: OpenAsync(CancellationToken)
  nameWithType: IReplicator.OpenAsync(CancellationToken)
  fullName: System.Fabric.IReplicator.OpenAsync(System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/IReplicator.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: OpenAsync
    path: src/prod/src/managed/Api/src/System/Fabric/IReplicator.cs
    startLine: 84
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: This supports the Service Fabric infrastructure and is not meant to be used directly from your code.
  example: []
  syntax:
    content: Task<string> OpenAsync(CancellationToken cancellationToken)
    content.vb: Function OpenAsync(cancellationToken As CancellationToken) As Task(Of String)
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> object that the operation is observing. It can be used to send a notification that the operation should be canceled. Note that cancellation is advisory and that the operation might still be completed even if it is canceled.</p>\n"
    return:
      type: System.Threading.Tasks.Task{System.String}
      description: "\n<p>A task that represents the asynchronous operation.</p>\n"
  overload: System.Fabric.IReplicator.OpenAsync*
- uid: System.Fabric.IReplicator.ChangeRoleAsync(System.Fabric.Epoch,System.Fabric.ReplicaRole,System.Threading.CancellationToken)
  commentId: M:System.Fabric.IReplicator.ChangeRoleAsync(System.Fabric.Epoch,System.Fabric.ReplicaRole,System.Threading.CancellationToken)
  id: ChangeRoleAsync(System.Fabric.Epoch,System.Fabric.ReplicaRole,System.Threading.CancellationToken)
  parent: System.Fabric.IReplicator
  langs:
  - csharp
  - vb
  name: ChangeRoleAsync(Epoch, ReplicaRole, CancellationToken)
  nameWithType: IReplicator.ChangeRoleAsync(Epoch, ReplicaRole, CancellationToken)
  fullName: System.Fabric.IReplicator.ChangeRoleAsync(System.Fabric.Epoch, System.Fabric.ReplicaRole, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/IReplicator.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: ChangeRoleAsync
    path: src/prod/src/managed/Api/src/System/Fabric/IReplicator.cs
    startLine: 99
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: This supports the Service Fabric infrastructure and is not meant to be used directly from your code.
  example: []
  syntax:
    content: Task ChangeRoleAsync(Epoch epoch, ReplicaRole role, CancellationToken cancellationToken)
    content.vb: Function ChangeRoleAsync(epoch As Epoch, role As ReplicaRole, cancellationToken As CancellationToken) As Task
    parameters:
    - id: epoch
      type: System.Fabric.Epoch
      description: "\n<p>This supports the Service Fabric infrastructure and is not meant to be used directly from your code.</p>\n"
    - id: role
      type: System.Fabric.ReplicaRole
      description: "\n<p>This supports the Service Fabric infrastructure and is not meant to be used directly from your code.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> object that the operation is observing. It can be used to send a notification that the operation should be canceled. Note that cancellation is advisory and that the operation might still be completed even if it is canceled.</p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>A task that represents the asynchronous operation.</p>\n"
  overload: System.Fabric.IReplicator.ChangeRoleAsync*
- uid: System.Fabric.IReplicator.CloseAsync(System.Threading.CancellationToken)
  commentId: M:System.Fabric.IReplicator.CloseAsync(System.Threading.CancellationToken)
  id: CloseAsync(System.Threading.CancellationToken)
  parent: System.Fabric.IReplicator
  langs:
  - csharp
  - vb
  name: CloseAsync(CancellationToken)
  nameWithType: IReplicator.CloseAsync(CancellationToken)
  fullName: System.Fabric.IReplicator.CloseAsync(System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/IReplicator.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: CloseAsync
    path: src/prod/src/managed/Api/src/System/Fabric/IReplicator.cs
    startLine: 108
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: This supports the Service Fabric infrastructure and is not meant to be used directly from your code.
  example: []
  syntax:
    content: Task CloseAsync(CancellationToken cancellationToken)
    content.vb: Function CloseAsync(cancellationToken As CancellationToken) As Task
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> object that the operation is observing. It can be used to send a notification that the operation should be canceled. Note that cancellation is advisory and that the operation might still be completed even if it is canceled.</p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>A task that represents the asynchronous operation.</p>\n"
  overload: System.Fabric.IReplicator.CloseAsync*
- uid: System.Fabric.IReplicator.Abort
  commentId: M:System.Fabric.IReplicator.Abort
  id: Abort
  parent: System.Fabric.IReplicator
  langs:
  - csharp
  - vb
  name: Abort()
  nameWithType: IReplicator.Abort()
  fullName: System.Fabric.IReplicator.Abort()
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/IReplicator.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: Abort
    path: src/prod/src/managed/Api/src/System/Fabric/IReplicator.cs
    startLine: 113
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: This supports the Service Fabric infrastructure and is not meant to be used directly from your code.
  remarks: "\n"
  example: []
  syntax:
    content: void Abort()
    content.vb: Sub Abort
  overload: System.Fabric.IReplicator.Abort*
- uid: System.Fabric.IReplicator.GetCurrentProgress
  commentId: M:System.Fabric.IReplicator.GetCurrentProgress
  id: GetCurrentProgress
  parent: System.Fabric.IReplicator
  langs:
  - csharp
  - vb
  name: GetCurrentProgress()
  nameWithType: IReplicator.GetCurrentProgress()
  fullName: System.Fabric.IReplicator.GetCurrentProgress()
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/IReplicator.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: GetCurrentProgress
    path: src/prod/src/managed/Api/src/System/Fabric/IReplicator.cs
    startLine: 119
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: This supports the Service Fabric infrastructure and is not meant to be used directly from your code.
  example: []
  syntax:
    content: long GetCurrentProgress()
    content.vb: Function GetCurrentProgress As Long
    return:
      type: System.Int64
      description: "\n<p>This supports the Service Fabric infrastructure and is not meant to be used directly from your code.</p>\n"
  overload: System.Fabric.IReplicator.GetCurrentProgress*
- uid: System.Fabric.IReplicator.GetCatchUpCapability
  commentId: M:System.Fabric.IReplicator.GetCatchUpCapability
  id: GetCatchUpCapability
  parent: System.Fabric.IReplicator
  langs:
  - csharp
  - vb
  name: GetCatchUpCapability()
  nameWithType: IReplicator.GetCatchUpCapability()
  fullName: System.Fabric.IReplicator.GetCatchUpCapability()
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/IReplicator.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: GetCatchUpCapability
    path: src/prod/src/managed/Api/src/System/Fabric/IReplicator.cs
    startLine: 125
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: This supports the Service Fabric infrastructure and is not meant to be used directly from your code.
  example: []
  syntax:
    content: long GetCatchUpCapability()
    content.vb: Function GetCatchUpCapability As Long
    return:
      type: System.Int64
      description: "\n<p>For Internal Use Only.</p>\n"
  overload: System.Fabric.IReplicator.GetCatchUpCapability*
- uid: System.Fabric.IReplicator.UpdateEpochAsync(System.Fabric.Epoch,System.Threading.CancellationToken)
  commentId: M:System.Fabric.IReplicator.UpdateEpochAsync(System.Fabric.Epoch,System.Threading.CancellationToken)
  id: UpdateEpochAsync(System.Fabric.Epoch,System.Threading.CancellationToken)
  parent: System.Fabric.IReplicator
  langs:
  - csharp
  - vb
  name: UpdateEpochAsync(Epoch, CancellationToken)
  nameWithType: IReplicator.UpdateEpochAsync(Epoch, CancellationToken)
  fullName: System.Fabric.IReplicator.UpdateEpochAsync(System.Fabric.Epoch, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/IReplicator.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: UpdateEpochAsync
    path: src/prod/src/managed/Api/src/System/Fabric/IReplicator.cs
    startLine: 137
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: This supports the Service Fabric infrastructure and is not meant to be used directly from your code.
  example: []
  syntax:
    content: Task UpdateEpochAsync(Epoch epoch, CancellationToken cancellationToken)
    content.vb: Function UpdateEpochAsync(epoch As Epoch, cancellationToken As CancellationToken) As Task
    parameters:
    - id: epoch
      type: System.Fabric.Epoch
      description: "\n<p>This supports the Service Fabric infrastructure and is not meant to be used directly from your code.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> object that the operation is observing. It can be used to send a notification that the operation should be canceled. Note that cancellation is advisory and that the operation might still be completed even if it is canceled.</p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>This supports the Service Fabric infrastructure and is not meant to be used directly from your code.</p>\n"
  overload: System.Fabric.IReplicator.UpdateEpochAsync*
references:
- uid: System.Fabric
  commentId: N:System.Fabric
  isExternal: false
  name: System.Fabric
  nameWithType: System.Fabric
  fullName: System.Fabric
- uid: System.Fabric.IPrimaryReplicator.OnDataLossAsync(System.Threading.CancellationToken)
  commentId: M:System.Fabric.IPrimaryReplicator.OnDataLossAsync(System.Threading.CancellationToken)
  parent: System.Fabric.IPrimaryReplicator
  isExternal: true
  name: OnDataLossAsync(CancellationToken)
  nameWithType: IPrimaryReplicator.OnDataLossAsync(CancellationToken)
  fullName: System.Fabric.IPrimaryReplicator.OnDataLossAsync(System.Threading.CancellationToken)
  spec.csharp:
  - uid: System.Fabric.IPrimaryReplicator.OnDataLossAsync(System.Threading.CancellationToken)
    name: OnDataLossAsync
    nameWithType: IPrimaryReplicator.OnDataLossAsync
    fullName: System.Fabric.IPrimaryReplicator.OnDataLossAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Fabric.IPrimaryReplicator.OnDataLossAsync(System.Threading.CancellationToken)
    name: OnDataLossAsync
    nameWithType: IPrimaryReplicator.OnDataLossAsync
    fullName: System.Fabric.IPrimaryReplicator.OnDataLossAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.IPrimaryReplicator.UpdateCatchUpReplicaSetConfiguration(System.Fabric.ReplicaSetConfiguration,System.Fabric.ReplicaSetConfiguration)
  commentId: M:System.Fabric.IPrimaryReplicator.UpdateCatchUpReplicaSetConfiguration(System.Fabric.ReplicaSetConfiguration,System.Fabric.ReplicaSetConfiguration)
  parent: System.Fabric.IPrimaryReplicator
  isExternal: false
  name: UpdateCatchUpReplicaSetConfiguration(ReplicaSetConfiguration, ReplicaSetConfiguration)
  nameWithType: IPrimaryReplicator.UpdateCatchUpReplicaSetConfiguration(ReplicaSetConfiguration, ReplicaSetConfiguration)
  fullName: System.Fabric.IPrimaryReplicator.UpdateCatchUpReplicaSetConfiguration(System.Fabric.ReplicaSetConfiguration, System.Fabric.ReplicaSetConfiguration)
  spec.csharp:
  - uid: System.Fabric.IPrimaryReplicator.UpdateCatchUpReplicaSetConfiguration(System.Fabric.ReplicaSetConfiguration,System.Fabric.ReplicaSetConfiguration)
    name: UpdateCatchUpReplicaSetConfiguration
    nameWithType: IPrimaryReplicator.UpdateCatchUpReplicaSetConfiguration
    fullName: System.Fabric.IPrimaryReplicator.UpdateCatchUpReplicaSetConfiguration
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Fabric.ReplicaSetConfiguration
    name: ReplicaSetConfiguration
    nameWithType: ReplicaSetConfiguration
    fullName: System.Fabric.ReplicaSetConfiguration
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Fabric.ReplicaSetConfiguration
    name: ReplicaSetConfiguration
    nameWithType: ReplicaSetConfiguration
    fullName: System.Fabric.ReplicaSetConfiguration
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Fabric.IPrimaryReplicator.UpdateCatchUpReplicaSetConfiguration(System.Fabric.ReplicaSetConfiguration,System.Fabric.ReplicaSetConfiguration)
    name: UpdateCatchUpReplicaSetConfiguration
    nameWithType: IPrimaryReplicator.UpdateCatchUpReplicaSetConfiguration
    fullName: System.Fabric.IPrimaryReplicator.UpdateCatchUpReplicaSetConfiguration
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Fabric.ReplicaSetConfiguration
    name: ReplicaSetConfiguration
    nameWithType: ReplicaSetConfiguration
    fullName: System.Fabric.ReplicaSetConfiguration
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Fabric.ReplicaSetConfiguration
    name: ReplicaSetConfiguration
    nameWithType: ReplicaSetConfiguration
    fullName: System.Fabric.ReplicaSetConfiguration
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.IPrimaryReplicator.WaitForCatchUpQuorumAsync(System.Fabric.ReplicaSetQuorumMode,System.Threading.CancellationToken)
  commentId: M:System.Fabric.IPrimaryReplicator.WaitForCatchUpQuorumAsync(System.Fabric.ReplicaSetQuorumMode,System.Threading.CancellationToken)
  parent: System.Fabric.IPrimaryReplicator
  isExternal: true
  name: WaitForCatchUpQuorumAsync(ReplicaSetQuorumMode, CancellationToken)
  nameWithType: IPrimaryReplicator.WaitForCatchUpQuorumAsync(ReplicaSetQuorumMode, CancellationToken)
  fullName: System.Fabric.IPrimaryReplicator.WaitForCatchUpQuorumAsync(System.Fabric.ReplicaSetQuorumMode, System.Threading.CancellationToken)
  spec.csharp:
  - uid: System.Fabric.IPrimaryReplicator.WaitForCatchUpQuorumAsync(System.Fabric.ReplicaSetQuorumMode,System.Threading.CancellationToken)
    name: WaitForCatchUpQuorumAsync
    nameWithType: IPrimaryReplicator.WaitForCatchUpQuorumAsync
    fullName: System.Fabric.IPrimaryReplicator.WaitForCatchUpQuorumAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Fabric.ReplicaSetQuorumMode
    name: ReplicaSetQuorumMode
    nameWithType: ReplicaSetQuorumMode
    fullName: System.Fabric.ReplicaSetQuorumMode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Fabric.IPrimaryReplicator.WaitForCatchUpQuorumAsync(System.Fabric.ReplicaSetQuorumMode,System.Threading.CancellationToken)
    name: WaitForCatchUpQuorumAsync
    nameWithType: IPrimaryReplicator.WaitForCatchUpQuorumAsync
    fullName: System.Fabric.IPrimaryReplicator.WaitForCatchUpQuorumAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Fabric.ReplicaSetQuorumMode
    name: ReplicaSetQuorumMode
    nameWithType: ReplicaSetQuorumMode
    fullName: System.Fabric.ReplicaSetQuorumMode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.IPrimaryReplicator.UpdateCurrentReplicaSetConfiguration(System.Fabric.ReplicaSetConfiguration)
  commentId: M:System.Fabric.IPrimaryReplicator.UpdateCurrentReplicaSetConfiguration(System.Fabric.ReplicaSetConfiguration)
  parent: System.Fabric.IPrimaryReplicator
  isExternal: false
  name: UpdateCurrentReplicaSetConfiguration(ReplicaSetConfiguration)
  nameWithType: IPrimaryReplicator.UpdateCurrentReplicaSetConfiguration(ReplicaSetConfiguration)
  fullName: System.Fabric.IPrimaryReplicator.UpdateCurrentReplicaSetConfiguration(System.Fabric.ReplicaSetConfiguration)
  spec.csharp:
  - uid: System.Fabric.IPrimaryReplicator.UpdateCurrentReplicaSetConfiguration(System.Fabric.ReplicaSetConfiguration)
    name: UpdateCurrentReplicaSetConfiguration
    nameWithType: IPrimaryReplicator.UpdateCurrentReplicaSetConfiguration
    fullName: System.Fabric.IPrimaryReplicator.UpdateCurrentReplicaSetConfiguration
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Fabric.ReplicaSetConfiguration
    name: ReplicaSetConfiguration
    nameWithType: ReplicaSetConfiguration
    fullName: System.Fabric.ReplicaSetConfiguration
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Fabric.IPrimaryReplicator.UpdateCurrentReplicaSetConfiguration(System.Fabric.ReplicaSetConfiguration)
    name: UpdateCurrentReplicaSetConfiguration
    nameWithType: IPrimaryReplicator.UpdateCurrentReplicaSetConfiguration
    fullName: System.Fabric.IPrimaryReplicator.UpdateCurrentReplicaSetConfiguration
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Fabric.ReplicaSetConfiguration
    name: ReplicaSetConfiguration
    nameWithType: ReplicaSetConfiguration
    fullName: System.Fabric.ReplicaSetConfiguration
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.IPrimaryReplicator.BuildReplicaAsync(System.Fabric.ReplicaInformation,System.Threading.CancellationToken)
  commentId: M:System.Fabric.IPrimaryReplicator.BuildReplicaAsync(System.Fabric.ReplicaInformation,System.Threading.CancellationToken)
  parent: System.Fabric.IPrimaryReplicator
  isExternal: true
  name: BuildReplicaAsync(ReplicaInformation, CancellationToken)
  nameWithType: IPrimaryReplicator.BuildReplicaAsync(ReplicaInformation, CancellationToken)
  fullName: System.Fabric.IPrimaryReplicator.BuildReplicaAsync(System.Fabric.ReplicaInformation, System.Threading.CancellationToken)
  spec.csharp:
  - uid: System.Fabric.IPrimaryReplicator.BuildReplicaAsync(System.Fabric.ReplicaInformation,System.Threading.CancellationToken)
    name: BuildReplicaAsync
    nameWithType: IPrimaryReplicator.BuildReplicaAsync
    fullName: System.Fabric.IPrimaryReplicator.BuildReplicaAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Fabric.ReplicaInformation
    name: ReplicaInformation
    nameWithType: ReplicaInformation
    fullName: System.Fabric.ReplicaInformation
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Fabric.IPrimaryReplicator.BuildReplicaAsync(System.Fabric.ReplicaInformation,System.Threading.CancellationToken)
    name: BuildReplicaAsync
    nameWithType: IPrimaryReplicator.BuildReplicaAsync
    fullName: System.Fabric.IPrimaryReplicator.BuildReplicaAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Fabric.ReplicaInformation
    name: ReplicaInformation
    nameWithType: ReplicaInformation
    fullName: System.Fabric.ReplicaInformation
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.IPrimaryReplicator.RemoveReplica(System.Int64)
  commentId: M:System.Fabric.IPrimaryReplicator.RemoveReplica(System.Int64)
  parent: System.Fabric.IPrimaryReplicator
  isExternal: true
  name: RemoveReplica(Int64)
  nameWithType: IPrimaryReplicator.RemoveReplica(Int64)
  fullName: System.Fabric.IPrimaryReplicator.RemoveReplica(System.Int64)
  spec.csharp:
  - uid: System.Fabric.IPrimaryReplicator.RemoveReplica(System.Int64)
    name: RemoveReplica
    nameWithType: IPrimaryReplicator.RemoveReplica
    fullName: System.Fabric.IPrimaryReplicator.RemoveReplica
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Fabric.IPrimaryReplicator.RemoveReplica(System.Int64)
    name: RemoveReplica
    nameWithType: IPrimaryReplicator.RemoveReplica
    fullName: System.Fabric.IPrimaryReplicator.RemoveReplica
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.IReplicator.System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
  commentId: M:System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  parent: System.Fabric.Messaging.Stream.ByteArraySerializer
  definition: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  name: Serialize<IReplicator>()
  nameWithType: ByteArraySerializer.Serialize<IReplicator>()
  fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<System.Fabric.IReplicator>()
  nameWithType.vb: ByteArraySerializer.Serialize(Of IReplicator)()
  fullname.vb: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of System.Fabric.IReplicator)()
  name.vb: Serialize(Of IReplicator)()
  spec.csharp:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
    name: Serialize<IReplicator>
    nameWithType: ByteArraySerializer.Serialize<IReplicator>
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<System.Fabric.IReplicator>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
    name: Serialize(Of IReplicator)
    nameWithType: ByteArraySerializer.Serialize(Of IReplicator)
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of System.Fabric.IReplicator)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.IPrimaryReplicator
  commentId: T:System.Fabric.IPrimaryReplicator
  parent: System.Fabric
  isExternal: false
  name: IPrimaryReplicator
  nameWithType: IPrimaryReplicator
  fullName: System.Fabric.IPrimaryReplicator
- uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  commentId: M:System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  isExternal: false
  name: Serialize<T>(T)
  nameWithType: ByteArraySerializer.Serialize<T>(T)
  fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<T>(T)
  nameWithType.vb: ByteArraySerializer.Serialize(Of T)(T)
  fullname.vb: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of T)(T)
  name.vb: Serialize(Of T)(T)
  spec.csharp:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
    name: Serialize<T>
    nameWithType: ByteArraySerializer.Serialize<T>
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
    name: Serialize(Of T)
    nameWithType: ByteArraySerializer.Serialize(Of T)
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.Messaging.Stream.ByteArraySerializer
  commentId: T:System.Fabric.Messaging.Stream.ByteArraySerializer
  parent: System.Fabric.Messaging.Stream
  isExternal: false
  name: ByteArraySerializer
  nameWithType: ByteArraySerializer
  fullName: System.Fabric.Messaging.Stream.ByteArraySerializer
- uid: System.Fabric.Messaging.Stream
  commentId: N:System.Fabric.Messaging.Stream
  isExternal: false
  name: System.Fabric.Messaging.Stream
  nameWithType: System.Fabric.Messaging.Stream
  fullName: System.Fabric.Messaging.Stream
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Fabric.IReplicator.OpenAsync*
  commentId: Overload:System.Fabric.IReplicator.OpenAsync
  isExternal: false
  name: OpenAsync
  nameWithType: IReplicator.OpenAsync
  fullName: System.Fabric.IReplicator.OpenAsync
- uid: System.Threading.Tasks.Task{System.String}
  commentId: T:System.Threading.Tasks.Task{System.String}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<String>
  nameWithType: Task<String>
  fullName: System.Threading.Tasks.Task<System.String>
  nameWithType.vb: Task(Of String)
  fullname.vb: System.Threading.Tasks.Task(Of System.String)
  name.vb: Task(Of String)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: false
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullname.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: System.Fabric.IReplicator.ChangeRoleAsync*
  commentId: Overload:System.Fabric.IReplicator.ChangeRoleAsync
  isExternal: false
  name: ChangeRoleAsync
  nameWithType: IReplicator.ChangeRoleAsync
  fullName: System.Fabric.IReplicator.ChangeRoleAsync
- uid: System.Fabric.Epoch
  commentId: T:System.Fabric.Epoch
  parent: System.Fabric
  isExternal: false
  name: Epoch
  nameWithType: Epoch
  fullName: System.Fabric.Epoch
- uid: System.Fabric.ReplicaRole
  commentId: T:System.Fabric.ReplicaRole
  parent: System.Fabric
  isExternal: false
  name: ReplicaRole
  nameWithType: ReplicaRole
  fullName: System.Fabric.ReplicaRole
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Fabric.IReplicator.CloseAsync*
  commentId: Overload:System.Fabric.IReplicator.CloseAsync
  isExternal: false
  name: CloseAsync
  nameWithType: IReplicator.CloseAsync
  fullName: System.Fabric.IReplicator.CloseAsync
- uid: System.Fabric.IReplicator.Abort*
  commentId: Overload:System.Fabric.IReplicator.Abort
  isExternal: false
  name: Abort
  nameWithType: IReplicator.Abort
  fullName: System.Fabric.IReplicator.Abort
- uid: System.Fabric.IReplicator.GetCurrentProgress*
  commentId: Overload:System.Fabric.IReplicator.GetCurrentProgress
  isExternal: false
  name: GetCurrentProgress
  nameWithType: IReplicator.GetCurrentProgress
  fullName: System.Fabric.IReplicator.GetCurrentProgress
- uid: System.Int64
  commentId: T:System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Fabric.IReplicator.GetCatchUpCapability*
  commentId: Overload:System.Fabric.IReplicator.GetCatchUpCapability
  isExternal: false
  name: GetCatchUpCapability
  nameWithType: IReplicator.GetCatchUpCapability
  fullName: System.Fabric.IReplicator.GetCatchUpCapability
- uid: System.Fabric.IReplicator.UpdateEpochAsync*
  commentId: Overload:System.Fabric.IReplicator.UpdateEpochAsync
  isExternal: false
  name: UpdateEpochAsync
  nameWithType: IReplicator.UpdateEpochAsync
  fullName: System.Fabric.IReplicator.UpdateEpochAsync
