### YamlMime:ManagedReference
items:
- uid: Microsoft.ServiceFabric.Services.Client.IServicePartitionResolver
  commentId: T:Microsoft.ServiceFabric.Services.Client.IServicePartitionResolver
  id: IServicePartitionResolver
  parent: Microsoft.ServiceFabric.Services.Client
  children:
  - Microsoft.ServiceFabric.Services.Client.IServicePartitionResolver.ResolveAsync(System.Fabric.ResolvedServicePartition,System.TimeSpan,System.TimeSpan,System.Threading.CancellationToken)
  - Microsoft.ServiceFabric.Services.Client.IServicePartitionResolver.ResolveAsync(System.Uri,Microsoft.ServiceFabric.Services.Client.ServicePartitionKey,System.TimeSpan,System.TimeSpan,System.Threading.CancellationToken)
  langs:
  - csharp
  - vb
  name: IServicePartitionResolver
  nameWithType: IServicePartitionResolver
  fullName: Microsoft.ServiceFabric.Services.Client.IServicePartitionResolver
  type: Interface
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Services/Client/IServicePartitionResolver.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: IServicePartitionResolver
    path: src/prod/src/managed/Microsoft.ServiceFabric.Services/Client/IServicePartitionResolver.cs
    startLine: 14
  assemblies:
  - Microsoft.ServiceFabric.Services
  namespace: Microsoft.ServiceFabric.Services.Client
  summary: "\nDefines the interface for Service partition resolver.\n"
  example: []
  syntax:
    content: public interface IServicePartitionResolver
    content.vb: Public Interface IServicePartitionResolver
  extensionMethods:
  - Microsoft.ServiceFabric.Services.Client.IServicePartitionResolver.System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: Microsoft.ServiceFabric.Services.Client.IServicePartitionResolver.ResolveAsync(System.Uri,Microsoft.ServiceFabric.Services.Client.ServicePartitionKey,System.TimeSpan,System.TimeSpan,System.Threading.CancellationToken)
  commentId: M:Microsoft.ServiceFabric.Services.Client.IServicePartitionResolver.ResolveAsync(System.Uri,Microsoft.ServiceFabric.Services.Client.ServicePartitionKey,System.TimeSpan,System.TimeSpan,System.Threading.CancellationToken)
  id: ResolveAsync(System.Uri,Microsoft.ServiceFabric.Services.Client.ServicePartitionKey,System.TimeSpan,System.TimeSpan,System.Threading.CancellationToken)
  parent: Microsoft.ServiceFabric.Services.Client.IServicePartitionResolver
  langs:
  - csharp
  - vb
  name: ResolveAsync(Uri, ServicePartitionKey, TimeSpan, TimeSpan, CancellationToken)
  nameWithType: IServicePartitionResolver.ResolveAsync(Uri, ServicePartitionKey, TimeSpan, TimeSpan, CancellationToken)
  fullName: Microsoft.ServiceFabric.Services.Client.IServicePartitionResolver.ResolveAsync(System.Uri, Microsoft.ServiceFabric.Services.Client.ServicePartitionKey, System.TimeSpan, System.TimeSpan, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Services/Client/IServicePartitionResolver.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: ResolveAsync
    path: src/prod/src/managed/Microsoft.ServiceFabric.Services/Client/IServicePartitionResolver.cs
    startLine: 31
  assemblies:
  - Microsoft.ServiceFabric.Services
  namespace: Microsoft.ServiceFabric.Services.Client
  summary: "\nResolves a partition of the specified service with specified back-off/retry settings on retry-able errors.\n"
  example: []
  syntax:
    content: Task<ResolvedServicePartition> ResolveAsync(Uri serviceUri, ServicePartitionKey partitionKey, TimeSpan resolveTimeoutPerTry, TimeSpan maxRetryBackoffInterval, CancellationToken cancellationToken)
    content.vb: Function ResolveAsync(serviceUri As Uri, partitionKey As ServicePartitionKey, resolveTimeoutPerTry As TimeSpan, maxRetryBackoffInterval As TimeSpan, cancellationToken As CancellationToken) As Task(Of ResolvedServicePartition)
    parameters:
    - id: serviceUri
      type: System.Uri
      description: Uri of the service to resolve
    - id: partitionKey
      type: Microsoft.ServiceFabric.Services.Client.ServicePartitionKey
      description: Key that identifies the partition to resolve
    - id: resolveTimeoutPerTry
      type: System.TimeSpan
      description: The time out per resolve try.
    - id: maxRetryBackoffInterval
      type: System.TimeSpan
      description: "\nThe interval to back-off before retrying the resolution after a failure due to retry-able exception.\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: Cancellation token
    return:
      type: System.Threading.Tasks.Task{System.Fabric.ResolvedServicePartition}
      description: "\nA <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> that represents outstanding operation. The result from\nthe Task is the <xref href=\"System.Fabric.ResolvedServicePartition\" data-throw-if-not-resolved=\"false\"></xref> object, that contains the information\nabout the resolved service partition including the service endpoints.\n"
  overload: Microsoft.ServiceFabric.Services.Client.IServicePartitionResolver.ResolveAsync*
- uid: Microsoft.ServiceFabric.Services.Client.IServicePartitionResolver.ResolveAsync(System.Fabric.ResolvedServicePartition,System.TimeSpan,System.TimeSpan,System.Threading.CancellationToken)
  commentId: M:Microsoft.ServiceFabric.Services.Client.IServicePartitionResolver.ResolveAsync(System.Fabric.ResolvedServicePartition,System.TimeSpan,System.TimeSpan,System.Threading.CancellationToken)
  id: ResolveAsync(System.Fabric.ResolvedServicePartition,System.TimeSpan,System.TimeSpan,System.Threading.CancellationToken)
  parent: Microsoft.ServiceFabric.Services.Client.IServicePartitionResolver
  langs:
  - csharp
  - vb
  name: ResolveAsync(ResolvedServicePartition, TimeSpan, TimeSpan, CancellationToken)
  nameWithType: IServicePartitionResolver.ResolveAsync(ResolvedServicePartition, TimeSpan, TimeSpan, CancellationToken)
  fullName: Microsoft.ServiceFabric.Services.Client.IServicePartitionResolver.ResolveAsync(System.Fabric.ResolvedServicePartition, System.TimeSpan, System.TimeSpan, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Services/Client/IServicePartitionResolver.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: ResolveAsync
    path: src/prod/src/managed/Microsoft.ServiceFabric.Services/Client/IServicePartitionResolver.cs
    startLine: 53
  assemblies:
  - Microsoft.ServiceFabric.Services
  namespace: Microsoft.ServiceFabric.Services.Client
  summary: "\nRe-resolves a previously resolved partition of the specified service with specified back-off/retry settings \non retry-able errors. \n"
  example: []
  syntax:
    content: Task<ResolvedServicePartition> ResolveAsync(ResolvedServicePartition previousRsp, TimeSpan resolveTimeoutPerTry, TimeSpan maxRetryBackoffInterval, CancellationToken cancellationToken)
    content.vb: Function ResolveAsync(previousRsp As ResolvedServicePartition, resolveTimeoutPerTry As TimeSpan, maxRetryBackoffInterval As TimeSpan, cancellationToken As CancellationToken) As Task(Of ResolvedServicePartition)
    parameters:
    - id: previousRsp
      type: System.Fabric.ResolvedServicePartition
      description: Previous resolved service partition
    - id: resolveTimeoutPerTry
      type: System.TimeSpan
      description: The time out per resolve try.
    - id: maxRetryBackoffInterval
      type: System.TimeSpan
      description: "\nThe interval to back-off before retrying the resolution after a failure due to retry-able exception.\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: Cancellation token
    return:
      type: System.Threading.Tasks.Task{System.Fabric.ResolvedServicePartition}
      description: "\nA <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> that represents outstanding operation. The result from\nthe Task is the <xref href=\"System.Fabric.ResolvedServicePartition\" data-throw-if-not-resolved=\"false\"></xref> object, that contains the information\nabout the resolved service partition including the service endpoints.\n"
  overload: Microsoft.ServiceFabric.Services.Client.IServicePartitionResolver.ResolveAsync*
references:
- uid: Microsoft.ServiceFabric.Services.Client
  commentId: N:Microsoft.ServiceFabric.Services.Client
  isExternal: false
  name: Microsoft.ServiceFabric.Services.Client
  nameWithType: Microsoft.ServiceFabric.Services.Client
  fullName: Microsoft.ServiceFabric.Services.Client
- uid: Microsoft.ServiceFabric.Services.Client.IServicePartitionResolver.System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
  commentId: M:System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  parent: System.Fabric.Messaging.Stream.ByteArraySerializer
  definition: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  name: Serialize<IServicePartitionResolver>()
  nameWithType: ByteArraySerializer.Serialize<IServicePartitionResolver>()
  fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<Microsoft.ServiceFabric.Services.Client.IServicePartitionResolver>()
  nameWithType.vb: ByteArraySerializer.Serialize(Of IServicePartitionResolver)()
  fullname.vb: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of Microsoft.ServiceFabric.Services.Client.IServicePartitionResolver)()
  name.vb: Serialize(Of IServicePartitionResolver)()
  spec.csharp:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
    name: Serialize<IServicePartitionResolver>
    nameWithType: ByteArraySerializer.Serialize<IServicePartitionResolver>
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<Microsoft.ServiceFabric.Services.Client.IServicePartitionResolver>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
    name: Serialize(Of IServicePartitionResolver)
    nameWithType: ByteArraySerializer.Serialize(Of IServicePartitionResolver)
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of Microsoft.ServiceFabric.Services.Client.IServicePartitionResolver)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  commentId: M:System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  isExternal: false
  name: Serialize<T>(T)
  nameWithType: ByteArraySerializer.Serialize<T>(T)
  fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<T>(T)
  nameWithType.vb: ByteArraySerializer.Serialize(Of T)(T)
  fullname.vb: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of T)(T)
  name.vb: Serialize(Of T)(T)
  spec.csharp:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
    name: Serialize<T>
    nameWithType: ByteArraySerializer.Serialize<T>
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
    name: Serialize(Of T)
    nameWithType: ByteArraySerializer.Serialize(Of T)
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.Messaging.Stream.ByteArraySerializer
  commentId: T:System.Fabric.Messaging.Stream.ByteArraySerializer
  parent: System.Fabric.Messaging.Stream
  isExternal: false
  name: ByteArraySerializer
  nameWithType: ByteArraySerializer
  fullName: System.Fabric.Messaging.Stream.ByteArraySerializer
- uid: System.Fabric.Messaging.Stream
  commentId: N:System.Fabric.Messaging.Stream
  isExternal: false
  name: System.Fabric.Messaging.Stream
  nameWithType: System.Fabric.Messaging.Stream
  fullName: System.Fabric.Messaging.Stream
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Fabric.ResolvedServicePartition
  commentId: T:System.Fabric.ResolvedServicePartition
  parent: System.Fabric
  isExternal: false
  name: ResolvedServicePartition
  nameWithType: ResolvedServicePartition
  fullName: System.Fabric.ResolvedServicePartition
- uid: Microsoft.ServiceFabric.Services.Client.IServicePartitionResolver.ResolveAsync*
  commentId: Overload:Microsoft.ServiceFabric.Services.Client.IServicePartitionResolver.ResolveAsync
  isExternal: false
  name: ResolveAsync
  nameWithType: IServicePartitionResolver.ResolveAsync
  fullName: Microsoft.ServiceFabric.Services.Client.IServicePartitionResolver.ResolveAsync
- uid: System.Uri
  commentId: T:System.Uri
  parent: System
  isExternal: true
  name: Uri
  nameWithType: Uri
  fullName: System.Uri
- uid: Microsoft.ServiceFabric.Services.Client.ServicePartitionKey
  commentId: T:Microsoft.ServiceFabric.Services.Client.ServicePartitionKey
  parent: Microsoft.ServiceFabric.Services.Client
  isExternal: false
  name: ServicePartitionKey
  nameWithType: ServicePartitionKey
  fullName: Microsoft.ServiceFabric.Services.Client.ServicePartitionKey
- uid: System.TimeSpan
  commentId: T:System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task{System.Fabric.ResolvedServicePartition}
  commentId: T:System.Threading.Tasks.Task{System.Fabric.ResolvedServicePartition}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<ResolvedServicePartition>
  nameWithType: Task<ResolvedServicePartition>
  fullName: System.Threading.Tasks.Task<System.Fabric.ResolvedServicePartition>
  nameWithType.vb: Task(Of ResolvedServicePartition)
  fullname.vb: System.Threading.Tasks.Task(Of System.Fabric.ResolvedServicePartition)
  name.vb: Task(Of ResolvedServicePartition)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Fabric.ResolvedServicePartition
    name: ResolvedServicePartition
    nameWithType: ResolvedServicePartition
    fullName: System.Fabric.ResolvedServicePartition
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Fabric.ResolvedServicePartition
    name: ResolvedServicePartition
    nameWithType: ResolvedServicePartition
    fullName: System.Fabric.ResolvedServicePartition
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: System.Fabric
  commentId: N:System.Fabric
  isExternal: false
  name: System.Fabric
  nameWithType: System.Fabric
  fullName: System.Fabric
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: false
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullname.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
