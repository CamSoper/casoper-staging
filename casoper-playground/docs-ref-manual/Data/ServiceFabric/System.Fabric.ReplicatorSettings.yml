### YamlMime:ManagedReference
items:
- uid: System.Fabric.ReplicatorSettings
  commentId: T:System.Fabric.ReplicatorSettings
  id: ReplicatorSettings
  parent: System.Fabric
  children:
  - System.Fabric.ReplicatorSettings.#ctor
  - System.Fabric.ReplicatorSettings.BatchAcknowledgementInterval
  - System.Fabric.ReplicatorSettings.InitialCopyQueueSize
  - System.Fabric.ReplicatorSettings.InitialPrimaryReplicationQueueSize
  - System.Fabric.ReplicatorSettings.InitialReplicationQueueSize
  - System.Fabric.ReplicatorSettings.InitialSecondaryReplicationQueueSize
  - System.Fabric.ReplicatorSettings.LoadFrom(System.Fabric.CodePackageActivationContext,System.String,System.String)
  - System.Fabric.ReplicatorSettings.MaxCopyQueueSize
  - System.Fabric.ReplicatorSettings.MaxPrimaryReplicationQueueMemorySize
  - System.Fabric.ReplicatorSettings.MaxPrimaryReplicationQueueSize
  - System.Fabric.ReplicatorSettings.MaxReplicationMessageSize
  - System.Fabric.ReplicatorSettings.MaxReplicationQueueMemorySize
  - System.Fabric.ReplicatorSettings.MaxReplicationQueueSize
  - System.Fabric.ReplicatorSettings.MaxSecondaryReplicationQueueMemorySize
  - System.Fabric.ReplicatorSettings.MaxSecondaryReplicationQueueSize
  - System.Fabric.ReplicatorSettings.PrimaryWaitForPendingQuorumsTimeout
  - System.Fabric.ReplicatorSettings.ReplicatorAddress
  - System.Fabric.ReplicatorSettings.RequireServiceAck
  - System.Fabric.ReplicatorSettings.RetryInterval
  - System.Fabric.ReplicatorSettings.SecondaryClearAcknowledgedOperations
  - System.Fabric.ReplicatorSettings.SecurityCredentials
  - System.Fabric.ReplicatorSettings.UseStreamFaultsAndEndOfStreamOperationAck
  langs:
  - csharp
  - vb
  name: ReplicatorSettings
  nameWithType: ReplicatorSettings
  fullName: System.Fabric.ReplicatorSettings
  type: Class
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/ReplicatorSettings.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: ReplicatorSettings
    path: src/prod/src/managed/Api/src/System/Fabric/ReplicatorSettings.cs
    startLine: 16
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Allows a stateful replica to configure the <xref href=\"System.Fabric.FabricReplicator\" data-throw-if-not-resolved=\"false\"></xref> when creating it \nvia <xref href=\"System.Fabric.IStatefulServicePartition.CreateReplicator(System.Fabric.IStateProvider%2cSystem.Fabric.ReplicatorSettings)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example: []
  syntax:
    content: public sealed class ReplicatorSettings
    content.vb: Public NotInheritable Class ReplicatorSettings
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  extensionMethods:
  - System.Fabric.ReplicatorSettings.System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: System.Fabric.ReplicatorSettings.#ctor
  commentId: M:System.Fabric.ReplicatorSettings.#ctor
  id: '#ctor'
  parent: System.Fabric.ReplicatorSettings
  langs:
  - csharp
  - vb
  name: ReplicatorSettings()
  nameWithType: ReplicatorSettings.ReplicatorSettings()
  fullName: System.Fabric.ReplicatorSettings.ReplicatorSettings()
  type: Constructor
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/ReplicatorSettings.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: .ctor
    path: src/prod/src/managed/Api/src/System/Fabric/ReplicatorSettings.cs
    startLine: 21
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Fabric.ReplicatorSettings\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  example: []
  syntax:
    content: public ReplicatorSettings()
    content.vb: Public Sub New
  overload: System.Fabric.ReplicatorSettings.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.ReplicatorSettings.RetryInterval
  commentId: P:System.Fabric.ReplicatorSettings.RetryInterval
  id: RetryInterval
  parent: System.Fabric.ReplicatorSettings
  langs:
  - csharp
  - vb
  name: RetryInterval
  nameWithType: ReplicatorSettings.RetryInterval
  fullName: System.Fabric.ReplicatorSettings.RetryInterval
  type: Property
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/ReplicatorSettings.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: RetryInterval
    path: src/prod/src/managed/Api/src/System/Fabric/ReplicatorSettings.cs
    startLine: 42
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Defines how long the <xref href=\"System.Fabric.FabricReplicator\" data-throw-if-not-resolved=\"false\"></xref> waits after it transmits a message from the primary to the \nsecondary for the secondary to acknowledge that it has received the message.</p>\n"
  remarks: "\n<p>Receiving a message does not necessarily that the message has been processed.</p>\n<p>If this timer is exceeded, then the message is retransmitted.</p>\n<p>The default value is 5 seconds.</p>\n"
  example: []
  syntax:
    content: public TimeSpan? RetryInterval { get; set; }
    content.vb: Public Property RetryInterval As TimeSpan?
    parameters: []
    return:
      type: System.Nullable{System.TimeSpan}
      description: "\n<p>The time needed the <xref href=\"System.Fabric.FabricReplicator\" data-throw-if-not-resolved=\"false\"></xref> waits after it transmits a message from the primary to the \nsecondary for the secondary to acknowledge that it has received the message.</p>\n"
  overload: System.Fabric.ReplicatorSettings.RetryInterval*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Fabric.ReplicatorSettings.BatchAcknowledgementInterval
  commentId: P:System.Fabric.ReplicatorSettings.BatchAcknowledgementInterval
  id: BatchAcknowledgementInterval
  parent: System.Fabric.ReplicatorSettings
  langs:
  - csharp
  - vb
  name: BatchAcknowledgementInterval
  nameWithType: ReplicatorSettings.BatchAcknowledgementInterval
  fullName: System.Fabric.ReplicatorSettings.BatchAcknowledgementInterval
  type: Property
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/ReplicatorSettings.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: BatchAcknowledgementInterval
    path: src/prod/src/managed/Api/src/System/Fabric/ReplicatorSettings.cs
    startLine: 56
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Gets or sets the amount of time that the replicator waits after receiving an operation before sending back an acknowledgment. </p>\n"
  remarks: "\n<p>Other operations received and acknowledged during this time period will have their acknowledgments sent back in a single message.</p>\n<p>Increasing the <xref href=\"System.Fabric.ReplicatorSettings.BatchAcknowledgementInterval\" data-throw-if-not-resolved=\"false\"></xref> value decreases latency of individual replication \noperations but increases throughput of the replicator.</p>\n<p>Default value is 0.05 Seconds (50 milliseconds)</p>\n"
  example: []
  syntax:
    content: public TimeSpan? BatchAcknowledgementInterval { get; set; }
    content.vb: Public Property BatchAcknowledgementInterval As TimeSpan?
    parameters: []
    return:
      type: System.Nullable{System.TimeSpan}
      description: "\n<p>The amount of time that the replicator waits after receiving an operation before sending back an acknowledgment.</p>\n"
  overload: System.Fabric.ReplicatorSettings.BatchAcknowledgementInterval*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Fabric.ReplicatorSettings.ReplicatorAddress
  commentId: P:System.Fabric.ReplicatorSettings.ReplicatorAddress
  id: ReplicatorAddress
  parent: System.Fabric.ReplicatorSettings
  langs:
  - csharp
  - vb
  name: ReplicatorAddress
  nameWithType: ReplicatorSettings.ReplicatorAddress
  fullName: System.Fabric.ReplicatorSettings.ReplicatorAddress
  type: Property
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/ReplicatorSettings.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: ReplicatorAddress
    path: src/prod/src/managed/Api/src/System/Fabric/ReplicatorSettings.cs
    startLine: 67
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Configures the address that this replicator will use when communicating with other Replicators.</p>\n"
  remarks: "\n<p>String is formatted as “hostname:port”, where hostname can be FQDN or IP address. The default value is localhost:0</p>\n"
  example: []
  syntax:
    content: public string ReplicatorAddress { get; set; }
    content.vb: Public Property ReplicatorAddress As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>The address that this replicator will use when communicating with other Replicators.</p>\n"
  overload: System.Fabric.ReplicatorSettings.ReplicatorAddress*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Fabric.ReplicatorSettings.SecurityCredentials
  commentId: P:System.Fabric.ReplicatorSettings.SecurityCredentials
  id: SecurityCredentials
  parent: System.Fabric.ReplicatorSettings
  langs:
  - csharp
  - vb
  name: SecurityCredentials
  nameWithType: ReplicatorSettings.SecurityCredentials
  fullName: System.Fabric.ReplicatorSettings.SecurityCredentials
  type: Property
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/ReplicatorSettings.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: SecurityCredentials
    path: src/prod/src/managed/Api/src/System/Fabric/ReplicatorSettings.cs
    startLine: 75
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Allows the service to define security credentials for securing the traffic between replicators.</p>\n"
  example: []
  syntax:
    content: public SecurityCredentials SecurityCredentials { get; set; }
    content.vb: Public Property SecurityCredentials As SecurityCredentials
    parameters: []
    return:
      type: System.Fabric.SecurityCredentials
      description: "\n<p>The service to define security credentials for securing the traffic between replicators.</p>\n"
  overload: System.Fabric.ReplicatorSettings.SecurityCredentials*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Fabric.ReplicatorSettings.InitialReplicationQueueSize
  commentId: P:System.Fabric.ReplicatorSettings.InitialReplicationQueueSize
  id: InitialReplicationQueueSize
  parent: System.Fabric.ReplicatorSettings
  langs:
  - csharp
  - vb
  name: InitialReplicationQueueSize
  nameWithType: ReplicatorSettings.InitialReplicationQueueSize
  fullName: System.Fabric.ReplicatorSettings.InitialReplicationQueueSize
  type: Property
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/ReplicatorSettings.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: InitialReplicationQueueSize
    path: src/prod/src/managed/Api/src/System/Fabric/ReplicatorSettings.cs
    startLine: 86
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Gets or sets the initial size of the replication queue size.</p>\n"
  remarks: "\n<p></p>\n"
  example: []
  syntax:
    content: public long ? InitialReplicationQueueSize { get; set; }
    content.vb: Public Property InitialReplicationQueueSize As Long?
    parameters: []
    return:
      type: System.Nullable{System.Int64}
      description: "\n<p>The initial size of the replication queue size.</p>\n"
  overload: System.Fabric.ReplicatorSettings.InitialReplicationQueueSize*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Fabric.ReplicatorSettings.MaxReplicationQueueSize
  commentId: P:System.Fabric.ReplicatorSettings.MaxReplicationQueueSize
  id: MaxReplicationQueueSize
  parent: System.Fabric.ReplicatorSettings
  langs:
  - csharp
  - vb
  name: MaxReplicationQueueSize
  nameWithType: ReplicatorSettings.MaxReplicationQueueSize
  fullName: System.Fabric.ReplicatorSettings.MaxReplicationQueueSize
  type: Property
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/ReplicatorSettings.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: MaxReplicationQueueSize
    path: src/prod/src/managed/Api/src/System/Fabric/ReplicatorSettings.cs
    startLine: 97
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Gets or sets the maximum size for the replication queue.</p>\n"
  remarks: "\n<p></p>\n"
  example: []
  syntax:
    content: public long ? MaxReplicationQueueSize { get; set; }
    content.vb: Public Property MaxReplicationQueueSize As Long?
    parameters: []
    return:
      type: System.Nullable{System.Int64}
      description: "\n<p>the maximum size for the replication queue.</p>\n"
  overload: System.Fabric.ReplicatorSettings.MaxReplicationQueueSize*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Fabric.ReplicatorSettings.InitialCopyQueueSize
  commentId: P:System.Fabric.ReplicatorSettings.InitialCopyQueueSize
  id: InitialCopyQueueSize
  parent: System.Fabric.ReplicatorSettings
  langs:
  - csharp
  - vb
  name: InitialCopyQueueSize
  nameWithType: ReplicatorSettings.InitialCopyQueueSize
  fullName: System.Fabric.ReplicatorSettings.InitialCopyQueueSize
  type: Property
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/ReplicatorSettings.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: InitialCopyQueueSize
    path: src/prod/src/managed/Api/src/System/Fabric/ReplicatorSettings.cs
    startLine: 110
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Gets or sets the initial size of the copy operation queue inside <xref href=\"System.Fabric.FabricReplicator\" data-throw-if-not-resolved=\"false\"></xref>, which contains \ncopy <xref href=\"System.Fabric.IOperation\" data-throw-if-not-resolved=\"false\"></xref>s not yet pumped and processed by the service.</p>\n"
  remarks: "\n<p>The default value is 64. Note that values for this parameter must be a power of 2.</p>\n"
  example: []
  syntax:
    content: public long ? InitialCopyQueueSize { get; set; }
    content.vb: Public Property InitialCopyQueueSize As Long?
    parameters: []
    return:
      type: System.Nullable{System.Int64}
      description: "\n<p>The initial size of the copy operation queue inside <xref href=\"System.Fabric.FabricReplicator\" data-throw-if-not-resolved=\"false\"></xref>, which contains copy \n<xref href=\"System.Fabric.IOperation\" data-throw-if-not-resolved=\"false\"></xref>s not yet pumped and processed by the service.</p>\n"
  overload: System.Fabric.ReplicatorSettings.InitialCopyQueueSize*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Fabric.ReplicatorSettings.MaxCopyQueueSize
  commentId: P:System.Fabric.ReplicatorSettings.MaxCopyQueueSize
  id: MaxCopyQueueSize
  parent: System.Fabric.ReplicatorSettings
  langs:
  - csharp
  - vb
  name: MaxCopyQueueSize
  nameWithType: ReplicatorSettings.MaxCopyQueueSize
  fullName: System.Fabric.ReplicatorSettings.MaxCopyQueueSize
  type: Property
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/ReplicatorSettings.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: MaxCopyQueueSize
    path: src/prod/src/managed/Api/src/System/Fabric/ReplicatorSettings.cs
    startLine: 125
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Gets or sets the maximum size of the copy operation queue inside <xref href=\"System.Fabric.FabricReplicator\" data-throw-if-not-resolved=\"false\"></xref>, which contains \ncopy <xref href=\"System.Fabric.IOperation\" data-throw-if-not-resolved=\"false\"></xref>s not yet pumped and processed by the service.</p>\n"
  remarks: "\n<p>If this queue size is reached at the secondary, operations will be buffered in the Primary’s copy queue. If that queue also fills, \nthen the Primary will begin seeing <xref href=\"System.Fabric.FabricErrorCode.ReplicationQueueFull\" data-throw-if-not-resolved=\"false\"></xref> exceptions.</p>\n<p>The default value is 1024</p>\n"
  example: []
  syntax:
    content: public long ? MaxCopyQueueSize { get; set; }
    content.vb: Public Property MaxCopyQueueSize As Long?
    parameters: []
    return:
      type: System.Nullable{System.Int64}
      description: "\n<p>The maximum size of the copy operation queue inside <xref href=\"System.Fabric.FabricReplicator\" data-throw-if-not-resolved=\"false\"></xref>, which contains copy \n<xref href=\"System.Fabric.IOperation\" data-throw-if-not-resolved=\"false\"></xref>s not yet pumped and processed by the service.</p>\n"
  overload: System.Fabric.ReplicatorSettings.MaxCopyQueueSize*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Fabric.ReplicatorSettings.RequireServiceAck
  commentId: P:System.Fabric.ReplicatorSettings.RequireServiceAck
  id: RequireServiceAck
  parent: System.Fabric.ReplicatorSettings
  langs:
  - csharp
  - vb
  name: RequireServiceAck
  nameWithType: ReplicatorSettings.RequireServiceAck
  fullName: System.Fabric.ReplicatorSettings.RequireServiceAck
  type: Property
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/ReplicatorSettings.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: RequireServiceAck
    path: src/prod/src/managed/Api/src/System/Fabric/ReplicatorSettings.cs
    startLine: 141
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Prevents the optimistic acknowledgment of operations in non-persistent services by requiring that the service calls \n<xref href=\"System.Fabric.IOperation.Acknowledge\" data-throw-if-not-resolved=\"false\"></xref> before it pumps the next operation.</p>\n"
  remarks: "\n<p>Non-persistent services which require explicit acknowledgment can set this property to True in order to prevent optimistic acknowledgment \nof the operations by the Replicator. This setting has no effect for persistent services. </p>\n<p>The default value is false.</p>\n"
  example: []
  syntax:
    content: public bool ? RequireServiceAck { get; set; }
    content.vb: Public Property RequireServiceAck As Boolean?
    parameters: []
    return:
      type: System.Nullable{System.Boolean}
      description: "\n<p>\n<strong>true</strong> if the optimistic acknowledgment of operations in non-persistent services;otherwise, \n<strong>false</strong>.</p>\n"
  overload: System.Fabric.ReplicatorSettings.RequireServiceAck*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Fabric.ReplicatorSettings.MaxReplicationQueueMemorySize
  commentId: P:System.Fabric.ReplicatorSettings.MaxReplicationQueueMemorySize
  id: MaxReplicationQueueMemorySize
  parent: System.Fabric.ReplicatorSettings
  langs:
  - csharp
  - vb
  name: MaxReplicationQueueMemorySize
  nameWithType: ReplicatorSettings.MaxReplicationQueueMemorySize
  fullName: System.Fabric.ReplicatorSettings.MaxReplicationQueueMemorySize
  type: Property
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/ReplicatorSettings.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: MaxReplicationQueueMemorySize
    path: src/prod/src/managed/Api/src/System/Fabric/ReplicatorSettings.cs
    startLine: 153
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Gets or sets the maximum size for the replication queue memory.</p>\n"
  remarks: "\n<p>The default value is 0. This implies there is no memory limit</p>\n"
  example: []
  syntax:
    content: public long ? MaxReplicationQueueMemorySize { get; set; }
    content.vb: Public Property MaxReplicationQueueMemorySize As Long?
    parameters: []
    return:
      type: System.Nullable{System.Int64}
      description: "\n<p>The maximum size for the replication queue memory.</p>\n"
  overload: System.Fabric.ReplicatorSettings.MaxReplicationQueueMemorySize*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Fabric.ReplicatorSettings.SecondaryClearAcknowledgedOperations
  commentId: P:System.Fabric.ReplicatorSettings.SecondaryClearAcknowledgedOperations
  id: SecondaryClearAcknowledgedOperations
  parent: System.Fabric.ReplicatorSettings
  langs:
  - csharp
  - vb
  name: SecondaryClearAcknowledgedOperations
  nameWithType: ReplicatorSettings.SecondaryClearAcknowledgedOperations
  fullName: System.Fabric.ReplicatorSettings.SecondaryClearAcknowledgedOperations
  type: Property
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/ReplicatorSettings.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: SecondaryClearAcknowledgedOperations
    path: src/prod/src/managed/Api/src/System/Fabric/ReplicatorSettings.cs
    startLine: 167
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Typically, operations in the secondary replicator are kept in the queue to be able to catchup replicas if it is promoted to a primary. With \nthis flag enabled, the secondary replicator releases the operation as soon as it is acknowledged by the user service.</p>\n"
  remarks: "\n<p>The default value is false</p>\n"
  example: []
  syntax:
    content: public bool ? SecondaryClearAcknowledgedOperations { get; set; }
    content.vb: Public Property SecondaryClearAcknowledgedOperations As Boolean?
    parameters: []
    return:
      type: System.Nullable{System.Boolean}
      description: "\n<p>\n<strong>true</strong> if the secondary replicator releases the operation as soon as it is acknowledged by the user service; \notherwise, <strong>false</strong>.</p>\n"
  overload: System.Fabric.ReplicatorSettings.SecondaryClearAcknowledgedOperations*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Fabric.ReplicatorSettings.MaxReplicationMessageSize
  commentId: P:System.Fabric.ReplicatorSettings.MaxReplicationMessageSize
  id: MaxReplicationMessageSize
  parent: System.Fabric.ReplicatorSettings
  langs:
  - csharp
  - vb
  name: MaxReplicationMessageSize
  nameWithType: ReplicatorSettings.MaxReplicationMessageSize
  fullName: System.Fabric.ReplicatorSettings.MaxReplicationMessageSize
  type: Property
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/ReplicatorSettings.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: MaxReplicationMessageSize
    path: src/prod/src/managed/Api/src/System/Fabric/ReplicatorSettings.cs
    startLine: 179
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Gets or sets the maximum size of a message that can be transmitted via the replicator. These include replication messages, copy messages \nand copy context messages. The unit of representation is bytes.</p>\n"
  remarks: "\n<p>The default value is 50MB</p>\n"
  example: []
  syntax:
    content: public long ? MaxReplicationMessageSize { get; set; }
    content.vb: Public Property MaxReplicationMessageSize As Long?
    parameters: []
    return:
      type: System.Nullable{System.Int64}
      description: "\n<p>The maximum size of a message that can be transmitted via the replicator.</p>\n"
  overload: System.Fabric.ReplicatorSettings.MaxReplicationMessageSize*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Fabric.ReplicatorSettings.UseStreamFaultsAndEndOfStreamOperationAck
  commentId: P:System.Fabric.ReplicatorSettings.UseStreamFaultsAndEndOfStreamOperationAck
  id: UseStreamFaultsAndEndOfStreamOperationAck
  parent: System.Fabric.ReplicatorSettings
  langs:
  - csharp
  - vb
  name: UseStreamFaultsAndEndOfStreamOperationAck
  nameWithType: ReplicatorSettings.UseStreamFaultsAndEndOfStreamOperationAck
  fullName: System.Fabric.ReplicatorSettings.UseStreamFaultsAndEndOfStreamOperationAck
  type: Property
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/ReplicatorSettings.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: UseStreamFaultsAndEndOfStreamOperationAck
    path: src/prod/src/managed/Api/src/System/Fabric/ReplicatorSettings.cs
    startLine: 183
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: This supports the Service Fabric infrastructure and is not meant to be used directly from your code.
  example: []
  syntax:
    content: public bool ? UseStreamFaultsAndEndOfStreamOperationAck { get; set; }
    content.vb: Public Property UseStreamFaultsAndEndOfStreamOperationAck As Boolean?
    parameters: []
    return:
      type: System.Nullable{System.Boolean}
  overload: System.Fabric.ReplicatorSettings.UseStreamFaultsAndEndOfStreamOperationAck*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Fabric.ReplicatorSettings.InitialPrimaryReplicationQueueSize
  commentId: P:System.Fabric.ReplicatorSettings.InitialPrimaryReplicationQueueSize
  id: InitialPrimaryReplicationQueueSize
  parent: System.Fabric.ReplicatorSettings
  langs:
  - csharp
  - vb
  name: InitialPrimaryReplicationQueueSize
  nameWithType: ReplicatorSettings.InitialPrimaryReplicationQueueSize
  fullName: System.Fabric.ReplicatorSettings.InitialPrimaryReplicationQueueSize
  type: Property
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/ReplicatorSettings.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: InitialPrimaryReplicationQueueSize
    path: src/prod/src/managed/Api/src/System/Fabric/ReplicatorSettings.cs
    startLine: 197
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Defines the initial size of the primary replication operation queue inside <xref href=\"System.Fabric.FabricReplicator\" data-throw-if-not-resolved=\"false\"></xref>, which contains \nreplication <xref href=\"System.Fabric.IOperation\" data-throw-if-not-resolved=\"false\"></xref>s.The unit here is the number of operations in the queue.</p>\n"
  remarks: "\n<p>This setting is specific to the Replicator when the role of the service is Primary</p>\n<p>The default value is 64.  Note that values for this parameter must be a power of 2.</p>\n"
  example: []
  syntax:
    content: public long ? InitialPrimaryReplicationQueueSize { get; set; }
    content.vb: Public Property InitialPrimaryReplicationQueueSize As Long?
    parameters: []
    return:
      type: System.Nullable{System.Int64}
      description: "\n<p>The initial size of the primary replication operation queue inside <xref href=\"System.Fabric.FabricReplicator\" data-throw-if-not-resolved=\"false\"></xref></p>\n"
  overload: System.Fabric.ReplicatorSettings.InitialPrimaryReplicationQueueSize*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Fabric.ReplicatorSettings.MaxPrimaryReplicationQueueSize
  commentId: P:System.Fabric.ReplicatorSettings.MaxPrimaryReplicationQueueSize
  id: MaxPrimaryReplicationQueueSize
  parent: System.Fabric.ReplicatorSettings
  langs:
  - csharp
  - vb
  name: MaxPrimaryReplicationQueueSize
  nameWithType: ReplicatorSettings.MaxPrimaryReplicationQueueSize
  fullName: System.Fabric.ReplicatorSettings.MaxPrimaryReplicationQueueSize
  type: Property
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/ReplicatorSettings.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: MaxPrimaryReplicationQueueSize
    path: src/prod/src/managed/Api/src/System/Fabric/ReplicatorSettings.cs
    startLine: 212
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Defines the maximum size of the primary replication operation queue inside <xref href=\"System.Fabric.FabricReplicator\" data-throw-if-not-resolved=\"false\"></xref>, which contains \nreplication <xref href=\"System.Fabric.IOperation\" data-throw-if-not-resolved=\"false\"></xref>s</p>\n"
  remarks: "\n<p>If this queue size is reached, then the Primary will begin seeing <xref href=\"System.Fabric.FabricErrorCode.ReplicationQueueFull\" data-throw-if-not-resolved=\"false\"></xref> exceptions.</p>\n<p>The default value is 1024 Note that values for this parameter must be a power of 2.</p>\n<p>This setting is specific to the Replicator when the role of the service is Primary</p>\n"
  example: []
  syntax:
    content: public long ? MaxPrimaryReplicationQueueSize { get; set; }
    content.vb: Public Property MaxPrimaryReplicationQueueSize As Long?
    parameters: []
    return:
      type: System.Nullable{System.Int64}
      description: "\n<p>The maximum size of the primary replication operation queue inside <xref href=\"System.Fabric.FabricReplicator\" data-throw-if-not-resolved=\"false\"></xref>, which contains \nreplication <xref href=\"System.Fabric.IOperation\" data-throw-if-not-resolved=\"false\"></xref>s. The unit here is the number of operations in the queue.</p>\n"
  overload: System.Fabric.ReplicatorSettings.MaxPrimaryReplicationQueueSize*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Fabric.ReplicatorSettings.MaxPrimaryReplicationQueueMemorySize
  commentId: P:System.Fabric.ReplicatorSettings.MaxPrimaryReplicationQueueMemorySize
  id: MaxPrimaryReplicationQueueMemorySize
  parent: System.Fabric.ReplicatorSettings
  langs:
  - csharp
  - vb
  name: MaxPrimaryReplicationQueueMemorySize
  nameWithType: ReplicatorSettings.MaxPrimaryReplicationQueueMemorySize
  fullName: System.Fabric.ReplicatorSettings.MaxPrimaryReplicationQueueMemorySize
  type: Property
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/ReplicatorSettings.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: MaxPrimaryReplicationQueueMemorySize
    path: src/prod/src/managed/Api/src/System/Fabric/ReplicatorSettings.cs
    startLine: 225
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Defines the maximum size of the primary replication operation queue inside <xref href=\"System.Fabric.FabricReplicator\" data-throw-if-not-resolved=\"false\"></xref>, which contains \nreplication <xref href=\"System.Fabric.IOperation\" data-throw-if-not-resolved=\"false\"></xref>s</p>\n"
  remarks: "\n<p>This setting is specific to the Replicator when the role of the service is Primary. The default value is 0. This implies there is no memory limit</p>\n"
  example: []
  syntax:
    content: public long ? MaxPrimaryReplicationQueueMemorySize { get; set; }
    content.vb: Public Property MaxPrimaryReplicationQueueMemorySize As Long?
    parameters: []
    return:
      type: System.Nullable{System.Int64}
      description: "\n<p>. Returns the maximum size of the primary replication operation queue inside <xref href=\"System.Fabric.FabricReplicator\" data-throw-if-not-resolved=\"false\"></xref>, which contains \nreplication <xref href=\"System.Fabric.IOperation\" data-throw-if-not-resolved=\"false\"></xref>s The unit here is the virtual memory consumption of the queue .Returns <xref href=\"System.Int64\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  overload: System.Fabric.ReplicatorSettings.MaxPrimaryReplicationQueueMemorySize*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Fabric.ReplicatorSettings.InitialSecondaryReplicationQueueSize
  commentId: P:System.Fabric.ReplicatorSettings.InitialSecondaryReplicationQueueSize
  id: InitialSecondaryReplicationQueueSize
  parent: System.Fabric.ReplicatorSettings
  langs:
  - csharp
  - vb
  name: InitialSecondaryReplicationQueueSize
  nameWithType: ReplicatorSettings.InitialSecondaryReplicationQueueSize
  fullName: System.Fabric.ReplicatorSettings.InitialSecondaryReplicationQueueSize
  type: Property
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/ReplicatorSettings.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: InitialSecondaryReplicationQueueSize
    path: src/prod/src/managed/Api/src/System/Fabric/ReplicatorSettings.cs
    startLine: 239
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Defines the initial size of the secondary replication operation queue inside <xref href=\"System.Fabric.FabricReplicator\" data-throw-if-not-resolved=\"false\"></xref>, which contains \nreplication <xref href=\"System.Fabric.IOperation\" data-throw-if-not-resolved=\"false\"></xref>s </p>\n"
  remarks: "\n<p>This setting is specific to the Replicator when the role of the service is Secondary/Idle</p>\n<p>The default value is 64.  Note that values for this parameter must be a power of 2.</p>\n"
  example: []
  syntax:
    content: public long ? InitialSecondaryReplicationQueueSize { get; set; }
    content.vb: Public Property InitialSecondaryReplicationQueueSize As Long?
    parameters: []
    return:
      type: System.Nullable{System.Int64}
      description: "\n<p>The initial size of the secondary replication operation queue inside <xref href=\"System.Fabric.FabricReplicator\" data-throw-if-not-resolved=\"false\"></xref>, which contains \nreplication <xref href=\"System.Fabric.IOperation\" data-throw-if-not-resolved=\"false\"></xref>s not yet pumped and processed by the service. The unit here is the number of operations in the queue </p>\n"
  overload: System.Fabric.ReplicatorSettings.InitialSecondaryReplicationQueueSize*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Fabric.ReplicatorSettings.MaxSecondaryReplicationQueueSize
  commentId: P:System.Fabric.ReplicatorSettings.MaxSecondaryReplicationQueueSize
  id: MaxSecondaryReplicationQueueSize
  parent: System.Fabric.ReplicatorSettings
  langs:
  - csharp
  - vb
  name: MaxSecondaryReplicationQueueSize
  nameWithType: ReplicatorSettings.MaxSecondaryReplicationQueueSize
  fullName: System.Fabric.ReplicatorSettings.MaxSecondaryReplicationQueueSize
  type: Property
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/ReplicatorSettings.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: MaxSecondaryReplicationQueueSize
    path: src/prod/src/managed/Api/src/System/Fabric/ReplicatorSettings.cs
    startLine: 255
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Defines the maximum size of the secondary replication operation queue inside <xref href=\"System.Fabric.FabricReplicator\" data-throw-if-not-resolved=\"false\"></xref>, which contains \nreplication <xref href=\"System.Fabric.IOperation\" data-throw-if-not-resolved=\"false\"></xref>s </p>\n"
  remarks: "\n<p>If this queue size is reached, operations will be buffered in the Primary’s replication queue.  If that queue also fills, then the Primary \nwill begin seeing <xref href=\"System.Fabric.FabricErrorCode.ReplicationQueueFull\" data-throw-if-not-resolved=\"false\"></xref> exceptions.</p>\n<p>The default value is 2048.Note that values for this parameter must be a power of 2.</p>\n<p>This setting is specific to the Replicator when the role of the service is Secondary/Idle</p>\n"
  example: []
  syntax:
    content: public long ? MaxSecondaryReplicationQueueSize { get; set; }
    content.vb: Public Property MaxSecondaryReplicationQueueSize As Long?
    parameters: []
    return:
      type: System.Nullable{System.Int64}
      description: "\n<p>The maximum size of the secondary replication operation queue inside <xref href=\"System.Fabric.FabricReplicator\" data-throw-if-not-resolved=\"false\"></xref>, which contains \nreplication <xref href=\"System.Fabric.IOperation\" data-throw-if-not-resolved=\"false\"></xref>s not yet pumped and processed by the service. The unit here is the number of operations in the queue</p>\n"
  overload: System.Fabric.ReplicatorSettings.MaxSecondaryReplicationQueueSize*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Fabric.ReplicatorSettings.MaxSecondaryReplicationQueueMemorySize
  commentId: P:System.Fabric.ReplicatorSettings.MaxSecondaryReplicationQueueMemorySize
  id: MaxSecondaryReplicationQueueMemorySize
  parent: System.Fabric.ReplicatorSettings
  langs:
  - csharp
  - vb
  name: MaxSecondaryReplicationQueueMemorySize
  nameWithType: ReplicatorSettings.MaxSecondaryReplicationQueueMemorySize
  fullName: System.Fabric.ReplicatorSettings.MaxSecondaryReplicationQueueMemorySize
  type: Property
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/ReplicatorSettings.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: MaxSecondaryReplicationQueueMemorySize
    path: src/prod/src/managed/Api/src/System/Fabric/ReplicatorSettings.cs
    startLine: 268
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Defines the maximum size of the secondary replication operation queue inside <xref href=\"System.Fabric.FabricReplicator\" data-throw-if-not-resolved=\"false\"></xref>, which contains \nreplication <xref href=\"System.Fabric.IOperation\" data-throw-if-not-resolved=\"false\"></xref>s.</p>\n"
  remarks: "\n<p>This setting is specific to the Replicator when the role of the service is Secondary/Idle. The default value is 0. This implies there is no memory limit</p>\n"
  example: []
  syntax:
    content: public long ? MaxSecondaryReplicationQueueMemorySize { get; set; }
    content.vb: Public Property MaxSecondaryReplicationQueueMemorySize As Long?
    parameters: []
    return:
      type: System.Nullable{System.Int64}
      description: "\n<p>Returns the maximum size of the secondary replication operation queue inside <xref href=\"System.Fabric.FabricReplicator\" data-throw-if-not-resolved=\"false\"></xref>, which contains \nreplication <xref href=\"System.Fabric.IOperation\" data-throw-if-not-resolved=\"false\"></xref>s. The unit here is the virtual memory consumption of the queue.</p>\n"
  overload: System.Fabric.ReplicatorSettings.MaxSecondaryReplicationQueueMemorySize*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Fabric.ReplicatorSettings.PrimaryWaitForPendingQuorumsTimeout
  commentId: P:System.Fabric.ReplicatorSettings.PrimaryWaitForPendingQuorumsTimeout
  id: PrimaryWaitForPendingQuorumsTimeout
  parent: System.Fabric.ReplicatorSettings
  langs:
  - csharp
  - vb
  name: PrimaryWaitForPendingQuorumsTimeout
  nameWithType: ReplicatorSettings.PrimaryWaitForPendingQuorumsTimeout
  fullName: System.Fabric.ReplicatorSettings.PrimaryWaitForPendingQuorumsTimeout
  type: Property
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/ReplicatorSettings.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: PrimaryWaitForPendingQuorumsTimeout
    path: src/prod/src/managed/Api/src/System/Fabric/ReplicatorSettings.cs
    startLine: 282
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Defines how long the primary replicator waits for receiving a quorum of acknowledgments for any pending replication operations before \nprocessing a reconfiguration request, that could potentially result in ‘cancelling’ the pending replication operations.</p>\n"
  remarks: "\n<p>The default value is 0. This implies that reconfigurations aren’t waited upon for receiving quorum on the pending replication operations. \nThis helps in completing reconfigurations sooner. Note that larger values for this parameter could potentially result in slower reconfigurations, \nimplying longer durations to fail-over a primary. </p>\n"
  example: []
  syntax:
    content: public TimeSpan? PrimaryWaitForPendingQuorumsTimeout { get; set; }
    content.vb: Public Property PrimaryWaitForPendingQuorumsTimeout As TimeSpan?
    parameters: []
    return:
      type: System.Nullable{System.TimeSpan}
      description: "\n<p>Amount of time the primary replicator waits for receiving a quorum of acknowledgments for any pending replication operations when there is \na request for the primary replicator to process a reconfiguration <xref href=\"System.TimeSpan\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  overload: System.Fabric.ReplicatorSettings.PrimaryWaitForPendingQuorumsTimeout*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Fabric.ReplicatorSettings.LoadFrom(System.Fabric.CodePackageActivationContext,System.String,System.String)
  commentId: M:System.Fabric.ReplicatorSettings.LoadFrom(System.Fabric.CodePackageActivationContext,System.String,System.String)
  id: LoadFrom(System.Fabric.CodePackageActivationContext,System.String,System.String)
  parent: System.Fabric.ReplicatorSettings
  langs:
  - csharp
  - vb
  name: LoadFrom(CodePackageActivationContext, String, String)
  nameWithType: ReplicatorSettings.LoadFrom(CodePackageActivationContext, String, String)
  fullName: System.Fabric.ReplicatorSettings.LoadFrom(System.Fabric.CodePackageActivationContext, System.String, System.String)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/ReplicatorSettings.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: LoadFrom
    path: src/prod/src/managed/Api/src/System/Fabric/ReplicatorSettings.cs
    startLine: 388
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Loads the <xref href=\"System.Fabric.ReplicatorSettings\" data-throw-if-not-resolved=\"false\"></xref> object from the service configuration settings file.</p>\n"
  remarks: "\n<p> The configuration settings file (settings.xml) within the service configuration folder generally contains all the replicator settings that is needed to pass in the <xref href=\"System.Fabric.ReplicatorSettings\" data-throw-if-not-resolved=\"false\"></xref> object to the <xref href=\"System.Fabric.IStatefulServicePartition.CreateReplicator(System.Fabric.IStateProvider%2cSystem.Fabric.ReplicatorSettings)\" data-throw-if-not-resolved=\"false\"></xref> method. Typically, the onus is on the service author to read the settings.xml file, parse the values and appropriately construct the <xref href=\"System.Fabric.ReplicatorSettings\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n<p>With the current helper method, the service author can bypass the above process.</p>\n<p>The following are the parameter names that should be provided in the service configuration “settings.xml”, to be recognizable by windows fabric to perform the above parsing automatically:</p>\n<ol><li>\n<p>BatchAcknowledgementInterval –<xref href=\"System.Fabric.ReplicatorSettings.BatchAcknowledgementInterval\" data-throw-if-not-resolved=\"false\"></xref> value in seconds</p>\n</li><li>\n<p>InitialCopyQueueSize -<xref href=\"System.Fabric.ReplicatorSettings.InitialCopyQueueSize\" data-throw-if-not-resolved=\"false\"></xref></p>\n</li><li>\n<p>MaxCopyQueueSize -<xref href=\"System.Fabric.ReplicatorSettings.MaxCopyQueueSize\" data-throw-if-not-resolved=\"false\"></xref></p>\n</li><li>\n<p>MaxReplicationMessageSize -<xref href=\"System.Fabric.ReplicatorSettings.MaxReplicationMessageSize\" data-throw-if-not-resolved=\"false\"></xref></p>\n</li><li>\n<p>RetryInterval -<xref href=\"System.Fabric.ReplicatorSettings.RetryInterval\" data-throw-if-not-resolved=\"false\"></xref> value in seconds</p>\n</li><li>\n<p>RequireServiceAck -<xref href=\"System.Fabric.ReplicatorSettings.RequireServiceAck\" data-throw-if-not-resolved=\"false\"></xref></p>\n</li><li>\n<p>ReplicatorAddress or ReplicatorEndpoint – ReplicatorAddress should be of the form IPort. ReplicatorEndpoint must reference \na valid service endpoint resource from the service manifest -<xref href=\"System.Fabric.ReplicatorSettings.ReplicatorAddress\" data-throw-if-not-resolved=\"false\"></xref></p>\n</li><li>\n<p>SecondaryClearAcknowledgedOperations -<xref href=\"System.Fabric.ReplicatorSettings.SecondaryClearAcknowledgedOperations\" data-throw-if-not-resolved=\"false\"></xref></p>\n</li><li>\n<p>PrimaryWaitForPendingQuorumsTimeout - <xref href=\"System.Fabric.ReplicatorSettings.PrimaryWaitForPendingQuorumsTimeout\" data-throw-if-not-resolved=\"false\"></xref> value in seconds</p>\n</li><li>\n<p>UseStreamFaultsAndEndOfStreamOperationAck -<xref href=\"System.Fabric.ReplicatorSettings.UseStreamFaultsAndEndOfStreamOperationAck\" data-throw-if-not-resolved=\"false\"></xref></p>\n</li><li>\n<p>InitialPrimaryReplicationQueueSize -<xref href=\"System.Fabric.ReplicatorSettings.InitialPrimaryReplicationQueueSize\" data-throw-if-not-resolved=\"false\"></xref></p>\n</li><li>\n<p>InitialSecondaryReplicationQueueSize -<xref href=\"System.Fabric.ReplicatorSettings.InitialSecondaryReplicationQueueSize\" data-throw-if-not-resolved=\"false\"></xref></p>\n</li><li>\n<p>MaxPrimaryReplicationQueueSize -<xref href=\"System.Fabric.ReplicatorSettings.MaxPrimaryReplicationQueueSize\" data-throw-if-not-resolved=\"false\"></xref></p>\n</li><li>\n<p>MaxSecondaryReplicationQueueSize -<xref href=\"System.Fabric.ReplicatorSettings.MaxSecondaryReplicationQueueSize\" data-throw-if-not-resolved=\"false\"></xref></p>\n</li><li>\n<p>MaxPrimaryReplicationQueueMemorySize -<xref href=\"System.Fabric.ReplicatorSettings.MaxPrimaryReplicationQueueMemorySize\" data-throw-if-not-resolved=\"false\"></xref></p>\n</li><li>\n<p>MaxSecondaryReplicationQueueMemorySize -<xref href=\"System.Fabric.ReplicatorSettings.MaxSecondaryReplicationQueueMemorySize\" data-throw-if-not-resolved=\"false\"></xref></p>\n</li></ol>\n"
  example: []
  syntax:
    content: public static ReplicatorSettings LoadFrom(CodePackageActivationContext codePackageActivationContext, string configPackageName, string sectionName)
    content.vb: Public Shared Function LoadFrom(codePackageActivationContext As CodePackageActivationContext, configPackageName As String, sectionName As String) As ReplicatorSettings
    parameters:
    - id: codePackageActivationContext
      type: System.Fabric.CodePackageActivationContext
      description: "\n<p>The current code package activation context <xref href=\"System.Fabric.CodePackageActivationContext\" data-throw-if-not-resolved=\"false\"></xref></p>\n"
    - id: configPackageName
      type: System.String
      description: "\n<p>The current configuration package name</p>\n"
    - id: sectionName
      type: System.String
      description: "\n<p>The section within the configuration file that defines all the replicator settings</p>\n"
    return:
      type: System.Fabric.ReplicatorSettings
      description: "\n<p>The loaded <xref href=\"System.Fabric.ReplicatorSettings\" data-throw-if-not-resolved=\"false\"></xref> object from the service configuration settings file</p>\n"
  overload: System.Fabric.ReplicatorSettings.LoadFrom*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: System.Fabric.FabricReplicator
  commentId: T:System.Fabric.FabricReplicator
  parent: System.Fabric
  isExternal: false
  name: FabricReplicator
  nameWithType: FabricReplicator
  fullName: System.Fabric.FabricReplicator
- uid: System.Fabric.IStatefulServicePartition.CreateReplicator(System.Fabric.IStateProvider,System.Fabric.ReplicatorSettings)
  commentId: M:System.Fabric.IStatefulServicePartition.CreateReplicator(System.Fabric.IStateProvider,System.Fabric.ReplicatorSettings)
- uid: System.Fabric
  commentId: N:System.Fabric
  isExternal: false
  name: System.Fabric
  nameWithType: System.Fabric
  fullName: System.Fabric
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.ReplicatorSettings.System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
  commentId: M:System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  parent: System.Fabric.Messaging.Stream.ByteArraySerializer
  definition: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  name: Serialize<ReplicatorSettings>()
  nameWithType: ByteArraySerializer.Serialize<ReplicatorSettings>()
  fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<System.Fabric.ReplicatorSettings>()
  nameWithType.vb: ByteArraySerializer.Serialize(Of ReplicatorSettings)()
  fullname.vb: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of System.Fabric.ReplicatorSettings)()
  name.vb: Serialize(Of ReplicatorSettings)()
  spec.csharp:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
    name: Serialize<ReplicatorSettings>
    nameWithType: ByteArraySerializer.Serialize<ReplicatorSettings>
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<System.Fabric.ReplicatorSettings>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
    name: Serialize(Of ReplicatorSettings)
    nameWithType: ByteArraySerializer.Serialize(Of ReplicatorSettings)
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of System.Fabric.ReplicatorSettings)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  commentId: M:System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  isExternal: false
  name: Serialize<T>(T)
  nameWithType: ByteArraySerializer.Serialize<T>(T)
  fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<T>(T)
  nameWithType.vb: ByteArraySerializer.Serialize(Of T)(T)
  fullname.vb: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of T)(T)
  name.vb: Serialize(Of T)(T)
  spec.csharp:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
    name: Serialize<T>
    nameWithType: ByteArraySerializer.Serialize<T>
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
    name: Serialize(Of T)
    nameWithType: ByteArraySerializer.Serialize(Of T)
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.Messaging.Stream.ByteArraySerializer
  commentId: T:System.Fabric.Messaging.Stream.ByteArraySerializer
  parent: System.Fabric.Messaging.Stream
  isExternal: false
  name: ByteArraySerializer
  nameWithType: ByteArraySerializer
  fullName: System.Fabric.Messaging.Stream.ByteArraySerializer
- uid: System.Fabric.Messaging.Stream
  commentId: N:System.Fabric.Messaging.Stream
  isExternal: false
  name: System.Fabric.Messaging.Stream
  nameWithType: System.Fabric.Messaging.Stream
  fullName: System.Fabric.Messaging.Stream
- uid: System.Fabric.ReplicatorSettings
  commentId: T:System.Fabric.ReplicatorSettings
  parent: System.Fabric
  isExternal: false
  name: ReplicatorSettings
  nameWithType: ReplicatorSettings
  fullName: System.Fabric.ReplicatorSettings
- uid: System.Fabric.ReplicatorSettings.#ctor*
  commentId: Overload:System.Fabric.ReplicatorSettings.#ctor
  isExternal: false
  name: ReplicatorSettings
  nameWithType: ReplicatorSettings.ReplicatorSettings
  fullName: System.Fabric.ReplicatorSettings.ReplicatorSettings
- uid: System.Fabric.ReplicatorSettings.RetryInterval*
  commentId: Overload:System.Fabric.ReplicatorSettings.RetryInterval
  isExternal: false
  name: RetryInterval
  nameWithType: ReplicatorSettings.RetryInterval
  fullName: System.Fabric.ReplicatorSettings.RetryInterval
- uid: System.Nullable{System.TimeSpan}
  commentId: T:System.Nullable{System.TimeSpan}
  parent: System
  definition: System.Nullable`1
  name: Nullable<TimeSpan>
  nameWithType: Nullable<TimeSpan>
  fullName: System.Nullable<System.TimeSpan>
  nameWithType.vb: Nullable(Of TimeSpan)
  fullname.vb: System.Nullable(Of System.TimeSpan)
  name.vb: Nullable(Of TimeSpan)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullname.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.ReplicatorSettings.BatchAcknowledgementInterval
  commentId: P:System.Fabric.ReplicatorSettings.BatchAcknowledgementInterval
- uid: System.Fabric.ReplicatorSettings.BatchAcknowledgementInterval*
  commentId: Overload:System.Fabric.ReplicatorSettings.BatchAcknowledgementInterval
  isExternal: false
  name: BatchAcknowledgementInterval
  nameWithType: ReplicatorSettings.BatchAcknowledgementInterval
  fullName: System.Fabric.ReplicatorSettings.BatchAcknowledgementInterval
- uid: System.Fabric.ReplicatorSettings.ReplicatorAddress*
  commentId: Overload:System.Fabric.ReplicatorSettings.ReplicatorAddress
  isExternal: false
  name: ReplicatorAddress
  nameWithType: ReplicatorSettings.ReplicatorAddress
  fullName: System.Fabric.ReplicatorSettings.ReplicatorAddress
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Fabric.ReplicatorSettings.SecurityCredentials*
  commentId: Overload:System.Fabric.ReplicatorSettings.SecurityCredentials
  isExternal: false
  name: SecurityCredentials
  nameWithType: ReplicatorSettings.SecurityCredentials
  fullName: System.Fabric.ReplicatorSettings.SecurityCredentials
- uid: System.Fabric.SecurityCredentials
  commentId: T:System.Fabric.SecurityCredentials
  parent: System.Fabric
  isExternal: false
  name: SecurityCredentials
  nameWithType: SecurityCredentials
  fullName: System.Fabric.SecurityCredentials
- uid: System.Fabric.ReplicatorSettings.InitialReplicationQueueSize*
  commentId: Overload:System.Fabric.ReplicatorSettings.InitialReplicationQueueSize
  isExternal: false
  name: InitialReplicationQueueSize
  nameWithType: ReplicatorSettings.InitialReplicationQueueSize
  fullName: System.Fabric.ReplicatorSettings.InitialReplicationQueueSize
- uid: System.Nullable{System.Int64}
  commentId: T:System.Nullable{System.Int64}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Int64>
  nameWithType: Nullable<Int64>
  fullName: System.Nullable<System.Int64>
  nameWithType.vb: Nullable(Of Int64)
  fullname.vb: System.Nullable(Of System.Int64)
  name.vb: Nullable(Of Int64)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.ReplicatorSettings.MaxReplicationQueueSize*
  commentId: Overload:System.Fabric.ReplicatorSettings.MaxReplicationQueueSize
  isExternal: false
  name: MaxReplicationQueueSize
  nameWithType: ReplicatorSettings.MaxReplicationQueueSize
  fullName: System.Fabric.ReplicatorSettings.MaxReplicationQueueSize
- uid: System.Fabric.IOperation
  commentId: T:System.Fabric.IOperation
  isExternal: false
  name: IOperation
  nameWithType: IOperation
  fullName: System.Fabric.IOperation
- uid: System.Fabric.ReplicatorSettings.InitialCopyQueueSize*
  commentId: Overload:System.Fabric.ReplicatorSettings.InitialCopyQueueSize
  isExternal: false
  name: InitialCopyQueueSize
  nameWithType: ReplicatorSettings.InitialCopyQueueSize
  fullName: System.Fabric.ReplicatorSettings.InitialCopyQueueSize
- uid: System.Fabric.FabricErrorCode.ReplicationQueueFull
  commentId: F:System.Fabric.FabricErrorCode.ReplicationQueueFull
- uid: System.Fabric.ReplicatorSettings.MaxCopyQueueSize*
  commentId: Overload:System.Fabric.ReplicatorSettings.MaxCopyQueueSize
  isExternal: false
  name: MaxCopyQueueSize
  nameWithType: ReplicatorSettings.MaxCopyQueueSize
  fullName: System.Fabric.ReplicatorSettings.MaxCopyQueueSize
- uid: System.Fabric.IOperation.Acknowledge
  commentId: M:System.Fabric.IOperation.Acknowledge
- uid: System.Fabric.ReplicatorSettings.RequireServiceAck*
  commentId: Overload:System.Fabric.ReplicatorSettings.RequireServiceAck
  isExternal: false
  name: RequireServiceAck
  nameWithType: ReplicatorSettings.RequireServiceAck
  fullName: System.Fabric.ReplicatorSettings.RequireServiceAck
- uid: System.Nullable{System.Boolean}
  commentId: T:System.Nullable{System.Boolean}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Boolean>
  nameWithType: Nullable<Boolean>
  fullName: System.Nullable<System.Boolean>
  nameWithType.vb: Nullable(Of Boolean)
  fullname.vb: System.Nullable(Of System.Boolean)
  name.vb: Nullable(Of Boolean)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.ReplicatorSettings.MaxReplicationQueueMemorySize*
  commentId: Overload:System.Fabric.ReplicatorSettings.MaxReplicationQueueMemorySize
  isExternal: false
  name: MaxReplicationQueueMemorySize
  nameWithType: ReplicatorSettings.MaxReplicationQueueMemorySize
  fullName: System.Fabric.ReplicatorSettings.MaxReplicationQueueMemorySize
- uid: System.Fabric.ReplicatorSettings.SecondaryClearAcknowledgedOperations*
  commentId: Overload:System.Fabric.ReplicatorSettings.SecondaryClearAcknowledgedOperations
  isExternal: false
  name: SecondaryClearAcknowledgedOperations
  nameWithType: ReplicatorSettings.SecondaryClearAcknowledgedOperations
  fullName: System.Fabric.ReplicatorSettings.SecondaryClearAcknowledgedOperations
- uid: System.Fabric.ReplicatorSettings.MaxReplicationMessageSize*
  commentId: Overload:System.Fabric.ReplicatorSettings.MaxReplicationMessageSize
  isExternal: false
  name: MaxReplicationMessageSize
  nameWithType: ReplicatorSettings.MaxReplicationMessageSize
  fullName: System.Fabric.ReplicatorSettings.MaxReplicationMessageSize
- uid: System.Fabric.ReplicatorSettings.UseStreamFaultsAndEndOfStreamOperationAck*
  commentId: Overload:System.Fabric.ReplicatorSettings.UseStreamFaultsAndEndOfStreamOperationAck
  isExternal: false
  name: UseStreamFaultsAndEndOfStreamOperationAck
  nameWithType: ReplicatorSettings.UseStreamFaultsAndEndOfStreamOperationAck
  fullName: System.Fabric.ReplicatorSettings.UseStreamFaultsAndEndOfStreamOperationAck
- uid: System.Fabric.ReplicatorSettings.InitialPrimaryReplicationQueueSize*
  commentId: Overload:System.Fabric.ReplicatorSettings.InitialPrimaryReplicationQueueSize
  isExternal: false
  name: InitialPrimaryReplicationQueueSize
  nameWithType: ReplicatorSettings.InitialPrimaryReplicationQueueSize
  fullName: System.Fabric.ReplicatorSettings.InitialPrimaryReplicationQueueSize
- uid: System.Fabric.ReplicatorSettings.MaxPrimaryReplicationQueueSize*
  commentId: Overload:System.Fabric.ReplicatorSettings.MaxPrimaryReplicationQueueSize
  isExternal: false
  name: MaxPrimaryReplicationQueueSize
  nameWithType: ReplicatorSettings.MaxPrimaryReplicationQueueSize
  fullName: System.Fabric.ReplicatorSettings.MaxPrimaryReplicationQueueSize
- uid: System.Int64
  commentId: T:System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.Fabric.ReplicatorSettings.MaxPrimaryReplicationQueueMemorySize*
  commentId: Overload:System.Fabric.ReplicatorSettings.MaxPrimaryReplicationQueueMemorySize
  isExternal: false
  name: MaxPrimaryReplicationQueueMemorySize
  nameWithType: ReplicatorSettings.MaxPrimaryReplicationQueueMemorySize
  fullName: System.Fabric.ReplicatorSettings.MaxPrimaryReplicationQueueMemorySize
- uid: System.Fabric.ReplicatorSettings.InitialSecondaryReplicationQueueSize*
  commentId: Overload:System.Fabric.ReplicatorSettings.InitialSecondaryReplicationQueueSize
  isExternal: false
  name: InitialSecondaryReplicationQueueSize
  nameWithType: ReplicatorSettings.InitialSecondaryReplicationQueueSize
  fullName: System.Fabric.ReplicatorSettings.InitialSecondaryReplicationQueueSize
- uid: System.Fabric.ReplicatorSettings.MaxSecondaryReplicationQueueSize*
  commentId: Overload:System.Fabric.ReplicatorSettings.MaxSecondaryReplicationQueueSize
  isExternal: false
  name: MaxSecondaryReplicationQueueSize
  nameWithType: ReplicatorSettings.MaxSecondaryReplicationQueueSize
  fullName: System.Fabric.ReplicatorSettings.MaxSecondaryReplicationQueueSize
- uid: System.Fabric.ReplicatorSettings.MaxSecondaryReplicationQueueMemorySize*
  commentId: Overload:System.Fabric.ReplicatorSettings.MaxSecondaryReplicationQueueMemorySize
  isExternal: false
  name: MaxSecondaryReplicationQueueMemorySize
  nameWithType: ReplicatorSettings.MaxSecondaryReplicationQueueMemorySize
  fullName: System.Fabric.ReplicatorSettings.MaxSecondaryReplicationQueueMemorySize
- uid: System.TimeSpan
  commentId: T:System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: System.Fabric.ReplicatorSettings.PrimaryWaitForPendingQuorumsTimeout*
  commentId: Overload:System.Fabric.ReplicatorSettings.PrimaryWaitForPendingQuorumsTimeout
  isExternal: false
  name: PrimaryWaitForPendingQuorumsTimeout
  nameWithType: ReplicatorSettings.PrimaryWaitForPendingQuorumsTimeout
  fullName: System.Fabric.ReplicatorSettings.PrimaryWaitForPendingQuorumsTimeout
- uid: System.Fabric.CodePackageActivationContext
  commentId: T:System.Fabric.CodePackageActivationContext
  parent: System.Fabric
  isExternal: false
  name: CodePackageActivationContext
  nameWithType: CodePackageActivationContext
  fullName: System.Fabric.CodePackageActivationContext
- uid: System.Fabric.ReplicatorSettings.InitialCopyQueueSize
  commentId: P:System.Fabric.ReplicatorSettings.InitialCopyQueueSize
- uid: System.Fabric.ReplicatorSettings.MaxCopyQueueSize
  commentId: P:System.Fabric.ReplicatorSettings.MaxCopyQueueSize
- uid: System.Fabric.ReplicatorSettings.MaxReplicationMessageSize
  commentId: P:System.Fabric.ReplicatorSettings.MaxReplicationMessageSize
- uid: System.Fabric.ReplicatorSettings.RetryInterval
  commentId: P:System.Fabric.ReplicatorSettings.RetryInterval
- uid: System.Fabric.ReplicatorSettings.RequireServiceAck
  commentId: P:System.Fabric.ReplicatorSettings.RequireServiceAck
- uid: System.Fabric.ReplicatorSettings.ReplicatorAddress
  commentId: P:System.Fabric.ReplicatorSettings.ReplicatorAddress
- uid: System.Fabric.ReplicatorSettings.SecondaryClearAcknowledgedOperations
  commentId: P:System.Fabric.ReplicatorSettings.SecondaryClearAcknowledgedOperations
- uid: System.Fabric.ReplicatorSettings.PrimaryWaitForPendingQuorumsTimeout
  commentId: P:System.Fabric.ReplicatorSettings.PrimaryWaitForPendingQuorumsTimeout
- uid: System.Fabric.ReplicatorSettings.UseStreamFaultsAndEndOfStreamOperationAck
  commentId: P:System.Fabric.ReplicatorSettings.UseStreamFaultsAndEndOfStreamOperationAck
- uid: System.Fabric.ReplicatorSettings.InitialPrimaryReplicationQueueSize
  commentId: P:System.Fabric.ReplicatorSettings.InitialPrimaryReplicationQueueSize
- uid: System.Fabric.ReplicatorSettings.InitialSecondaryReplicationQueueSize
  commentId: P:System.Fabric.ReplicatorSettings.InitialSecondaryReplicationQueueSize
- uid: System.Fabric.ReplicatorSettings.MaxPrimaryReplicationQueueSize
  commentId: P:System.Fabric.ReplicatorSettings.MaxPrimaryReplicationQueueSize
- uid: System.Fabric.ReplicatorSettings.MaxSecondaryReplicationQueueSize
  commentId: P:System.Fabric.ReplicatorSettings.MaxSecondaryReplicationQueueSize
- uid: System.Fabric.ReplicatorSettings.MaxPrimaryReplicationQueueMemorySize
  commentId: P:System.Fabric.ReplicatorSettings.MaxPrimaryReplicationQueueMemorySize
- uid: System.Fabric.ReplicatorSettings.MaxSecondaryReplicationQueueMemorySize
  commentId: P:System.Fabric.ReplicatorSettings.MaxSecondaryReplicationQueueMemorySize
- uid: System.Fabric.ReplicatorSettings.LoadFrom*
  commentId: Overload:System.Fabric.ReplicatorSettings.LoadFrom
  isExternal: false
  name: LoadFrom
  nameWithType: ReplicatorSettings.LoadFrom
  fullName: System.Fabric.ReplicatorSettings.LoadFrom
