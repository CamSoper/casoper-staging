### YamlMime:ManagedReference
items:
- uid: System.Fabric.FabricClient
  commentId: T:System.Fabric.FabricClient
  id: FabricClient
  parent: System.Fabric
  children:
  - System.Fabric.FabricClient.#ctor
  - System.Fabric.FabricClient.#ctor(System.Fabric.FabricClientRole)
  - System.Fabric.FabricClient.#ctor(System.Fabric.FabricClientSettings)
  - System.Fabric.FabricClient.#ctor(System.Fabric.FabricClientSettings,System.String[])
  - System.Fabric.FabricClient.#ctor(System.Fabric.SecurityCredentials,System.Fabric.FabricClientSettings,System.String[])
  - System.Fabric.FabricClient.#ctor(System.Fabric.SecurityCredentials,System.String[])
  - System.Fabric.FabricClient.#ctor(System.Fabric.SecurityCredentials,System.TimeSpan,System.String[])
  - System.Fabric.FabricClient.#ctor(System.String[])
  - System.Fabric.FabricClient.#ctor(System.TimeSpan,System.String[])
  - System.Fabric.FabricClient.ApplicationManager
  - System.Fabric.FabricClient.ClaimsRetrieval
  - System.Fabric.FabricClient.ClientConnected
  - System.Fabric.FabricClient.ClientDisconnected
  - System.Fabric.FabricClient.ClusterManager
  - System.Fabric.FabricClient.Dispose
  - System.Fabric.FabricClient.FabricSystemApplication
  - System.Fabric.FabricClient.FaultManager
  - System.Fabric.FabricClient.Finalize
  - System.Fabric.FabricClient.HealthManager
  - System.Fabric.FabricClient.InfrastructureManager
  - System.Fabric.FabricClient.PropertyManager
  - System.Fabric.FabricClient.QueryManager
  - System.Fabric.FabricClient.RepairManager
  - System.Fabric.FabricClient.ServiceGroupManager
  - System.Fabric.FabricClient.ServiceManager
  - System.Fabric.FabricClient.Settings
  - System.Fabric.FabricClient.TestManager
  - System.Fabric.FabricClient.UpdateSecurityCredentials(System.Fabric.SecurityCredentials)
  - System.Fabric.FabricClient.UpdateSettings(System.Fabric.FabricClientSettings)
  langs:
  - csharp
  - vb
  name: FabricClient
  nameWithType: FabricClient
  fullName: System.Fabric.FabricClient
  type: Class
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.FaultManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: FabricClient
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.FaultManagementClient.cs
    startLine: 14
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Creates and manages Service Fabric services and other entities.</p>\n"
  remarks: "\n<p>It is highly recommended that you share FabricClients as much as possible.\nThis is because the FabricClient has multiple optimizations such as caching and batching that you would not be able to fully utilize otherwise.\n</p>\n"
  example: []
  syntax:
    content: 'public sealed class FabricClient : IDisposable'
    content.vb: >-
      Public NotInheritable Class FabricClient
          Implements IDisposable
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  extensionMethods:
  - System.Fabric.FabricClient.System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: System.Fabric.FabricClient.PropertyManager
  commentId: P:System.Fabric.FabricClient.PropertyManager
  id: PropertyManager
  parent: System.Fabric.FabricClient
  langs:
  - csharp
  - vb
  name: PropertyManager
  nameWithType: FabricClient.PropertyManager
  fullName: System.Fabric.FabricClient.PropertyManager
  type: Property
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: PropertyManager
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.cs
    startLine: 77
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Gets the <xref href=\"System.Fabric.FabricClient.PropertyManager\" data-throw-if-not-resolved=\"false\"></xref> to perform operations related to names and properties.</p>\n"
  example: []
  syntax:
    content: public FabricClient.PropertyManagementClient PropertyManager { get; }
    content.vb: Public ReadOnly Property PropertyManager As FabricClient.PropertyManagementClient
    parameters: []
    return:
      type: System.Fabric.FabricClient.PropertyManagementClient
      description: "\n<p>The <xref href=\"System.Fabric.FabricClient.PropertyManager\" data-throw-if-not-resolved=\"false\"></xref> to perform operations related to names and properties.</p>\n"
  overload: System.Fabric.FabricClient.PropertyManager*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Fabric.FabricClient.ServiceManager
  commentId: P:System.Fabric.FabricClient.ServiceManager
  id: ServiceManager
  parent: System.Fabric.FabricClient
  langs:
  - csharp
  - vb
  name: ServiceManager
  nameWithType: FabricClient.ServiceManager
  fullName: System.Fabric.FabricClient.ServiceManager
  type: Property
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: ServiceManager
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.cs
    startLine: 91
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Gets the <xref href=\"System.Fabric.FabricClient.ServiceManager\" data-throw-if-not-resolved=\"false\"></xref> to perform operations related to services and service types.</p>\n"
  example: []
  syntax:
    content: public FabricClient.ServiceManagementClient ServiceManager { get; }
    content.vb: Public ReadOnly Property ServiceManager As FabricClient.ServiceManagementClient
    parameters: []
    return:
      type: System.Fabric.FabricClient.ServiceManagementClient
      description: "\n<p>The <xref href=\"System.Fabric.FabricClient.ServiceManager\" data-throw-if-not-resolved=\"false\"></xref> to perform operations related to services and service types.</p>\n"
  overload: System.Fabric.FabricClient.ServiceManager*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Fabric.FabricClient.ServiceGroupManager
  commentId: P:System.Fabric.FabricClient.ServiceGroupManager
  id: ServiceGroupManager
  parent: System.Fabric.FabricClient
  langs:
  - csharp
  - vb
  name: ServiceGroupManager
  nameWithType: FabricClient.ServiceGroupManager
  fullName: System.Fabric.FabricClient.ServiceGroupManager
  type: Property
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: ServiceGroupManager
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.cs
    startLine: 105
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Gets the <xref href=\"System.Fabric.FabricClient.ServiceGroupManager\" data-throw-if-not-resolved=\"false\"></xref> to perform operations related to service groups.</p>\n"
  example: []
  syntax:
    content: public FabricClient.ServiceGroupManagementClient ServiceGroupManager { get; }
    content.vb: Public ReadOnly Property ServiceGroupManager As FabricClient.ServiceGroupManagementClient
    parameters: []
    return:
      type: System.Fabric.FabricClient.ServiceGroupManagementClient
      description: "\n<p>The <xref href=\"System.Fabric.FabricClient.ServiceGroupManager\" data-throw-if-not-resolved=\"false\"></xref> to perform operations related to service groups.</p>\n"
  overload: System.Fabric.FabricClient.ServiceGroupManager*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Fabric.FabricClient.ApplicationManager
  commentId: P:System.Fabric.FabricClient.ApplicationManager
  id: ApplicationManager
  parent: System.Fabric.FabricClient
  langs:
  - csharp
  - vb
  name: ApplicationManager
  nameWithType: FabricClient.ApplicationManager
  fullName: System.Fabric.FabricClient.ApplicationManager
  type: Property
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: ApplicationManager
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.cs
    startLine: 119
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Gets the <xref href=\"System.Fabric.FabricClient.ApplicationManager\" data-throw-if-not-resolved=\"false\"></xref> to perform operations related to applications and application types.</p>\n"
  example: []
  syntax:
    content: public FabricClient.ApplicationManagementClient ApplicationManager { get; }
    content.vb: Public ReadOnly Property ApplicationManager As FabricClient.ApplicationManagementClient
    parameters: []
    return:
      type: System.Fabric.FabricClient.ApplicationManagementClient
      description: "\n<p>The <xref href=\"System.Fabric.FabricClient.ApplicationManager\" data-throw-if-not-resolved=\"false\"></xref> to perform operations related to applications and application types.</p>\n"
  overload: System.Fabric.FabricClient.ApplicationManager*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Fabric.FabricClient.ClusterManager
  commentId: P:System.Fabric.FabricClient.ClusterManager
  id: ClusterManager
  parent: System.Fabric.FabricClient
  langs:
  - csharp
  - vb
  name: ClusterManager
  nameWithType: FabricClient.ClusterManager
  fullName: System.Fabric.FabricClient.ClusterManager
  type: Property
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: ClusterManager
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.cs
    startLine: 133
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Gets the <xref href=\"System.Fabric.FabricClient.ClusterManager\" data-throw-if-not-resolved=\"false\"></xref> to perform operations related to the Service Fabric cluster.</p>\n"
  example: []
  syntax:
    content: public FabricClient.ClusterManagementClient ClusterManager { get; }
    content.vb: Public ReadOnly Property ClusterManager As FabricClient.ClusterManagementClient
    parameters: []
    return:
      type: System.Fabric.FabricClient.ClusterManagementClient
      description: "\n<p>The <xref href=\"System.Fabric.FabricClient.ClusterManager\" data-throw-if-not-resolved=\"false\"></xref> to perform operations related to the Service Fabric cluster.</p>\n"
  overload: System.Fabric.FabricClient.ClusterManager*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Fabric.FabricClient.RepairManager
  commentId: P:System.Fabric.FabricClient.RepairManager
  id: RepairManager
  parent: System.Fabric.FabricClient
  langs:
  - csharp
  - vb
  name: RepairManager
  nameWithType: FabricClient.RepairManager
  fullName: System.Fabric.FabricClient.RepairManager
  type: Property
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: RepairManager
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.cs
    startLine: 148
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Gets the <xref href=\"System.Fabric.FabricClient.RepairManagementClient\" data-throw-if-not-resolved=\"false\"></xref> to manage repair tasks.</p>\n<p>This property supports the Service Fabric platform; it is not meant to be called directly from your code.</p>\n"
  example: []
  syntax:
    content: public FabricClient.RepairManagementClient RepairManager { get; }
    content.vb: Public ReadOnly Property RepairManager As FabricClient.RepairManagementClient
    parameters: []
    return:
      type: System.Fabric.FabricClient.RepairManagementClient
      description: "\n<p>Returns <xref href=\"System.Fabric.FabricClient.RepairManagementClient\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  overload: System.Fabric.FabricClient.RepairManager*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Fabric.FabricClient.QueryManager
  commentId: P:System.Fabric.FabricClient.QueryManager
  id: QueryManager
  parent: System.Fabric.FabricClient
  langs:
  - csharp
  - vb
  name: QueryManager
  nameWithType: FabricClient.QueryManager
  fullName: System.Fabric.FabricClient.QueryManager
  type: Property
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: QueryManager
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.cs
    startLine: 162
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Gets or sets the query manager for the client.</p>\n"
  example: []
  syntax:
    content: public FabricClient.QueryClient QueryManager { get; }
    content.vb: Public ReadOnly Property QueryManager As FabricClient.QueryClient
    parameters: []
    return:
      type: System.Fabric.FabricClient.QueryClient
      description: "\n<p>The query manager for the client.</p>\n"
  overload: System.Fabric.FabricClient.QueryManager*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Fabric.FabricClient.HealthManager
  commentId: P:System.Fabric.FabricClient.HealthManager
  id: HealthManager
  parent: System.Fabric.FabricClient
  langs:
  - csharp
  - vb
  name: HealthManager
  nameWithType: FabricClient.HealthManager
  fullName: System.Fabric.FabricClient.HealthManager
  type: Property
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: HealthManager
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.cs
    startLine: 176
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Gets the <xref href=\"System.Fabric.FabricClient.HealthManager\" data-throw-if-not-resolved=\"false\"></xref> to perform operations related to health, like report health or get entity health.</p>\n"
  example: []
  syntax:
    content: public FabricClient.HealthClient HealthManager { get; }
    content.vb: Public ReadOnly Property HealthManager As FabricClient.HealthClient
    parameters: []
    return:
      type: System.Fabric.FabricClient.HealthClient
      description: "\n<p>The <xref href=\"System.Fabric.FabricClient.HealthManager\" data-throw-if-not-resolved=\"false\"></xref> to perform operations related to health, like report health or get entity health.</p>\n"
  overload: System.Fabric.FabricClient.HealthManager*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Fabric.FabricClient.InfrastructureManager
  commentId: P:System.Fabric.FabricClient.InfrastructureManager
  id: InfrastructureManager
  parent: System.Fabric.FabricClient
  langs:
  - csharp
  - vb
  name: InfrastructureManager
  nameWithType: FabricClient.InfrastructureManager
  fullName: System.Fabric.FabricClient.InfrastructureManager
  type: Property
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: InfrastructureManager
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.cs
    startLine: 199
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Gets the <xref href=\"System.Fabric.FabricClient.InfrastructureServiceClient\" data-throw-if-not-resolved=\"false\"></xref> to perform operations related to the infrastructure on which the cluster is running.</p>\n<p>This property supports the Service Fabric platform; it is not meant to be called directly from your code.</p>\n"
  example: []
  syntax:
    content: public FabricClient.InfrastructureServiceClient InfrastructureManager { get; }
    content.vb: Public ReadOnly Property InfrastructureManager As FabricClient.InfrastructureServiceClient
    parameters: []
    return:
      type: System.Fabric.FabricClient.InfrastructureServiceClient
      description: "\n<p>Returns <xref href=\"System.Fabric.FabricClient.InfrastructureServiceClient\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  overload: System.Fabric.FabricClient.InfrastructureManager*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Fabric.FabricClient.TestManager
  commentId: P:System.Fabric.FabricClient.TestManager
  id: TestManager
  parent: System.Fabric.FabricClient
  langs:
  - csharp
  - vb
  name: TestManager
  nameWithType: FabricClient.TestManager
  fullName: System.Fabric.FabricClient.TestManager
  type: Property
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: TestManager
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.cs
    startLine: 215
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\nGets the <xref href=\"System.Fabric.FabricClient.TestManagementClient\" data-throw-if-not-resolved=\"false\"></xref> to perform complex actions that go through FaultAnalysisService. For example, StartPartitionDataLossAsync.\nThis also supports APIs for validation (that do not go through FaultAnalysisService). For example, ValidateServiceAsync.\n"
  example: []
  syntax:
    content: public FabricClient.TestManagementClient TestManager { get; }
    content.vb: Public ReadOnly Property TestManager As FabricClient.TestManagementClient
    parameters: []
    return:
      type: System.Fabric.FabricClient.TestManagementClient
      description: "\n<p>Returns <xref href=\"System.Fabric.FabricClient.TestManagementClient\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  overload: System.Fabric.FabricClient.TestManager*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Fabric.FabricClient.FaultManager
  commentId: P:System.Fabric.FabricClient.FaultManager
  id: FaultManager
  parent: System.Fabric.FabricClient
  langs:
  - csharp
  - vb
  name: FaultManager
  nameWithType: FabricClient.FaultManager
  fullName: System.Fabric.FabricClient.FaultManager
  type: Property
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: FaultManager
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.cs
    startLine: 229
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\nGets the <xref href=\"System.Fabric.FabricClient.FaultManagementClient\" data-throw-if-not-resolved=\"false\"></xref> to induce faults. For example, RestartNodeAsync.\n"
  example: []
  syntax:
    content: public FabricClient.FaultManagementClient FaultManager { get; }
    content.vb: Public ReadOnly Property FaultManager As FabricClient.FaultManagementClient
    parameters: []
    return:
      type: System.Fabric.FabricClient.FaultManagementClient
      description: "\n<p>Returns <xref href=\"System.Fabric.FabricClient.FaultManagementClient\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  overload: System.Fabric.FabricClient.FaultManager*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Fabric.FabricClient.Settings
  commentId: P:System.Fabric.FabricClient.Settings
  id: Settings
  parent: System.Fabric.FabricClient
  langs:
  - csharp
  - vb
  name: Settings
  nameWithType: FabricClient.Settings
  fullName: System.Fabric.FabricClient.Settings
  type: Property
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: Settings
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.cs
    startLine: 244
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Gets the fabric client settings.</p>\n"
  example: []
  syntax:
    content: public FabricClientSettings Settings { get; }
    content.vb: Public ReadOnly Property Settings As FabricClientSettings
    parameters: []
    return:
      type: System.Fabric.FabricClientSettings
      description: "\n<p>The fabric client settings.</p>\n"
  overload: System.Fabric.FabricClient.Settings*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Fabric.FabricClient.FabricSystemApplication
  commentId: F:System.Fabric.FabricClient.FabricSystemApplication
  id: FabricSystemApplication
  parent: System.Fabric.FabricClient
  langs:
  - csharp
  - vb
  name: FabricSystemApplication
  nameWithType: FabricClient.FabricSystemApplication
  fullName: System.Fabric.FabricClient.FabricSystemApplication
  type: Field
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: FabricSystemApplication
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.cs
    startLine: 256
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>The Fabric system application.</p>\n"
  example: []
  syntax:
    content: public readonly Uri FabricSystemApplication
    content.vb: Public ReadOnly FabricSystemApplication As Uri
    return:
      type: System.Uri
  modifiers.csharp:
  - public
  - readonly
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Fabric.FabricClient.#ctor
  commentId: M:System.Fabric.FabricClient.#ctor
  id: '#ctor'
  parent: System.Fabric.FabricClient
  langs:
  - csharp
  - vb
  name: FabricClient()
  nameWithType: FabricClient.FabricClient()
  fullName: System.Fabric.FabricClient.FabricClient()
  type: Constructor
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: .ctor
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.cs
    startLine: 294
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  remarks: "\n<p>If the <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> is on the same cluster as the service, \nthen use a Local <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref>. Local <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> is a feature of \nService Fabric that allows the <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> to connect to the local Gateway Service instead of choosing from a list. This way, your client can bypass an extra network hop. In case a service is resolving another service partition in the same cluster, then it is recommended that you use Local <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref>, as it enables automatic load balancing and improves performance.</p>\n"
  example: []
  syntax:
    content: public FabricClient()
    content.vb: Public Sub New
  overload: System.Fabric.FabricClient.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.#ctor(System.Fabric.FabricClientRole)
  commentId: M:System.Fabric.FabricClient.#ctor(System.Fabric.FabricClientRole)
  id: '#ctor(System.Fabric.FabricClientRole)'
  parent: System.Fabric.FabricClient
  langs:
  - csharp
  - vb
  name: FabricClient(FabricClientRole)
  nameWithType: FabricClient.FabricClient(FabricClientRole)
  fullName: System.Fabric.FabricClient.FabricClient(System.Fabric.FabricClientRole)
  type: Constructor
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: .ctor
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.cs
    startLine: 307
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>\nInitializes a new instance of the <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> class with the specified fabric client role.\n</p>\n"
  example: []
  syntax:
    content: public FabricClient(FabricClientRole clientRole)
    content.vb: Public Sub New(clientRole As FabricClientRole)
    parameters:
    - id: clientRole
      type: System.Fabric.FabricClientRole
      description: "\n<p>The fabric client role.</p>\n"
  overload: System.Fabric.FabricClient.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.#ctor(System.Fabric.FabricClientSettings)
  commentId: M:System.Fabric.FabricClient.#ctor(System.Fabric.FabricClientSettings)
  id: '#ctor(System.Fabric.FabricClientSettings)'
  parent: System.Fabric.FabricClient
  langs:
  - csharp
  - vb
  name: FabricClient(FabricClientSettings)
  nameWithType: FabricClient.FabricClient(FabricClientSettings)
  fullName: System.Fabric.FabricClient.FabricClient(System.Fabric.FabricClientSettings)
  type: Constructor
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: .ctor
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.cs
    startLine: 319
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> class with the desired fabric client settings. \nIf the <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> is on the same cluster as the service, then use a Local <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref>. Local <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> is a feature of Service Fabric that allows the <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> to connect to the local Gateway Service instead of choosing from a list. This way, your client can bypass an extra network hop. In case a service is resolving another service partition in the same cluster, then it is recommended that you use Local <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref>, as it enables automatic load balancing and improves performance.</p>\n"
  example: []
  syntax:
    content: public FabricClient(FabricClientSettings settings)
    content.vb: Public Sub New(settings As FabricClientSettings)
    parameters:
    - id: settings
      type: System.Fabric.FabricClientSettings
      description: "\n<p>The fabric client settings used by the fabric client.</p>\n"
  overload: System.Fabric.FabricClient.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.#ctor(System.String[])
  commentId: M:System.Fabric.FabricClient.#ctor(System.String[])
  id: '#ctor(System.String[])'
  parent: System.Fabric.FabricClient
  langs:
  - csharp
  - vb
  name: FabricClient(String[])
  nameWithType: FabricClient.FabricClient(String[])
  fullName: System.Fabric.FabricClient.FabricClient(System.String[])
  type: Constructor
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: .ctor
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.cs
    startLine: 330
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> class with given Service Fabric Gateway addresses (hostEndpoints).</p>\n"
  example: []
  syntax:
    content: public FabricClient(params string[] hostEndpoints)
    content.vb: Public Sub New(ParamArray hostEndpoints As String())
    parameters:
    - id: hostEndpoints
      type: System.String[]
      description: "\n<p>Defines the set of Gateway addresses the <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> can use to connect to the cluster.</p>\n"
  overload: System.Fabric.FabricClient.#ctor*
  nameWithType.vb: FabricClient.FabricClient(String())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Fabric.FabricClient.FabricClient(System.String())
  name.vb: FabricClient(String())
- uid: System.Fabric.FabricClient.#ctor(System.Fabric.SecurityCredentials,System.String[])
  commentId: M:System.Fabric.FabricClient.#ctor(System.Fabric.SecurityCredentials,System.String[])
  id: '#ctor(System.Fabric.SecurityCredentials,System.String[])'
  parent: System.Fabric.FabricClient
  langs:
  - csharp
  - vb
  name: FabricClient(SecurityCredentials, String[])
  nameWithType: FabricClient.FabricClient(SecurityCredentials, String[])
  fullName: System.Fabric.FabricClient.FabricClient(System.Fabric.SecurityCredentials, System.String[])
  type: Constructor
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: .ctor
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.cs
    startLine: 343
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> class with given Service Fabric Gateway addresses (hostEndpoints) and security credentials.</p>\n"
  example: []
  syntax:
    content: public FabricClient(SecurityCredentials credential, params string[] hostEndpoints)
    content.vb: Public Sub New(credential As SecurityCredentials, ParamArray hostEndpoints As String())
    parameters:
    - id: credential
      type: System.Fabric.SecurityCredentials
      description: "\n<p><xref href=\"System.Fabric.SecurityCredentials\" data-throw-if-not-resolved=\"false\"></xref> defines the security settings for the<xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref>.</p>"
    - id: hostEndpoints
      type: System.String[]
      description: "\n<p>Defines the set of Gateway addresses the <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> can use to connect to the cluster.</p>\n"
  overload: System.Fabric.FabricClient.#ctor*
  nameWithType.vb: FabricClient.FabricClient(SecurityCredentials, String())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Fabric.FabricClient.FabricClient(System.Fabric.SecurityCredentials, System.String())
  name.vb: FabricClient(SecurityCredentials, String())
- uid: System.Fabric.FabricClient.#ctor(System.Fabric.FabricClientSettings,System.String[])
  commentId: M:System.Fabric.FabricClient.#ctor(System.Fabric.FabricClientSettings,System.String[])
  id: '#ctor(System.Fabric.FabricClientSettings,System.String[])'
  parent: System.Fabric.FabricClient
  langs:
  - csharp
  - vb
  name: FabricClient(FabricClientSettings, String[])
  nameWithType: FabricClient.FabricClient(FabricClientSettings, String[])
  fullName: System.Fabric.FabricClient.FabricClient(System.Fabric.FabricClientSettings, System.String[])
  type: Constructor
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: .ctor
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.cs
    startLine: 358
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> class with given \nService Fabric Gateway addresses (hostEndpoints) and the desired fabric client settings.</p>\n"
  example: []
  syntax:
    content: public FabricClient(FabricClientSettings settings, params string[] hostEndpoints)
    content.vb: Public Sub New(settings As FabricClientSettings, ParamArray hostEndpoints As String())
    parameters:
    - id: settings
      type: System.Fabric.FabricClientSettings
      description: "\n<p>The fabric client settings.</p>\n"
    - id: hostEndpoints
      type: System.String[]
      description: "\n<p>Defines the set of Gateway addresses the <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> can use to connect to the cluster.</p>\n"
  overload: System.Fabric.FabricClient.#ctor*
  nameWithType.vb: FabricClient.FabricClient(FabricClientSettings, String())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Fabric.FabricClient.FabricClient(System.Fabric.FabricClientSettings, System.String())
  name.vb: FabricClient(FabricClientSettings, String())
- uid: System.Fabric.FabricClient.#ctor(System.Fabric.SecurityCredentials,System.Fabric.FabricClientSettings,System.String[])
  commentId: M:System.Fabric.FabricClient.#ctor(System.Fabric.SecurityCredentials,System.Fabric.FabricClientSettings,System.String[])
  id: '#ctor(System.Fabric.SecurityCredentials,System.Fabric.FabricClientSettings,System.String[])'
  parent: System.Fabric.FabricClient
  langs:
  - csharp
  - vb
  name: FabricClient(SecurityCredentials, FabricClientSettings, String[])
  nameWithType: FabricClient.FabricClient(SecurityCredentials, FabricClientSettings, String[])
  fullName: System.Fabric.FabricClient.FabricClient(System.Fabric.SecurityCredentials, System.Fabric.FabricClientSettings, System.String[])
  type: Constructor
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: .ctor
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.cs
    startLine: 374
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> class with given Service Fabric Gateway addresses (hostEndpoints), security credentials and fabric client settings.</p>\n"
  example: []
  syntax:
    content: public FabricClient(SecurityCredentials credential, FabricClientSettings settings, params string[] hostEndpoints)
    content.vb: Public Sub New(credential As SecurityCredentials, settings As FabricClientSettings, ParamArray hostEndpoints As String())
    parameters:
    - id: credential
      type: System.Fabric.SecurityCredentials
      description: "\n<p><xref href=\"System.Fabric.SecurityCredentials\" data-throw-if-not-resolved=\"false\"></xref> defines the security settings for the<xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref>.</p>"
    - id: settings
      type: System.Fabric.FabricClientSettings
      description: "\n<p>The fabric client settings.</p>\n"
    - id: hostEndpoints
      type: System.String[]
      description: "\n<p>Defines the set of Gateway addresses the <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> can use to connect to the cluster.</p>\n"
  overload: System.Fabric.FabricClient.#ctor*
  nameWithType.vb: FabricClient.FabricClient(SecurityCredentials, FabricClientSettings, String())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Fabric.FabricClient.FabricClient(System.Fabric.SecurityCredentials, System.Fabric.FabricClientSettings, System.String())
  name.vb: FabricClient(SecurityCredentials, FabricClientSettings, String())
- uid: System.Fabric.FabricClient.#ctor(System.TimeSpan,System.String[])
  commentId: M:System.Fabric.FabricClient.#ctor(System.TimeSpan,System.String[])
  id: '#ctor(System.TimeSpan,System.String[])'
  parent: System.Fabric.FabricClient
  langs:
  - csharp
  - vb
  name: FabricClient(TimeSpan, String[])
  nameWithType: FabricClient.FabricClient(TimeSpan, String[])
  fullName: System.Fabric.FabricClient.FabricClient(System.TimeSpan, System.String[])
  type: Constructor
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: .ctor
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.cs
    startLine: 398
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>DEPRECATED. Initializes a new instance of the <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> class with given keepAliveInterval \nand Service Fabric Gateway addresses (hostEndpoints).</p>\n"
  remarks: "\n<p>If there are external devices in between the connection from the client to the cluster that require periodic messages to keep the connection alive, \nthen make sure to use the KeepAlive feature of FabricClient. During the initialization of the FabricClient, users can specify a TimeSpan keepAliveInterval. \nIf this argument is specified, then the FabricClient will periodically ping the Service Fabric Gateway Service it is currently communicating with, \nas long as there is a pending operation. An example of a scenario where this feature is useful is Windows Azure. If the <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> \nis outside of Windows Azure and the cluster is inside of Windows Azure, then all connections will go through the Azure Load Balancer (ALB). \nALB terminates connections that are idle for more than 60 seconds. Hence, in these situations, <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> should be created with \nKeepAliveInterval set to &lt;59 seconds (20 -30 is recommended).</p>\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Deprecated", true)]

      public FabricClient(TimeSpan keepAliveInterval, params string[] hostEndpoints)
    content.vb: >-
      <Obsolete("Deprecated", True)>

      Public Sub New(keepAliveInterval As TimeSpan, ParamArray hostEndpoints As String())
    parameters:
    - id: keepAliveInterval
      type: System.TimeSpan
      description: "\n<p>Defines the periodic keep alive message interval.</p>\n"
    - id: hostEndpoints
      type: System.String[]
      description: "\n<p> Defines the set of Gateway addresses the <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> can use to connect to the cluster.</p>\n"
  overload: System.Fabric.FabricClient.#ctor*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String,System.Boolean)
    arguments:
    - type: System.String
      value: Deprecated
    - type: System.Boolean
      value: true
  nameWithType.vb: FabricClient.FabricClient(TimeSpan, String())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Fabric.FabricClient.FabricClient(System.TimeSpan, System.String())
  name.vb: FabricClient(TimeSpan, String())
- uid: System.Fabric.FabricClient.#ctor(System.Fabric.SecurityCredentials,System.TimeSpan,System.String[])
  commentId: M:System.Fabric.FabricClient.#ctor(System.Fabric.SecurityCredentials,System.TimeSpan,System.String[])
  id: '#ctor(System.Fabric.SecurityCredentials,System.TimeSpan,System.String[])'
  parent: System.Fabric.FabricClient
  langs:
  - csharp
  - vb
  name: FabricClient(SecurityCredentials, TimeSpan, String[])
  nameWithType: FabricClient.FabricClient(SecurityCredentials, TimeSpan, String[])
  fullName: System.Fabric.FabricClient.FabricClient(System.Fabric.SecurityCredentials, System.TimeSpan, System.String[])
  type: Constructor
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: .ctor
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.cs
    startLine: 424
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>DEPRECATED. Initializes a new instance of the <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> class with given credentials, keepAliveInterval \nand Service Fabric Gateway addresses (hostEndpoints).</p>\n"
  remarks: "\n<p>If there are external devices in between the connection from the client to the cluster that require periodic messages to keep the connection alive, \nthen make sure to use the KeepAlive feature of FabricClient. During the initialization of the FabricClient, users can specify a TimeSpan keepAliveInterval. \nIf this argument is specified, then the FabricClient will periodically ping the Service Fabric Gateway Service it is currently communicating with, \nas long as there is a pending operation. An example of a scenario where this feature is useful is Windows Azure. If the <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> \nis outside of Windows Azure and the cluster is inside of Windows Azure, then all connections will go through the Azure Load Balancer (ALB). \nALB terminates connections that are idle for more than 60 seconds. Hence, in these situations, <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> should be created with \nKeepAliveInterval set to &lt;59 seconds (20 -30 is recommended).</p>\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Deprecated", true)]

      public FabricClient(SecurityCredentials credential, TimeSpan keepAliveInterval, params string[] hostEndpoints)
    content.vb: >-
      <Obsolete("Deprecated", True)>

      Public Sub New(credential As SecurityCredentials, keepAliveInterval As TimeSpan, ParamArray hostEndpoints As String())
    parameters:
    - id: credential
      type: System.Fabric.SecurityCredentials
      description: Defines the security credentials.
    - id: keepAliveInterval
      type: System.TimeSpan
      description: "\n<p>Defines the periodic keep alive message interval.</p>\n"
    - id: hostEndpoints
      type: System.String[]
      description: "\n<p> Defines the set of Gateway addresses the <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> can use to connect to the cluster.</p>\n"
  overload: System.Fabric.FabricClient.#ctor*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String,System.Boolean)
    arguments:
    - type: System.String
      value: Deprecated
    - type: System.Boolean
      value: true
  nameWithType.vb: FabricClient.FabricClient(SecurityCredentials, TimeSpan, String())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Fabric.FabricClient.FabricClient(System.Fabric.SecurityCredentials, System.TimeSpan, System.String())
  name.vb: FabricClient(SecurityCredentials, TimeSpan, String())
- uid: System.Fabric.FabricClient.UpdateSettings(System.Fabric.FabricClientSettings)
  commentId: M:System.Fabric.FabricClient.UpdateSettings(System.Fabric.FabricClientSettings)
  id: UpdateSettings(System.Fabric.FabricClientSettings)
  parent: System.Fabric.FabricClient
  langs:
  - csharp
  - vb
  name: UpdateSettings(FabricClientSettings)
  nameWithType: FabricClient.UpdateSettings(FabricClientSettings)
  fullName: System.Fabric.FabricClient.UpdateSettings(System.Fabric.FabricClientSettings)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: UpdateSettings
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.cs
    startLine: 483
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Updates the fabric client settings.</p>\n"
  example: []
  syntax:
    content: public void UpdateSettings(FabricClientSettings settings)
    content.vb: Public Sub UpdateSettings(settings As FabricClientSettings)
    parameters:
    - id: settings
      type: System.Fabric.FabricClientSettings
      description: "\n<p>The new fabric client settings to be used.</p>\n"
  overload: System.Fabric.FabricClient.UpdateSettings*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The specified fabric client settings can’t be null.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<xref href=\"System.Fabric.FabricClientSettings.PartitionLocationCacheLimit\" data-throw-if-not-resolved=\"false\"></xref> must be positive.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<xref href=\"System.Fabric.FabricClientSettings.PartitionLocationCacheBucketCount\" data-throw-if-not-resolved=\"false\"></xref> must be greater or equal to zero.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<xref href=\"System.Fabric.FabricClientSettings.ServiceChangePollInterval\" data-throw-if-not-resolved=\"false\"></xref> must represent a positive duration.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<xref href=\"System.Fabric.FabricClientSettings.ConnectionInitializationTimeout\" data-throw-if-not-resolved=\"false\"></xref> must represent a positive duration.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<xref href=\"System.Fabric.FabricClientSettings.KeepAliveInterval\" data-throw-if-not-resolved=\"false\"></xref> must be zero or a positive duration.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<xref href=\"System.Fabric.FabricClientSettings.ConnectionIdleTimeout\" data-throw-if-not-resolved=\"false\"></xref> must be zero or a positive duration.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<xref href=\"System.Fabric.FabricClientSettings.HealthOperationTimeout\" data-throw-if-not-resolved=\"false\"></xref> must represent a positive duration.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<xref href=\"System.Fabric.FabricClientSettings.HealthReportSendInterval\" data-throw-if-not-resolved=\"false\"></xref> must be zero or a positive duration.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<xref href=\"System.Fabric.FabricClientSettings.HealthReportRetrySendInterval\" data-throw-if-not-resolved=\"false\"></xref> must represent a positive duration.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<xref href=\"System.Fabric.FabricClientSettings.PartitionLocationCacheBucketCount\" data-throw-if-not-resolved=\"false\"></xref> must be greater or equal to zero.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<xref href=\"System.Fabric.FabricClientSettings.AuthTokenBufferSize\" data-throw-if-not-resolved=\"false\"></xref> must be greater or equal to zero.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.UpdateSecurityCredentials(System.Fabric.SecurityCredentials)
  commentId: M:System.Fabric.FabricClient.UpdateSecurityCredentials(System.Fabric.SecurityCredentials)
  id: UpdateSecurityCredentials(System.Fabric.SecurityCredentials)
  parent: System.Fabric.FabricClient
  langs:
  - csharp
  - vb
  name: UpdateSecurityCredentials(SecurityCredentials)
  nameWithType: FabricClient.UpdateSecurityCredentials(SecurityCredentials)
  fullName: System.Fabric.FabricClient.UpdateSecurityCredentials(System.Fabric.SecurityCredentials)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: UpdateSecurityCredentials
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.cs
    startLine: 495
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\nUpdates the fabric client security credentials.\n"
  example: []
  syntax:
    content: public void UpdateSecurityCredentials(SecurityCredentials credentials)
    content.vb: Public Sub UpdateSecurityCredentials(credentials As SecurityCredentials)
    parameters:
    - id: credentials
      type: System.Fabric.SecurityCredentials
      description: The new security credentials to be used.
  overload: System.Fabric.FabricClient.UpdateSecurityCredentials*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.Finalize
  commentId: M:System.Fabric.FabricClient.Finalize
  id: Finalize
  parent: System.Fabric.FabricClient
  langs:
  - csharp
  - vb
  name: Finalize()
  nameWithType: FabricClient.Finalize()
  fullName: System.Fabric.FabricClient.Finalize()
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: Finalize
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.cs
    startLine: 704
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>\nDestructor of fabric client.\n</p>\n"
  example: []
  syntax:
    content: protected void Finalize()
    content.vb: Protected Sub Finalize
  overload: System.Fabric.FabricClient.Finalize*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: System.Fabric.FabricClient.Dispose
  commentId: M:System.Fabric.FabricClient.Dispose
  id: Dispose
  parent: System.Fabric.FabricClient
  langs:
  - csharp
  - vb
  name: Dispose()
  nameWithType: FabricClient.Dispose()
  fullName: System.Fabric.FabricClient.Dispose()
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: Dispose
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.cs
    startLine: 714
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>\nDisposes of the fabric client.\n</p>\n"
  example: []
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose
  overload: System.Fabric.FabricClient.Dispose*
  implements:
  - System.IDisposable.Dispose
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.ClientConnected
  commentId: E:System.Fabric.FabricClient.ClientConnected
  id: ClientConnected
  parent: System.Fabric.FabricClient
  langs:
  - csharp
  - vb
  name: ClientConnected
  nameWithType: FabricClient.ClientConnected
  fullName: System.Fabric.FabricClient.ClientConnected
  type: Event
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: ClientConnected
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.cs
    startLine: 838
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\nOccurs when the client is connected to gateway.\n"
  example: []
  syntax:
    content: public event EventHandler ClientConnected
    content.vb: Public Event ClientConnected As EventHandler
    return:
      type: System.EventHandler
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.ClientDisconnected
  commentId: E:System.Fabric.FabricClient.ClientDisconnected
  id: ClientDisconnected
  parent: System.Fabric.FabricClient
  langs:
  - csharp
  - vb
  name: ClientDisconnected
  nameWithType: FabricClient.ClientDisconnected
  fullName: System.Fabric.FabricClient.ClientDisconnected
  type: Event
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: ClientDisconnected
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.cs
    startLine: 843
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\nOccurs when the client is disconnected from the gateway.\n"
  example: []
  syntax:
    content: public event EventHandler ClientDisconnected
    content.vb: Public Event ClientDisconnected As EventHandler
    return:
      type: System.EventHandler
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.ClaimsRetrieval
  commentId: E:System.Fabric.FabricClient.ClaimsRetrieval
  id: ClaimsRetrieval
  parent: System.Fabric.FabricClient
  langs:
  - csharp
  - vb
  name: ClaimsRetrieval
  nameWithType: FabricClient.ClaimsRetrieval
  fullName: System.Fabric.FabricClient.ClaimsRetrieval
  type: Event
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: ClaimsRetrieval
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.cs
    startLine: 848
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\nOccurs when the client needs to provide a claims token for authorization with the gateway\n"
  example: []
  syntax:
    content: public event FabricClient.ClaimsRetrievalEventHandler ClaimsRetrieval
    content.vb: Public Event ClaimsRetrieval As FabricClient.ClaimsRetrievalEventHandler
    return:
      type: System.Fabric.FabricClient.ClaimsRetrievalEventHandler
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: System.Fabric
  commentId: N:System.Fabric
  isExternal: false
  name: System.Fabric
  nameWithType: System.Fabric
  fullName: System.Fabric
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.FabricClient.System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
  commentId: M:System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  parent: System.Fabric.Messaging.Stream.ByteArraySerializer
  definition: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  name: Serialize<FabricClient>()
  nameWithType: ByteArraySerializer.Serialize<FabricClient>()
  fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<System.Fabric.FabricClient>()
  nameWithType.vb: ByteArraySerializer.Serialize(Of FabricClient)()
  fullname.vb: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of System.Fabric.FabricClient)()
  name.vb: Serialize(Of FabricClient)()
  spec.csharp:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
    name: Serialize<FabricClient>
    nameWithType: ByteArraySerializer.Serialize<FabricClient>
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<System.Fabric.FabricClient>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
    name: Serialize(Of FabricClient)
    nameWithType: ByteArraySerializer.Serialize(Of FabricClient)
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of System.Fabric.FabricClient)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  commentId: M:System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  isExternal: false
  name: Serialize<T>(T)
  nameWithType: ByteArraySerializer.Serialize<T>(T)
  fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<T>(T)
  nameWithType.vb: ByteArraySerializer.Serialize(Of T)(T)
  fullname.vb: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of T)(T)
  name.vb: Serialize(Of T)(T)
  spec.csharp:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
    name: Serialize<T>
    nameWithType: ByteArraySerializer.Serialize<T>
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
    name: Serialize(Of T)
    nameWithType: ByteArraySerializer.Serialize(Of T)
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.Messaging.Stream.ByteArraySerializer
  commentId: T:System.Fabric.Messaging.Stream.ByteArraySerializer
  parent: System.Fabric.Messaging.Stream
  isExternal: false
  name: ByteArraySerializer
  nameWithType: ByteArraySerializer
  fullName: System.Fabric.Messaging.Stream.ByteArraySerializer
- uid: System.Fabric.Messaging.Stream
  commentId: N:System.Fabric.Messaging.Stream
  isExternal: false
  name: System.Fabric.Messaging.Stream
  nameWithType: System.Fabric.Messaging.Stream
  fullName: System.Fabric.Messaging.Stream
- uid: System.Fabric.FabricClient.PropertyManager
  commentId: P:System.Fabric.FabricClient.PropertyManager
- uid: System.Fabric.FabricClient.PropertyManager*
  commentId: Overload:System.Fabric.FabricClient.PropertyManager
  isExternal: false
  name: PropertyManager
  nameWithType: FabricClient.PropertyManager
  fullName: System.Fabric.FabricClient.PropertyManager
- uid: System.Fabric.FabricClient.PropertyManagementClient
  commentId: T:System.Fabric.FabricClient.PropertyManagementClient
  parent: System.Fabric
  isExternal: false
  name: FabricClient.PropertyManagementClient
  nameWithType: FabricClient.PropertyManagementClient
  fullName: System.Fabric.FabricClient.PropertyManagementClient
- uid: System.Fabric.FabricClient.ServiceManager
  commentId: P:System.Fabric.FabricClient.ServiceManager
- uid: System.Fabric.FabricClient.ServiceManager*
  commentId: Overload:System.Fabric.FabricClient.ServiceManager
  isExternal: false
  name: ServiceManager
  nameWithType: FabricClient.ServiceManager
  fullName: System.Fabric.FabricClient.ServiceManager
- uid: System.Fabric.FabricClient.ServiceManagementClient
  commentId: T:System.Fabric.FabricClient.ServiceManagementClient
  parent: System.Fabric
  isExternal: false
  name: FabricClient.ServiceManagementClient
  nameWithType: FabricClient.ServiceManagementClient
  fullName: System.Fabric.FabricClient.ServiceManagementClient
- uid: System.Fabric.FabricClient.ServiceGroupManager
  commentId: P:System.Fabric.FabricClient.ServiceGroupManager
- uid: System.Fabric.FabricClient.ServiceGroupManager*
  commentId: Overload:System.Fabric.FabricClient.ServiceGroupManager
  isExternal: false
  name: ServiceGroupManager
  nameWithType: FabricClient.ServiceGroupManager
  fullName: System.Fabric.FabricClient.ServiceGroupManager
- uid: System.Fabric.FabricClient.ServiceGroupManagementClient
  commentId: T:System.Fabric.FabricClient.ServiceGroupManagementClient
  parent: System.Fabric
  isExternal: false
  name: FabricClient.ServiceGroupManagementClient
  nameWithType: FabricClient.ServiceGroupManagementClient
  fullName: System.Fabric.FabricClient.ServiceGroupManagementClient
- uid: System.Fabric.FabricClient.ApplicationManager
  commentId: P:System.Fabric.FabricClient.ApplicationManager
- uid: System.Fabric.FabricClient.ApplicationManager*
  commentId: Overload:System.Fabric.FabricClient.ApplicationManager
  isExternal: false
  name: ApplicationManager
  nameWithType: FabricClient.ApplicationManager
  fullName: System.Fabric.FabricClient.ApplicationManager
- uid: System.Fabric.FabricClient.ApplicationManagementClient
  commentId: T:System.Fabric.FabricClient.ApplicationManagementClient
  parent: System.Fabric
  isExternal: false
  name: FabricClient.ApplicationManagementClient
  nameWithType: FabricClient.ApplicationManagementClient
  fullName: System.Fabric.FabricClient.ApplicationManagementClient
- uid: System.Fabric.FabricClient.ClusterManager
  commentId: P:System.Fabric.FabricClient.ClusterManager
- uid: System.Fabric.FabricClient.ClusterManager*
  commentId: Overload:System.Fabric.FabricClient.ClusterManager
  isExternal: false
  name: ClusterManager
  nameWithType: FabricClient.ClusterManager
  fullName: System.Fabric.FabricClient.ClusterManager
- uid: System.Fabric.FabricClient.ClusterManagementClient
  commentId: T:System.Fabric.FabricClient.ClusterManagementClient
  parent: System.Fabric
  isExternal: false
  name: FabricClient.ClusterManagementClient
  nameWithType: FabricClient.ClusterManagementClient
  fullName: System.Fabric.FabricClient.ClusterManagementClient
- uid: System.Fabric.FabricClient.RepairManagementClient
  commentId: T:System.Fabric.FabricClient.RepairManagementClient
  parent: System.Fabric
  isExternal: false
  name: FabricClient.RepairManagementClient
  nameWithType: FabricClient.RepairManagementClient
  fullName: System.Fabric.FabricClient.RepairManagementClient
- uid: System.Fabric.FabricClient.RepairManager*
  commentId: Overload:System.Fabric.FabricClient.RepairManager
  isExternal: false
  name: RepairManager
  nameWithType: FabricClient.RepairManager
  fullName: System.Fabric.FabricClient.RepairManager
- uid: System.Fabric.FabricClient.QueryManager*
  commentId: Overload:System.Fabric.FabricClient.QueryManager
  isExternal: false
  name: QueryManager
  nameWithType: FabricClient.QueryManager
  fullName: System.Fabric.FabricClient.QueryManager
- uid: System.Fabric.FabricClient.QueryClient
  commentId: T:System.Fabric.FabricClient.QueryClient
  parent: System.Fabric
  isExternal: false
  name: FabricClient.QueryClient
  nameWithType: FabricClient.QueryClient
  fullName: System.Fabric.FabricClient.QueryClient
- uid: System.Fabric.FabricClient.HealthManager
  commentId: P:System.Fabric.FabricClient.HealthManager
- uid: System.Fabric.FabricClient.HealthManager*
  commentId: Overload:System.Fabric.FabricClient.HealthManager
  isExternal: false
  name: HealthManager
  nameWithType: FabricClient.HealthManager
  fullName: System.Fabric.FabricClient.HealthManager
- uid: System.Fabric.FabricClient.HealthClient
  commentId: T:System.Fabric.FabricClient.HealthClient
  parent: System.Fabric
  isExternal: false
  name: FabricClient.HealthClient
  nameWithType: FabricClient.HealthClient
  fullName: System.Fabric.FabricClient.HealthClient
- uid: System.Fabric.FabricClient.InfrastructureServiceClient
  commentId: T:System.Fabric.FabricClient.InfrastructureServiceClient
  parent: System.Fabric
  isExternal: false
  name: FabricClient.InfrastructureServiceClient
  nameWithType: FabricClient.InfrastructureServiceClient
  fullName: System.Fabric.FabricClient.InfrastructureServiceClient
- uid: System.Fabric.FabricClient.InfrastructureManager*
  commentId: Overload:System.Fabric.FabricClient.InfrastructureManager
  isExternal: false
  name: InfrastructureManager
  nameWithType: FabricClient.InfrastructureManager
  fullName: System.Fabric.FabricClient.InfrastructureManager
- uid: System.Fabric.FabricClient.TestManagementClient
  commentId: T:System.Fabric.FabricClient.TestManagementClient
  parent: System.Fabric
  isExternal: false
  name: FabricClient.TestManagementClient
  nameWithType: FabricClient.TestManagementClient
  fullName: System.Fabric.FabricClient.TestManagementClient
- uid: System.Fabric.FabricClient.TestManager*
  commentId: Overload:System.Fabric.FabricClient.TestManager
  isExternal: false
  name: TestManager
  nameWithType: FabricClient.TestManager
  fullName: System.Fabric.FabricClient.TestManager
- uid: System.Fabric.FabricClient.FaultManagementClient
  commentId: T:System.Fabric.FabricClient.FaultManagementClient
  parent: System.Fabric
  isExternal: false
  name: FabricClient.FaultManagementClient
  nameWithType: FabricClient.FaultManagementClient
  fullName: System.Fabric.FabricClient.FaultManagementClient
- uid: System.Fabric.FabricClient.FaultManager*
  commentId: Overload:System.Fabric.FabricClient.FaultManager
  isExternal: false
  name: FaultManager
  nameWithType: FabricClient.FaultManager
  fullName: System.Fabric.FabricClient.FaultManager
- uid: System.Fabric.FabricClient.Settings*
  commentId: Overload:System.Fabric.FabricClient.Settings
  isExternal: false
  name: Settings
  nameWithType: FabricClient.Settings
  fullName: System.Fabric.FabricClient.Settings
- uid: System.Fabric.FabricClientSettings
  commentId: T:System.Fabric.FabricClientSettings
  parent: System.Fabric
  isExternal: false
  name: FabricClientSettings
  nameWithType: FabricClientSettings
  fullName: System.Fabric.FabricClientSettings
- uid: System.Uri
  commentId: T:System.Uri
  parent: System
  isExternal: true
  name: Uri
  nameWithType: Uri
  fullName: System.Uri
- uid: System.Fabric.FabricClient
  commentId: T:System.Fabric.FabricClient
  parent: System.Fabric
  isExternal: false
  name: FabricClient
  nameWithType: FabricClient
  fullName: System.Fabric.FabricClient
- uid: System.Fabric.FabricClient.#ctor*
  commentId: Overload:System.Fabric.FabricClient.#ctor
  isExternal: false
  name: FabricClient
  nameWithType: FabricClient.FabricClient
  fullName: System.Fabric.FabricClient.FabricClient
- uid: System.Fabric.FabricClientRole
  commentId: T:System.Fabric.FabricClientRole
  parent: System.Fabric
  isExternal: false
  name: FabricClientRole
  nameWithType: FabricClientRole
  fullName: System.Fabric.FabricClientRole
- uid: System.String[]
  name: String[]
  nameWithType: String[]
  fullName: System.String[]
  nameWithType.vb: String()
  fullname.vb: System.String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Fabric.SecurityCredentials
  commentId: T:System.Fabric.SecurityCredentials
  parent: System.Fabric
  isExternal: false
  name: SecurityCredentials
  nameWithType: SecurityCredentials
  fullName: System.Fabric.SecurityCredentials
- uid: System.TimeSpan
  commentId: T:System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: System.Fabric.FabricClientSettings.PartitionLocationCacheLimit
  commentId: P:System.Fabric.FabricClientSettings.PartitionLocationCacheLimit
- uid: System.Fabric.FabricClientSettings.PartitionLocationCacheBucketCount
  commentId: P:System.Fabric.FabricClientSettings.PartitionLocationCacheBucketCount
- uid: System.Fabric.FabricClientSettings.ServiceChangePollInterval
  commentId: P:System.Fabric.FabricClientSettings.ServiceChangePollInterval
- uid: System.Fabric.FabricClientSettings.ConnectionInitializationTimeout
  commentId: P:System.Fabric.FabricClientSettings.ConnectionInitializationTimeout
- uid: System.Fabric.FabricClientSettings.KeepAliveInterval
  commentId: P:System.Fabric.FabricClientSettings.KeepAliveInterval
- uid: System.Fabric.FabricClientSettings.ConnectionIdleTimeout
  commentId: P:System.Fabric.FabricClientSettings.ConnectionIdleTimeout
- uid: System.Fabric.FabricClientSettings.HealthOperationTimeout
  commentId: P:System.Fabric.FabricClientSettings.HealthOperationTimeout
- uid: System.Fabric.FabricClientSettings.HealthReportSendInterval
  commentId: P:System.Fabric.FabricClientSettings.HealthReportSendInterval
- uid: System.Fabric.FabricClientSettings.HealthReportRetrySendInterval
  commentId: P:System.Fabric.FabricClientSettings.HealthReportRetrySendInterval
- uid: System.Fabric.FabricClientSettings.AuthTokenBufferSize
  commentId: P:System.Fabric.FabricClientSettings.AuthTokenBufferSize
- uid: System.Fabric.FabricClient.UpdateSettings*
  commentId: Overload:System.Fabric.FabricClient.UpdateSettings
  isExternal: false
  name: UpdateSettings
  nameWithType: FabricClient.UpdateSettings
  fullName: System.Fabric.FabricClient.UpdateSettings
- uid: System.ArgumentNullException
  commentId: T:System.ArgumentNullException
- uid: System.ArgumentException
  commentId: T:System.ArgumentException
- uid: System.Fabric.FabricClient.UpdateSecurityCredentials*
  commentId: Overload:System.Fabric.FabricClient.UpdateSecurityCredentials
  isExternal: false
  name: UpdateSecurityCredentials
  nameWithType: FabricClient.UpdateSecurityCredentials
  fullName: System.Fabric.FabricClient.UpdateSecurityCredentials
- uid: System.Fabric.FabricClient.Finalize*
  commentId: Overload:System.Fabric.FabricClient.Finalize
  isExternal: false
  name: Finalize
  nameWithType: FabricClient.Finalize
  fullName: System.Fabric.FabricClient.Finalize
- uid: System.Fabric.FabricClient.Dispose*
  commentId: Overload:System.Fabric.FabricClient.Dispose
  isExternal: false
  name: Dispose
  nameWithType: FabricClient.Dispose
  fullName: System.Fabric.FabricClient.Dispose
- uid: System.IDisposable.Dispose
  commentId: M:System.IDisposable.Dispose
  parent: System.IDisposable
  isExternal: true
  name: Dispose()
  nameWithType: IDisposable.Dispose()
  fullName: System.IDisposable.Dispose()
  spec.csharp:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.EventHandler
  commentId: T:System.EventHandler
  parent: System
  isExternal: true
  name: EventHandler
  nameWithType: EventHandler
  fullName: System.EventHandler
- uid: System.Fabric.FabricClient.ClaimsRetrievalEventHandler
  commentId: T:System.Fabric.FabricClient.ClaimsRetrievalEventHandler
  parent: System.Fabric
  isExternal: false
  name: FabricClient.ClaimsRetrievalEventHandler
  nameWithType: FabricClient.ClaimsRetrievalEventHandler
  fullName: System.Fabric.FabricClient.ClaimsRetrievalEventHandler
