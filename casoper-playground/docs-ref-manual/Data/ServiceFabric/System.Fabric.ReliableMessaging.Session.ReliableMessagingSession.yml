### YamlMime:ManagedReference
items:
- uid: System.Fabric.ReliableMessaging.Session.ReliableMessagingSession
  commentId: T:System.Fabric.ReliableMessaging.Session.ReliableMessagingSession
  id: ReliableMessagingSession
  parent: System.Fabric.ReliableMessaging.Session
  children:
  - System.Fabric.ReliableMessaging.Session.ReliableMessagingSession.Abort
  - System.Fabric.ReliableMessaging.Session.ReliableMessagingSession.CloseAsync(System.Threading.CancellationToken)
  - System.Fabric.ReliableMessaging.Session.ReliableMessagingSession.GetDataSnapshot
  - System.Fabric.ReliableMessaging.Session.ReliableMessagingSession.OpenAsync(System.Threading.CancellationToken)
  - System.Fabric.ReliableMessaging.Session.ReliableMessagingSession.ReceiveAsync(System.Threading.CancellationToken)
  - System.Fabric.ReliableMessaging.Session.ReliableMessagingSession.SendAsync(System.Fabric.IOperationData,System.Threading.CancellationToken)
  - System.Fabric.ReliableMessaging.Session.ReliableMessagingSession.TryReceiveAsync(System.Threading.CancellationToken)
  langs:
  - csharp
  - vb
  name: ReliableMessagingSession
  nameWithType: ReliableMessagingSession
  fullName: System.Fabric.ReliableMessaging.Session.ReliableMessagingSession
  type: Class
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Impl/ReliableMessaging/Session/ReliableSession.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: ReliableMessagingSession
    path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Impl/ReliableMessaging/Session/ReliableSession.cs
    startLine: 834
  assemblies:
  - Microsoft.ServiceFabric.Data.Impl
  namespace: System.Fabric.ReliableMessaging.Session
  summary: "\n\n"
  example: []
  syntax:
    content: 'public sealed class ReliableMessagingSession : IReliableMessagingSession'
    content.vb: >-
      Public NotInheritable Class ReliableMessagingSession
          Implements IReliableMessagingSession
  inheritance:
  - System.Object
  implements:
  - System.Fabric.ReliableMessaging.Session.IReliableMessagingSession
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  extensionMethods:
  - System.Fabric.ReliableMessaging.Session.ReliableMessagingSession.System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: System.Fabric.ReliableMessaging.Session.ReliableMessagingSession.OpenAsync(System.Threading.CancellationToken)
  commentId: M:System.Fabric.ReliableMessaging.Session.ReliableMessagingSession.OpenAsync(System.Threading.CancellationToken)
  id: OpenAsync(System.Threading.CancellationToken)
  parent: System.Fabric.ReliableMessaging.Session.ReliableMessagingSession
  langs:
  - csharp
  - vb
  name: OpenAsync(CancellationToken)
  nameWithType: ReliableMessagingSession.OpenAsync(CancellationToken)
  fullName: System.Fabric.ReliableMessaging.Session.ReliableMessagingSession.OpenAsync(System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Impl/ReliableMessaging/Session/ReliableSession.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: OpenAsync
    path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Impl/ReliableMessaging/Session/ReliableSession.cs
    startLine: 872
  assemblies:
  - Microsoft.ServiceFabric.Data.Impl
  namespace: System.Fabric.ReliableMessaging.Session
  summary: "\nStart the session\n"
  example: []
  syntax:
    content: public Task OpenAsync(CancellationToken cancellationToken)
    content.vb: Public Function OpenAsync(cancellationToken As CancellationToken) As Task
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task
      description: "Throws exception if the session cannot be started because the name cannot be resolved \nor a connection cannot be established"
  overload: System.Fabric.ReliableMessaging.Session.ReliableMessagingSession.OpenAsync*
  implements:
  - System.Fabric.ReliableMessaging.Session.IReliableMessagingSession.OpenAsync(System.Threading.CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.ReliableMessaging.Session.ReliableMessagingSession.CloseAsync(System.Threading.CancellationToken)
  commentId: M:System.Fabric.ReliableMessaging.Session.ReliableMessagingSession.CloseAsync(System.Threading.CancellationToken)
  id: CloseAsync(System.Threading.CancellationToken)
  parent: System.Fabric.ReliableMessaging.Session.ReliableMessagingSession
  langs:
  - csharp
  - vb
  name: CloseAsync(CancellationToken)
  nameWithType: ReliableMessagingSession.CloseAsync(CancellationToken)
  fullName: System.Fabric.ReliableMessaging.Session.ReliableMessagingSession.CloseAsync(System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Impl/ReliableMessaging/Session/ReliableSession.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: CloseAsync
    path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Impl/ReliableMessaging/Session/ReliableSession.cs
    startLine: 901
  assemblies:
  - Microsoft.ServiceFabric.Data.Impl
  namespace: System.Fabric.ReliableMessaging.Session
  summary: "\nStop the session\n"
  example: []
  syntax:
    content: public Task CloseAsync(CancellationToken cancellationToken)
    content.vb: Public Function CloseAsync(cancellationToken As CancellationToken) As Task
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task
      description: 'Throws exception if the session cannot be closed gracefully '
  overload: System.Fabric.ReliableMessaging.Session.ReliableMessagingSession.CloseAsync*
  implements:
  - System.Fabric.ReliableMessaging.Session.IReliableMessagingSession.CloseAsync(System.Threading.CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.ReliableMessaging.Session.ReliableMessagingSession.Abort
  commentId: M:System.Fabric.ReliableMessaging.Session.ReliableMessagingSession.Abort
  id: Abort
  parent: System.Fabric.ReliableMessaging.Session.ReliableMessagingSession
  langs:
  - csharp
  - vb
  name: Abort()
  nameWithType: ReliableMessagingSession.Abort()
  fullName: System.Fabric.ReliableMessaging.Session.ReliableMessagingSession.Abort()
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Impl/ReliableMessaging/Session/ReliableSession.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: Abort
    path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Impl/ReliableMessaging/Session/ReliableSession.cs
    startLine: 928
  assemblies:
  - Microsoft.ServiceFabric.Data.Impl
  namespace: System.Fabric.ReliableMessaging.Session
  summary: "\nAbrupt shutdown of the session protocol and connections and other resources\n"
  example: []
  syntax:
    content: public void Abort()
    content.vb: Public Sub Abort
  overload: System.Fabric.ReliableMessaging.Session.ReliableMessagingSession.Abort*
  implements:
  - System.Fabric.ReliableMessaging.Session.IReliableMessagingSession.Abort
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.ReliableMessaging.Session.ReliableMessagingSession.SendAsync(System.Fabric.IOperationData,System.Threading.CancellationToken)
  commentId: M:System.Fabric.ReliableMessaging.Session.ReliableMessagingSession.SendAsync(System.Fabric.IOperationData,System.Threading.CancellationToken)
  id: SendAsync(System.Fabric.IOperationData,System.Threading.CancellationToken)
  parent: System.Fabric.ReliableMessaging.Session.ReliableMessagingSession
  langs:
  - csharp
  - vb
  name: SendAsync(IOperationData, CancellationToken)
  nameWithType: ReliableMessagingSession.SendAsync(IOperationData, CancellationToken)
  fullName: System.Fabric.ReliableMessaging.Session.ReliableMessagingSession.SendAsync(System.Fabric.IOperationData, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Impl/ReliableMessaging/Session/ReliableSession.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: SendAsync
    path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Impl/ReliableMessaging/Session/ReliableSession.cs
    startLine: 942
  assemblies:
  - Microsoft.ServiceFabric.Data.Impl
  namespace: System.Fabric.ReliableMessaging.Session
  summary: "\nMay be delayed locally if outbound buffer is full (throttling case)\nReturns to continuation when the message has been acknowledged as received by the target\n"
  example: []
  syntax:
    content: public Task SendAsync(IOperationData message, CancellationToken cancellationToken)
    content.vb: Public Function SendAsync(message As IOperationData, cancellationToken As CancellationToken) As Task
    parameters:
    - id: message
      type: System.Fabric.IOperationData
      description: ''
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: ''
    return:
      type: System.Threading.Tasks.Task
  overload: System.Fabric.ReliableMessaging.Session.ReliableMessagingSession.SendAsync*
  implements:
  - System.Fabric.ReliableMessaging.Session.IReliableMessagingSession.SendAsync(System.Fabric.IOperationData,System.Threading.CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.ReliableMessaging.Session.ReliableMessagingSession.ReceiveAsync(System.Threading.CancellationToken)
  commentId: M:System.Fabric.ReliableMessaging.Session.ReliableMessagingSession.ReceiveAsync(System.Threading.CancellationToken)
  id: ReceiveAsync(System.Threading.CancellationToken)
  parent: System.Fabric.ReliableMessaging.Session.ReliableMessagingSession
  langs:
  - csharp
  - vb
  name: ReceiveAsync(CancellationToken)
  nameWithType: ReliableMessagingSession.ReceiveAsync(CancellationToken)
  fullName: System.Fabric.ReliableMessaging.Session.ReliableMessagingSession.ReceiveAsync(System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Impl/ReliableMessaging/Session/ReliableSession.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: ReceiveAsync
    path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Impl/ReliableMessaging/Session/ReliableSession.cs
    startLine: 997
  assemblies:
  - Microsoft.ServiceFabric.Data.Impl
  namespace: System.Fabric.ReliableMessaging.Session
  summary: "\nAsync, return to continuation when inbound message available, wait for messages to come in if necessary\n"
  example: []
  syntax:
    content: public Task<IOperationData> ReceiveAsync(CancellationToken cancellationToken)
    content.vb: Public Function ReceiveAsync(cancellationToken As CancellationToken) As Task(Of IOperationData)
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.Fabric.IOperationData}
      description: ''
  overload: System.Fabric.ReliableMessaging.Session.ReliableMessagingSession.ReceiveAsync*
  implements:
  - System.Fabric.ReliableMessaging.Session.IReliableMessagingSession.ReceiveAsync(System.Threading.CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.ReliableMessaging.Session.ReliableMessagingSession.TryReceiveAsync(System.Threading.CancellationToken)
  commentId: M:System.Fabric.ReliableMessaging.Session.ReliableMessagingSession.TryReceiveAsync(System.Threading.CancellationToken)
  id: TryReceiveAsync(System.Threading.CancellationToken)
  parent: System.Fabric.ReliableMessaging.Session.ReliableMessagingSession
  langs:
  - csharp
  - vb
  name: TryReceiveAsync(CancellationToken)
  nameWithType: ReliableMessagingSession.TryReceiveAsync(CancellationToken)
  fullName: System.Fabric.ReliableMessaging.Session.ReliableMessagingSession.TryReceiveAsync(System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Impl/ReliableMessaging/Session/ReliableSession.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: TryReceiveAsync
    path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Impl/ReliableMessaging/Session/ReliableSession.cs
    startLine: 1010
  assemblies:
  - Microsoft.ServiceFabric.Data.Impl
  namespace: System.Fabric.ReliableMessaging.Session
  summary: "\nSame as ReceiveAsync, except do not wait for messages to come in, return null IOperationData if there are no messages waiting to be delivered\n"
  example: []
  syntax:
    content: public Task<IOperationData> TryReceiveAsync(CancellationToken cancellationToken)
    content.vb: Public Function TryReceiveAsync(cancellationToken As CancellationToken) As Task(Of IOperationData)
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.Fabric.IOperationData}
      description: ''
  overload: System.Fabric.ReliableMessaging.Session.ReliableMessagingSession.TryReceiveAsync*
  implements:
  - System.Fabric.ReliableMessaging.Session.IReliableMessagingSession.TryReceiveAsync(System.Threading.CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.ReliableMessaging.Session.ReliableMessagingSession.GetDataSnapshot
  commentId: M:System.Fabric.ReliableMessaging.Session.ReliableMessagingSession.GetDataSnapshot
  id: GetDataSnapshot
  parent: System.Fabric.ReliableMessaging.Session.ReliableMessagingSession
  langs:
  - csharp
  - vb
  name: GetDataSnapshot()
  nameWithType: ReliableMessagingSession.GetDataSnapshot()
  fullName: System.Fabric.ReliableMessaging.Session.ReliableMessagingSession.GetDataSnapshot()
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Impl/ReliableMessaging/Session/ReliableSession.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: GetDataSnapshot
    path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Impl/ReliableMessaging/Session/ReliableSession.cs
    startLine: 1038
  assemblies:
  - Microsoft.ServiceFabric.Data.Impl
  namespace: System.Fabric.ReliableMessaging.Session
  summary: "\nRetrieves session data snapshot\n"
  example: []
  syntax:
    content: public SessionDataSnapshot GetDataSnapshot()
    content.vb: Public Function GetDataSnapshot As SessionDataSnapshot
    return:
      type: System.Fabric.ReliableMessaging.Session.SessionDataSnapshot
  overload: System.Fabric.ReliableMessaging.Session.ReliableMessagingSession.GetDataSnapshot*
  implements:
  - System.Fabric.ReliableMessaging.Session.IReliableMessagingSession.GetDataSnapshot
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: System.Fabric.ReliableMessaging.Session
  commentId: N:System.Fabric.ReliableMessaging.Session
  isExternal: false
  name: System.Fabric.ReliableMessaging.Session
  nameWithType: System.Fabric.ReliableMessaging.Session
  fullName: System.Fabric.ReliableMessaging.Session
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Fabric.ReliableMessaging.Session.IReliableMessagingSession
  commentId: T:System.Fabric.ReliableMessaging.Session.IReliableMessagingSession
  parent: System.Fabric.ReliableMessaging.Session
  isExternal: false
  name: IReliableMessagingSession
  nameWithType: IReliableMessagingSession
  fullName: System.Fabric.ReliableMessaging.Session.IReliableMessagingSession
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.ReliableMessaging.Session.ReliableMessagingSession.System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
  commentId: M:System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  parent: System.Fabric.Messaging.Stream.ByteArraySerializer
  definition: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  name: Serialize<ReliableMessagingSession>()
  nameWithType: ByteArraySerializer.Serialize<ReliableMessagingSession>()
  fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<System.Fabric.ReliableMessaging.Session.ReliableMessagingSession>()
  nameWithType.vb: ByteArraySerializer.Serialize(Of ReliableMessagingSession)()
  fullname.vb: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of System.Fabric.ReliableMessaging.Session.ReliableMessagingSession)()
  name.vb: Serialize(Of ReliableMessagingSession)()
  spec.csharp:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
    name: Serialize<ReliableMessagingSession>
    nameWithType: ByteArraySerializer.Serialize<ReliableMessagingSession>
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<System.Fabric.ReliableMessaging.Session.ReliableMessagingSession>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
    name: Serialize(Of ReliableMessagingSession)
    nameWithType: ByteArraySerializer.Serialize(Of ReliableMessagingSession)
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of System.Fabric.ReliableMessaging.Session.ReliableMessagingSession)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  commentId: M:System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  isExternal: false
  name: Serialize<T>(T)
  nameWithType: ByteArraySerializer.Serialize<T>(T)
  fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<T>(T)
  nameWithType.vb: ByteArraySerializer.Serialize(Of T)(T)
  fullname.vb: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of T)(T)
  name.vb: Serialize(Of T)(T)
  spec.csharp:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
    name: Serialize<T>
    nameWithType: ByteArraySerializer.Serialize<T>
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
    name: Serialize(Of T)
    nameWithType: ByteArraySerializer.Serialize(Of T)
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.Messaging.Stream.ByteArraySerializer
  commentId: T:System.Fabric.Messaging.Stream.ByteArraySerializer
  parent: System.Fabric.Messaging.Stream
  isExternal: false
  name: ByteArraySerializer
  nameWithType: ByteArraySerializer
  fullName: System.Fabric.Messaging.Stream.ByteArraySerializer
- uid: System.Fabric.Messaging.Stream
  commentId: N:System.Fabric.Messaging.Stream
  isExternal: false
  name: System.Fabric.Messaging.Stream
  nameWithType: System.Fabric.Messaging.Stream
  fullName: System.Fabric.Messaging.Stream
- uid: System.Fabric.ReliableMessaging.Session.ReliableMessagingSession.OpenAsync*
  commentId: Overload:System.Fabric.ReliableMessaging.Session.ReliableMessagingSession.OpenAsync
  isExternal: false
  name: OpenAsync
  nameWithType: ReliableMessagingSession.OpenAsync
  fullName: System.Fabric.ReliableMessaging.Session.ReliableMessagingSession.OpenAsync
- uid: System.Fabric.ReliableMessaging.Session.IReliableMessagingSession.OpenAsync(System.Threading.CancellationToken)
  commentId: M:System.Fabric.ReliableMessaging.Session.IReliableMessagingSession.OpenAsync(System.Threading.CancellationToken)
  parent: System.Fabric.ReliableMessaging.Session.IReliableMessagingSession
  isExternal: true
  name: OpenAsync(CancellationToken)
  nameWithType: IReliableMessagingSession.OpenAsync(CancellationToken)
  fullName: System.Fabric.ReliableMessaging.Session.IReliableMessagingSession.OpenAsync(System.Threading.CancellationToken)
  spec.csharp:
  - uid: System.Fabric.ReliableMessaging.Session.IReliableMessagingSession.OpenAsync(System.Threading.CancellationToken)
    name: OpenAsync
    nameWithType: IReliableMessagingSession.OpenAsync
    fullName: System.Fabric.ReliableMessaging.Session.IReliableMessagingSession.OpenAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Fabric.ReliableMessaging.Session.IReliableMessagingSession.OpenAsync(System.Threading.CancellationToken)
    name: OpenAsync
    nameWithType: IReliableMessagingSession.OpenAsync
    fullName: System.Fabric.ReliableMessaging.Session.IReliableMessagingSession.OpenAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: false
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: System.Fabric.ReliableMessaging.Session.ReliableMessagingSession.CloseAsync*
  commentId: Overload:System.Fabric.ReliableMessaging.Session.ReliableMessagingSession.CloseAsync
  isExternal: false
  name: CloseAsync
  nameWithType: ReliableMessagingSession.CloseAsync
  fullName: System.Fabric.ReliableMessaging.Session.ReliableMessagingSession.CloseAsync
- uid: System.Fabric.ReliableMessaging.Session.IReliableMessagingSession.CloseAsync(System.Threading.CancellationToken)
  commentId: M:System.Fabric.ReliableMessaging.Session.IReliableMessagingSession.CloseAsync(System.Threading.CancellationToken)
  parent: System.Fabric.ReliableMessaging.Session.IReliableMessagingSession
  isExternal: true
  name: CloseAsync(CancellationToken)
  nameWithType: IReliableMessagingSession.CloseAsync(CancellationToken)
  fullName: System.Fabric.ReliableMessaging.Session.IReliableMessagingSession.CloseAsync(System.Threading.CancellationToken)
  spec.csharp:
  - uid: System.Fabric.ReliableMessaging.Session.IReliableMessagingSession.CloseAsync(System.Threading.CancellationToken)
    name: CloseAsync
    nameWithType: IReliableMessagingSession.CloseAsync
    fullName: System.Fabric.ReliableMessaging.Session.IReliableMessagingSession.CloseAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Fabric.ReliableMessaging.Session.IReliableMessagingSession.CloseAsync(System.Threading.CancellationToken)
    name: CloseAsync
    nameWithType: IReliableMessagingSession.CloseAsync
    fullName: System.Fabric.ReliableMessaging.Session.IReliableMessagingSession.CloseAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.ReliableMessaging.Session.ReliableMessagingSession.Abort*
  commentId: Overload:System.Fabric.ReliableMessaging.Session.ReliableMessagingSession.Abort
  isExternal: false
  name: Abort
  nameWithType: ReliableMessagingSession.Abort
  fullName: System.Fabric.ReliableMessaging.Session.ReliableMessagingSession.Abort
- uid: System.Fabric.ReliableMessaging.Session.IReliableMessagingSession.Abort
  commentId: M:System.Fabric.ReliableMessaging.Session.IReliableMessagingSession.Abort
  parent: System.Fabric.ReliableMessaging.Session.IReliableMessagingSession
  isExternal: false
  name: Abort()
  nameWithType: IReliableMessagingSession.Abort()
  fullName: System.Fabric.ReliableMessaging.Session.IReliableMessagingSession.Abort()
  spec.csharp:
  - uid: System.Fabric.ReliableMessaging.Session.IReliableMessagingSession.Abort
    name: Abort
    nameWithType: IReliableMessagingSession.Abort
    fullName: System.Fabric.ReliableMessaging.Session.IReliableMessagingSession.Abort
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Fabric.ReliableMessaging.Session.IReliableMessagingSession.Abort
    name: Abort
    nameWithType: IReliableMessagingSession.Abort
    fullName: System.Fabric.ReliableMessaging.Session.IReliableMessagingSession.Abort
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.ReliableMessaging.Session.ReliableMessagingSession.SendAsync*
  commentId: Overload:System.Fabric.ReliableMessaging.Session.ReliableMessagingSession.SendAsync
  isExternal: false
  name: SendAsync
  nameWithType: ReliableMessagingSession.SendAsync
  fullName: System.Fabric.ReliableMessaging.Session.ReliableMessagingSession.SendAsync
- uid: System.Fabric.ReliableMessaging.Session.IReliableMessagingSession.SendAsync(System.Fabric.IOperationData,System.Threading.CancellationToken)
  commentId: M:System.Fabric.ReliableMessaging.Session.IReliableMessagingSession.SendAsync(System.Fabric.IOperationData,System.Threading.CancellationToken)
  parent: System.Fabric.ReliableMessaging.Session.IReliableMessagingSession
  isExternal: true
  name: SendAsync(IOperationData, CancellationToken)
  nameWithType: IReliableMessagingSession.SendAsync(IOperationData, CancellationToken)
  fullName: System.Fabric.ReliableMessaging.Session.IReliableMessagingSession.SendAsync(System.Fabric.IOperationData, System.Threading.CancellationToken)
  spec.csharp:
  - uid: System.Fabric.ReliableMessaging.Session.IReliableMessagingSession.SendAsync(System.Fabric.IOperationData,System.Threading.CancellationToken)
    name: SendAsync
    nameWithType: IReliableMessagingSession.SendAsync
    fullName: System.Fabric.ReliableMessaging.Session.IReliableMessagingSession.SendAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Fabric.IOperationData
    name: IOperationData
    nameWithType: IOperationData
    fullName: System.Fabric.IOperationData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Fabric.ReliableMessaging.Session.IReliableMessagingSession.SendAsync(System.Fabric.IOperationData,System.Threading.CancellationToken)
    name: SendAsync
    nameWithType: IReliableMessagingSession.SendAsync
    fullName: System.Fabric.ReliableMessaging.Session.IReliableMessagingSession.SendAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Fabric.IOperationData
    name: IOperationData
    nameWithType: IOperationData
    fullName: System.Fabric.IOperationData
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.IOperationData
  commentId: T:System.Fabric.IOperationData
  parent: System.Fabric
  isExternal: false
  name: IOperationData
  nameWithType: IOperationData
  fullName: System.Fabric.IOperationData
- uid: System.Fabric
  commentId: N:System.Fabric
  isExternal: false
  name: System.Fabric
  nameWithType: System.Fabric
  fullName: System.Fabric
- uid: System.Fabric.ReliableMessaging.Session.ReliableMessagingSession.ReceiveAsync*
  commentId: Overload:System.Fabric.ReliableMessaging.Session.ReliableMessagingSession.ReceiveAsync
  isExternal: false
  name: ReceiveAsync
  nameWithType: ReliableMessagingSession.ReceiveAsync
  fullName: System.Fabric.ReliableMessaging.Session.ReliableMessagingSession.ReceiveAsync
- uid: System.Fabric.ReliableMessaging.Session.IReliableMessagingSession.ReceiveAsync(System.Threading.CancellationToken)
  commentId: M:System.Fabric.ReliableMessaging.Session.IReliableMessagingSession.ReceiveAsync(System.Threading.CancellationToken)
  parent: System.Fabric.ReliableMessaging.Session.IReliableMessagingSession
  isExternal: true
  name: ReceiveAsync(CancellationToken)
  nameWithType: IReliableMessagingSession.ReceiveAsync(CancellationToken)
  fullName: System.Fabric.ReliableMessaging.Session.IReliableMessagingSession.ReceiveAsync(System.Threading.CancellationToken)
  spec.csharp:
  - uid: System.Fabric.ReliableMessaging.Session.IReliableMessagingSession.ReceiveAsync(System.Threading.CancellationToken)
    name: ReceiveAsync
    nameWithType: IReliableMessagingSession.ReceiveAsync
    fullName: System.Fabric.ReliableMessaging.Session.IReliableMessagingSession.ReceiveAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Fabric.ReliableMessaging.Session.IReliableMessagingSession.ReceiveAsync(System.Threading.CancellationToken)
    name: ReceiveAsync
    nameWithType: IReliableMessagingSession.ReceiveAsync
    fullName: System.Fabric.ReliableMessaging.Session.IReliableMessagingSession.ReceiveAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{System.Fabric.IOperationData}
  commentId: T:System.Threading.Tasks.Task{System.Fabric.IOperationData}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<IOperationData>
  nameWithType: Task<IOperationData>
  fullName: System.Threading.Tasks.Task<System.Fabric.IOperationData>
  nameWithType.vb: Task(Of IOperationData)
  fullname.vb: System.Threading.Tasks.Task(Of System.Fabric.IOperationData)
  name.vb: Task(Of IOperationData)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Fabric.IOperationData
    name: IOperationData
    nameWithType: IOperationData
    fullName: System.Fabric.IOperationData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Fabric.IOperationData
    name: IOperationData
    nameWithType: IOperationData
    fullName: System.Fabric.IOperationData
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullname.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.ReliableMessaging.Session.ReliableMessagingSession.TryReceiveAsync*
  commentId: Overload:System.Fabric.ReliableMessaging.Session.ReliableMessagingSession.TryReceiveAsync
  isExternal: false
  name: TryReceiveAsync
  nameWithType: ReliableMessagingSession.TryReceiveAsync
  fullName: System.Fabric.ReliableMessaging.Session.ReliableMessagingSession.TryReceiveAsync
- uid: System.Fabric.ReliableMessaging.Session.IReliableMessagingSession.TryReceiveAsync(System.Threading.CancellationToken)
  commentId: M:System.Fabric.ReliableMessaging.Session.IReliableMessagingSession.TryReceiveAsync(System.Threading.CancellationToken)
  parent: System.Fabric.ReliableMessaging.Session.IReliableMessagingSession
  isExternal: true
  name: TryReceiveAsync(CancellationToken)
  nameWithType: IReliableMessagingSession.TryReceiveAsync(CancellationToken)
  fullName: System.Fabric.ReliableMessaging.Session.IReliableMessagingSession.TryReceiveAsync(System.Threading.CancellationToken)
  spec.csharp:
  - uid: System.Fabric.ReliableMessaging.Session.IReliableMessagingSession.TryReceiveAsync(System.Threading.CancellationToken)
    name: TryReceiveAsync
    nameWithType: IReliableMessagingSession.TryReceiveAsync
    fullName: System.Fabric.ReliableMessaging.Session.IReliableMessagingSession.TryReceiveAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Fabric.ReliableMessaging.Session.IReliableMessagingSession.TryReceiveAsync(System.Threading.CancellationToken)
    name: TryReceiveAsync
    nameWithType: IReliableMessagingSession.TryReceiveAsync
    fullName: System.Fabric.ReliableMessaging.Session.IReliableMessagingSession.TryReceiveAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.ReliableMessaging.Session.ReliableMessagingSession.GetDataSnapshot*
  commentId: Overload:System.Fabric.ReliableMessaging.Session.ReliableMessagingSession.GetDataSnapshot
  isExternal: false
  name: GetDataSnapshot
  nameWithType: ReliableMessagingSession.GetDataSnapshot
  fullName: System.Fabric.ReliableMessaging.Session.ReliableMessagingSession.GetDataSnapshot
- uid: System.Fabric.ReliableMessaging.Session.IReliableMessagingSession.GetDataSnapshot
  commentId: M:System.Fabric.ReliableMessaging.Session.IReliableMessagingSession.GetDataSnapshot
  parent: System.Fabric.ReliableMessaging.Session.IReliableMessagingSession
  isExternal: false
  name: GetDataSnapshot()
  nameWithType: IReliableMessagingSession.GetDataSnapshot()
  fullName: System.Fabric.ReliableMessaging.Session.IReliableMessagingSession.GetDataSnapshot()
  spec.csharp:
  - uid: System.Fabric.ReliableMessaging.Session.IReliableMessagingSession.GetDataSnapshot
    name: GetDataSnapshot
    nameWithType: IReliableMessagingSession.GetDataSnapshot
    fullName: System.Fabric.ReliableMessaging.Session.IReliableMessagingSession.GetDataSnapshot
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Fabric.ReliableMessaging.Session.IReliableMessagingSession.GetDataSnapshot
    name: GetDataSnapshot
    nameWithType: IReliableMessagingSession.GetDataSnapshot
    fullName: System.Fabric.ReliableMessaging.Session.IReliableMessagingSession.GetDataSnapshot
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.ReliableMessaging.Session.SessionDataSnapshot
  commentId: T:System.Fabric.ReliableMessaging.Session.SessionDataSnapshot
  parent: System.Fabric.ReliableMessaging.Session
  isExternal: false
  name: SessionDataSnapshot
  nameWithType: SessionDataSnapshot
  fullName: System.Fabric.ReliableMessaging.Session.SessionDataSnapshot
