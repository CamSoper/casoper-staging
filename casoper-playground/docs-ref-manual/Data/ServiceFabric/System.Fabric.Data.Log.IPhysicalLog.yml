### YamlMime:ManagedReference
items:
- uid: System.Fabric.Data.Log.IPhysicalLog
  commentId: T:System.Fabric.Data.Log.IPhysicalLog
  id: IPhysicalLog
  parent: System.Fabric.Data.Log
  children:
  - System.Fabric.Data.Log.IPhysicalLog.Abort
  - System.Fabric.Data.Log.IPhysicalLog.AssignAliasAsync(System.Guid,System.String,System.Threading.CancellationToken)
  - System.Fabric.Data.Log.IPhysicalLog.CloseAsync(System.Threading.CancellationToken)
  - System.Fabric.Data.Log.IPhysicalLog.CreateLogicalLogAsync(System.Guid,System.String,System.String,System.Security.AccessControl.FileSecurity,System.Int64,System.UInt32,System.Fabric.Data.Log.LogManager.LogCreationFlags,System.String,System.Threading.CancellationToken)
  - System.Fabric.Data.Log.IPhysicalLog.DeleteLogicalLogAsync(System.Guid,System.Threading.CancellationToken)
  - System.Fabric.Data.Log.IPhysicalLog.IsFunctional
  - System.Fabric.Data.Log.IPhysicalLog.OpenLogicalLogAsync(System.Guid,System.String,System.Threading.CancellationToken)
  - System.Fabric.Data.Log.IPhysicalLog.RecoverAliasLogsAsync(System.String,System.String,System.String,System.Threading.CancellationToken)
  - System.Fabric.Data.Log.IPhysicalLog.RemoveAliasAsync(System.String,System.Threading.CancellationToken)
  - System.Fabric.Data.Log.IPhysicalLog.ReplaceAliasLogsAsync(System.String,System.String,System.String,System.Threading.CancellationToken)
  - System.Fabric.Data.Log.IPhysicalLog.ResolveAliasAsync(System.String,System.Threading.CancellationToken)
  langs:
  - csharp
  - vb
  name: IPhysicalLog
  nameWithType: IPhysicalLog
  fullName: System.Fabric.Data.Log.IPhysicalLog
  type: Interface
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Impl/Log/Interfaces.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: IPhysicalLog
    path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Impl/Log/Interfaces.cs
    startLine: 162
  assemblies:
  - Microsoft.ServiceFabric.Data.Impl
  namespace: System.Fabric.Data.Log
  summary: "\nAn open IPhysicalLog instance is a handle abstraction that provides access and control over the corresponding \nsystem resources that make up a container for multiple separate logical log instances. \n\nOnce an application gets a reference to an opened IPhysicalLog instance, the backing physical log is \nalready mounted (recovered) and available. \n"
  example: []
  syntax:
    content: 'public interface IPhysicalLog : IDisposable'
    content.vb: >-
      Public Interface IPhysicalLog
          Inherits IDisposable
  inheritedMembers:
  - System.IDisposable.Dispose
  extensionMethods:
  - System.Fabric.Data.Log.IPhysicalLog.System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: System.Fabric.Data.Log.IPhysicalLog.CloseAsync(System.Threading.CancellationToken)
  commentId: M:System.Fabric.Data.Log.IPhysicalLog.CloseAsync(System.Threading.CancellationToken)
  id: CloseAsync(System.Threading.CancellationToken)
  parent: System.Fabric.Data.Log.IPhysicalLog
  langs:
  - csharp
  - vb
  name: CloseAsync(CancellationToken)
  nameWithType: IPhysicalLog.CloseAsync(CancellationToken)
  fullName: System.Fabric.Data.Log.IPhysicalLog.CloseAsync(System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Impl/Log/Interfaces.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: CloseAsync
    path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Impl/Log/Interfaces.cs
    startLine: 171
  assemblies:
  - Microsoft.ServiceFabric.Data.Impl
  namespace: System.Fabric.Data.Log
  summary: "\nClose a current handle's access to a physical log resource\n\nNOTE: Any currently opened ILogicalLog instances that were created/opened thru a current IPhysicalLog\n   will remain open - they have an independent life-span once created.\n"
  example: []
  syntax:
    content: Task CloseAsync(CancellationToken cancellationToken)
    content.vb: Function CloseAsync(cancellationToken As CancellationToken) As Task
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: Used to cancel the CloseAsync operation
    return:
      type: System.Threading.Tasks.Task
  overload: System.Fabric.Data.Log.IPhysicalLog.CloseAsync*
- uid: System.Fabric.Data.Log.IPhysicalLog.Abort
  commentId: M:System.Fabric.Data.Log.IPhysicalLog.Abort
  id: Abort
  parent: System.Fabric.Data.Log.IPhysicalLog
  langs:
  - csharp
  - vb
  name: Abort()
  nameWithType: IPhysicalLog.Abort()
  fullName: System.Fabric.Data.Log.IPhysicalLog.Abort()
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Impl/Log/Interfaces.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: Abort
    path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Impl/Log/Interfaces.cs
    startLine: 180
  assemblies:
  - Microsoft.ServiceFabric.Data.Impl
  namespace: System.Fabric.Data.Log
  summary: "\nAbort the physical log handle instance synchronously - will occur automatically thru GC if CloseAsync is\nnot called\n\nNOTE: Any currently opened ILogicalLog instances that were created/opened thru a current IPhysicalLog\n   will remain open - they have an independent life-span once created.\n"
  example: []
  syntax:
    content: void Abort()
    content.vb: Sub Abort
  overload: System.Fabric.Data.Log.IPhysicalLog.Abort*
- uid: System.Fabric.Data.Log.IPhysicalLog.IsFunctional
  commentId: P:System.Fabric.Data.Log.IPhysicalLog.IsFunctional
  id: IsFunctional
  parent: System.Fabric.Data.Log.IPhysicalLog
  langs:
  - csharp
  - vb
  name: IsFunctional
  nameWithType: IPhysicalLog.IsFunctional
  fullName: System.Fabric.Data.Log.IPhysicalLog.IsFunctional
  type: Property
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Impl/Log/Interfaces.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: IsFunctional
    path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Impl/Log/Interfaces.cs
    startLine: 186
  assemblies:
  - Microsoft.ServiceFabric.Data.Impl
  namespace: System.Fabric.Data.Log
  summary: "\nDetermine if the underlying resources that contain the data of a physical log are in a known-good\nstate\n"
  example: []
  syntax:
    content: bool IsFunctional { get; }
    content.vb: ReadOnly Property IsFunctional As Boolean
    parameters: []
    return:
      type: System.Boolean
  overload: System.Fabric.Data.Log.IPhysicalLog.IsFunctional*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: System.Fabric.Data.Log.IPhysicalLog.CreateLogicalLogAsync(System.Guid,System.String,System.String,System.Security.AccessControl.FileSecurity,System.Int64,System.UInt32,System.Fabric.Data.Log.LogManager.LogCreationFlags,System.String,System.Threading.CancellationToken)
  commentId: M:System.Fabric.Data.Log.IPhysicalLog.CreateLogicalLogAsync(System.Guid,System.String,System.String,System.Security.AccessControl.FileSecurity,System.Int64,System.UInt32,System.Fabric.Data.Log.LogManager.LogCreationFlags,System.String,System.Threading.CancellationToken)
  id: CreateLogicalLogAsync(System.Guid,System.String,System.String,System.Security.AccessControl.FileSecurity,System.Int64,System.UInt32,System.Fabric.Data.Log.LogManager.LogCreationFlags,System.String,System.Threading.CancellationToken)
  parent: System.Fabric.Data.Log.IPhysicalLog
  langs:
  - csharp
  - vb
  name: CreateLogicalLogAsync(Guid, String, String, FileSecurity, Int64, UInt32, LogManager.LogCreationFlags, String, CancellationToken)
  nameWithType: IPhysicalLog.CreateLogicalLogAsync(Guid, String, String, FileSecurity, Int64, UInt32, LogManager.LogCreationFlags, String, CancellationToken)
  fullName: System.Fabric.Data.Log.IPhysicalLog.CreateLogicalLogAsync(System.Guid, System.String, System.String, System.Security.AccessControl.FileSecurity, System.Int64, System.UInt32, System.Fabric.Data.Log.LogManager.LogCreationFlags, System.String, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Impl/Log/Interfaces.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: CreateLogicalLogAsync
    path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Impl/Log/Interfaces.cs
    startLine: 214
  assemblies:
  - Microsoft.ServiceFabric.Data.Impl
  namespace: System.Fabric.Data.Log
  summary: "\nCreate a new logical log\n\nKnown Exceptions:\n\nSystem.Fabric.FabricException\nSystem.IOException\nSystem.IO.DirectoryNotFoundException\nSystem.IO.DriveNotFoundException\nSystem.IO.FileNotFoundException\nSystem.IO.PathTooLongException\nUnauthorizedAccessException\nFabricObjectClosedException\n\n"
  example: []
  syntax:
    content: Task<ILogicalLog> CreateLogicalLogAsync(Guid logicalLogId, string optionalLogStreamAlias, string path, FileSecurity optionalSecurityInfo, long maximumSize, uint maximumBlockSize, LogManager.LogCreationFlags creationFlags, string traceType, CancellationToken cancellationToken)
    content.vb: Function CreateLogicalLogAsync(logicalLogId As Guid, optionalLogStreamAlias As String, path As String, optionalSecurityInfo As FileSecurity, maximumSize As Long, maximumBlockSize As UInteger, creationFlags As LogManager.LogCreationFlags, traceType As String, cancellationToken As CancellationToken) As Task(Of ILogicalLog)
    parameters:
    - id: logicalLogId
      type: System.Guid
      description: Supplies the logical log's unique ID (Guid)
    - id: optionalLogStreamAlias
      type: System.String
      description: "An optional string that may serve as an alias for \nthe logicalLogId"
    - id: path
      type: System.String
      description: Required location of the logical log's private store
    - id: optionalSecurityInfo
      type: System.Security.AccessControl.FileSecurity
      description: Contains the security information to associate with the logical log being created
    - id: maximumSize
      type: System.Int64
      description: Supplies the maximum physical size of all record data and metadata that can be stored in the logical log
    - id: maximumBlockSize
      type: System.UInt32
      description: Supplies the default maximum size of record data buffered and written to the backing logical log store
    - id: creationFlags
      type: System.Fabric.Data.Log.LogManager.LogCreationFlags
      description: ''
    - id: traceType
      type: System.String
      description: Supplies the type string to use when tracing
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: Used to cancel the CreateLogicalLogAsync operation
    return:
      type: System.Threading.Tasks.Task{System.Fabric.Data.Log.ILogicalLog}
      description: The open ILogicalLog (handle) used to further manipulate the related logical log resources
  overload: System.Fabric.Data.Log.IPhysicalLog.CreateLogicalLogAsync*
- uid: System.Fabric.Data.Log.IPhysicalLog.OpenLogicalLogAsync(System.Guid,System.String,System.Threading.CancellationToken)
  commentId: M:System.Fabric.Data.Log.IPhysicalLog.OpenLogicalLogAsync(System.Guid,System.String,System.Threading.CancellationToken)
  id: OpenLogicalLogAsync(System.Guid,System.String,System.Threading.CancellationToken)
  parent: System.Fabric.Data.Log.IPhysicalLog
  langs:
  - csharp
  - vb
  name: OpenLogicalLogAsync(Guid, String, CancellationToken)
  nameWithType: IPhysicalLog.OpenLogicalLogAsync(Guid, String, CancellationToken)
  fullName: System.Fabric.Data.Log.IPhysicalLog.OpenLogicalLogAsync(System.Guid, System.String, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Impl/Log/Interfaces.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: OpenLogicalLogAsync
    path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Impl/Log/Interfaces.cs
    startLine: 246
  assemblies:
  - Microsoft.ServiceFabric.Data.Impl
  namespace: System.Fabric.Data.Log
  summary: "\nOpen an existing logical log\n\nKnown Exceptions:\n\nSystem.Fabric.FabricException\nSystem.IOException\nSystem.IO.DirectoryNotFoundException\nSystem.IO.DriveNotFoundException\nSystem.IO.FileNotFoundException\nSystem.IO.PathTooLongException\nUnauthorizedAccessException\nFabricObjectClosedException\n\nNOTE: A given logical log may only be opened through one IPhysicalLog instance at a time - and only\n  once on that IPhysicalLog (i.e. open is exclusive).\n"
  example: []
  syntax:
    content: Task<ILogicalLog> OpenLogicalLogAsync(Guid logicalLogId, string traceType, CancellationToken cancellationToken)
    content.vb: Function OpenLogicalLogAsync(logicalLogId As Guid, traceType As String, cancellationToken As CancellationToken) As Task(Of ILogicalLog)
    parameters:
    - id: logicalLogId
      type: System.Guid
      description: Supplies the logical log's unique ID (Guid)
    - id: traceType
      type: System.String
      description: Supplies the type string to use when tracing
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: Used to cancel the OpenLogicalLogAsync operation
    return:
      type: System.Threading.Tasks.Task{System.Fabric.Data.Log.ILogicalLog}
      description: The open ILogicalLog (handle) used to further manipulate the related logical log resources
  overload: System.Fabric.Data.Log.IPhysicalLog.OpenLogicalLogAsync*
- uid: System.Fabric.Data.Log.IPhysicalLog.DeleteLogicalLogAsync(System.Guid,System.Threading.CancellationToken)
  commentId: M:System.Fabric.Data.Log.IPhysicalLog.DeleteLogicalLogAsync(System.Guid,System.Threading.CancellationToken)
  id: DeleteLogicalLogAsync(System.Guid,System.Threading.CancellationToken)
  parent: System.Fabric.Data.Log.IPhysicalLog
  langs:
  - csharp
  - vb
  name: DeleteLogicalLogAsync(Guid, CancellationToken)
  nameWithType: IPhysicalLog.DeleteLogicalLogAsync(Guid, CancellationToken)
  fullName: System.Fabric.Data.Log.IPhysicalLog.DeleteLogicalLogAsync(System.Guid, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Impl/Log/Interfaces.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: DeleteLogicalLogAsync
    path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Impl/Log/Interfaces.cs
    startLine: 265
  assemblies:
  - Microsoft.ServiceFabric.Data.Impl
  namespace: System.Fabric.Data.Log
  summary: "\nDelete an existing logical log\n\nKnown Exceptions:\n\nSystem.Fabric.FabricException\nSystem.IOException\nSystem.IO.DirectoryNotFoundException\nSystem.IO.DriveNotFoundException\nSystem.IO.FileNotFoundException\nSystem.IO.PathTooLongException\nFabricObjectClosedException\n\nNOTE: This operation is only valid iif the logical log is not currently open.\n"
  example: []
  syntax:
    content: Task DeleteLogicalLogAsync(Guid logicalLogId, CancellationToken cancellationToken)
    content.vb: Function DeleteLogicalLogAsync(logicalLogId As Guid, cancellationToken As CancellationToken) As Task
    parameters:
    - id: logicalLogId
      type: System.Guid
      description: Supplies the logical log's unique ID (Guid)
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: Used to cancel the DeleteLogicalLogAsync operation
    return:
      type: System.Threading.Tasks.Task
  overload: System.Fabric.Data.Log.IPhysicalLog.DeleteLogicalLogAsync*
- uid: System.Fabric.Data.Log.IPhysicalLog.AssignAliasAsync(System.Guid,System.String,System.Threading.CancellationToken)
  commentId: M:System.Fabric.Data.Log.IPhysicalLog.AssignAliasAsync(System.Guid,System.String,System.Threading.CancellationToken)
  id: AssignAliasAsync(System.Guid,System.String,System.Threading.CancellationToken)
  parent: System.Fabric.Data.Log.IPhysicalLog
  langs:
  - csharp
  - vb
  name: AssignAliasAsync(Guid, String, CancellationToken)
  nameWithType: IPhysicalLog.AssignAliasAsync(Guid, String, CancellationToken)
  fullName: System.Fabric.Data.Log.IPhysicalLog.AssignAliasAsync(System.Guid, System.String, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Impl/Log/Interfaces.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: AssignAliasAsync
    path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Impl/Log/Interfaces.cs
    startLine: 285
  assemblies:
  - Microsoft.ServiceFabric.Data.Impl
  namespace: System.Fabric.Data.Log
  summary: "\nCreate a named alias for a given logical log\n\nThis method asynchronously assigns a string that serves as an alias to the logicalLogId. The alias can be\nresolved to the logicalLogId Guid using the ResolveAliasAsync() method. The alias can be removed using the \nRemoveAliasAsync() method.\n\nIf the stream already has an alias that alias is overwritten.\n\nKnown Exceptions:\n\nSystem.Fabric.FabricException\nFabricObjectClosedException\n\n"
  example: []
  syntax:
    content: Task AssignAliasAsync(Guid logicalLogId, string alias, CancellationToken cancellationToken)
    content.vb: Function AssignAliasAsync(logicalLogId As Guid, alias As String, cancellationToken As CancellationToken) As Task
    parameters:
    - id: logicalLogId
      type: System.Guid
      description: Supplies the logical log's unique ID (Guid)
    - id: alias
      type: System.String
      description: Alias to associate with the Log stream id
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: Used to cancel the AssignAliasAsync operation
    return:
      type: System.Threading.Tasks.Task
  overload: System.Fabric.Data.Log.IPhysicalLog.AssignAliasAsync*
- uid: System.Fabric.Data.Log.IPhysicalLog.ResolveAliasAsync(System.String,System.Threading.CancellationToken)
  commentId: M:System.Fabric.Data.Log.IPhysicalLog.ResolveAliasAsync(System.String,System.Threading.CancellationToken)
  id: ResolveAliasAsync(System.String,System.Threading.CancellationToken)
  parent: System.Fabric.Data.Log.IPhysicalLog
  langs:
  - csharp
  - vb
  name: ResolveAliasAsync(String, CancellationToken)
  nameWithType: IPhysicalLog.ResolveAliasAsync(String, CancellationToken)
  fullName: System.Fabric.Data.Log.IPhysicalLog.ResolveAliasAsync(System.String, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Impl/Log/Interfaces.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: ResolveAliasAsync
    path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Impl/Log/Interfaces.cs
    startLine: 300
  assemblies:
  - Microsoft.ServiceFabric.Data.Impl
  namespace: System.Fabric.Data.Log
  summary: "\nResolves a supplied alias to the corresponding logicalLogId Guid if that alias had been previously \nset via the AssignAliasAsync() or CreateLogStreamAsync() methods.\n\nKnown Exceptions:\n\nSystem.Fabric.FabricException\nFabricObjectClosedException\n\n"
  example: []
  syntax:
    content: Task<Guid> ResolveAliasAsync(string alias, CancellationToken cancellationToken)
    content.vb: Function ResolveAliasAsync(alias As String, cancellationToken As CancellationToken) As Task(Of Guid)
    parameters:
    - id: alias
      type: System.String
      description: Alias associated with the Log stream id
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: Used to cancel the ResolveAliasAsync operation
    return:
      type: System.Threading.Tasks.Task{System.Guid}
      description: log stream id associated with the alias
  overload: System.Fabric.Data.Log.IPhysicalLog.ResolveAliasAsync*
- uid: System.Fabric.Data.Log.IPhysicalLog.RemoveAliasAsync(System.String,System.Threading.CancellationToken)
  commentId: M:System.Fabric.Data.Log.IPhysicalLog.RemoveAliasAsync(System.String,System.Threading.CancellationToken)
  id: RemoveAliasAsync(System.String,System.Threading.CancellationToken)
  parent: System.Fabric.Data.Log.IPhysicalLog
  langs:
  - csharp
  - vb
  name: RemoveAliasAsync(String, CancellationToken)
  nameWithType: IPhysicalLog.RemoveAliasAsync(String, CancellationToken)
  fullName: System.Fabric.Data.Log.IPhysicalLog.RemoveAliasAsync(System.String, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Impl/Log/Interfaces.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: RemoveAliasAsync
    path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Impl/Log/Interfaces.cs
    startLine: 313
  assemblies:
  - Microsoft.ServiceFabric.Data.Impl
  namespace: System.Fabric.Data.Log
  summary: "\nRemoves an alias to the logicalLogId binding\n\nKnown Exceptions:\n\nSystem.Fabric.FabricException\nFabricObjectClosedException\n\n"
  example: []
  syntax:
    content: Task RemoveAliasAsync(string alias, CancellationToken cancellationToken)
    content.vb: Function RemoveAliasAsync(alias As String, cancellationToken As CancellationToken) As Task
    parameters:
    - id: alias
      type: System.String
      description: Alias associated with the Log stream id
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: Used to cancel the RemoveAliasAsync operation
    return:
      type: System.Threading.Tasks.Task
  overload: System.Fabric.Data.Log.IPhysicalLog.RemoveAliasAsync*
- uid: System.Fabric.Data.Log.IPhysicalLog.ReplaceAliasLogsAsync(System.String,System.String,System.String,System.Threading.CancellationToken)
  commentId: M:System.Fabric.Data.Log.IPhysicalLog.ReplaceAliasLogsAsync(System.String,System.String,System.String,System.Threading.CancellationToken)
  id: ReplaceAliasLogsAsync(System.String,System.String,System.String,System.Threading.CancellationToken)
  parent: System.Fabric.Data.Log.IPhysicalLog
  langs:
  - csharp
  - vb
  name: ReplaceAliasLogsAsync(String, String, String, CancellationToken)
  nameWithType: IPhysicalLog.ReplaceAliasLogsAsync(String, String, String, CancellationToken)
  fullName: System.Fabric.Data.Log.IPhysicalLog.ReplaceAliasLogsAsync(System.String, System.String, System.String, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Impl/Log/Interfaces.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: ReplaceAliasLogsAsync
    path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Impl/Log/Interfaces.cs
    startLine: 336
  assemblies:
  - Microsoft.ServiceFabric.Data.Impl
  namespace: System.Fabric.Data.Log
  summary: "\nReplaces the associated log for an alias (logAliasName) with another log (sourceLogAliasName) \nsetting a third log alias (backupLogAliasName) to the existing Guid - deleting any old \nbackupLogAliasName log and removing sourceLogAliasName. \n\nKnown Exceptions:\n\nSystem.Fabric.FabricException\nFabricObjectClosedException\nSystem.IOException\nSystem.IO.DirectoryNotFoundException\nSystem.IO.DriveNotFoundException\nSystem.IO.FileNotFoundException\nSystem.IO.PathTooLongException\nFabricObjectClosedException\n\n"
  example: []
  syntax:
    content: Task ReplaceAliasLogsAsync(string sourceLogAliasName, string logAliasName, string backupLogAliasName, CancellationToken cancellationToken)
    content.vb: Function ReplaceAliasLogsAsync(sourceLogAliasName As String, logAliasName As String, backupLogAliasName As String, cancellationToken As CancellationToken) As Task
    parameters:
    - id: sourceLogAliasName
      type: System.String
      description: alias log to become assigned to logAliasName
    - id: logAliasName
      type: System.String
      description: subject alias name
    - id: backupLogAliasName
      type: System.String
      description: old contents of logAliasName before the operation
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: Used to cancel the ReplaceAliasLogsAsync operation
    return:
      type: System.Threading.Tasks.Task
  overload: System.Fabric.Data.Log.IPhysicalLog.ReplaceAliasLogsAsync*
- uid: System.Fabric.Data.Log.IPhysicalLog.RecoverAliasLogsAsync(System.String,System.String,System.String,System.Threading.CancellationToken)
  commentId: M:System.Fabric.Data.Log.IPhysicalLog.RecoverAliasLogsAsync(System.String,System.String,System.String,System.Threading.CancellationToken)
  id: RecoverAliasLogsAsync(System.String,System.String,System.String,System.Threading.CancellationToken)
  parent: System.Fabric.Data.Log.IPhysicalLog
  langs:
  - csharp
  - vb
  name: RecoverAliasLogsAsync(String, String, String, CancellationToken)
  nameWithType: IPhysicalLog.RecoverAliasLogsAsync(String, String, String, CancellationToken)
  fullName: System.Fabric.Data.Log.IPhysicalLog.RecoverAliasLogsAsync(System.String, System.String, System.String, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Impl/Log/Interfaces.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: RecoverAliasLogsAsync
    path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Impl/Log/Interfaces.cs
    startLine: 355
  assemblies:
  - Microsoft.ServiceFabric.Data.Impl
  namespace: System.Fabric.Data.Log
  summary: "\nRecovers and cleans up after corresponding ReplaceAliasLogsAsync() calls\n\nKnown Exceptions:\n\nSystem.Fabric.FabricException\nFabricObjectClosedException\n\n"
  example: []
  syntax:
    content: Task<Guid> RecoverAliasLogsAsync(string sourceLogAliasName, string logAliasName, string backupLogAliasName, CancellationToken cancellationToken)
    content.vb: Function RecoverAliasLogsAsync(sourceLogAliasName As String, logAliasName As String, backupLogAliasName As String, cancellationToken As CancellationToken) As Task(Of Guid)
    parameters:
    - id: sourceLogAliasName
      type: System.String
      description: same value passed to corresponding ReplaceAliasLogsAsync() call
    - id: logAliasName
      type: System.String
      description: same value passed to corresponding ReplaceAliasLogsAsync() call
    - id: backupLogAliasName
      type: System.String
      description: same value passed to corresponding ReplaceAliasLogsAsync() call
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: Used to cancel the RecoverAliasLogsAsync operation
    return:
      type: System.Threading.Tasks.Task{System.Guid}
  overload: System.Fabric.Data.Log.IPhysicalLog.RecoverAliasLogsAsync*
references:
- uid: System.Fabric.Data.Log
  commentId: N:System.Fabric.Data.Log
  isExternal: false
  name: System.Fabric.Data.Log
  nameWithType: System.Fabric.Data.Log
  fullName: System.Fabric.Data.Log
- uid: System.IDisposable.Dispose
  commentId: M:System.IDisposable.Dispose
  parent: System.IDisposable
  isExternal: true
  name: Dispose()
  nameWithType: IDisposable.Dispose()
  fullName: System.IDisposable.Dispose()
  spec.csharp:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.Data.Log.IPhysicalLog.System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
  commentId: M:System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  parent: System.Fabric.Messaging.Stream.ByteArraySerializer
  definition: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  name: Serialize<IPhysicalLog>()
  nameWithType: ByteArraySerializer.Serialize<IPhysicalLog>()
  fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<System.Fabric.Data.Log.IPhysicalLog>()
  nameWithType.vb: ByteArraySerializer.Serialize(Of IPhysicalLog)()
  fullname.vb: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of System.Fabric.Data.Log.IPhysicalLog)()
  name.vb: Serialize(Of IPhysicalLog)()
  spec.csharp:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
    name: Serialize<IPhysicalLog>
    nameWithType: ByteArraySerializer.Serialize<IPhysicalLog>
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<System.Fabric.Data.Log.IPhysicalLog>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
    name: Serialize(Of IPhysicalLog)
    nameWithType: ByteArraySerializer.Serialize(Of IPhysicalLog)
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of System.Fabric.Data.Log.IPhysicalLog)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  commentId: M:System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  isExternal: false
  name: Serialize<T>(T)
  nameWithType: ByteArraySerializer.Serialize<T>(T)
  fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<T>(T)
  nameWithType.vb: ByteArraySerializer.Serialize(Of T)(T)
  fullname.vb: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of T)(T)
  name.vb: Serialize(Of T)(T)
  spec.csharp:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
    name: Serialize<T>
    nameWithType: ByteArraySerializer.Serialize<T>
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
    name: Serialize(Of T)
    nameWithType: ByteArraySerializer.Serialize(Of T)
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.Messaging.Stream.ByteArraySerializer
  commentId: T:System.Fabric.Messaging.Stream.ByteArraySerializer
  parent: System.Fabric.Messaging.Stream
  isExternal: false
  name: ByteArraySerializer
  nameWithType: ByteArraySerializer
  fullName: System.Fabric.Messaging.Stream.ByteArraySerializer
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Fabric.Messaging.Stream
  commentId: N:System.Fabric.Messaging.Stream
  isExternal: false
  name: System.Fabric.Messaging.Stream
  nameWithType: System.Fabric.Messaging.Stream
  fullName: System.Fabric.Messaging.Stream
- uid: System.Fabric.Data.Log.IPhysicalLog.CloseAsync*
  commentId: Overload:System.Fabric.Data.Log.IPhysicalLog.CloseAsync
  isExternal: false
  name: CloseAsync
  nameWithType: IPhysicalLog.CloseAsync
  fullName: System.Fabric.Data.Log.IPhysicalLog.CloseAsync
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: false
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: System.Fabric.Data.Log.IPhysicalLog.Abort*
  commentId: Overload:System.Fabric.Data.Log.IPhysicalLog.Abort
  isExternal: false
  name: Abort
  nameWithType: IPhysicalLog.Abort
  fullName: System.Fabric.Data.Log.IPhysicalLog.Abort
- uid: System.Fabric.Data.Log.IPhysicalLog.IsFunctional*
  commentId: Overload:System.Fabric.Data.Log.IPhysicalLog.IsFunctional
  isExternal: false
  name: IsFunctional
  nameWithType: IPhysicalLog.IsFunctional
  fullName: System.Fabric.Data.Log.IPhysicalLog.IsFunctional
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Fabric.Data.Log.IPhysicalLog.CreateLogicalLogAsync*
  commentId: Overload:System.Fabric.Data.Log.IPhysicalLog.CreateLogicalLogAsync
  isExternal: false
  name: CreateLogicalLogAsync
  nameWithType: IPhysicalLog.CreateLogicalLogAsync
  fullName: System.Fabric.Data.Log.IPhysicalLog.CreateLogicalLogAsync
- uid: System.Guid
  commentId: T:System.Guid
  parent: System
  isExternal: true
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Security.AccessControl.FileSecurity
  commentId: T:System.Security.AccessControl.FileSecurity
  parent: System.Security.AccessControl
  isExternal: true
  name: FileSecurity
  nameWithType: FileSecurity
  fullName: System.Security.AccessControl.FileSecurity
- uid: System.Int64
  commentId: T:System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.UInt32
  commentId: T:System.UInt32
  parent: System
  isExternal: true
  name: UInt32
  nameWithType: UInt32
  fullName: System.UInt32
- uid: System.Fabric.Data.Log.LogManager.LogCreationFlags
  commentId: T:System.Fabric.Data.Log.LogManager.LogCreationFlags
  parent: System.Fabric.Data.Log
  isExternal: false
  name: LogManager.LogCreationFlags
  nameWithType: LogManager.LogCreationFlags
  fullName: System.Fabric.Data.Log.LogManager.LogCreationFlags
- uid: System.Threading.Tasks.Task{System.Fabric.Data.Log.ILogicalLog}
  commentId: T:System.Threading.Tasks.Task{System.Fabric.Data.Log.ILogicalLog}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<ILogicalLog>
  nameWithType: Task<ILogicalLog>
  fullName: System.Threading.Tasks.Task<System.Fabric.Data.Log.ILogicalLog>
  nameWithType.vb: Task(Of ILogicalLog)
  fullname.vb: System.Threading.Tasks.Task(Of System.Fabric.Data.Log.ILogicalLog)
  name.vb: Task(Of ILogicalLog)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Fabric.Data.Log.ILogicalLog
    name: ILogicalLog
    nameWithType: ILogicalLog
    fullName: System.Fabric.Data.Log.ILogicalLog
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Fabric.Data.Log.ILogicalLog
    name: ILogicalLog
    nameWithType: ILogicalLog
    fullName: System.Fabric.Data.Log.ILogicalLog
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Security.AccessControl
  commentId: N:System.Security.AccessControl
  isExternal: false
  name: System.Security.AccessControl
  nameWithType: System.Security.AccessControl
  fullName: System.Security.AccessControl
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullname.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.Data.Log.IPhysicalLog.OpenLogicalLogAsync*
  commentId: Overload:System.Fabric.Data.Log.IPhysicalLog.OpenLogicalLogAsync
  isExternal: false
  name: OpenLogicalLogAsync
  nameWithType: IPhysicalLog.OpenLogicalLogAsync
  fullName: System.Fabric.Data.Log.IPhysicalLog.OpenLogicalLogAsync
- uid: System.Fabric.Data.Log.IPhysicalLog.DeleteLogicalLogAsync*
  commentId: Overload:System.Fabric.Data.Log.IPhysicalLog.DeleteLogicalLogAsync
  isExternal: false
  name: DeleteLogicalLogAsync
  nameWithType: IPhysicalLog.DeleteLogicalLogAsync
  fullName: System.Fabric.Data.Log.IPhysicalLog.DeleteLogicalLogAsync
- uid: System.Fabric.Data.Log.IPhysicalLog.AssignAliasAsync*
  commentId: Overload:System.Fabric.Data.Log.IPhysicalLog.AssignAliasAsync
  isExternal: false
  name: AssignAliasAsync
  nameWithType: IPhysicalLog.AssignAliasAsync
  fullName: System.Fabric.Data.Log.IPhysicalLog.AssignAliasAsync
- uid: System.Fabric.Data.Log.IPhysicalLog.ResolveAliasAsync*
  commentId: Overload:System.Fabric.Data.Log.IPhysicalLog.ResolveAliasAsync
  isExternal: false
  name: ResolveAliasAsync
  nameWithType: IPhysicalLog.ResolveAliasAsync
  fullName: System.Fabric.Data.Log.IPhysicalLog.ResolveAliasAsync
- uid: System.Threading.Tasks.Task{System.Guid}
  commentId: T:System.Threading.Tasks.Task{System.Guid}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Guid>
  nameWithType: Task<Guid>
  fullName: System.Threading.Tasks.Task<System.Guid>
  nameWithType.vb: Task(Of Guid)
  fullname.vb: System.Threading.Tasks.Task(Of System.Guid)
  name.vb: Task(Of Guid)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.Data.Log.IPhysicalLog.RemoveAliasAsync*
  commentId: Overload:System.Fabric.Data.Log.IPhysicalLog.RemoveAliasAsync
  isExternal: false
  name: RemoveAliasAsync
  nameWithType: IPhysicalLog.RemoveAliasAsync
  fullName: System.Fabric.Data.Log.IPhysicalLog.RemoveAliasAsync
- uid: System.Fabric.Data.Log.IPhysicalLog.ReplaceAliasLogsAsync*
  commentId: Overload:System.Fabric.Data.Log.IPhysicalLog.ReplaceAliasLogsAsync
  isExternal: false
  name: ReplaceAliasLogsAsync
  nameWithType: IPhysicalLog.ReplaceAliasLogsAsync
  fullName: System.Fabric.Data.Log.IPhysicalLog.ReplaceAliasLogsAsync
- uid: System.Fabric.Data.Log.IPhysicalLog.RecoverAliasLogsAsync*
  commentId: Overload:System.Fabric.Data.Log.IPhysicalLog.RecoverAliasLogsAsync
  isExternal: false
  name: RecoverAliasLogsAsync
  nameWithType: IPhysicalLog.RecoverAliasLogsAsync
  fullName: System.Fabric.Data.Log.IPhysicalLog.RecoverAliasLogsAsync
