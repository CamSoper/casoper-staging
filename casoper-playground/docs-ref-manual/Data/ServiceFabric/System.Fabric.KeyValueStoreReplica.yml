### YamlMime:ManagedReference
items:
- uid: System.Fabric.KeyValueStoreReplica
  commentId: T:System.Fabric.KeyValueStoreReplica
  id: KeyValueStoreReplica
  parent: System.Fabric
  children:
  - System.Fabric.KeyValueStoreReplica.#ctor(System.String)
  - System.Fabric.KeyValueStoreReplica.#ctor(System.String,System.Fabric.LocalStoreSettings)
  - System.Fabric.KeyValueStoreReplica.#ctor(System.String,System.Fabric.LocalStoreSettings,System.Fabric.ReplicatorSettings)
  - System.Fabric.KeyValueStoreReplica.#ctor(System.String,System.Fabric.LocalStoreSettings,System.Fabric.ReplicatorSettings,System.Fabric.KeyValueStoreReplica.SecondaryNotificationMode)
  - System.Fabric.KeyValueStoreReplica.#ctor(System.String,System.Fabric.LocalStoreSettings,System.Fabric.ReplicatorSettings,System.Fabric.KeyValueStoreReplicaSettings)
  - System.Fabric.KeyValueStoreReplica.#ctor(System.String,System.Fabric.ReplicatorSettings)
  - System.Fabric.KeyValueStoreReplica.Abort
  - System.Fabric.KeyValueStoreReplica.Add(System.Fabric.TransactionBase,System.String,System.Byte[])
  - System.Fabric.KeyValueStoreReplica.Backup(System.String)
  - System.Fabric.KeyValueStoreReplica.BackupAsync(System.String,System.Fabric.StoreBackupOption,System.Func{System.Fabric.StoreBackupInfo,System.Threading.Tasks.Task{System.Boolean}})
  - System.Fabric.KeyValueStoreReplica.BackupAsync(System.String,System.Fabric.StoreBackupOption,System.Func{System.Fabric.StoreBackupInfo,System.Threading.Tasks.Task{System.Boolean}},System.Threading.CancellationToken)
  - System.Fabric.KeyValueStoreReplica.ChangeRoleAsync(System.Fabric.ReplicaRole,System.Threading.CancellationToken)
  - System.Fabric.KeyValueStoreReplica.CloseAsync(System.Threading.CancellationToken)
  - System.Fabric.KeyValueStoreReplica.Contains(System.Fabric.TransactionBase,System.String)
  - System.Fabric.KeyValueStoreReplica.CreateTransaction
  - System.Fabric.KeyValueStoreReplica.CreateTransaction(System.Fabric.KeyValueStoreTransactionSettings)
  - System.Fabric.KeyValueStoreReplica.DataLossReported
  - System.Fabric.KeyValueStoreReplica.Enumerate(System.Fabric.TransactionBase)
  - System.Fabric.KeyValueStoreReplica.Enumerate(System.Fabric.TransactionBase,System.String)
  - System.Fabric.KeyValueStoreReplica.Enumerate(System.Fabric.TransactionBase,System.String,System.Boolean)
  - System.Fabric.KeyValueStoreReplica.EnumerateMetadata(System.Fabric.TransactionBase)
  - System.Fabric.KeyValueStoreReplica.EnumerateMetadata(System.Fabric.TransactionBase,System.String)
  - System.Fabric.KeyValueStoreReplica.EnumerateMetadata(System.Fabric.TransactionBase,System.String,System.Boolean)
  - System.Fabric.KeyValueStoreReplica.Get(System.Fabric.TransactionBase,System.String)
  - System.Fabric.KeyValueStoreReplica.GetCurrentEpoch
  - System.Fabric.KeyValueStoreReplica.GetMetadata(System.Fabric.TransactionBase,System.String)
  - System.Fabric.KeyValueStoreReplica.GetValue(System.Fabric.TransactionBase,System.String)
  - System.Fabric.KeyValueStoreReplica.IgnoreSequenceNumberCheck
  - System.Fabric.KeyValueStoreReplica.Initialize(System.Fabric.StatefulServiceInitializationParameters)
  - System.Fabric.KeyValueStoreReplica.KeyValueStoreReplicaSettings
  - System.Fabric.KeyValueStoreReplica.LocalStoreSettings
  - System.Fabric.KeyValueStoreReplica.NotificationMode
  - System.Fabric.KeyValueStoreReplica.OnAbort
  - System.Fabric.KeyValueStoreReplica.OnChangeRoleAsync(System.Fabric.ReplicaRole,System.Threading.CancellationToken)
  - System.Fabric.KeyValueStoreReplica.OnCloseAsync(System.Threading.CancellationToken)
  - System.Fabric.KeyValueStoreReplica.OnCopyComplete(System.Fabric.KeyValueStoreEnumerator)
  - System.Fabric.KeyValueStoreReplica.OnDataLossAsync(System.Threading.CancellationToken)
  - System.Fabric.KeyValueStoreReplica.OnDatalossReported(System.EventArgs)
  - System.Fabric.KeyValueStoreReplica.OnInitialize(System.Fabric.StatefulServiceInitializationParameters)
  - System.Fabric.KeyValueStoreReplica.OnOpenAsync(System.Fabric.ReplicaOpenMode,System.Fabric.IStatefulServicePartition,System.Threading.CancellationToken)
  - System.Fabric.KeyValueStoreReplica.OnReplicationOperation(System.Collections.Generic.IEnumerator{System.Fabric.KeyValueStoreNotification})
  - System.Fabric.KeyValueStoreReplica.OpenAsync(System.Fabric.ReplicaOpenMode,System.Fabric.IStatefulServicePartition,System.Threading.CancellationToken)
  - System.Fabric.KeyValueStoreReplica.Remove(System.Fabric.TransactionBase,System.String)
  - System.Fabric.KeyValueStoreReplica.Remove(System.Fabric.TransactionBase,System.String,System.Int64)
  - System.Fabric.KeyValueStoreReplica.ReplicatorSettings
  - System.Fabric.KeyValueStoreReplica.Restore(System.String)
  - System.Fabric.KeyValueStoreReplica.RestoreAsync(System.String)
  - System.Fabric.KeyValueStoreReplica.RestoreAsync(System.String,System.Fabric.RestoreSettings,System.Threading.CancellationToken)
  - System.Fabric.KeyValueStoreReplica.RestoreAsync(System.String,System.Threading.CancellationToken)
  - System.Fabric.KeyValueStoreReplica.StoreName
  - System.Fabric.KeyValueStoreReplica.TryAdd(System.Fabric.TransactionBase,System.String,System.Byte[])
  - System.Fabric.KeyValueStoreReplica.TryGet(System.Fabric.TransactionBase,System.String)
  - System.Fabric.KeyValueStoreReplica.TryGetMetadata(System.Fabric.TransactionBase,System.String)
  - System.Fabric.KeyValueStoreReplica.TryGetValue(System.Fabric.TransactionBase,System.String)
  - System.Fabric.KeyValueStoreReplica.TryRemove(System.Fabric.TransactionBase,System.String)
  - System.Fabric.KeyValueStoreReplica.TryRemove(System.Fabric.TransactionBase,System.String,System.Int64)
  - System.Fabric.KeyValueStoreReplica.TryUpdate(System.Fabric.TransactionBase,System.String,System.Byte[])
  - System.Fabric.KeyValueStoreReplica.TryUpdate(System.Fabric.TransactionBase,System.String,System.Byte[],System.Int64)
  - System.Fabric.KeyValueStoreReplica.Update(System.Fabric.TransactionBase,System.String,System.Byte[])
  - System.Fabric.KeyValueStoreReplica.Update(System.Fabric.TransactionBase,System.String,System.Byte[],System.Int64)
  - System.Fabric.KeyValueStoreReplica.UpdateReplicatorSettings(System.Fabric.ReplicatorSettings)
  langs:
  - csharp
  - vb
  name: KeyValueStoreReplica
  nameWithType: KeyValueStoreReplica
  fullName: System.Fabric.KeyValueStoreReplica
  type: Class
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/KeyValueStoreReplica.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: KeyValueStoreReplica
    path: src/prod/src/managed/Api/src/System/Fabric/KeyValueStoreReplica.cs
    startLine: 22
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Provides a transactional, replicated, associative data storage component to service writers - ready for integration into any Service Fabric service.</p>\n"
  example: []
  syntax:
    content: 'public class KeyValueStoreReplica : IStatefulServiceReplica'
    content.vb: >-
      Public Class KeyValueStoreReplica
          Implements IStatefulServiceReplica
  inheritance:
  - System.Object
  implements:
  - System.Fabric.IStatefulServiceReplica
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  extensionMethods:
  - System.Fabric.KeyValueStoreReplica.System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: System.Fabric.KeyValueStoreReplica.IgnoreSequenceNumberCheck
  commentId: F:System.Fabric.KeyValueStoreReplica.IgnoreSequenceNumberCheck
  id: IgnoreSequenceNumberCheck
  parent: System.Fabric.KeyValueStoreReplica
  langs:
  - csharp
  - vb
  name: IgnoreSequenceNumberCheck
  nameWithType: KeyValueStoreReplica.IgnoreSequenceNumberCheck
  fullName: System.Fabric.KeyValueStoreReplica.IgnoreSequenceNumberCheck
  type: Field
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/KeyValueStoreReplica.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: IgnoreSequenceNumberCheck
    path: src/prod/src/managed/Api/src/System/Fabric/KeyValueStoreReplica.cs
    startLine: 99
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Indicates that sequence number checking should not occur.</p>\n"
  remarks: "\n<p>\nCan be used in APIs accepting a check sequence number parameter to indicate that sequence number checking\nshould not occur:\n<ul><li><xref href=\"System.Fabric.KeyValueStoreReplica.Update(System.Fabric.TransactionBase%2cSystem.String%2cSystem.Byte%5b%5d%2cSystem.Int64)\" data-throw-if-not-resolved=\"false\"></xref></li><li><xref href=\"System.Fabric.KeyValueStoreReplica.Remove(System.Fabric.TransactionBase%2cSystem.String%2cSystem.Int64)\" data-throw-if-not-resolved=\"false\"></xref></li><li><xref href=\"System.Fabric.KeyValueStoreReplica.TryUpdate(System.Fabric.TransactionBase%2cSystem.String%2cSystem.Byte%5b%5d%2cSystem.Int64)\" data-throw-if-not-resolved=\"false\"></xref></li><li><xref href=\"System.Fabric.KeyValueStoreReplica.TryRemove(System.Fabric.TransactionBase%2cSystem.String%2cSystem.Int64)\" data-throw-if-not-resolved=\"false\"></xref></li></ul>\n\nThis is equivalent to calling API overloads that do not have a check sequence number parameter:\n<ul><li><xref href=\"System.Fabric.KeyValueStoreReplica.Update(System.Fabric.TransactionBase%2cSystem.String%2cSystem.Byte%5b%5d)\" data-throw-if-not-resolved=\"false\"></xref></li><li><xref href=\"System.Fabric.KeyValueStoreReplica.Remove(System.Fabric.TransactionBase%2cSystem.String)\" data-throw-if-not-resolved=\"false\"></xref></li><li><xref href=\"System.Fabric.KeyValueStoreReplica.TryUpdate(System.Fabric.TransactionBase%2cSystem.String%2cSystem.Byte%5b%5d)\" data-throw-if-not-resolved=\"false\"></xref></li><li><xref href=\"System.Fabric.KeyValueStoreReplica.TryRemove(System.Fabric.TransactionBase%2cSystem.String)\" data-throw-if-not-resolved=\"false\"></xref></li></ul>\n</p>\n"
  example: []
  syntax:
    content: public const long IgnoreSequenceNumberCheck = 0L
    content.vb: Public Const IgnoreSequenceNumberCheck As Long = 0L
    return:
      type: System.Int64
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Fabric.KeyValueStoreReplica.#ctor(System.String)
  commentId: M:System.Fabric.KeyValueStoreReplica.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.Fabric.KeyValueStoreReplica
  langs:
  - csharp
  - vb
  name: KeyValueStoreReplica(String)
  nameWithType: KeyValueStoreReplica.KeyValueStoreReplica(String)
  fullName: System.Fabric.KeyValueStoreReplica.KeyValueStoreReplica(System.String)
  type: Constructor
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/KeyValueStoreReplica.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: .ctor
    path: src/prod/src/managed/Api/src/System/Fabric/KeyValueStoreReplica.cs
    startLine: 120
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Fabric.KeyValueStoreReplica\" data-throw-if-not-resolved=\"false\"></xref> class with the specified key/value store name.</p>\n"
  remarks: "\n<p>The store name should conform to valid filename characters.</p>\n"
  example: []
  syntax:
    content: public KeyValueStoreReplica(string storeName)
    content.vb: Public Sub New(storeName As String)
    parameters:
    - id: storeName
      type: System.String
      description: "\n<p>The name of the key/value store.</p>\n"
  overload: System.Fabric.KeyValueStoreReplica.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.KeyValueStoreReplica.#ctor(System.String,System.Fabric.LocalStoreSettings)
  commentId: M:System.Fabric.KeyValueStoreReplica.#ctor(System.String,System.Fabric.LocalStoreSettings)
  id: '#ctor(System.String,System.Fabric.LocalStoreSettings)'
  parent: System.Fabric.KeyValueStoreReplica
  langs:
  - csharp
  - vb
  name: KeyValueStoreReplica(String, LocalStoreSettings)
  nameWithType: KeyValueStoreReplica.KeyValueStoreReplica(String, LocalStoreSettings)
  fullName: System.Fabric.KeyValueStoreReplica.KeyValueStoreReplica(System.String, System.Fabric.LocalStoreSettings)
  type: Constructor
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/KeyValueStoreReplica.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: .ctor
    path: src/prod/src/managed/Api/src/System/Fabric/KeyValueStoreReplica.cs
    startLine: 134
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Fabric.KeyValueStoreReplica\" data-throw-if-not-resolved=\"false\"></xref> class with the specified key/value store name and local store settings.</p>\n"
  example: []
  syntax:
    content: public KeyValueStoreReplica(string storeName, LocalStoreSettings localStoreSettings)
    content.vb: Public Sub New(storeName As String, localStoreSettings As LocalStoreSettings)
    parameters:
    - id: storeName
      type: System.String
      description: "\n<p>The name of the key/value store.</p>\n"
    - id: localStoreSettings
      type: System.Fabric.LocalStoreSettings
      description: "\n<p>The optional settings for the local store.</p>\n"
  overload: System.Fabric.KeyValueStoreReplica.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.KeyValueStoreReplica.#ctor(System.String,System.Fabric.ReplicatorSettings)
  commentId: M:System.Fabric.KeyValueStoreReplica.#ctor(System.String,System.Fabric.ReplicatorSettings)
  id: '#ctor(System.String,System.Fabric.ReplicatorSettings)'
  parent: System.Fabric.KeyValueStoreReplica
  langs:
  - csharp
  - vb
  name: KeyValueStoreReplica(String, ReplicatorSettings)
  nameWithType: KeyValueStoreReplica.KeyValueStoreReplica(String, ReplicatorSettings)
  fullName: System.Fabric.KeyValueStoreReplica.KeyValueStoreReplica(System.String, System.Fabric.ReplicatorSettings)
  type: Constructor
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/KeyValueStoreReplica.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: .ctor
    path: src/prod/src/managed/Api/src/System/Fabric/KeyValueStoreReplica.cs
    startLine: 153
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Fabric.KeyValueStoreReplica\" data-throw-if-not-resolved=\"false\"></xref> class with the specified key/value store name and store replicator settings.</p>\n"
  remarks: "\n<p>The store name should conform to valid filename characters.</p>\n"
  example: []
  syntax:
    content: public KeyValueStoreReplica(string storeName, ReplicatorSettings replicatorSettings)
    content.vb: Public Sub New(storeName As String, replicatorSettings As ReplicatorSettings)
    parameters:
    - id: storeName
      type: System.String
      description: "\n<p>The name of the key/value store.</p>\n"
    - id: replicatorSettings
      type: System.Fabric.ReplicatorSettings
      description: "\n<p>The option settings for the key/value store replicator.</p>\n"
  overload: System.Fabric.KeyValueStoreReplica.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.KeyValueStoreReplica.#ctor(System.String,System.Fabric.LocalStoreSettings,System.Fabric.ReplicatorSettings)
  commentId: M:System.Fabric.KeyValueStoreReplica.#ctor(System.String,System.Fabric.LocalStoreSettings,System.Fabric.ReplicatorSettings)
  id: '#ctor(System.String,System.Fabric.LocalStoreSettings,System.Fabric.ReplicatorSettings)'
  parent: System.Fabric.KeyValueStoreReplica
  langs:
  - csharp
  - vb
  name: KeyValueStoreReplica(String, LocalStoreSettings, ReplicatorSettings)
  nameWithType: KeyValueStoreReplica.KeyValueStoreReplica(String, LocalStoreSettings, ReplicatorSettings)
  fullName: System.Fabric.KeyValueStoreReplica.KeyValueStoreReplica(System.String, System.Fabric.LocalStoreSettings, System.Fabric.ReplicatorSettings)
  type: Constructor
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/KeyValueStoreReplica.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: .ctor
    path: src/prod/src/managed/Api/src/System/Fabric/KeyValueStoreReplica.cs
    startLine: 172
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Fabric.KeyValueStoreReplica\" data-throw-if-not-resolved=\"false\"></xref> class with the specified key/value store name, local store settings, and replicator settings.</p>\n"
  example: []
  syntax:
    content: public KeyValueStoreReplica(string storeName, LocalStoreSettings localStoreSettings, ReplicatorSettings replicatorSettings)
    content.vb: Public Sub New(storeName As String, localStoreSettings As LocalStoreSettings, replicatorSettings As ReplicatorSettings)
    parameters:
    - id: storeName
      type: System.String
      description: "\n<p>The name of the key/value store.</p>\n"
    - id: localStoreSettings
      type: System.Fabric.LocalStoreSettings
      description: "\n<p>The optional settings for the local store.</p>\n"
    - id: replicatorSettings
      type: System.Fabric.ReplicatorSettings
      description: "\n<p>The option settings for the key/value store replicator.</p>\n"
  overload: System.Fabric.KeyValueStoreReplica.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.KeyValueStoreReplica.#ctor(System.String,System.Fabric.LocalStoreSettings,System.Fabric.ReplicatorSettings,System.Fabric.KeyValueStoreReplica.SecondaryNotificationMode)
  commentId: M:System.Fabric.KeyValueStoreReplica.#ctor(System.String,System.Fabric.LocalStoreSettings,System.Fabric.ReplicatorSettings,System.Fabric.KeyValueStoreReplica.SecondaryNotificationMode)
  id: '#ctor(System.String,System.Fabric.LocalStoreSettings,System.Fabric.ReplicatorSettings,System.Fabric.KeyValueStoreReplica.SecondaryNotificationMode)'
  parent: System.Fabric.KeyValueStoreReplica
  langs:
  - csharp
  - vb
  name: KeyValueStoreReplica(String, LocalStoreSettings, ReplicatorSettings, KeyValueStoreReplica.SecondaryNotificationMode)
  nameWithType: KeyValueStoreReplica.KeyValueStoreReplica(String, LocalStoreSettings, ReplicatorSettings, KeyValueStoreReplica.SecondaryNotificationMode)
  fullName: System.Fabric.KeyValueStoreReplica.KeyValueStoreReplica(System.String, System.Fabric.LocalStoreSettings, System.Fabric.ReplicatorSettings, System.Fabric.KeyValueStoreReplica.SecondaryNotificationMode)
  type: Constructor
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/KeyValueStoreReplica.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: .ctor
    path: src/prod/src/managed/Api/src/System/Fabric/KeyValueStoreReplica.cs
    startLine: 197
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Fabric.KeyValueStoreReplica\" data-throw-if-not-resolved=\"false\"></xref> class with the specified key/value store name, local store settings, and replicator settings. Secondary replica notifications are enabled via the notification mode.</p>\n"
  example: []
  syntax:
    content: public KeyValueStoreReplica(string storeName, LocalStoreSettings localStoreSettings, ReplicatorSettings replicatorSettings, KeyValueStoreReplica.SecondaryNotificationMode notificationMode)
    content.vb: Public Sub New(storeName As String, localStoreSettings As LocalStoreSettings, replicatorSettings As ReplicatorSettings, notificationMode As KeyValueStoreReplica.SecondaryNotificationMode)
    parameters:
    - id: storeName
      type: System.String
      description: "\n<p>The name of the key/value store.</p>\n"
    - id: localStoreSettings
      type: System.Fabric.LocalStoreSettings
      description: "\n<p>The optional settings for the local store.</p>\n"
    - id: replicatorSettings
      type: System.Fabric.ReplicatorSettings
      description: "\n<p>The option settings for the key/value store replicator.</p>\n"
    - id: notificationMode
      type: System.Fabric.KeyValueStoreReplica.SecondaryNotificationMode
      description: "\n<p>The secondary notification mode to enable <xref href=\"System.Fabric.KeyValueStoreReplica.OnCopyComplete(System.Fabric.KeyValueStoreEnumerator)\" data-throw-if-not-resolved=\"false\"></xref> \nand <xref href=\"System.Fabric.KeyValueStoreReplica.OnReplicationOperation(System.Collections.Generic.IEnumerator%7bSystem.Fabric.KeyValueStoreNotification%7d)\" data-throw-if-not-resolved=\"false\"></xref> \ncallbacks on this replica.</p>\n"
  overload: System.Fabric.KeyValueStoreReplica.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.KeyValueStoreReplica.#ctor(System.String,System.Fabric.LocalStoreSettings,System.Fabric.ReplicatorSettings,System.Fabric.KeyValueStoreReplicaSettings)
  commentId: M:System.Fabric.KeyValueStoreReplica.#ctor(System.String,System.Fabric.LocalStoreSettings,System.Fabric.ReplicatorSettings,System.Fabric.KeyValueStoreReplicaSettings)
  id: '#ctor(System.String,System.Fabric.LocalStoreSettings,System.Fabric.ReplicatorSettings,System.Fabric.KeyValueStoreReplicaSettings)'
  parent: System.Fabric.KeyValueStoreReplica
  langs:
  - csharp
  - vb
  name: KeyValueStoreReplica(String, LocalStoreSettings, ReplicatorSettings, KeyValueStoreReplicaSettings)
  nameWithType: KeyValueStoreReplica.KeyValueStoreReplica(String, LocalStoreSettings, ReplicatorSettings, KeyValueStoreReplicaSettings)
  fullName: System.Fabric.KeyValueStoreReplica.KeyValueStoreReplica(System.String, System.Fabric.LocalStoreSettings, System.Fabric.ReplicatorSettings, System.Fabric.KeyValueStoreReplicaSettings)
  type: Constructor
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/KeyValueStoreReplica.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: .ctor
    path: src/prod/src/managed/Api/src/System/Fabric/KeyValueStoreReplica.cs
    startLine: 217
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\nInitializes a new instance of the KeyValueStoreReplica class with the specified key/value store name, local store settings, replicator settings, and replica settings.\n"
  example: []
  syntax:
    content: public KeyValueStoreReplica(string storeName, LocalStoreSettings localStoreSettings, ReplicatorSettings replicatorSettings, KeyValueStoreReplicaSettings kvsSettings)
    content.vb: Public Sub New(storeName As String, localStoreSettings As LocalStoreSettings, replicatorSettings As ReplicatorSettings, kvsSettings As KeyValueStoreReplicaSettings)
    parameters:
    - id: storeName
      type: System.String
      description: The name of the key/value store.
    - id: localStoreSettings
      type: System.Fabric.LocalStoreSettings
      description: The optional settings for the local store.
    - id: replicatorSettings
      type: System.Fabric.ReplicatorSettings
      description: The optional settings for the key/value store replicator.
    - id: kvsSettings
      type: System.Fabric.KeyValueStoreReplicaSettings
      description: The optional settings for the key/value store replica.
  overload: System.Fabric.KeyValueStoreReplica.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.KeyValueStoreReplica.DataLossReported
  commentId: E:System.Fabric.KeyValueStoreReplica.DataLossReported
  id: DataLossReported
  parent: System.Fabric.KeyValueStoreReplica
  langs:
  - csharp
  - vb
  name: DataLossReported
  nameWithType: KeyValueStoreReplica.DataLossReported
  fullName: System.Fabric.KeyValueStoreReplica.DataLossReported
  type: Event
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/KeyValueStoreReplica.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: DataLossReported
    path: src/prod/src/managed/Api/src/System/Fabric/KeyValueStoreReplica.cs
    startLine: 255
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\nHandler for data loss events.\n"
  example: []
  syntax:
    content: public event EventHandler DataLossReported
    content.vb: Public Event DataLossReported As EventHandler
    return:
      type: System.EventHandler
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.KeyValueStoreReplica.OnDatalossReported(System.EventArgs)
  commentId: M:System.Fabric.KeyValueStoreReplica.OnDatalossReported(System.EventArgs)
  id: OnDatalossReported(System.EventArgs)
  parent: System.Fabric.KeyValueStoreReplica
  langs:
  - csharp
  - vb
  name: OnDatalossReported(EventArgs)
  nameWithType: KeyValueStoreReplica.OnDatalossReported(EventArgs)
  fullName: System.Fabric.KeyValueStoreReplica.OnDatalossReported(System.EventArgs)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/KeyValueStoreReplica.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: OnDatalossReported
    path: src/prod/src/managed/Api/src/System/Fabric/KeyValueStoreReplica.cs
    startLine: 264
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Signals that the replica set may have experienced data loss. The application can either override this method or listen for the\n<xref href=\"System.Fabric.KeyValueStoreReplica.DataLossReported\" data-throw-if-not-resolved=\"false\"></xref> Event. Both represent the same event</p>\n"
  example: []
  syntax:
    content: protected virtual void OnDatalossReported(EventArgs args)
    content.vb: Protected Overridable Sub OnDatalossReported(args As EventArgs)
    parameters:
    - id: args
      type: System.EventArgs
      description: "\n<p>Currently contains no data. Reserved for future use.</p>\n"
  overload: System.Fabric.KeyValueStoreReplica.OnDatalossReported*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: System.Fabric.KeyValueStoreReplica.OnDataLossAsync(System.Threading.CancellationToken)
  commentId: M:System.Fabric.KeyValueStoreReplica.OnDataLossAsync(System.Threading.CancellationToken)
  id: OnDataLossAsync(System.Threading.CancellationToken)
  parent: System.Fabric.KeyValueStoreReplica
  langs:
  - csharp
  - vb
  name: OnDataLossAsync(CancellationToken)
  nameWithType: KeyValueStoreReplica.OnDataLossAsync(CancellationToken)
  fullName: System.Fabric.KeyValueStoreReplica.OnDataLossAsync(System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/KeyValueStoreReplica.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: OnDataLossAsync
    path: src/prod/src/managed/Api/src/System/Fabric/KeyValueStoreReplica.cs
    startLine: 279
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\nSignals that the replica set may have experienced data loss. The application can either override this method to process the event asynchronously \nor use the <xref href=\"System.Fabric.KeyValueStoreReplica.DataLossReported\" data-throw-if-not-resolved=\"false\"></xref> event to process synchronously. Both represent the same event.\n"
  example: []
  syntax:
    content: protected virtual Task<bool> OnDataLossAsync(CancellationToken cancellationToken)
    content.vb: Protected Overridable Function OnDataLossAsync(cancellationToken As CancellationToken) As Task(Of Boolean)
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The token used to check for cancellation of the operation.
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
      description: True to indicate that data was modified during recovery and the replica set needs to be resynchronized. Otherwise, false to indicate that data has not been modified.
  overload: System.Fabric.KeyValueStoreReplica.OnDataLossAsync*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: System.Fabric.KeyValueStoreReplica.StoreName
  commentId: P:System.Fabric.KeyValueStoreReplica.StoreName
  id: StoreName
  parent: System.Fabric.KeyValueStoreReplica
  langs:
  - csharp
  - vb
  name: StoreName
  nameWithType: KeyValueStoreReplica.StoreName
  fullName: System.Fabric.KeyValueStoreReplica.StoreName
  type: Property
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/KeyValueStoreReplica.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: StoreName
    path: src/prod/src/managed/Api/src/System/Fabric/KeyValueStoreReplica.cs
    startLine: 293
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Gets or sets the name of the key/value store.</p>\n"
  remarks: "\n<p>The store name should conform to valid filename characters.</p>\n"
  example: []
  syntax:
    content: public string StoreName { get; }
    content.vb: Public ReadOnly Property StoreName As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>The name of the key/value store.</p>\n"
  overload: System.Fabric.KeyValueStoreReplica.StoreName*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Fabric.KeyValueStoreReplica.LocalStoreSettings
  commentId: P:System.Fabric.KeyValueStoreReplica.LocalStoreSettings
  id: LocalStoreSettings
  parent: System.Fabric.KeyValueStoreReplica
  langs:
  - csharp
  - vb
  name: LocalStoreSettings
  nameWithType: KeyValueStoreReplica.LocalStoreSettings
  fullName: System.Fabric.KeyValueStoreReplica.LocalStoreSettings
  type: Property
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/KeyValueStoreReplica.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: LocalStoreSettings
    path: src/prod/src/managed/Api/src/System/Fabric/KeyValueStoreReplica.cs
    startLine: 301
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Gets or sets the option settings for the local key/value store.</p>\n"
  example: []
  syntax:
    content: public LocalStoreSettings LocalStoreSettings { get; }
    content.vb: Public ReadOnly Property LocalStoreSettings As LocalStoreSettings
    parameters: []
    return:
      type: System.Fabric.LocalStoreSettings
      description: "\n<p>The local store option settings.</p>\n"
  overload: System.Fabric.KeyValueStoreReplica.LocalStoreSettings*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Fabric.KeyValueStoreReplica.ReplicatorSettings
  commentId: P:System.Fabric.KeyValueStoreReplica.ReplicatorSettings
  id: ReplicatorSettings
  parent: System.Fabric.KeyValueStoreReplica
  langs:
  - csharp
  - vb
  name: ReplicatorSettings
  nameWithType: KeyValueStoreReplica.ReplicatorSettings
  fullName: System.Fabric.KeyValueStoreReplica.ReplicatorSettings
  type: Property
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/KeyValueStoreReplica.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: ReplicatorSettings
    path: src/prod/src/managed/Api/src/System/Fabric/KeyValueStoreReplica.cs
    startLine: 309
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Gets or sets the option settings for the key/value store replicator.</p>\n"
  example: []
  syntax:
    content: public ReplicatorSettings ReplicatorSettings { get; }
    content.vb: Public ReadOnly Property ReplicatorSettings As ReplicatorSettings
    parameters: []
    return:
      type: System.Fabric.ReplicatorSettings
      description: "\n<p>The store replicator option settings.</p>\n"
  overload: System.Fabric.KeyValueStoreReplica.ReplicatorSettings*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Fabric.KeyValueStoreReplica.KeyValueStoreReplicaSettings
  commentId: P:System.Fabric.KeyValueStoreReplica.KeyValueStoreReplicaSettings
  id: KeyValueStoreReplicaSettings
  parent: System.Fabric.KeyValueStoreReplica
  langs:
  - csharp
  - vb
  name: KeyValueStoreReplicaSettings
  nameWithType: KeyValueStoreReplica.KeyValueStoreReplicaSettings
  fullName: System.Fabric.KeyValueStoreReplica.KeyValueStoreReplicaSettings
  type: Property
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/KeyValueStoreReplica.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: KeyValueStoreReplicaSettings
    path: src/prod/src/managed/Api/src/System/Fabric/KeyValueStoreReplica.cs
    startLine: 317
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Gets or sets the option settings for the <xref href=\"System.Fabric.KeyValueStoreReplica\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example: []
  syntax:
    content: public KeyValueStoreReplicaSettings KeyValueStoreReplicaSettings { get; }
    content.vb: Public ReadOnly Property KeyValueStoreReplicaSettings As KeyValueStoreReplicaSettings
    parameters: []
    return:
      type: System.Fabric.KeyValueStoreReplicaSettings
      description: "\n<p>The <xref href=\"System.Fabric.KeyValueStoreReplica\" data-throw-if-not-resolved=\"false\"></xref> option settings.</p>\n"
  overload: System.Fabric.KeyValueStoreReplica.KeyValueStoreReplicaSettings*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Fabric.KeyValueStoreReplica.NotificationMode
  commentId: P:System.Fabric.KeyValueStoreReplica.NotificationMode
  id: NotificationMode
  parent: System.Fabric.KeyValueStoreReplica
  langs:
  - csharp
  - vb
  name: NotificationMode
  nameWithType: KeyValueStoreReplica.NotificationMode
  fullName: System.Fabric.KeyValueStoreReplica.NotificationMode
  type: Property
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/KeyValueStoreReplica.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: NotificationMode
    path: src/prod/src/managed/Api/src/System/Fabric/KeyValueStoreReplica.cs
    startLine: 325
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Gets the secondary notification mode specified during construction of this replica.</p>\n"
  example: []
  syntax:
    content: public KeyValueStoreReplica.SecondaryNotificationMode NotificationMode { get; }
    content.vb: Public ReadOnly Property NotificationMode As KeyValueStoreReplica.SecondaryNotificationMode
    parameters: []
    return:
      type: System.Fabric.KeyValueStoreReplica.SecondaryNotificationMode
      description: "\n<p>The current secondary notification mode</p>\n"
  overload: System.Fabric.KeyValueStoreReplica.NotificationMode*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Fabric.KeyValueStoreReplica.Initialize(System.Fabric.StatefulServiceInitializationParameters)
  commentId: M:System.Fabric.KeyValueStoreReplica.Initialize(System.Fabric.StatefulServiceInitializationParameters)
  id: Initialize(System.Fabric.StatefulServiceInitializationParameters)
  parent: System.Fabric.KeyValueStoreReplica
  langs:
  - csharp
  - vb
  name: Initialize(StatefulServiceInitializationParameters)
  nameWithType: KeyValueStoreReplica.Initialize(StatefulServiceInitializationParameters)
  fullName: System.Fabric.KeyValueStoreReplica.Initialize(System.Fabric.StatefulServiceInitializationParameters)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/KeyValueStoreReplica.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: Initialize
    path: src/prod/src/managed/Api/src/System/Fabric/KeyValueStoreReplica.cs
    startLine: 365
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Initializes the replica in preparation for opening.</p>\n"
  remarks: "\n<p>This method does not need to be called explicitly if the application replica derives from <xref href=\"System.Fabric.KeyValueStoreReplica\" data-throw-if-not-resolved=\"false\"></xref>,\nwhich is the recommended pattern. In this case, the application replica should override\n<xref href=\"System.Fabric.KeyValueStoreReplica.OnInitialize(System.Fabric.StatefulServiceInitializationParameters)\" data-throw-if-not-resolved=\"false\"></xref> instead.</p>\n"
  example: []
  syntax:
    content: public void Initialize(StatefulServiceInitializationParameters initializationParameters)
    content.vb: Public Sub Initialize(initializationParameters As StatefulServiceInitializationParameters)
    parameters:
    - id: initializationParameters
      type: System.Fabric.StatefulServiceInitializationParameters
      description: "\n<p>The initialization information for the replica.</p>\n"
  overload: System.Fabric.KeyValueStoreReplica.Initialize*
  implements:
  - System.Fabric.IStatefulServiceReplica.Initialize(System.Fabric.StatefulServiceInitializationParameters)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.KeyValueStoreReplica.OpenAsync(System.Fabric.ReplicaOpenMode,System.Fabric.IStatefulServicePartition,System.Threading.CancellationToken)
  commentId: M:System.Fabric.KeyValueStoreReplica.OpenAsync(System.Fabric.ReplicaOpenMode,System.Fabric.IStatefulServicePartition,System.Threading.CancellationToken)
  id: OpenAsync(System.Fabric.ReplicaOpenMode,System.Fabric.IStatefulServicePartition,System.Threading.CancellationToken)
  parent: System.Fabric.KeyValueStoreReplica
  langs:
  - csharp
  - vb
  name: OpenAsync(ReplicaOpenMode, IStatefulServicePartition, CancellationToken)
  nameWithType: KeyValueStoreReplica.OpenAsync(ReplicaOpenMode, IStatefulServicePartition, CancellationToken)
  fullName: System.Fabric.KeyValueStoreReplica.OpenAsync(System.Fabric.ReplicaOpenMode, System.Fabric.IStatefulServicePartition, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/KeyValueStoreReplica.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: OpenAsync
    path: src/prod/src/managed/Api/src/System/Fabric/KeyValueStoreReplica.cs
    startLine: 396
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Opens the replica and its replicator in preparation for coming online in a replica set.</p>\n"
  remarks: "\n<p>This method does not need to be called explicitly if the application replica derives from <xref href=\"System.Fabric.KeyValueStoreReplica\" data-throw-if-not-resolved=\"false\"></xref>, \nwhich is the recommended pattern. In this case, the application replica should override OnOpenAsync instead.</p>\n"
  example: []
  syntax:
    content: public Task<IReplicator> OpenAsync(ReplicaOpenMode openMode, IStatefulServicePartition partition, CancellationToken cancellationToken)
    content.vb: Public Function OpenAsync(openMode As ReplicaOpenMode, partition As IStatefulServicePartition, cancellationToken As CancellationToken) As Task(Of IReplicator)
    parameters:
    - id: openMode
      type: System.Fabric.ReplicaOpenMode
      description: "\n<p>Specifies the context under which this replica is being opened.</p>\n"
    - id: partition
      type: System.Fabric.IStatefulServicePartition
      description: "\n<p>Contains information describing the replica set to which this replica belongs.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>Currently unused. Reserved for future use.</p>\n"
    return:
      type: System.Threading.Tasks.Task{System.Fabric.IReplicator}
      description: "\n<p>A Task to indicate completion of the open <xref href=\"System.Threading.Tasks.Task%601\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  overload: System.Fabric.KeyValueStoreReplica.OpenAsync*
  implements:
  - System.Fabric.IStatefulServiceReplica.OpenAsync(System.Fabric.ReplicaOpenMode,System.Fabric.IStatefulServicePartition,System.Threading.CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.KeyValueStoreReplica.ChangeRoleAsync(System.Fabric.ReplicaRole,System.Threading.CancellationToken)
  commentId: M:System.Fabric.KeyValueStoreReplica.ChangeRoleAsync(System.Fabric.ReplicaRole,System.Threading.CancellationToken)
  id: ChangeRoleAsync(System.Fabric.ReplicaRole,System.Threading.CancellationToken)
  parent: System.Fabric.KeyValueStoreReplica
  langs:
  - csharp
  - vb
  name: ChangeRoleAsync(ReplicaRole, CancellationToken)
  nameWithType: KeyValueStoreReplica.ChangeRoleAsync(ReplicaRole, CancellationToken)
  fullName: System.Fabric.KeyValueStoreReplica.ChangeRoleAsync(System.Fabric.ReplicaRole, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/KeyValueStoreReplica.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: ChangeRoleAsync
    path: src/prod/src/managed/Api/src/System/Fabric/KeyValueStoreReplica.cs
    startLine: 462
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Changes the replica role of the replica and its replicator.</p>\n"
  remarks: "\n<p>This method does not need to be called explicitly if the application replica derives from <xref href=\"System.Fabric.KeyValueStoreReplica\" data-throw-if-not-resolved=\"false\"></xref>, \nwhich is the recommended pattern. In this case, the application replica should override <xref href=\"System.Fabric.KeyValueStoreReplica.OnChangeRoleAsync(System.Fabric.ReplicaRole%2cSystem.Threading.CancellationToken)\" data-throw-if-not-resolved=\"false\"></xref> instead.</p>\n"
  example: []
  syntax:
    content: public Task<string> ChangeRoleAsync(ReplicaRole newRole, CancellationToken cancellationToken)
    content.vb: Public Function ChangeRoleAsync(newRole As ReplicaRole, cancellationToken As CancellationToken) As Task(Of String)
    parameters:
    - id: newRole
      type: System.Fabric.ReplicaRole
      description: "\n<p>The target replica role.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>Currently unused. Reserved for future use.</p>\n"
    return:
      type: System.Threading.Tasks.Task{System.String}
      description: "\n<p>A task whose result is the address of this replica.</p>\n"
  overload: System.Fabric.KeyValueStoreReplica.ChangeRoleAsync*
  implements:
  - System.Fabric.IStatefulServiceReplica.ChangeRoleAsync(System.Fabric.ReplicaRole,System.Threading.CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.KeyValueStoreReplica.CloseAsync(System.Threading.CancellationToken)
  commentId: M:System.Fabric.KeyValueStoreReplica.CloseAsync(System.Threading.CancellationToken)
  id: CloseAsync(System.Threading.CancellationToken)
  parent: System.Fabric.KeyValueStoreReplica
  langs:
  - csharp
  - vb
  name: CloseAsync(CancellationToken)
  nameWithType: KeyValueStoreReplica.CloseAsync(CancellationToken)
  fullName: System.Fabric.KeyValueStoreReplica.CloseAsync(System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/KeyValueStoreReplica.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: CloseAsync
    path: src/prod/src/managed/Api/src/System/Fabric/KeyValueStoreReplica.cs
    startLine: 489
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Closes the replica and its replicator in preparation for going offline from a replica set.</p>\n"
  remarks: "\n<p>The replica has not necessarily been removed permanently from the replica set and may be re-opened at a later time. The most common causes for closing a replica is graceful shutdown in preparation for upgrade or load balancing. This method does not need to be called explicitly if the application replica derives from <xref href=\"System.Fabric.KeyValueStoreReplica\" data-throw-if-not-resolved=\"false\"></xref>, which is the recommended pattern. In this case, the application replica should override <xref href=\"System.Fabric.KeyValueStoreReplica.OnCloseAsync(System.Threading.CancellationToken)\" data-throw-if-not-resolved=\"false\"></xref> instead.</p>\n"
  example: []
  syntax:
    content: public Task CloseAsync(CancellationToken cancellationToken)
    content.vb: Public Function CloseAsync(cancellationToken As CancellationToken) As Task
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>Currently unused. Reserved for future use.</p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>A task that represents the asynchronous operation.</p>\n"
  overload: System.Fabric.KeyValueStoreReplica.CloseAsync*
  implements:
  - System.Fabric.IStatefulServiceReplica.CloseAsync(System.Threading.CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.KeyValueStoreReplica.Abort
  commentId: M:System.Fabric.KeyValueStoreReplica.Abort
  id: Abort
  parent: System.Fabric.KeyValueStoreReplica
  langs:
  - csharp
  - vb
  name: Abort()
  nameWithType: KeyValueStoreReplica.Abort()
  fullName: System.Fabric.KeyValueStoreReplica.Abort()
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/KeyValueStoreReplica.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: Abort
    path: src/prod/src/managed/Api/src/System/Fabric/KeyValueStoreReplica.cs
    startLine: 519
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Aborts this instance of the <xref href=\"System.Fabric.KeyValueStoreReplica\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  example: []
  syntax:
    content: public void Abort()
    content.vb: Public Sub Abort
  overload: System.Fabric.KeyValueStoreReplica.Abort*
  implements:
  - System.Fabric.IStatefulServiceReplica.Abort
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.KeyValueStoreReplica.GetCurrentEpoch
  commentId: M:System.Fabric.KeyValueStoreReplica.GetCurrentEpoch
  id: GetCurrentEpoch
  parent: System.Fabric.KeyValueStoreReplica
  langs:
  - csharp
  - vb
  name: GetCurrentEpoch()
  nameWithType: KeyValueStoreReplica.GetCurrentEpoch()
  fullName: System.Fabric.KeyValueStoreReplica.GetCurrentEpoch()
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/KeyValueStoreReplica.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: GetCurrentEpoch
    path: src/prod/src/managed/Api/src/System/Fabric/KeyValueStoreReplica.cs
    startLine: 537
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Gets the current epoch for the key/value store.</p>\n"
  example: []
  syntax:
    content: public Epoch GetCurrentEpoch()
    content.vb: Public Function GetCurrentEpoch As Epoch
    return:
      type: System.Fabric.Epoch
      description: "\n<p>The current epoch for the key/value store.</p>\n"
  overload: System.Fabric.KeyValueStoreReplica.GetCurrentEpoch*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.KeyValueStoreReplica.UpdateReplicatorSettings(System.Fabric.ReplicatorSettings)
  commentId: M:System.Fabric.KeyValueStoreReplica.UpdateReplicatorSettings(System.Fabric.ReplicatorSettings)
  id: UpdateReplicatorSettings(System.Fabric.ReplicatorSettings)
  parent: System.Fabric.KeyValueStoreReplica
  langs:
  - csharp
  - vb
  name: UpdateReplicatorSettings(ReplicatorSettings)
  nameWithType: KeyValueStoreReplica.UpdateReplicatorSettings(ReplicatorSettings)
  fullName: System.Fabric.KeyValueStoreReplica.UpdateReplicatorSettings(System.Fabric.ReplicatorSettings)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/KeyValueStoreReplica.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: UpdateReplicatorSettings
    path: src/prod/src/managed/Api/src/System/Fabric/KeyValueStoreReplica.cs
    startLine: 552
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Updates the key/value store replicator with the settings in the specified <xref href=\"System.Fabric.ReplicatorSettings\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  example: []
  syntax:
    content: public void UpdateReplicatorSettings(ReplicatorSettings settings)
    content.vb: Public Sub UpdateReplicatorSettings(settings As ReplicatorSettings)
    parameters:
    - id: settings
      type: System.Fabric.ReplicatorSettings
      description: "\n<p>The settings used to update the key/value store replicator.</p>\n"
  overload: System.Fabric.KeyValueStoreReplica.UpdateReplicatorSettings*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.KeyValueStoreReplica.CreateTransaction
  commentId: M:System.Fabric.KeyValueStoreReplica.CreateTransaction
  id: CreateTransaction
  parent: System.Fabric.KeyValueStoreReplica
  langs:
  - csharp
  - vb
  name: CreateTransaction()
  nameWithType: KeyValueStoreReplica.CreateTransaction()
  fullName: System.Fabric.KeyValueStoreReplica.CreateTransaction()
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/KeyValueStoreReplica.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: CreateTransaction
    path: src/prod/src/managed/Api/src/System/Fabric/KeyValueStoreReplica.cs
    startLine: 575
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Creates a unique <xref href=\"System.Fabric.Transaction\" data-throw-if-not-resolved=\"false\"></xref> instance, which is used to commit or rollback groups of key/value store operations.</p>\n"
  example: []
  syntax:
    content: public Transaction CreateTransaction()
    content.vb: Public Function CreateTransaction As Transaction
    return:
      type: System.Fabric.Transaction
      description: "\n<p>A <xref href=\"System.Fabric.Transaction\" data-throw-if-not-resolved=\"false\"></xref> object representing a transaction.</p>\n"
  overload: System.Fabric.KeyValueStoreReplica.CreateTransaction*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.KeyValueStoreReplica.CreateTransaction(System.Fabric.KeyValueStoreTransactionSettings)
  commentId: M:System.Fabric.KeyValueStoreReplica.CreateTransaction(System.Fabric.KeyValueStoreTransactionSettings)
  id: CreateTransaction(System.Fabric.KeyValueStoreTransactionSettings)
  parent: System.Fabric.KeyValueStoreReplica
  langs:
  - csharp
  - vb
  name: CreateTransaction(KeyValueStoreTransactionSettings)
  nameWithType: KeyValueStoreReplica.CreateTransaction(KeyValueStoreTransactionSettings)
  fullName: System.Fabric.KeyValueStoreReplica.CreateTransaction(System.Fabric.KeyValueStoreTransactionSettings)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/KeyValueStoreReplica.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: CreateTransaction
    path: src/prod/src/managed/Api/src/System/Fabric/KeyValueStoreReplica.cs
    startLine: 589
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Creates a unique <xref href=\"System.Fabric.Transaction\" data-throw-if-not-resolved=\"false\"></xref> instance, which is used to commit or rollback groups of key/value store operations.</p>\n"
  example: []
  syntax:
    content: public Transaction CreateTransaction(KeyValueStoreTransactionSettings settings)
    content.vb: Public Function CreateTransaction(settings As KeyValueStoreTransactionSettings) As Transaction
    parameters:
    - id: settings
      type: System.Fabric.KeyValueStoreTransactionSettings
      description: "\n<p>The transaction settings.</p>\n"
    return:
      type: System.Fabric.Transaction
      description: "\n<p>A <xref href=\"System.Fabric.Transaction\" data-throw-if-not-resolved=\"false\"></xref> object representing a transaction.</p>\n"
  overload: System.Fabric.KeyValueStoreReplica.CreateTransaction*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.KeyValueStoreReplica.Add(System.Fabric.TransactionBase,System.String,System.Byte[])
  commentId: M:System.Fabric.KeyValueStoreReplica.Add(System.Fabric.TransactionBase,System.String,System.Byte[])
  id: Add(System.Fabric.TransactionBase,System.String,System.Byte[])
  parent: System.Fabric.KeyValueStoreReplica
  langs:
  - csharp
  - vb
  name: Add(TransactionBase, String, Byte[])
  nameWithType: KeyValueStoreReplica.Add(TransactionBase, String, Byte[])
  fullName: System.Fabric.KeyValueStoreReplica.Add(System.Fabric.TransactionBase, System.String, System.Byte[])
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/KeyValueStoreReplica.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: Add
    path: src/prod/src/managed/Api/src/System/Fabric/KeyValueStoreReplica.cs
    startLine: 614
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Adds a value indexed by the specified key to the key/value store.</p>\n"
  example: []
  syntax:
    content: public void Add(TransactionBase transactionBase, string key, byte[] value)
    content.vb: Public Sub Add(transactionBase As TransactionBase, key As String, value As Byte())
    parameters:
    - id: transactionBase
      type: System.Fabric.TransactionBase
      description: "\n<p>The transaction instance.</p>\n"
    - id: key
      type: System.String
      description: "\n<p>The key or index of the value to be added (as a string). Limited to 800 characters in length.</p>\n"
    - id: value
      type: System.Byte[]
      description: "\n<p>The value (as a byte array) to be stored, limited to 2GB in length.</p>\n"
  overload: System.Fabric.KeyValueStoreReplica.Add*
  nameWithType.vb: KeyValueStoreReplica.Add(TransactionBase, String, Byte())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Fabric.KeyValueStoreReplica.Add(System.Fabric.TransactionBase, System.String, System.Byte())
  name.vb: Add(TransactionBase, String, Byte())
- uid: System.Fabric.KeyValueStoreReplica.TryAdd(System.Fabric.TransactionBase,System.String,System.Byte[])
  commentId: M:System.Fabric.KeyValueStoreReplica.TryAdd(System.Fabric.TransactionBase,System.String,System.Byte[])
  id: TryAdd(System.Fabric.TransactionBase,System.String,System.Byte[])
  parent: System.Fabric.KeyValueStoreReplica
  langs:
  - csharp
  - vb
  name: TryAdd(TransactionBase, String, Byte[])
  nameWithType: KeyValueStoreReplica.TryAdd(TransactionBase, String, Byte[])
  fullName: System.Fabric.KeyValueStoreReplica.TryAdd(System.Fabric.TransactionBase, System.String, System.Byte[])
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/KeyValueStoreReplica.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: TryAdd
    path: src/prod/src/managed/Api/src/System/Fabric/KeyValueStoreReplica.cs
    startLine: 635
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\nAttempts to add a value indexed by the specified key to the key/value store.\n"
  example: []
  syntax:
    content: public bool TryAdd(TransactionBase transactionBase, string key, byte[] value)
    content.vb: Public Function TryAdd(transactionBase As TransactionBase, key As String, value As Byte()) As Boolean
    parameters:
    - id: transactionBase
      type: System.Fabric.TransactionBase
      description: The transaction instance.
    - id: key
      type: System.String
      description: The key, or index, of the value to be added (as a string). Limited to 800 characters in length.
    - id: value
      type: System.Byte[]
      description: The value (as a byte array) to be stored, limited to 2GB in length.
    return:
      type: System.Boolean
      description: True if the specified key was not already found and added. False if the specified key already exists.
  overload: System.Fabric.KeyValueStoreReplica.TryAdd*
  nameWithType.vb: KeyValueStoreReplica.TryAdd(TransactionBase, String, Byte())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Fabric.KeyValueStoreReplica.TryAdd(System.Fabric.TransactionBase, System.String, System.Byte())
  name.vb: TryAdd(TransactionBase, String, Byte())
- uid: System.Fabric.KeyValueStoreReplica.Remove(System.Fabric.TransactionBase,System.String)
  commentId: M:System.Fabric.KeyValueStoreReplica.Remove(System.Fabric.TransactionBase,System.String)
  id: Remove(System.Fabric.TransactionBase,System.String)
  parent: System.Fabric.KeyValueStoreReplica
  langs:
  - csharp
  - vb
  name: Remove(TransactionBase, String)
  nameWithType: KeyValueStoreReplica.Remove(TransactionBase, String)
  fullName: System.Fabric.KeyValueStoreReplica.Remove(System.Fabric.TransactionBase, System.String)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/KeyValueStoreReplica.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: Remove
    path: src/prod/src/managed/Api/src/System/Fabric/KeyValueStoreReplica.cs
    startLine: 658
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Removes the value indexed by the specified key.</p>\n"
  example: []
  syntax:
    content: public void Remove(TransactionBase transactionBase, string key)
    content.vb: Public Sub Remove(transactionBase As TransactionBase, key As String)
    parameters:
    - id: transactionBase
      type: System.Fabric.TransactionBase
      description: "\n<p>The transaction instance.</p>\n"
    - id: key
      type: System.String
      description: "\n<p>The key, or index, of the value to be removed (as a string). Limited to 800 characters in length.</p>\n"
  overload: System.Fabric.KeyValueStoreReplica.Remove*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.KeyValueStoreReplica.Remove(System.Fabric.TransactionBase,System.String,System.Int64)
  commentId: M:System.Fabric.KeyValueStoreReplica.Remove(System.Fabric.TransactionBase,System.String,System.Int64)
  id: Remove(System.Fabric.TransactionBase,System.String,System.Int64)
  parent: System.Fabric.KeyValueStoreReplica
  langs:
  - csharp
  - vb
  name: Remove(TransactionBase, String, Int64)
  nameWithType: KeyValueStoreReplica.Remove(TransactionBase, String, Int64)
  fullName: System.Fabric.KeyValueStoreReplica.Remove(System.Fabric.TransactionBase, System.String, System.Int64)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/KeyValueStoreReplica.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: Remove
    path: src/prod/src/managed/Api/src/System/Fabric/KeyValueStoreReplica.cs
    startLine: 675
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Removes the value indexed by the specified key.</p>\n"
  example: []
  syntax:
    content: public void Remove(TransactionBase transactionBase, string key, long checkSequenceNumber)
    content.vb: Public Sub Remove(transactionBase As TransactionBase, key As String, checkSequenceNumber As Long)
    parameters:
    - id: transactionBase
      type: System.Fabric.TransactionBase
      description: "\n<p>The transaction instance.</p>\n"
    - id: key
      type: System.String
      description: "\n<p>The key, or index, of the value to be removed (as a string). Limited to 800 characters in length.</p>\n"
    - id: checkSequenceNumber
      type: System.Int64
      description: "\n<p>The expected sequence number of the key to be removed.</p>\n"
  overload: System.Fabric.KeyValueStoreReplica.Remove*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.KeyValueStoreReplica.TryRemove(System.Fabric.TransactionBase,System.String)
  commentId: M:System.Fabric.KeyValueStoreReplica.TryRemove(System.Fabric.TransactionBase,System.String)
  id: TryRemove(System.Fabric.TransactionBase,System.String)
  parent: System.Fabric.KeyValueStoreReplica
  langs:
  - csharp
  - vb
  name: TryRemove(TransactionBase, String)
  nameWithType: KeyValueStoreReplica.TryRemove(TransactionBase, String)
  fullName: System.Fabric.KeyValueStoreReplica.TryRemove(System.Fabric.TransactionBase, System.String)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/KeyValueStoreReplica.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: TryRemove
    path: src/prod/src/managed/Api/src/System/Fabric/KeyValueStoreReplica.cs
    startLine: 694
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\nAttempts to remove the value indexed by the specified key.\n"
  example: []
  syntax:
    content: public bool TryRemove(TransactionBase transactionBase, string key)
    content.vb: Public Function TryRemove(transactionBase As TransactionBase, key As String) As Boolean
    parameters:
    - id: transactionBase
      type: System.Fabric.TransactionBase
      description: The transaction instance.
    - id: key
      type: System.String
      description: The key, or index, of the value to be removed (as a string). Limited to 800 characters in length.
    return:
      type: System.Boolean
      description: True if the specified key was found and removed. False if the specified key does not exist.
  overload: System.Fabric.KeyValueStoreReplica.TryRemove*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.KeyValueStoreReplica.TryRemove(System.Fabric.TransactionBase,System.String,System.Int64)
  commentId: M:System.Fabric.KeyValueStoreReplica.TryRemove(System.Fabric.TransactionBase,System.String,System.Int64)
  id: TryRemove(System.Fabric.TransactionBase,System.String,System.Int64)
  parent: System.Fabric.KeyValueStoreReplica
  langs:
  - csharp
  - vb
  name: TryRemove(TransactionBase, String, Int64)
  nameWithType: KeyValueStoreReplica.TryRemove(TransactionBase, String, Int64)
  fullName: System.Fabric.KeyValueStoreReplica.TryRemove(System.Fabric.TransactionBase, System.String, System.Int64)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/KeyValueStoreReplica.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: TryRemove
    path: src/prod/src/managed/Api/src/System/Fabric/KeyValueStoreReplica.cs
    startLine: 706
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\nAttempts to remove the value indexed by the specified key.\n"
  example: []
  syntax:
    content: public bool TryRemove(TransactionBase transactionBase, string key, long checkSequenceNumber)
    content.vb: Public Function TryRemove(transactionBase As TransactionBase, key As String, checkSequenceNumber As Long) As Boolean
    parameters:
    - id: transactionBase
      type: System.Fabric.TransactionBase
      description: The transaction instance.
    - id: key
      type: System.String
      description: The key, or index, of the value to be removed (as a string). Limited to 800 characters in length.
    - id: checkSequenceNumber
      type: System.Int64
      description: The expected sequence number of the key to be removed.
    return:
      type: System.Boolean
      description: True if the specified key was found and removed. False if the specified key does not exist.
  overload: System.Fabric.KeyValueStoreReplica.TryRemove*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.KeyValueStoreReplica.Update(System.Fabric.TransactionBase,System.String,System.Byte[])
  commentId: M:System.Fabric.KeyValueStoreReplica.Update(System.Fabric.TransactionBase,System.String,System.Byte[])
  id: Update(System.Fabric.TransactionBase,System.String,System.Byte[])
  parent: System.Fabric.KeyValueStoreReplica
  langs:
  - csharp
  - vb
  name: Update(TransactionBase, String, Byte[])
  nameWithType: KeyValueStoreReplica.Update(TransactionBase, String, Byte[])
  fullName: System.Fabric.KeyValueStoreReplica.Update(System.Fabric.TransactionBase, System.String, System.Byte[])
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/KeyValueStoreReplica.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: Update
    path: src/prod/src/managed/Api/src/System/Fabric/KeyValueStoreReplica.cs
    startLine: 731
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Updates the stored value associated with the specified key.</p>\n"
  example: []
  syntax:
    content: public void Update(TransactionBase transactionBase, string key, byte[] value)
    content.vb: Public Sub Update(transactionBase As TransactionBase, key As String, value As Byte())
    parameters:
    - id: transactionBase
      type: System.Fabric.TransactionBase
      description: "\n<p>The transaction instance.</p>\n"
    - id: key
      type: System.String
      description: "\n<p>The key or index of the value to be updated (as a string). Limited to 800 characters in length.</p>\n"
    - id: value
      type: System.Byte[]
      description: "\n<p>The value (as a byte array) to be stored, limited to 2GB in length.</p>\n"
  overload: System.Fabric.KeyValueStoreReplica.Update*
  nameWithType.vb: KeyValueStoreReplica.Update(TransactionBase, String, Byte())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Fabric.KeyValueStoreReplica.Update(System.Fabric.TransactionBase, System.String, System.Byte())
  name.vb: Update(TransactionBase, String, Byte())
- uid: System.Fabric.KeyValueStoreReplica.Update(System.Fabric.TransactionBase,System.String,System.Byte[],System.Int64)
  commentId: M:System.Fabric.KeyValueStoreReplica.Update(System.Fabric.TransactionBase,System.String,System.Byte[],System.Int64)
  id: Update(System.Fabric.TransactionBase,System.String,System.Byte[],System.Int64)
  parent: System.Fabric.KeyValueStoreReplica
  langs:
  - csharp
  - vb
  name: Update(TransactionBase, String, Byte[], Int64)
  nameWithType: KeyValueStoreReplica.Update(TransactionBase, String, Byte[], Int64)
  fullName: System.Fabric.KeyValueStoreReplica.Update(System.Fabric.TransactionBase, System.String, System.Byte[], System.Int64)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/KeyValueStoreReplica.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: Update
    path: src/prod/src/managed/Api/src/System/Fabric/KeyValueStoreReplica.cs
    startLine: 751
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Updates the value indexed by the specified key.</p>\n"
  example: []
  syntax:
    content: public void Update(TransactionBase transactionBase, string key, byte[] value, long checkSequenceNumber)
    content.vb: Public Sub Update(transactionBase As TransactionBase, key As String, value As Byte(), checkSequenceNumber As Long)
    parameters:
    - id: transactionBase
      type: System.Fabric.TransactionBase
      description: "\n<p>The transaction instance.</p>\n"
    - id: key
      type: System.String
      description: "\n<p>The key or index of the value to be updated (as a string). Limited to 800 characters in length.</p>\n"
    - id: value
      type: System.Byte[]
      description: "\n<p>The value (as a byte array) to be stored, limited to 2GB in length.</p>\n"
    - id: checkSequenceNumber
      type: System.Int64
      description: "\n<p>The expected sequence number of the key to be updated.</p>\n"
  overload: System.Fabric.KeyValueStoreReplica.Update*
  nameWithType.vb: KeyValueStoreReplica.Update(TransactionBase, String, Byte(), Int64)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Fabric.KeyValueStoreReplica.Update(System.Fabric.TransactionBase, System.String, System.Byte(), System.Int64)
  name.vb: Update(TransactionBase, String, Byte(), Int64)
- uid: System.Fabric.KeyValueStoreReplica.TryUpdate(System.Fabric.TransactionBase,System.String,System.Byte[])
  commentId: M:System.Fabric.KeyValueStoreReplica.TryUpdate(System.Fabric.TransactionBase,System.String,System.Byte[])
  id: TryUpdate(System.Fabric.TransactionBase,System.String,System.Byte[])
  parent: System.Fabric.KeyValueStoreReplica
  langs:
  - csharp
  - vb
  name: TryUpdate(TransactionBase, String, Byte[])
  nameWithType: KeyValueStoreReplica.TryUpdate(TransactionBase, String, Byte[])
  fullName: System.Fabric.KeyValueStoreReplica.TryUpdate(System.Fabric.TransactionBase, System.String, System.Byte[])
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/KeyValueStoreReplica.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: TryUpdate
    path: src/prod/src/managed/Api/src/System/Fabric/KeyValueStoreReplica.cs
    startLine: 772
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\nAttempts to update the value indexed by the specified key.\n"
  example: []
  syntax:
    content: public bool TryUpdate(TransactionBase transactionBase, string key, byte[] value)
    content.vb: Public Function TryUpdate(transactionBase As TransactionBase, key As String, value As Byte()) As Boolean
    parameters:
    - id: transactionBase
      type: System.Fabric.TransactionBase
      description: The transaction instance.
    - id: key
      type: System.String
      description: The key, or index, of the value to be updated (as a string). Limited to 800 characters in length.
    - id: value
      type: System.Byte[]
      description: The value (as a byte array) to be stored, limited to 2GB in length.
    return:
      type: System.Boolean
      description: True if the specified key was found and updated. False if the specified key does not exist.
  overload: System.Fabric.KeyValueStoreReplica.TryUpdate*
  nameWithType.vb: KeyValueStoreReplica.TryUpdate(TransactionBase, String, Byte())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Fabric.KeyValueStoreReplica.TryUpdate(System.Fabric.TransactionBase, System.String, System.Byte())
  name.vb: TryUpdate(TransactionBase, String, Byte())
- uid: System.Fabric.KeyValueStoreReplica.TryUpdate(System.Fabric.TransactionBase,System.String,System.Byte[],System.Int64)
  commentId: M:System.Fabric.KeyValueStoreReplica.TryUpdate(System.Fabric.TransactionBase,System.String,System.Byte[],System.Int64)
  id: TryUpdate(System.Fabric.TransactionBase,System.String,System.Byte[],System.Int64)
  parent: System.Fabric.KeyValueStoreReplica
  langs:
  - csharp
  - vb
  name: TryUpdate(TransactionBase, String, Byte[], Int64)
  nameWithType: KeyValueStoreReplica.TryUpdate(TransactionBase, String, Byte[], Int64)
  fullName: System.Fabric.KeyValueStoreReplica.TryUpdate(System.Fabric.TransactionBase, System.String, System.Byte[], System.Int64)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/KeyValueStoreReplica.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: TryUpdate
    path: src/prod/src/managed/Api/src/System/Fabric/KeyValueStoreReplica.cs
    startLine: 785
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\nAttempts to update the value indexed by the specified key.\n"
  example: []
  syntax:
    content: public bool TryUpdate(TransactionBase transactionBase, string key, byte[] value, long checkSequenceNumber)
    content.vb: Public Function TryUpdate(transactionBase As TransactionBase, key As String, value As Byte(), checkSequenceNumber As Long) As Boolean
    parameters:
    - id: transactionBase
      type: System.Fabric.TransactionBase
      description: The transaction instance.
    - id: key
      type: System.String
      description: The key, or index, of the value to be updated (as a string). Limited to 800 characters in length.
    - id: value
      type: System.Byte[]
      description: The value (as a byte array) to be stored, limited to 2GB in length.
    - id: checkSequenceNumber
      type: System.Int64
      description: The expected sequence number of the key to be updated.
    return:
      type: System.Boolean
      description: True if the specified key was found and updated. False if the specified key does not exist.
  overload: System.Fabric.KeyValueStoreReplica.TryUpdate*
  nameWithType.vb: KeyValueStoreReplica.TryUpdate(TransactionBase, String, Byte(), Int64)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Fabric.KeyValueStoreReplica.TryUpdate(System.Fabric.TransactionBase, System.String, System.Byte(), System.Int64)
  name.vb: TryUpdate(TransactionBase, String, Byte(), Int64)
- uid: System.Fabric.KeyValueStoreReplica.Contains(System.Fabric.TransactionBase,System.String)
  commentId: M:System.Fabric.KeyValueStoreReplica.Contains(System.Fabric.TransactionBase,System.String)
  id: Contains(System.Fabric.TransactionBase,System.String)
  parent: System.Fabric.KeyValueStoreReplica
  langs:
  - csharp
  - vb
  name: Contains(TransactionBase, String)
  nameWithType: KeyValueStoreReplica.Contains(TransactionBase, String)
  fullName: System.Fabric.KeyValueStoreReplica.Contains(System.Fabric.TransactionBase, System.String)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/KeyValueStoreReplica.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: Contains
    path: src/prod/src/managed/Api/src/System/Fabric/KeyValueStoreReplica.cs
    startLine: 812
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Determines whether a value is contained in the key/value store.</p>\n"
  example: []
  syntax:
    content: public bool Contains(TransactionBase transactionBase, string key)
    content.vb: Public Function Contains(transactionBase As TransactionBase, key As String) As Boolean
    parameters:
    - id: transactionBase
      type: System.Fabric.TransactionBase
      description: "\n<p>The transaction instance.</p>\n"
    - id: key
      type: System.String
      description: "\n<p>The key or index of the value to look up (as a string). Limited to 800 characters in length.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the value is contained in the key/value store; <strong>false</strong>, otherwise.</p>\n"
  overload: System.Fabric.KeyValueStoreReplica.Contains*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.KeyValueStoreReplica.Get(System.Fabric.TransactionBase,System.String)
  commentId: M:System.Fabric.KeyValueStoreReplica.Get(System.Fabric.TransactionBase,System.String)
  id: Get(System.Fabric.TransactionBase,System.String)
  parent: System.Fabric.KeyValueStoreReplica
  langs:
  - csharp
  - vb
  name: Get(TransactionBase, String)
  nameWithType: KeyValueStoreReplica.Get(TransactionBase, String)
  fullName: System.Fabric.KeyValueStoreReplica.Get(System.Fabric.TransactionBase, System.String)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/KeyValueStoreReplica.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: Get
    path: src/prod/src/managed/Api/src/System/Fabric/KeyValueStoreReplica.cs
    startLine: 837
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Gets the stored value, as a <xref href=\"System.Fabric.KeyValueStoreItem\" data-throw-if-not-resolved=\"false\"></xref> object, associated with the specified key.</p>\n"
  example: []
  syntax:
    content: public KeyValueStoreItem Get(TransactionBase transactionBase, string key)
    content.vb: Public Function Get(transactionBase As TransactionBase, key As String) As KeyValueStoreItem
    parameters:
    - id: transactionBase
      type: System.Fabric.TransactionBase
      description: "\n<p>The transaction instance.</p>\n"
    - id: key
      type: System.String
      description: "\n<p>The key or index of the value to be retrieved (as a string). Limited to 800 characters in length.</p>\n"
    return:
      type: System.Fabric.KeyValueStoreItem
      description: "\n<p>A <xref href=\"System.Fabric.KeyValueStoreItem\" data-throw-if-not-resolved=\"false\"></xref> object representing the stored value.</p>\n"
  overload: System.Fabric.KeyValueStoreReplica.Get*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.KeyValueStoreReplica.TryGet(System.Fabric.TransactionBase,System.String)
  commentId: M:System.Fabric.KeyValueStoreReplica.TryGet(System.Fabric.TransactionBase,System.String)
  id: TryGet(System.Fabric.TransactionBase,System.String)
  parent: System.Fabric.KeyValueStoreReplica
  langs:
  - csharp
  - vb
  name: TryGet(TransactionBase, String)
  nameWithType: KeyValueStoreReplica.TryGet(TransactionBase, String)
  fullName: System.Fabric.KeyValueStoreReplica.TryGet(System.Fabric.TransactionBase, System.String)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/KeyValueStoreReplica.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: TryGet
    path: src/prod/src/managed/Api/src/System/Fabric/KeyValueStoreReplica.cs
    startLine: 856
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\nAttempts to get the stored value, as a <xref href=\"System.Fabric.KeyValueStoreItem\" data-throw-if-not-resolved=\"false\"></xref> object, associated with the specified key.\n"
  example: []
  syntax:
    content: public KeyValueStoreItem TryGet(TransactionBase transactionBase, string key)
    content.vb: Public Function TryGet(transactionBase As TransactionBase, key As String) As KeyValueStoreItem
    parameters:
    - id: transactionBase
      type: System.Fabric.TransactionBase
      description: The transaction instance.
    - id: key
      type: System.String
      description: The key, or index, of the value to be retrieved (as a string). Limited to 800 characters in length.
    return:
      type: System.Fabric.KeyValueStoreItem
      description: A <xref href="System.Fabric.KeyValueStoreItem" data-throw-if-not-resolved="false"></xref> object representing the stored value or null if the specified key does not exist.
  overload: System.Fabric.KeyValueStoreReplica.TryGet*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.KeyValueStoreReplica.GetValue(System.Fabric.TransactionBase,System.String)
  commentId: M:System.Fabric.KeyValueStoreReplica.GetValue(System.Fabric.TransactionBase,System.String)
  id: GetValue(System.Fabric.TransactionBase,System.String)
  parent: System.Fabric.KeyValueStoreReplica
  langs:
  - csharp
  - vb
  name: GetValue(TransactionBase, String)
  nameWithType: KeyValueStoreReplica.GetValue(TransactionBase, String)
  fullName: System.Fabric.KeyValueStoreReplica.GetValue(System.Fabric.TransactionBase, System.String)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/KeyValueStoreReplica.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: GetValue
    path: src/prod/src/managed/Api/src/System/Fabric/KeyValueStoreReplica.cs
    startLine: 881
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Gets the stored value as a byte array, associated with the specified key.</p>\n"
  example: []
  syntax:
    content: public byte[] GetValue(TransactionBase transactionBase, string key)
    content.vb: Public Function GetValue(transactionBase As TransactionBase, key As String) As Byte()
    parameters:
    - id: transactionBase
      type: System.Fabric.TransactionBase
      description: "\n<p>The transaction instance.</p>\n"
    - id: key
      type: System.String
      description: "\n<p>The key or index of the value to be retrieved (as a string). Limited to 800 characters in length.</p>\n"
    return:
      type: System.Byte[]
      description: "\n<p>A byte array representing the stored value.</p>\n"
  overload: System.Fabric.KeyValueStoreReplica.GetValue*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.KeyValueStoreReplica.TryGetValue(System.Fabric.TransactionBase,System.String)
  commentId: M:System.Fabric.KeyValueStoreReplica.TryGetValue(System.Fabric.TransactionBase,System.String)
  id: TryGetValue(System.Fabric.TransactionBase,System.String)
  parent: System.Fabric.KeyValueStoreReplica
  langs:
  - csharp
  - vb
  name: TryGetValue(TransactionBase, String)
  nameWithType: KeyValueStoreReplica.TryGetValue(TransactionBase, String)
  fullName: System.Fabric.KeyValueStoreReplica.TryGetValue(System.Fabric.TransactionBase, System.String)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/KeyValueStoreReplica.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: TryGetValue
    path: src/prod/src/managed/Api/src/System/Fabric/KeyValueStoreReplica.cs
    startLine: 900
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\nAttempts to get the stored value as a byte array, associated with the specified key.\n"
  example: []
  syntax:
    content: public byte[] TryGetValue(TransactionBase transactionBase, string key)
    content.vb: Public Function TryGetValue(transactionBase As TransactionBase, key As String) As Byte()
    parameters:
    - id: transactionBase
      type: System.Fabric.TransactionBase
      description: The transaction instance.
    - id: key
      type: System.String
      description: The key, or index, of the value to be retrieved (as a string). Limited to 800 characters in length.
    return:
      type: System.Byte[]
      description: A byte array representing the stored value or null if the specified key does not exist.
  overload: System.Fabric.KeyValueStoreReplica.TryGetValue*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.KeyValueStoreReplica.GetMetadata(System.Fabric.TransactionBase,System.String)
  commentId: M:System.Fabric.KeyValueStoreReplica.GetMetadata(System.Fabric.TransactionBase,System.String)
  id: GetMetadata(System.Fabric.TransactionBase,System.String)
  parent: System.Fabric.KeyValueStoreReplica
  langs:
  - csharp
  - vb
  name: GetMetadata(TransactionBase, String)
  nameWithType: KeyValueStoreReplica.GetMetadata(TransactionBase, String)
  fullName: System.Fabric.KeyValueStoreReplica.GetMetadata(System.Fabric.TransactionBase, System.String)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/KeyValueStoreReplica.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: GetMetadata
    path: src/prod/src/managed/Api/src/System/Fabric/KeyValueStoreReplica.cs
    startLine: 925
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Gets the metadata, as a <xref href=\"System.Fabric.KeyValueStoreItemMetadata\" data-throw-if-not-resolved=\"false\"></xref> object, for the value associated with the specified key.</p>\n"
  example: []
  syntax:
    content: public KeyValueStoreItemMetadata GetMetadata(TransactionBase transactionBase, string key)
    content.vb: Public Function GetMetadata(transactionBase As TransactionBase, key As String) As KeyValueStoreItemMetadata
    parameters:
    - id: transactionBase
      type: System.Fabric.TransactionBase
      description: "\n<p>The transaction instance.</p>\n"
    - id: key
      type: System.String
      description: "\n<p>The key or index of the value to be retrieved (as a string). Limited to 800 characters in length.</p>\n"
    return:
      type: System.Fabric.KeyValueStoreItemMetadata
      description: "\n<p>A <xref href=\"System.Fabric.KeyValueStoreItemMetadata\" data-throw-if-not-resolved=\"false\"></xref> object representing the metadata associated with the specified value.</p>\n"
  overload: System.Fabric.KeyValueStoreReplica.GetMetadata*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.KeyValueStoreReplica.TryGetMetadata(System.Fabric.TransactionBase,System.String)
  commentId: M:System.Fabric.KeyValueStoreReplica.TryGetMetadata(System.Fabric.TransactionBase,System.String)
  id: TryGetMetadata(System.Fabric.TransactionBase,System.String)
  parent: System.Fabric.KeyValueStoreReplica
  langs:
  - csharp
  - vb
  name: TryGetMetadata(TransactionBase, String)
  nameWithType: KeyValueStoreReplica.TryGetMetadata(TransactionBase, String)
  fullName: System.Fabric.KeyValueStoreReplica.TryGetMetadata(System.Fabric.TransactionBase, System.String)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/KeyValueStoreReplica.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: TryGetMetadata
    path: src/prod/src/managed/Api/src/System/Fabric/KeyValueStoreReplica.cs
    startLine: 944
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\nAttempts to get the metadata as a <xref href=\"System.Fabric.KeyValueStoreItemMetadata\" data-throw-if-not-resolved=\"false\"></xref> object, for the value associated with the specified key.\n"
  example: []
  syntax:
    content: public KeyValueStoreItemMetadata TryGetMetadata(TransactionBase transactionBase, string key)
    content.vb: Public Function TryGetMetadata(transactionBase As TransactionBase, key As String) As KeyValueStoreItemMetadata
    parameters:
    - id: transactionBase
      type: System.Fabric.TransactionBase
      description: The transaction instance.
    - id: key
      type: System.String
      description: The key, or index, of the value to be retrieved (as a string). Limited to 800 characters in length.
    return:
      type: System.Fabric.KeyValueStoreItemMetadata
      description: A <xref href="System.Fabric.KeyValueStoreItemMetadata" data-throw-if-not-resolved="false"></xref> object representing the metadata associated with the specified value or null if the specified key does not exist.
  overload: System.Fabric.KeyValueStoreReplica.TryGetMetadata*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.KeyValueStoreReplica.Enumerate(System.Fabric.TransactionBase)
  commentId: M:System.Fabric.KeyValueStoreReplica.Enumerate(System.Fabric.TransactionBase)
  id: Enumerate(System.Fabric.TransactionBase)
  parent: System.Fabric.KeyValueStoreReplica
  langs:
  - csharp
  - vb
  name: Enumerate(TransactionBase)
  nameWithType: KeyValueStoreReplica.Enumerate(TransactionBase)
  fullName: System.Fabric.KeyValueStoreReplica.Enumerate(System.Fabric.TransactionBase)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/KeyValueStoreReplica.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: Enumerate
    path: src/prod/src/managed/Api/src/System/Fabric/KeyValueStoreReplica.cs
    startLine: 966
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Returns an enumerator that iterates through the <xref href=\"System.Fabric.KeyValueStoreItem\" data-throw-if-not-resolved=\"false\"></xref> values in the key/value store.</p>\n"
  example: []
  syntax:
    content: public IEnumerator<KeyValueStoreItem> Enumerate(TransactionBase transactionBase)
    content.vb: Public Function Enumerate(transactionBase As TransactionBase) As IEnumerator(Of KeyValueStoreItem)
    parameters:
    - id: transactionBase
      type: System.Fabric.TransactionBase
      description: "\n<p>The transaction instance.</p>\n"
    return:
      type: System.Collections.Generic.IEnumerator{System.Fabric.KeyValueStoreItem}
      description: "\n<p>A <xref href=\"System.Fabric.KeyValueStoreItem\" data-throw-if-not-resolved=\"false\"></xref> enumerator.</p>\n"
  overload: System.Fabric.KeyValueStoreReplica.Enumerate*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.KeyValueStoreReplica.Enumerate(System.Fabric.TransactionBase,System.String)
  commentId: M:System.Fabric.KeyValueStoreReplica.Enumerate(System.Fabric.TransactionBase,System.String)
  id: Enumerate(System.Fabric.TransactionBase,System.String)
  parent: System.Fabric.KeyValueStoreReplica
  langs:
  - csharp
  - vb
  name: Enumerate(TransactionBase, String)
  nameWithType: KeyValueStoreReplica.Enumerate(TransactionBase, String)
  fullName: System.Fabric.KeyValueStoreReplica.Enumerate(System.Fabric.TransactionBase, System.String)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/KeyValueStoreReplica.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: Enumerate
    path: src/prod/src/managed/Api/src/System/Fabric/KeyValueStoreReplica.cs
    startLine: 993
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Returns an enumerator that iterates through the <xref href=\"System.Fabric.KeyValueStoreItem\" data-throw-if-not-resolved=\"false\"></xref> values in the key/value store, where the value keys match the specified key prefix.</p>\n"
  remarks: "\nEquivalent to calling <xref href=\"System.Fabric.KeyValueStoreReplica.Enumerate(System.Fabric.TransactionBase%2cSystem.String%2cSystem.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> with <strong>strictPrefix</strong> set to <strong>true</strong>.\n"
  example: []
  syntax:
    content: public IEnumerator<KeyValueStoreItem> Enumerate(TransactionBase transactionBase, string keyPrefix)
    content.vb: Public Function Enumerate(transactionBase As TransactionBase, keyPrefix As String) As IEnumerator(Of KeyValueStoreItem)
    parameters:
    - id: transactionBase
      type: System.Fabric.TransactionBase
      description: "\n<p>The transaction instance.</p>\n"
    - id: keyPrefix
      type: System.String
      description: "\n<p>The key, or index, prefix to match (as a string). Limited to 800 characters in length.</p>\n"
    return:
      type: System.Collections.Generic.IEnumerator{System.Fabric.KeyValueStoreItem}
      description: "\n<p>A <xref href=\"System.Fabric.KeyValueStoreItem\" data-throw-if-not-resolved=\"false\"></xref> enumerator.</p>\n"
  overload: System.Fabric.KeyValueStoreReplica.Enumerate*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.KeyValueStoreReplica.Enumerate(System.Fabric.TransactionBase,System.String,System.Boolean)
  commentId: M:System.Fabric.KeyValueStoreReplica.Enumerate(System.Fabric.TransactionBase,System.String,System.Boolean)
  id: Enumerate(System.Fabric.TransactionBase,System.String,System.Boolean)
  parent: System.Fabric.KeyValueStoreReplica
  langs:
  - csharp
  - vb
  name: Enumerate(TransactionBase, String, Boolean)
  nameWithType: KeyValueStoreReplica.Enumerate(TransactionBase, String, Boolean)
  fullName: System.Fabric.KeyValueStoreReplica.Enumerate(System.Fabric.TransactionBase, System.String, System.Boolean)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/KeyValueStoreReplica.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: Enumerate
    path: src/prod/src/managed/Api/src/System/Fabric/KeyValueStoreReplica.cs
    startLine: 1005
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\nReturns an enumerator that iterates through the <xref href=\"System.Fabric.KeyValueStoreItem\" data-throw-if-not-resolved=\"false\"></xref> values in the key/value store.\n"
  example: []
  syntax:
    content: public IEnumerator<KeyValueStoreItem> Enumerate(TransactionBase transactionBase, string keyPrefix, bool strictPrefix)
    content.vb: Public Function Enumerate(transactionBase As TransactionBase, keyPrefix As String, strictPrefix As Boolean) As IEnumerator(Of KeyValueStoreItem)
    parameters:
    - id: transactionBase
      type: System.Fabric.TransactionBase
      description: The transaction instance.
    - id: keyPrefix
      type: System.String
      description: The key, or index, prefix to match (as a string). Limited to 800 characters in length.
    - id: strictPrefix
      type: System.Boolean
      description: When true, only keys prefixed by the value specified for <strong>keyPrefix</strong> are returned. Otherwise, enumeration starts at the first key matching or lexicographically greater than <strong>keyPrefix</strong> and continues until there are no more keys. The default is <strong>true</strong>.
    return:
      type: System.Collections.Generic.IEnumerator{System.Fabric.KeyValueStoreItem}
      description: A <xref href="System.Fabric.KeyValueStoreItem" data-throw-if-not-resolved="false"></xref> enumerator.
  overload: System.Fabric.KeyValueStoreReplica.Enumerate*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.KeyValueStoreReplica.EnumerateMetadata(System.Fabric.TransactionBase)
  commentId: M:System.Fabric.KeyValueStoreReplica.EnumerateMetadata(System.Fabric.TransactionBase)
  id: EnumerateMetadata(System.Fabric.TransactionBase)
  parent: System.Fabric.KeyValueStoreReplica
  langs:
  - csharp
  - vb
  name: EnumerateMetadata(TransactionBase)
  nameWithType: KeyValueStoreReplica.EnumerateMetadata(TransactionBase)
  fullName: System.Fabric.KeyValueStoreReplica.EnumerateMetadata(System.Fabric.TransactionBase)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/KeyValueStoreReplica.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: EnumerateMetadata
    path: src/prod/src/managed/Api/src/System/Fabric/KeyValueStoreReplica.cs
    startLine: 1027
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Returns an enumerator that iterates through the <xref href=\"System.Fabric.KeyValueStoreItemMetadata\" data-throw-if-not-resolved=\"false\"></xref> values in the key/value store.</p>\n"
  example: []
  syntax:
    content: public IEnumerator<KeyValueStoreItemMetadata> EnumerateMetadata(TransactionBase transactionBase)
    content.vb: Public Function EnumerateMetadata(transactionBase As TransactionBase) As IEnumerator(Of KeyValueStoreItemMetadata)
    parameters:
    - id: transactionBase
      type: System.Fabric.TransactionBase
      description: "\n<p>The transaction instance.</p>\n"
    return:
      type: System.Collections.Generic.IEnumerator{System.Fabric.KeyValueStoreItemMetadata}
      description: "\n<p>A <xref href=\"System.Fabric.KeyValueStoreItemMetadata\" data-throw-if-not-resolved=\"false\"></xref> enumerator.</p>\n"
  overload: System.Fabric.KeyValueStoreReplica.EnumerateMetadata*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.KeyValueStoreReplica.EnumerateMetadata(System.Fabric.TransactionBase,System.String)
  commentId: M:System.Fabric.KeyValueStoreReplica.EnumerateMetadata(System.Fabric.TransactionBase,System.String)
  id: EnumerateMetadata(System.Fabric.TransactionBase,System.String)
  parent: System.Fabric.KeyValueStoreReplica
  langs:
  - csharp
  - vb
  name: EnumerateMetadata(TransactionBase, String)
  nameWithType: KeyValueStoreReplica.EnumerateMetadata(TransactionBase, String)
  fullName: System.Fabric.KeyValueStoreReplica.EnumerateMetadata(System.Fabric.TransactionBase, System.String)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/KeyValueStoreReplica.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: EnumerateMetadata
    path: src/prod/src/managed/Api/src/System/Fabric/KeyValueStoreReplica.cs
    startLine: 1054
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Returns an enumerator that iterates through the <xref href=\"System.Fabric.KeyValueStoreItemMetadata\" data-throw-if-not-resolved=\"false\"></xref> values in the key/value store, where the value keys match the specified key prefix.</p>\n"
  remarks: "\nEquivalent to calling <xref href=\"System.Fabric.KeyValueStoreReplica.EnumerateMetadata(System.Fabric.TransactionBase%2cSystem.String%2cSystem.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> with <strong>strictPrefix</strong> set to <strong>true</strong>.\n"
  example: []
  syntax:
    content: public IEnumerator<KeyValueStoreItemMetadata> EnumerateMetadata(TransactionBase transactionBase, string keyPrefix)
    content.vb: Public Function EnumerateMetadata(transactionBase As TransactionBase, keyPrefix As String) As IEnumerator(Of KeyValueStoreItemMetadata)
    parameters:
    - id: transactionBase
      type: System.Fabric.TransactionBase
      description: "\n<p>The transaction instance.</p>\n"
    - id: keyPrefix
      type: System.String
      description: "\n<p>The key, or index, prefix to match (as a string). Limited to 800 characters in length.</p>\n"
    return:
      type: System.Collections.Generic.IEnumerator{System.Fabric.KeyValueStoreItemMetadata}
      description: "\n<p>A <xref href=\"System.Fabric.KeyValueStoreItemMetadata\" data-throw-if-not-resolved=\"false\"></xref> enumerator.</p>\n"
  overload: System.Fabric.KeyValueStoreReplica.EnumerateMetadata*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.KeyValueStoreReplica.EnumerateMetadata(System.Fabric.TransactionBase,System.String,System.Boolean)
  commentId: M:System.Fabric.KeyValueStoreReplica.EnumerateMetadata(System.Fabric.TransactionBase,System.String,System.Boolean)
  id: EnumerateMetadata(System.Fabric.TransactionBase,System.String,System.Boolean)
  parent: System.Fabric.KeyValueStoreReplica
  langs:
  - csharp
  - vb
  name: EnumerateMetadata(TransactionBase, String, Boolean)
  nameWithType: KeyValueStoreReplica.EnumerateMetadata(TransactionBase, String, Boolean)
  fullName: System.Fabric.KeyValueStoreReplica.EnumerateMetadata(System.Fabric.TransactionBase, System.String, System.Boolean)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/KeyValueStoreReplica.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: EnumerateMetadata
    path: src/prod/src/managed/Api/src/System/Fabric/KeyValueStoreReplica.cs
    startLine: 1066
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\nReturns an enumerator that iterates through the <xref href=\"System.Fabric.KeyValueStoreItemMetadata\" data-throw-if-not-resolved=\"false\"></xref> values in the key/value store.\n"
  example: []
  syntax:
    content: public IEnumerator<KeyValueStoreItemMetadata> EnumerateMetadata(TransactionBase transactionBase, string keyPrefix, bool strictPrefix)
    content.vb: Public Function EnumerateMetadata(transactionBase As TransactionBase, keyPrefix As String, strictPrefix As Boolean) As IEnumerator(Of KeyValueStoreItemMetadata)
    parameters:
    - id: transactionBase
      type: System.Fabric.TransactionBase
      description: The transaction instance.
    - id: keyPrefix
      type: System.String
      description: The key, or index, prefix to match (as a string). Limited to 800 characters in length.
    - id: strictPrefix
      type: System.Boolean
      description: When true, only keys prefixed by the value specified for <strong>keyPrefix</strong> are returned. Otherwise, enumeration starts at the first key matching or lexicographically greater than <strong>keyPrefix</strong> and continues until there are no more keys. The default is <strong>true</strong>.
    return:
      type: System.Collections.Generic.IEnumerator{System.Fabric.KeyValueStoreItemMetadata}
      description: A <xref href="System.Fabric.KeyValueStoreItemMetadata" data-throw-if-not-resolved="false"></xref> enumerator.
  overload: System.Fabric.KeyValueStoreReplica.EnumerateMetadata*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.KeyValueStoreReplica.Backup(System.String)
  commentId: M:System.Fabric.KeyValueStoreReplica.Backup(System.String)
  id: Backup(System.String)
  parent: System.Fabric.KeyValueStoreReplica
  langs:
  - csharp
  - vb
  name: Backup(String)
  nameWithType: KeyValueStoreReplica.Backup(String)
  fullName: System.Fabric.KeyValueStoreReplica.Backup(System.String)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/KeyValueStoreReplica.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: Backup
    path: src/prod/src/managed/Api/src/System/Fabric/KeyValueStoreReplica.cs
    startLine: 1094
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>DEPRECATED. Performs a full backup of the replica's local store to the specified destination directory. </p>\n"
  remarks: "\n<p>\nThis method is obsolete. Use <xref href=\"System.Fabric.KeyValueStoreReplica.BackupAsync(System.String%2cSystem.Fabric.StoreBackupOption%2cSystem.Func%7bSystem.Fabric.StoreBackupInfo%2cSystem.Threading.Tasks.Task%7bSystem.Boolean%7d%7d)\" data-throw-if-not-resolved=\"false\"></xref> instead.</p>\n<p>\nIncremental backups are not supported after creating a full backup using this method. \nUse <xref href=\"System.Fabric.KeyValueStoreReplica.BackupAsync(System.String%2cSystem.Fabric.StoreBackupOption%2cSystem.Func%7bSystem.Fabric.StoreBackupInfo%2cSystem.Threading.Tasks.Task%7bSystem.Boolean%7d%7d)\" data-throw-if-not-resolved=\"false\"></xref> to create\na full backup if subsequent incremental backups are to be created.\n</p>\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use BackupAsync instead")]

      public void Backup(string backupDirectory)
    content.vb: >-
      <Obsolete("Use BackupAsync instead")>

      Public Sub Backup(backupDirectory As String)
    parameters:
    - id: backupDirectory
      type: System.String
      description: "\n<p>The full path of the backup destination directory.</p>\n"
  overload: System.Fabric.KeyValueStoreReplica.Backup*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use BackupAsync instead
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.KeyValueStoreReplica.BackupAsync(System.String,System.Fabric.StoreBackupOption,System.Func{System.Fabric.StoreBackupInfo,System.Threading.Tasks.Task{System.Boolean}})
  commentId: M:System.Fabric.KeyValueStoreReplica.BackupAsync(System.String,System.Fabric.StoreBackupOption,System.Func{System.Fabric.StoreBackupInfo,System.Threading.Tasks.Task{System.Boolean}})
  id: BackupAsync(System.String,System.Fabric.StoreBackupOption,System.Func{System.Fabric.StoreBackupInfo,System.Threading.Tasks.Task{System.Boolean}})
  parent: System.Fabric.KeyValueStoreReplica
  langs:
  - csharp
  - vb
  name: BackupAsync(String, StoreBackupOption, Func<StoreBackupInfo, Task<Boolean>>)
  nameWithType: KeyValueStoreReplica.BackupAsync(String, StoreBackupOption, Func<StoreBackupInfo, Task<Boolean>>)
  fullName: System.Fabric.KeyValueStoreReplica.BackupAsync(System.String, System.Fabric.StoreBackupOption, System.Func<System.Fabric.StoreBackupInfo, System.Threading.Tasks.Task<System.Boolean>>)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/KeyValueStoreReplica.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: BackupAsync
    path: src/prod/src/managed/Api/src/System/Fabric/KeyValueStoreReplica.cs
    startLine: 1148
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Asynchronously creates a backup of the key/value store.</p>\n"
  remarks: "\nThe <strong>postBackupAsyncFunc</strong> is not invoked if there is an error during backup. Also, it is not invoked when \n<strong>backupOption</strong> is <xref href=\"System.Fabric.StoreBackupOption.TruncateLogsOnly\" data-throw-if-not-resolved=\"false\"></xref> since there is no further action needed\nfrom the user in this case to complete a single backup cycle.\n"
  example:
  - "\nBelow is an example of a simple implementation of <strong>postBackupAsyncFunc</strong>\n<pre><code>private async Task&lt;bool&gt; SimplePostBackupHandler(StoreBackupInfo info)\n{\n    return await CopyBackupToAzureBlobStorage(info);\n}</code></pre>\n"
  syntax:
    content: public Task BackupAsync(string backupDirectory, StoreBackupOption backupOption, Func<StoreBackupInfo, Task<bool>> postBackupAsyncFunc)
    content.vb: Public Function BackupAsync(backupDirectory As String, backupOption As StoreBackupOption, postBackupAsyncFunc As Func(Of StoreBackupInfo, Task(Of Boolean))) As Task
    parameters:
    - id: backupDirectory
      type: System.String
      description: "\nThe directory where the backup is to be stored. \nIf <strong>backupOption</strong> is <xref href=\"System.Fabric.StoreBackupOption.TruncateLogsOnly\" data-throw-if-not-resolved=\"false\"></xref>, then this parameter should be <strong>null</strong>.\nOtherwise, this parameter cannot be <strong>null</strong>, empty or contain just whitespace. \nUNC paths may also be provided.\nIf the directory doesn't exist, it is created. If it exists and isn't empty, then incremental backup fails with\n<xref href=\"System.Fabric.FabricBackupDirectoryNotEmptyException\" data-throw-if-not-resolved=\"false\"></xref>.\n"
    - id: backupOption
      type: System.Fabric.StoreBackupOption
      description: "\n<p>The options for the backup.</p>\n"
    - id: postBackupAsyncFunc
      type: System.Func{System.Fabric.StoreBackupInfo,System.Threading.Tasks.Task{System.Boolean}}
      description: "\nThe post backup asynchronous method that is invoked by Service Fabric to allow the user to complete\nany post backup activity before returning control to the system.\nIf <strong>null</strong> is passed in for this, incremental backups are disallowed.\nIf the post-backup method returns false, then again, incremental backups are disallowed.\n"
    return:
      type: System.Threading.Tasks.Task
      description: A task that represents the asynchronous backup operation.
  overload: System.Fabric.KeyValueStoreReplica.BackupAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<strong>backupDirectory</strong> is <strong>null</strong> when <strong>backupOption</strong> is not <xref href=\"System.Fabric.StoreBackupOption.TruncateLogsOnly\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<strong>backupDirectory</strong> is empty or contains just whitespaces when <strong>backupOption</strong> is not <xref href=\"System.Fabric.StoreBackupOption.TruncateLogsOnly\" data-throw-if-not-resolved=\"false\"></xref> or\n<strong>backupDirectory</strong> is not <strong>null</strong> when <strong>backupOption</strong> is <xref href=\"System.Fabric.StoreBackupOption.TruncateLogsOnly\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  - type: System.Fabric.FabricBackupDirectoryNotEmptyException
    commentId: T:System.Fabric.FabricBackupDirectoryNotEmptyException
    description: "\nWhen <strong>backupOption</strong> is <xref href=\"System.Fabric.StoreBackupOption.Incremental\" data-throw-if-not-resolved=\"false\"></xref> and the backup directory already contains files or sub-directories.        \n"
  - type: System.Fabric.FabricBackupInProgressException
    commentId: T:System.Fabric.FabricBackupInProgressException
    description: "\nWhen a previously initiated backup is currently in progress.\n"
  nameWithType.vb: KeyValueStoreReplica.BackupAsync(String, StoreBackupOption, Func(Of StoreBackupInfo, Task(Of Boolean)))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Fabric.KeyValueStoreReplica.BackupAsync(System.String, System.Fabric.StoreBackupOption, System.Func(Of System.Fabric.StoreBackupInfo, System.Threading.Tasks.Task(Of System.Boolean)))
  name.vb: BackupAsync(String, StoreBackupOption, Func(Of StoreBackupInfo, Task(Of Boolean)))
- uid: System.Fabric.KeyValueStoreReplica.BackupAsync(System.String,System.Fabric.StoreBackupOption,System.Func{System.Fabric.StoreBackupInfo,System.Threading.Tasks.Task{System.Boolean}},System.Threading.CancellationToken)
  commentId: M:System.Fabric.KeyValueStoreReplica.BackupAsync(System.String,System.Fabric.StoreBackupOption,System.Func{System.Fabric.StoreBackupInfo,System.Threading.Tasks.Task{System.Boolean}},System.Threading.CancellationToken)
  id: BackupAsync(System.String,System.Fabric.StoreBackupOption,System.Func{System.Fabric.StoreBackupInfo,System.Threading.Tasks.Task{System.Boolean}},System.Threading.CancellationToken)
  parent: System.Fabric.KeyValueStoreReplica
  langs:
  - csharp
  - vb
  name: BackupAsync(String, StoreBackupOption, Func<StoreBackupInfo, Task<Boolean>>, CancellationToken)
  nameWithType: KeyValueStoreReplica.BackupAsync(String, StoreBackupOption, Func<StoreBackupInfo, Task<Boolean>>, CancellationToken)
  fullName: System.Fabric.KeyValueStoreReplica.BackupAsync(System.String, System.Fabric.StoreBackupOption, System.Func<System.Fabric.StoreBackupInfo, System.Threading.Tasks.Task<System.Boolean>>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/KeyValueStoreReplica.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: BackupAsync
    path: src/prod/src/managed/Api/src/System/Fabric/KeyValueStoreReplica.cs
    startLine: 1205
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\nAsynchronously creates a backup of the key/value store.\n"
  remarks: "\nThe <strong>postBackupAsyncFunc</strong> is not invoked if there is an error during backup. Also, it is not invoked when \n<strong>backupOption</strong> is <xref href=\"System.Fabric.StoreBackupOption.TruncateLogsOnly\" data-throw-if-not-resolved=\"false\"></xref> since there is no further action needed\nfrom the user in this case to complete a single backup cycle.\n"
  example:
  - "\nBelow is an example of a simple implementation of <strong>postBackupAsyncFunc</strong>\n<pre><code>private async Task&lt;bool&gt; SimplePostBackupHandler(StoreBackupInfo info)\n{\n    return await CopyBackupToAzureBlobStorage(info);\n}</code></pre>\n"
  syntax:
    content: public Task BackupAsync(string backupDirectory, StoreBackupOption backupOption, Func<StoreBackupInfo, Task<bool>> postBackupAsyncFunc, CancellationToken cancellationToken)
    content.vb: Public Function BackupAsync(backupDirectory As String, backupOption As StoreBackupOption, postBackupAsyncFunc As Func(Of StoreBackupInfo, Task(Of Boolean)), cancellationToken As CancellationToken) As Task
    parameters:
    - id: backupDirectory
      type: System.String
      description: "\nThe directory where the backup is to be stored. \nIf <strong>backupOption</strong> is <xref href=\"System.Fabric.StoreBackupOption.TruncateLogsOnly\" data-throw-if-not-resolved=\"false\"></xref>, then this parameter should be <strong>null</strong>.\nOtherwise, this parameter cannot be <strong>null</strong>, empty or contain just whitespace. \nUNC paths may also be provided.\nIf the directory doesn't exist, it is created. If it exists and isn't empty, then incremental backup fails with\n<xref href=\"System.Fabric.FabricBackupDirectoryNotEmptyException\" data-throw-if-not-resolved=\"false\"></xref>.\n"
    - id: backupOption
      type: System.Fabric.StoreBackupOption
      description: "\n<p>The options for the backup.</p>\n"
    - id: postBackupAsyncFunc
      type: System.Func{System.Fabric.StoreBackupInfo,System.Threading.Tasks.Task{System.Boolean}}
      description: "\nThe post backup asynchronous method that is invoked by Service Fabric to allow the user to complete\nany post backup activity before returning control to the system.\nIf <strong>null</strong> is passed in for this, incremental backups are disallowed.\nIf the post-backup method returns false, then again, incremental backups are disallowed.\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The token to monitor for cancellation requests.
    return:
      type: System.Threading.Tasks.Task
      description: A task that represents the asynchronous backup operation.
  overload: System.Fabric.KeyValueStoreReplica.BackupAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<strong>backupDirectory</strong> is <strong>null</strong> when <strong>backupOption</strong> is not <xref href=\"System.Fabric.StoreBackupOption.TruncateLogsOnly\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<strong>backupDirectory</strong> is empty or contains just whitespaces when <strong>backupOption</strong> is not <xref href=\"System.Fabric.StoreBackupOption.TruncateLogsOnly\" data-throw-if-not-resolved=\"false\"></xref> or\n<strong>backupDirectory</strong> is not <strong>null</strong> when <strong>backupOption</strong> is <xref href=\"System.Fabric.StoreBackupOption.TruncateLogsOnly\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  - type: System.Fabric.FabricBackupDirectoryNotEmptyException
    commentId: T:System.Fabric.FabricBackupDirectoryNotEmptyException
    description: "\nWhen <strong>backupOption</strong> is <xref href=\"System.Fabric.StoreBackupOption.Incremental\" data-throw-if-not-resolved=\"false\"></xref> and the backup directory already contains files or sub-directories.        \n"
  - type: System.Fabric.FabricBackupInProgressException
    commentId: T:System.Fabric.FabricBackupInProgressException
    description: "\nWhen a previously initiated backup is currently in progress.\n"
  nameWithType.vb: KeyValueStoreReplica.BackupAsync(String, StoreBackupOption, Func(Of StoreBackupInfo, Task(Of Boolean)), CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Fabric.KeyValueStoreReplica.BackupAsync(System.String, System.Fabric.StoreBackupOption, System.Func(Of System.Fabric.StoreBackupInfo, System.Threading.Tasks.Task(Of System.Boolean)), System.Threading.CancellationToken)
  name.vb: BackupAsync(String, StoreBackupOption, Func(Of StoreBackupInfo, Task(Of Boolean)), CancellationToken)
- uid: System.Fabric.KeyValueStoreReplica.Restore(System.String)
  commentId: M:System.Fabric.KeyValueStoreReplica.Restore(System.String)
  id: Restore(System.String)
  parent: System.Fabric.KeyValueStoreReplica
  langs:
  - csharp
  - vb
  name: Restore(String)
  nameWithType: KeyValueStoreReplica.Restore(String)
  fullName: System.Fabric.KeyValueStoreReplica.Restore(System.String)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/KeyValueStoreReplica.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: Restore
    path: src/prod/src/managed/Api/src/System/Fabric/KeyValueStoreReplica.cs
    startLine: 1245
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Restores this replica's local store database from a backup that was previously created by calling <xref href=\"System.Fabric.KeyValueStoreReplica.BackupAsync(System.String%2cSystem.Fabric.StoreBackupOption%2cSystem.Func%7bSystem.Fabric.StoreBackupInfo%2cSystem.Threading.Tasks.Task%7bSystem.Boolean%7d%7d)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>This is only a local replica restore and the replica set is not automatically restored. The entire replica set must be restored by taking additional steps to cause a natural build of other replicas via reconfiguration. The recommended approach is to restore to an empty service with only a single replica and increase the target replica set size afterwards with a call to <xref href=\"System.Fabric.FabricClient.ServiceManagementClient.UpdateServiceAsync(System.Uri%2cSystem.Fabric.Description.ServiceUpdateDescription)\" data-throw-if-not-resolved=\"false\"></xref> if needed.</p>\n<p>If the restore is successful, then the replica will restart itself and start using the restored local data after coming back online given that the recommendation to restore to a replica set containing only a single replica was followed.</p>\n"
  example: []
  syntax:
    content: >-
      [Obsolete("Use RestoreAsync instead")]

      public void Restore(string backupDirectory)
    content.vb: >-
      <Obsolete("Use RestoreAsync instead")>

      Public Sub Restore(backupDirectory As String)
    parameters:
    - id: backupDirectory
      type: System.String
      description: "\n<p>The full path to a directory containing a backup.</p>\n"
  overload: System.Fabric.KeyValueStoreReplica.Restore*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Use RestoreAsync instead
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.KeyValueStoreReplica.RestoreAsync(System.String)
  commentId: M:System.Fabric.KeyValueStoreReplica.RestoreAsync(System.String)
  id: RestoreAsync(System.String)
  parent: System.Fabric.KeyValueStoreReplica
  langs:
  - csharp
  - vb
  name: RestoreAsync(String)
  nameWithType: KeyValueStoreReplica.RestoreAsync(String)
  fullName: System.Fabric.KeyValueStoreReplica.RestoreAsync(System.String)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/KeyValueStoreReplica.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: RestoreAsync
    path: src/prod/src/managed/Api/src/System/Fabric/KeyValueStoreReplica.cs
    startLine: 1279
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Restores this replica's local store database from a backup that was previously created by calling <xref href=\"System.Fabric.KeyValueStoreReplica.BackupAsync(System.String%2cSystem.Fabric.StoreBackupOption%2cSystem.Func%7bSystem.Fabric.StoreBackupInfo%2cSystem.Threading.Tasks.Task%7bSystem.Boolean%7d%7d)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>It is recommended to not perform any write operations to the key/value store while \nrestore is underway since the updated data would be lost when the store is restored from\nthe files in <strong>backupDirectory</strong>. </p>\n<p>This is only a local replica restore and the replica set is not automatically restored. The entire replica set must be restored by taking additional steps \nto cause a natural build of other replicas via reconfiguration. The recommended approach is to restore to an empty service with only a single replica and increase the target \nreplica set size afterwards with a call to <xref href=\"System.Fabric.FabricClient.ServiceManagementClient.UpdateServiceAsync(System.Uri%2cSystem.Fabric.Description.ServiceUpdateDescription)\" data-throw-if-not-resolved=\"false\"></xref> if needed.</p>\n<p>If the restore is successful, then the replica will restart itself and start using the restored local data after coming back online \ngiven that the recommendation to restore to a replica set containing only a single replica was followed.</p>\n"
  example: []
  syntax:
    content: public Task RestoreAsync(string backupDirectory)
    content.vb: Public Function RestoreAsync(backupDirectory As String) As Task
    parameters:
    - id: backupDirectory
      type: System.String
      description: "\nThe directory where the replica is to be restored from.\nThis parameter cannot be null, empty or contain just whitespace. \nUNC paths may also be provided.\n"
    return:
      type: System.Threading.Tasks.Task
      description: A task that represents the asynchronous restore operation.
  overload: System.Fabric.KeyValueStoreReplica.RestoreAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<strong>backupDirectory</strong> is <strong>null</strong>.\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<strong>backupDirectory</strong> is empty or contains just whitespaces.\n"
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "\n<strong>backupDirectory</strong> does not exist.\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.KeyValueStoreReplica.RestoreAsync(System.String,System.Threading.CancellationToken)
  commentId: M:System.Fabric.KeyValueStoreReplica.RestoreAsync(System.String,System.Threading.CancellationToken)
  id: RestoreAsync(System.String,System.Threading.CancellationToken)
  parent: System.Fabric.KeyValueStoreReplica
  langs:
  - csharp
  - vb
  name: RestoreAsync(String, CancellationToken)
  nameWithType: KeyValueStoreReplica.RestoreAsync(String, CancellationToken)
  fullName: System.Fabric.KeyValueStoreReplica.RestoreAsync(System.String, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/KeyValueStoreReplica.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: RestoreAsync
    path: src/prod/src/managed/Api/src/System/Fabric/KeyValueStoreReplica.cs
    startLine: 1316
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Restores this replica's local store database from a backup that was previously created by calling <xref href=\"System.Fabric.KeyValueStoreReplica.BackupAsync(System.String%2cSystem.Fabric.StoreBackupOption%2cSystem.Func%7bSystem.Fabric.StoreBackupInfo%2cSystem.Threading.Tasks.Task%7bSystem.Boolean%7d%7d)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>It is recommended to not perform any write operations to the key/value store while \nrestore is underway since the updated data would be lost when the store is restored from\nthe files in <strong>backupDirectory</strong>. </p>\n<p>This is only a local replica restore and the replica set is not automatically restored. The entire replica set must be restored by taking additional steps \nto cause a natural build of other replicas via reconfiguration. The recommended approach is to restore to an empty service with only a single replica and increase the target \nreplica set size afterwards with a call to <xref href=\"System.Fabric.FabricClient.ServiceManagementClient.UpdateServiceAsync(System.Uri%2cSystem.Fabric.Description.ServiceUpdateDescription)\" data-throw-if-not-resolved=\"false\"></xref> if needed.</p>\n<p>If the restore is successful, then the replica will restart itself and start using the restored local data after coming back online \ngiven that the recommendation to restore to a replica set containing only a single replica was followed.</p>\n"
  example: []
  syntax:
    content: public Task RestoreAsync(string backupDirectory, CancellationToken cancellationToken)
    content.vb: Public Function RestoreAsync(backupDirectory As String, cancellationToken As CancellationToken) As Task
    parameters:
    - id: backupDirectory
      type: System.String
      description: "\nThe directory where the replica is to be restored from.\nThis parameter cannot be null, empty or contain just whitespace. \nUNC paths may also be provided.\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The cancellation token</p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: A task that represents the asynchronous restore operation.
  overload: System.Fabric.KeyValueStoreReplica.RestoreAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<strong>backupDirectory</strong> is <strong>null</strong>.\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<strong>backupDirectory</strong> is empty or contains just whitespaces.\n"
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "\n<strong>backupDirectory</strong> does not exist.\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.KeyValueStoreReplica.RestoreAsync(System.String,System.Fabric.RestoreSettings,System.Threading.CancellationToken)
  commentId: M:System.Fabric.KeyValueStoreReplica.RestoreAsync(System.String,System.Fabric.RestoreSettings,System.Threading.CancellationToken)
  id: RestoreAsync(System.String,System.Fabric.RestoreSettings,System.Threading.CancellationToken)
  parent: System.Fabric.KeyValueStoreReplica
  langs:
  - csharp
  - vb
  name: RestoreAsync(String, RestoreSettings, CancellationToken)
  nameWithType: KeyValueStoreReplica.RestoreAsync(String, RestoreSettings, CancellationToken)
  fullName: System.Fabric.KeyValueStoreReplica.RestoreAsync(System.String, System.Fabric.RestoreSettings, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/KeyValueStoreReplica.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: RestoreAsync
    path: src/prod/src/managed/Api/src/System/Fabric/KeyValueStoreReplica.cs
    startLine: 1355
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\nAsynchronously restores the key/value store replica.\n"
  remarks: "\n<p>It is recommended to not perform any write operations to the key/value store while \nrestore is underway since the updated data would be lost when the store is restored from\nthe files in <strong>backupDirectory</strong>. </p>\n<p>This is only a local replica restore and the replica set is not automatically restored. The entire replica set must be restored by taking additional steps \nto cause a natural build of other replicas via reconfiguration. The recommended approach is to restore to an empty service with only a single replica and increase the target \nreplica set size afterwards with a call to <xref href=\"System.Fabric.FabricClient.ServiceManagementClient.UpdateServiceAsync(System.Uri%2cSystem.Fabric.Description.ServiceUpdateDescription)\" data-throw-if-not-resolved=\"false\"></xref> if needed.</p>\n<p>If the restore is successful, then the replica will restart itself and start using the restored local data after coming back online \ngiven that the recommendation to restore to a replica set containing only a single replica was followed.</p>\n"
  example: []
  syntax:
    content: public Task RestoreAsync(string backupDirectory, RestoreSettings settings, CancellationToken cancellationToken)
    content.vb: Public Function RestoreAsync(backupDirectory As String, settings As RestoreSettings, cancellationToken As CancellationToken) As Task
    parameters:
    - id: backupDirectory
      type: System.String
      description: "\nThe directory where the replica is to be restored from.\nThis parameter cannot be null, empty or contain just whitespace. \nUNC paths may also be provided.\n"
    - id: settings
      type: System.Fabric.RestoreSettings
      description: "\nSettings to modify restore behavior.\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The token to monitor for cancellation requests.
    return:
      type: System.Threading.Tasks.Task
      description: A task that represents the asynchronous restore operation.
  overload: System.Fabric.KeyValueStoreReplica.RestoreAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<strong>backupDirectory</strong> is <strong>null</strong>.\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<strong>backupDirectory</strong> is empty or contains just whitespaces.\n"
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "\n<strong>backupDirectory</strong> does not exist.\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.KeyValueStoreReplica.OnInitialize(System.Fabric.StatefulServiceInitializationParameters)
  commentId: M:System.Fabric.KeyValueStoreReplica.OnInitialize(System.Fabric.StatefulServiceInitializationParameters)
  id: OnInitialize(System.Fabric.StatefulServiceInitializationParameters)
  parent: System.Fabric.KeyValueStoreReplica
  langs:
  - csharp
  - vb
  name: OnInitialize(StatefulServiceInitializationParameters)
  nameWithType: KeyValueStoreReplica.OnInitialize(StatefulServiceInitializationParameters)
  fullName: System.Fabric.KeyValueStoreReplica.OnInitialize(System.Fabric.StatefulServiceInitializationParameters)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/KeyValueStoreReplica.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: OnInitialize
    path: src/prod/src/managed/Api/src/System/Fabric/KeyValueStoreReplica.cs
    startLine: 1379
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Initializes a newly created service replica.</p>\n"
  example: []
  syntax:
    content: protected virtual void OnInitialize(StatefulServiceInitializationParameters initializationParameters)
    content.vb: Protected Overridable Sub OnInitialize(initializationParameters As StatefulServiceInitializationParameters)
    parameters:
    - id: initializationParameters
      type: System.Fabric.StatefulServiceInitializationParameters
      description: "\n<p>The initialization parameters for the service replica, represented as a <xref href=\"System.Fabric.StatefulServiceInitializationParameters\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  overload: System.Fabric.KeyValueStoreReplica.OnInitialize*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: System.Fabric.KeyValueStoreReplica.OnOpenAsync(System.Fabric.ReplicaOpenMode,System.Fabric.IStatefulServicePartition,System.Threading.CancellationToken)
  commentId: M:System.Fabric.KeyValueStoreReplica.OnOpenAsync(System.Fabric.ReplicaOpenMode,System.Fabric.IStatefulServicePartition,System.Threading.CancellationToken)
  id: OnOpenAsync(System.Fabric.ReplicaOpenMode,System.Fabric.IStatefulServicePartition,System.Threading.CancellationToken)
  parent: System.Fabric.KeyValueStoreReplica
  langs:
  - csharp
  - vb
  name: OnOpenAsync(ReplicaOpenMode, IStatefulServicePartition, CancellationToken)
  nameWithType: KeyValueStoreReplica.OnOpenAsync(ReplicaOpenMode, IStatefulServicePartition, CancellationToken)
  fullName: System.Fabric.KeyValueStoreReplica.OnOpenAsync(System.Fabric.ReplicaOpenMode, System.Fabric.IStatefulServicePartition, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/KeyValueStoreReplica.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: OnOpenAsync
    path: src/prod/src/managed/Api/src/System/Fabric/KeyValueStoreReplica.cs
    startLine: 1398
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Called on an initialized service replica to open it so that additional actions can be taken.</p>\n"
  example: []
  syntax:
    content: protected virtual Task OnOpenAsync(ReplicaOpenMode openMode, IStatefulServicePartition partition, CancellationToken cancellationToken)
    content.vb: Protected Overridable Function OnOpenAsync(openMode As ReplicaOpenMode, partition As IStatefulServicePartition, cancellationToken As CancellationToken) As Task
    parameters:
    - id: openMode
      type: System.Fabric.ReplicaOpenMode
      description: "\n<p>A <xref href=\"System.Fabric.ReplicaOpenMode\" data-throw-if-not-resolved=\"false\"></xref> object specifying for this replica whether it is new or recovered.</p>\n"
    - id: partition
      type: System.Fabric.IStatefulServicePartition
      description: "\n<p>A <xref href=\"System.Fabric.IStatefulServicePartition\" data-throw-if-not-resolved=\"false\"></xref> object representing the stateful service partition information for this replica. </p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>A <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> object that the operation is monitoring, which can be used to notify the task of cancellation.</p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>A <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> object representing the asynchronous operation.</p>\n"
  overload: System.Fabric.KeyValueStoreReplica.OnOpenAsync*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: System.Fabric.KeyValueStoreReplica.OnChangeRoleAsync(System.Fabric.ReplicaRole,System.Threading.CancellationToken)
  commentId: M:System.Fabric.KeyValueStoreReplica.OnChangeRoleAsync(System.Fabric.ReplicaRole,System.Threading.CancellationToken)
  id: OnChangeRoleAsync(System.Fabric.ReplicaRole,System.Threading.CancellationToken)
  parent: System.Fabric.KeyValueStoreReplica
  langs:
  - csharp
  - vb
  name: OnChangeRoleAsync(ReplicaRole, CancellationToken)
  nameWithType: KeyValueStoreReplica.OnChangeRoleAsync(ReplicaRole, CancellationToken)
  fullName: System.Fabric.KeyValueStoreReplica.OnChangeRoleAsync(System.Fabric.ReplicaRole, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/KeyValueStoreReplica.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: OnChangeRoleAsync
    path: src/prod/src/managed/Api/src/System/Fabric/KeyValueStoreReplica.cs
    startLine: 1420
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Indicates that this replica is changing roles.</p>\n"
  remarks: "\n<p>The application replica should override this method if deriving from <xref href=\"System.Fabric.KeyValueStoreReplica\" data-throw-if-not-resolved=\"false\"></xref>, which is the recommended pattern. The application replica should return a <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> whose result is the address of this replica. This replica address is stored by the system as is and can be retrieved (unmodified) using <xref href=\"System.Fabric.FabricClient.ServiceManagementClient.ResolveServicePartitionAsync(System.Uri)\" data-throw-if-not-resolved=\"false\"></xref>. The application must take care to complete the role change in a timely manner since reconfiguration of the replica set will be blocked behind the completion of all outstanding change role calls.</p>\n"
  example: []
  syntax:
    content: protected virtual Task<string> OnChangeRoleAsync(ReplicaRole newRole, CancellationToken cancellationToken)
    content.vb: Protected Overridable Function OnChangeRoleAsync(newRole As ReplicaRole, cancellationToken As CancellationToken) As Task(Of String)
    parameters:
    - id: newRole
      type: System.Fabric.ReplicaRole
      description: "\n<p>The target role.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>Currently unused. Reserved for future use.</p>\n"
    return:
      type: System.Threading.Tasks.Task{System.String}
      description: "\n<p>A task whose result is the resolvable address of this replica.</p>\n"
  overload: System.Fabric.KeyValueStoreReplica.OnChangeRoleAsync*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: System.Fabric.KeyValueStoreReplica.OnCloseAsync(System.Threading.CancellationToken)
  commentId: M:System.Fabric.KeyValueStoreReplica.OnCloseAsync(System.Threading.CancellationToken)
  id: OnCloseAsync(System.Threading.CancellationToken)
  parent: System.Fabric.KeyValueStoreReplica
  langs:
  - csharp
  - vb
  name: OnCloseAsync(CancellationToken)
  nameWithType: KeyValueStoreReplica.OnCloseAsync(CancellationToken)
  fullName: System.Fabric.KeyValueStoreReplica.OnCloseAsync(System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/KeyValueStoreReplica.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: OnCloseAsync
    path: src/prod/src/managed/Api/src/System/Fabric/KeyValueStoreReplica.cs
    startLine: 1436
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Called when this service replica is being shut down and needs to close.</p>\n"
  example: []
  syntax:
    content: protected virtual Task OnCloseAsync(CancellationToken cancellationToken)
    content.vb: Protected Overridable Function OnCloseAsync(cancellationToken As CancellationToken) As Task
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>A <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> object that the operation is monitoring, which can be used to notify the task of cancellation.</p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>The asynchronous operation.</p>\n"
  overload: System.Fabric.KeyValueStoreReplica.OnCloseAsync*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: System.Fabric.KeyValueStoreReplica.OnAbort
  commentId: M:System.Fabric.KeyValueStoreReplica.OnAbort
  id: OnAbort
  parent: System.Fabric.KeyValueStoreReplica
  langs:
  - csharp
  - vb
  name: OnAbort()
  nameWithType: KeyValueStoreReplica.OnAbort()
  fullName: System.Fabric.KeyValueStoreReplica.OnAbort()
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/KeyValueStoreReplica.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: OnAbort
    path: src/prod/src/managed/Api/src/System/Fabric/KeyValueStoreReplica.cs
    startLine: 1446
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Called to shut down this instance.</p>\n"
  example: []
  syntax:
    content: protected virtual void OnAbort()
    content.vb: Protected Overridable Sub OnAbort
  overload: System.Fabric.KeyValueStoreReplica.OnAbort*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: System.Fabric.KeyValueStoreReplica.OnCopyComplete(System.Fabric.KeyValueStoreEnumerator)
  commentId: M:System.Fabric.KeyValueStoreReplica.OnCopyComplete(System.Fabric.KeyValueStoreEnumerator)
  id: OnCopyComplete(System.Fabric.KeyValueStoreEnumerator)
  parent: System.Fabric.KeyValueStoreReplica
  langs:
  - csharp
  - vb
  name: OnCopyComplete(KeyValueStoreEnumerator)
  nameWithType: KeyValueStoreReplica.OnCopyComplete(KeyValueStoreEnumerator)
  fullName: System.Fabric.KeyValueStoreReplica.OnCopyComplete(System.Fabric.KeyValueStoreEnumerator)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/KeyValueStoreReplica.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: OnCopyComplete
    path: src/prod/src/managed/Api/src/System/Fabric/KeyValueStoreReplica.cs
    startLine: 1460
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Called by the system on secondary replicas when they have finished building from the primary and are ready to start applying replication operations.</p>\n<p>This method will only be called on secondary replicas if the <xref href=\"System.Fabric.KeyValueStoreReplica\" data-throw-if-not-resolved=\"false\"></xref> object was constructed with a valid <xref href=\"System.Fabric.KeyValueStoreReplica.SecondaryNotificationMode\" data-throw-if-not-resolved=\"false\"></xref> parameter.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Fabric.KeyValueStoreEnumerator\" data-throw-if-not-resolved=\"false\"></xref> object can be used to read data on the secondary within the context of this method before any replication operations are applied. The <xref href=\"System.Fabric.KeyValueStoreEnumerator\" data-throw-if-not-resolved=\"false\"></xref> object is no longer valid after this method returns and cannot be used outside the context of this method. The application must take care to complete this callback in a timely manner since replication operations are being queued on the secondary replica and will not start getting applied until this method returns. The <xref href=\"System.Fabric.KeyValueStoreEnumerator\" data-throw-if-not-resolved=\"false\"></xref> object is backed by a single underlying local transaction and is not thread-safe.</p>\n"
  example: []
  syntax:
    content: protected virtual void OnCopyComplete(KeyValueStoreEnumerator enumerator)
    content.vb: Protected Overridable Sub OnCopyComplete(enumerator As KeyValueStoreEnumerator)
    parameters:
    - id: enumerator
      type: System.Fabric.KeyValueStoreEnumerator
      description: "\n<p>The enumerator used to read data on the secondary.</p>\n"
  overload: System.Fabric.KeyValueStoreReplica.OnCopyComplete*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: System.Fabric.KeyValueStoreReplica.OnReplicationOperation(System.Collections.Generic.IEnumerator{System.Fabric.KeyValueStoreNotification})
  commentId: M:System.Fabric.KeyValueStoreReplica.OnReplicationOperation(System.Collections.Generic.IEnumerator{System.Fabric.KeyValueStoreNotification})
  id: OnReplicationOperation(System.Collections.Generic.IEnumerator{System.Fabric.KeyValueStoreNotification})
  parent: System.Fabric.KeyValueStoreReplica
  langs:
  - csharp
  - vb
  name: OnReplicationOperation(IEnumerator<KeyValueStoreNotification>)
  nameWithType: KeyValueStoreReplica.OnReplicationOperation(IEnumerator<KeyValueStoreNotification>)
  fullName: System.Fabric.KeyValueStoreReplica.OnReplicationOperation(System.Collections.Generic.IEnumerator<System.Fabric.KeyValueStoreNotification>)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/KeyValueStoreReplica.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: OnReplicationOperation
    path: src/prod/src/managed/Api/src/System/Fabric/KeyValueStoreReplica.cs
    startLine: 1475
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Called by the system on secondary replicas for incoming replication operations. Each <xref href=\"System.Fabric.KeyValueStoreNotification\" data-throw-if-not-resolved=\"false\"></xref> object contains all the data for a single atomic replication operation.</p>\n"
  remarks: "\n<p>This method will only be called on secondary replicas if the <xref href=\"System.Fabric.KeyValueStoreReplica\" data-throw-if-not-resolved=\"false\"></xref> object was constructed with a valid <xref href=\"System.Fabric.KeyValueStoreReplica.SecondaryNotificationMode\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>If the <xref href=\"System.Fabric.KeyValueStoreReplica.SecondaryNotificationMode.BlockSecondaryAck\" data-throw-if-not-resolved=\"false\"></xref> mode was specified, then the incoming replication operation is not applied locally on the secondary replica and acknowledged to the primary until the method returns. This implies that the application must take care to return from this method in a timely manner to avoiding blocking the replication stream. Since the acknowledgment is not sent to the primary until this method returns, it cannot be assumed that the observed replication operation has already been (or is guaranteed to be in the future) applied by a quorum of replicas in the replica set.</p>\n<p>If the <xref href=\"System.Fabric.KeyValueStoreReplica.SecondaryNotificationMode.NonBlockingQuorumAcked\" data-throw-if-not-resolved=\"false\"></xref> mode was specified, then the observed replication operation is guaranteed to have already been applied by a quorum of replicas in the replica set. Furthermore, the observed replication operation may have already been applied locally by this secondary and acknowledged to the primary at the time the method is invoked by the system. The method callback will not block the replication stream in this mode, but it will still block the replication operation notification stream. That is, there will only be one outstanding OnReplicationOperation method callback at any given time.</p>\n"
  example: []
  syntax:
    content: protected virtual void OnReplicationOperation(IEnumerator<KeyValueStoreNotification> enumerator)
    content.vb: Protected Overridable Sub OnReplicationOperation(enumerator As IEnumerator(Of KeyValueStoreNotification))
    parameters:
    - id: enumerator
      type: System.Collections.Generic.IEnumerator{System.Fabric.KeyValueStoreNotification}
      description: "\n<p>The enumerator used to read the data in this replication operation.</p>\n"
  overload: System.Fabric.KeyValueStoreReplica.OnReplicationOperation*
  nameWithType.vb: KeyValueStoreReplica.OnReplicationOperation(IEnumerator(Of KeyValueStoreNotification))
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: System.Fabric.KeyValueStoreReplica.OnReplicationOperation(System.Collections.Generic.IEnumerator(Of System.Fabric.KeyValueStoreNotification))
  name.vb: OnReplicationOperation(IEnumerator(Of KeyValueStoreNotification))
references:
- uid: System.Fabric
  commentId: N:System.Fabric
  isExternal: false
  name: System.Fabric
  nameWithType: System.Fabric
  fullName: System.Fabric
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Fabric.IStatefulServiceReplica
  commentId: T:System.Fabric.IStatefulServiceReplica
  parent: System.Fabric
  isExternal: false
  name: IStatefulServiceReplica
  nameWithType: IStatefulServiceReplica
  fullName: System.Fabric.IStatefulServiceReplica
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.KeyValueStoreReplica.System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
  commentId: M:System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  parent: System.Fabric.Messaging.Stream.ByteArraySerializer
  definition: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  name: Serialize<KeyValueStoreReplica>()
  nameWithType: ByteArraySerializer.Serialize<KeyValueStoreReplica>()
  fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<System.Fabric.KeyValueStoreReplica>()
  nameWithType.vb: ByteArraySerializer.Serialize(Of KeyValueStoreReplica)()
  fullname.vb: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of System.Fabric.KeyValueStoreReplica)()
  name.vb: Serialize(Of KeyValueStoreReplica)()
  spec.csharp:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
    name: Serialize<KeyValueStoreReplica>
    nameWithType: ByteArraySerializer.Serialize<KeyValueStoreReplica>
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<System.Fabric.KeyValueStoreReplica>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
    name: Serialize(Of KeyValueStoreReplica)
    nameWithType: ByteArraySerializer.Serialize(Of KeyValueStoreReplica)
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of System.Fabric.KeyValueStoreReplica)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  commentId: M:System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  isExternal: false
  name: Serialize<T>(T)
  nameWithType: ByteArraySerializer.Serialize<T>(T)
  fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<T>(T)
  nameWithType.vb: ByteArraySerializer.Serialize(Of T)(T)
  fullname.vb: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of T)(T)
  name.vb: Serialize(Of T)(T)
  spec.csharp:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
    name: Serialize<T>
    nameWithType: ByteArraySerializer.Serialize<T>
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
    name: Serialize(Of T)
    nameWithType: ByteArraySerializer.Serialize(Of T)
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.Messaging.Stream.ByteArraySerializer
  commentId: T:System.Fabric.Messaging.Stream.ByteArraySerializer
  parent: System.Fabric.Messaging.Stream
  isExternal: false
  name: ByteArraySerializer
  nameWithType: ByteArraySerializer
  fullName: System.Fabric.Messaging.Stream.ByteArraySerializer
- uid: System.Fabric.Messaging.Stream
  commentId: N:System.Fabric.Messaging.Stream
  isExternal: false
  name: System.Fabric.Messaging.Stream
  nameWithType: System.Fabric.Messaging.Stream
  fullName: System.Fabric.Messaging.Stream
- uid: System.Fabric.KeyValueStoreReplica.Update(System.Fabric.TransactionBase,System.String,System.Byte[],System.Int64)
  commentId: M:System.Fabric.KeyValueStoreReplica.Update(System.Fabric.TransactionBase,System.String,System.Byte[],System.Int64)
- uid: System.Fabric.KeyValueStoreReplica.Remove(System.Fabric.TransactionBase,System.String,System.Int64)
  commentId: M:System.Fabric.KeyValueStoreReplica.Remove(System.Fabric.TransactionBase,System.String,System.Int64)
- uid: System.Fabric.KeyValueStoreReplica.TryUpdate(System.Fabric.TransactionBase,System.String,System.Byte[],System.Int64)
  commentId: M:System.Fabric.KeyValueStoreReplica.TryUpdate(System.Fabric.TransactionBase,System.String,System.Byte[],System.Int64)
- uid: System.Fabric.KeyValueStoreReplica.TryRemove(System.Fabric.TransactionBase,System.String,System.Int64)
  commentId: M:System.Fabric.KeyValueStoreReplica.TryRemove(System.Fabric.TransactionBase,System.String,System.Int64)
- uid: System.Fabric.KeyValueStoreReplica.Update(System.Fabric.TransactionBase,System.String,System.Byte[])
  commentId: M:System.Fabric.KeyValueStoreReplica.Update(System.Fabric.TransactionBase,System.String,System.Byte[])
- uid: System.Fabric.KeyValueStoreReplica.Remove(System.Fabric.TransactionBase,System.String)
  commentId: M:System.Fabric.KeyValueStoreReplica.Remove(System.Fabric.TransactionBase,System.String)
- uid: System.Fabric.KeyValueStoreReplica.TryUpdate(System.Fabric.TransactionBase,System.String,System.Byte[])
  commentId: M:System.Fabric.KeyValueStoreReplica.TryUpdate(System.Fabric.TransactionBase,System.String,System.Byte[])
- uid: System.Fabric.KeyValueStoreReplica.TryRemove(System.Fabric.TransactionBase,System.String)
  commentId: M:System.Fabric.KeyValueStoreReplica.TryRemove(System.Fabric.TransactionBase,System.String)
- uid: System.Int64
  commentId: T:System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.Fabric.KeyValueStoreReplica
  commentId: T:System.Fabric.KeyValueStoreReplica
  isExternal: false
  name: KeyValueStoreReplica
  nameWithType: KeyValueStoreReplica
  fullName: System.Fabric.KeyValueStoreReplica
- uid: System.Fabric.KeyValueStoreReplica.#ctor*
  commentId: Overload:System.Fabric.KeyValueStoreReplica.#ctor
  isExternal: false
  name: KeyValueStoreReplica
  nameWithType: KeyValueStoreReplica.KeyValueStoreReplica
  fullName: System.Fabric.KeyValueStoreReplica.KeyValueStoreReplica
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Fabric.LocalStoreSettings
  commentId: T:System.Fabric.LocalStoreSettings
  parent: System.Fabric
  isExternal: false
  name: LocalStoreSettings
  nameWithType: LocalStoreSettings
  fullName: System.Fabric.LocalStoreSettings
- uid: System.Fabric.ReplicatorSettings
  commentId: T:System.Fabric.ReplicatorSettings
  parent: System.Fabric
  isExternal: false
  name: ReplicatorSettings
  nameWithType: ReplicatorSettings
  fullName: System.Fabric.ReplicatorSettings
- uid: System.Fabric.KeyValueStoreReplica.OnCopyComplete(System.Fabric.KeyValueStoreEnumerator)
  commentId: M:System.Fabric.KeyValueStoreReplica.OnCopyComplete(System.Fabric.KeyValueStoreEnumerator)
- uid: System.Fabric.KeyValueStoreReplica.OnReplicationOperation(System.Collections.Generic.IEnumerator{System.Fabric.KeyValueStoreNotification})
  commentId: M:System.Fabric.KeyValueStoreReplica.OnReplicationOperation(System.Collections.Generic.IEnumerator{System.Fabric.KeyValueStoreNotification})
- uid: System.Fabric.KeyValueStoreReplica.SecondaryNotificationMode
  commentId: T:System.Fabric.KeyValueStoreReplica.SecondaryNotificationMode
  parent: System.Fabric
  isExternal: false
  name: KeyValueStoreReplica.SecondaryNotificationMode
  nameWithType: KeyValueStoreReplica.SecondaryNotificationMode
  fullName: System.Fabric.KeyValueStoreReplica.SecondaryNotificationMode
- uid: System.Fabric.KeyValueStoreReplicaSettings
  commentId: T:System.Fabric.KeyValueStoreReplicaSettings
  parent: System.Fabric
  isExternal: false
  name: KeyValueStoreReplicaSettings
  nameWithType: KeyValueStoreReplicaSettings
  fullName: System.Fabric.KeyValueStoreReplicaSettings
- uid: System.EventHandler
  commentId: T:System.EventHandler
  parent: System
  isExternal: true
  name: EventHandler
  nameWithType: EventHandler
  fullName: System.EventHandler
- uid: System.Fabric.KeyValueStoreReplica.DataLossReported
  commentId: E:System.Fabric.KeyValueStoreReplica.DataLossReported
- uid: System.Fabric.KeyValueStoreReplica.OnDatalossReported*
  commentId: Overload:System.Fabric.KeyValueStoreReplica.OnDatalossReported
  isExternal: false
  name: OnDatalossReported
  nameWithType: KeyValueStoreReplica.OnDatalossReported
  fullName: System.Fabric.KeyValueStoreReplica.OnDatalossReported
- uid: System.EventArgs
  commentId: T:System.EventArgs
  parent: System
  isExternal: true
  name: EventArgs
  nameWithType: EventArgs
  fullName: System.EventArgs
- uid: System.Fabric.KeyValueStoreReplica.OnDataLossAsync*
  commentId: Overload:System.Fabric.KeyValueStoreReplica.OnDataLossAsync
  isExternal: false
  name: OnDataLossAsync
  nameWithType: KeyValueStoreReplica.OnDataLossAsync
  fullName: System.Fabric.KeyValueStoreReplica.OnDataLossAsync
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task{System.Boolean}
  commentId: T:System.Threading.Tasks.Task{System.Boolean}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Boolean>
  nameWithType: Task<Boolean>
  fullName: System.Threading.Tasks.Task<System.Boolean>
  nameWithType.vb: Task(Of Boolean)
  fullname.vb: System.Threading.Tasks.Task(Of System.Boolean)
  name.vb: Task(Of Boolean)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: false
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullname.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: System.Fabric.KeyValueStoreReplica.StoreName*
  commentId: Overload:System.Fabric.KeyValueStoreReplica.StoreName
  isExternal: false
  name: StoreName
  nameWithType: KeyValueStoreReplica.StoreName
  fullName: System.Fabric.KeyValueStoreReplica.StoreName
- uid: System.Fabric.KeyValueStoreReplica.LocalStoreSettings*
  commentId: Overload:System.Fabric.KeyValueStoreReplica.LocalStoreSettings
  isExternal: false
  name: LocalStoreSettings
  nameWithType: KeyValueStoreReplica.LocalStoreSettings
  fullName: System.Fabric.KeyValueStoreReplica.LocalStoreSettings
- uid: System.Fabric.KeyValueStoreReplica.ReplicatorSettings*
  commentId: Overload:System.Fabric.KeyValueStoreReplica.ReplicatorSettings
  isExternal: false
  name: ReplicatorSettings
  nameWithType: KeyValueStoreReplica.ReplicatorSettings
  fullName: System.Fabric.KeyValueStoreReplica.ReplicatorSettings
- uid: System.Fabric.KeyValueStoreReplica.KeyValueStoreReplicaSettings*
  commentId: Overload:System.Fabric.KeyValueStoreReplica.KeyValueStoreReplicaSettings
  isExternal: false
  name: KeyValueStoreReplicaSettings
  nameWithType: KeyValueStoreReplica.KeyValueStoreReplicaSettings
  fullName: System.Fabric.KeyValueStoreReplica.KeyValueStoreReplicaSettings
- uid: System.Fabric.KeyValueStoreReplica.NotificationMode*
  commentId: Overload:System.Fabric.KeyValueStoreReplica.NotificationMode
  isExternal: false
  name: NotificationMode
  nameWithType: KeyValueStoreReplica.NotificationMode
  fullName: System.Fabric.KeyValueStoreReplica.NotificationMode
- uid: System.Fabric.KeyValueStoreReplica.OnInitialize(System.Fabric.StatefulServiceInitializationParameters)
  commentId: M:System.Fabric.KeyValueStoreReplica.OnInitialize(System.Fabric.StatefulServiceInitializationParameters)
- uid: System.Fabric.KeyValueStoreReplica.Initialize*
  commentId: Overload:System.Fabric.KeyValueStoreReplica.Initialize
  isExternal: false
  name: Initialize
  nameWithType: KeyValueStoreReplica.Initialize
  fullName: System.Fabric.KeyValueStoreReplica.Initialize
- uid: System.Fabric.IStatefulServiceReplica.Initialize(System.Fabric.StatefulServiceInitializationParameters)
  commentId: M:System.Fabric.IStatefulServiceReplica.Initialize(System.Fabric.StatefulServiceInitializationParameters)
  parent: System.Fabric.IStatefulServiceReplica
  isExternal: false
  name: Initialize(StatefulServiceInitializationParameters)
  nameWithType: IStatefulServiceReplica.Initialize(StatefulServiceInitializationParameters)
  fullName: System.Fabric.IStatefulServiceReplica.Initialize(System.Fabric.StatefulServiceInitializationParameters)
  spec.csharp:
  - uid: System.Fabric.IStatefulServiceReplica.Initialize(System.Fabric.StatefulServiceInitializationParameters)
    name: Initialize
    nameWithType: IStatefulServiceReplica.Initialize
    fullName: System.Fabric.IStatefulServiceReplica.Initialize
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Fabric.StatefulServiceInitializationParameters
    name: StatefulServiceInitializationParameters
    nameWithType: StatefulServiceInitializationParameters
    fullName: System.Fabric.StatefulServiceInitializationParameters
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Fabric.IStatefulServiceReplica.Initialize(System.Fabric.StatefulServiceInitializationParameters)
    name: Initialize
    nameWithType: IStatefulServiceReplica.Initialize
    fullName: System.Fabric.IStatefulServiceReplica.Initialize
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Fabric.StatefulServiceInitializationParameters
    name: StatefulServiceInitializationParameters
    nameWithType: StatefulServiceInitializationParameters
    fullName: System.Fabric.StatefulServiceInitializationParameters
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.StatefulServiceInitializationParameters
  commentId: T:System.Fabric.StatefulServiceInitializationParameters
  parent: System.Fabric
  isExternal: false
  name: StatefulServiceInitializationParameters
  nameWithType: StatefulServiceInitializationParameters
  fullName: System.Fabric.StatefulServiceInitializationParameters
- uid: System.Fabric.KeyValueStoreReplica.OpenAsync*
  commentId: Overload:System.Fabric.KeyValueStoreReplica.OpenAsync
  isExternal: false
  name: OpenAsync
  nameWithType: KeyValueStoreReplica.OpenAsync
  fullName: System.Fabric.KeyValueStoreReplica.OpenAsync
- uid: System.Fabric.IStatefulServiceReplica.OpenAsync(System.Fabric.ReplicaOpenMode,System.Fabric.IStatefulServicePartition,System.Threading.CancellationToken)
  commentId: M:System.Fabric.IStatefulServiceReplica.OpenAsync(System.Fabric.ReplicaOpenMode,System.Fabric.IStatefulServicePartition,System.Threading.CancellationToken)
  parent: System.Fabric.IStatefulServiceReplica
  isExternal: true
  name: OpenAsync(ReplicaOpenMode, IStatefulServicePartition, CancellationToken)
  nameWithType: IStatefulServiceReplica.OpenAsync(ReplicaOpenMode, IStatefulServicePartition, CancellationToken)
  fullName: System.Fabric.IStatefulServiceReplica.OpenAsync(System.Fabric.ReplicaOpenMode, System.Fabric.IStatefulServicePartition, System.Threading.CancellationToken)
  spec.csharp:
  - uid: System.Fabric.IStatefulServiceReplica.OpenAsync(System.Fabric.ReplicaOpenMode,System.Fabric.IStatefulServicePartition,System.Threading.CancellationToken)
    name: OpenAsync
    nameWithType: IStatefulServiceReplica.OpenAsync
    fullName: System.Fabric.IStatefulServiceReplica.OpenAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Fabric.ReplicaOpenMode
    name: ReplicaOpenMode
    nameWithType: ReplicaOpenMode
    fullName: System.Fabric.ReplicaOpenMode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Fabric.IStatefulServicePartition
    name: IStatefulServicePartition
    nameWithType: IStatefulServicePartition
    fullName: System.Fabric.IStatefulServicePartition
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Fabric.IStatefulServiceReplica.OpenAsync(System.Fabric.ReplicaOpenMode,System.Fabric.IStatefulServicePartition,System.Threading.CancellationToken)
    name: OpenAsync
    nameWithType: IStatefulServiceReplica.OpenAsync
    fullName: System.Fabric.IStatefulServiceReplica.OpenAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Fabric.ReplicaOpenMode
    name: ReplicaOpenMode
    nameWithType: ReplicaOpenMode
    fullName: System.Fabric.ReplicaOpenMode
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Fabric.IStatefulServicePartition
    name: IStatefulServicePartition
    nameWithType: IStatefulServicePartition
    fullName: System.Fabric.IStatefulServicePartition
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.ReplicaOpenMode
  commentId: T:System.Fabric.ReplicaOpenMode
  parent: System.Fabric
  isExternal: false
  name: ReplicaOpenMode
  nameWithType: ReplicaOpenMode
  fullName: System.Fabric.ReplicaOpenMode
- uid: System.Fabric.IStatefulServicePartition
  commentId: T:System.Fabric.IStatefulServicePartition
  parent: System.Fabric
  isExternal: false
  name: IStatefulServicePartition
  nameWithType: IStatefulServicePartition
  fullName: System.Fabric.IStatefulServicePartition
- uid: System.Threading.Tasks.Task{System.Fabric.IReplicator}
  commentId: T:System.Threading.Tasks.Task{System.Fabric.IReplicator}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<IReplicator>
  nameWithType: Task<IReplicator>
  fullName: System.Threading.Tasks.Task<System.Fabric.IReplicator>
  nameWithType.vb: Task(Of IReplicator)
  fullname.vb: System.Threading.Tasks.Task(Of System.Fabric.IReplicator)
  name.vb: Task(Of IReplicator)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Fabric.IReplicator
    name: IReplicator
    nameWithType: IReplicator
    fullName: System.Fabric.IReplicator
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Fabric.IReplicator
    name: IReplicator
    nameWithType: IReplicator
    fullName: System.Fabric.IReplicator
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.KeyValueStoreReplica.OnChangeRoleAsync(System.Fabric.ReplicaRole,System.Threading.CancellationToken)
  commentId: M:System.Fabric.KeyValueStoreReplica.OnChangeRoleAsync(System.Fabric.ReplicaRole,System.Threading.CancellationToken)
- uid: System.Fabric.KeyValueStoreReplica.ChangeRoleAsync*
  commentId: Overload:System.Fabric.KeyValueStoreReplica.ChangeRoleAsync
  isExternal: false
  name: ChangeRoleAsync
  nameWithType: KeyValueStoreReplica.ChangeRoleAsync
  fullName: System.Fabric.KeyValueStoreReplica.ChangeRoleAsync
- uid: System.Fabric.IStatefulServiceReplica.ChangeRoleAsync(System.Fabric.ReplicaRole,System.Threading.CancellationToken)
  commentId: M:System.Fabric.IStatefulServiceReplica.ChangeRoleAsync(System.Fabric.ReplicaRole,System.Threading.CancellationToken)
  parent: System.Fabric.IStatefulServiceReplica
  isExternal: true
  name: ChangeRoleAsync(ReplicaRole, CancellationToken)
  nameWithType: IStatefulServiceReplica.ChangeRoleAsync(ReplicaRole, CancellationToken)
  fullName: System.Fabric.IStatefulServiceReplica.ChangeRoleAsync(System.Fabric.ReplicaRole, System.Threading.CancellationToken)
  spec.csharp:
  - uid: System.Fabric.IStatefulServiceReplica.ChangeRoleAsync(System.Fabric.ReplicaRole,System.Threading.CancellationToken)
    name: ChangeRoleAsync
    nameWithType: IStatefulServiceReplica.ChangeRoleAsync
    fullName: System.Fabric.IStatefulServiceReplica.ChangeRoleAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Fabric.ReplicaRole
    name: ReplicaRole
    nameWithType: ReplicaRole
    fullName: System.Fabric.ReplicaRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Fabric.IStatefulServiceReplica.ChangeRoleAsync(System.Fabric.ReplicaRole,System.Threading.CancellationToken)
    name: ChangeRoleAsync
    nameWithType: IStatefulServiceReplica.ChangeRoleAsync
    fullName: System.Fabric.IStatefulServiceReplica.ChangeRoleAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Fabric.ReplicaRole
    name: ReplicaRole
    nameWithType: ReplicaRole
    fullName: System.Fabric.ReplicaRole
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.ReplicaRole
  commentId: T:System.Fabric.ReplicaRole
  parent: System.Fabric
  isExternal: false
  name: ReplicaRole
  nameWithType: ReplicaRole
  fullName: System.Fabric.ReplicaRole
- uid: System.Threading.Tasks.Task{System.String}
  commentId: T:System.Threading.Tasks.Task{System.String}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<String>
  nameWithType: Task<String>
  fullName: System.Threading.Tasks.Task<System.String>
  nameWithType.vb: Task(Of String)
  fullname.vb: System.Threading.Tasks.Task(Of System.String)
  name.vb: Task(Of String)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.KeyValueStoreReplica.OnCloseAsync(System.Threading.CancellationToken)
  commentId: M:System.Fabric.KeyValueStoreReplica.OnCloseAsync(System.Threading.CancellationToken)
- uid: System.Fabric.KeyValueStoreReplica.CloseAsync*
  commentId: Overload:System.Fabric.KeyValueStoreReplica.CloseAsync
  isExternal: false
  name: CloseAsync
  nameWithType: KeyValueStoreReplica.CloseAsync
  fullName: System.Fabric.KeyValueStoreReplica.CloseAsync
- uid: System.Fabric.IStatefulServiceReplica.CloseAsync(System.Threading.CancellationToken)
  commentId: M:System.Fabric.IStatefulServiceReplica.CloseAsync(System.Threading.CancellationToken)
  parent: System.Fabric.IStatefulServiceReplica
  isExternal: true
  name: CloseAsync(CancellationToken)
  nameWithType: IStatefulServiceReplica.CloseAsync(CancellationToken)
  fullName: System.Fabric.IStatefulServiceReplica.CloseAsync(System.Threading.CancellationToken)
  spec.csharp:
  - uid: System.Fabric.IStatefulServiceReplica.CloseAsync(System.Threading.CancellationToken)
    name: CloseAsync
    nameWithType: IStatefulServiceReplica.CloseAsync
    fullName: System.Fabric.IStatefulServiceReplica.CloseAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Fabric.IStatefulServiceReplica.CloseAsync(System.Threading.CancellationToken)
    name: CloseAsync
    nameWithType: IStatefulServiceReplica.CloseAsync
    fullName: System.Fabric.IStatefulServiceReplica.CloseAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Fabric.KeyValueStoreReplica.Abort*
  commentId: Overload:System.Fabric.KeyValueStoreReplica.Abort
  isExternal: false
  name: Abort
  nameWithType: KeyValueStoreReplica.Abort
  fullName: System.Fabric.KeyValueStoreReplica.Abort
- uid: System.Fabric.IStatefulServiceReplica.Abort
  commentId: M:System.Fabric.IStatefulServiceReplica.Abort
  parent: System.Fabric.IStatefulServiceReplica
  isExternal: false
  name: Abort()
  nameWithType: IStatefulServiceReplica.Abort()
  fullName: System.Fabric.IStatefulServiceReplica.Abort()
  spec.csharp:
  - uid: System.Fabric.IStatefulServiceReplica.Abort
    name: Abort
    nameWithType: IStatefulServiceReplica.Abort
    fullName: System.Fabric.IStatefulServiceReplica.Abort
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Fabric.IStatefulServiceReplica.Abort
    name: Abort
    nameWithType: IStatefulServiceReplica.Abort
    fullName: System.Fabric.IStatefulServiceReplica.Abort
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.KeyValueStoreReplica.GetCurrentEpoch*
  commentId: Overload:System.Fabric.KeyValueStoreReplica.GetCurrentEpoch
  isExternal: false
  name: GetCurrentEpoch
  nameWithType: KeyValueStoreReplica.GetCurrentEpoch
  fullName: System.Fabric.KeyValueStoreReplica.GetCurrentEpoch
- uid: System.Fabric.Epoch
  commentId: T:System.Fabric.Epoch
  parent: System.Fabric
  isExternal: false
  name: Epoch
  nameWithType: Epoch
  fullName: System.Fabric.Epoch
- uid: System.Fabric.KeyValueStoreReplica.UpdateReplicatorSettings*
  commentId: Overload:System.Fabric.KeyValueStoreReplica.UpdateReplicatorSettings
  isExternal: false
  name: UpdateReplicatorSettings
  nameWithType: KeyValueStoreReplica.UpdateReplicatorSettings
  fullName: System.Fabric.KeyValueStoreReplica.UpdateReplicatorSettings
- uid: System.Fabric.Transaction
  commentId: T:System.Fabric.Transaction
  parent: System.Fabric
  isExternal: false
  name: Transaction
  nameWithType: Transaction
  fullName: System.Fabric.Transaction
- uid: System.Fabric.KeyValueStoreReplica.CreateTransaction*
  commentId: Overload:System.Fabric.KeyValueStoreReplica.CreateTransaction
  isExternal: false
  name: CreateTransaction
  nameWithType: KeyValueStoreReplica.CreateTransaction
  fullName: System.Fabric.KeyValueStoreReplica.CreateTransaction
- uid: System.Fabric.KeyValueStoreTransactionSettings
  commentId: T:System.Fabric.KeyValueStoreTransactionSettings
  parent: System.Fabric
  isExternal: false
  name: KeyValueStoreTransactionSettings
  nameWithType: KeyValueStoreTransactionSettings
  fullName: System.Fabric.KeyValueStoreTransactionSettings
- uid: System.Fabric.KeyValueStoreReplica.Add*
  commentId: Overload:System.Fabric.KeyValueStoreReplica.Add
  isExternal: false
  name: Add
  nameWithType: KeyValueStoreReplica.Add
  fullName: System.Fabric.KeyValueStoreReplica.Add
- uid: System.Fabric.TransactionBase
  commentId: T:System.Fabric.TransactionBase
  parent: System.Fabric
  isExternal: false
  name: TransactionBase
  nameWithType: TransactionBase
  fullName: System.Fabric.TransactionBase
- uid: System.Byte[]
  name: Byte[]
  nameWithType: Byte[]
  fullName: System.Byte[]
  nameWithType.vb: Byte()
  fullname.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Fabric.KeyValueStoreReplica.TryAdd*
  commentId: Overload:System.Fabric.KeyValueStoreReplica.TryAdd
  isExternal: false
  name: TryAdd
  nameWithType: KeyValueStoreReplica.TryAdd
  fullName: System.Fabric.KeyValueStoreReplica.TryAdd
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Fabric.KeyValueStoreReplica.Remove*
  commentId: Overload:System.Fabric.KeyValueStoreReplica.Remove
  isExternal: false
  name: Remove
  nameWithType: KeyValueStoreReplica.Remove
  fullName: System.Fabric.KeyValueStoreReplica.Remove
- uid: System.Fabric.KeyValueStoreReplica.TryRemove*
  commentId: Overload:System.Fabric.KeyValueStoreReplica.TryRemove
  isExternal: false
  name: TryRemove
  nameWithType: KeyValueStoreReplica.TryRemove
  fullName: System.Fabric.KeyValueStoreReplica.TryRemove
- uid: System.Fabric.KeyValueStoreReplica.Update*
  commentId: Overload:System.Fabric.KeyValueStoreReplica.Update
  isExternal: false
  name: Update
  nameWithType: KeyValueStoreReplica.Update
  fullName: System.Fabric.KeyValueStoreReplica.Update
- uid: System.Fabric.KeyValueStoreReplica.TryUpdate*
  commentId: Overload:System.Fabric.KeyValueStoreReplica.TryUpdate
  isExternal: false
  name: TryUpdate
  nameWithType: KeyValueStoreReplica.TryUpdate
  fullName: System.Fabric.KeyValueStoreReplica.TryUpdate
- uid: System.Fabric.KeyValueStoreReplica.Contains*
  commentId: Overload:System.Fabric.KeyValueStoreReplica.Contains
  isExternal: false
  name: Contains
  nameWithType: KeyValueStoreReplica.Contains
  fullName: System.Fabric.KeyValueStoreReplica.Contains
- uid: System.Fabric.KeyValueStoreItem
  commentId: T:System.Fabric.KeyValueStoreItem
  parent: System.Fabric
  isExternal: false
  name: KeyValueStoreItem
  nameWithType: KeyValueStoreItem
  fullName: System.Fabric.KeyValueStoreItem
- uid: System.Fabric.KeyValueStoreReplica.Get*
  commentId: Overload:System.Fabric.KeyValueStoreReplica.Get
  isExternal: false
  name: Get
  nameWithType: KeyValueStoreReplica.Get
  fullName: System.Fabric.KeyValueStoreReplica.Get
- uid: System.Fabric.KeyValueStoreReplica.TryGet*
  commentId: Overload:System.Fabric.KeyValueStoreReplica.TryGet
  isExternal: false
  name: TryGet
  nameWithType: KeyValueStoreReplica.TryGet
  fullName: System.Fabric.KeyValueStoreReplica.TryGet
- uid: System.Fabric.KeyValueStoreReplica.GetValue*
  commentId: Overload:System.Fabric.KeyValueStoreReplica.GetValue
  isExternal: false
  name: GetValue
  nameWithType: KeyValueStoreReplica.GetValue
  fullName: System.Fabric.KeyValueStoreReplica.GetValue
- uid: System.Fabric.KeyValueStoreReplica.TryGetValue*
  commentId: Overload:System.Fabric.KeyValueStoreReplica.TryGetValue
  isExternal: false
  name: TryGetValue
  nameWithType: KeyValueStoreReplica.TryGetValue
  fullName: System.Fabric.KeyValueStoreReplica.TryGetValue
- uid: System.Fabric.KeyValueStoreItemMetadata
  commentId: T:System.Fabric.KeyValueStoreItemMetadata
  parent: System.Fabric
  isExternal: false
  name: KeyValueStoreItemMetadata
  nameWithType: KeyValueStoreItemMetadata
  fullName: System.Fabric.KeyValueStoreItemMetadata
- uid: System.Fabric.KeyValueStoreReplica.GetMetadata*
  commentId: Overload:System.Fabric.KeyValueStoreReplica.GetMetadata
  isExternal: false
  name: GetMetadata
  nameWithType: KeyValueStoreReplica.GetMetadata
  fullName: System.Fabric.KeyValueStoreReplica.GetMetadata
- uid: System.Fabric.KeyValueStoreReplica.TryGetMetadata*
  commentId: Overload:System.Fabric.KeyValueStoreReplica.TryGetMetadata
  isExternal: false
  name: TryGetMetadata
  nameWithType: KeyValueStoreReplica.TryGetMetadata
  fullName: System.Fabric.KeyValueStoreReplica.TryGetMetadata
- uid: System.Fabric.KeyValueStoreReplica.Enumerate*
  commentId: Overload:System.Fabric.KeyValueStoreReplica.Enumerate
  isExternal: false
  name: Enumerate
  nameWithType: KeyValueStoreReplica.Enumerate
  fullName: System.Fabric.KeyValueStoreReplica.Enumerate
- uid: System.Collections.Generic.IEnumerator{System.Fabric.KeyValueStoreItem}
  commentId: T:System.Collections.Generic.IEnumerator{System.Fabric.KeyValueStoreItem}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerator`1
  name: IEnumerator<KeyValueStoreItem>
  nameWithType: IEnumerator<KeyValueStoreItem>
  fullName: System.Collections.Generic.IEnumerator<System.Fabric.KeyValueStoreItem>
  nameWithType.vb: IEnumerator(Of KeyValueStoreItem)
  fullname.vb: System.Collections.Generic.IEnumerator(Of System.Fabric.KeyValueStoreItem)
  name.vb: IEnumerator(Of KeyValueStoreItem)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Fabric.KeyValueStoreItem
    name: KeyValueStoreItem
    nameWithType: KeyValueStoreItem
    fullName: System.Fabric.KeyValueStoreItem
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Fabric.KeyValueStoreItem
    name: KeyValueStoreItem
    nameWithType: KeyValueStoreItem
    fullName: System.Fabric.KeyValueStoreItem
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerator`1
  commentId: T:System.Collections.Generic.IEnumerator`1
  isExternal: true
  name: IEnumerator<T>
  nameWithType: IEnumerator<T>
  fullName: System.Collections.Generic.IEnumerator<T>
  nameWithType.vb: IEnumerator(Of T)
  fullname.vb: System.Collections.Generic.IEnumerator(Of T)
  name.vb: IEnumerator(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Fabric.KeyValueStoreReplica.Enumerate(System.Fabric.TransactionBase,System.String,System.Boolean)
  commentId: M:System.Fabric.KeyValueStoreReplica.Enumerate(System.Fabric.TransactionBase,System.String,System.Boolean)
- uid: System.Fabric.KeyValueStoreReplica.EnumerateMetadata*
  commentId: Overload:System.Fabric.KeyValueStoreReplica.EnumerateMetadata
  isExternal: false
  name: EnumerateMetadata
  nameWithType: KeyValueStoreReplica.EnumerateMetadata
  fullName: System.Fabric.KeyValueStoreReplica.EnumerateMetadata
- uid: System.Collections.Generic.IEnumerator{System.Fabric.KeyValueStoreItemMetadata}
  commentId: T:System.Collections.Generic.IEnumerator{System.Fabric.KeyValueStoreItemMetadata}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerator`1
  name: IEnumerator<KeyValueStoreItemMetadata>
  nameWithType: IEnumerator<KeyValueStoreItemMetadata>
  fullName: System.Collections.Generic.IEnumerator<System.Fabric.KeyValueStoreItemMetadata>
  nameWithType.vb: IEnumerator(Of KeyValueStoreItemMetadata)
  fullname.vb: System.Collections.Generic.IEnumerator(Of System.Fabric.KeyValueStoreItemMetadata)
  name.vb: IEnumerator(Of KeyValueStoreItemMetadata)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Fabric.KeyValueStoreItemMetadata
    name: KeyValueStoreItemMetadata
    nameWithType: KeyValueStoreItemMetadata
    fullName: System.Fabric.KeyValueStoreItemMetadata
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Fabric.KeyValueStoreItemMetadata
    name: KeyValueStoreItemMetadata
    nameWithType: KeyValueStoreItemMetadata
    fullName: System.Fabric.KeyValueStoreItemMetadata
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.KeyValueStoreReplica.EnumerateMetadata(System.Fabric.TransactionBase,System.String,System.Boolean)
  commentId: M:System.Fabric.KeyValueStoreReplica.EnumerateMetadata(System.Fabric.TransactionBase,System.String,System.Boolean)
- uid: System.Fabric.KeyValueStoreReplica.BackupAsync(System.String,System.Fabric.StoreBackupOption,System.Func{System.Fabric.StoreBackupInfo,System.Threading.Tasks.Task{System.Boolean}})
  commentId: M:System.Fabric.KeyValueStoreReplica.BackupAsync(System.String,System.Fabric.StoreBackupOption,System.Func{System.Fabric.StoreBackupInfo,System.Threading.Tasks.Task{System.Boolean}})
- uid: System.Fabric.KeyValueStoreReplica.Backup*
  commentId: Overload:System.Fabric.KeyValueStoreReplica.Backup
  isExternal: false
  name: Backup
  nameWithType: KeyValueStoreReplica.Backup
  fullName: System.Fabric.KeyValueStoreReplica.Backup
- uid: System.Fabric.StoreBackupOption.TruncateLogsOnly
  commentId: F:System.Fabric.StoreBackupOption.TruncateLogsOnly
- uid: System.Fabric.FabricBackupDirectoryNotEmptyException
  commentId: T:System.Fabric.FabricBackupDirectoryNotEmptyException
  isExternal: false
  name: FabricBackupDirectoryNotEmptyException
  nameWithType: FabricBackupDirectoryNotEmptyException
  fullName: System.Fabric.FabricBackupDirectoryNotEmptyException
- uid: System.Fabric.StoreBackupOption.Incremental
  commentId: F:System.Fabric.StoreBackupOption.Incremental
- uid: System.Fabric.KeyValueStoreReplica.BackupAsync*
  commentId: Overload:System.Fabric.KeyValueStoreReplica.BackupAsync
  isExternal: false
  name: BackupAsync
  nameWithType: KeyValueStoreReplica.BackupAsync
  fullName: System.Fabric.KeyValueStoreReplica.BackupAsync
- uid: System.ArgumentNullException
  commentId: T:System.ArgumentNullException
- uid: System.ArgumentException
  commentId: T:System.ArgumentException
- uid: System.Fabric.FabricBackupInProgressException
  commentId: T:System.Fabric.FabricBackupInProgressException
  isExternal: false
  name: FabricBackupInProgressException
  nameWithType: FabricBackupInProgressException
  fullName: System.Fabric.FabricBackupInProgressException
- uid: System.Fabric.StoreBackupOption
  commentId: T:System.Fabric.StoreBackupOption
  parent: System.Fabric
  isExternal: false
  name: StoreBackupOption
  nameWithType: StoreBackupOption
  fullName: System.Fabric.StoreBackupOption
- uid: System.Func{System.Fabric.StoreBackupInfo,System.Threading.Tasks.Task{System.Boolean}}
  commentId: T:System.Func{System.Fabric.StoreBackupInfo,System.Threading.Tasks.Task{System.Boolean}}
  parent: System
  definition: System.Func`2
  name: Func<StoreBackupInfo, Task<Boolean>>
  nameWithType: Func<StoreBackupInfo, Task<Boolean>>
  fullName: System.Func<System.Fabric.StoreBackupInfo, System.Threading.Tasks.Task<System.Boolean>>
  nameWithType.vb: Func(Of StoreBackupInfo, Task(Of Boolean))
  fullname.vb: System.Func(Of System.Fabric.StoreBackupInfo, System.Threading.Tasks.Task(Of System.Boolean))
  name.vb: Func(Of StoreBackupInfo, Task(Of Boolean))
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Fabric.StoreBackupInfo
    name: StoreBackupInfo
    nameWithType: StoreBackupInfo
    fullName: System.Fabric.StoreBackupInfo
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Fabric.StoreBackupInfo
    name: StoreBackupInfo
    nameWithType: StoreBackupInfo
    fullName: System.Fabric.StoreBackupInfo
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: true
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullname.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.FabricClient.ServiceManagementClient.UpdateServiceAsync(System.Uri,System.Fabric.Description.ServiceUpdateDescription)
  commentId: M:System.Fabric.FabricClient.ServiceManagementClient.UpdateServiceAsync(System.Uri,System.Fabric.Description.ServiceUpdateDescription)
- uid: System.Fabric.KeyValueStoreReplica.Restore*
  commentId: Overload:System.Fabric.KeyValueStoreReplica.Restore
  isExternal: false
  name: Restore
  nameWithType: KeyValueStoreReplica.Restore
  fullName: System.Fabric.KeyValueStoreReplica.Restore
- uid: System.Fabric.KeyValueStoreReplica.RestoreAsync*
  commentId: Overload:System.Fabric.KeyValueStoreReplica.RestoreAsync
  isExternal: false
  name: RestoreAsync
  nameWithType: KeyValueStoreReplica.RestoreAsync
  fullName: System.Fabric.KeyValueStoreReplica.RestoreAsync
- uid: System.IO.DirectoryNotFoundException
  commentId: T:System.IO.DirectoryNotFoundException
- uid: System.Fabric.RestoreSettings
  commentId: T:System.Fabric.RestoreSettings
  parent: System.Fabric
  isExternal: false
  name: RestoreSettings
  nameWithType: RestoreSettings
  fullName: System.Fabric.RestoreSettings
- uid: System.Fabric.KeyValueStoreReplica.OnInitialize*
  commentId: Overload:System.Fabric.KeyValueStoreReplica.OnInitialize
  isExternal: false
  name: OnInitialize
  nameWithType: KeyValueStoreReplica.OnInitialize
  fullName: System.Fabric.KeyValueStoreReplica.OnInitialize
- uid: System.Fabric.KeyValueStoreReplica.OnOpenAsync*
  commentId: Overload:System.Fabric.KeyValueStoreReplica.OnOpenAsync
  isExternal: false
  name: OnOpenAsync
  nameWithType: KeyValueStoreReplica.OnOpenAsync
  fullName: System.Fabric.KeyValueStoreReplica.OnOpenAsync
- uid: System.Fabric.FabricClient.ServiceManagementClient.ResolveServicePartitionAsync(System.Uri)
  commentId: M:System.Fabric.FabricClient.ServiceManagementClient.ResolveServicePartitionAsync(System.Uri)
- uid: System.Fabric.KeyValueStoreReplica.OnChangeRoleAsync*
  commentId: Overload:System.Fabric.KeyValueStoreReplica.OnChangeRoleAsync
  isExternal: false
  name: OnChangeRoleAsync
  nameWithType: KeyValueStoreReplica.OnChangeRoleAsync
  fullName: System.Fabric.KeyValueStoreReplica.OnChangeRoleAsync
- uid: System.Fabric.KeyValueStoreReplica.OnCloseAsync*
  commentId: Overload:System.Fabric.KeyValueStoreReplica.OnCloseAsync
  isExternal: false
  name: OnCloseAsync
  nameWithType: KeyValueStoreReplica.OnCloseAsync
  fullName: System.Fabric.KeyValueStoreReplica.OnCloseAsync
- uid: System.Fabric.KeyValueStoreReplica.OnAbort*
  commentId: Overload:System.Fabric.KeyValueStoreReplica.OnAbort
  isExternal: false
  name: OnAbort
  nameWithType: KeyValueStoreReplica.OnAbort
  fullName: System.Fabric.KeyValueStoreReplica.OnAbort
- uid: System.Fabric.KeyValueStoreEnumerator
  commentId: T:System.Fabric.KeyValueStoreEnumerator
  parent: System.Fabric
  isExternal: false
  name: KeyValueStoreEnumerator
  nameWithType: KeyValueStoreEnumerator
  fullName: System.Fabric.KeyValueStoreEnumerator
- uid: System.Fabric.KeyValueStoreReplica.OnCopyComplete*
  commentId: Overload:System.Fabric.KeyValueStoreReplica.OnCopyComplete
  isExternal: false
  name: OnCopyComplete
  nameWithType: KeyValueStoreReplica.OnCopyComplete
  fullName: System.Fabric.KeyValueStoreReplica.OnCopyComplete
- uid: System.Fabric.KeyValueStoreNotification
  commentId: T:System.Fabric.KeyValueStoreNotification
  isExternal: false
  name: KeyValueStoreNotification
  nameWithType: KeyValueStoreNotification
  fullName: System.Fabric.KeyValueStoreNotification
- uid: System.Fabric.KeyValueStoreReplica.SecondaryNotificationMode.BlockSecondaryAck
  commentId: F:System.Fabric.KeyValueStoreReplica.SecondaryNotificationMode.BlockSecondaryAck
- uid: System.Fabric.KeyValueStoreReplica.SecondaryNotificationMode.NonBlockingQuorumAcked
  commentId: F:System.Fabric.KeyValueStoreReplica.SecondaryNotificationMode.NonBlockingQuorumAcked
- uid: System.Fabric.KeyValueStoreReplica.OnReplicationOperation*
  commentId: Overload:System.Fabric.KeyValueStoreReplica.OnReplicationOperation
  isExternal: false
  name: OnReplicationOperation
  nameWithType: KeyValueStoreReplica.OnReplicationOperation
  fullName: System.Fabric.KeyValueStoreReplica.OnReplicationOperation
- uid: System.Collections.Generic.IEnumerator{System.Fabric.KeyValueStoreNotification}
  commentId: T:System.Collections.Generic.IEnumerator{System.Fabric.KeyValueStoreNotification}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerator`1
  name: IEnumerator<KeyValueStoreNotification>
  nameWithType: IEnumerator<KeyValueStoreNotification>
  fullName: System.Collections.Generic.IEnumerator<System.Fabric.KeyValueStoreNotification>
  nameWithType.vb: IEnumerator(Of KeyValueStoreNotification)
  fullname.vb: System.Collections.Generic.IEnumerator(Of System.Fabric.KeyValueStoreNotification)
  name.vb: IEnumerator(Of KeyValueStoreNotification)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Fabric.KeyValueStoreNotification
    name: KeyValueStoreNotification
    nameWithType: KeyValueStoreNotification
    fullName: System.Fabric.KeyValueStoreNotification
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Fabric.KeyValueStoreNotification
    name: KeyValueStoreNotification
    nameWithType: KeyValueStoreNotification
    fullName: System.Fabric.KeyValueStoreNotification
  - name: )
    nameWithType: )
    fullName: )
