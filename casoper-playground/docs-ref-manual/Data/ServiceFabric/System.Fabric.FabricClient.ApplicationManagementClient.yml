### YamlMime:ManagedReference
items:
- uid: System.Fabric.FabricClient.ApplicationManagementClient
  commentId: T:System.Fabric.FabricClient.ApplicationManagementClient
  id: FabricClient.ApplicationManagementClient
  parent: System.Fabric
  children:
  - System.Fabric.FabricClient.ApplicationManagementClient.CopyApplicationPackage(System.String,System.String,System.String)
  - System.Fabric.FabricClient.ApplicationManagementClient.CreateApplicationAsync(System.Fabric.Description.ApplicationDescription)
  - System.Fabric.FabricClient.ApplicationManagementClient.CreateApplicationAsync(System.Fabric.Description.ApplicationDescription,System.TimeSpan,System.Threading.CancellationToken)
  - System.Fabric.FabricClient.ApplicationManagementClient.DeleteApplicationAsync(System.Fabric.Description.DeleteApplicationDescription)
  - System.Fabric.FabricClient.ApplicationManagementClient.DeleteApplicationAsync(System.Fabric.Description.DeleteApplicationDescription,System.TimeSpan,System.Threading.CancellationToken)
  - System.Fabric.FabricClient.ApplicationManagementClient.DeleteApplicationAsync(System.Uri)
  - System.Fabric.FabricClient.ApplicationManagementClient.DeleteApplicationAsync(System.Uri,System.TimeSpan,System.Threading.CancellationToken)
  - System.Fabric.FabricClient.ApplicationManagementClient.DeployServicePackageToNode(System.String,System.String,System.String,System.Fabric.PackageSharingPolicyList,System.String,System.TimeSpan,System.Threading.CancellationToken)
  - System.Fabric.FabricClient.ApplicationManagementClient.GetApplicationManifestAsync(System.String,System.String)
  - System.Fabric.FabricClient.ApplicationManagementClient.GetApplicationManifestAsync(System.String,System.String,System.TimeSpan,System.Threading.CancellationToken)
  - System.Fabric.FabricClient.ApplicationManagementClient.GetApplicationUpgradeProgressAsync(System.Uri)
  - System.Fabric.FabricClient.ApplicationManagementClient.GetApplicationUpgradeProgressAsync(System.Uri,System.TimeSpan,System.Threading.CancellationToken)
  - System.Fabric.FabricClient.ApplicationManagementClient.MoveNextApplicationUpgradeDomainAsync(System.Fabric.ApplicationUpgradeProgress)
  - System.Fabric.FabricClient.ApplicationManagementClient.MoveNextApplicationUpgradeDomainAsync(System.Fabric.ApplicationUpgradeProgress,System.TimeSpan,System.Threading.CancellationToken)
  - System.Fabric.FabricClient.ApplicationManagementClient.ProvisionApplicationAsync(System.Fabric.Description.ProvisionApplicationTypeDescription)
  - System.Fabric.FabricClient.ApplicationManagementClient.ProvisionApplicationAsync(System.Fabric.Description.ProvisionApplicationTypeDescription,System.TimeSpan,System.Threading.CancellationToken)
  - System.Fabric.FabricClient.ApplicationManagementClient.ProvisionApplicationAsync(System.String)
  - System.Fabric.FabricClient.ApplicationManagementClient.ProvisionApplicationAsync(System.String,System.TimeSpan,System.Threading.CancellationToken)
  - System.Fabric.FabricClient.ApplicationManagementClient.RemoveApplicationPackage(System.String,System.String)
  - System.Fabric.FabricClient.ApplicationManagementClient.RollbackApplicationUpgradeAsync(System.Uri)
  - System.Fabric.FabricClient.ApplicationManagementClient.RollbackApplicationUpgradeAsync(System.Uri,System.TimeSpan,System.Threading.CancellationToken)
  - System.Fabric.FabricClient.ApplicationManagementClient.UnprovisionApplicationAsync(System.String,System.String)
  - System.Fabric.FabricClient.ApplicationManagementClient.UnprovisionApplicationAsync(System.String,System.String,System.TimeSpan,System.Threading.CancellationToken)
  - System.Fabric.FabricClient.ApplicationManagementClient.UpdateApplicationAsync(System.Fabric.Description.ApplicationUpdateDescription)
  - System.Fabric.FabricClient.ApplicationManagementClient.UpdateApplicationAsync(System.Fabric.Description.ApplicationUpdateDescription,System.TimeSpan,System.Threading.CancellationToken)
  - System.Fabric.FabricClient.ApplicationManagementClient.UpdateApplicationUpgradeAsync(System.Fabric.Description.ApplicationUpgradeUpdateDescription)
  - System.Fabric.FabricClient.ApplicationManagementClient.UpdateApplicationUpgradeAsync(System.Fabric.Description.ApplicationUpgradeUpdateDescription,System.TimeSpan,System.Threading.CancellationToken)
  - System.Fabric.FabricClient.ApplicationManagementClient.UpgradeApplicationAsync(System.Fabric.Description.ApplicationUpgradeDescription)
  - System.Fabric.FabricClient.ApplicationManagementClient.UpgradeApplicationAsync(System.Fabric.Description.ApplicationUpgradeDescription,System.TimeSpan,System.Threading.CancellationToken)
  langs:
  - csharp
  - vb
  name: FabricClient.ApplicationManagementClient
  nameWithType: FabricClient.ApplicationManagementClient
  fullName: System.Fabric.FabricClient.ApplicationManagementClient
  type: Class
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ApplicationManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: ApplicationManagementClient
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ApplicationManagementClient.cs
    startLine: 18
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Provides the functionality to manage Service Fabric applications.</p>\n"
  example: []
  syntax:
    content: public sealed class ApplicationManagementClient
    content.vb: Public NotInheritable Class ApplicationManagementClient
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  extensionMethods:
  - System.Fabric.FabricClient.ApplicationManagementClient.System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: System.Fabric.FabricClient.ApplicationManagementClient.CreateApplicationAsync(System.Fabric.Description.ApplicationDescription)
  commentId: M:System.Fabric.FabricClient.ApplicationManagementClient.CreateApplicationAsync(System.Fabric.Description.ApplicationDescription)
  id: CreateApplicationAsync(System.Fabric.Description.ApplicationDescription)
  parent: System.Fabric.FabricClient.ApplicationManagementClient
  langs:
  - csharp
  - vb
  name: CreateApplicationAsync(ApplicationDescription)
  nameWithType: FabricClient.ApplicationManagementClient.CreateApplicationAsync(ApplicationDescription)
  fullName: System.Fabric.FabricClient.ApplicationManagementClient.CreateApplicationAsync(System.Fabric.Description.ApplicationDescription)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ApplicationManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: CreateApplicationAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ApplicationManagementClient.cs
    startLine: 104
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Creates and instantiates the specific Service Fabric application.</p>\n"
  example: []
  syntax:
    content: public Task CreateApplicationAsync(ApplicationDescription applicationDescription)
    content.vb: Public Function CreateApplicationAsync(applicationDescription As ApplicationDescription) As Task
    parameters:
    - id: applicationDescription
      type: System.Fabric.Description.ApplicationDescription
      description: "\n<p>The description of the application.</p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>A <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> representing the operation.</p>\n"
  overload: System.Fabric.FabricClient.ApplicationManagementClient.CreateApplicationAsync*
  exceptions:
  - type: System.Fabric.FabricObjectClosedException
    commentId: T:System.Fabric.FabricObjectClosedException
    description: "\n<p>The <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object is in a closed state. Dispose of the <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> \nobject you are using and instantiate a new <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  - type: System.Fabric.FabricException
    commentId: T:System.Fabric.FabricException
    description: "\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.ImageBuilderValidationError\" data-throw-if-not-resolved=\"false\"></xref>: The create application request is not valid with respect to the provisioned manifests for the requested application type.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidNameUri\" data-throw-if-not-resolved=\"false\"></xref>: The application name is not a valid Naming URI.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.CorruptedImageStoreObjectFound\" data-throw-if-not-resolved=\"false\"></xref>: A corrupted file was encountered on the ImageStore.</p>\n"
  - type: System.Fabric.FabricElementAlreadyExistsException
    commentId: T:System.Fabric.FabricElementAlreadyExistsException
    description: "\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.ApplicationAlreadyExists\" data-throw-if-not-resolved=\"false\"></xref>: The application has already been created.</p>\n"
  - type: System.Fabric.FabricElementNotFoundException
    commentId: T:System.Fabric.FabricElementNotFoundException
    description: "\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.ApplicationTypeNotFound\" data-throw-if-not-resolved=\"false\"></xref>: The requested application type has not been provisioned yet.</p>\n"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>There was an error accessing a file on the Image Store.</p>\n"
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "\n<p>A required file was not found on the Image Store.</p>\n"
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "\n<p>A required directory was not found on the Image Store.</p>\n"
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "\n<p>A path to an Image Store file/directory was too long.</p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.ImageStoreIOException\" data-throw-if-not-resolved=\"false\"></xref>: There was an IO error communicating with the Image Store.</p>\n"
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: "\n<p>The request timed out but may have already been accepted for processing by the system.</p>\n"
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>The request was canceled before the timeout expired but may have already been accepted for processing by the system.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n  The application capacity parameters specified are incorrect. Refer to\n<xref href=\"System.Fabric.Description.ApplicationDescription.MinimumNodes\" data-throw-if-not-resolved=\"false\"></xref>,\n<xref href=\"System.Fabric.Description.ApplicationDescription.MaximumNodes\" data-throw-if-not-resolved=\"false\"></xref> and\n<xref href=\"System.Fabric.Description.ApplicationDescription.Metrics\" data-throw-if-not-resolved=\"false\"></xref> for correct specification of application capacity parameters.\n</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.ApplicationManagementClient.CreateApplicationAsync(System.Fabric.Description.ApplicationDescription,System.TimeSpan,System.Threading.CancellationToken)
  commentId: M:System.Fabric.FabricClient.ApplicationManagementClient.CreateApplicationAsync(System.Fabric.Description.ApplicationDescription,System.TimeSpan,System.Threading.CancellationToken)
  id: CreateApplicationAsync(System.Fabric.Description.ApplicationDescription,System.TimeSpan,System.Threading.CancellationToken)
  parent: System.Fabric.FabricClient.ApplicationManagementClient
  langs:
  - csharp
  - vb
  name: CreateApplicationAsync(ApplicationDescription, TimeSpan, CancellationToken)
  nameWithType: FabricClient.ApplicationManagementClient.CreateApplicationAsync(ApplicationDescription, TimeSpan, CancellationToken)
  fullName: System.Fabric.FabricClient.ApplicationManagementClient.CreateApplicationAsync(System.Fabric.Description.ApplicationDescription, System.TimeSpan, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ApplicationManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: CreateApplicationAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ApplicationManagementClient.cs
    startLine: 174
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Creates and instantiates the specific Service Fabric application.</p>\n"
  example: []
  syntax:
    content: public Task CreateApplicationAsync(ApplicationDescription applicationDescription, TimeSpan timeout, CancellationToken cancellationToken)
    content.vb: Public Function CreateApplicationAsync(applicationDescription As ApplicationDescription, timeout As TimeSpan, cancellationToken As CancellationToken) As Task
    parameters:
    - id: applicationDescription
      type: System.Fabric.Description.ApplicationDescription
      description: "\n<p>The description of the application.</p>\n"
    - id: timeout
      type: System.TimeSpan
      description: "\n<p>Defines the maximum amount of time the system will allow this operation to continue before returning <xref href=\"System.TimeoutException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The CancellationToken that the operation is observing. It can be used to propagate notification that the operation should be canceled.</p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>A <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> representing the operation.</p>\n"
  overload: System.Fabric.FabricClient.ApplicationManagementClient.CreateApplicationAsync*
  exceptions:
  - type: System.Fabric.FabricObjectClosedException
    commentId: T:System.Fabric.FabricObjectClosedException
    description: "\n<p>The <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object is in a closed state. Dispose of the <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> \nobject you are using and instantiate a new <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  - type: System.Fabric.FabricException
    commentId: T:System.Fabric.FabricException
    description: "\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.ImageBuilderValidationError\" data-throw-if-not-resolved=\"false\"></xref>: The create application request is not valid with respect to the provisioned manifests for the requested application type.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidNameUri\" data-throw-if-not-resolved=\"false\"></xref>: The application name is not a valid Naming URI.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.CorruptedImageStoreObjectFound\" data-throw-if-not-resolved=\"false\"></xref>: A corrupted file was encountered on the ImageStore.</p>\n"
  - type: System.Fabric.FabricElementAlreadyExistsException
    commentId: T:System.Fabric.FabricElementAlreadyExistsException
    description: "\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.ApplicationAlreadyExists\" data-throw-if-not-resolved=\"false\"></xref>: The application has already been created.</p>\n"
  - type: System.Fabric.FabricElementNotFoundException
    commentId: T:System.Fabric.FabricElementNotFoundException
    description: "\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.ApplicationTypeNotFound\" data-throw-if-not-resolved=\"false\"></xref>: The requested application type has not been provisioned yet.</p>\n"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>There was an error accessing a file on the Image Store.</p>\n"
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "\n<p>A required file was not found on the Image Store.</p>\n"
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "\n<p>A required directory was not found on the Image Store.</p>\n"
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "\n<p>A path to an Image Store file/directory was too long.</p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.ImageStoreIOException\" data-throw-if-not-resolved=\"false\"></xref>: There was an IO error communicating with the Image Store.</p>\n"
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: "\n<p>The request timed out but may have already been accepted for processing by the system.</p>\n"
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>The request was canceled before the timeout expired but may have already been accepted for processing by the system.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n  The application capacity parameters specified are incorrect. Refer to\n<xref href=\"System.Fabric.Description.ApplicationDescription.MinimumNodes\" data-throw-if-not-resolved=\"false\"></xref>,\n<xref href=\"System.Fabric.Description.ApplicationDescription.MaximumNodes\" data-throw-if-not-resolved=\"false\"></xref> and\n<xref href=\"System.Fabric.Description.ApplicationDescription.Metrics\" data-throw-if-not-resolved=\"false\"></xref> for correct specification of application capacity parameters.\n</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.ApplicationManagementClient.UpdateApplicationAsync(System.Fabric.Description.ApplicationUpdateDescription)
  commentId: M:System.Fabric.FabricClient.ApplicationManagementClient.UpdateApplicationAsync(System.Fabric.Description.ApplicationUpdateDescription)
  id: UpdateApplicationAsync(System.Fabric.Description.ApplicationUpdateDescription)
  parent: System.Fabric.FabricClient.ApplicationManagementClient
  langs:
  - csharp
  - vb
  name: UpdateApplicationAsync(ApplicationUpdateDescription)
  nameWithType: FabricClient.ApplicationManagementClient.UpdateApplicationAsync(ApplicationUpdateDescription)
  fullName: System.Fabric.FabricClient.ApplicationManagementClient.UpdateApplicationAsync(System.Fabric.Description.ApplicationUpdateDescription)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ApplicationManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: UpdateApplicationAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ApplicationManagementClient.cs
    startLine: 218
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\nUpdates a Service Fabric application.\n"
  example: []
  syntax:
    content: public Task UpdateApplicationAsync(ApplicationUpdateDescription applicationUpdateDescription)
    content.vb: Public Function UpdateApplicationAsync(applicationUpdateDescription As ApplicationUpdateDescription) As Task
    parameters:
    - id: applicationUpdateDescription
      type: System.Fabric.Description.ApplicationUpdateDescription
      description: Application update description.
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>A <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> representing the operation.</p>\n"
  overload: System.Fabric.FabricClient.ApplicationManagementClient.UpdateApplicationAsync*
  exceptions:
  - type: System.Fabric.FabricException
    commentId: T:System.Fabric.FabricException
    description: "\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidNameUri\" data-throw-if-not-resolved=\"false\"></xref>: The application name is not a valid Naming URI.\n</p>\n"
  - type: System.Fabric.FabricElementNotFoundException
    commentId: T:System.Fabric.FabricElementNotFoundException
    description: "\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.ApplicationNotFound\" data-throw-if-not-resolved=\"false\"></xref>: The application does not exist.\n</p>\n"
  - type: System.Fabric.FabricTransientException
    commentId: T:System.Fabric.FabricTransientException
    description: "\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.ApplicationUpdateInProgress\" data-throw-if-not-resolved=\"false\"></xref>: Another application update is already in progress.\n</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n  The application update parameters specified are incorrect. Refer to\n<xref href=\"System.Fabric.Description.ApplicationUpdateDescription.MinimumNodes\" data-throw-if-not-resolved=\"false\"></xref>,\n<xref href=\"System.Fabric.Description.ApplicationUpdateDescription.MaximumNodes\" data-throw-if-not-resolved=\"false\"></xref> and\n<xref href=\"System.Fabric.Description.ApplicationUpdateDescription.Metrics\" data-throw-if-not-resolved=\"false\"></xref> for correct specification of application capacity parameters.\n</p>\n<p>\n  It is possible that parameters in <xref href=\"System.Fabric.Description.ApplicationUpdateDescription\" data-throw-if-not-resolved=\"false\"></xref> are valid, but when combined with existing\n  application capacity parameters they produce an invalid combination. For example, setting <xref href=\"System.Fabric.Description.ApplicationUpdateDescription.MinimumNodes\" data-throw-if-not-resolved=\"false\"></xref> to\n  a value that is higher than the one that was specified in <xref href=\"System.Fabric.Description.ApplicationDescription.MaximumNodes\" data-throw-if-not-resolved=\"false\"></xref> when application was created.\n</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.ApplicationManagementClient.UpdateApplicationAsync(System.Fabric.Description.ApplicationUpdateDescription,System.TimeSpan,System.Threading.CancellationToken)
  commentId: M:System.Fabric.FabricClient.ApplicationManagementClient.UpdateApplicationAsync(System.Fabric.Description.ApplicationUpdateDescription,System.TimeSpan,System.Threading.CancellationToken)
  id: UpdateApplicationAsync(System.Fabric.Description.ApplicationUpdateDescription,System.TimeSpan,System.Threading.CancellationToken)
  parent: System.Fabric.FabricClient.ApplicationManagementClient
  langs:
  - csharp
  - vb
  name: UpdateApplicationAsync(ApplicationUpdateDescription, TimeSpan, CancellationToken)
  nameWithType: FabricClient.ApplicationManagementClient.UpdateApplicationAsync(ApplicationUpdateDescription, TimeSpan, CancellationToken)
  fullName: System.Fabric.FabricClient.ApplicationManagementClient.UpdateApplicationAsync(System.Fabric.Description.ApplicationUpdateDescription, System.TimeSpan, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ApplicationManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: UpdateApplicationAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ApplicationManagementClient.cs
    startLine: 260
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\nUpdates a Service Fabric application.\n"
  example: []
  syntax:
    content: public Task UpdateApplicationAsync(ApplicationUpdateDescription applicationUpdateDescription, TimeSpan timeout, CancellationToken cancellationToken)
    content.vb: Public Function UpdateApplicationAsync(applicationUpdateDescription As ApplicationUpdateDescription, timeout As TimeSpan, cancellationToken As CancellationToken) As Task
    parameters:
    - id: applicationUpdateDescription
      type: System.Fabric.Description.ApplicationUpdateDescription
      description: Application update description.
    - id: timeout
      type: System.TimeSpan
      description: Defines the maximum amount of time the system will allow this operation to continue before returning <xref href="System.TimeoutException" data-throw-if-not-resolved="false"></xref>.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The CancellationToken that the operation is observing. It can be used to propagate notification that the operation should be canceled.
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>A <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> representing the operation.</p>\n"
  overload: System.Fabric.FabricClient.ApplicationManagementClient.UpdateApplicationAsync*
  exceptions:
  - type: System.Fabric.FabricException
    commentId: T:System.Fabric.FabricException
    description: "\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidNameUri\" data-throw-if-not-resolved=\"false\"></xref>: The application name is not a valid Naming URI.\n</p>\n"
  - type: System.Fabric.FabricElementNotFoundException
    commentId: T:System.Fabric.FabricElementNotFoundException
    description: "\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.ApplicationNotFound\" data-throw-if-not-resolved=\"false\"></xref>: The application does not exist.\n</p>\n"
  - type: System.Fabric.FabricTransientException
    commentId: T:System.Fabric.FabricTransientException
    description: "\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.ApplicationUpdateInProgress\" data-throw-if-not-resolved=\"false\"></xref>: Another application update is already in progress.\n</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n  The application update parameters specified are incorrect. Refer to\n<xref href=\"System.Fabric.Description.ApplicationUpdateDescription.MinimumNodes\" data-throw-if-not-resolved=\"false\"></xref>,\n<xref href=\"System.Fabric.Description.ApplicationUpdateDescription.MaximumNodes\" data-throw-if-not-resolved=\"false\"></xref> and\n<xref href=\"System.Fabric.Description.ApplicationUpdateDescription.Metrics\" data-throw-if-not-resolved=\"false\"></xref> for correct specification of application capacity parameters.\n</p>\n<p>\n  It is possible that parameters in <xref href=\"System.Fabric.Description.ApplicationUpdateDescription\" data-throw-if-not-resolved=\"false\"></xref> are valid, but when combined with existing\n  application capacity parameters they produce an invalid combination. For example, setting <xref href=\"System.Fabric.Description.ApplicationUpdateDescription.MinimumNodes\" data-throw-if-not-resolved=\"false\"></xref> to\n  a value that is higher than the one that was specified in <xref href=\"System.Fabric.Description.ApplicationDescription.MaximumNodes\" data-throw-if-not-resolved=\"false\"></xref> when application was created.\n</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.ApplicationManagementClient.DeleteApplicationAsync(System.Uri)
  commentId: M:System.Fabric.FabricClient.ApplicationManagementClient.DeleteApplicationAsync(System.Uri)
  id: DeleteApplicationAsync(System.Uri)
  parent: System.Fabric.FabricClient.ApplicationManagementClient
  langs:
  - csharp
  - vb
  name: DeleteApplicationAsync(Uri)
  nameWithType: FabricClient.ApplicationManagementClient.DeleteApplicationAsync(Uri)
  fullName: System.Fabric.FabricClient.ApplicationManagementClient.DeleteApplicationAsync(System.Uri)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ApplicationManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: DeleteApplicationAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ApplicationManagementClient.cs
    startLine: 297
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Deletes the application instance from the cluster and deletes all services belonging to the application.</p>\n"
  remarks: "\n<p>All application state will be lost and cannot be recovered after the application is deleted.</p>\n"
  example: []
  syntax:
    content: >-
      [Obsolete("This api is deprecated, use overload taking DeleteApplicationDescription instead.", false)]

      public Task DeleteApplicationAsync(Uri applicationName)
    content.vb: >-
      <Obsolete("This api is deprecated, use overload taking DeleteApplicationDescription instead.", False)>

      Public Function DeleteApplicationAsync(applicationName As Uri) As Task
    parameters:
    - id: applicationName
      type: System.Uri
      description: "\n<p>The URI of the application instance name.</p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>A <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> representing the operation.</p>\n"
  overload: System.Fabric.FabricClient.ApplicationManagementClient.DeleteApplicationAsync*
  exceptions:
  - type: System.Fabric.FabricObjectClosedException
    commentId: T:System.Fabric.FabricObjectClosedException
    description: "\n<p>The <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object is in a closed state. Dispose of the <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object you are using and instantiate a new <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  - type: System.Fabric.FabricElementNotFoundException
    commentId: T:System.Fabric.FabricElementNotFoundException
    description: "\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.ApplicationNotFound\" data-throw-if-not-resolved=\"false\"></xref>: The application does not exist.</p>\n"
  - type: System.Fabric.FabricTransientException
    commentId: T:System.Fabric.FabricTransientException
    description: "\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.ApplicationUpgradeInProgress\" data-throw-if-not-resolved=\"false\"></xref>: The application is being upgraded. </p>\n"
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: "\n<p>The request timed out but may have already been accepted for processing by the system.</p>\n"
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>The request was canceled before the timeout expired but may have already been accepted for processing by the system.</p>\n"
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String,System.Boolean)
    arguments:
    - type: System.String
      value: This api is deprecated, use overload taking DeleteApplicationDescription instead.
    - type: System.Boolean
      value: false
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.ApplicationManagementClient.DeleteApplicationAsync(System.Uri,System.TimeSpan,System.Threading.CancellationToken)
  commentId: M:System.Fabric.FabricClient.ApplicationManagementClient.DeleteApplicationAsync(System.Uri,System.TimeSpan,System.Threading.CancellationToken)
  id: DeleteApplicationAsync(System.Uri,System.TimeSpan,System.Threading.CancellationToken)
  parent: System.Fabric.FabricClient.ApplicationManagementClient
  langs:
  - csharp
  - vb
  name: DeleteApplicationAsync(Uri, TimeSpan, CancellationToken)
  nameWithType: FabricClient.ApplicationManagementClient.DeleteApplicationAsync(Uri, TimeSpan, CancellationToken)
  fullName: System.Fabric.FabricClient.ApplicationManagementClient.DeleteApplicationAsync(System.Uri, System.TimeSpan, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ApplicationManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: DeleteApplicationAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ApplicationManagementClient.cs
    startLine: 338
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Deletes the application instance from the cluster and deletes all services belonging to the application.</p>\n"
  remarks: "\n<p>All application state will be lost and cannot be recovered after the application is deleted.</p>\n"
  example: []
  syntax:
    content: >-
      [Obsolete("This api is deprecated, use overload taking DeleteApplicationDescription instead.", false)]

      public Task DeleteApplicationAsync(Uri applicationName, TimeSpan timeout, CancellationToken cancellationToken)
    content.vb: >-
      <Obsolete("This api is deprecated, use overload taking DeleteApplicationDescription instead.", False)>

      Public Function DeleteApplicationAsync(applicationName As Uri, timeout As TimeSpan, cancellationToken As CancellationToken) As Task
    parameters:
    - id: applicationName
      type: System.Uri
      description: "\n<p>The URI of the application instance name.</p>\n"
    - id: timeout
      type: System.TimeSpan
      description: "\n<p>Defines the maximum amount of time the system will allow this operation to continue before returning System.TimeoutException.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> that the operation is observing. It can be used to propagate notification that the operation should be canceled.</p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>A <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> representing the operation.</p>\n"
  overload: System.Fabric.FabricClient.ApplicationManagementClient.DeleteApplicationAsync*
  exceptions:
  - type: System.Fabric.FabricObjectClosedException
    commentId: T:System.Fabric.FabricObjectClosedException
    description: "\n<p>The <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object is in a closed state. Dispose of the <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object you are using and instantiate a new <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  - type: System.Fabric.FabricElementNotFoundException
    commentId: T:System.Fabric.FabricElementNotFoundException
    description: "\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.ApplicationNotFound\" data-throw-if-not-resolved=\"false\"></xref>: The application does not exist.</p>\n"
  - type: System.Fabric.FabricTransientException
    commentId: T:System.Fabric.FabricTransientException
    description: "\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.ApplicationUpgradeInProgress\" data-throw-if-not-resolved=\"false\"></xref>: The application is being upgraded. </p>\n"
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: "\n<p>The request timed out but may have already been accepted for processing by the system.</p>\n"
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>The request was canceled before the timeout expired but may have already been accepted for processing by the system.</p>\n"
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String,System.Boolean)
    arguments:
    - type: System.String
      value: This api is deprecated, use overload taking DeleteApplicationDescription instead.
    - type: System.Boolean
      value: false
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.ApplicationManagementClient.DeleteApplicationAsync(System.Fabric.Description.DeleteApplicationDescription)
  commentId: M:System.Fabric.FabricClient.ApplicationManagementClient.DeleteApplicationAsync(System.Fabric.Description.DeleteApplicationDescription)
  id: DeleteApplicationAsync(System.Fabric.Description.DeleteApplicationDescription)
  parent: System.Fabric.FabricClient.ApplicationManagementClient
  langs:
  - csharp
  - vb
  name: DeleteApplicationAsync(DeleteApplicationDescription)
  nameWithType: FabricClient.ApplicationManagementClient.DeleteApplicationAsync(DeleteApplicationDescription)
  fullName: System.Fabric.FabricClient.ApplicationManagementClient.DeleteApplicationAsync(System.Fabric.Description.DeleteApplicationDescription)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ApplicationManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: DeleteApplicationAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ApplicationManagementClient.cs
    startLine: 377
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Deletes the application instance from the cluster and deletes all services belonging to the application.</p>\n"
  remarks: "\n<p>All application state will be lost and cannot be recovered after the application is deleted.</p>\n<p>A forceful deletion call can convert on-going normal deletion to forceful one.</p> \n"
  example: []
  syntax:
    content: public Task DeleteApplicationAsync(DeleteApplicationDescription deleteApplicationDescription)
    content.vb: Public Function DeleteApplicationAsync(deleteApplicationDescription As DeleteApplicationDescription) As Task
    parameters:
    - id: deleteApplicationDescription
      type: System.Fabric.Description.DeleteApplicationDescription
      description: "\n<p>The description of the application to be deleted.</p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>A <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> representing the operation.</p>\n"
  overload: System.Fabric.FabricClient.ApplicationManagementClient.DeleteApplicationAsync*
  exceptions:
  - type: System.Fabric.FabricObjectClosedException
    commentId: T:System.Fabric.FabricObjectClosedException
    description: "\n<p>The <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object is in a closed state. Dispose of the <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object you are using and instantiate a new <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  - type: System.Fabric.FabricElementNotFoundException
    commentId: T:System.Fabric.FabricElementNotFoundException
    description: "\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.ApplicationNotFound\" data-throw-if-not-resolved=\"false\"></xref>: The application does not exist.</p>\n"
  - type: System.Fabric.FabricTransientException
    commentId: T:System.Fabric.FabricTransientException
    description: "\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.ApplicationUpgradeInProgress\" data-throw-if-not-resolved=\"false\"></xref>: The application is being upgraded. </p>\n"
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: "\n<p>The request timed out but may have already been accepted for processing by the system.</p>\n"
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>The request was canceled before the timeout expired but may have already been accepted for processing by the system.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.ApplicationManagementClient.DeleteApplicationAsync(System.Fabric.Description.DeleteApplicationDescription,System.TimeSpan,System.Threading.CancellationToken)
  commentId: M:System.Fabric.FabricClient.ApplicationManagementClient.DeleteApplicationAsync(System.Fabric.Description.DeleteApplicationDescription,System.TimeSpan,System.Threading.CancellationToken)
  id: DeleteApplicationAsync(System.Fabric.Description.DeleteApplicationDescription,System.TimeSpan,System.Threading.CancellationToken)
  parent: System.Fabric.FabricClient.ApplicationManagementClient
  langs:
  - csharp
  - vb
  name: DeleteApplicationAsync(DeleteApplicationDescription, TimeSpan, CancellationToken)
  nameWithType: FabricClient.ApplicationManagementClient.DeleteApplicationAsync(DeleteApplicationDescription, TimeSpan, CancellationToken)
  fullName: System.Fabric.FabricClient.ApplicationManagementClient.DeleteApplicationAsync(System.Fabric.Description.DeleteApplicationDescription, System.TimeSpan, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ApplicationManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: DeleteApplicationAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ApplicationManagementClient.cs
    startLine: 418
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Deletes the application instance from the cluster and deletes all services belonging to the application.</p>\n"
  remarks: "\n<p>All application state will be lost and cannot be recovered after the application is deleted.</p>\n<p>A forceful deletion call can convert on-going normal deletion to forceful one.</p> \n"
  example: []
  syntax:
    content: public Task DeleteApplicationAsync(DeleteApplicationDescription deleteApplicationDescription, TimeSpan timeout, CancellationToken cancellationToken)
    content.vb: Public Function DeleteApplicationAsync(deleteApplicationDescription As DeleteApplicationDescription, timeout As TimeSpan, cancellationToken As CancellationToken) As Task
    parameters:
    - id: deleteApplicationDescription
      type: System.Fabric.Description.DeleteApplicationDescription
      description: "\n<p>The description of the application to be deleted.</p>\n"
    - id: timeout
      type: System.TimeSpan
      description: "\n<p>Defines the maximum amount of time the system will allow this operation to continue before returning System.TimeoutException.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> that the operation is observing. It can be used to propagate notification that the operation should be canceled.</p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>A <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> representing the operation.</p>\n"
  overload: System.Fabric.FabricClient.ApplicationManagementClient.DeleteApplicationAsync*
  exceptions:
  - type: System.Fabric.FabricObjectClosedException
    commentId: T:System.Fabric.FabricObjectClosedException
    description: "\n<p>The <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object is in a closed state. Dispose of the <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object you are using and instantiate a new <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  - type: System.Fabric.FabricElementNotFoundException
    commentId: T:System.Fabric.FabricElementNotFoundException
    description: "\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.ApplicationNotFound\" data-throw-if-not-resolved=\"false\"></xref>: The application does not exist.</p>\n"
  - type: System.Fabric.FabricTransientException
    commentId: T:System.Fabric.FabricTransientException
    description: "\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.ApplicationUpgradeInProgress\" data-throw-if-not-resolved=\"false\"></xref>: The application is being upgraded. </p>\n"
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: "\n<p>The request timed out but may have already been accepted for processing by the system.</p>\n"
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>The request was canceled before the timeout expired but may have already been accepted for processing by the system.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.ApplicationManagementClient.ProvisionApplicationAsync(System.String)
  commentId: M:System.Fabric.FabricClient.ApplicationManagementClient.ProvisionApplicationAsync(System.String)
  id: ProvisionApplicationAsync(System.String)
  parent: System.Fabric.FabricClient.ApplicationManagementClient
  langs:
  - csharp
  - vb
  name: ProvisionApplicationAsync(String)
  nameWithType: FabricClient.ApplicationManagementClient.ProvisionApplicationAsync(String)
  fullName: System.Fabric.FabricClient.ApplicationManagementClient.ProvisionApplicationAsync(System.String)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ApplicationManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: ProvisionApplicationAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ApplicationManagementClient.cs
    startLine: 477
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Provisions or registers a Service Fabric application type with the cluster.</p>\n"
  remarks: "\n<p>This is mandatory before an application instance can be created.</p>\n"
  example: []
  syntax:
    content: public Task ProvisionApplicationAsync(string applicationBuildPath)
    content.vb: Public Function ProvisionApplicationAsync(applicationBuildPath As String) As Task
    parameters:
    - id: applicationBuildPath
      type: System.String
      description: "\n<p>Relative path to the application package in the ImageStore location specified in the Cluster Manifest.</p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>A <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> representing the operation.</p>\n"
  overload: System.Fabric.FabricClient.ApplicationManagementClient.ProvisionApplicationAsync*
  exceptions:
  - type: System.Fabric.FabricObjectClosedException
    commentId: T:System.Fabric.FabricObjectClosedException
    description: "\n<p>The <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object is in a closed state. Dispose of the <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object you are using and instantiate a new <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  - type: System.Fabric.FabricException
    commentId: T:System.Fabric.FabricException
    description: "\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.ImageBuilderValidationError\" data-throw-if-not-resolved=\"false\"></xref>: There are errors in the manifests being provisioned. </p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.ApplicationTypeProvisionInProgress\" data-throw-if-not-resolved=\"false\"></xref>: Another version of the application type is currently being provisioned. </p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidNameUri\" data-throw-if-not-resolved=\"false\"></xref>: The application name is not a valid Naming URI.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.CorruptedImageStoreObjectFound\" data-throw-if-not-resolved=\"false\"></xref>: A corrupted file was encountered on the ImageStore.</p>\n"
  - type: System.Fabric.FabricElementAlreadyExistsException
    commentId: T:System.Fabric.FabricElementAlreadyExistsException
    description: "\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.ApplicationTypeAlreadyExists\" data-throw-if-not-resolved=\"false\"></xref>: The application type has already been provisioned</p>\n"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>There was an error accessing a file on the ImageStore.</p>\n"
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "\n<p>A required file was not found on the ImageStore.</p>\n"
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "\n<p>A required directory was not found on the ImageStore.</p>\n"
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "\n<p>A path to an ImageStore file/directory was too long.</p>\n"
  - type: System.Fabric.FabricException
    commentId: T:System.Fabric.FabricException
    description: "\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.ImageStoreIOException\" data-throw-if-not-resolved=\"false\"></xref>: There was an IO error communicating with the ImageStore.</p>\n"
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: "\n<p>The request timed out but may have already been accepted for processing by the system.</p>\n"
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>The request was canceled before the timeout expired but may have already been accepted for processing by the system.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.ApplicationManagementClient.ProvisionApplicationAsync(System.String,System.TimeSpan,System.Threading.CancellationToken)
  commentId: M:System.Fabric.FabricClient.ApplicationManagementClient.ProvisionApplicationAsync(System.String,System.TimeSpan,System.Threading.CancellationToken)
  id: ProvisionApplicationAsync(System.String,System.TimeSpan,System.Threading.CancellationToken)
  parent: System.Fabric.FabricClient.ApplicationManagementClient
  langs:
  - csharp
  - vb
  name: ProvisionApplicationAsync(String, TimeSpan, CancellationToken)
  nameWithType: FabricClient.ApplicationManagementClient.ProvisionApplicationAsync(String, TimeSpan, CancellationToken)
  fullName: System.Fabric.FabricClient.ApplicationManagementClient.ProvisionApplicationAsync(System.String, System.TimeSpan, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ApplicationManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: ProvisionApplicationAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ApplicationManagementClient.cs
    startLine: 539
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Provision or register an application type with the cluster.</p>\n"
  remarks: "\n<p>This is mandatory before an application instance can be created.</p>\n"
  example: []
  syntax:
    content: public Task ProvisionApplicationAsync(string applicationBuildPath, TimeSpan timeout, CancellationToken cancellationToken)
    content.vb: Public Function ProvisionApplicationAsync(applicationBuildPath As String, timeout As TimeSpan, cancellationToken As CancellationToken) As Task
    parameters:
    - id: applicationBuildPath
      type: System.String
      description: "\n<p>The relative path to the application package in the ImageStore location specified in the Cluster Manifest.</p>\n"
    - id: timeout
      type: System.TimeSpan
      description: "\n<p>The maximum amount of time the system will allow this operation to continue before returning <xref href=\"System.TimeoutException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> that the operation is observing. It can be used to propagate notification that the operation should be canceled.</p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>A <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> representing the operation.</p>\n"
  overload: System.Fabric.FabricClient.ApplicationManagementClient.ProvisionApplicationAsync*
  exceptions:
  - type: System.Fabric.FabricObjectClosedException
    commentId: T:System.Fabric.FabricObjectClosedException
    description: "\n<p>The <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object is in a closed state. Dispose of the <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object you are using and instantiate a new <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  - type: System.Fabric.FabricException
    commentId: T:System.Fabric.FabricException
    description: "\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.ImageBuilderValidationError\" data-throw-if-not-resolved=\"false\"></xref>: There are errors in the manifests being provisioned. </p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.ApplicationTypeProvisionInProgress\" data-throw-if-not-resolved=\"false\"></xref>: Another version of the application type is currently being provisioned. </p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidNameUri\" data-throw-if-not-resolved=\"false\"></xref>: The application name is not a valid Naming URI.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.CorruptedImageStoreObjectFound\" data-throw-if-not-resolved=\"false\"></xref>: A corrupted file was encountered on the ImageStore.</p>\n"
  - type: System.Fabric.FabricElementAlreadyExistsException
    commentId: T:System.Fabric.FabricElementAlreadyExistsException
    description: "\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.ApplicationTypeAlreadyExists\" data-throw-if-not-resolved=\"false\"></xref>: The application type has already been provisioned</p>\n"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>There was an error accessing a file on the ImageStore.</p>\n"
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "\n<p>A required file was not found on the ImageStore.</p>\n"
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "\n<p>A required directory was not found on the ImageStore.</p>\n"
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "\n<p>A path to an ImageStore file/directory was too long.</p>\n"
  - type: System.Fabric.FabricException
    commentId: T:System.Fabric.FabricException
    description: "\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.ImageStoreIOException\" data-throw-if-not-resolved=\"false\"></xref>: There was an IO error communicating with the ImageStore.</p>\n"
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: "\n<p>The request timed out but may have already been accepted for processing by the system.</p>\n"
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>The request was canceled before the timeout expired but may have already been accepted for processing by the system.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.ApplicationManagementClient.ProvisionApplicationAsync(System.Fabric.Description.ProvisionApplicationTypeDescription)
  commentId: M:System.Fabric.FabricClient.ApplicationManagementClient.ProvisionApplicationAsync(System.Fabric.Description.ProvisionApplicationTypeDescription)
  id: ProvisionApplicationAsync(System.Fabric.Description.ProvisionApplicationTypeDescription)
  parent: System.Fabric.FabricClient.ApplicationManagementClient
  langs:
  - csharp
  - vb
  name: ProvisionApplicationAsync(ProvisionApplicationTypeDescription)
  nameWithType: FabricClient.ApplicationManagementClient.ProvisionApplicationAsync(ProvisionApplicationTypeDescription)
  fullName: System.Fabric.FabricClient.ApplicationManagementClient.ProvisionApplicationAsync(System.Fabric.Description.ProvisionApplicationTypeDescription)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ApplicationManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: ProvisionApplicationAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ApplicationManagementClient.cs
    startLine: 595
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Provision or register an application type with the cluster.</p>\n"
  remarks: "\n<p>This is mandatory before an application instance can be created.</p>\n"
  example: []
  syntax:
    content: public Task ProvisionApplicationAsync(ProvisionApplicationTypeDescription description)
    content.vb: Public Function ProvisionApplicationAsync(description As ProvisionApplicationTypeDescription) As Task
    parameters:
    - id: description
      type: System.Fabric.Description.ProvisionApplicationTypeDescription
      description: "\n<p>Description of the of provision request.</p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>A <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> representing the operation.</p>\n"
  overload: System.Fabric.FabricClient.ApplicationManagementClient.ProvisionApplicationAsync*
  exceptions:
  - type: System.Fabric.FabricObjectClosedException
    commentId: T:System.Fabric.FabricObjectClosedException
    description: "\n<p>The <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object is in a closed state. Dispose of the <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object you are using and instantiate a new <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  - type: System.Fabric.FabricException
    commentId: T:System.Fabric.FabricException
    description: "\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.ImageBuilderValidationError\" data-throw-if-not-resolved=\"false\"></xref>: There are errors in the manifests being provisioned. </p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.ApplicationTypeProvisionInProgress\" data-throw-if-not-resolved=\"false\"></xref>: Another version of the application type is currently being provisioned. </p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidNameUri\" data-throw-if-not-resolved=\"false\"></xref>: The application name is not a valid Naming URI.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.CorruptedImageStoreObjectFound\" data-throw-if-not-resolved=\"false\"></xref>: A corrupted file was encountered on the ImageStore.</p>\n"
  - type: System.Fabric.FabricElementAlreadyExistsException
    commentId: T:System.Fabric.FabricElementAlreadyExistsException
    description: "\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.ApplicationTypeAlreadyExists\" data-throw-if-not-resolved=\"false\"></xref>: The application type has already been provisioned</p>\n"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>There was an error accessing a file on the ImageStore.</p>\n"
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "\n<p>A required file was not found on the ImageStore.</p>\n"
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "\n<p>A required directory was not found on the ImageStore.</p>\n"
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "\n<p>A path to an ImageStore file/directory was too long.</p>\n"
  - type: System.Fabric.FabricException
    commentId: T:System.Fabric.FabricException
    description: "\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.ImageStoreIOException\" data-throw-if-not-resolved=\"false\"></xref>: There was an IO error communicating with the ImageStore.</p>\n"
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: "\n<p>The request timed out but may have already been accepted for processing by the system.</p>\n"
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>The request was canceled before the timeout expired but may have already been accepted for processing by the system.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.ApplicationManagementClient.ProvisionApplicationAsync(System.Fabric.Description.ProvisionApplicationTypeDescription,System.TimeSpan,System.Threading.CancellationToken)
  commentId: M:System.Fabric.FabricClient.ApplicationManagementClient.ProvisionApplicationAsync(System.Fabric.Description.ProvisionApplicationTypeDescription,System.TimeSpan,System.Threading.CancellationToken)
  id: ProvisionApplicationAsync(System.Fabric.Description.ProvisionApplicationTypeDescription,System.TimeSpan,System.Threading.CancellationToken)
  parent: System.Fabric.FabricClient.ApplicationManagementClient
  langs:
  - csharp
  - vb
  name: ProvisionApplicationAsync(ProvisionApplicationTypeDescription, TimeSpan, CancellationToken)
  nameWithType: FabricClient.ApplicationManagementClient.ProvisionApplicationAsync(ProvisionApplicationTypeDescription, TimeSpan, CancellationToken)
  fullName: System.Fabric.FabricClient.ApplicationManagementClient.ProvisionApplicationAsync(System.Fabric.Description.ProvisionApplicationTypeDescription, System.TimeSpan, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ApplicationManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: ProvisionApplicationAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ApplicationManagementClient.cs
    startLine: 657
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Provision or register an application type with the cluster.</p>\n"
  remarks: "\n<p>This is mandatory before an application instance can be created.</p>\n"
  example: []
  syntax:
    content: public Task ProvisionApplicationAsync(ProvisionApplicationTypeDescription description, TimeSpan timeout, CancellationToken cancellationToken)
    content.vb: Public Function ProvisionApplicationAsync(description As ProvisionApplicationTypeDescription, timeout As TimeSpan, cancellationToken As CancellationToken) As Task
    parameters:
    - id: description
      type: System.Fabric.Description.ProvisionApplicationTypeDescription
      description: "\n<p>Description of the of provision request.</p>\n"
    - id: timeout
      type: System.TimeSpan
      description: "\n<p>The maximum amount of time the system will allow this operation to continue before returning <xref href=\"System.TimeoutException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> that the operation is observing. It can be used to propagate notification that the operation should be canceled.</p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>A <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> representing the operation.</p>\n"
  overload: System.Fabric.FabricClient.ApplicationManagementClient.ProvisionApplicationAsync*
  exceptions:
  - type: System.Fabric.FabricObjectClosedException
    commentId: T:System.Fabric.FabricObjectClosedException
    description: "\n<p>The <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object is in a closed state. Dispose of the <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object you are using and instantiate a new <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  - type: System.Fabric.FabricException
    commentId: T:System.Fabric.FabricException
    description: "\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.ImageBuilderValidationError\" data-throw-if-not-resolved=\"false\"></xref>: There are errors in the manifests being provisioned. </p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.ApplicationTypeProvisionInProgress\" data-throw-if-not-resolved=\"false\"></xref>: Another version of the application type is currently being provisioned. </p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidNameUri\" data-throw-if-not-resolved=\"false\"></xref>: The application name is not a valid Naming URI.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.CorruptedImageStoreObjectFound\" data-throw-if-not-resolved=\"false\"></xref>: A corrupted file was encountered on the ImageStore.</p>\n"
  - type: System.Fabric.FabricElementAlreadyExistsException
    commentId: T:System.Fabric.FabricElementAlreadyExistsException
    description: "\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.ApplicationTypeAlreadyExists\" data-throw-if-not-resolved=\"false\"></xref>: The application type has already been provisioned</p>\n"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>There was an error accessing a file on the ImageStore.</p>\n"
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "\n<p>A required file was not found on the ImageStore.</p>\n"
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "\n<p>A required directory was not found on the ImageStore.</p>\n"
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "\n<p>A path to an ImageStore file/directory was too long.</p>\n"
  - type: System.Fabric.FabricException
    commentId: T:System.Fabric.FabricException
    description: "\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.ImageStoreIOException\" data-throw-if-not-resolved=\"false\"></xref>: There was an IO error communicating with the ImageStore.</p>\n"
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: "\n<p>The request timed out but may have already been accepted for processing by the system.</p>\n"
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>The request was canceled before the timeout expired but may have already been accepted for processing by the system.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.ApplicationManagementClient.UnprovisionApplicationAsync(System.String,System.String)
  commentId: M:System.Fabric.FabricClient.ApplicationManagementClient.UnprovisionApplicationAsync(System.String,System.String)
  id: UnprovisionApplicationAsync(System.String,System.String)
  parent: System.Fabric.FabricClient.ApplicationManagementClient
  langs:
  - csharp
  - vb
  name: UnprovisionApplicationAsync(String, String)
  nameWithType: FabricClient.ApplicationManagementClient.UnprovisionApplicationAsync(String, String)
  fullName: System.Fabric.FabricClient.ApplicationManagementClient.UnprovisionApplicationAsync(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ApplicationManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: UnprovisionApplicationAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ApplicationManagementClient.cs
    startLine: 697
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Removes or unregisters a Service Fabric application type from the cluster.</p>\n"
  remarks: "\n<p>This method can only be called if all application instance of the application type has been deleted. Once the application type is unregistered, no new application instance can be created for this particular application type.</p>\n"
  example: []
  syntax:
    content: public Task UnprovisionApplicationAsync(string applicationTypeName, string applicationTypeVersion)
    content.vb: Public Function UnprovisionApplicationAsync(applicationTypeName As String, applicationTypeVersion As String) As Task
    parameters:
    - id: applicationTypeName
      type: System.String
      description: "\n<p>The name of the application type.</p>\n"
    - id: applicationTypeVersion
      type: System.String
      description: "\n<p>The version of the application type.</p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>A <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> representing the operation.</p>\n"
  overload: System.Fabric.FabricClient.ApplicationManagementClient.UnprovisionApplicationAsync*
  exceptions:
  - type: System.Fabric.FabricObjectClosedException
    commentId: T:System.Fabric.FabricObjectClosedException
    description: "\n<p>The <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object is in a closed state. Dispose of the <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object you are using and instantiate a new <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  - type: System.Fabric.FabricException
    commentId: T:System.Fabric.FabricException
    description: "\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.ApplicationTypeInUse\" data-throw-if-not-resolved=\"false\"></xref>: The application type is being used by one or more applications. </p>\n"
  - type: System.Fabric.FabricElementNotFoundException
    commentId: T:System.Fabric.FabricElementNotFoundException
    description: "\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.ApplicationNotFound\" data-throw-if-not-resolved=\"false\"></xref>: The application does not exist.</p>\n"
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: "\n<p>The request timed out but may have already been accepted for processing by the system.</p>\n"
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>The request was canceled before the timeout expired but may have already been accepted for processing by the system.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.ApplicationManagementClient.UnprovisionApplicationAsync(System.String,System.String,System.TimeSpan,System.Threading.CancellationToken)
  commentId: M:System.Fabric.FabricClient.ApplicationManagementClient.UnprovisionApplicationAsync(System.String,System.String,System.TimeSpan,System.Threading.CancellationToken)
  id: UnprovisionApplicationAsync(System.String,System.String,System.TimeSpan,System.Threading.CancellationToken)
  parent: System.Fabric.FabricClient.ApplicationManagementClient
  langs:
  - csharp
  - vb
  name: UnprovisionApplicationAsync(String, String, TimeSpan, CancellationToken)
  nameWithType: FabricClient.ApplicationManagementClient.UnprovisionApplicationAsync(String, String, TimeSpan, CancellationToken)
  fullName: System.Fabric.FabricClient.ApplicationManagementClient.UnprovisionApplicationAsync(System.String, System.String, System.TimeSpan, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ApplicationManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: UnprovisionApplicationAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ApplicationManagementClient.cs
    startLine: 740
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Removes or unregisters a Service Fabric application type from the cluster.</p>\n"
  remarks: "\n<p>This method can only be called if all application instance of the application type has been deleted. Once the application type is unregistered, no new application instance can be created for this particular application type.</p>\n"
  example: []
  syntax:
    content: public Task UnprovisionApplicationAsync(string applicationTypeName, string applicationTypeVersion, TimeSpan timeout, CancellationToken cancellationToken)
    content.vb: Public Function UnprovisionApplicationAsync(applicationTypeName As String, applicationTypeVersion As String, timeout As TimeSpan, cancellationToken As CancellationToken) As Task
    parameters:
    - id: applicationTypeName
      type: System.String
      description: "\n<p>The name of the application type.</p>\n"
    - id: applicationTypeVersion
      type: System.String
      description: "\n<p>The version of the application type.</p>\n"
    - id: timeout
      type: System.TimeSpan
      description: "\n<p>The maximum amount of time the system will allow this operation to continue before returning <xref href=\"System.TimeoutException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> that the operation is observing. It can be used to propagate notification that the operation should be canceled.</p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>A <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> representing the operation.</p>\n"
  overload: System.Fabric.FabricClient.ApplicationManagementClient.UnprovisionApplicationAsync*
  exceptions:
  - type: System.Fabric.FabricObjectClosedException
    commentId: T:System.Fabric.FabricObjectClosedException
    description: "\n<p>The <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object is in a closed state. Dispose of the <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object you are using and instantiate a new <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  - type: System.Fabric.FabricException
    commentId: T:System.Fabric.FabricException
    description: "\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.ApplicationTypeInUse\" data-throw-if-not-resolved=\"false\"></xref>: The application type is being used by one or more applications. </p>\n"
  - type: System.Fabric.FabricElementNotFoundException
    commentId: T:System.Fabric.FabricElementNotFoundException
    description: "\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.ApplicationNotFound\" data-throw-if-not-resolved=\"false\"></xref>: The application does not exist.</p>\n"
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: "\n<p>The request timed out but may have already been accepted for processing by the system.</p>\n"
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>The request was canceled before the timeout expired but may have already been accepted for processing by the system.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.ApplicationManagementClient.UpgradeApplicationAsync(System.Fabric.Description.ApplicationUpgradeDescription)
  commentId: M:System.Fabric.FabricClient.ApplicationManagementClient.UpgradeApplicationAsync(System.Fabric.Description.ApplicationUpgradeDescription)
  id: UpgradeApplicationAsync(System.Fabric.Description.ApplicationUpgradeDescription)
  parent: System.Fabric.FabricClient.ApplicationManagementClient
  langs:
  - csharp
  - vb
  name: UpgradeApplicationAsync(ApplicationUpgradeDescription)
  nameWithType: FabricClient.ApplicationManagementClient.UpgradeApplicationAsync(ApplicationUpgradeDescription)
  fullName: System.Fabric.FabricClient.ApplicationManagementClient.UpgradeApplicationAsync(System.Fabric.Description.ApplicationUpgradeDescription)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ApplicationManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: UpgradeApplicationAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ApplicationManagementClient.cs
    startLine: 801
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Performs upgrade on an application instance.</p>\n"
  example: []
  syntax:
    content: public Task UpgradeApplicationAsync(ApplicationUpgradeDescription upgradeDescription)
    content.vb: Public Function UpgradeApplicationAsync(upgradeDescription As ApplicationUpgradeDescription) As Task
    parameters:
    - id: upgradeDescription
      type: System.Fabric.Description.ApplicationUpgradeDescription
      description: "\n<p>The description of the upgrade policy and the application to be upgrade.</p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>A <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> representing the operation.</p>\n"
  overload: System.Fabric.FabricClient.ApplicationManagementClient.UpgradeApplicationAsync*
  exceptions:
  - type: System.Fabric.FabricObjectClosedException
    commentId: T:System.Fabric.FabricObjectClosedException
    description: "\n<p>The <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object is in a closed state. Dispose of the <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object you are using and instantiate a new <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  - type: System.Fabric.FabricException
    commentId: T:System.Fabric.FabricException
    description: "\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.ImageBuilderValidationError\" data-throw-if-not-resolved=\"false\"></xref>: The upgrade is invalid with respect to the provisioned manifests. </p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.ApplicationUpgradeValidationError\" data-throw-if-not-resolved=\"false\"></xref>: The application type does not exist. </p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidNameUri\" data-throw-if-not-resolved=\"false\"></xref>: The application name is not a valid Naming URI.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.CorruptedImageStoreObjectFound\" data-throw-if-not-resolved=\"false\"></xref>: A corrupted file was encountered on the ImageStore.</p>\n"
  - type: System.Fabric.FabricElementNotFoundException
    commentId: T:System.Fabric.FabricElementNotFoundException
    description: "\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.ApplicationNotFound\" data-throw-if-not-resolved=\"false\"></xref>: The application does not exist.</p>\n"
  - type: System.Fabric.FabricTransientException
    commentId: T:System.Fabric.FabricTransientException
    description: "\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.ApplicationUpgradeInProgress\" data-throw-if-not-resolved=\"false\"></xref>: The application is already being upgraded to the requested version.</p>\n"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>There was an error accessing a file on the ImageStore.</p>\n"
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "\n<p>A required file was not found on the ImageStore.</p>\n"
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "\n<p>A required directory was not found on the ImageStore.</p>\n"
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "\n<p>A path to an ImageStore file/directory was too long.</p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>  \n<xref href=\"System.Fabric.FabricErrorCode.ImageStoreIOException\" data-throw-if-not-resolved=\"false\"></xref>: There was an IO error communicating with the ImageStore.</p>\n"
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: "\n<p>The request timed out but may have already been accepted for processing by the system.</p>\n"
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>The request was canceled before the timeout expired but may have already been accepted for processing by the system.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.ApplicationManagementClient.UpgradeApplicationAsync(System.Fabric.Description.ApplicationUpgradeDescription,System.TimeSpan,System.Threading.CancellationToken)
  commentId: M:System.Fabric.FabricClient.ApplicationManagementClient.UpgradeApplicationAsync(System.Fabric.Description.ApplicationUpgradeDescription,System.TimeSpan,System.Threading.CancellationToken)
  id: UpgradeApplicationAsync(System.Fabric.Description.ApplicationUpgradeDescription,System.TimeSpan,System.Threading.CancellationToken)
  parent: System.Fabric.FabricClient.ApplicationManagementClient
  langs:
  - csharp
  - vb
  name: UpgradeApplicationAsync(ApplicationUpgradeDescription, TimeSpan, CancellationToken)
  nameWithType: FabricClient.ApplicationManagementClient.UpgradeApplicationAsync(ApplicationUpgradeDescription, TimeSpan, CancellationToken)
  fullName: System.Fabric.FabricClient.ApplicationManagementClient.UpgradeApplicationAsync(System.Fabric.Description.ApplicationUpgradeDescription, System.TimeSpan, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ApplicationManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: UpgradeApplicationAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ApplicationManagementClient.cs
    startLine: 864
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Performs upgrade on an application instance.</p>\n"
  example: []
  syntax:
    content: public Task UpgradeApplicationAsync(ApplicationUpgradeDescription upgradeDescription, TimeSpan timeout, CancellationToken cancellationToken)
    content.vb: Public Function UpgradeApplicationAsync(upgradeDescription As ApplicationUpgradeDescription, timeout As TimeSpan, cancellationToken As CancellationToken) As Task
    parameters:
    - id: upgradeDescription
      type: System.Fabric.Description.ApplicationUpgradeDescription
      description: "\n<p>The description of the upgrade policy and the application to be upgraded.</p>\n"
    - id: timeout
      type: System.TimeSpan
      description: "\n<p>The maximum amount of time the system will allow this operation to continue before returning <xref href=\"System.TimeoutException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The token that the operation is observing. It can be used to propagate notification that the operation should be canceled.</p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>A <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> representing the operation.</p>\n"
  overload: System.Fabric.FabricClient.ApplicationManagementClient.UpgradeApplicationAsync*
  exceptions:
  - type: System.Fabric.FabricObjectClosedException
    commentId: T:System.Fabric.FabricObjectClosedException
    description: "\n<p>The <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object is in a closed state. Dispose of the <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object you are using and instantiate a new <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  - type: System.Fabric.FabricException
    commentId: T:System.Fabric.FabricException
    description: "\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.ImageBuilderValidationError\" data-throw-if-not-resolved=\"false\"></xref>: The upgrade is invalid with respect to the provisioned manifests. </p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.ApplicationUpgradeValidationError\" data-throw-if-not-resolved=\"false\"></xref>: The application type does not exist. </p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.InvalidNameUri\" data-throw-if-not-resolved=\"false\"></xref>: The application name is not a valid Naming URI.</p>\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.CorruptedImageStoreObjectFound\" data-throw-if-not-resolved=\"false\"></xref>: A corrupted file was encountered on the ImageStore.</p>\n"
  - type: System.Fabric.FabricElementNotFoundException
    commentId: T:System.Fabric.FabricElementNotFoundException
    description: "\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.ApplicationNotFound\" data-throw-if-not-resolved=\"false\"></xref>: The application does not exist.</p>\n"
  - type: System.Fabric.FabricTransientException
    commentId: T:System.Fabric.FabricTransientException
    description: "\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.ApplicationUpgradeInProgress\" data-throw-if-not-resolved=\"false\"></xref>: The application is already being upgraded to the requested version.</p>\n"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>There was an error accessing a file on the ImageStore.</p>\n"
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "\n<p>A required file was not found on the ImageStore.</p>\n"
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "\n<p>A required directory was not found on the ImageStore.</p>\n"
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "\n<p>A path to an ImageStore file/directory was too long.</p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>  \n<xref href=\"System.Fabric.FabricErrorCode.ImageStoreIOException\" data-throw-if-not-resolved=\"false\"></xref>: There was an IO error communicating with the ImageStore.</p>\n"
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: "\n<p>The request timed out but may have already been accepted for processing by the system.</p>\n"
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>The request was canceled before the timeout expired but may have already been accepted for processing by the system.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.ApplicationManagementClient.UpdateApplicationUpgradeAsync(System.Fabric.Description.ApplicationUpgradeUpdateDescription)
  commentId: M:System.Fabric.FabricClient.ApplicationManagementClient.UpdateApplicationUpgradeAsync(System.Fabric.Description.ApplicationUpgradeUpdateDescription)
  id: UpdateApplicationUpgradeAsync(System.Fabric.Description.ApplicationUpgradeUpdateDescription)
  parent: System.Fabric.FabricClient.ApplicationManagementClient
  langs:
  - csharp
  - vb
  name: UpdateApplicationUpgradeAsync(ApplicationUpgradeUpdateDescription)
  nameWithType: FabricClient.ApplicationManagementClient.UpdateApplicationUpgradeAsync(ApplicationUpgradeUpdateDescription)
  fullName: System.Fabric.FabricClient.ApplicationManagementClient.UpdateApplicationUpgradeAsync(System.Fabric.Description.ApplicationUpgradeUpdateDescription)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ApplicationManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: UpdateApplicationUpgradeAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ApplicationManagementClient.cs
    startLine: 886
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Modifies the upgrade parameters of a pending application upgrade.</p>\n"
  example: []
  syntax:
    content: public Task UpdateApplicationUpgradeAsync(ApplicationUpgradeUpdateDescription updateDescription)
    content.vb: Public Function UpdateApplicationUpgradeAsync(updateDescription As ApplicationUpgradeUpdateDescription) As Task
    parameters:
    - id: updateDescription
      type: System.Fabric.Description.ApplicationUpgradeUpdateDescription
      description: "\n<p>Description of parameters to modify. Unspecified parameters are left unmodified and will retain their current value in the upgrade.</p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>A <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> representing the operation.</p>\n"
  overload: System.Fabric.FabricClient.ApplicationManagementClient.UpdateApplicationUpgradeAsync*
  exceptions:
  - type: System.Fabric.FabricException
    commentId: T:System.Fabric.FabricException
    description: "\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.ApplicationNotUpgrading\" data-throw-if-not-resolved=\"false\"></xref>: There is no pending application upgrade to modify.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.ApplicationManagementClient.UpdateApplicationUpgradeAsync(System.Fabric.Description.ApplicationUpgradeUpdateDescription,System.TimeSpan,System.Threading.CancellationToken)
  commentId: M:System.Fabric.FabricClient.ApplicationManagementClient.UpdateApplicationUpgradeAsync(System.Fabric.Description.ApplicationUpgradeUpdateDescription,System.TimeSpan,System.Threading.CancellationToken)
  id: UpdateApplicationUpgradeAsync(System.Fabric.Description.ApplicationUpgradeUpdateDescription,System.TimeSpan,System.Threading.CancellationToken)
  parent: System.Fabric.FabricClient.ApplicationManagementClient
  langs:
  - csharp
  - vb
  name: UpdateApplicationUpgradeAsync(ApplicationUpgradeUpdateDescription, TimeSpan, CancellationToken)
  nameWithType: FabricClient.ApplicationManagementClient.UpdateApplicationUpgradeAsync(ApplicationUpgradeUpdateDescription, TimeSpan, CancellationToken)
  fullName: System.Fabric.FabricClient.ApplicationManagementClient.UpdateApplicationUpgradeAsync(System.Fabric.Description.ApplicationUpgradeUpdateDescription, System.TimeSpan, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ApplicationManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: UpdateApplicationUpgradeAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ApplicationManagementClient.cs
    startLine: 910
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Modifies the upgrade parameters of a pending application upgrade.</p>\n"
  example: []
  syntax:
    content: public Task UpdateApplicationUpgradeAsync(ApplicationUpgradeUpdateDescription updateDescription, TimeSpan timeout, CancellationToken cancellationToken)
    content.vb: Public Function UpdateApplicationUpgradeAsync(updateDescription As ApplicationUpgradeUpdateDescription, timeout As TimeSpan, cancellationToken As CancellationToken) As Task
    parameters:
    - id: updateDescription
      type: System.Fabric.Description.ApplicationUpgradeUpdateDescription
      description: "\n<p>Description of parameters to modify. Unspecified parameters are left unmodified and will retain their current value in the upgrade.</p>\n"
    - id: timeout
      type: System.TimeSpan
      description: "\n<p>The maximum amount of time the system will allow this operation to continue before returning <xref href=\"System.TimeoutException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The token that the operation is observing. It can be used to propagate a notification that the operation should be canceled.</p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>A <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> representing the operation.</p>\n"
  overload: System.Fabric.FabricClient.ApplicationManagementClient.UpdateApplicationUpgradeAsync*
  exceptions:
  - type: System.Fabric.FabricException
    commentId: T:System.Fabric.FabricException
    description: "\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.ApplicationNotUpgrading\" data-throw-if-not-resolved=\"false\"></xref>: There is no pending application upgrade to modify.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.ApplicationManagementClient.RollbackApplicationUpgradeAsync(System.Uri)
  commentId: M:System.Fabric.FabricClient.ApplicationManagementClient.RollbackApplicationUpgradeAsync(System.Uri)
  id: RollbackApplicationUpgradeAsync(System.Uri)
  parent: System.Fabric.FabricClient.ApplicationManagementClient
  langs:
  - csharp
  - vb
  name: RollbackApplicationUpgradeAsync(Uri)
  nameWithType: FabricClient.ApplicationManagementClient.RollbackApplicationUpgradeAsync(Uri)
  fullName: System.Fabric.FabricClient.ApplicationManagementClient.RollbackApplicationUpgradeAsync(System.Uri)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ApplicationManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: RollbackApplicationUpgradeAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ApplicationManagementClient.cs
    startLine: 932
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Starts rolling back the current application upgrade.</p>\n"
  example: []
  syntax:
    content: public Task RollbackApplicationUpgradeAsync(Uri applicationName)
    content.vb: Public Function RollbackApplicationUpgradeAsync(applicationName As Uri) As Task
    parameters:
    - id: applicationName
      type: System.Uri
      description: "\n<p>Name of the application</p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>A <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> representing the operation.</p>\n"
  overload: System.Fabric.FabricClient.ApplicationManagementClient.RollbackApplicationUpgradeAsync*
  exceptions:
  - type: System.Fabric.FabricException
    commentId: T:System.Fabric.FabricException
    description: "\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.ApplicationNotUpgrading\" data-throw-if-not-resolved=\"false\"></xref>: There is no pending upgrade for the specified application to rollback.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.ApplicationManagementClient.RollbackApplicationUpgradeAsync(System.Uri,System.TimeSpan,System.Threading.CancellationToken)
  commentId: M:System.Fabric.FabricClient.ApplicationManagementClient.RollbackApplicationUpgradeAsync(System.Uri,System.TimeSpan,System.Threading.CancellationToken)
  id: RollbackApplicationUpgradeAsync(System.Uri,System.TimeSpan,System.Threading.CancellationToken)
  parent: System.Fabric.FabricClient.ApplicationManagementClient
  langs:
  - csharp
  - vb
  name: RollbackApplicationUpgradeAsync(Uri, TimeSpan, CancellationToken)
  nameWithType: FabricClient.ApplicationManagementClient.RollbackApplicationUpgradeAsync(Uri, TimeSpan, CancellationToken)
  fullName: System.Fabric.FabricClient.ApplicationManagementClient.RollbackApplicationUpgradeAsync(System.Uri, System.TimeSpan, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ApplicationManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: RollbackApplicationUpgradeAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ApplicationManagementClient.cs
    startLine: 952
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Starts rolling back the current application upgrade</p>\n"
  example: []
  syntax:
    content: public Task RollbackApplicationUpgradeAsync(Uri applicationName, TimeSpan timeout, CancellationToken cancellationToken)
    content.vb: Public Function RollbackApplicationUpgradeAsync(applicationName As Uri, timeout As TimeSpan, cancellationToken As CancellationToken) As Task
    parameters:
    - id: applicationName
      type: System.Uri
      description: "\n<p>Name of the application</p>\n"
    - id: timeout
      type: System.TimeSpan
      description: "\n<p>The maximum amount of time the system will allow this operation to continue before returning <xref href=\"System.TimeoutException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> that the operation is observing. It can be used to propagate notification that the operation should be canceled.</p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>A <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> representing the operation.</p>\n"
  overload: System.Fabric.FabricClient.ApplicationManagementClient.RollbackApplicationUpgradeAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.ApplicationManagementClient.GetApplicationUpgradeProgressAsync(System.Uri)
  commentId: M:System.Fabric.FabricClient.ApplicationManagementClient.GetApplicationUpgradeProgressAsync(System.Uri)
  id: GetApplicationUpgradeProgressAsync(System.Uri)
  parent: System.Fabric.FabricClient.ApplicationManagementClient
  langs:
  - csharp
  - vb
  name: GetApplicationUpgradeProgressAsync(Uri)
  nameWithType: FabricClient.ApplicationManagementClient.GetApplicationUpgradeProgressAsync(Uri)
  fullName: System.Fabric.FabricClient.ApplicationManagementClient.GetApplicationUpgradeProgressAsync(System.Uri)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ApplicationManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: GetApplicationUpgradeProgressAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ApplicationManagementClient.cs
    startLine: 982
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Retrieves the upgrade progress of the specified application instance.</p>\n"
  example: []
  syntax:
    content: public Task<ApplicationUpgradeProgress> GetApplicationUpgradeProgressAsync(Uri applicationName)
    content.vb: Public Function GetApplicationUpgradeProgressAsync(applicationName As Uri) As Task(Of ApplicationUpgradeProgress)
    parameters:
    - id: applicationName
      type: System.Uri
      description: "\n<p>The URI of the application instance name.</p>\n"
    return:
      type: System.Threading.Tasks.Task{System.Fabric.ApplicationUpgradeProgress}
      description: "\n<p>A <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> whose result is the upgrade progress of the specified application instance.</p>\n"
  overload: System.Fabric.FabricClient.ApplicationManagementClient.GetApplicationUpgradeProgressAsync*
  exceptions:
  - type: System.Fabric.FabricObjectClosedException
    commentId: T:System.Fabric.FabricObjectClosedException
    description: "\n<p>The <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object is in a closed state. Dispose of the <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object you are using and instantiate a new <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  - type: System.Fabric.FabricElementNotFoundException
    commentId: T:System.Fabric.FabricElementNotFoundException
    description: "\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.ApplicationNotFound\" data-throw-if-not-resolved=\"false\"></xref>: The application does not exist.</p>\n"
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: "\n<p>The request timed out but may have already been accepted for processing by the system.</p>\n"
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>The request was canceled before the timeout expired but may have already been accepted for processing by the system.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.ApplicationManagementClient.GetApplicationUpgradeProgressAsync(System.Uri,System.TimeSpan,System.Threading.CancellationToken)
  commentId: M:System.Fabric.FabricClient.ApplicationManagementClient.GetApplicationUpgradeProgressAsync(System.Uri,System.TimeSpan,System.Threading.CancellationToken)
  id: GetApplicationUpgradeProgressAsync(System.Uri,System.TimeSpan,System.Threading.CancellationToken)
  parent: System.Fabric.FabricClient.ApplicationManagementClient
  langs:
  - csharp
  - vb
  name: GetApplicationUpgradeProgressAsync(Uri, TimeSpan, CancellationToken)
  nameWithType: FabricClient.ApplicationManagementClient.GetApplicationUpgradeProgressAsync(Uri, TimeSpan, CancellationToken)
  fullName: System.Fabric.FabricClient.ApplicationManagementClient.GetApplicationUpgradeProgressAsync(System.Uri, System.TimeSpan, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ApplicationManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: GetApplicationUpgradeProgressAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ApplicationManagementClient.cs
    startLine: 1015
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Retrieves the upgrade progress of the specified application instance.</p>\n"
  example: []
  syntax:
    content: public Task<ApplicationUpgradeProgress> GetApplicationUpgradeProgressAsync(Uri applicationName, TimeSpan timeout, CancellationToken cancellationToken)
    content.vb: Public Function GetApplicationUpgradeProgressAsync(applicationName As Uri, timeout As TimeSpan, cancellationToken As CancellationToken) As Task(Of ApplicationUpgradeProgress)
    parameters:
    - id: applicationName
      type: System.Uri
      description: "\n<p>The URI of the application instance name.</p>\n"
    - id: timeout
      type: System.TimeSpan
      description: "\n<p>The maximum amount of time the system will allow this operation to continue before returning <xref href=\"System.TimeoutException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> that the operation is observing. It can be used to propagate notification that the operation should be canceled.</p>\n"
    return:
      type: System.Threading.Tasks.Task{System.Fabric.ApplicationUpgradeProgress}
      description: "\n<p>A <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> whose result is the upgrade progress of the specified application instance.</p>\n"
  overload: System.Fabric.FabricClient.ApplicationManagementClient.GetApplicationUpgradeProgressAsync*
  exceptions:
  - type: System.Fabric.FabricObjectClosedException
    commentId: T:System.Fabric.FabricObjectClosedException
    description: "\n<p>The <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object is in a closed state. Dispose of the <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object you are using and instantiate a new <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  - type: System.Fabric.FabricElementNotFoundException
    commentId: T:System.Fabric.FabricElementNotFoundException
    description: "\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.ApplicationNotFound\" data-throw-if-not-resolved=\"false\"></xref>: The application does not exist.</p>\n"
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: "\n<p>The request timed out but may have already been accepted for processing by the system.</p>\n"
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>The request was canceled before the timeout expired but may have already been accepted for processing by the system.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.ApplicationManagementClient.MoveNextApplicationUpgradeDomainAsync(System.Fabric.ApplicationUpgradeProgress)
  commentId: M:System.Fabric.FabricClient.ApplicationManagementClient.MoveNextApplicationUpgradeDomainAsync(System.Fabric.ApplicationUpgradeProgress)
  id: MoveNextApplicationUpgradeDomainAsync(System.Fabric.ApplicationUpgradeProgress)
  parent: System.Fabric.FabricClient.ApplicationManagementClient
  langs:
  - csharp
  - vb
  name: MoveNextApplicationUpgradeDomainAsync(ApplicationUpgradeProgress)
  nameWithType: FabricClient.ApplicationManagementClient.MoveNextApplicationUpgradeDomainAsync(ApplicationUpgradeProgress)
  fullName: System.Fabric.FabricClient.ApplicationManagementClient.MoveNextApplicationUpgradeDomainAsync(System.Fabric.ApplicationUpgradeProgress)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ApplicationManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: MoveNextApplicationUpgradeDomainAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ApplicationManagementClient.cs
    startLine: 1048
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Instructs the Service Fabric to upgrade the application instance in the next upgrade domain.</p>\n"
  remarks: "\n<p>Service Fabric would only move to the next upgrade domain if it has completed the upgrade domain it is currently updating. In other words, <xref href=\"System.Fabric.ApplicationUpgradeProgress.UpgradeState\" data-throw-if-not-resolved=\"false\"></xref> property should be Pending before calling this method.</p>\n"
  example: []
  syntax:
    content: public Task MoveNextApplicationUpgradeDomainAsync(ApplicationUpgradeProgress upgradeProgress)
    content.vb: Public Function MoveNextApplicationUpgradeDomainAsync(upgradeProgress As ApplicationUpgradeProgress) As Task
    parameters:
    - id: upgradeProgress
      type: System.Fabric.ApplicationUpgradeProgress
      description: "\n<p>–The Upgrade progress of the application instance of interest. This provides information about the next upgrade domain to be upgraded.</p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>A <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> representing the operation.</p>\n"
  overload: System.Fabric.FabricClient.ApplicationManagementClient.MoveNextApplicationUpgradeDomainAsync*
  exceptions:
  - type: System.Fabric.FabricObjectClosedException
    commentId: T:System.Fabric.FabricObjectClosedException
    description: "\n<p>The <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object is in a closed state. Dispose of the <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object you are using and instantiate a new <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  - type: System.Fabric.FabricElementNotFoundException
    commentId: T:System.Fabric.FabricElementNotFoundException
    description: "\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.ApplicationNotFound\" data-throw-if-not-resolved=\"false\"></xref>: The application does not exist.</p>\n"
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: "\n<p>The request timed out but may have already been accepted for processing by the system.</p>\n"
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>The request was canceled before the timeout expired but may have already been accepted for processing by the system.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.ApplicationManagementClient.MoveNextApplicationUpgradeDomainAsync(System.Fabric.ApplicationUpgradeProgress,System.TimeSpan,System.Threading.CancellationToken)
  commentId: M:System.Fabric.FabricClient.ApplicationManagementClient.MoveNextApplicationUpgradeDomainAsync(System.Fabric.ApplicationUpgradeProgress,System.TimeSpan,System.Threading.CancellationToken)
  id: MoveNextApplicationUpgradeDomainAsync(System.Fabric.ApplicationUpgradeProgress,System.TimeSpan,System.Threading.CancellationToken)
  parent: System.Fabric.FabricClient.ApplicationManagementClient
  langs:
  - csharp
  - vb
  name: MoveNextApplicationUpgradeDomainAsync(ApplicationUpgradeProgress, TimeSpan, CancellationToken)
  nameWithType: FabricClient.ApplicationManagementClient.MoveNextApplicationUpgradeDomainAsync(ApplicationUpgradeProgress, TimeSpan, CancellationToken)
  fullName: System.Fabric.FabricClient.ApplicationManagementClient.MoveNextApplicationUpgradeDomainAsync(System.Fabric.ApplicationUpgradeProgress, System.TimeSpan, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ApplicationManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: MoveNextApplicationUpgradeDomainAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ApplicationManagementClient.cs
    startLine: 1084
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Instructs the upgrade to continue with the application instance in the next upgrade domain.</p>\n"
  remarks: "\n<p>Service Fabric would only move to the next upgrade domain if it has completed the upgrade domain it is currently updating. In other words, <xref href=\"System.Fabric.ApplicationUpgradeProgress.UpgradeState\" data-throw-if-not-resolved=\"false\"></xref> property should be Pending before calling this method.</p>\n"
  example: []
  syntax:
    content: public Task MoveNextApplicationUpgradeDomainAsync(ApplicationUpgradeProgress upgradeProgress, TimeSpan timeout, CancellationToken cancellationToken)
    content.vb: Public Function MoveNextApplicationUpgradeDomainAsync(upgradeProgress As ApplicationUpgradeProgress, timeout As TimeSpan, cancellationToken As CancellationToken) As Task
    parameters:
    - id: upgradeProgress
      type: System.Fabric.ApplicationUpgradeProgress
      description: "\n<p>The upgrade progress of the application instance of interest. This provides information about the next upgrade domain to be upgraded.</p>\n"
    - id: timeout
      type: System.TimeSpan
      description: "\n<p>The maximum amount of time the system will allow this operation to continue before returning <xref href=\"System.TimeoutException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> that the operation is observing. It can be used to propagate notification that the operation should be canceled.</p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>A <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> representing the operation.</p>\n"
  overload: System.Fabric.FabricClient.ApplicationManagementClient.MoveNextApplicationUpgradeDomainAsync*
  exceptions:
  - type: System.Fabric.FabricObjectClosedException
    commentId: T:System.Fabric.FabricObjectClosedException
    description: "\n<p>The <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object is in a closed state. Dispose of the <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object you are using and instantiate a new <xref href=\"System.Fabric.FabricClient\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  - type: System.Fabric.FabricElementNotFoundException
    commentId: T:System.Fabric.FabricElementNotFoundException
    description: "\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.ApplicationNotFound\" data-throw-if-not-resolved=\"false\"></xref>: The application does not exist.</p>\n"
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: "\n<p>The request timed out but may have already been accepted for processing by the system.</p>\n"
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>The request was canceled before the timeout expired but may have already been accepted for processing by the system.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.ApplicationManagementClient.DeployServicePackageToNode(System.String,System.String,System.String,System.Fabric.PackageSharingPolicyList,System.String,System.TimeSpan,System.Threading.CancellationToken)
  commentId: M:System.Fabric.FabricClient.ApplicationManagementClient.DeployServicePackageToNode(System.String,System.String,System.String,System.Fabric.PackageSharingPolicyList,System.String,System.TimeSpan,System.Threading.CancellationToken)
  id: DeployServicePackageToNode(System.String,System.String,System.String,System.Fabric.PackageSharingPolicyList,System.String,System.TimeSpan,System.Threading.CancellationToken)
  parent: System.Fabric.FabricClient.ApplicationManagementClient
  langs:
  - csharp
  - vb
  name: DeployServicePackageToNode(String, String, String, PackageSharingPolicyList, String, TimeSpan, CancellationToken)
  nameWithType: FabricClient.ApplicationManagementClient.DeployServicePackageToNode(String, String, String, PackageSharingPolicyList, String, TimeSpan, CancellationToken)
  fullName: System.Fabric.FabricClient.ApplicationManagementClient.DeployServicePackageToNode(System.String, System.String, System.String, System.Fabric.PackageSharingPolicyList, System.String, System.TimeSpan, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ApplicationManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: DeployServicePackageToNode
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ApplicationManagementClient.cs
    startLine: 1119
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Downloads packages associated with service manifest to image cache on specified node. </p>\n"
  example: []
  syntax:
    content: public Task DeployServicePackageToNode(string applicationTypeName, string applicationTypeVersion, string serviceManifestName, PackageSharingPolicyList sharingPolicies, string nodeName, TimeSpan timeout, CancellationToken cancellationToken)
    content.vb: Public Function DeployServicePackageToNode(applicationTypeName As String, applicationTypeVersion As String, serviceManifestName As String, sharingPolicies As PackageSharingPolicyList, nodeName As String, timeout As TimeSpan, cancellationToken As CancellationToken) As Task
    parameters:
    - id: applicationTypeName
      type: System.String
      description: "\n<p>ApplicationTypeName associated with service manifest to be downloaded</p>\n"
    - id: applicationTypeVersion
      type: System.String
      description: "\n<p>Version of ApplicationType </p>\n"
    - id: serviceManifestName
      type: System.String
      description: "\n<p>Name of service manifest whose packages need to be downloaded</p>\n"
    - id: sharingPolicies
      type: System.Fabric.PackageSharingPolicyList
      description: "\n<p>Sharing policy representing packages that need to be copied to shared folders</p>\n"
    - id: nodeName
      type: System.String
      description: "\n<p>Name of the node where packages need to be downloaded.</p>\n"
    - id: timeout
      type: System.TimeSpan
      description: "\n<p>The maximum amount of time the system will allow this operation to continue before returning T:System.TimeoutException</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref>that the operation is observing. It can be used to propagate notification that the operation should be canceled</p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>A <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> representing the operation.</p>\n"
  overload: System.Fabric.FabricClient.ApplicationManagementClient.DeployServicePackageToNode*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.ApplicationManagementClient.GetApplicationManifestAsync(System.String,System.String)
  commentId: M:System.Fabric.FabricClient.ApplicationManagementClient.GetApplicationManifestAsync(System.String,System.String)
  id: GetApplicationManifestAsync(System.String,System.String)
  parent: System.Fabric.FabricClient.ApplicationManagementClient
  langs:
  - csharp
  - vb
  name: GetApplicationManifestAsync(String, String)
  nameWithType: FabricClient.ApplicationManagementClient.GetApplicationManifestAsync(String, String)
  fullName: System.Fabric.FabricClient.ApplicationManagementClient.GetApplicationManifestAsync(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ApplicationManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: GetApplicationManifestAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ApplicationManagementClient.cs
    startLine: 1159
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Gets the contents of a provisioned Application Manifest stored in the cluster.</p>\n"
  example: []
  syntax:
    content: public Task<string> GetApplicationManifestAsync(string applicationTypeName, string applicationTypeVersion)
    content.vb: Public Function GetApplicationManifestAsync(applicationTypeName As String, applicationTypeVersion As String) As Task(Of String)
    parameters:
    - id: applicationTypeName
      type: System.String
      description: "\n<p>The type name as specified in the Application Manifest.</p>\n"
    - id: applicationTypeVersion
      type: System.String
      description: "\n<p>The type version as specified in the Application Manifest.</p>\n"
    return:
      type: System.Threading.Tasks.Task{System.String}
      description: "\n<p>A <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> whose result is the raw XML string contents of the Application Manifest.</p>\n"
  overload: System.Fabric.FabricClient.ApplicationManagementClient.GetApplicationManifestAsync*
  exceptions:
  - type: System.Fabric.FabricErrorCode.ApplicationTypeNotFound
    commentId: F:System.Fabric.FabricErrorCode.ApplicationTypeNotFound
    description: "\n<p>The requested application type and version has not been provisioned.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.ApplicationManagementClient.GetApplicationManifestAsync(System.String,System.String,System.TimeSpan,System.Threading.CancellationToken)
  commentId: M:System.Fabric.FabricClient.ApplicationManagementClient.GetApplicationManifestAsync(System.String,System.String,System.TimeSpan,System.Threading.CancellationToken)
  id: GetApplicationManifestAsync(System.String,System.String,System.TimeSpan,System.Threading.CancellationToken)
  parent: System.Fabric.FabricClient.ApplicationManagementClient
  langs:
  - csharp
  - vb
  name: GetApplicationManifestAsync(String, String, TimeSpan, CancellationToken)
  nameWithType: FabricClient.ApplicationManagementClient.GetApplicationManifestAsync(String, String, TimeSpan, CancellationToken)
  fullName: System.Fabric.FabricClient.ApplicationManagementClient.GetApplicationManifestAsync(System.String, System.String, System.TimeSpan, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ApplicationManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: GetApplicationManifestAsync
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ApplicationManagementClient.cs
    startLine: 1185
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Gets the contents of a provisioned Application Manifest stored in the cluster.</p>\n"
  example: []
  syntax:
    content: public Task<string> GetApplicationManifestAsync(string applicationTypeName, string applicationTypeVersion, TimeSpan timeout, CancellationToken cancellationToken)
    content.vb: Public Function GetApplicationManifestAsync(applicationTypeName As String, applicationTypeVersion As String, timeout As TimeSpan, cancellationToken As CancellationToken) As Task(Of String)
    parameters:
    - id: applicationTypeName
      type: System.String
      description: "\n<p>The type name as specified in the Application Manifest.</p>\n"
    - id: applicationTypeVersion
      type: System.String
      description: "\n<p>The type version as specified in the Application Manifest.</p>\n"
    - id: timeout
      type: System.TimeSpan
      description: "\n<p>The maximum amount of time the system will allow this operation to continue before returning <xref href=\"System.TimeoutException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> that the operation is observing. It can be used to propagate notification that the operation should be canceled.</p>\n"
    return:
      type: System.Threading.Tasks.Task{System.String}
      description: "\n<p>A <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> whose result is the raw XML string contents of the Application Manifest.</p>\n"
  overload: System.Fabric.FabricClient.ApplicationManagementClient.GetApplicationManifestAsync*
  exceptions:
  - type: System.Fabric.FabricErrorCode.ApplicationTypeNotFound
    commentId: F:System.Fabric.FabricErrorCode.ApplicationTypeNotFound
    description: "\n<p>The requested application type and version has not been provisioned.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.ApplicationManagementClient.CopyApplicationPackage(System.String,System.String,System.String)
  commentId: M:System.Fabric.FabricClient.ApplicationManagementClient.CopyApplicationPackage(System.String,System.String,System.String)
  id: CopyApplicationPackage(System.String,System.String,System.String)
  parent: System.Fabric.FabricClient.ApplicationManagementClient
  langs:
  - csharp
  - vb
  name: CopyApplicationPackage(String, String, String)
  nameWithType: FabricClient.ApplicationManagementClient.CopyApplicationPackage(String, String, String)
  fullName: System.Fabric.FabricClient.ApplicationManagementClient.CopyApplicationPackage(System.String, System.String, System.String)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ApplicationManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: CopyApplicationPackage
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ApplicationManagementClient.cs
    startLine: 1228
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Uploads an application package to the Image Store in preparation for provisioning a new application type.</p>\n"
  example: []
  syntax:
    content: public void CopyApplicationPackage(string imageStoreConnectionString, string applicationPackagePath, string applicationPackagePathInImageStore)
    content.vb: Public Sub CopyApplicationPackage(imageStoreConnectionString As String, applicationPackagePath As String, applicationPackagePathInImageStore As String)
    parameters:
    - id: imageStoreConnectionString
      type: System.String
      description: "\n<p>The connection string for the Image Store as specified in the Cluster Manifest.</p>\n"
    - id: applicationPackagePath
      type: System.String
      description: "\n<p>The full path to the source application package.</p>\n"
    - id: applicationPackagePathInImageStore
      type: System.String
      description: "\n<p>The relative path for the destination in the Image Store. This same relative path should be passed into the subsequent <xref href=\"System.Fabric.FabricClient.ApplicationManagementClient.ProvisionApplicationAsync(System.String)\" data-throw-if-not-resolved=\"false\"></xref> call.</p>\n"
  overload: System.Fabric.FabricClient.ApplicationManagementClient.CopyApplicationPackage*
  exceptions:
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>There was an error accessing a file on the Image Store.</p>\n"
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "\n<p>A required file was not found on the Image Store.</p>\n"
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "\n<p>A required directory was not found on the Image Store.</p>\n"
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "\n<p>A path to an Image Store file/directory was too long.</p>\n"
  - type: System.Fabric.FabricException
    commentId: T:System.Fabric.FabricException
    description: "\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.ImageStoreIOException\" data-throw-if-not-resolved=\"false\"></xref>: There was an IO error communicating with the Image Store.</p>\n"
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: "\n<p>The request timed out but may have already been accepted for processing by the system.</p>\n"
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>The request was canceled before the timeout expired but may have already been accepted for processing by the system.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Fabric.FabricClient.ApplicationManagementClient.RemoveApplicationPackage(System.String,System.String)
  commentId: M:System.Fabric.FabricClient.ApplicationManagementClient.RemoveApplicationPackage(System.String,System.String)
  id: RemoveApplicationPackage(System.String,System.String)
  parent: System.Fabric.FabricClient.ApplicationManagementClient
  langs:
  - csharp
  - vb
  name: RemoveApplicationPackage(String, String)
  nameWithType: FabricClient.ApplicationManagementClient.RemoveApplicationPackage(String, String)
  fullName: System.Fabric.FabricClient.ApplicationManagementClient.RemoveApplicationPackage(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ApplicationManagementClient.cs
      branch: develop
      repo: https://msazure.visualstudio.com/DefaultCollection/One/_git/WindowsFabric
    id: RemoveApplicationPackage
    path: src/prod/src/managed/Api/src/System/Fabric/FabricClient.ApplicationManagementClient.cs
    startLine: 1260
  assemblies:
  - System.Fabric
  namespace: System.Fabric
  summary: "\n<p>Deletes an application package from the Image Store.</p>\n"
  example: []
  syntax:
    content: public void RemoveApplicationPackage(string imageStoreConnectionString, string applicationPackagePathInImageStore)
    content.vb: Public Sub RemoveApplicationPackage(imageStoreConnectionString As String, applicationPackagePathInImageStore As String)
    parameters:
    - id: imageStoreConnectionString
      type: System.String
      description: "\n<p>The connection string for the Image Store as specified in the Cluster Manifest.</p>\n"
    - id: applicationPackagePathInImageStore
      type: System.String
      description: "\n<p>The relative path for the package in the Image Store.</p>\n"
  overload: System.Fabric.FabricClient.ApplicationManagementClient.RemoveApplicationPackage*
  exceptions:
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>There was an error accessing a file on the ImageStore.</p>\n"
  - type: System.Fabric.FabricException
    commentId: T:System.Fabric.FabricException
    description: "\n<p>\n<xref href=\"System.Fabric.FabricErrorCode.ImageStoreIOException\" data-throw-if-not-resolved=\"false\"></xref>: There was an IO error communicating with the ImageStore.</p>\n"
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: "\n<p>The request timed out but may have already been accepted for processing by the system.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: System.Fabric
  commentId: N:System.Fabric
  isExternal: false
  name: System.Fabric
  nameWithType: System.Fabric
  fullName: System.Fabric
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.FabricClient.ApplicationManagementClient.System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
  commentId: M:System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  parent: System.Fabric.Messaging.Stream.ByteArraySerializer
  definition: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  name: Serialize<FabricClient.ApplicationManagementClient>()
  nameWithType: ByteArraySerializer.Serialize<FabricClient.ApplicationManagementClient>()
  fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<System.Fabric.FabricClient.ApplicationManagementClient>()
  nameWithType.vb: ByteArraySerializer.Serialize(Of FabricClient.ApplicationManagementClient)()
  fullname.vb: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of System.Fabric.FabricClient.ApplicationManagementClient)()
  name.vb: Serialize(Of FabricClient.ApplicationManagementClient)()
  spec.csharp:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
    name: Serialize<FabricClient.ApplicationManagementClient>
    nameWithType: ByteArraySerializer.Serialize<FabricClient.ApplicationManagementClient>
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<System.Fabric.FabricClient.ApplicationManagementClient>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
    name: Serialize(Of FabricClient.ApplicationManagementClient)
    nameWithType: ByteArraySerializer.Serialize(Of FabricClient.ApplicationManagementClient)
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of System.Fabric.FabricClient.ApplicationManagementClient)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  commentId: M:System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  isExternal: false
  name: Serialize<T>(T)
  nameWithType: ByteArraySerializer.Serialize<T>(T)
  fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<T>(T)
  nameWithType.vb: ByteArraySerializer.Serialize(Of T)(T)
  fullname.vb: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of T)(T)
  name.vb: Serialize(Of T)(T)
  spec.csharp:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
    name: Serialize<T>
    nameWithType: ByteArraySerializer.Serialize<T>
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
    name: Serialize(Of T)
    nameWithType: ByteArraySerializer.Serialize(Of T)
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.Messaging.Stream.ByteArraySerializer
  commentId: T:System.Fabric.Messaging.Stream.ByteArraySerializer
  parent: System.Fabric.Messaging.Stream
  isExternal: false
  name: ByteArraySerializer
  nameWithType: ByteArraySerializer
  fullName: System.Fabric.Messaging.Stream.ByteArraySerializer
- uid: System.Fabric.Messaging.Stream
  commentId: N:System.Fabric.Messaging.Stream
  isExternal: false
  name: System.Fabric.Messaging.Stream
  nameWithType: System.Fabric.Messaging.Stream
  fullName: System.Fabric.Messaging.Stream
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Fabric.FabricClient
  commentId: T:System.Fabric.FabricClient
  parent: System.Fabric
  isExternal: false
  name: FabricClient
  nameWithType: FabricClient
  fullName: System.Fabric.FabricClient
- uid: System.Fabric.FabricErrorCode.ImageBuilderValidationError
  commentId: F:System.Fabric.FabricErrorCode.ImageBuilderValidationError
- uid: System.Fabric.FabricErrorCode.InvalidNameUri
  commentId: F:System.Fabric.FabricErrorCode.InvalidNameUri
- uid: System.Fabric.FabricErrorCode.CorruptedImageStoreObjectFound
  commentId: F:System.Fabric.FabricErrorCode.CorruptedImageStoreObjectFound
- uid: System.Fabric.FabricErrorCode.ApplicationAlreadyExists
  commentId: F:System.Fabric.FabricErrorCode.ApplicationAlreadyExists
- uid: System.Fabric.FabricErrorCode.ApplicationTypeNotFound
  commentId: F:System.Fabric.FabricErrorCode.ApplicationTypeNotFound
- uid: System.Fabric.FabricErrorCode.ImageStoreIOException
  commentId: F:System.Fabric.FabricErrorCode.ImageStoreIOException
- uid: System.Fabric.Description.ApplicationDescription.MinimumNodes
  commentId: P:System.Fabric.Description.ApplicationDescription.MinimumNodes
- uid: System.Fabric.Description.ApplicationDescription.MaximumNodes
  commentId: P:System.Fabric.Description.ApplicationDescription.MaximumNodes
- uid: System.Fabric.Description.ApplicationDescription.Metrics
  commentId: F:System.Fabric.Description.ApplicationDescription.Metrics
- uid: System.Fabric.FabricClient.ApplicationManagementClient.CreateApplicationAsync*
  commentId: Overload:System.Fabric.FabricClient.ApplicationManagementClient.CreateApplicationAsync
  isExternal: false
  name: CreateApplicationAsync
  nameWithType: FabricClient.ApplicationManagementClient.CreateApplicationAsync
  fullName: System.Fabric.FabricClient.ApplicationManagementClient.CreateApplicationAsync
- uid: System.Fabric.FabricObjectClosedException
  commentId: T:System.Fabric.FabricObjectClosedException
  isExternal: false
  name: FabricObjectClosedException
  nameWithType: FabricObjectClosedException
  fullName: System.Fabric.FabricObjectClosedException
- uid: System.Fabric.FabricException
  commentId: T:System.Fabric.FabricException
  parent: System.Fabric
  isExternal: false
  name: FabricException
  nameWithType: FabricException
  fullName: System.Fabric.FabricException
- uid: System.Fabric.FabricElementAlreadyExistsException
  commentId: T:System.Fabric.FabricElementAlreadyExistsException
  isExternal: false
  name: FabricElementAlreadyExistsException
  nameWithType: FabricElementAlreadyExistsException
  fullName: System.Fabric.FabricElementAlreadyExistsException
- uid: System.Fabric.FabricElementNotFoundException
  commentId: T:System.Fabric.FabricElementNotFoundException
  parent: System.Fabric
  isExternal: false
  name: FabricElementNotFoundException
  nameWithType: FabricElementNotFoundException
  fullName: System.Fabric.FabricElementNotFoundException
- uid: System.UnauthorizedAccessException
  commentId: T:System.UnauthorizedAccessException
- uid: System.IO.FileNotFoundException
  commentId: T:System.IO.FileNotFoundException
- uid: System.IO.DirectoryNotFoundException
  commentId: T:System.IO.DirectoryNotFoundException
- uid: System.IO.PathTooLongException
  commentId: T:System.IO.PathTooLongException
- uid: System.IO.IOException
  commentId: T:System.IO.IOException
- uid: System.TimeoutException
  commentId: T:System.TimeoutException
- uid: System.OperationCanceledException
  commentId: T:System.OperationCanceledException
- uid: System.ArgumentException
  commentId: T:System.ArgumentException
- uid: System.Fabric.Description.ApplicationDescription
  commentId: T:System.Fabric.Description.ApplicationDescription
  parent: System.Fabric.Description
  isExternal: false
  name: ApplicationDescription
  nameWithType: ApplicationDescription
  fullName: System.Fabric.Description.ApplicationDescription
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: System.Fabric.Description
  commentId: N:System.Fabric.Description
  isExternal: false
  name: System.Fabric.Description
  nameWithType: System.Fabric.Description
  fullName: System.Fabric.Description
- uid: System.TimeSpan
  commentId: T:System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: false
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
- uid: System.Fabric.FabricErrorCode.ApplicationNotFound
  commentId: F:System.Fabric.FabricErrorCode.ApplicationNotFound
- uid: System.Fabric.FabricErrorCode.ApplicationUpdateInProgress
  commentId: F:System.Fabric.FabricErrorCode.ApplicationUpdateInProgress
- uid: System.Fabric.Description.ApplicationUpdateDescription.MinimumNodes
  commentId: P:System.Fabric.Description.ApplicationUpdateDescription.MinimumNodes
- uid: System.Fabric.Description.ApplicationUpdateDescription.MaximumNodes
  commentId: P:System.Fabric.Description.ApplicationUpdateDescription.MaximumNodes
- uid: System.Fabric.Description.ApplicationUpdateDescription.Metrics
  commentId: F:System.Fabric.Description.ApplicationUpdateDescription.Metrics
- uid: System.Fabric.Description.ApplicationUpdateDescription
  commentId: T:System.Fabric.Description.ApplicationUpdateDescription
  parent: System.Fabric.Description
  isExternal: false
  name: ApplicationUpdateDescription
  nameWithType: ApplicationUpdateDescription
  fullName: System.Fabric.Description.ApplicationUpdateDescription
- uid: System.Fabric.FabricClient.ApplicationManagementClient.UpdateApplicationAsync*
  commentId: Overload:System.Fabric.FabricClient.ApplicationManagementClient.UpdateApplicationAsync
  isExternal: false
  name: UpdateApplicationAsync
  nameWithType: FabricClient.ApplicationManagementClient.UpdateApplicationAsync
  fullName: System.Fabric.FabricClient.ApplicationManagementClient.UpdateApplicationAsync
- uid: System.Fabric.FabricTransientException
  commentId: T:System.Fabric.FabricTransientException
  parent: System.Fabric
  isExternal: false
  name: FabricTransientException
  nameWithType: FabricTransientException
  fullName: System.Fabric.FabricTransientException
- uid: System.Fabric.FabricErrorCode.ApplicationUpgradeInProgress
  commentId: F:System.Fabric.FabricErrorCode.ApplicationUpgradeInProgress
- uid: System.Fabric.FabricClient.ApplicationManagementClient.DeleteApplicationAsync*
  commentId: Overload:System.Fabric.FabricClient.ApplicationManagementClient.DeleteApplicationAsync
  isExternal: false
  name: DeleteApplicationAsync
  nameWithType: FabricClient.ApplicationManagementClient.DeleteApplicationAsync
  fullName: System.Fabric.FabricClient.ApplicationManagementClient.DeleteApplicationAsync
- uid: System.Uri
  commentId: T:System.Uri
  parent: System
  isExternal: true
  name: Uri
  nameWithType: Uri
  fullName: System.Uri
- uid: System.Fabric.Description.DeleteApplicationDescription
  commentId: T:System.Fabric.Description.DeleteApplicationDescription
  parent: System.Fabric.Description
  isExternal: false
  name: DeleteApplicationDescription
  nameWithType: DeleteApplicationDescription
  fullName: System.Fabric.Description.DeleteApplicationDescription
- uid: System.Fabric.FabricErrorCode.ApplicationTypeProvisionInProgress
  commentId: F:System.Fabric.FabricErrorCode.ApplicationTypeProvisionInProgress
- uid: System.Fabric.FabricErrorCode.ApplicationTypeAlreadyExists
  commentId: F:System.Fabric.FabricErrorCode.ApplicationTypeAlreadyExists
- uid: System.Fabric.FabricClient.ApplicationManagementClient.ProvisionApplicationAsync*
  commentId: Overload:System.Fabric.FabricClient.ApplicationManagementClient.ProvisionApplicationAsync
  isExternal: false
  name: ProvisionApplicationAsync
  nameWithType: FabricClient.ApplicationManagementClient.ProvisionApplicationAsync
  fullName: System.Fabric.FabricClient.ApplicationManagementClient.ProvisionApplicationAsync
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Fabric.Description.ProvisionApplicationTypeDescription
  commentId: T:System.Fabric.Description.ProvisionApplicationTypeDescription
  parent: System.Fabric.Description
  isExternal: false
  name: ProvisionApplicationTypeDescription
  nameWithType: ProvisionApplicationTypeDescription
  fullName: System.Fabric.Description.ProvisionApplicationTypeDescription
- uid: System.Fabric.FabricErrorCode.ApplicationTypeInUse
  commentId: F:System.Fabric.FabricErrorCode.ApplicationTypeInUse
- uid: System.Fabric.FabricClient.ApplicationManagementClient.UnprovisionApplicationAsync*
  commentId: Overload:System.Fabric.FabricClient.ApplicationManagementClient.UnprovisionApplicationAsync
  isExternal: false
  name: UnprovisionApplicationAsync
  nameWithType: FabricClient.ApplicationManagementClient.UnprovisionApplicationAsync
  fullName: System.Fabric.FabricClient.ApplicationManagementClient.UnprovisionApplicationAsync
- uid: System.Fabric.FabricErrorCode.ApplicationUpgradeValidationError
  commentId: F:System.Fabric.FabricErrorCode.ApplicationUpgradeValidationError
- uid: System.Fabric.FabricClient.ApplicationManagementClient.UpgradeApplicationAsync*
  commentId: Overload:System.Fabric.FabricClient.ApplicationManagementClient.UpgradeApplicationAsync
  isExternal: false
  name: UpgradeApplicationAsync
  nameWithType: FabricClient.ApplicationManagementClient.UpgradeApplicationAsync
  fullName: System.Fabric.FabricClient.ApplicationManagementClient.UpgradeApplicationAsync
- uid: System.Fabric.Description.ApplicationUpgradeDescription
  commentId: T:System.Fabric.Description.ApplicationUpgradeDescription
  parent: System.Fabric.Description
  isExternal: false
  name: ApplicationUpgradeDescription
  nameWithType: ApplicationUpgradeDescription
  fullName: System.Fabric.Description.ApplicationUpgradeDescription
- uid: System.Fabric.FabricErrorCode.ApplicationNotUpgrading
  commentId: F:System.Fabric.FabricErrorCode.ApplicationNotUpgrading
- uid: System.Fabric.FabricClient.ApplicationManagementClient.UpdateApplicationUpgradeAsync*
  commentId: Overload:System.Fabric.FabricClient.ApplicationManagementClient.UpdateApplicationUpgradeAsync
  isExternal: false
  name: UpdateApplicationUpgradeAsync
  nameWithType: FabricClient.ApplicationManagementClient.UpdateApplicationUpgradeAsync
  fullName: System.Fabric.FabricClient.ApplicationManagementClient.UpdateApplicationUpgradeAsync
- uid: System.Fabric.Description.ApplicationUpgradeUpdateDescription
  commentId: T:System.Fabric.Description.ApplicationUpgradeUpdateDescription
  parent: System.Fabric.Description
  isExternal: false
  name: ApplicationUpgradeUpdateDescription
  nameWithType: ApplicationUpgradeUpdateDescription
  fullName: System.Fabric.Description.ApplicationUpgradeUpdateDescription
- uid: System.Fabric.FabricClient.ApplicationManagementClient.RollbackApplicationUpgradeAsync*
  commentId: Overload:System.Fabric.FabricClient.ApplicationManagementClient.RollbackApplicationUpgradeAsync
  isExternal: false
  name: RollbackApplicationUpgradeAsync
  nameWithType: FabricClient.ApplicationManagementClient.RollbackApplicationUpgradeAsync
  fullName: System.Fabric.FabricClient.ApplicationManagementClient.RollbackApplicationUpgradeAsync
- uid: System.Fabric.FabricClient.ApplicationManagementClient.GetApplicationUpgradeProgressAsync*
  commentId: Overload:System.Fabric.FabricClient.ApplicationManagementClient.GetApplicationUpgradeProgressAsync
  isExternal: false
  name: GetApplicationUpgradeProgressAsync
  nameWithType: FabricClient.ApplicationManagementClient.GetApplicationUpgradeProgressAsync
  fullName: System.Fabric.FabricClient.ApplicationManagementClient.GetApplicationUpgradeProgressAsync
- uid: System.Threading.Tasks.Task{System.Fabric.ApplicationUpgradeProgress}
  commentId: T:System.Threading.Tasks.Task{System.Fabric.ApplicationUpgradeProgress}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<ApplicationUpgradeProgress>
  nameWithType: Task<ApplicationUpgradeProgress>
  fullName: System.Threading.Tasks.Task<System.Fabric.ApplicationUpgradeProgress>
  nameWithType.vb: Task(Of ApplicationUpgradeProgress)
  fullname.vb: System.Threading.Tasks.Task(Of System.Fabric.ApplicationUpgradeProgress)
  name.vb: Task(Of ApplicationUpgradeProgress)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Fabric.ApplicationUpgradeProgress
    name: ApplicationUpgradeProgress
    nameWithType: ApplicationUpgradeProgress
    fullName: System.Fabric.ApplicationUpgradeProgress
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Fabric.ApplicationUpgradeProgress
    name: ApplicationUpgradeProgress
    nameWithType: ApplicationUpgradeProgress
    fullName: System.Fabric.ApplicationUpgradeProgress
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullname.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.ApplicationUpgradeProgress.UpgradeState
  commentId: P:System.Fabric.ApplicationUpgradeProgress.UpgradeState
- uid: System.Fabric.FabricClient.ApplicationManagementClient.MoveNextApplicationUpgradeDomainAsync*
  commentId: Overload:System.Fabric.FabricClient.ApplicationManagementClient.MoveNextApplicationUpgradeDomainAsync
  isExternal: false
  name: MoveNextApplicationUpgradeDomainAsync
  nameWithType: FabricClient.ApplicationManagementClient.MoveNextApplicationUpgradeDomainAsync
  fullName: System.Fabric.FabricClient.ApplicationManagementClient.MoveNextApplicationUpgradeDomainAsync
- uid: System.Fabric.ApplicationUpgradeProgress
  commentId: T:System.Fabric.ApplicationUpgradeProgress
  parent: System.Fabric
  isExternal: false
  name: ApplicationUpgradeProgress
  nameWithType: ApplicationUpgradeProgress
  fullName: System.Fabric.ApplicationUpgradeProgress
- uid: System.Fabric.FabricClient.ApplicationManagementClient.DeployServicePackageToNode*
  commentId: Overload:System.Fabric.FabricClient.ApplicationManagementClient.DeployServicePackageToNode
  isExternal: false
  name: DeployServicePackageToNode
  nameWithType: FabricClient.ApplicationManagementClient.DeployServicePackageToNode
  fullName: System.Fabric.FabricClient.ApplicationManagementClient.DeployServicePackageToNode
- uid: System.Fabric.PackageSharingPolicyList
  commentId: T:System.Fabric.PackageSharingPolicyList
  parent: System.Fabric
  isExternal: false
  name: PackageSharingPolicyList
  nameWithType: PackageSharingPolicyList
  fullName: System.Fabric.PackageSharingPolicyList
- uid: System.Fabric.FabricClient.ApplicationManagementClient.GetApplicationManifestAsync*
  commentId: Overload:System.Fabric.FabricClient.ApplicationManagementClient.GetApplicationManifestAsync
  isExternal: false
  name: GetApplicationManifestAsync
  nameWithType: FabricClient.ApplicationManagementClient.GetApplicationManifestAsync
  fullName: System.Fabric.FabricClient.ApplicationManagementClient.GetApplicationManifestAsync
- uid: System.Threading.Tasks.Task{System.String}
  commentId: T:System.Threading.Tasks.Task{System.String}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<String>
  nameWithType: Task<String>
  fullName: System.Threading.Tasks.Task<System.String>
  nameWithType.vb: Task(Of String)
  fullname.vb: System.Threading.Tasks.Task(Of System.String)
  name.vb: Task(Of String)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.FabricClient.ApplicationManagementClient.ProvisionApplicationAsync(System.String)
  commentId: M:System.Fabric.FabricClient.ApplicationManagementClient.ProvisionApplicationAsync(System.String)
- uid: System.Fabric.FabricClient.ApplicationManagementClient.CopyApplicationPackage*
  commentId: Overload:System.Fabric.FabricClient.ApplicationManagementClient.CopyApplicationPackage
  isExternal: false
  name: CopyApplicationPackage
  nameWithType: FabricClient.ApplicationManagementClient.CopyApplicationPackage
  fullName: System.Fabric.FabricClient.ApplicationManagementClient.CopyApplicationPackage
- uid: System.Fabric.FabricClient.ApplicationManagementClient.RemoveApplicationPackage*
  commentId: Overload:System.Fabric.FabricClient.ApplicationManagementClient.RemoveApplicationPackage
  isExternal: false
  name: RemoveApplicationPackage
  nameWithType: FabricClient.ApplicationManagementClient.RemoveApplicationPackage
  fullName: System.Fabric.FabricClient.ApplicationManagementClient.RemoveApplicationPackage
