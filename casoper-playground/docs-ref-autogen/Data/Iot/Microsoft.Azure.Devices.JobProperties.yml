### YamlMime:ManagedReference
items:
- uid: Microsoft.Azure.Devices.JobProperties
  commentId: T:Microsoft.Azure.Devices.JobProperties
  id: JobProperties
  parent: Microsoft.Azure.Devices
  children:
  - Microsoft.Azure.Devices.JobProperties.#ctor
  - Microsoft.Azure.Devices.JobProperties.EndTimeUtc
  - Microsoft.Azure.Devices.JobProperties.ExcludeKeysInExport
  - Microsoft.Azure.Devices.JobProperties.FailureReason
  - Microsoft.Azure.Devices.JobProperties.InputBlobContainerUri
  - Microsoft.Azure.Devices.JobProperties.InputBlobName
  - Microsoft.Azure.Devices.JobProperties.JobId
  - Microsoft.Azure.Devices.JobProperties.OutputBlobContainerUri
  - Microsoft.Azure.Devices.JobProperties.OutputBlobName
  - Microsoft.Azure.Devices.JobProperties.Progress
  - Microsoft.Azure.Devices.JobProperties.StartTimeUtc
  - Microsoft.Azure.Devices.JobProperties.Status
  - Microsoft.Azure.Devices.JobProperties.Type
  langs:
  - csharp
  - vb
  name: JobProperties
  nameWithType: JobProperties
  fullName: Microsoft.Azure.Devices.JobProperties
  type: Class
  source:
    remote:
      path: service/Microsoft.Azure.Devices/JobProperties.cs
      branch: master
      repo: https://github.com/Azure/azure-iot-sdk-csharp.git
    id: JobProperties
    path: src/azure-iot-sdks/service/Microsoft.Azure.Devices/JobProperties.cs
    startLine: 11
  assemblies:
  - Microsoft.Azure.Devices.Uwp
  namespace: Microsoft.Azure.Devices
  summary: "\nContains properties of a Job.\n"
  example: []
  syntax:
    content: public class JobProperties
    content.vb: Public Class JobProperties
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.Azure.Devices.JobProperties.#ctor
  commentId: M:Microsoft.Azure.Devices.JobProperties.#ctor
  id: '#ctor'
  parent: Microsoft.Azure.Devices.JobProperties
  langs:
  - csharp
  - vb
  name: JobProperties()
  nameWithType: JobProperties.JobProperties()
  fullName: Microsoft.Azure.Devices.JobProperties.JobProperties()
  type: Constructor
  source:
    remote:
      path: service/Microsoft.Azure.Devices/JobProperties.cs
      branch: master
      repo: https://github.com/Azure/azure-iot-sdk-csharp.git
    id: .ctor
    path: src/azure-iot-sdks/service/Microsoft.Azure.Devices/JobProperties.cs
    startLine: 16
  assemblies:
  - Microsoft.Azure.Devices.Uwp
  namespace: Microsoft.Azure.Devices
  summary: "\nDefault constructor that creates an empty JobProperties object.\n"
  example: []
  syntax:
    content: public JobProperties()
    content.vb: Public Sub New
  overload: Microsoft.Azure.Devices.JobProperties.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Devices.JobProperties.JobId
  commentId: P:Microsoft.Azure.Devices.JobProperties.JobId
  id: JobId
  parent: Microsoft.Azure.Devices.JobProperties
  langs:
  - csharp
  - vb
  name: JobId
  nameWithType: JobProperties.JobId
  fullName: Microsoft.Azure.Devices.JobProperties.JobId
  type: Property
  source:
    remote:
      path: service/Microsoft.Azure.Devices/JobProperties.cs
      branch: master
      repo: https://github.com/Azure/azure-iot-sdk-csharp.git
    id: JobId
    path: src/azure-iot-sdks/service/Microsoft.Azure.Devices/JobProperties.cs
    startLine: 24
  assemblies:
  - Microsoft.Azure.Devices.Uwp
  namespace: Microsoft.Azure.Devices
  summary: "\nSystem generated.  Ignored at creation.\n"
  example: []
  syntax:
    content: >-
      [JsonProperty(PropertyName = "jobId", NullValueHandling = NullValueHandling.Ignore)]

      public string JobId { get; set; }
    content.vb: >-
      <JsonProperty(PropertyName:="jobId", NullValueHandling:=NullValueHandling.Ignore)>

      Public Property JobId As String
    parameters: []
    return:
      type: System.String
  overload: Microsoft.Azure.Devices.JobProperties.JobId*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor
    arguments: []
    namedArguments:
    - name: PropertyName
      type: System.String
      value: jobId
    - name: NullValueHandling
      type: Newtonsoft.Json.NullValueHandling
      value: 1
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Devices.JobProperties.StartTimeUtc
  commentId: P:Microsoft.Azure.Devices.JobProperties.StartTimeUtc
  id: StartTimeUtc
  parent: Microsoft.Azure.Devices.JobProperties
  langs:
  - csharp
  - vb
  name: StartTimeUtc
  nameWithType: JobProperties.StartTimeUtc
  fullName: Microsoft.Azure.Devices.JobProperties.StartTimeUtc
  type: Property
  source:
    remote:
      path: service/Microsoft.Azure.Devices/JobProperties.cs
      branch: master
      repo: https://github.com/Azure/azure-iot-sdk-csharp.git
    id: StartTimeUtc
    path: src/azure-iot-sdks/service/Microsoft.Azure.Devices/JobProperties.cs
    startLine: 30
  assemblies:
  - Microsoft.Azure.Devices.Uwp
  namespace: Microsoft.Azure.Devices
  summary: "\nSystem generated.  Ignored at creation.\n"
  example: []
  syntax:
    content: >-
      [JsonProperty(PropertyName = "startTimeUtc", NullValueHandling = NullValueHandling.Ignore)]

      public DateTime? StartTimeUtc { get; set; }
    content.vb: >-
      <JsonProperty(PropertyName:="startTimeUtc", NullValueHandling:=NullValueHandling.Ignore)>

      Public Property StartTimeUtc As Date?
    parameters: []
    return:
      type: System.Nullable{System.DateTime}
  overload: Microsoft.Azure.Devices.JobProperties.StartTimeUtc*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor
    arguments: []
    namedArguments:
    - name: PropertyName
      type: System.String
      value: startTimeUtc
    - name: NullValueHandling
      type: Newtonsoft.Json.NullValueHandling
      value: 1
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Devices.JobProperties.EndTimeUtc
  commentId: P:Microsoft.Azure.Devices.JobProperties.EndTimeUtc
  id: EndTimeUtc
  parent: Microsoft.Azure.Devices.JobProperties
  langs:
  - csharp
  - vb
  name: EndTimeUtc
  nameWithType: JobProperties.EndTimeUtc
  fullName: Microsoft.Azure.Devices.JobProperties.EndTimeUtc
  type: Property
  source:
    remote:
      path: service/Microsoft.Azure.Devices/JobProperties.cs
      branch: master
      repo: https://github.com/Azure/azure-iot-sdk-csharp.git
    id: EndTimeUtc
    path: src/azure-iot-sdks/service/Microsoft.Azure.Devices/JobProperties.cs
    startLine: 37
  assemblies:
  - Microsoft.Azure.Devices.Uwp
  namespace: Microsoft.Azure.Devices
  summary: "\nSystem generated.  Ignored at creation.\nRepresents the time the job stopped processing.\n"
  example: []
  syntax:
    content: >-
      [JsonProperty(PropertyName = "endTimeUtc", NullValueHandling = NullValueHandling.Ignore)]

      public DateTime? EndTimeUtc { get; set; }
    content.vb: >-
      <JsonProperty(PropertyName:="endTimeUtc", NullValueHandling:=NullValueHandling.Ignore)>

      Public Property EndTimeUtc As Date?
    parameters: []
    return:
      type: System.Nullable{System.DateTime}
  overload: Microsoft.Azure.Devices.JobProperties.EndTimeUtc*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor
    arguments: []
    namedArguments:
    - name: PropertyName
      type: System.String
      value: endTimeUtc
    - name: NullValueHandling
      type: Newtonsoft.Json.NullValueHandling
      value: 1
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Devices.JobProperties.Type
  commentId: P:Microsoft.Azure.Devices.JobProperties.Type
  id: Type
  parent: Microsoft.Azure.Devices.JobProperties
  langs:
  - csharp
  - vb
  name: Type
  nameWithType: JobProperties.Type
  fullName: Microsoft.Azure.Devices.JobProperties.Type
  type: Property
  source:
    remote:
      path: service/Microsoft.Azure.Devices/JobProperties.cs
      branch: master
      repo: https://github.com/Azure/azure-iot-sdk-csharp.git
    id: Type
    path: src/azure-iot-sdks/service/Microsoft.Azure.Devices/JobProperties.cs
    startLine: 44
  assemblies:
  - Microsoft.Azure.Devices.Uwp
  namespace: Microsoft.Azure.Devices
  summary: "\nRequired.\nThe type of job to execute.\n"
  example: []
  syntax:
    content: >-
      [JsonProperty(PropertyName = "type", Required = Required.Always)]

      public JobType Type { get; set; }
    content.vb: >-
      <JsonProperty(PropertyName:="type", Required:=Required.Always)>

      Public Property Type As JobType
    parameters: []
    return:
      type: Microsoft.Azure.Devices.JobType
  overload: Microsoft.Azure.Devices.JobProperties.Type*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor
    arguments: []
    namedArguments:
    - name: PropertyName
      type: System.String
      value: type
    - name: Required
      type: Newtonsoft.Json.Required
      value: 2
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Devices.JobProperties.Status
  commentId: P:Microsoft.Azure.Devices.JobProperties.Status
  id: Status
  parent: Microsoft.Azure.Devices.JobProperties
  langs:
  - csharp
  - vb
  name: Status
  nameWithType: JobProperties.Status
  fullName: Microsoft.Azure.Devices.JobProperties.Status
  type: Property
  source:
    remote:
      path: service/Microsoft.Azure.Devices/JobProperties.cs
      branch: master
      repo: https://github.com/Azure/azure-iot-sdk-csharp.git
    id: Status
    path: src/azure-iot-sdks/service/Microsoft.Azure.Devices/JobProperties.cs
    startLine: 50
  assemblies:
  - Microsoft.Azure.Devices.Uwp
  namespace: Microsoft.Azure.Devices
  summary: "\nSystem generated.  Ignored at creation.\n"
  example: []
  syntax:
    content: >-
      [JsonProperty(PropertyName = "status", NullValueHandling = NullValueHandling.Ignore)]

      public JobStatus Status { get; set; }
    content.vb: >-
      <JsonProperty(PropertyName:="status", NullValueHandling:=NullValueHandling.Ignore)>

      Public Property Status As JobStatus
    parameters: []
    return:
      type: Microsoft.Azure.Devices.JobStatus
  overload: Microsoft.Azure.Devices.JobProperties.Status*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor
    arguments: []
    namedArguments:
    - name: PropertyName
      type: System.String
      value: status
    - name: NullValueHandling
      type: Newtonsoft.Json.NullValueHandling
      value: 1
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Devices.JobProperties.Progress
  commentId: P:Microsoft.Azure.Devices.JobProperties.Progress
  id: Progress
  parent: Microsoft.Azure.Devices.JobProperties
  langs:
  - csharp
  - vb
  name: Progress
  nameWithType: JobProperties.Progress
  fullName: Microsoft.Azure.Devices.JobProperties.Progress
  type: Property
  source:
    remote:
      path: service/Microsoft.Azure.Devices/JobProperties.cs
      branch: master
      repo: https://github.com/Azure/azure-iot-sdk-csharp.git
    id: Progress
    path: src/azure-iot-sdks/service/Microsoft.Azure.Devices/JobProperties.cs
    startLine: 57
  assemblies:
  - Microsoft.Azure.Devices.Uwp
  namespace: Microsoft.Azure.Devices
  summary: "\nSystem generated.  Ignored at creation.\nRepresents the percentage of completion.\n"
  example: []
  syntax:
    content: >-
      [JsonProperty(PropertyName = "progress", NullValueHandling = NullValueHandling.Ignore)]

      public int Progress { get; set; }
    content.vb: >-
      <JsonProperty(PropertyName:="progress", NullValueHandling:=NullValueHandling.Ignore)>

      Public Property Progress As Integer
    parameters: []
    return:
      type: System.Int32
  overload: Microsoft.Azure.Devices.JobProperties.Progress*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor
    arguments: []
    namedArguments:
    - name: PropertyName
      type: System.String
      value: progress
    - name: NullValueHandling
      type: Newtonsoft.Json.NullValueHandling
      value: 1
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Devices.JobProperties.InputBlobContainerUri
  commentId: P:Microsoft.Azure.Devices.JobProperties.InputBlobContainerUri
  id: InputBlobContainerUri
  parent: Microsoft.Azure.Devices.JobProperties
  langs:
  - csharp
  - vb
  name: InputBlobContainerUri
  nameWithType: JobProperties.InputBlobContainerUri
  fullName: Microsoft.Azure.Devices.JobProperties.InputBlobContainerUri
  type: Property
  source:
    remote:
      path: service/Microsoft.Azure.Devices/JobProperties.cs
      branch: master
      repo: https://github.com/Azure/azure-iot-sdk-csharp.git
    id: InputBlobContainerUri
    path: src/azure-iot-sdks/service/Microsoft.Azure.Devices/JobProperties.cs
    startLine: 63
  assemblies:
  - Microsoft.Azure.Devices.Uwp
  namespace: Microsoft.Azure.Devices
  summary: "\nURI containing SAS token to a blob container that contains registry data to sync.\n"
  example: []
  syntax:
    content: >-
      [JsonProperty(PropertyName = "inputBlobContainerUri", NullValueHandling = NullValueHandling.Ignore)]

      public string InputBlobContainerUri { get; set; }
    content.vb: >-
      <JsonProperty(PropertyName:="inputBlobContainerUri", NullValueHandling:=NullValueHandling.Ignore)>

      Public Property InputBlobContainerUri As String
    parameters: []
    return:
      type: System.String
  overload: Microsoft.Azure.Devices.JobProperties.InputBlobContainerUri*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor
    arguments: []
    namedArguments:
    - name: PropertyName
      type: System.String
      value: inputBlobContainerUri
    - name: NullValueHandling
      type: Newtonsoft.Json.NullValueHandling
      value: 1
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Devices.JobProperties.InputBlobName
  commentId: P:Microsoft.Azure.Devices.JobProperties.InputBlobName
  id: InputBlobName
  parent: Microsoft.Azure.Devices.JobProperties
  langs:
  - csharp
  - vb
  name: InputBlobName
  nameWithType: JobProperties.InputBlobName
  fullName: Microsoft.Azure.Devices.JobProperties.InputBlobName
  type: Property
  source:
    remote:
      path: service/Microsoft.Azure.Devices/JobProperties.cs
      branch: master
      repo: https://github.com/Azure/azure-iot-sdk-csharp.git
    id: InputBlobName
    path: src/azure-iot-sdks/service/Microsoft.Azure.Devices/JobProperties.cs
    startLine: 69
  assemblies:
  - Microsoft.Azure.Devices.Uwp
  namespace: Microsoft.Azure.Devices
  summary: "\nThe blob name to be used when importing from the provided input blob container.\n"
  example: []
  syntax:
    content: >-
      [JsonProperty(PropertyName = "inputBlobName", NullValueHandling = NullValueHandling.Ignore)]

      public string InputBlobName { get; set; }
    content.vb: >-
      <JsonProperty(PropertyName:="inputBlobName", NullValueHandling:=NullValueHandling.Ignore)>

      Public Property InputBlobName As String
    parameters: []
    return:
      type: System.String
  overload: Microsoft.Azure.Devices.JobProperties.InputBlobName*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor
    arguments: []
    namedArguments:
    - name: PropertyName
      type: System.String
      value: inputBlobName
    - name: NullValueHandling
      type: Newtonsoft.Json.NullValueHandling
      value: 1
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Devices.JobProperties.OutputBlobContainerUri
  commentId: P:Microsoft.Azure.Devices.JobProperties.OutputBlobContainerUri
  id: OutputBlobContainerUri
  parent: Microsoft.Azure.Devices.JobProperties
  langs:
  - csharp
  - vb
  name: OutputBlobContainerUri
  nameWithType: JobProperties.OutputBlobContainerUri
  fullName: Microsoft.Azure.Devices.JobProperties.OutputBlobContainerUri
  type: Property
  source:
    remote:
      path: service/Microsoft.Azure.Devices/JobProperties.cs
      branch: master
      repo: https://github.com/Azure/azure-iot-sdk-csharp.git
    id: OutputBlobContainerUri
    path: src/azure-iot-sdks/service/Microsoft.Azure.Devices/JobProperties.cs
    startLine: 75
  assemblies:
  - Microsoft.Azure.Devices.Uwp
  namespace: Microsoft.Azure.Devices
  summary: "\nURI containing SAS token to a blob container.  This is used to output the status of the job and the results.\n"
  example: []
  syntax:
    content: >-
      [JsonProperty(PropertyName = "outputBlobContainerUri", Required = Required.Always)]

      public string OutputBlobContainerUri { get; set; }
    content.vb: >-
      <JsonProperty(PropertyName:="outputBlobContainerUri", Required:=Required.Always)>

      Public Property OutputBlobContainerUri As String
    parameters: []
    return:
      type: System.String
  overload: Microsoft.Azure.Devices.JobProperties.OutputBlobContainerUri*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor
    arguments: []
    namedArguments:
    - name: PropertyName
      type: System.String
      value: outputBlobContainerUri
    - name: Required
      type: Newtonsoft.Json.Required
      value: 2
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Devices.JobProperties.OutputBlobName
  commentId: P:Microsoft.Azure.Devices.JobProperties.OutputBlobName
  id: OutputBlobName
  parent: Microsoft.Azure.Devices.JobProperties
  langs:
  - csharp
  - vb
  name: OutputBlobName
  nameWithType: JobProperties.OutputBlobName
  fullName: Microsoft.Azure.Devices.JobProperties.OutputBlobName
  type: Property
  source:
    remote:
      path: service/Microsoft.Azure.Devices/JobProperties.cs
      branch: master
      repo: https://github.com/Azure/azure-iot-sdk-csharp.git
    id: OutputBlobName
    path: src/azure-iot-sdks/service/Microsoft.Azure.Devices/JobProperties.cs
    startLine: 82
  assemblies:
  - Microsoft.Azure.Devices.Uwp
  namespace: Microsoft.Azure.Devices
  summary: "\nThe name of the blob that will be created in the provided output blob container.  This blob will contain\nthe exported device registry information for the IoT Hub.\n"
  example: []
  syntax:
    content: >-
      [JsonProperty(PropertyName = "outputBlobName", NullValueHandling = NullValueHandling.Ignore)]

      public string OutputBlobName { get; set; }
    content.vb: >-
      <JsonProperty(PropertyName:="outputBlobName", NullValueHandling:=NullValueHandling.Ignore)>

      Public Property OutputBlobName As String
    parameters: []
    return:
      type: System.String
  overload: Microsoft.Azure.Devices.JobProperties.OutputBlobName*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor
    arguments: []
    namedArguments:
    - name: PropertyName
      type: System.String
      value: outputBlobName
    - name: NullValueHandling
      type: Newtonsoft.Json.NullValueHandling
      value: 1
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Devices.JobProperties.ExcludeKeysInExport
  commentId: P:Microsoft.Azure.Devices.JobProperties.ExcludeKeysInExport
  id: ExcludeKeysInExport
  parent: Microsoft.Azure.Devices.JobProperties
  langs:
  - csharp
  - vb
  name: ExcludeKeysInExport
  nameWithType: JobProperties.ExcludeKeysInExport
  fullName: Microsoft.Azure.Devices.JobProperties.ExcludeKeysInExport
  type: Property
  source:
    remote:
      path: service/Microsoft.Azure.Devices/JobProperties.cs
      branch: master
      repo: https://github.com/Azure/azure-iot-sdk-csharp.git
    id: ExcludeKeysInExport
    path: src/azure-iot-sdks/service/Microsoft.Azure.Devices/JobProperties.cs
    startLine: 89
  assemblies:
  - Microsoft.Azure.Devices.Uwp
  namespace: Microsoft.Azure.Devices
  summary: "\nOptional for export jobs; ignored for other jobs.  Default: false.  If false, authorization keys are included\nin export output.  Keys are exported as null otherwise.\n"
  example: []
  syntax:
    content: >-
      [JsonProperty(PropertyName = "excludeKeysInExport", NullValueHandling = NullValueHandling.Ignore)]

      public bool ExcludeKeysInExport { get; set; }
    content.vb: >-
      <JsonProperty(PropertyName:="excludeKeysInExport", NullValueHandling:=NullValueHandling.Ignore)>

      Public Property ExcludeKeysInExport As Boolean
    parameters: []
    return:
      type: System.Boolean
  overload: Microsoft.Azure.Devices.JobProperties.ExcludeKeysInExport*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor
    arguments: []
    namedArguments:
    - name: PropertyName
      type: System.String
      value: excludeKeysInExport
    - name: NullValueHandling
      type: Newtonsoft.Json.NullValueHandling
      value: 1
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Devices.JobProperties.FailureReason
  commentId: P:Microsoft.Azure.Devices.JobProperties.FailureReason
  id: FailureReason
  parent: Microsoft.Azure.Devices.JobProperties
  langs:
  - csharp
  - vb
  name: FailureReason
  nameWithType: JobProperties.FailureReason
  fullName: Microsoft.Azure.Devices.JobProperties.FailureReason
  type: Property
  source:
    remote:
      path: service/Microsoft.Azure.Devices/JobProperties.cs
      branch: master
      repo: https://github.com/Azure/azure-iot-sdk-csharp.git
    id: FailureReason
    path: src/azure-iot-sdks/service/Microsoft.Azure.Devices/JobProperties.cs
    startLine: 96
  assemblies:
  - Microsoft.Azure.Devices.Uwp
  namespace: Microsoft.Azure.Devices
  summary: "\nSystem genereated.  Ignored at creation.\nIf status == failure, this represents a string containing the reason.\n"
  example: []
  syntax:
    content: >-
      [JsonProperty(PropertyName = "failureReason", NullValueHandling = NullValueHandling.Ignore)]

      public string FailureReason { get; set; }
    content.vb: >-
      <JsonProperty(PropertyName:="failureReason", NullValueHandling:=NullValueHandling.Ignore)>

      Public Property FailureReason As String
    parameters: []
    return:
      type: System.String
  overload: Microsoft.Azure.Devices.JobProperties.FailureReason*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor
    arguments: []
    namedArguments:
    - name: PropertyName
      type: System.String
      value: failureReason
    - name: NullValueHandling
      type: Newtonsoft.Json.NullValueHandling
      value: 1
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
references:
- uid: Microsoft.Azure.Devices
  commentId: N:Microsoft.Azure.Devices
  isExternal: false
  name: Microsoft.Azure.Devices
  nameWithType: Microsoft.Azure.Devices
  fullName: Microsoft.Azure.Devices
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Azure.Devices.JobProperties.#ctor*
  commentId: Overload:Microsoft.Azure.Devices.JobProperties.#ctor
  isExternal: false
  name: JobProperties
  nameWithType: JobProperties.JobProperties
  fullName: Microsoft.Azure.Devices.JobProperties.JobProperties
- uid: Microsoft.Azure.Devices.JobProperties.JobId*
  commentId: Overload:Microsoft.Azure.Devices.JobProperties.JobId
  isExternal: false
  name: JobId
  nameWithType: JobProperties.JobId
  fullName: Microsoft.Azure.Devices.JobProperties.JobId
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.Azure.Devices.JobProperties.StartTimeUtc*
  commentId: Overload:Microsoft.Azure.Devices.JobProperties.StartTimeUtc
  isExternal: false
  name: StartTimeUtc
  nameWithType: JobProperties.StartTimeUtc
  fullName: Microsoft.Azure.Devices.JobProperties.StartTimeUtc
- uid: System.Nullable{System.DateTime}
  commentId: T:System.Nullable{System.DateTime}
  parent: System
  definition: System.Nullable`1
  name: Nullable<DateTime>
  nameWithType: Nullable<DateTime>
  fullName: System.Nullable<System.DateTime>
  nameWithType.vb: Nullable(Of DateTime)
  fullname.vb: System.Nullable(Of System.DateTime)
  name.vb: Nullable(Of DateTime)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.DateTime
    name: DateTime
    nameWithType: DateTime
    fullName: System.DateTime
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.DateTime
    name: DateTime
    nameWithType: DateTime
    fullName: System.DateTime
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullname.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Azure.Devices.JobProperties.EndTimeUtc*
  commentId: Overload:Microsoft.Azure.Devices.JobProperties.EndTimeUtc
  isExternal: false
  name: EndTimeUtc
  nameWithType: JobProperties.EndTimeUtc
  fullName: Microsoft.Azure.Devices.JobProperties.EndTimeUtc
- uid: Microsoft.Azure.Devices.JobProperties.Type*
  commentId: Overload:Microsoft.Azure.Devices.JobProperties.Type
  isExternal: false
  name: Type
  nameWithType: JobProperties.Type
  fullName: Microsoft.Azure.Devices.JobProperties.Type
- uid: Microsoft.Azure.Devices.JobType
  commentId: T:Microsoft.Azure.Devices.JobType
  parent: Microsoft.Azure.Devices
  isExternal: false
  name: JobType
  nameWithType: JobType
  fullName: Microsoft.Azure.Devices.JobType
- uid: Microsoft.Azure.Devices.JobProperties.Status*
  commentId: Overload:Microsoft.Azure.Devices.JobProperties.Status
  isExternal: false
  name: Status
  nameWithType: JobProperties.Status
  fullName: Microsoft.Azure.Devices.JobProperties.Status
- uid: Microsoft.Azure.Devices.JobStatus
  commentId: T:Microsoft.Azure.Devices.JobStatus
  parent: Microsoft.Azure.Devices
  isExternal: false
  name: JobStatus
  nameWithType: JobStatus
  fullName: Microsoft.Azure.Devices.JobStatus
- uid: Microsoft.Azure.Devices.JobProperties.Progress*
  commentId: Overload:Microsoft.Azure.Devices.JobProperties.Progress
  isExternal: false
  name: Progress
  nameWithType: JobProperties.Progress
  fullName: Microsoft.Azure.Devices.JobProperties.Progress
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Microsoft.Azure.Devices.JobProperties.InputBlobContainerUri*
  commentId: Overload:Microsoft.Azure.Devices.JobProperties.InputBlobContainerUri
  isExternal: false
  name: InputBlobContainerUri
  nameWithType: JobProperties.InputBlobContainerUri
  fullName: Microsoft.Azure.Devices.JobProperties.InputBlobContainerUri
- uid: Microsoft.Azure.Devices.JobProperties.InputBlobName*
  commentId: Overload:Microsoft.Azure.Devices.JobProperties.InputBlobName
  isExternal: false
  name: InputBlobName
  nameWithType: JobProperties.InputBlobName
  fullName: Microsoft.Azure.Devices.JobProperties.InputBlobName
- uid: Microsoft.Azure.Devices.JobProperties.OutputBlobContainerUri*
  commentId: Overload:Microsoft.Azure.Devices.JobProperties.OutputBlobContainerUri
  isExternal: false
  name: OutputBlobContainerUri
  nameWithType: JobProperties.OutputBlobContainerUri
  fullName: Microsoft.Azure.Devices.JobProperties.OutputBlobContainerUri
- uid: Microsoft.Azure.Devices.JobProperties.OutputBlobName*
  commentId: Overload:Microsoft.Azure.Devices.JobProperties.OutputBlobName
  isExternal: false
  name: OutputBlobName
  nameWithType: JobProperties.OutputBlobName
  fullName: Microsoft.Azure.Devices.JobProperties.OutputBlobName
- uid: Microsoft.Azure.Devices.JobProperties.ExcludeKeysInExport*
  commentId: Overload:Microsoft.Azure.Devices.JobProperties.ExcludeKeysInExport
  isExternal: false
  name: ExcludeKeysInExport
  nameWithType: JobProperties.ExcludeKeysInExport
  fullName: Microsoft.Azure.Devices.JobProperties.ExcludeKeysInExport
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Microsoft.Azure.Devices.JobProperties.FailureReason*
  commentId: Overload:Microsoft.Azure.Devices.JobProperties.FailureReason
  isExternal: false
  name: FailureReason
  nameWithType: JobProperties.FailureReason
  fullName: Microsoft.Azure.Devices.JobProperties.FailureReason
