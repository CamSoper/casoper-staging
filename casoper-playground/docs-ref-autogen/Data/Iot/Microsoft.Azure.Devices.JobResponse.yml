### YamlMime:ManagedReference
items:
- uid: Microsoft.Azure.Devices.JobResponse
  commentId: T:Microsoft.Azure.Devices.JobResponse
  id: JobResponse
  parent: Microsoft.Azure.Devices
  children:
  - Microsoft.Azure.Devices.JobResponse.CloudToDeviceMethod
  - Microsoft.Azure.Devices.JobResponse.CreatedTimeUtc
  - Microsoft.Azure.Devices.JobResponse.DeviceId
  - Microsoft.Azure.Devices.JobResponse.DeviceJobStatistics
  - Microsoft.Azure.Devices.JobResponse.EndTimeUtc
  - Microsoft.Azure.Devices.JobResponse.FailureReason
  - Microsoft.Azure.Devices.JobResponse.JobId
  - Microsoft.Azure.Devices.JobResponse.MaxExecutionTimeInSeconds
  - Microsoft.Azure.Devices.JobResponse.ParentJobId
  - Microsoft.Azure.Devices.JobResponse.QueryCondition
  - Microsoft.Azure.Devices.JobResponse.StartTimeUtc
  - Microsoft.Azure.Devices.JobResponse.Status
  - Microsoft.Azure.Devices.JobResponse.StatusMessage
  - Microsoft.Azure.Devices.JobResponse.Type
  - Microsoft.Azure.Devices.JobResponse.UpdateTwin
  langs:
  - csharp
  - vb
  name: JobResponse
  nameWithType: JobResponse
  fullName: Microsoft.Azure.Devices.JobResponse
  type: Class
  source:
    remote:
      path: service/Microsoft.Azure.Devices/JobClient/JobResponse.cs
      branch: master
      repo: https://github.com/Azure/azure-iot-sdk-csharp.git
    id: JobResponse
    path: src/azure-iot-sdks/service/Microsoft.Azure.Devices/JobClient/JobResponse.cs
    startLine: 13
  assemblies:
  - Microsoft.Azure.Devices.Uwp
  namespace: Microsoft.Azure.Devices
  summary: "\nProvides current job report when fetched\n"
  example: []
  syntax:
    content: public class JobResponse
    content.vb: Public Class JobResponse
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.Azure.Devices.JobResponse.JobId
  commentId: P:Microsoft.Azure.Devices.JobResponse.JobId
  id: JobId
  parent: Microsoft.Azure.Devices.JobResponse
  langs:
  - csharp
  - vb
  name: JobId
  nameWithType: JobResponse.JobId
  fullName: Microsoft.Azure.Devices.JobResponse.JobId
  type: Property
  source:
    remote:
      path: service/Microsoft.Azure.Devices/JobClient/JobResponse.cs
      branch: master
      repo: https://github.com/Azure/azure-iot-sdk-csharp.git
    id: JobId
    path: src/azure-iot-sdks/service/Microsoft.Azure.Devices/JobClient/JobResponse.cs
    startLine: 18
  assemblies:
  - Microsoft.Azure.Devices.Uwp
  namespace: Microsoft.Azure.Devices
  summary: "\nSystem generated.  Ignored at creation.\n"
  example: []
  syntax:
    content: >-
      [JsonProperty(PropertyName = "jobId", NullValueHandling = NullValueHandling.Ignore)]

      public string JobId { get; }
    content.vb: >-
      <JsonProperty(PropertyName:="jobId", NullValueHandling:=NullValueHandling.Ignore)>

      Public ReadOnly Property JobId As String
    parameters: []
    return:
      type: System.String
  overload: Microsoft.Azure.Devices.JobResponse.JobId*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor
    arguments: []
    namedArguments:
    - name: PropertyName
      type: System.String
      value: jobId
    - name: NullValueHandling
      type: Newtonsoft.Json.NullValueHandling
      value: 1
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Azure.Devices.JobResponse.QueryCondition
  commentId: P:Microsoft.Azure.Devices.JobResponse.QueryCondition
  id: QueryCondition
  parent: Microsoft.Azure.Devices.JobResponse
  langs:
  - csharp
  - vb
  name: QueryCondition
  nameWithType: JobResponse.QueryCondition
  fullName: Microsoft.Azure.Devices.JobResponse.QueryCondition
  type: Property
  source:
    remote:
      path: service/Microsoft.Azure.Devices/JobClient/JobResponse.cs
      branch: master
      repo: https://github.com/Azure/azure-iot-sdk-csharp.git
    id: QueryCondition
    path: src/azure-iot-sdks/service/Microsoft.Azure.Devices/JobClient/JobResponse.cs
    startLine: 24
  assemblies:
  - Microsoft.Azure.Devices.Uwp
  namespace: Microsoft.Azure.Devices
  summary: "\nDevice query condition.\n"
  example: []
  syntax:
    content: >-
      [JsonProperty(PropertyName = "queryCondition", NullValueHandling = NullValueHandling.Ignore)]

      public string QueryCondition { get; }
    content.vb: >-
      <JsonProperty(PropertyName:="queryCondition", NullValueHandling:=NullValueHandling.Ignore)>

      Public ReadOnly Property QueryCondition As String
    parameters: []
    return:
      type: System.String
  overload: Microsoft.Azure.Devices.JobResponse.QueryCondition*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor
    arguments: []
    namedArguments:
    - name: PropertyName
      type: System.String
      value: queryCondition
    - name: NullValueHandling
      type: Newtonsoft.Json.NullValueHandling
      value: 1
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Azure.Devices.JobResponse.CreatedTimeUtc
  commentId: P:Microsoft.Azure.Devices.JobResponse.CreatedTimeUtc
  id: CreatedTimeUtc
  parent: Microsoft.Azure.Devices.JobResponse
  langs:
  - csharp
  - vb
  name: CreatedTimeUtc
  nameWithType: JobResponse.CreatedTimeUtc
  fullName: Microsoft.Azure.Devices.JobResponse.CreatedTimeUtc
  type: Property
  source:
    remote:
      path: service/Microsoft.Azure.Devices/JobClient/JobResponse.cs
      branch: master
      repo: https://github.com/Azure/azure-iot-sdk-csharp.git
    id: CreatedTimeUtc
    path: src/azure-iot-sdks/service/Microsoft.Azure.Devices/JobClient/JobResponse.cs
    startLine: 30
  assemblies:
  - Microsoft.Azure.Devices.Uwp
  namespace: Microsoft.Azure.Devices
  summary: "\nScheduled job start time in UTC.\n"
  example: []
  syntax:
    content: >-
      [JsonProperty(PropertyName = "createdTime", NullValueHandling = NullValueHandling.Ignore)]

      public DateTime? CreatedTimeUtc { get; }
    content.vb: >-
      <JsonProperty(PropertyName:="createdTime", NullValueHandling:=NullValueHandling.Ignore)>

      Public ReadOnly Property CreatedTimeUtc As Date?
    parameters: []
    return:
      type: System.Nullable{System.DateTime}
  overload: Microsoft.Azure.Devices.JobResponse.CreatedTimeUtc*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor
    arguments: []
    namedArguments:
    - name: PropertyName
      type: System.String
      value: createdTime
    - name: NullValueHandling
      type: Newtonsoft.Json.NullValueHandling
      value: 1
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Azure.Devices.JobResponse.StartTimeUtc
  commentId: P:Microsoft.Azure.Devices.JobResponse.StartTimeUtc
  id: StartTimeUtc
  parent: Microsoft.Azure.Devices.JobResponse
  langs:
  - csharp
  - vb
  name: StartTimeUtc
  nameWithType: JobResponse.StartTimeUtc
  fullName: Microsoft.Azure.Devices.JobResponse.StartTimeUtc
  type: Property
  source:
    remote:
      path: service/Microsoft.Azure.Devices/JobClient/JobResponse.cs
      branch: master
      repo: https://github.com/Azure/azure-iot-sdk-csharp.git
    id: StartTimeUtc
    path: src/azure-iot-sdks/service/Microsoft.Azure.Devices/JobClient/JobResponse.cs
    startLine: 36
  assemblies:
  - Microsoft.Azure.Devices.Uwp
  namespace: Microsoft.Azure.Devices
  summary: "\nSystem generated.  Ignored at creation.\n"
  example: []
  syntax:
    content: >-
      [JsonProperty(PropertyName = "startTimeUtc", NullValueHandling = NullValueHandling.Ignore)]

      public DateTime? StartTimeUtc { get; }
    content.vb: >-
      <JsonProperty(PropertyName:="startTimeUtc", NullValueHandling:=NullValueHandling.Ignore)>

      Public ReadOnly Property StartTimeUtc As Date?
    parameters: []
    return:
      type: System.Nullable{System.DateTime}
  overload: Microsoft.Azure.Devices.JobResponse.StartTimeUtc*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor
    arguments: []
    namedArguments:
    - name: PropertyName
      type: System.String
      value: startTimeUtc
    - name: NullValueHandling
      type: Newtonsoft.Json.NullValueHandling
      value: 1
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Azure.Devices.JobResponse.EndTimeUtc
  commentId: P:Microsoft.Azure.Devices.JobResponse.EndTimeUtc
  id: EndTimeUtc
  parent: Microsoft.Azure.Devices.JobResponse
  langs:
  - csharp
  - vb
  name: EndTimeUtc
  nameWithType: JobResponse.EndTimeUtc
  fullName: Microsoft.Azure.Devices.JobResponse.EndTimeUtc
  type: Property
  source:
    remote:
      path: service/Microsoft.Azure.Devices/JobClient/JobResponse.cs
      branch: master
      repo: https://github.com/Azure/azure-iot-sdk-csharp.git
    id: EndTimeUtc
    path: src/azure-iot-sdks/service/Microsoft.Azure.Devices/JobClient/JobResponse.cs
    startLine: 43
  assemblies:
  - Microsoft.Azure.Devices.Uwp
  namespace: Microsoft.Azure.Devices
  summary: "\nSystem generated.  Ignored at creation.\nRepresents the time the job stopped processing.\n"
  example: []
  syntax:
    content: >-
      [JsonProperty(PropertyName = "endTimeUtc", NullValueHandling = NullValueHandling.Ignore)]

      public DateTime? EndTimeUtc { get; }
    content.vb: >-
      <JsonProperty(PropertyName:="endTimeUtc", NullValueHandling:=NullValueHandling.Ignore)>

      Public ReadOnly Property EndTimeUtc As Date?
    parameters: []
    return:
      type: System.Nullable{System.DateTime}
  overload: Microsoft.Azure.Devices.JobResponse.EndTimeUtc*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor
    arguments: []
    namedArguments:
    - name: PropertyName
      type: System.String
      value: endTimeUtc
    - name: NullValueHandling
      type: Newtonsoft.Json.NullValueHandling
      value: 1
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Azure.Devices.JobResponse.MaxExecutionTimeInSeconds
  commentId: P:Microsoft.Azure.Devices.JobResponse.MaxExecutionTimeInSeconds
  id: MaxExecutionTimeInSeconds
  parent: Microsoft.Azure.Devices.JobResponse
  langs:
  - csharp
  - vb
  name: MaxExecutionTimeInSeconds
  nameWithType: JobResponse.MaxExecutionTimeInSeconds
  fullName: Microsoft.Azure.Devices.JobResponse.MaxExecutionTimeInSeconds
  type: Property
  source:
    remote:
      path: service/Microsoft.Azure.Devices/JobClient/JobResponse.cs
      branch: master
      repo: https://github.com/Azure/azure-iot-sdk-csharp.git
    id: MaxExecutionTimeInSeconds
    path: src/azure-iot-sdks/service/Microsoft.Azure.Devices/JobClient/JobResponse.cs
    startLine: 49
  assemblies:
  - Microsoft.Azure.Devices.Uwp
  namespace: Microsoft.Azure.Devices
  summary: "\nMax execution time in secounds\n"
  example: []
  syntax:
    content: >-
      [JsonProperty(PropertyName = "maxExecutionTimeInSeconds", DefaultValueHandling = DefaultValueHandling.Ignore | DefaultValueHandling.Populate | DefaultValueHandling.IgnoreAndPopulate)]

      public long MaxExecutionTimeInSeconds { get; set; }
    content.vb: >-
      <JsonProperty(PropertyName:="maxExecutionTimeInSeconds", DefaultValueHandling:=DefaultValueHandling.Ignore Or DefaultValueHandling.Populate Or DefaultValueHandling.IgnoreAndPopulate)>

      Public Property MaxExecutionTimeInSeconds As Long
    parameters: []
    return:
      type: System.Int64
  overload: Microsoft.Azure.Devices.JobResponse.MaxExecutionTimeInSeconds*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor
    arguments: []
    namedArguments:
    - name: PropertyName
      type: System.String
      value: maxExecutionTimeInSeconds
    - name: DefaultValueHandling
      type: Newtonsoft.Json.DefaultValueHandling
      value: 3
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Devices.JobResponse.Type
  commentId: P:Microsoft.Azure.Devices.JobResponse.Type
  id: Type
  parent: Microsoft.Azure.Devices.JobResponse
  langs:
  - csharp
  - vb
  name: Type
  nameWithType: JobResponse.Type
  fullName: Microsoft.Azure.Devices.JobResponse.Type
  type: Property
  source:
    remote:
      path: service/Microsoft.Azure.Devices/JobClient/JobResponse.cs
      branch: master
      repo: https://github.com/Azure/azure-iot-sdk-csharp.git
    id: Type
    path: src/azure-iot-sdks/service/Microsoft.Azure.Devices/JobClient/JobResponse.cs
    startLine: 56
  assemblies:
  - Microsoft.Azure.Devices.Uwp
  namespace: Microsoft.Azure.Devices
  summary: "\nRequired.\nThe type of job to execute.\n"
  example: []
  syntax:
    content: >-
      [JsonProperty(PropertyName = "type", Required = Required.Always)]

      [JsonConverter(typeof (StringEnumConverter))]

      public JobType Type { get; }
    content.vb: >-
      <JsonProperty(PropertyName:="type", Required:=Required.Always)>

      <JsonConverter(GetType(StringEnumConverter))>

      Public ReadOnly Property Type As JobType
    parameters: []
    return:
      type: Microsoft.Azure.Devices.JobType
  overload: Microsoft.Azure.Devices.JobResponse.Type*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor
    arguments: []
    namedArguments:
    - name: PropertyName
      type: System.String
      value: type
    - name: Required
      type: Newtonsoft.Json.Required
      value: 2
  - type: Newtonsoft.Json.JsonConverterAttribute
    ctor: Newtonsoft.Json.JsonConverterAttribute.#ctor(System.Type)
    arguments:
    - type: System.Type
      value: Newtonsoft.Json.Converters.StringEnumConverter
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Azure.Devices.JobResponse.Status
  commentId: P:Microsoft.Azure.Devices.JobResponse.Status
  id: Status
  parent: Microsoft.Azure.Devices.JobResponse
  langs:
  - csharp
  - vb
  name: Status
  nameWithType: JobResponse.Status
  fullName: Microsoft.Azure.Devices.JobResponse.Status
  type: Property
  source:
    remote:
      path: service/Microsoft.Azure.Devices/JobClient/JobResponse.cs
      branch: master
      repo: https://github.com/Azure/azure-iot-sdk-csharp.git
    id: Status
    path: src/azure-iot-sdks/service/Microsoft.Azure.Devices/JobClient/JobResponse.cs
    startLine: 63
  assemblies:
  - Microsoft.Azure.Devices.Uwp
  namespace: Microsoft.Azure.Devices
  summary: "\nSystem generated.  Ignored at creation.\n"
  example: []
  syntax:
    content: >-
      [JsonProperty(PropertyName = "status", NullValueHandling = NullValueHandling.Ignore)]

      [JsonConverter(typeof (StringEnumConverter))]

      public JobStatus Status { get; }
    content.vb: >-
      <JsonProperty(PropertyName:="status", NullValueHandling:=NullValueHandling.Ignore)>

      <JsonConverter(GetType(StringEnumConverter))>

      Public ReadOnly Property Status As JobStatus
    parameters: []
    return:
      type: Microsoft.Azure.Devices.JobStatus
  overload: Microsoft.Azure.Devices.JobResponse.Status*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor
    arguments: []
    namedArguments:
    - name: PropertyName
      type: System.String
      value: status
    - name: NullValueHandling
      type: Newtonsoft.Json.NullValueHandling
      value: 1
  - type: Newtonsoft.Json.JsonConverterAttribute
    ctor: Newtonsoft.Json.JsonConverterAttribute.#ctor(System.Type)
    arguments:
    - type: System.Type
      value: Newtonsoft.Json.Converters.StringEnumConverter
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Azure.Devices.JobResponse.CloudToDeviceMethod
  commentId: P:Microsoft.Azure.Devices.JobResponse.CloudToDeviceMethod
  id: CloudToDeviceMethod
  parent: Microsoft.Azure.Devices.JobResponse
  langs:
  - csharp
  - vb
  name: CloudToDeviceMethod
  nameWithType: JobResponse.CloudToDeviceMethod
  fullName: Microsoft.Azure.Devices.JobResponse.CloudToDeviceMethod
  type: Property
  source:
    remote:
      path: service/Microsoft.Azure.Devices/JobClient/JobResponse.cs
      branch: master
      repo: https://github.com/Azure/azure-iot-sdk-csharp.git
    id: CloudToDeviceMethod
    path: src/azure-iot-sdks/service/Microsoft.Azure.Devices/JobClient/JobResponse.cs
    startLine: 71
  assemblies:
  - Microsoft.Azure.Devices.Uwp
  namespace: Microsoft.Azure.Devices
  summary: "\nRequired if jobType is cloudToDeviceMethod.\nThe method type and parameters.\n"
  example: []
  syntax:
    content: >-
      [JsonProperty(PropertyName = "cloudToDeviceMethod", NullValueHandling = NullValueHandling.Ignore)]

      public CloudToDeviceMethod CloudToDeviceMethod { get; set; }
    content.vb: >-
      <JsonProperty(PropertyName:="cloudToDeviceMethod", NullValueHandling:=NullValueHandling.Ignore)>

      Public Property CloudToDeviceMethod As CloudToDeviceMethod
    parameters: []
    return:
      type: Microsoft.Azure.Devices.CloudToDeviceMethod
  overload: Microsoft.Azure.Devices.JobResponse.CloudToDeviceMethod*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor
    arguments: []
    namedArguments:
    - name: PropertyName
      type: System.String
      value: cloudToDeviceMethod
    - name: NullValueHandling
      type: Newtonsoft.Json.NullValueHandling
      value: 1
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Devices.JobResponse.UpdateTwin
  commentId: P:Microsoft.Azure.Devices.JobResponse.UpdateTwin
  id: UpdateTwin
  parent: Microsoft.Azure.Devices.JobResponse
  langs:
  - csharp
  - vb
  name: UpdateTwin
  nameWithType: JobResponse.UpdateTwin
  fullName: Microsoft.Azure.Devices.JobResponse.UpdateTwin
  type: Property
  source:
    remote:
      path: service/Microsoft.Azure.Devices/JobClient/JobResponse.cs
      branch: master
      repo: https://github.com/Azure/azure-iot-sdk-csharp.git
    id: UpdateTwin
    path: src/azure-iot-sdks/service/Microsoft.Azure.Devices/JobClient/JobResponse.cs
    startLine: 78
  assemblies:
  - Microsoft.Azure.Devices.Uwp
  namespace: Microsoft.Azure.Devices
  summary: "\nRequired if jobType is updateTwin.\nThe Update Twin tags and desired properties.\n"
  example: []
  syntax:
    content: >-
      [JsonProperty(PropertyName = "updateTwin", NullValueHandling = NullValueHandling.Ignore)]

      public Twin UpdateTwin { get; set; }
    content.vb: >-
      <JsonProperty(PropertyName:="updateTwin", NullValueHandling:=NullValueHandling.Ignore)>

      Public Property UpdateTwin As Twin
    parameters: []
    return:
      type: Microsoft.Azure.Devices.Shared.Twin
  overload: Microsoft.Azure.Devices.JobResponse.UpdateTwin*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor
    arguments: []
    namedArguments:
    - name: PropertyName
      type: System.String
      value: updateTwin
    - name: NullValueHandling
      type: Newtonsoft.Json.NullValueHandling
      value: 1
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Devices.JobResponse.FailureReason
  commentId: P:Microsoft.Azure.Devices.JobResponse.FailureReason
  id: FailureReason
  parent: Microsoft.Azure.Devices.JobResponse
  langs:
  - csharp
  - vb
  name: FailureReason
  nameWithType: JobResponse.FailureReason
  fullName: Microsoft.Azure.Devices.JobResponse.FailureReason
  type: Property
  source:
    remote:
      path: service/Microsoft.Azure.Devices/JobClient/JobResponse.cs
      branch: master
      repo: https://github.com/Azure/azure-iot-sdk-csharp.git
    id: FailureReason
    path: src/azure-iot-sdks/service/Microsoft.Azure.Devices/JobClient/JobResponse.cs
    startLine: 85
  assemblies:
  - Microsoft.Azure.Devices.Uwp
  namespace: Microsoft.Azure.Devices
  summary: "\nSystem generated.  Ignored at creation.\nIf status == failure, this represents a string containing the reason.\n"
  example: []
  syntax:
    content: >-
      [JsonProperty(PropertyName = "failureReason", NullValueHandling = NullValueHandling.Ignore)]

      public string FailureReason { get; set; }
    content.vb: >-
      <JsonProperty(PropertyName:="failureReason", NullValueHandling:=NullValueHandling.Ignore)>

      Public Property FailureReason As String
    parameters: []
    return:
      type: System.String
  overload: Microsoft.Azure.Devices.JobResponse.FailureReason*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor
    arguments: []
    namedArguments:
    - name: PropertyName
      type: System.String
      value: failureReason
    - name: NullValueHandling
      type: Newtonsoft.Json.NullValueHandling
      value: 1
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Devices.JobResponse.StatusMessage
  commentId: P:Microsoft.Azure.Devices.JobResponse.StatusMessage
  id: StatusMessage
  parent: Microsoft.Azure.Devices.JobResponse
  langs:
  - csharp
  - vb
  name: StatusMessage
  nameWithType: JobResponse.StatusMessage
  fullName: Microsoft.Azure.Devices.JobResponse.StatusMessage
  type: Property
  source:
    remote:
      path: service/Microsoft.Azure.Devices/JobClient/JobResponse.cs
      branch: master
      repo: https://github.com/Azure/azure-iot-sdk-csharp.git
    id: StatusMessage
    path: src/azure-iot-sdks/service/Microsoft.Azure.Devices/JobClient/JobResponse.cs
    startLine: 92
  assemblies:
  - Microsoft.Azure.Devices.Uwp
  namespace: Microsoft.Azure.Devices
  summary: "\nSystem generated.  Ignored at creation.\nRepresents a string containing a message with status about the job execution.\n"
  example: []
  syntax:
    content: >-
      [JsonProperty(PropertyName = "statusMessage", NullValueHandling = NullValueHandling.Ignore)]

      public string StatusMessage { get; set; }
    content.vb: >-
      <JsonProperty(PropertyName:="statusMessage", NullValueHandling:=NullValueHandling.Ignore)>

      Public Property StatusMessage As String
    parameters: []
    return:
      type: System.String
  overload: Microsoft.Azure.Devices.JobResponse.StatusMessage*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor
    arguments: []
    namedArguments:
    - name: PropertyName
      type: System.String
      value: statusMessage
    - name: NullValueHandling
      type: Newtonsoft.Json.NullValueHandling
      value: 1
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Devices.JobResponse.DeviceJobStatistics
  commentId: P:Microsoft.Azure.Devices.JobResponse.DeviceJobStatistics
  id: DeviceJobStatistics
  parent: Microsoft.Azure.Devices.JobResponse
  langs:
  - csharp
  - vb
  name: DeviceJobStatistics
  nameWithType: JobResponse.DeviceJobStatistics
  fullName: Microsoft.Azure.Devices.JobResponse.DeviceJobStatistics
  type: Property
  source:
    remote:
      path: service/Microsoft.Azure.Devices/JobClient/JobResponse.cs
      branch: master
      repo: https://github.com/Azure/azure-iot-sdk-csharp.git
    id: DeviceJobStatistics
    path: src/azure-iot-sdks/service/Microsoft.Azure.Devices/JobClient/JobResponse.cs
    startLine: 98
  assemblies:
  - Microsoft.Azure.Devices.Uwp
  namespace: Microsoft.Azure.Devices
  summary: "\nDifferent number of devices in the job\n"
  example: []
  syntax:
    content: >-
      [JsonProperty(PropertyName = "deviceJobStatistics", NullValueHandling = NullValueHandling.Ignore)]

      public DeviceJobStatistics DeviceJobStatistics { get; set; }
    content.vb: >-
      <JsonProperty(PropertyName:="deviceJobStatistics", NullValueHandling:=NullValueHandling.Ignore)>

      Public Property DeviceJobStatistics As DeviceJobStatistics
    parameters: []
    return:
      type: Microsoft.Azure.Devices.DeviceJobStatistics
  overload: Microsoft.Azure.Devices.JobResponse.DeviceJobStatistics*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor
    arguments: []
    namedArguments:
    - name: PropertyName
      type: System.String
      value: deviceJobStatistics
    - name: NullValueHandling
      type: Newtonsoft.Json.NullValueHandling
      value: 1
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Devices.JobResponse.DeviceId
  commentId: P:Microsoft.Azure.Devices.JobResponse.DeviceId
  id: DeviceId
  parent: Microsoft.Azure.Devices.JobResponse
  langs:
  - csharp
  - vb
  name: DeviceId
  nameWithType: JobResponse.DeviceId
  fullName: Microsoft.Azure.Devices.JobResponse.DeviceId
  type: Property
  source:
    remote:
      path: service/Microsoft.Azure.Devices/JobClient/JobResponse.cs
      branch: master
      repo: https://github.com/Azure/azure-iot-sdk-csharp.git
    id: DeviceId
    path: src/azure-iot-sdks/service/Microsoft.Azure.Devices/JobClient/JobResponse.cs
    startLine: 105
  assemblies:
  - Microsoft.Azure.Devices.Uwp
  namespace: Microsoft.Azure.Devices
  summary: "\nThe deviceId related to this response.\nIt can be null (e.g. in case of a parent orchestration).\n"
  example: []
  syntax:
    content: >-
      [JsonProperty(PropertyName = "deviceId", NullValueHandling = NullValueHandling.Ignore)]

      public string DeviceId { get; set; }
    content.vb: >-
      <JsonProperty(PropertyName:="deviceId", NullValueHandling:=NullValueHandling.Ignore)>

      Public Property DeviceId As String
    parameters: []
    return:
      type: System.String
  overload: Microsoft.Azure.Devices.JobResponse.DeviceId*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor
    arguments: []
    namedArguments:
    - name: PropertyName
      type: System.String
      value: deviceId
    - name: NullValueHandling
      type: Newtonsoft.Json.NullValueHandling
      value: 1
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Devices.JobResponse.ParentJobId
  commentId: P:Microsoft.Azure.Devices.JobResponse.ParentJobId
  id: ParentJobId
  parent: Microsoft.Azure.Devices.JobResponse
  langs:
  - csharp
  - vb
  name: ParentJobId
  nameWithType: JobResponse.ParentJobId
  fullName: Microsoft.Azure.Devices.JobResponse.ParentJobId
  type: Property
  source:
    remote:
      path: service/Microsoft.Azure.Devices/JobClient/JobResponse.cs
      branch: master
      repo: https://github.com/Azure/azure-iot-sdk-csharp.git
    id: ParentJobId
    path: src/azure-iot-sdks/service/Microsoft.Azure.Devices/JobClient/JobResponse.cs
    startLine: 111
  assemblies:
  - Microsoft.Azure.Devices.Uwp
  namespace: Microsoft.Azure.Devices
  summary: "\nThe jobId of the parent orchestration, if any.\n"
  example: []
  syntax:
    content: >-
      [JsonProperty(PropertyName = "parentJobId", NullValueHandling = NullValueHandling.Ignore)]

      public string ParentJobId { get; set; }
    content.vb: >-
      <JsonProperty(PropertyName:="parentJobId", NullValueHandling:=NullValueHandling.Ignore)>

      Public Property ParentJobId As String
    parameters: []
    return:
      type: System.String
  overload: Microsoft.Azure.Devices.JobResponse.ParentJobId*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor
    arguments: []
    namedArguments:
    - name: PropertyName
      type: System.String
      value: parentJobId
    - name: NullValueHandling
      type: Newtonsoft.Json.NullValueHandling
      value: 1
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
references:
- uid: Microsoft.Azure.Devices
  commentId: N:Microsoft.Azure.Devices
  isExternal: false
  name: Microsoft.Azure.Devices
  nameWithType: Microsoft.Azure.Devices
  fullName: Microsoft.Azure.Devices
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Azure.Devices.JobResponse.JobId*
  commentId: Overload:Microsoft.Azure.Devices.JobResponse.JobId
  isExternal: false
  name: JobId
  nameWithType: JobResponse.JobId
  fullName: Microsoft.Azure.Devices.JobResponse.JobId
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.Azure.Devices.JobResponse.QueryCondition*
  commentId: Overload:Microsoft.Azure.Devices.JobResponse.QueryCondition
  isExternal: false
  name: QueryCondition
  nameWithType: JobResponse.QueryCondition
  fullName: Microsoft.Azure.Devices.JobResponse.QueryCondition
- uid: Microsoft.Azure.Devices.JobResponse.CreatedTimeUtc*
  commentId: Overload:Microsoft.Azure.Devices.JobResponse.CreatedTimeUtc
  isExternal: false
  name: CreatedTimeUtc
  nameWithType: JobResponse.CreatedTimeUtc
  fullName: Microsoft.Azure.Devices.JobResponse.CreatedTimeUtc
- uid: System.Nullable{System.DateTime}
  commentId: T:System.Nullable{System.DateTime}
  parent: System
  definition: System.Nullable`1
  name: Nullable<DateTime>
  nameWithType: Nullable<DateTime>
  fullName: System.Nullable<System.DateTime>
  nameWithType.vb: Nullable(Of DateTime)
  fullname.vb: System.Nullable(Of System.DateTime)
  name.vb: Nullable(Of DateTime)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.DateTime
    name: DateTime
    nameWithType: DateTime
    fullName: System.DateTime
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.DateTime
    name: DateTime
    nameWithType: DateTime
    fullName: System.DateTime
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullname.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Azure.Devices.JobResponse.StartTimeUtc*
  commentId: Overload:Microsoft.Azure.Devices.JobResponse.StartTimeUtc
  isExternal: false
  name: StartTimeUtc
  nameWithType: JobResponse.StartTimeUtc
  fullName: Microsoft.Azure.Devices.JobResponse.StartTimeUtc
- uid: Microsoft.Azure.Devices.JobResponse.EndTimeUtc*
  commentId: Overload:Microsoft.Azure.Devices.JobResponse.EndTimeUtc
  isExternal: false
  name: EndTimeUtc
  nameWithType: JobResponse.EndTimeUtc
  fullName: Microsoft.Azure.Devices.JobResponse.EndTimeUtc
- uid: Microsoft.Azure.Devices.JobResponse.MaxExecutionTimeInSeconds*
  commentId: Overload:Microsoft.Azure.Devices.JobResponse.MaxExecutionTimeInSeconds
  isExternal: false
  name: MaxExecutionTimeInSeconds
  nameWithType: JobResponse.MaxExecutionTimeInSeconds
  fullName: Microsoft.Azure.Devices.JobResponse.MaxExecutionTimeInSeconds
- uid: System.Int64
  commentId: T:System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: Microsoft.Azure.Devices.JobResponse.Type*
  commentId: Overload:Microsoft.Azure.Devices.JobResponse.Type
  isExternal: false
  name: Type
  nameWithType: JobResponse.Type
  fullName: Microsoft.Azure.Devices.JobResponse.Type
- uid: Microsoft.Azure.Devices.JobType
  commentId: T:Microsoft.Azure.Devices.JobType
  parent: Microsoft.Azure.Devices
  isExternal: false
  name: JobType
  nameWithType: JobType
  fullName: Microsoft.Azure.Devices.JobType
- uid: Microsoft.Azure.Devices.JobResponse.Status*
  commentId: Overload:Microsoft.Azure.Devices.JobResponse.Status
  isExternal: false
  name: Status
  nameWithType: JobResponse.Status
  fullName: Microsoft.Azure.Devices.JobResponse.Status
- uid: Microsoft.Azure.Devices.JobStatus
  commentId: T:Microsoft.Azure.Devices.JobStatus
  parent: Microsoft.Azure.Devices
  isExternal: false
  name: JobStatus
  nameWithType: JobStatus
  fullName: Microsoft.Azure.Devices.JobStatus
- uid: Microsoft.Azure.Devices.JobResponse.CloudToDeviceMethod*
  commentId: Overload:Microsoft.Azure.Devices.JobResponse.CloudToDeviceMethod
  isExternal: false
  name: CloudToDeviceMethod
  nameWithType: JobResponse.CloudToDeviceMethod
  fullName: Microsoft.Azure.Devices.JobResponse.CloudToDeviceMethod
- uid: Microsoft.Azure.Devices.CloudToDeviceMethod
  commentId: T:Microsoft.Azure.Devices.CloudToDeviceMethod
  parent: Microsoft.Azure.Devices
  isExternal: false
  name: CloudToDeviceMethod
  nameWithType: CloudToDeviceMethod
  fullName: Microsoft.Azure.Devices.CloudToDeviceMethod
- uid: Microsoft.Azure.Devices.JobResponse.UpdateTwin*
  commentId: Overload:Microsoft.Azure.Devices.JobResponse.UpdateTwin
  isExternal: false
  name: UpdateTwin
  nameWithType: JobResponse.UpdateTwin
  fullName: Microsoft.Azure.Devices.JobResponse.UpdateTwin
- uid: Microsoft.Azure.Devices.Shared.Twin
  commentId: T:Microsoft.Azure.Devices.Shared.Twin
  parent: Microsoft.Azure.Devices.Shared
  isExternal: false
  name: Twin
  nameWithType: Twin
  fullName: Microsoft.Azure.Devices.Shared.Twin
- uid: Microsoft.Azure.Devices.Shared
  commentId: N:Microsoft.Azure.Devices.Shared
  isExternal: false
  name: Microsoft.Azure.Devices.Shared
  nameWithType: Microsoft.Azure.Devices.Shared
  fullName: Microsoft.Azure.Devices.Shared
- uid: Microsoft.Azure.Devices.JobResponse.FailureReason*
  commentId: Overload:Microsoft.Azure.Devices.JobResponse.FailureReason
  isExternal: false
  name: FailureReason
  nameWithType: JobResponse.FailureReason
  fullName: Microsoft.Azure.Devices.JobResponse.FailureReason
- uid: Microsoft.Azure.Devices.JobResponse.StatusMessage*
  commentId: Overload:Microsoft.Azure.Devices.JobResponse.StatusMessage
  isExternal: false
  name: StatusMessage
  nameWithType: JobResponse.StatusMessage
  fullName: Microsoft.Azure.Devices.JobResponse.StatusMessage
- uid: Microsoft.Azure.Devices.JobResponse.DeviceJobStatistics*
  commentId: Overload:Microsoft.Azure.Devices.JobResponse.DeviceJobStatistics
  isExternal: false
  name: DeviceJobStatistics
  nameWithType: JobResponse.DeviceJobStatistics
  fullName: Microsoft.Azure.Devices.JobResponse.DeviceJobStatistics
- uid: Microsoft.Azure.Devices.DeviceJobStatistics
  commentId: T:Microsoft.Azure.Devices.DeviceJobStatistics
  parent: Microsoft.Azure.Devices
  isExternal: false
  name: DeviceJobStatistics
  nameWithType: DeviceJobStatistics
  fullName: Microsoft.Azure.Devices.DeviceJobStatistics
- uid: Microsoft.Azure.Devices.JobResponse.DeviceId*
  commentId: Overload:Microsoft.Azure.Devices.JobResponse.DeviceId
  isExternal: false
  name: DeviceId
  nameWithType: JobResponse.DeviceId
  fullName: Microsoft.Azure.Devices.JobResponse.DeviceId
- uid: Microsoft.Azure.Devices.JobResponse.ParentJobId*
  commentId: Overload:Microsoft.Azure.Devices.JobResponse.ParentJobId
  isExternal: false
  name: ParentJobId
  nameWithType: JobResponse.ParentJobId
  fullName: Microsoft.Azure.Devices.JobResponse.ParentJobId
