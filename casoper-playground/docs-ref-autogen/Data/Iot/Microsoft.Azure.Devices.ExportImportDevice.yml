### YamlMime:ManagedReference
items:
- uid: Microsoft.Azure.Devices.ExportImportDevice
  commentId: T:Microsoft.Azure.Devices.ExportImportDevice
  id: ExportImportDevice
  parent: Microsoft.Azure.Devices
  children:
  - Microsoft.Azure.Devices.ExportImportDevice.#ctor
  - Microsoft.Azure.Devices.ExportImportDevice.#ctor(Microsoft.Azure.Devices.Device,Microsoft.Azure.Devices.ImportMode)
  - Microsoft.Azure.Devices.ExportImportDevice.Authentication
  - Microsoft.Azure.Devices.ExportImportDevice.ETag
  - Microsoft.Azure.Devices.ExportImportDevice.Id
  - Microsoft.Azure.Devices.ExportImportDevice.ImportMode
  - Microsoft.Azure.Devices.ExportImportDevice.Status
  - Microsoft.Azure.Devices.ExportImportDevice.StatusReason
  langs:
  - csharp
  - vb
  name: ExportImportDevice
  nameWithType: ExportImportDevice
  fullName: Microsoft.Azure.Devices.ExportImportDevice
  type: Class
  source:
    remote:
      path: service/Microsoft.Azure.Devices/ExportImportDevice.cs
      branch: master
      repo: https://github.com/Azure/azure-iot-sdk-csharp.git
    id: ExportImportDevice
    path: src/azure-iot-sdks/service/Microsoft.Azure.Devices/ExportImportDevice.cs
    startLine: 12
  assemblies:
  - Microsoft.Azure.Devices.Uwp
  namespace: Microsoft.Azure.Devices
  summary: "\ncontains device properties specified during export/import operation\n"
  example: []
  syntax:
    content: public sealed class ExportImportDevice
    content.vb: Public NotInheritable Class ExportImportDevice
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: Microsoft.Azure.Devices.ExportImportDevice.#ctor
  commentId: M:Microsoft.Azure.Devices.ExportImportDevice.#ctor
  id: '#ctor'
  parent: Microsoft.Azure.Devices.ExportImportDevice
  langs:
  - csharp
  - vb
  name: ExportImportDevice()
  nameWithType: ExportImportDevice.ExportImportDevice()
  fullName: Microsoft.Azure.Devices.ExportImportDevice.ExportImportDevice()
  type: Constructor
  source:
    remote:
      path: service/Microsoft.Azure.Devices/ExportImportDevice.cs
      branch: master
      repo: https://github.com/Azure/azure-iot-sdk-csharp.git
    id: .ctor
    path: src/azure-iot-sdks/service/Microsoft.Azure.Devices/ExportImportDevice.cs
    startLine: 19
  assemblies:
  - Microsoft.Azure.Devices.Uwp
  namespace: Microsoft.Azure.Devices
  summary: "\nmaking default ctor public\n"
  example: []
  syntax:
    content: public ExportImportDevice()
    content.vb: Public Sub New
  overload: Microsoft.Azure.Devices.ExportImportDevice.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Devices.ExportImportDevice.#ctor(Microsoft.Azure.Devices.Device,Microsoft.Azure.Devices.ImportMode)
  commentId: M:Microsoft.Azure.Devices.ExportImportDevice.#ctor(Microsoft.Azure.Devices.Device,Microsoft.Azure.Devices.ImportMode)
  id: '#ctor(Microsoft.Azure.Devices.Device,Microsoft.Azure.Devices.ImportMode)'
  parent: Microsoft.Azure.Devices.ExportImportDevice
  langs:
  - csharp
  - vb
  name: ExportImportDevice(Device, ImportMode)
  nameWithType: ExportImportDevice.ExportImportDevice(Device, ImportMode)
  fullName: Microsoft.Azure.Devices.ExportImportDevice.ExportImportDevice(Microsoft.Azure.Devices.Device, Microsoft.Azure.Devices.ImportMode)
  type: Constructor
  source:
    remote:
      path: service/Microsoft.Azure.Devices/ExportImportDevice.cs
      branch: master
      repo: https://github.com/Azure/azure-iot-sdk-csharp.git
    id: .ctor
    path: src/azure-iot-sdks/service/Microsoft.Azure.Devices/ExportImportDevice.cs
    startLine: 28
  assemblies:
  - Microsoft.Azure.Devices.Uwp
  namespace: Microsoft.Azure.Devices
  summary: "\nctor which takes a Device object along with import mode\n"
  example: []
  syntax:
    content: public ExportImportDevice(Device device, ImportMode importmode)
    content.vb: Public Sub New(device As Device, importmode As ImportMode)
    parameters:
    - id: device
      type: Microsoft.Azure.Devices.Device
      description: ''
    - id: importmode
      type: Microsoft.Azure.Devices.ImportMode
      description: ''
  overload: Microsoft.Azure.Devices.ExportImportDevice.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Devices.ExportImportDevice.Id
  commentId: P:Microsoft.Azure.Devices.ExportImportDevice.Id
  id: Id
  parent: Microsoft.Azure.Devices.ExportImportDevice
  langs:
  - csharp
  - vb
  name: Id
  nameWithType: ExportImportDevice.Id
  fullName: Microsoft.Azure.Devices.ExportImportDevice.Id
  type: Property
  source:
    remote:
      path: service/Microsoft.Azure.Devices/ExportImportDevice.cs
      branch: master
      repo: https://github.com/Azure/azure-iot-sdk-csharp.git
    id: Id
    path: src/azure-iot-sdks/service/Microsoft.Azure.Devices/ExportImportDevice.cs
    startLine: 41
  assemblies:
  - Microsoft.Azure.Devices.Uwp
  namespace: Microsoft.Azure.Devices
  summary: "\nId of the device\n"
  example: []
  syntax:
    content: >-
      [JsonProperty(PropertyName = "id", Required = Required.Always)]

      public string Id { get; set; }
    content.vb: >-
      <JsonProperty(PropertyName:="id", Required:=Required.Always)>

      Public Property Id As String
    parameters: []
    return:
      type: System.String
  overload: Microsoft.Azure.Devices.ExportImportDevice.Id*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor
    arguments: []
    namedArguments:
    - name: PropertyName
      type: System.String
      value: id
    - name: Required
      type: Newtonsoft.Json.Required
      value: 2
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Devices.ExportImportDevice.ETag
  commentId: P:Microsoft.Azure.Devices.ExportImportDevice.ETag
  id: ETag
  parent: Microsoft.Azure.Devices.ExportImportDevice
  langs:
  - csharp
  - vb
  name: ETag
  nameWithType: ExportImportDevice.ETag
  fullName: Microsoft.Azure.Devices.ExportImportDevice.ETag
  type: Property
  source:
    remote:
      path: service/Microsoft.Azure.Devices/ExportImportDevice.cs
      branch: master
      repo: https://github.com/Azure/azure-iot-sdk-csharp.git
    id: ETag
    path: src/azure-iot-sdks/service/Microsoft.Azure.Devices/ExportImportDevice.cs
    startLine: 47
  assemblies:
  - Microsoft.Azure.Devices.Uwp
  namespace: Microsoft.Azure.Devices
  summary: "\nETag of the device\n"
  example: []
  syntax:
    content: >-
      [JsonProperty(PropertyName = "eTag", NullValueHandling = NullValueHandling.Ignore)]

      public string ETag { get; set; }
    content.vb: >-
      <JsonProperty(PropertyName:="eTag", NullValueHandling:=NullValueHandling.Ignore)>

      Public Property ETag As String
    parameters: []
    return:
      type: System.String
  overload: Microsoft.Azure.Devices.ExportImportDevice.ETag*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor
    arguments: []
    namedArguments:
    - name: PropertyName
      type: System.String
      value: eTag
    - name: NullValueHandling
      type: Newtonsoft.Json.NullValueHandling
      value: 1
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Devices.ExportImportDevice.ImportMode
  commentId: P:Microsoft.Azure.Devices.ExportImportDevice.ImportMode
  id: ImportMode
  parent: Microsoft.Azure.Devices.ExportImportDevice
  langs:
  - csharp
  - vb
  name: ImportMode
  nameWithType: ExportImportDevice.ImportMode
  fullName: Microsoft.Azure.Devices.ExportImportDevice.ImportMode
  type: Property
  source:
    remote:
      path: service/Microsoft.Azure.Devices/ExportImportDevice.cs
      branch: master
      repo: https://github.com/Azure/azure-iot-sdk-csharp.git
    id: ImportMode
    path: src/azure-iot-sdks/service/Microsoft.Azure.Devices/ExportImportDevice.cs
    startLine: 62
  assemblies:
  - Microsoft.Azure.Devices.Uwp
  namespace: Microsoft.Azure.Devices
  summary: "\nImportMode of the device\n"
  example: []
  syntax:
    content: >-
      [JsonProperty(PropertyName = "importMode", DefaultValueHandling = DefaultValueHandling.Ignore | DefaultValueHandling.Populate | DefaultValueHandling.IgnoreAndPopulate)]

      public ImportMode ImportMode { get; set; }
    content.vb: >-
      <JsonProperty(PropertyName:="importMode", DefaultValueHandling:=DefaultValueHandling.Ignore Or DefaultValueHandling.Populate Or DefaultValueHandling.IgnoreAndPopulate)>

      Public Property ImportMode As ImportMode
    parameters: []
    return:
      type: Microsoft.Azure.Devices.ImportMode
  overload: Microsoft.Azure.Devices.ExportImportDevice.ImportMode*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor
    arguments: []
    namedArguments:
    - name: PropertyName
      type: System.String
      value: importMode
    - name: DefaultValueHandling
      type: Newtonsoft.Json.DefaultValueHandling
      value: 3
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Devices.ExportImportDevice.Status
  commentId: P:Microsoft.Azure.Devices.ExportImportDevice.Status
  id: Status
  parent: Microsoft.Azure.Devices.ExportImportDevice
  langs:
  - csharp
  - vb
  name: Status
  nameWithType: ExportImportDevice.Status
  fullName: Microsoft.Azure.Devices.ExportImportDevice.Status
  type: Property
  source:
    remote:
      path: service/Microsoft.Azure.Devices/ExportImportDevice.cs
      branch: master
      repo: https://github.com/Azure/azure-iot-sdk-csharp.git
    id: Status
    path: src/azure-iot-sdks/service/Microsoft.Azure.Devices/ExportImportDevice.cs
    startLine: 68
  assemblies:
  - Microsoft.Azure.Devices.Uwp
  namespace: Microsoft.Azure.Devices
  summary: "\nStatus of the device\n"
  example: []
  syntax:
    content: >-
      [JsonProperty(PropertyName = "status", Required = Required.Always)]

      public DeviceStatus Status { get; set; }
    content.vb: >-
      <JsonProperty(PropertyName:="status", Required:=Required.Always)>

      Public Property Status As DeviceStatus
    parameters: []
    return:
      type: Microsoft.Azure.Devices.DeviceStatus
  overload: Microsoft.Azure.Devices.ExportImportDevice.Status*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor
    arguments: []
    namedArguments:
    - name: PropertyName
      type: System.String
      value: status
    - name: Required
      type: Newtonsoft.Json.Required
      value: 2
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Devices.ExportImportDevice.StatusReason
  commentId: P:Microsoft.Azure.Devices.ExportImportDevice.StatusReason
  id: StatusReason
  parent: Microsoft.Azure.Devices.ExportImportDevice
  langs:
  - csharp
  - vb
  name: StatusReason
  nameWithType: ExportImportDevice.StatusReason
  fullName: Microsoft.Azure.Devices.ExportImportDevice.StatusReason
  type: Property
  source:
    remote:
      path: service/Microsoft.Azure.Devices/ExportImportDevice.cs
      branch: master
      repo: https://github.com/Azure/azure-iot-sdk-csharp.git
    id: StatusReason
    path: src/azure-iot-sdks/service/Microsoft.Azure.Devices/ExportImportDevice.cs
    startLine: 74
  assemblies:
  - Microsoft.Azure.Devices.Uwp
  namespace: Microsoft.Azure.Devices
  summary: "\nStatusReason of the device\n"
  example: []
  syntax:
    content: >-
      [JsonProperty(PropertyName = "statusReason", NullValueHandling = NullValueHandling.Ignore)]

      public string StatusReason { get; set; }
    content.vb: >-
      <JsonProperty(PropertyName:="statusReason", NullValueHandling:=NullValueHandling.Ignore)>

      Public Property StatusReason As String
    parameters: []
    return:
      type: System.String
  overload: Microsoft.Azure.Devices.ExportImportDevice.StatusReason*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor
    arguments: []
    namedArguments:
    - name: PropertyName
      type: System.String
      value: statusReason
    - name: NullValueHandling
      type: Newtonsoft.Json.NullValueHandling
      value: 1
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Devices.ExportImportDevice.Authentication
  commentId: P:Microsoft.Azure.Devices.ExportImportDevice.Authentication
  id: Authentication
  parent: Microsoft.Azure.Devices.ExportImportDevice
  langs:
  - csharp
  - vb
  name: Authentication
  nameWithType: ExportImportDevice.Authentication
  fullName: Microsoft.Azure.Devices.ExportImportDevice.Authentication
  type: Property
  source:
    remote:
      path: service/Microsoft.Azure.Devices/ExportImportDevice.cs
      branch: master
      repo: https://github.com/Azure/azure-iot-sdk-csharp.git
    id: Authentication
    path: src/azure-iot-sdks/service/Microsoft.Azure.Devices/ExportImportDevice.cs
    startLine: 80
  assemblies:
  - Microsoft.Azure.Devices.Uwp
  namespace: Microsoft.Azure.Devices
  summary: "\nAuthenticationMechanism of the device\n"
  example: []
  syntax:
    content: >-
      [JsonProperty(PropertyName = "authentication")]

      public AuthenticationMechanism Authentication { get; set; }
    content.vb: >-
      <JsonProperty(PropertyName:="authentication")>

      Public Property Authentication As AuthenticationMechanism
    parameters: []
    return:
      type: Microsoft.Azure.Devices.AuthenticationMechanism
  overload: Microsoft.Azure.Devices.ExportImportDevice.Authentication*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor
    arguments: []
    namedArguments:
    - name: PropertyName
      type: System.String
      value: authentication
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
references:
- uid: Microsoft.Azure.Devices
  commentId: N:Microsoft.Azure.Devices
  isExternal: false
  name: Microsoft.Azure.Devices
  nameWithType: Microsoft.Azure.Devices
  fullName: Microsoft.Azure.Devices
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Azure.Devices.ExportImportDevice.#ctor*
  commentId: Overload:Microsoft.Azure.Devices.ExportImportDevice.#ctor
  isExternal: false
  name: ExportImportDevice
  nameWithType: ExportImportDevice.ExportImportDevice
  fullName: Microsoft.Azure.Devices.ExportImportDevice.ExportImportDevice
- uid: Microsoft.Azure.Devices.Device
  commentId: T:Microsoft.Azure.Devices.Device
  parent: Microsoft.Azure.Devices
  isExternal: false
  name: Device
  nameWithType: Device
  fullName: Microsoft.Azure.Devices.Device
- uid: Microsoft.Azure.Devices.ImportMode
  commentId: T:Microsoft.Azure.Devices.ImportMode
  parent: Microsoft.Azure.Devices
  isExternal: false
  name: ImportMode
  nameWithType: ImportMode
  fullName: Microsoft.Azure.Devices.ImportMode
- uid: Microsoft.Azure.Devices.ExportImportDevice.Id*
  commentId: Overload:Microsoft.Azure.Devices.ExportImportDevice.Id
  isExternal: false
  name: Id
  nameWithType: ExportImportDevice.Id
  fullName: Microsoft.Azure.Devices.ExportImportDevice.Id
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.Azure.Devices.ExportImportDevice.ETag*
  commentId: Overload:Microsoft.Azure.Devices.ExportImportDevice.ETag
  isExternal: false
  name: ETag
  nameWithType: ExportImportDevice.ETag
  fullName: Microsoft.Azure.Devices.ExportImportDevice.ETag
- uid: Microsoft.Azure.Devices.ExportImportDevice.ImportMode*
  commentId: Overload:Microsoft.Azure.Devices.ExportImportDevice.ImportMode
  isExternal: false
  name: ImportMode
  nameWithType: ExportImportDevice.ImportMode
  fullName: Microsoft.Azure.Devices.ExportImportDevice.ImportMode
- uid: Microsoft.Azure.Devices.ExportImportDevice.Status*
  commentId: Overload:Microsoft.Azure.Devices.ExportImportDevice.Status
  isExternal: false
  name: Status
  nameWithType: ExportImportDevice.Status
  fullName: Microsoft.Azure.Devices.ExportImportDevice.Status
- uid: Microsoft.Azure.Devices.DeviceStatus
  commentId: T:Microsoft.Azure.Devices.DeviceStatus
  parent: Microsoft.Azure.Devices
  isExternal: false
  name: DeviceStatus
  nameWithType: DeviceStatus
  fullName: Microsoft.Azure.Devices.DeviceStatus
- uid: Microsoft.Azure.Devices.ExportImportDevice.StatusReason*
  commentId: Overload:Microsoft.Azure.Devices.ExportImportDevice.StatusReason
  isExternal: false
  name: StatusReason
  nameWithType: ExportImportDevice.StatusReason
  fullName: Microsoft.Azure.Devices.ExportImportDevice.StatusReason
- uid: Microsoft.Azure.Devices.ExportImportDevice.Authentication*
  commentId: Overload:Microsoft.Azure.Devices.ExportImportDevice.Authentication
  isExternal: false
  name: Authentication
  nameWithType: ExportImportDevice.Authentication
  fullName: Microsoft.Azure.Devices.ExportImportDevice.Authentication
- uid: Microsoft.Azure.Devices.AuthenticationMechanism
  commentId: T:Microsoft.Azure.Devices.AuthenticationMechanism
  parent: Microsoft.Azure.Devices
  isExternal: false
  name: AuthenticationMechanism
  nameWithType: AuthenticationMechanism
  fullName: Microsoft.Azure.Devices.AuthenticationMechanism
