### YamlMime:ManagedReference
items:
- uid: Microsoft.Azure.Devices.Receiver`1
  commentId: T:Microsoft.Azure.Devices.Receiver`1
  id: Receiver`1
  parent: Microsoft.Azure.Devices
  children:
  - Microsoft.Azure.Devices.Receiver`1.AbandonAsync(`0)
  - Microsoft.Azure.Devices.Receiver`1.CompleteAsync(`0)
  - Microsoft.Azure.Devices.Receiver`1.ReceiveAsync
  - Microsoft.Azure.Devices.Receiver`1.ReceiveAsync(System.TimeSpan)
  langs:
  - csharp
  - vb
  name: Receiver<T>
  nameWithType: Receiver<T>
  fullName: Microsoft.Azure.Devices.Receiver<T>
  type: Class
  source:
    remote:
      path: service/Microsoft.Azure.Devices/Receiver.cs
      branch: master
      repo: https://github.com/Azure/azure-iot-sdk-csharp.git
    id: Receiver
    path: src/azure-iot-sdks/service/Microsoft.Azure.Devices/Receiver.cs
    startLine: 11
  assemblies:
  - Microsoft.Azure.Devices.Uwp
  namespace: Microsoft.Azure.Devices
  summary: "\nContains methods that services can use to perform receive operations.\n"
  example: []
  syntax:
    content: public abstract class Receiver<T>
    content.vb: Public MustInherit Class Receiver(Of T)
    typeParameters:
    - id: T
  inheritance:
  - System.Object
  derivedClasses:
  - Microsoft.Azure.Devices.FeedbackReceiver`1
  - Microsoft.Azure.Devices.FileNotificationReceiver`1
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  nameWithType.vb: Receiver(Of T)
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
  fullName.vb: Microsoft.Azure.Devices.Receiver(Of T)
  name.vb: Receiver(Of T)
- uid: Microsoft.Azure.Devices.Receiver`1.ReceiveAsync
  commentId: M:Microsoft.Azure.Devices.Receiver`1.ReceiveAsync
  id: ReceiveAsync
  parent: Microsoft.Azure.Devices.Receiver`1
  langs:
  - csharp
  - vb
  name: ReceiveAsync()
  nameWithType: Receiver<T>.ReceiveAsync()
  fullName: Microsoft.Azure.Devices.Receiver<T>.ReceiveAsync()
  type: Method
  source:
    remote:
      path: service/Microsoft.Azure.Devices/Receiver.cs
      branch: master
      repo: https://github.com/Azure/azure-iot-sdk-csharp.git
    id: ReceiveAsync
    path: src/azure-iot-sdks/service/Microsoft.Azure.Devices/Receiver.cs
    startLine: 17
  assemblies:
  - Microsoft.Azure.Devices.Uwp
  namespace: Microsoft.Azure.Devices
  summary: "\nReceive a message using the default timeout.\n"
  example: []
  syntax:
    content: public abstract Task<T> ReceiveAsync()
    content.vb: Public MustOverride Function ReceiveAsync As Task(Of T)
    return:
      type: System.Threading.Tasks.Task{{T}}
      description: The receive message or null if there was no message until the default timeout
  overload: Microsoft.Azure.Devices.Receiver`1.ReceiveAsync*
  nameWithType.vb: Receiver(Of T).ReceiveAsync()
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
  fullName.vb: Microsoft.Azure.Devices.Receiver(Of T).ReceiveAsync()
- uid: Microsoft.Azure.Devices.Receiver`1.ReceiveAsync(System.TimeSpan)
  commentId: M:Microsoft.Azure.Devices.Receiver`1.ReceiveAsync(System.TimeSpan)
  id: ReceiveAsync(System.TimeSpan)
  parent: Microsoft.Azure.Devices.Receiver`1
  langs:
  - csharp
  - vb
  name: ReceiveAsync(TimeSpan)
  nameWithType: Receiver<T>.ReceiveAsync(TimeSpan)
  fullName: Microsoft.Azure.Devices.Receiver<T>.ReceiveAsync(System.TimeSpan)
  type: Method
  source:
    remote:
      path: service/Microsoft.Azure.Devices/Receiver.cs
      branch: master
      repo: https://github.com/Azure/azure-iot-sdk-csharp.git
    id: ReceiveAsync
    path: src/azure-iot-sdks/service/Microsoft.Azure.Devices/Receiver.cs
    startLine: 24
  assemblies:
  - Microsoft.Azure.Devices.Uwp
  namespace: Microsoft.Azure.Devices
  summary: "\nReceives a message\n"
  example: []
  syntax:
    content: public abstract Task<T> ReceiveAsync(TimeSpan timeout)
    content.vb: Public MustOverride Function ReceiveAsync(timeout As TimeSpan) As Task(Of T)
    parameters:
    - id: timeout
      type: System.TimeSpan
      description: The timeout for receiving a message
    return:
      type: System.Threading.Tasks.Task{{T}}
      description: The receive message or null if there was no message until the specified timeout
  overload: Microsoft.Azure.Devices.Receiver`1.ReceiveAsync*
  nameWithType.vb: Receiver(Of T).ReceiveAsync(TimeSpan)
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
  fullName.vb: Microsoft.Azure.Devices.Receiver(Of T).ReceiveAsync(System.TimeSpan)
- uid: Microsoft.Azure.Devices.Receiver`1.CompleteAsync(`0)
  commentId: M:Microsoft.Azure.Devices.Receiver`1.CompleteAsync(`0)
  id: CompleteAsync(`0)
  parent: Microsoft.Azure.Devices.Receiver`1
  langs:
  - csharp
  - vb
  name: CompleteAsync(T)
  nameWithType: Receiver<T>.CompleteAsync(T)
  fullName: Microsoft.Azure.Devices.Receiver<T>.CompleteAsync(T)
  type: Method
  source:
    remote:
      path: service/Microsoft.Azure.Devices/Receiver.cs
      branch: master
      repo: https://github.com/Azure/azure-iot-sdk-csharp.git
    id: CompleteAsync
    path: src/azure-iot-sdks/service/Microsoft.Azure.Devices/Receiver.cs
    startLine: 29
  assemblies:
  - Microsoft.Azure.Devices.Uwp
  namespace: Microsoft.Azure.Devices
  summary: "\nDeletes a received message from the queue\n"
  example: []
  syntax:
    content: public abstract Task CompleteAsync(T t)
    content.vb: Public MustOverride Function CompleteAsync(t As T) As Task
    parameters:
    - id: t
      type: '{T}'
    return:
      type: System.Threading.Tasks.Task
  overload: Microsoft.Azure.Devices.Receiver`1.CompleteAsync*
  nameWithType.vb: Receiver(Of T).CompleteAsync(T)
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
  fullName.vb: Microsoft.Azure.Devices.Receiver(Of T).CompleteAsync(T)
- uid: Microsoft.Azure.Devices.Receiver`1.AbandonAsync(`0)
  commentId: M:Microsoft.Azure.Devices.Receiver`1.AbandonAsync(`0)
  id: AbandonAsync(`0)
  parent: Microsoft.Azure.Devices.Receiver`1
  langs:
  - csharp
  - vb
  name: AbandonAsync(T)
  nameWithType: Receiver<T>.AbandonAsync(T)
  fullName: Microsoft.Azure.Devices.Receiver<T>.AbandonAsync(T)
  type: Method
  source:
    remote:
      path: service/Microsoft.Azure.Devices/Receiver.cs
      branch: master
      repo: https://github.com/Azure/azure-iot-sdk-csharp.git
    id: AbandonAsync
    path: src/azure-iot-sdks/service/Microsoft.Azure.Devices/Receiver.cs
    startLine: 34
  assemblies:
  - Microsoft.Azure.Devices.Uwp
  namespace: Microsoft.Azure.Devices
  summary: "\nPuts a received message back into the queue\n"
  example: []
  syntax:
    content: public abstract Task AbandonAsync(T t)
    content.vb: Public MustOverride Function AbandonAsync(t As T) As Task
    parameters:
    - id: t
      type: '{T}'
    return:
      type: System.Threading.Tasks.Task
  overload: Microsoft.Azure.Devices.Receiver`1.AbandonAsync*
  nameWithType.vb: Receiver(Of T).AbandonAsync(T)
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
  fullName.vb: Microsoft.Azure.Devices.Receiver(Of T).AbandonAsync(T)
references:
- uid: Microsoft.Azure.Devices
  commentId: N:Microsoft.Azure.Devices
  isExternal: false
  name: Microsoft.Azure.Devices
  nameWithType: Microsoft.Azure.Devices
  fullName: Microsoft.Azure.Devices
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Azure.Devices.Receiver`1.ReceiveAsync*
  commentId: Overload:Microsoft.Azure.Devices.Receiver`1.ReceiveAsync
  isExternal: false
  name: ReceiveAsync
  nameWithType: Receiver.ReceiveAsync
  fullName: Microsoft.Azure.Devices.Receiver.ReceiveAsync
- uid: System.Threading.Tasks.Task{{T}}
  commentId: T:System.Threading.Tasks.Task{`0}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<T>
  nameWithType: Task<T>
  fullName: System.Threading.Tasks.Task<T>
  nameWithType.vb: Task(Of T)
  fullname.vb: System.Threading.Tasks.Task(Of T)
  name.vb: Task(Of T)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullname.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: System.TimeSpan
  commentId: T:System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: Microsoft.Azure.Devices.Receiver`1.CompleteAsync*
  commentId: Overload:Microsoft.Azure.Devices.Receiver`1.CompleteAsync
  isExternal: false
  name: CompleteAsync
  nameWithType: Receiver.CompleteAsync
  fullName: Microsoft.Azure.Devices.Receiver.CompleteAsync
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: T
  isExternal: false
  name: T
  nameWithType: T
  fullName: T
- uid: Microsoft.Azure.Devices.Receiver`1.AbandonAsync*
  commentId: Overload:Microsoft.Azure.Devices.Receiver`1.AbandonAsync
  isExternal: false
  name: AbandonAsync
  nameWithType: Receiver.AbandonAsync
  fullName: Microsoft.Azure.Devices.Receiver.AbandonAsync
