### YamlMime:ManagedReference
items:
- uid: Microsoft.Azure.Devices.DeviceJobParameters
  commentId: T:Microsoft.Azure.Devices.DeviceJobParameters
  id: DeviceJobParameters
  parent: Microsoft.Azure.Devices
  children:
  - Microsoft.Azure.Devices.DeviceJobParameters.#ctor(Microsoft.Azure.Devices.JobType,System.Collections.Generic.IEnumerable{System.String})
  - Microsoft.Azure.Devices.DeviceJobParameters.#ctor(Microsoft.Azure.Devices.JobType,System.String)
  - Microsoft.Azure.Devices.DeviceJobParameters.DeviceIds
  langs:
  - csharp
  - vb
  name: DeviceJobParameters
  nameWithType: DeviceJobParameters
  fullName: Microsoft.Azure.Devices.DeviceJobParameters
  type: Class
  source:
    remote:
      path: service/Microsoft.Azure.Devices/JobClient/DeviceJobParameters.cs
      branch: master
      repo: https://github.com/Azure/azure-iot-sdk-csharp.git
    id: DeviceJobParameters
    path: src/azure-iot-sdks/service/Microsoft.Azure.Devices/JobClient/DeviceJobParameters.cs
    startLine: 14
  assemblies:
  - Microsoft.Azure.Devices.Uwp
  namespace: Microsoft.Azure.Devices
  summary: "\nExtend JobParameters with device Ids\n"
  example: []
  syntax:
    content: 'public class DeviceJobParameters : JobParameters'
    content.vb: >-
      Public Class DeviceJobParameters
          Inherits JobParameters
  inheritance:
  - System.Object
  - Microsoft.Azure.Devices.JobParameters
  inheritedMembers:
  - Microsoft.Azure.Devices.JobParameters.JobType
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.Azure.Devices.DeviceJobParameters.#ctor(Microsoft.Azure.Devices.JobType,System.String)
  commentId: M:Microsoft.Azure.Devices.DeviceJobParameters.#ctor(Microsoft.Azure.Devices.JobType,System.String)
  id: '#ctor(Microsoft.Azure.Devices.JobType,System.String)'
  parent: Microsoft.Azure.Devices.DeviceJobParameters
  langs:
  - csharp
  - vb
  name: DeviceJobParameters(JobType, String)
  nameWithType: DeviceJobParameters.DeviceJobParameters(JobType, String)
  fullName: Microsoft.Azure.Devices.DeviceJobParameters.DeviceJobParameters(Microsoft.Azure.Devices.JobType, System.String)
  type: Constructor
  source:
    remote:
      path: service/Microsoft.Azure.Devices/JobClient/DeviceJobParameters.cs
      branch: master
      repo: https://github.com/Azure/azure-iot-sdk-csharp.git
    id: .ctor
    path: src/azure-iot-sdks/service/Microsoft.Azure.Devices/JobClient/DeviceJobParameters.cs
    startLine: 19
  assemblies:
  - Microsoft.Azure.Devices.Uwp
  namespace: Microsoft.Azure.Devices
  summary: "\nParameters for parameterless device job on a single device\n"
  example: []
  syntax:
    content: public DeviceJobParameters(JobType jobType, string deviceId)
    content.vb: Public Sub New(jobType As JobType, deviceId As String)
    parameters:
    - id: jobType
      type: Microsoft.Azure.Devices.JobType
    - id: deviceId
      type: System.String
  overload: Microsoft.Azure.Devices.DeviceJobParameters.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Devices.DeviceJobParameters.#ctor(Microsoft.Azure.Devices.JobType,System.Collections.Generic.IEnumerable{System.String})
  commentId: M:Microsoft.Azure.Devices.DeviceJobParameters.#ctor(Microsoft.Azure.Devices.JobType,System.Collections.Generic.IEnumerable{System.String})
  id: '#ctor(Microsoft.Azure.Devices.JobType,System.Collections.Generic.IEnumerable{System.String})'
  parent: Microsoft.Azure.Devices.DeviceJobParameters
  langs:
  - csharp
  - vb
  name: DeviceJobParameters(JobType, IEnumerable<String>)
  nameWithType: DeviceJobParameters.DeviceJobParameters(JobType, IEnumerable<String>)
  fullName: Microsoft.Azure.Devices.DeviceJobParameters.DeviceJobParameters(Microsoft.Azure.Devices.JobType, System.Collections.Generic.IEnumerable<System.String>)
  type: Constructor
  source:
    remote:
      path: service/Microsoft.Azure.Devices/JobClient/DeviceJobParameters.cs
      branch: master
      repo: https://github.com/Azure/azure-iot-sdk-csharp.git
    id: .ctor
    path: src/azure-iot-sdks/service/Microsoft.Azure.Devices/JobClient/DeviceJobParameters.cs
    startLine: 27
  assemblies:
  - Microsoft.Azure.Devices.Uwp
  namespace: Microsoft.Azure.Devices
  summary: "\nParameters for parameterless device job on multiple devices\n"
  example: []
  syntax:
    content: public DeviceJobParameters(JobType jobType, IEnumerable<string> deviceIds)
    content.vb: Public Sub New(jobType As JobType, deviceIds As IEnumerable(Of String))
    parameters:
    - id: jobType
      type: Microsoft.Azure.Devices.JobType
    - id: deviceIds
      type: System.Collections.Generic.IEnumerable{System.String}
  overload: Microsoft.Azure.Devices.DeviceJobParameters.#ctor*
  nameWithType.vb: DeviceJobParameters.DeviceJobParameters(JobType, IEnumerable(Of String))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.Devices.DeviceJobParameters.DeviceJobParameters(Microsoft.Azure.Devices.JobType, System.Collections.Generic.IEnumerable(Of System.String))
  name.vb: DeviceJobParameters(JobType, IEnumerable(Of String))
- uid: Microsoft.Azure.Devices.DeviceJobParameters.DeviceIds
  commentId: P:Microsoft.Azure.Devices.DeviceJobParameters.DeviceIds
  id: DeviceIds
  parent: Microsoft.Azure.Devices.DeviceJobParameters
  langs:
  - csharp
  - vb
  name: DeviceIds
  nameWithType: DeviceJobParameters.DeviceIds
  fullName: Microsoft.Azure.Devices.DeviceJobParameters.DeviceIds
  type: Property
  source:
    remote:
      path: service/Microsoft.Azure.Devices/JobClient/DeviceJobParameters.cs
      branch: master
      repo: https://github.com/Azure/azure-iot-sdk-csharp.git
    id: DeviceIds
    path: src/azure-iot-sdks/service/Microsoft.Azure.Devices/JobClient/DeviceJobParameters.cs
    startLine: 47
  assemblies:
  - Microsoft.Azure.Devices.Uwp
  namespace: Microsoft.Azure.Devices
  summary: "\nIds of target devices\n"
  example: []
  syntax:
    content: public IList<string> DeviceIds { get; }
    content.vb: Public ReadOnly Property DeviceIds As IList(Of String)
    parameters: []
    return:
      type: System.Collections.Generic.IList{System.String}
  overload: Microsoft.Azure.Devices.DeviceJobParameters.DeviceIds*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
references:
- uid: Microsoft.Azure.Devices
  commentId: N:Microsoft.Azure.Devices
  isExternal: false
  name: Microsoft.Azure.Devices
  nameWithType: Microsoft.Azure.Devices
  fullName: Microsoft.Azure.Devices
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Microsoft.Azure.Devices.JobParameters
  commentId: T:Microsoft.Azure.Devices.JobParameters
  parent: Microsoft.Azure.Devices
  isExternal: false
  name: JobParameters
  nameWithType: JobParameters
  fullName: Microsoft.Azure.Devices.JobParameters
- uid: Microsoft.Azure.Devices.JobParameters.JobType
  commentId: P:Microsoft.Azure.Devices.JobParameters.JobType
  parent: Microsoft.Azure.Devices.JobParameters
  isExternal: false
  name: JobType
  nameWithType: JobParameters.JobType
  fullName: Microsoft.Azure.Devices.JobParameters.JobType
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Azure.Devices.DeviceJobParameters.#ctor*
  commentId: Overload:Microsoft.Azure.Devices.DeviceJobParameters.#ctor
  isExternal: false
  name: DeviceJobParameters
  nameWithType: DeviceJobParameters.DeviceJobParameters
  fullName: Microsoft.Azure.Devices.DeviceJobParameters.DeviceJobParameters
- uid: Microsoft.Azure.Devices.JobType
  commentId: T:Microsoft.Azure.Devices.JobType
  parent: Microsoft.Azure.Devices
  isExternal: false
  name: JobType
  nameWithType: JobType
  fullName: Microsoft.Azure.Devices.JobType
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Collections.Generic.IEnumerable{System.String}
  commentId: T:System.Collections.Generic.IEnumerable{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<String>
  nameWithType: IEnumerable<String>
  fullName: System.Collections.Generic.IEnumerable<System.String>
  nameWithType.vb: IEnumerable(Of String)
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.String)
  name.vb: IEnumerable(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullname.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Microsoft.Azure.Devices.DeviceJobParameters.DeviceIds*
  commentId: Overload:Microsoft.Azure.Devices.DeviceJobParameters.DeviceIds
  isExternal: false
  name: DeviceIds
  nameWithType: DeviceJobParameters.DeviceIds
  fullName: Microsoft.Azure.Devices.DeviceJobParameters.DeviceIds
- uid: System.Collections.Generic.IList{System.String}
  commentId: T:System.Collections.Generic.IList{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<String>
  nameWithType: IList<String>
  fullName: System.Collections.Generic.IList<System.String>
  nameWithType.vb: IList(Of String)
  fullname.vb: System.Collections.Generic.IList(Of System.String)
  name.vb: IList(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList`1
  commentId: T:System.Collections.Generic.IList`1
  isExternal: true
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullname.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
